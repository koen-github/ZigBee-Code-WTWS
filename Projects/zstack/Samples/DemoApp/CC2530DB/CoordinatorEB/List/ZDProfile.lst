###############################################################################
#
# IAR C/C++ Compiler V9.20.1.2476 for 8051                22/Feb/2017  14:31:45
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\koen\ZigBee-Code-WTWS\Components\stack\zdo\ZDProfile.c
#    Command line       =  
#        -f
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00002000 -DZDAPP_CONFIG_PAN_ID=0xABCD
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={'H', 'O', 'G', 'E', 'S',
#        'C', 'H', 'O', 'O', 'L', 'U', 'T', 'R', 'E', 'C', 'H'}"
#        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440
#        C:\Users\koen\ZigBee-Code-WTWS\Components\stack\zdo\ZDProfile.c -D
#        HOLD_AUTO_START -D BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D
#        NV_RESTORE -D HAL_UART=TRUE -lC
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\
#        -lA
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\
#        --diag_suppress Pe001,Pa010,Pe1665 -o
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\Obj\
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\Source\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ol --require_prototypes
#    List file          =  
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\ZDProfile.lst
#    Object file        =  
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\Obj\ZDProfile.r51
#
###############################################################################

C:\Users\koen\ZigBee-Code-WTWS\Components\stack\zdo\ZDProfile.c
      1          /**************************************************************************************************
      2            Filename:       ZDProfile.c
      3            Revised:        $Date: 2013-10-02 15:57:50 -0700 (Wed, 02 Oct 2013) $
      4            Revision:       $Revision: 35529 $
      5          
      6            Description:    This is the Zigbee Device Profile.
      7          
      8          
      9            Copyright 2004-2013 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComDef.h"
     44          #include "OSAL.h"
     45          #include "AF.h"
     46          #include "NLMEDE.h"
     47          #include "nwk_util.h"
     48          #include "APS.h"
     49          
     50          #include "AddrMgr.h"
     51          #include "ZDConfig.h"
     52          #include "ZDProfile.h"
     53          #include "ZDObject.h"
     54          #include "ZDNwkMgr.h"
     55          
     56          #if defined( LCD_SUPPORTED )
     57            #include "OnBoard.h"
     58          #endif
     59          
     60          #include "nwk_util.h"
     61          
     62          #if defined( MT_ZDO_FUNC )
     63            #include "MT_ZDO.h"
     64          #endif
     65          
     66          /*********************************************************************
     67           * MACROS
     68           */
     69          
     70          #define ZADDR_TO_AFADDR( pZADDR, AFADDR ) {                            \
     71            (AFADDR).endPoint = ZDP_AF_ENDPOINT;                                 \
     72            (AFADDR).addrMode = (afAddrMode_t)(pZADDR)->addrMode;                \
     73            (AFADDR).addr.shortAddr = (pZADDR)->addr.shortAddr;                  \
     74          }
     75          
     76          #define FillAndSendBuffer( TRANSSEQ, ADDR, ID, LEN, BUF ) {     \
     77            afStatus_t stat;                                    \
     78            ZDP_TmpBuf = (BUF)+1;                               \
     79            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     80            osal_mem_free( (BUF) );                             \
     81            ZDP_TmpBuf = ZDP_Buf+1;                             \
     82            return stat;                                        \
     83          }
     84          
     85          #define FillAndSendTxOptions( TRANSSEQ, ADDR, ID, LEN, TxO ) {  \
     86            afStatus_t stat;                                    \
     87            ZDP_TxOptions = (TxO);                              \
     88            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     89            ZDP_TxOptions = AF_TX_OPTIONS_NONE;                 \
     90            return stat;                                        \
     91          }
     92          
     93          #define FillAndSendBufferTxOptions( TRANSSEQ, ADDR, ID, LEN, BUF, TxO ) { \
     94            afStatus_t stat;                                    \
     95            ZDP_TmpBuf = (BUF)+1;                               \
     96            ZDP_TxOptions = (TxO);                              \
     97            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     98            osal_mem_free( (BUF) );                             \
     99            ZDP_TmpBuf = ZDP_Buf+1;                             \
    100            ZDP_TxOptions = AF_TX_OPTIONS_NONE;                 \
    101            return stat;                                        \
    102          }
    103          
    104          /*********************************************************************
    105           * CONSTANTS
    106           */
    107          
    108          #define ZDP_BUF_SZ          80
    109          

   \                                 In  segment CODE_C, align 1
    110          CONST byte ZDP_AF_ENDPOINT = 0;
   \                     ZDP_AF_ENDPOINT:
   \   000000   00           DB 0
    111          
    112          // Routing table options
    113          #define ZP_RTG_RECORD       0x04       // Routing table indication that a route record is needed
    114          #define ZP_MTO_ROUTE_RC     0x08       // Concentrator with routing cache
    115          #define ZP_MTO_ROUTE_NRC    0x10       // Concentrator with limited cache
    116          
    117          
    118          /*********************************************************************
    119           * TYPEDEFS
    120           */
    121          typedef struct
    122          {
    123            void *next;
    124            uint8 taskID;
    125            uint16 clusterID;
    126          } ZDO_MsgCB_t;
    127          
    128          
    129          /*********************************************************************
    130           * GLOBAL VARIABLES
    131           */
    132          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    133          byte ZDP_TransID = 0;
   \                     ZDP_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    134          
    135          /*********************************************************************
    136           * EXTERNAL VARIABLES
    137           */
    138          
    139          extern endPointDesc_t ZDApp_epDesc;
    140          
    141          /*********************************************************************
    142           * EXTERNAL FUNCTIONS
    143           */
    144          
    145          /*********************************************************************
    146           * LOCAL FUNCTIONS
    147           */
    148          
    149          static afStatus_t fillAndSend( uint8 *transSeq, zAddrType_t *addr, cId_t clusterID, byte len );
    150          uint8 ZDO_SendMsgCBs( zdoIncomingMsg_t *inMsg );
    151          void zdpProcessAddrReq( zdoIncomingMsg_t *inMsg );
    152          
    153          /*********************************************************************
    154           * LOCAL VARIABLES
    155           */
    156          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    157          static uint8  ZDP_Buf[ ZDP_BUF_SZ ];
   \                     ZDP_Buf:
   \   000000                DS 80
   \   000050                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    158          static uint8 *ZDP_TmpBuf = ZDP_Buf+1;
   \                     ZDP_TmpBuf:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for ZDP_TmpBuf>`
   \   000002                REQUIRE __INIT_XDATA_I
    159          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    160          byte ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \                     ZDP_TxOptions:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    161          ZDO_MsgCB_t *zdoMsgCBs = (ZDO_MsgCB_t *)NULL;
   \                     zdoMsgCBs:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    162          
    163          /*********************************************************************
    164           * ZDO Message Processing table
    165           */
    166          
    167          typedef void (*pfnZDPMsgProcessor)( zdoIncomingMsg_t *inMsg );
    168          
    169          typedef struct
    170          {
    171            uint16                clusterID;
    172            pfnZDPMsgProcessor    pFn;
    173          } zdpMsgProcItem_t;
    174          

   \                                 In  segment CODE_C, align 1
    175          CONST zdpMsgProcItem_t zdpMsgProcs[] =
   \                     zdpMsgProcs:
   \   000000   0000         DW 0
   \   000002   ....         DW `??zdpProcessAddrReq::?relay`
   \   000004   1300         DW 19
   \   000006   ....         DW `??ZDO_ProcessDeviceAnnce::?relay`
   \   000008   0100         DW 1
   \   00000A   ....         DW `??zdpProcessAddrReq::?relay`
   \   00000C   0200         DW 2
   \   00000E   ....         DW `??ZDO_ProcessNodeDescReq::?relay`
   \   000010   0300         DW 3
   \   000012   ....         DW `??ZDO_ProcessPowerDescReq::?relay`
   \   000014   0400         DW 4
   \   000016   ....         DW `??ZDO_ProcessSimpleDescReq::?relay`
   \   000018   0500         DW 5
   \   00001A   ....         DW `??ZDO_ProcessActiveEPReq::?relay`
   \   00001C   0600         DW 6
   \   00001E   ....         DW `??ZDO_ProcessMatchDescReq::?relay`
   \   000020   FFFF         DW 65535
   \   000022   0000         DW 0H
    176          {
    177          #if ( RFD_RCVC_ALWAYS_ON==TRUE ) || ( ZG_BUILD_RTR_TYPE )
    178            // These aren't processed by sleeping end devices.
    179            { NWK_addr_req,           zdpProcessAddrReq },
    180            { Device_annce,           ZDO_ProcessDeviceAnnce },
    181          #endif
    182            { IEEE_addr_req,          zdpProcessAddrReq },
    183            { Node_Desc_req,          ZDO_ProcessNodeDescReq },
    184            { Power_Desc_req,         ZDO_ProcessPowerDescReq },
    185            { Simple_Desc_req,        ZDO_ProcessSimpleDescReq },
    186            { Active_EP_req,          ZDO_ProcessActiveEPReq },
    187            { Match_Desc_req,         ZDO_ProcessMatchDescReq },
    188          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
    189            { Mgmt_NWK_Disc_req,      ZDO_ProcessMgmtNwkDiscReq },
    190          #endif
    191          #if defined ( ZDO_MGMT_LQI_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
    192            { Mgmt_Lqi_req,           ZDO_ProcessMgmtLqiReq },
    193          #endif
    194          #if defined ( ZDO_MGMT_RTG_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
    195            { Mgmt_Rtg_req,           ZDO_ProcessMgmtRtgReq },
    196          #endif
    197          #if defined ( ZDO_MGMT_BIND_RESPONSE ) && defined ( REFLECTOR )
    198            { Mgmt_Bind_req,          ZDO_ProcessMgmtBindReq },
    199          #endif
    200          #if defined ( ZDO_MGMT_JOINDIRECT_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
    201            { Mgmt_Direct_Join_req,   ZDO_ProcessMgmtDirectJoinReq },
    202          #endif
    203          #if defined ( ZDO_MGMT_LEAVE_RESPONSE )
    204            { Mgmt_Leave_req,         ZDO_ProcessMgmtLeaveReq },
    205          #endif
    206          #if defined ( ZDO_MGMT_PERMIT_JOIN_RESPONSE )  && ( ZG_BUILD_RTR_TYPE )
    207            { Mgmt_Permit_Join_req,   ZDO_ProcessMgmtPermitJoinReq },
    208          #endif
    209          #if defined ( ZDO_USERDESC_RESPONSE )
    210            { User_Desc_req,          ZDO_ProcessUserDescReq },
    211          #endif
    212          #if defined ( ZDO_USERDESCSET_RESPONSE )
    213            { User_Desc_set,          ZDO_ProcessUserDescSet },
    214          #endif
    215          #if defined ( ZDO_SERVERDISC_RESPONSE )
    216            { Server_Discovery_req,   ZDO_ProcessServerDiscReq },
    217          #endif
    218          #if defined ( ZIGBEE_CHILD_AGING )
    219          #if defined ( ZDO_ENDDEVICETIMEOUT_REQUEST )
    220            { End_Device_Timeout_req, ZDO_ProcessEndDeviceTimeoutReq },
    221          #endif
    222          #endif // ZIGBEE_CHILD_AGING
    223            {0xFFFF, NULL} // Last
    224          };
    225          
    226          /*********************************************************************
    227           * @fn          fillAndSend
    228           *
    229           * @brief       Combined to reduce space
    230           *
    231           * @param
    232           * @param
    233           *
    234           * @return      afStatus_t
    235           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    236          static afStatus_t fillAndSend( uint8 *transSeq, zAddrType_t *addr, cId_t clusterID, byte len )
   \                     fillAndSend:
    237          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   \   000012   89..         MOV     ?V2,R1
    238            afAddrType_t afAddr;
    239          
    240            osal_memset( &afAddr, 0, sizeof(afAddrType_t) );
   \   000014                ; Setup parameters for call to function osal_memset
   \   000014   7C0C         MOV     R4,#0xc
   \   000016   7D00         MOV     R5,#0x0
   \   000018   7900         MOV     R1,#0x0
   \   00001A   AA..         MOV     R2,?XSP + 0
   \   00001C   AB..         MOV     R3,?XSP + 1
   \   00001E   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    241            ZADDR_TO_AFADDR( addr, afAddr );
   \   000021   90....       MOV     DPTR,#ZDP_AF_ENDPOINT
   \   000024   E4           CLR     A
   \   000025   93           MOVC    A,@A+DPTR
   \   000026   C0E0         PUSH    A
   \   000028   7409         MOV     A,#0x9
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   D0E0         POP     A
   \   00002F   F0           MOVX    @DPTR,A
   \   000030   8E82         MOV     DPL,R6
   \   000032   8F83         MOV     DPH,R7
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   A3           INC     DPTR
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   C0E0         PUSH    A
   \   00003F   7408         MOV     A,#0x8
   \   000041   12....       LCALL   ?XSTACK_DISP0_8
   \   000044   D0E0         POP     A
   \   000046   F0           MOVX    @DPTR,A
   \   000047   8E82         MOV     DPL,R6
   \   000049   8F83         MOV     DPH,R7
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   F8           MOV     R0,A
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   F9           MOV     R1,A
   \   000050   85..82       MOV     DPL,?XSP + 0
   \   000053   85..83       MOV     DPH,?XSP + 1
   \   000056   E8           MOV     A,R0
   \   000057   F0           MOVX    @DPTR,A
   \   000058   A3           INC     DPTR
   \   000059   E9           MOV     A,R1
   \   00005A   F0           MOVX    @DPTR,A
    242          
    243            *(ZDP_TmpBuf-1) = *transSeq;
   \   00005B   85..82       MOV     DPL,?V0
   \   00005E   85..83       MOV     DPH,?V1
   \   000061   E0           MOVX    A,@DPTR
   \   000062   C0E0         PUSH    A
   \   000064   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000067   E0           MOVX    A,@DPTR
   \   000068   F8           MOV     R0,A
   \   000069   A3           INC     DPTR
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   C8           XCH     A,R0
   \   00006C   24FF         ADD     A,#-0x1
   \   00006E   F582         MOV     DPL,A
   \   000070   C8           XCH     A,R0
   \   000071   34FF         ADDC    A,#-0x1
   \   000073   F583         MOV     DPH,A
   \   000075   D0E0         POP     A
   \   000077   F0           MOVX    @DPTR,A
    244          
    245            return AF_DataRequest( &afAddr, &ZDApp_epDesc, clusterID,
    246                                     (uint16)(len+1), (uint8*)(ZDP_TmpBuf-1),
    247                                     transSeq, ZDP_TxOptions,  AF_DEFAULT_RADIUS );
   \   000078                ; Setup parameters for call to function AF_DataRequest
   \   000078   75..1E       MOV     ?V3,#0x1e
   \   00007B   78..         MOV     R0,#?V3
   \   00007D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000080   78..         MOV     R0,#?V0
   \   000082   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000085   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000088   E0           MOVX    A,@DPTR
   \   000089   24FF         ADD     A,#-0x1
   \   00008B   F5..         MOV     ?V0,A
   \   00008D   A3           INC     DPTR
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   34FF         ADDC    A,#-0x1
   \   000091   F5..         MOV     ?V1,A
   \   000093   78..         MOV     R0,#?V0
   \   000095   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000098   A8..         MOV     R0,?V2
   \   00009A   7900         MOV     R1,#0x0
   \   00009C   E8           MOV     A,R0
   \   00009D   2401         ADD     A,#0x1
   \   00009F   F5..         MOV     ?V0,A
   \   0000A1   E4           CLR     A
   \   0000A2   39           ADDC    A,R1
   \   0000A3   F5..         MOV     ?V1,A
   \   0000A5   78..         MOV     R0,#?V0
   \   0000A7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AA   741F         MOV     A,#0x1f
   \   0000AC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AF   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000B2   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000B5   E0           MOVX    A,@DPTR
   \   0000B6   F9           MOV     R1,A
   \   0000B7   7C..         MOV     R4,#ZDApp_epDesc & 0xff
   \   0000B9   7D..         MOV     R5,#(ZDApp_epDesc >> 8) & 0xff
   \   0000BB   7409         MOV     A,#0x9
   \   0000BD   12....       LCALL   ?XSTACK_DISP101_8
   \   0000C0   12....       LCALL   `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   0000C3   7409         MOV     A,#0x9
   \   0000C5   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C8   740C         MOV     A,#0xc
   \   0000CA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000CD   7F04         MOV     R7,#0x4
   \   0000CF   02....       LJMP    ?BANKED_LEAVE_XDATA
    248          
    249          }
    250          
    251          /*********************************************************************
    252           * @fn          ZDP_SendData
    253           *
    254           * @brief       This builds and send a request message that has
    255           *              NWKAddrOfInterest as its only parameter.
    256           *
    257           * @param       dstAddr - destination address
    258           * @param       cmd - clusterID
    259           * @param       dataLen - number of bytes of data
    260           * @param       data - pointer to the data
    261           * @param       SecurityEnable - Security Options
    262           *
    263           * @return      afStatus_t
    264           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    265          afStatus_t ZDP_SendData( uint8 *TransSeq, zAddrType_t *dstAddr, uint16 cmd,
   \                     ZDP_SendData:
    266                                  byte len, uint8 *buf, byte SecurityEnable )
    267          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
    268            uint8 *pBuf = ZDP_TmpBuf;
   \   000007   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F5..         MOV     ?V2,A
   \   00000D   A3           INC     DPTR
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F5..         MOV     ?V3,A
    269            byte cnt = len;
   \   000011   EF           MOV     A,R7
   \   000012   FE           MOV     R6,A
   \   000013   740E         MOV     A,#0xe
   \   000015   12....       LCALL   ?XSTACK_DISP0_8
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F8           MOV     R0,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F9           MOV     R1,A
   \   00001D   8026         SJMP    ??ZDP_SendData_0
    270          
    271            while ( cnt-- )
    272            {
    273              *pBuf++ = *buf++;
   \                     ??ZDP_SendData_1:
   \   00001F   8882         MOV     DPL,R0
   \   000021   8983         MOV     DPH,R1
   \   000023   E0           MOVX    A,@DPTR
   \   000024   C0E0         PUSH    A
   \   000026   85..82       MOV     DPL,?V2
   \   000029   85..83       MOV     DPH,?V3
   \   00002C   D0E0         POP     A
   \   00002E   F0           MOVX    @DPTR,A
   \   00002F   8882         MOV     DPL,R0
   \   000031   8983         MOV     DPH,R1
   \   000033   A3           INC     DPTR
   \   000034   A882         MOV     R0,DPL
   \   000036   A983         MOV     R1,DPH
   \   000038   85..82       MOV     DPL,?V2
   \   00003B   85..83       MOV     DPH,?V3
   \   00003E   A3           INC     DPTR
   \   00003F   8582..       MOV     ?V2,DPL
   \   000042   8583..       MOV     ?V3,DPH
    274            }
   \                     ??ZDP_SendData_0:
   \   000045   8E..         MOV     ?V0,R6
   \   000047   74FF         MOV     A,#-0x1
   \   000049   25..         ADD     A,?V0
   \   00004B   FE           MOV     R6,A
   \   00004C   E5..         MOV     A,?V0
   \   00004E   70CF         JNZ     ??ZDP_SendData_1
    275          
    276            FillAndSendTxOptions( TransSeq, dstAddr, cmd, len, ((SecurityEnable) ? AF_EN_SECURITY : 0) );
   \   000050   7410         MOV     A,#0x10
   \   000052   12....       LCALL   ?XSTACK_DISP0_8
   \   000055   E0           MOVX    A,@DPTR
   \   000056   6008         JZ      ??ZDP_SendData_2
   \   000058   90....       MOV     DPTR,#ZDP_TxOptions
   \   00005B   7440         MOV     A,#0x40
   \   00005D   F0           MOVX    @DPTR,A
   \   00005E   8006         SJMP    ??ZDP_SendData_3
   \                     ??ZDP_SendData_2:
   \   000060   90....       MOV     DPTR,#ZDP_TxOptions
   \   000063   7400         MOV     A,#0x0
   \   000065   F0           MOVX    @DPTR,A
   \                     ??ZDP_SendData_3:
   \   000066                ; Setup parameters for call to function fillAndSend
   \   000066   740C         MOV     A,#0xc
   \   000068   12....       LCALL   ?XSTACK_DISP0_8
   \   00006B   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00006E   EF           MOV     A,R7
   \   00006F   F9           MOV     R1,A
   \   000070   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000073   7402         MOV     A,#0x2
   \   000075   12....       LCALL   ?DEALLOC_XSTACK8
   \   000078   E9           MOV     A,R1
   \   000079   F9           MOV     R1,A
   \   00007A   90....       MOV     DPTR,#ZDP_TxOptions
   \   00007D   7400         MOV     A,#0x0
   \   00007F   F0           MOVX    @DPTR,A
   \   000080   7F04         MOV     R7,#0x4
   \   000082   02....       LJMP    ?BANKED_LEAVE_XDATA
    277          }
    278          
    279          /*********************************************************************
    280           * @fn          ZDP_NWKAddrOfInterestReq
    281           *
    282           * @brief       This builds and send a request message that has
    283           *              NWKAddrOfInterest as its only parameter.
    284           *
    285           * @param       dstAddr - destination address
    286           * @param       nwkAddr - 16 bit address
    287           * @param       SecurityEnable - Security Options
    288           *
    289           * @return      afStatus_t
    290           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    291          afStatus_t ZDP_NWKAddrOfInterestReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_NWKAddrOfInterestReq:
    292                                               byte cmd, byte SecurityEnable )
    293          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    294            (void)SecurityEnable;  // Intentionally unreferenced parameter
    295          
    296            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \   000007   EC           MOV     A,R4
   \   000008   C0E0         PUSH    A
   \   00000A   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F8           MOV     R0,A
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F583         MOV     DPH,A
   \   000013   8882         MOV     DPL,R0
   \   000015   D0E0         POP     A
   \   000017   F0           MOVX    @DPTR,A
    297            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
   \   000018   E4           CLR     A
   \   000019   CD           XCH     A,R5
   \   00001A   FC           MOV     R4,A
   \   00001B   EC           MOV     A,R4
   \   00001C   C0E0         PUSH    A
   \   00001E   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000021   E0           MOVX    A,@DPTR
   \   000022   F8           MOV     R0,A
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F583         MOV     DPH,A
   \   000027   8882         MOV     DPL,R0
   \   000029   A3           INC     DPTR
   \   00002A   D0E0         POP     A
   \   00002C   F0           MOVX    @DPTR,A
    298          
    299            return fillAndSend( &ZDP_TransID, dstAddr, cmd, 2 );
   \   00002D                ; Setup parameters for call to function fillAndSend
   \   00002D   8E..         MOV     ?V0,R6
   \   00002F   75..00       MOV     ?V1,#0x0
   \   000032   78..         MOV     R0,#?V0
   \   000034   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000037   7902         MOV     R1,#0x2
   \   000039   EA           MOV     A,R2
   \   00003A   FC           MOV     R4,A
   \   00003B   EB           MOV     A,R3
   \   00003C   FD           MOV     R5,A
   \   00003D   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   00003F   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000041   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000044   7402         MOV     A,#0x2
   \   000046   12....       LCALL   ?DEALLOC_XSTACK8
   \   000049   7F02         MOV     R7,#0x2
   \   00004B   02....       LJMP    ?BANKED_LEAVE_XDATA
    300          }
    301          
    302          /*********************************************************************
    303           * Address Requests
    304           */
    305          
    306          /*********************************************************************
    307           * @fn          ZDP_NwkAddrReq
    308           *
    309           * @brief       This builds and send a NWK_addr_req message.  This
    310           *              function sends a broadcast message looking for a 16
    311           *              bit address with a 64 bit address as bait.
    312           *
    313           * @param       IEEEAddress - looking for this device
    314           * @param       SecurityEnable - Security Options
    315           *
    316           * @return      afStatus_t
    317           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    318          afStatus_t ZDP_NwkAddrReq( uint8 *IEEEAddress, byte ReqType,
   \                     ZDP_NwkAddrReq:
    319                                     byte StartIndex, byte SecurityEnable )
    320          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   \   00000E   89..         MOV     ?V2,R1
   \   000010   8C..         MOV     ?V3,R4
    321            uint8 *pBuf = ZDP_TmpBuf;
   \   000012   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000015   E0           MOVX    A,@DPTR
   \   000016   FE           MOV     R6,A
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   FF           MOV     R7,A
    322            byte len = Z_EXTADDR_LEN + 1 + 1;  // IEEEAddress + ReqType + StartIndex.
   \   00001A   75..0A       MOV     ?V4,#0xa
    323            zAddrType_t dstAddr;
    324          
    325            (void)SecurityEnable;  // Intentionally unreferenced parameter
    326          
    327            if ( osal_ExtAddrEqual( saveExtAddr, IEEEAddress ) == FALSE )
   \   00001D                ; Setup parameters for call to function sAddrExtCmp
   \   00001D   AC..         MOV     R4,?V0
   \   00001F   AD..         MOV     R5,?V1
   \   000021   7A..         MOV     R2,#saveExtAddr & 0xff
   \   000023   7B..         MOV     R3,#(saveExtAddr >> 8) & 0xff
   \   000025   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000028   E9           MOV     A,R1
   \   000029   7017         JNZ     ??ZDP_NwkAddrReq_0
    328            {
    329              dstAddr.addrMode = AddrBroadcast;
   \   00002B   7408         MOV     A,#0x8
   \   00002D   12....       LCALL   ?XSTACK_DISP0_8
   \   000030   740F         MOV     A,#0xf
   \   000032   F0           MOVX    @DPTR,A
    330              dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
   \   000033   85..82       MOV     DPL,?XSP + 0
   \   000036   85..83       MOV     DPH,?XSP + 1
   \   000039   74FD         MOV     A,#-0x3
   \   00003B   F0           MOVX    @DPTR,A
   \   00003C   A3           INC     DPTR
   \   00003D   74FF         MOV     A,#-0x1
   \   00003F   F0           MOVX    @DPTR,A
   \   000040   801B         SJMP    ??ZDP_NwkAddrReq_1
    331            }
    332            else
    333            {
    334              dstAddr.addrMode = Addr16Bit;
   \                     ??ZDP_NwkAddrReq_0:
   \   000042   7408         MOV     A,#0x8
   \   000044   12....       LCALL   ?XSTACK_DISP0_8
   \   000047   7402         MOV     A,#0x2
   \   000049   F0           MOVX    @DPTR,A
    335              dstAddr.addr.shortAddr = ZDAppNwkAddr.addr.shortAddr;
   \   00004A   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   F8           MOV     R0,A
   \   00004F   A3           INC     DPTR
   \   000050   E0           MOVX    A,@DPTR
   \   000051   F9           MOV     R1,A
   \   000052   85..82       MOV     DPL,?XSP + 0
   \   000055   85..83       MOV     DPH,?XSP + 1
   \   000058   E8           MOV     A,R0
   \   000059   F0           MOVX    @DPTR,A
   \   00005A   A3           INC     DPTR
   \   00005B   E9           MOV     A,R1
   \   00005C   F0           MOVX    @DPTR,A
    336            }
    337          
    338            pBuf = osal_cpyExtAddr( pBuf, IEEEAddress );
   \                     ??ZDP_NwkAddrReq_1:
   \   00005D                ; Setup parameters for call to function sAddrExtCpy
   \   00005D   AC..         MOV     R4,?V0
   \   00005F   AD..         MOV     R5,?V1
   \   000061   EE           MOV     A,R6
   \   000062   FA           MOV     R2,A
   \   000063   EF           MOV     A,R7
   \   000064   FB           MOV     R3,A
   \   000065   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000068   8A..         MOV     ?V0,R2
   \   00006A   8B..         MOV     ?V1,R3
   \   00006C   AE..         MOV     R6,?V0
   \   00006E   AF..         MOV     R7,?V1
    339          
    340            *pBuf++ = ReqType;
   \   000070   E5..         MOV     A,?V2
   \   000072   C0E0         PUSH    A
   \   000074   8E82         MOV     DPL,R6
   \   000076   8F83         MOV     DPH,R7
   \   000078   D0E0         POP     A
   \   00007A   F0           MOVX    @DPTR,A
   \   00007B   8E82         MOV     DPL,R6
   \   00007D   8F83         MOV     DPH,R7
   \   00007F   A3           INC     DPTR
   \   000080   AE82         MOV     R6,DPL
   \   000082   AF83         MOV     R7,DPH
    341            *pBuf++ = StartIndex;
   \   000084   E5..         MOV     A,?V3
   \   000086   C0E0         PUSH    A
   \   000088   8E82         MOV     DPL,R6
   \   00008A   8F83         MOV     DPH,R7
   \   00008C   D0E0         POP     A
   \   00008E   F0           MOVX    @DPTR,A
   \   00008F   8E82         MOV     DPL,R6
   \   000091   8F83         MOV     DPH,R7
   \   000093   A3           INC     DPTR
   \   000094   AE82         MOV     R6,DPL
   \   000096   AF83         MOV     R7,DPH
    342          
    343            return fillAndSend( &ZDP_TransID, &dstAddr, NWK_addr_req, len );
   \   000098                ; Setup parameters for call to function fillAndSend
   \   000098   E4           CLR     A
   \   000099   F5..         MOV     ?V0,A
   \   00009B   F5..         MOV     ?V1,A
   \   00009D   78..         MOV     R0,#?V0
   \   00009F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A2   A9..         MOV     R1,?V4
   \   0000A4   7402         MOV     A,#0x2
   \   0000A6   12....       LCALL   ?XSTACK_DISP102_8
   \   0000A9   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   0000AB   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   0000AD   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   0000B0   7402         MOV     A,#0x2
   \   0000B2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B5   7409         MOV     A,#0x9
   \   0000B7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000BA   7F05         MOV     R7,#0x5
   \   0000BC   02....       LJMP    ?BANKED_LEAVE_XDATA
    344          }
    345          
    346          /*********************************************************************
    347           * @fn          ZDP_IEEEAddrReq
    348           *
    349           * @brief       This builds and send a IEEE_addr_req message.  This
    350           *              function sends a unicast message looking for a 64
    351           *              bit IEEE address with a 16 bit address as bait.
    352           *
    353           * @param       ReqType - ZDP_IEEEADDR_REQTYPE_SINGLE or
    354           *                        ZDP_IEEEADDR_REQTYPE_EXTENDED
    355           * @param       SecurityEnable - Security Options
    356           *
    357           * @return      afStatus_t
    358           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    359          afStatus_t ZDP_IEEEAddrReq( uint16 shortAddr, byte ReqType,
   \                     ZDP_IEEEAddrReq:
    360                                      byte StartIndex, byte SecurityEnable )
    361          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0,R1
   \   00000C   8C..         MOV     ?V1,R4
    362            uint8 *pBuf = ZDP_TmpBuf;
   \   00000E   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000011   E0           MOVX    A,@DPTR
   \   000012   FE           MOV     R6,A
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   FF           MOV     R7,A
    363            byte len = 2 + 1 + 1;  // shortAddr + ReqType + StartIndex.
   \   000016   7904         MOV     R1,#0x4
    364            zAddrType_t dstAddr;
    365          
    366            (void)SecurityEnable;  // Intentionally unreferenced parameter
    367          
    368            dstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   000018   7408         MOV     A,#0x8
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   7402         MOV     A,#0x2
   \   00001F   F0           MOVX    @DPTR,A
    369            dstAddr.addr.shortAddr = shortAddr;
   \   000020   85..82       MOV     DPL,?XSP + 0
   \   000023   85..83       MOV     DPH,?XSP + 1
   \   000026   EA           MOV     A,R2
   \   000027   F0           MOVX    @DPTR,A
   \   000028   A3           INC     DPTR
   \   000029   EB           MOV     A,R3
   \   00002A   F0           MOVX    @DPTR,A
    370          
    371            *pBuf++ = LO_UINT16( shortAddr );
   \   00002B   EA           MOV     A,R2
   \   00002C   C0E0         PUSH    A
   \   00002E   8E82         MOV     DPL,R6
   \   000030   8F83         MOV     DPH,R7
   \   000032   D0E0         POP     A
   \   000034   F0           MOVX    @DPTR,A
   \   000035   8E82         MOV     DPL,R6
   \   000037   8F83         MOV     DPH,R7
   \   000039   A3           INC     DPTR
   \   00003A   AE82         MOV     R6,DPL
   \   00003C   AF83         MOV     R7,DPH
    372            *pBuf++ = HI_UINT16( shortAddr );
   \   00003E   E4           CLR     A
   \   00003F   CB           XCH     A,R3
   \   000040   FA           MOV     R2,A
   \   000041   EA           MOV     A,R2
   \   000042   C0E0         PUSH    A
   \   000044   8E82         MOV     DPL,R6
   \   000046   8F83         MOV     DPH,R7
   \   000048   D0E0         POP     A
   \   00004A   F0           MOVX    @DPTR,A
   \   00004B   8E82         MOV     DPL,R6
   \   00004D   8F83         MOV     DPH,R7
   \   00004F   A3           INC     DPTR
   \   000050   AE82         MOV     R6,DPL
   \   000052   AF83         MOV     R7,DPH
    373          
    374            *pBuf++ = ReqType;
   \   000054   E5..         MOV     A,?V0
   \   000056   C0E0         PUSH    A
   \   000058   8E82         MOV     DPL,R6
   \   00005A   8F83         MOV     DPH,R7
   \   00005C   D0E0         POP     A
   \   00005E   F0           MOVX    @DPTR,A
   \   00005F   8E82         MOV     DPL,R6
   \   000061   8F83         MOV     DPH,R7
   \   000063   A3           INC     DPTR
   \   000064   AE82         MOV     R6,DPL
   \   000066   AF83         MOV     R7,DPH
    375            *pBuf++ = StartIndex;
   \   000068   E5..         MOV     A,?V1
   \   00006A   C0E0         PUSH    A
   \   00006C   8E82         MOV     DPL,R6
   \   00006E   8F83         MOV     DPH,R7
   \   000070   D0E0         POP     A
   \   000072   F0           MOVX    @DPTR,A
   \   000073   8E82         MOV     DPL,R6
   \   000075   8F83         MOV     DPH,R7
   \   000077   A3           INC     DPTR
   \   000078   AE82         MOV     R6,DPL
   \   00007A   AF83         MOV     R7,DPH
    376          
    377            return fillAndSend( &ZDP_TransID, &dstAddr, IEEE_addr_req, len );
   \   00007C                ; Setup parameters for call to function fillAndSend
   \   00007C   75..01       MOV     ?V2,#0x1
   \   00007F   75..00       MOV     ?V3,#0x0
   \   000082   78..         MOV     R0,#?V2
   \   000084   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000087   7402         MOV     A,#0x2
   \   000089   12....       LCALL   ?XSTACK_DISP102_8
   \   00008C   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   00008E   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000090   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000093   7402         MOV     A,#0x2
   \   000095   12....       LCALL   ?DEALLOC_XSTACK8
   \   000098   7409         MOV     A,#0x9
   \   00009A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00009D   7F04         MOV     R7,#0x4
   \   00009F   02....       LJMP    ?BANKED_LEAVE_XDATA
    378          }
    379          
    380          /*********************************************************************
    381           * @fn          ZDP_MatchDescReq
    382           *
    383           * @brief       This builds and send a Match_Desc_req message.  This
    384           *              function sends a broadcast or unicast message
    385           *              requesting the list of endpoint/interfaces that
    386           *              match profile ID and cluster IDs.
    387           *
    388           * @param       dstAddr - destination address
    389           * @param       nwkAddr - network address of interest
    390           * @param       ProfileID - Profile ID
    391           * @param       NumInClusters - number of input clusters
    392           * @param       InClusterList - input cluster ID list
    393           * @param       NumOutClusters - number of output clusters
    394           * @param       OutClusterList - output cluster ID list
    395           * @param       SecurityEnable - Security Options
    396           *
    397           * @return      afStatus_t
    398           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    399          afStatus_t ZDP_MatchDescReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_MatchDescReq:
    400                                          uint16 ProfileID,
    401                                          byte NumInClusters, cId_t *InClusterList,
    402                                          byte NumOutClusters, cId_t *OutClusterList,
    403                                          byte SecurityEnable )
    404          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
    405            uint8 *pBuf = ZDP_TmpBuf;
   \   000007   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F8           MOV     R0,A
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F9           MOV     R1,A
    406            // nwkAddr+ProfileID+NumInClusters+NumOutClusters.
    407            byte i, len = 2 + 2 + 1 + 1;  // nwkAddr+ProfileID+NumInClusters+NumOutClusters.
   \   00000F   7E06         MOV     R6,#0x6
   \   000011   7412         MOV     A,#0x12
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F5..         MOV     ?V2,A
    408          
    409            (void)SecurityEnable;  // Intentionally unreferenced parameter
    410          
    411            len += (NumInClusters + NumOutClusters) * sizeof(uint16);
   \   000019   75F002       MOV     B,#0x2
   \   00001C   8F..         MOV     ?V4,R7
   \   00001E   75..00       MOV     ?V5,#0x0
   \   000021   85....       MOV     ?V0,?V2
   \   000024   75..00       MOV     ?V1,#0x0
   \   000027   E5..         MOV     A,?V4
   \   000029   25..         ADD     A,?V0
   \   00002B   F5..         MOV     ?V0,A
   \   00002D   E5..         MOV     A,?V5
   \   00002F   35..         ADDC    A,?V1
   \   000031   F5..         MOV     ?V1,A
   \   000033   E5..         MOV     A,?V0
   \   000035   A4           MUL     AB
   \   000036   2E           ADD     A,R6
   \   000037   FE           MOV     R6,A
    412          
    413            if ( len >= ZDP_BUF_SZ-1 )
   \   000038   EE           MOV     A,R6
   \   000039   C3           CLR     C
   \   00003A   944F         SUBB    A,#0x4f
   \   00003C   4005         JC      ??ZDP_MatchDescReq_0
    414            {
    415              return afStatus_MEM_FAIL;
   \   00003E   7910         MOV     R1,#0x10
   \   000040   02....       LJMP    ??ZDP_MatchDescReq_1 & 0xFFFF
    416            }
    417          
    418            // The spec changed in Zigbee 2007 (2.4.3.1.7.1) to not allow sending
    419            // this command to 0xFFFF.  So, here we will filter this and replace
    420            // with 0xFFFD to only send to devices with RX ON.  This includes the
    421            // network address of interest.
    422            if ( ((dstAddr->addrMode == AddrBroadcast) || (dstAddr->addrMode == Addr16Bit))
    423                && (dstAddr->addr.shortAddr == NWK_BROADCAST_SHORTADDR_DEVALL) )
   \                     ??ZDP_MatchDescReq_0:
   \   000043   8A82         MOV     DPL,R2
   \   000045   8B83         MOV     DPH,R3
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   640F         XRL     A,#0xf
   \   000052   6011         JZ      ??ZDP_MatchDescReq_2
   \   000054   8A82         MOV     DPL,R2
   \   000056   8B83         MOV     DPH,R3
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   A3           INC     DPTR
   \   000060   E0           MOVX    A,@DPTR
   \   000061   6402         XRL     A,#0x2
   \   000063   701A         JNZ     ??ZDP_MatchDescReq_3
   \                     ??ZDP_MatchDescReq_2:
   \   000065   8A82         MOV     DPL,R2
   \   000067   8B83         MOV     DPH,R3
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   64FF         XRL     A,#0xff
   \   00006C   7004         JNZ     ??ZDP_MatchDescReq_4
   \   00006E   A3           INC     DPTR
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   64FF         XRL     A,#0xff
   \                     ??ZDP_MatchDescReq_4:
   \   000072   700B         JNZ     ??ZDP_MatchDescReq_3
    424            {
    425              dstAddr->addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
   \   000074   8A82         MOV     DPL,R2
   \   000076   8B83         MOV     DPH,R3
   \   000078   74FD         MOV     A,#-0x3
   \   00007A   F0           MOVX    @DPTR,A
   \   00007B   A3           INC     DPTR
   \   00007C   74FF         MOV     A,#-0x1
   \   00007E   F0           MOVX    @DPTR,A
    426            }
    427            if ( nwkAddr == NWK_BROADCAST_SHORTADDR_DEVALL )
   \                     ??ZDP_MatchDescReq_3:
   \   00007F   74FF         MOV     A,#-0x1
   \   000081   6C           XRL     A,R4
   \   000082   7003         JNZ     ??ZDP_MatchDescReq_5
   \   000084   74FF         MOV     A,#-0x1
   \   000086   6D           XRL     A,R5
   \                     ??ZDP_MatchDescReq_5:
   \   000087   7004         JNZ     ??ZDP_MatchDescReq_6
    428            {
    429              nwkAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
   \   000089   7CFD         MOV     R4,#-0x3
   \   00008B   7DFF         MOV     R5,#-0x1
    430            }
    431          
    432            *pBuf++ = LO_UINT16( nwkAddr );   // NWKAddrOfInterest
   \                     ??ZDP_MatchDescReq_6:
   \   00008D   EC           MOV     A,R4
   \   00008E   C0E0         PUSH    A
   \   000090   8882         MOV     DPL,R0
   \   000092   8983         MOV     DPH,R1
   \   000094   D0E0         POP     A
   \   000096   F0           MOVX    @DPTR,A
   \   000097   8882         MOV     DPL,R0
   \   000099   8983         MOV     DPH,R1
   \   00009B   A3           INC     DPTR
   \   00009C   A882         MOV     R0,DPL
   \   00009E   A983         MOV     R1,DPH
    433            *pBuf++ = HI_UINT16( nwkAddr );
   \   0000A0   E4           CLR     A
   \   0000A1   CD           XCH     A,R5
   \   0000A2   FC           MOV     R4,A
   \   0000A3   EC           MOV     A,R4
   \   0000A4   C0E0         PUSH    A
   \   0000A6   8882         MOV     DPL,R0
   \   0000A8   8983         MOV     DPH,R1
   \   0000AA   D0E0         POP     A
   \   0000AC   F0           MOVX    @DPTR,A
   \   0000AD   8882         MOV     DPL,R0
   \   0000AF   8983         MOV     DPH,R1
   \   0000B1   A3           INC     DPTR
   \   0000B2   A882         MOV     R0,DPL
   \   0000B4   A983         MOV     R1,DPH
   \   0000B6   740E         MOV     A,#0xe
   \   0000B8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BB   E0           MOVX    A,@DPTR
   \   0000BC   FC           MOV     R4,A
   \   0000BD   A3           INC     DPTR
   \   0000BE   E0           MOVX    A,@DPTR
   \   0000BF   FD           MOV     R5,A
    434          
    435            *pBuf++ = LO_UINT16( ProfileID );   // Profile ID
   \   0000C0   EC           MOV     A,R4
   \   0000C1   C0E0         PUSH    A
   \   0000C3   8882         MOV     DPL,R0
   \   0000C5   8983         MOV     DPH,R1
   \   0000C7   D0E0         POP     A
   \   0000C9   F0           MOVX    @DPTR,A
   \   0000CA   8882         MOV     DPL,R0
   \   0000CC   8983         MOV     DPH,R1
   \   0000CE   A3           INC     DPTR
   \   0000CF   A882         MOV     R0,DPL
   \   0000D1   A983         MOV     R1,DPH
    436            *pBuf++ = HI_UINT16( ProfileID );
   \   0000D3   E4           CLR     A
   \   0000D4   CD           XCH     A,R5
   \   0000D5   FC           MOV     R4,A
   \   0000D6   EC           MOV     A,R4
   \   0000D7   C0E0         PUSH    A
   \   0000D9   8882         MOV     DPL,R0
   \   0000DB   8983         MOV     DPH,R1
   \   0000DD   D0E0         POP     A
   \   0000DF   F0           MOVX    @DPTR,A
   \   0000E0   8882         MOV     DPL,R0
   \   0000E2   8983         MOV     DPH,R1
   \   0000E4   A3           INC     DPTR
   \   0000E5   A882         MOV     R0,DPL
   \   0000E7   A983         MOV     R1,DPH
    437          
    438            *pBuf++ = NumInClusters; // Input cluster list
   \   0000E9   EF           MOV     A,R7
   \   0000EA   C0E0         PUSH    A
   \   0000EC   8882         MOV     DPL,R0
   \   0000EE   8983         MOV     DPH,R1
   \   0000F0   D0E0         POP     A
   \   0000F2   F0           MOVX    @DPTR,A
   \   0000F3   8882         MOV     DPL,R0
   \   0000F5   8983         MOV     DPH,R1
   \   0000F7   A3           INC     DPTR
   \   0000F8   A882         MOV     R0,DPL
   \   0000FA   A983         MOV     R1,DPH
    439            if ( NumInClusters )
   \   0000FC   EF           MOV     A,R7
   \   0000FD   7003         JNZ     $+5
   \   0000FF   02....       LJMP    ??ZDP_MatchDescReq_7 & 0xFFFF
    440            {
    441              for (i=0; i<NumInClusters; ++i)  {
   \   000102   75..00       MOV     ?V3,#0x0
   \   000105   7410         MOV     A,#0x10
   \   000107   12....       LCALL   ?XSTACK_DISP0_8
   \   00010A   E0           MOVX    A,@DPTR
   \   00010B   F5..         MOV     ?V0,A
   \   00010D   A3           INC     DPTR
   \   00010E   E0           MOVX    A,@DPTR
   \   00010F   F5..         MOV     ?V1,A
   \   000111   02....       LJMP    ??ZDP_MatchDescReq_8 & 0xFFFF
    442                *pBuf++ = LO_UINT16( InClusterList[i] );
   \                     ??ZDP_MatchDescReq_9:
   \   000114   AC..         MOV     R4,?V3
   \   000116   7D00         MOV     R5,#0x0
   \   000118   EC           MOV     A,R4
   \   000119   75F002       MOV     B,#0x2
   \   00011C   A4           MUL     AB
   \   00011D   CC           XCH     A,R4
   \   00011E   85F0..       MOV     ?V4,B
   \   000121   75F000       MOV     B,#0x0
   \   000124   A4           MUL     AB
   \   000125   25..         ADD     A,?V4
   \   000127   F5..         MOV     ?V4,A
   \   000129   75F002       MOV     B,#0x2
   \   00012C   ED           MOV     A,R5
   \   00012D   A4           MUL     AB
   \   00012E   25..         ADD     A,?V4
   \   000130   FD           MOV     R5,A
   \   000131   E5..         MOV     A,?V0
   \   000133   2C           ADD     A,R4
   \   000134   F582         MOV     DPL,A
   \   000136   E5..         MOV     A,?V1
   \   000138   3D           ADDC    A,R5
   \   000139   F583         MOV     DPH,A
   \   00013B   E0           MOVX    A,@DPTR
   \   00013C   FC           MOV     R4,A
   \   00013D   A3           INC     DPTR
   \   00013E   E0           MOVX    A,@DPTR
   \   00013F   FD           MOV     R5,A
   \   000140   EC           MOV     A,R4
   \   000141   C0E0         PUSH    A
   \   000143   8882         MOV     DPL,R0
   \   000145   8983         MOV     DPH,R1
   \   000147   D0E0         POP     A
   \   000149   F0           MOVX    @DPTR,A
   \   00014A   8882         MOV     DPL,R0
   \   00014C   8983         MOV     DPH,R1
   \   00014E   A3           INC     DPTR
   \   00014F   A882         MOV     R0,DPL
   \   000151   A983         MOV     R1,DPH
    443                *pBuf++ = HI_UINT16( InClusterList[i] );
   \   000153   AC..         MOV     R4,?V3
   \   000155   7D00         MOV     R5,#0x0
   \   000157   EC           MOV     A,R4
   \   000158   75F002       MOV     B,#0x2
   \   00015B   A4           MUL     AB
   \   00015C   CC           XCH     A,R4
   \   00015D   85F0..       MOV     ?V4,B
   \   000160   75F000       MOV     B,#0x0
   \   000163   A4           MUL     AB
   \   000164   25..         ADD     A,?V4
   \   000166   F5..         MOV     ?V4,A
   \   000168   75F002       MOV     B,#0x2
   \   00016B   ED           MOV     A,R5
   \   00016C   A4           MUL     AB
   \   00016D   25..         ADD     A,?V4
   \   00016F   FD           MOV     R5,A
   \   000170   E5..         MOV     A,?V0
   \   000172   2C           ADD     A,R4
   \   000173   F582         MOV     DPL,A
   \   000175   E5..         MOV     A,?V1
   \   000177   3D           ADDC    A,R5
   \   000178   F583         MOV     DPH,A
   \   00017A   E0           MOVX    A,@DPTR
   \   00017B   FC           MOV     R4,A
   \   00017C   A3           INC     DPTR
   \   00017D   E0           MOVX    A,@DPTR
   \   00017E   FD           MOV     R5,A
   \   00017F   E4           CLR     A
   \   000180   CD           XCH     A,R5
   \   000181   FC           MOV     R4,A
   \   000182   EC           MOV     A,R4
   \   000183   C0E0         PUSH    A
   \   000185   8882         MOV     DPL,R0
   \   000187   8983         MOV     DPH,R1
   \   000189   D0E0         POP     A
   \   00018B   F0           MOVX    @DPTR,A
   \   00018C   8882         MOV     DPL,R0
   \   00018E   8983         MOV     DPH,R1
   \   000190   A3           INC     DPTR
   \   000191   A882         MOV     R0,DPL
   \   000193   A983         MOV     R1,DPH
    444              }
   \   000195   05..         INC     ?V3
   \                     ??ZDP_MatchDescReq_8:
   \   000197   E5..         MOV     A,?V3
   \   000199   C3           CLR     C
   \   00019A   9F           SUBB    A,R7
   \   00019B   5003         JNC     $+5
   \   00019D   02....       LJMP    ??ZDP_MatchDescReq_9 & 0xFFFF
    445            }
    446          
    447            *pBuf++ = NumOutClusters; // Output cluster list
   \                     ??ZDP_MatchDescReq_7:
   \   0001A0   E5..         MOV     A,?V2
   \   0001A2   C0E0         PUSH    A
   \   0001A4   8882         MOV     DPL,R0
   \   0001A6   8983         MOV     DPH,R1
   \   0001A8   D0E0         POP     A
   \   0001AA   F0           MOVX    @DPTR,A
   \   0001AB   8882         MOV     DPL,R0
   \   0001AD   8983         MOV     DPH,R1
   \   0001AF   A3           INC     DPTR
   \   0001B0   A882         MOV     R0,DPL
   \   0001B2   A983         MOV     R1,DPH
    448            if ( NumOutClusters )
   \   0001B4   E5..         MOV     A,?V2
   \   0001B6   7003         JNZ     $+5
   \   0001B8   02....       LJMP    ??ZDP_MatchDescReq_10 & 0xFFFF
    449            {
    450              for (i=0; i<NumOutClusters; ++i)  {
   \   0001BB   75..00       MOV     ?V3,#0x0
   \   0001BE   7413         MOV     A,#0x13
   \   0001C0   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C3   E0           MOVX    A,@DPTR
   \   0001C4   F5..         MOV     ?V0,A
   \   0001C6   A3           INC     DPTR
   \   0001C7   E0           MOVX    A,@DPTR
   \   0001C8   F5..         MOV     ?V1,A
   \   0001CA   02....       LJMP    ??ZDP_MatchDescReq_11 & 0xFFFF
    451                *pBuf++ = LO_UINT16( OutClusterList[i] );
   \                     ??ZDP_MatchDescReq_12:
   \   0001CD   AC..         MOV     R4,?V3
   \   0001CF   7D00         MOV     R5,#0x0
   \   0001D1   EC           MOV     A,R4
   \   0001D2   75F002       MOV     B,#0x2
   \   0001D5   A4           MUL     AB
   \   0001D6   CC           XCH     A,R4
   \   0001D7   85F0..       MOV     ?V4,B
   \   0001DA   75F000       MOV     B,#0x0
   \   0001DD   A4           MUL     AB
   \   0001DE   25..         ADD     A,?V4
   \   0001E0   F5..         MOV     ?V4,A
   \   0001E2   75F002       MOV     B,#0x2
   \   0001E5   ED           MOV     A,R5
   \   0001E6   A4           MUL     AB
   \   0001E7   25..         ADD     A,?V4
   \   0001E9   FD           MOV     R5,A
   \   0001EA   E5..         MOV     A,?V0
   \   0001EC   2C           ADD     A,R4
   \   0001ED   F582         MOV     DPL,A
   \   0001EF   E5..         MOV     A,?V1
   \   0001F1   3D           ADDC    A,R5
   \   0001F2   F583         MOV     DPH,A
   \   0001F4   E0           MOVX    A,@DPTR
   \   0001F5   FC           MOV     R4,A
   \   0001F6   A3           INC     DPTR
   \   0001F7   E0           MOVX    A,@DPTR
   \   0001F8   FD           MOV     R5,A
   \   0001F9   EC           MOV     A,R4
   \   0001FA   C0E0         PUSH    A
   \   0001FC   8882         MOV     DPL,R0
   \   0001FE   8983         MOV     DPH,R1
   \   000200   D0E0         POP     A
   \   000202   F0           MOVX    @DPTR,A
   \   000203   8882         MOV     DPL,R0
   \   000205   8983         MOV     DPH,R1
   \   000207   A3           INC     DPTR
   \   000208   A882         MOV     R0,DPL
   \   00020A   A983         MOV     R1,DPH
    452                *pBuf++ = HI_UINT16( OutClusterList[i] );
   \   00020C   AC..         MOV     R4,?V3
   \   00020E   7D00         MOV     R5,#0x0
   \   000210   EC           MOV     A,R4
   \   000211   75F002       MOV     B,#0x2
   \   000214   A4           MUL     AB
   \   000215   CC           XCH     A,R4
   \   000216   85F0..       MOV     ?V4,B
   \   000219   75F000       MOV     B,#0x0
   \   00021C   A4           MUL     AB
   \   00021D   25..         ADD     A,?V4
   \   00021F   F5..         MOV     ?V4,A
   \   000221   75F002       MOV     B,#0x2
   \   000224   ED           MOV     A,R5
   \   000225   A4           MUL     AB
   \   000226   25..         ADD     A,?V4
   \   000228   FD           MOV     R5,A
   \   000229   E5..         MOV     A,?V0
   \   00022B   2C           ADD     A,R4
   \   00022C   F582         MOV     DPL,A
   \   00022E   E5..         MOV     A,?V1
   \   000230   3D           ADDC    A,R5
   \   000231   F583         MOV     DPH,A
   \   000233   E0           MOVX    A,@DPTR
   \   000234   FC           MOV     R4,A
   \   000235   A3           INC     DPTR
   \   000236   E0           MOVX    A,@DPTR
   \   000237   FD           MOV     R5,A
   \   000238   E4           CLR     A
   \   000239   CD           XCH     A,R5
   \   00023A   FC           MOV     R4,A
   \   00023B   EC           MOV     A,R4
   \   00023C   C0E0         PUSH    A
   \   00023E   8882         MOV     DPL,R0
   \   000240   8983         MOV     DPH,R1
   \   000242   D0E0         POP     A
   \   000244   F0           MOVX    @DPTR,A
   \   000245   8882         MOV     DPL,R0
   \   000247   8983         MOV     DPH,R1
   \   000249   A3           INC     DPTR
   \   00024A   A882         MOV     R0,DPL
   \   00024C   A983         MOV     R1,DPH
    453              }
   \   00024E   05..         INC     ?V3
   \                     ??ZDP_MatchDescReq_11:
   \   000250   E5..         MOV     A,?V3
   \   000252   C3           CLR     C
   \   000253   95..         SUBB    A,?V2
   \   000255   5003         JNC     $+5
   \   000257   02....       LJMP    ??ZDP_MatchDescReq_12 & 0xFFFF
    454            }
    455          
    456            return fillAndSend( &ZDP_TransID, dstAddr, Match_Desc_req, len );
   \                     ??ZDP_MatchDescReq_10:
   \   00025A                ; Setup parameters for call to function fillAndSend
   \   00025A   75..06       MOV     ?V0,#0x6
   \   00025D   75..00       MOV     ?V1,#0x0
   \   000260   78..         MOV     R0,#?V0
   \   000262   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000265   EE           MOV     A,R6
   \   000266   F9           MOV     R1,A
   \   000267   EA           MOV     A,R2
   \   000268   FC           MOV     R4,A
   \   000269   EB           MOV     A,R3
   \   00026A   FD           MOV     R5,A
   \   00026B   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   00026D   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   00026F   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000272   7402         MOV     A,#0x2
   \   000274   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??ZDP_MatchDescReq_1:
   \   000277   7F06         MOV     R7,#0x6
   \   000279   02....       LJMP    ?BANKED_LEAVE_XDATA
    457          }
    458          
    459          /*********************************************************************
    460           * @fn          ZDP_SimpleDescReq
    461           *
    462           * @brief       This builds and send a NWK_Simple_Desc_req
    463           *              message.  This function sends unicast message to the
    464           *              destination device.
    465           *
    466           * @param       dstAddr - destination address
    467           * @param       nwkAddr - 16 bit address
    468           * @param       epIntf - endpoint/interface
    469           * @param       SecurityEnable - Security Options
    470           *
    471           * @return      afStatus_t
    472           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    473          afStatus_t ZDP_SimpleDescReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_SimpleDescReq:
    474                                              byte endPoint, byte SecurityEnable )
    475          
    476          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    477            (void)SecurityEnable;  // Intentionally unreferenced parameter
    478          
    479            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \   000007   EC           MOV     A,R4
   \   000008   C0E0         PUSH    A
   \   00000A   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F8           MOV     R0,A
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F583         MOV     DPH,A
   \   000013   8882         MOV     DPL,R0
   \   000015   D0E0         POP     A
   \   000017   F0           MOVX    @DPTR,A
    480            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
   \   000018   E4           CLR     A
   \   000019   CD           XCH     A,R5
   \   00001A   FC           MOV     R4,A
   \   00001B   EC           MOV     A,R4
   \   00001C   C0E0         PUSH    A
   \   00001E   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000021   E0           MOVX    A,@DPTR
   \   000022   F8           MOV     R0,A
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F583         MOV     DPH,A
   \   000027   8882         MOV     DPL,R0
   \   000029   A3           INC     DPTR
   \   00002A   D0E0         POP     A
   \   00002C   F0           MOVX    @DPTR,A
    481            ZDP_TmpBuf[2] = endPoint;
   \   00002D   EE           MOV     A,R6
   \   00002E   C0E0         PUSH    A
   \   000030   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F8           MOV     R0,A
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F583         MOV     DPH,A
   \   000039   8882         MOV     DPL,R0
   \   00003B   A3           INC     DPTR
   \   00003C   A3           INC     DPTR
   \   00003D   D0E0         POP     A
   \   00003F   F0           MOVX    @DPTR,A
    482          
    483            return fillAndSend( &ZDP_TransID, dstAddr, Simple_Desc_req, 3 );
   \   000040                ; Setup parameters for call to function fillAndSend
   \   000040   75..04       MOV     ?V0,#0x4
   \   000043   75..00       MOV     ?V1,#0x0
   \   000046   78..         MOV     R0,#?V0
   \   000048   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004B   7903         MOV     R1,#0x3
   \   00004D   EA           MOV     A,R2
   \   00004E   FC           MOV     R4,A
   \   00004F   EB           MOV     A,R3
   \   000050   FD           MOV     R5,A
   \   000051   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000053   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000055   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000058   7402         MOV     A,#0x2
   \   00005A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005D   7F02         MOV     R7,#0x2
   \   00005F   02....       LJMP    ?BANKED_LEAVE_XDATA
    484          }
    485          
    486          /*********************************************************************
    487           * @fn          ZDP_UserDescSet
    488           *
    489           * @brief       This builds and send a User_Desc_set message to set
    490           *              the user descriptor.  This function sends unicast
    491           *              message to the destination device.
    492           *
    493           * @param       dstAddr - destination address
    494           * @param       nwkAddr - 16 bit address
    495           * @param       UserDescriptor - user descriptor
    496           * @param       SecurityEnable - Security Options
    497           *
    498           * @return      afStatus_t
    499           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    500          afStatus_t ZDP_UserDescSet( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_UserDescSet:
    501                                    UserDescriptorFormat_t *UserDescriptor,
    502                                    byte SecurityEnable )
    503          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    504            uint8 *pBuf = ZDP_TmpBuf;
   \   000009   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F5..         MOV     ?V2,A
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F5..         MOV     ?V3,A
   \   000013   740F         MOV     A,#0xf
   \   000015   12....       LCALL   ?XSTACK_DISP0_8
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F8           MOV     R0,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F9           MOV     R1,A
    505            byte len = (UserDescriptor->len < AF_MAX_USER_DESCRIPTOR_LEN) ?
    506                        UserDescriptor->len : AF_MAX_USER_DESCRIPTOR_LEN;
   \   00001D   8882         MOV     DPL,R0
   \   00001F   8983         MOV     DPH,R1
   \   000021   E0           MOVX    A,@DPTR
   \   000022   C3           CLR     C
   \   000023   9410         SUBB    A,#0x10
   \   000025   5009         JNC     ??ZDP_UserDescSet_0
   \   000027   8882         MOV     DPL,R0
   \   000029   8983         MOV     DPH,R1
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F5..         MOV     ?V1,A
   \   00002E   8003         SJMP    ??ZDP_UserDescSet_1
   \                     ??ZDP_UserDescSet_0:
   \   000030   75..10       MOV     ?V1,#0x10
    507            byte addrLen = 2;
   \                     ??ZDP_UserDescSet_1:
   \   000033   75..02       MOV     ?V0,#0x2
    508          
    509            (void)SecurityEnable;  // Intentionally unreferenced parameter
    510          
    511            *pBuf++ = LO_UINT16( nwkAddr );
   \   000036   EC           MOV     A,R4
   \   000037   C0E0         PUSH    A
   \   000039   85..82       MOV     DPL,?V2
   \   00003C   85..83       MOV     DPH,?V3
   \   00003F   D0E0         POP     A
   \   000041   F0           MOVX    @DPTR,A
   \   000042   85..82       MOV     DPL,?V2
   \   000045   85..83       MOV     DPH,?V3
   \   000048   A3           INC     DPTR
   \   000049   8582..       MOV     ?V2,DPL
   \   00004C   8583..       MOV     ?V3,DPH
    512            *pBuf++ = HI_UINT16( nwkAddr );
   \   00004F   E4           CLR     A
   \   000050   CD           XCH     A,R5
   \   000051   FC           MOV     R4,A
   \   000052   EC           MOV     A,R4
   \   000053   C0E0         PUSH    A
   \   000055   85..82       MOV     DPL,?V2
   \   000058   85..83       MOV     DPH,?V3
   \   00005B   D0E0         POP     A
   \   00005D   F0           MOVX    @DPTR,A
   \   00005E   85..82       MOV     DPL,?V2
   \   000061   85..83       MOV     DPH,?V3
   \   000064   A3           INC     DPTR
   \   000065   8582..       MOV     ?V2,DPL
   \   000068   8583..       MOV     ?V3,DPH
    513          
    514            *pBuf++ = len;
   \   00006B   E5..         MOV     A,?V1
   \   00006D   C0E0         PUSH    A
   \   00006F   85..82       MOV     DPL,?V2
   \   000072   85..83       MOV     DPH,?V3
   \   000075   D0E0         POP     A
   \   000077   F0           MOVX    @DPTR,A
   \   000078   85..82       MOV     DPL,?V2
   \   00007B   85..83       MOV     DPH,?V3
   \   00007E   A3           INC     DPTR
   \   00007F   8582..       MOV     ?V2,DPL
   \   000082   8583..       MOV     ?V3,DPH
    515            addrLen = 3;
   \   000085   75..03       MOV     ?V0,#0x3
    516          
    517            pBuf = osal_memcpy( pBuf, UserDescriptor->desc, len );
   \   000088                ; Setup parameters for call to function osal_memcpy
   \   000088   8882         MOV     DPL,R0
   \   00008A   8983         MOV     DPH,R1
   \   00008C   A3           INC     DPTR
   \   00008D   A982         MOV     R1,DPL
   \   00008F   AA83         MOV     R2,DPH
   \   000091   7B00         MOV     R3,#0x0
   \   000093   89..         MOV     ?V4,R1
   \   000095   8A..         MOV     ?V5,R2
   \   000097   8B..         MOV     ?V6,R3
   \   000099   78..         MOV     R0,#?V4
   \   00009B   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00009E   AC..         MOV     R4,?V1
   \   0000A0   7D00         MOV     R5,#0x0
   \   0000A2   AA..         MOV     R2,?V2
   \   0000A4   AB..         MOV     R3,?V3
   \   0000A6   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000A9   7403         MOV     A,#0x3
   \   0000AB   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AE   8A..         MOV     ?V4,R2
   \   0000B0   8B..         MOV     ?V5,R3
   \   0000B2   85....       MOV     ?V2,?V4
   \   0000B5   85....       MOV     ?V3,?V5
    518            osal_memset( pBuf, AF_USER_DESCRIPTOR_FILL, AF_MAX_USER_DESCRIPTOR_LEN-len );
   \   0000B8                ; Setup parameters for call to function osal_memset
   \   0000B8   A8..         MOV     R0,?V1
   \   0000BA   7900         MOV     R1,#0x0
   \   0000BC   7410         MOV     A,#0x10
   \   0000BE   C3           CLR     C
   \   0000BF   98           SUBB    A,R0
   \   0000C0   FC           MOV     R4,A
   \   0000C1   7400         MOV     A,#0x0
   \   0000C3   99           SUBB    A,R1
   \   0000C4   FD           MOV     R5,A
   \   0000C5   7920         MOV     R1,#0x20
   \   0000C7   AA..         MOV     R2,?V2
   \   0000C9   AB..         MOV     R3,?V3
   \   0000CB   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    519          
    520            return fillAndSend( &ZDP_TransID, dstAddr, User_Desc_set, (AF_MAX_USER_DESCRIPTOR_LEN + addrLen) );
   \   0000CE                ; Setup parameters for call to function fillAndSend
   \   0000CE   75..14       MOV     ?V2,#0x14
   \   0000D1   75..00       MOV     ?V3,#0x0
   \   0000D4   78..         MOV     R0,#?V2
   \   0000D6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D9   7410         MOV     A,#0x10
   \   0000DB   25..         ADD     A,?V0
   \   0000DD   F9           MOV     R1,A
   \   0000DE   EE           MOV     A,R6
   \   0000DF   FC           MOV     R4,A
   \   0000E0   EF           MOV     A,R7
   \   0000E1   FD           MOV     R5,A
   \   0000E2   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   0000E4   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   0000E6   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   0000E9   7402         MOV     A,#0x2
   \   0000EB   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000EE   7F07         MOV     R7,#0x7
   \   0000F0   02....       LJMP    ?BANKED_LEAVE_XDATA
    521          }
    522          
    523          /*********************************************************************
    524           * @fn          ZDP_ServerDiscReq
    525           *
    526           * @brief       Build and send a Server_Discovery_req request message.
    527           *
    528           * @param       serverMask - 16-bit bit-mask of server services being sought.
    529           * @param       SecurityEnable - Security Options
    530           *
    531           * @return      afStatus_t
    532           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    533          afStatus_t ZDP_ServerDiscReq( uint16 serverMask, byte SecurityEnable )
   \                     ZDP_ServerDiscReq:
    534          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    535            uint8 *pBuf = ZDP_TmpBuf;
   \   00000C   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F8           MOV     R0,A
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F9           MOV     R1,A
    536            zAddrType_t dstAddr;
    537          
    538            dstAddr.addrMode = AddrBroadcast;
   \   000014   7408         MOV     A,#0x8
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   740F         MOV     A,#0xf
   \   00001B   F0           MOVX    @DPTR,A
    539            dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
   \   00001C   85..82       MOV     DPL,?XSP + 0
   \   00001F   85..83       MOV     DPH,?XSP + 1
   \   000022   74FD         MOV     A,#-0x3
   \   000024   F0           MOVX    @DPTR,A
   \   000025   A3           INC     DPTR
   \   000026   74FF         MOV     A,#-0x1
   \   000028   F0           MOVX    @DPTR,A
    540          
    541            *pBuf++ = LO_UINT16( serverMask );
   \   000029   EA           MOV     A,R2
   \   00002A   C0E0         PUSH    A
   \   00002C   8882         MOV     DPL,R0
   \   00002E   8983         MOV     DPH,R1
   \   000030   D0E0         POP     A
   \   000032   F0           MOVX    @DPTR,A
   \   000033   8882         MOV     DPL,R0
   \   000035   8983         MOV     DPH,R1
   \   000037   A3           INC     DPTR
   \   000038   A882         MOV     R0,DPL
   \   00003A   A983         MOV     R1,DPH
    542            *pBuf = HI_UINT16( serverMask );
   \   00003C   E4           CLR     A
   \   00003D   CB           XCH     A,R3
   \   00003E   FA           MOV     R2,A
   \   00003F   EA           MOV     A,R2
   \   000040   C0E0         PUSH    A
   \   000042   8882         MOV     DPL,R0
   \   000044   8983         MOV     DPH,R1
   \   000046   D0E0         POP     A
   \   000048   F0           MOVX    @DPTR,A
    543          
    544            FillAndSendTxOptions( &ZDP_TransID, &dstAddr, Server_Discovery_req, 2,
    545                       ((SecurityEnable) ? AF_EN_SECURITY : AF_TX_OPTIONS_NONE) );
   \   000049   EE           MOV     A,R6
   \   00004A   6008         JZ      ??ZDP_ServerDiscReq_0
   \   00004C   90....       MOV     DPTR,#ZDP_TxOptions
   \   00004F   7440         MOV     A,#0x40
   \   000051   F0           MOVX    @DPTR,A
   \   000052   8006         SJMP    ??ZDP_ServerDiscReq_1
   \                     ??ZDP_ServerDiscReq_0:
   \   000054   90....       MOV     DPTR,#ZDP_TxOptions
   \   000057   7400         MOV     A,#0x0
   \   000059   F0           MOVX    @DPTR,A
   \                     ??ZDP_ServerDiscReq_1:
   \   00005A                ; Setup parameters for call to function fillAndSend
   \   00005A   75..15       MOV     ?V0,#0x15
   \   00005D   75..00       MOV     ?V1,#0x0
   \   000060   78..         MOV     R0,#?V0
   \   000062   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000065   7902         MOV     R1,#0x2
   \   000067   7402         MOV     A,#0x2
   \   000069   12....       LCALL   ?XSTACK_DISP102_8
   \   00006C   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   00006E   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000070   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000073   7402         MOV     A,#0x2
   \   000075   12....       LCALL   ?DEALLOC_XSTACK8
   \   000078   E9           MOV     A,R1
   \   000079   F9           MOV     R1,A
   \   00007A   90....       MOV     DPTR,#ZDP_TxOptions
   \   00007D   7400         MOV     A,#0x0
   \   00007F   F0           MOVX    @DPTR,A
   \   000080   7409         MOV     A,#0x9
   \   000082   12....       LCALL   ?DEALLOC_XSTACK8
   \   000085   7F02         MOV     R7,#0x2
   \   000087   02....       LJMP    ?BANKED_LEAVE_XDATA
    546          }
    547          
    548          /*********************************************************************
    549           * @fn          ZDP_DeviceAnnce
    550           *
    551           * @brief       This builds and send a Device_Annce message.  This
    552           *              function sends a broadcast message.
    553           *
    554           * @param       nwkAddr - 16 bit address of the device
    555           * @param       IEEEAddr - 64 bit address of the device
    556           * @param       capabilities - device capabilities.  This field is only
    557           *                 sent for v1.1 networks.
    558           * @param       SecurityEnable - Security Options
    559           *
    560           * @return      afStatus_t
    561           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    562          afStatus_t ZDP_DeviceAnnce( uint16 nwkAddr, uint8 *IEEEAddr,
   \                     ZDP_DeviceAnnce:
    563                                        byte capabilities, byte SecurityEnable )
    564          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    565            zAddrType_t dstAddr;
    566            uint8 len;
    567          
    568            (void)SecurityEnable;  // Intentionally unreferenced parameter
    569          
    570            dstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   00000C   7408         MOV     A,#0x8
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   740F         MOV     A,#0xf
   \   000013   F0           MOVX    @DPTR,A
    571            dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
   \   000014   85..82       MOV     DPL,?XSP + 0
   \   000017   85..83       MOV     DPH,?XSP + 1
   \   00001A   74FD         MOV     A,#-0x3
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   A3           INC     DPTR
   \   00001E   74FF         MOV     A,#-0x1
   \   000020   F0           MOVX    @DPTR,A
    572          
    573            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \   000021   EA           MOV     A,R2
   \   000022   C0E0         PUSH    A
   \   000024   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F8           MOV     R0,A
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F583         MOV     DPH,A
   \   00002D   8882         MOV     DPL,R0
   \   00002F   D0E0         POP     A
   \   000031   F0           MOVX    @DPTR,A
    574            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
   \   000032   E4           CLR     A
   \   000033   CB           XCH     A,R3
   \   000034   FA           MOV     R2,A
   \   000035   EA           MOV     A,R2
   \   000036   C0E0         PUSH    A
   \   000038   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   F8           MOV     R0,A
   \   00003D   A3           INC     DPTR
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   F583         MOV     DPH,A
   \   000041   8882         MOV     DPL,R0
   \   000043   A3           INC     DPTR
   \   000044   D0E0         POP     A
   \   000046   F0           MOVX    @DPTR,A
    575            osal_cpyExtAddr( &ZDP_TmpBuf[2], IEEEAddr );
   \   000047                ; Setup parameters for call to function sAddrExtCpy
   \   000047   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   2402         ADD     A,#0x2
   \   00004D   FA           MOV     R2,A
   \   00004E   A3           INC     DPTR
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   3400         ADDC    A,#0x0
   \   000052   FB           MOV     R3,A
   \   000053   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    576            len = 2 + Z_EXTADDR_LEN;
   \   000056   790A         MOV     R1,#0xa
    577          
    578            ZDP_TmpBuf[10] = capabilities;
   \   000058   EE           MOV     A,R6
   \   000059   C0E0         PUSH    A
   \   00005B   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   F8           MOV     R0,A
   \   000060   A3           INC     DPTR
   \   000061   E0           MOVX    A,@DPTR
   \   000062   C8           XCH     A,R0
   \   000063   240A         ADD     A,#0xa
   \   000065   F582         MOV     DPL,A
   \   000067   C8           XCH     A,R0
   \   000068   3400         ADDC    A,#0x0
   \   00006A   F583         MOV     DPH,A
   \   00006C   D0E0         POP     A
   \   00006E   F0           MOVX    @DPTR,A
    579            len++;
   \   00006F   09           INC     R1
    580          
    581            return fillAndSend( &ZDP_TransID, &dstAddr, Device_annce, len );
   \   000070                ; Setup parameters for call to function fillAndSend
   \   000070   75..13       MOV     ?V0,#0x13
   \   000073   75..00       MOV     ?V1,#0x0
   \   000076   78..         MOV     R0,#?V0
   \   000078   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007B   7402         MOV     A,#0x2
   \   00007D   12....       LCALL   ?XSTACK_DISP102_8
   \   000080   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000082   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000084   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000087   7402         MOV     A,#0x2
   \   000089   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008C   7409         MOV     A,#0x9
   \   00008E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000091   7F02         MOV     R7,#0x2
   \   000093   02....       LJMP    ?BANKED_LEAVE_XDATA
    582          }
    583          
    584          #if defined ( ZIGBEE_CHILD_AGING )
    585          /*********************************************************************
    586           * @fn          ZDP_EndDeviceTimeoutReq
    587           *
    588           * @brief       This builds and send an End_Device_Timeout_req message.
    589           *
    590           * @param       parentAddr - destination address
    591           * @param       reqTimeout - Timeout value the device is requesting
    592           * @param       SecurityEnable - Security Options
    593           *
    594           * @return      afStatus_t
    595           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    596          afStatus_t ZDP_EndDeviceTimeoutReq( uint16 parentAddr, uint16 reqTimeout,
   \                     ZDP_EndDeviceTimeoutReq:
    597                                              uint8 SecurityEnable )
    598          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8C..         MOV     ?V0,R4
   \   00000C   8D..         MOV     ?V1,R5
    599            uint8 *pBuf = ZDP_TmpBuf;
   \   00000E   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000011   E0           MOVX    A,@DPTR
   \   000012   FE           MOV     R6,A
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   FF           MOV     R7,A
    600            uint8 len = Z_EXTADDR_LEN + 2;  // Device_IEEEAddress + reqTimeout.
   \   000016   75..0A       MOV     ?V2,#0xa
    601            zAddrType_t dstAddr;
    602          
    603            (void)SecurityEnable;  // Intentionally unreferenced parameter
    604          
    605            dstAddr.addrMode = Addr16Bit;
   \   000019   7408         MOV     A,#0x8
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   7402         MOV     A,#0x2
   \   000020   F0           MOVX    @DPTR,A
    606            dstAddr.addr.shortAddr = parentAddr;
   \   000021   85..82       MOV     DPL,?XSP + 0
   \   000024   85..83       MOV     DPH,?XSP + 1
   \   000027   EA           MOV     A,R2
   \   000028   F0           MOVX    @DPTR,A
   \   000029   A3           INC     DPTR
   \   00002A   EB           MOV     A,R3
   \   00002B   F0           MOVX    @DPTR,A
    607          
    608            pBuf = osal_cpyExtAddr( pBuf, saveExtAddr );
   \   00002C                ; Setup parameters for call to function sAddrExtCpy
   \   00002C   7C..         MOV     R4,#saveExtAddr & 0xff
   \   00002E   7D..         MOV     R5,#(saveExtAddr >> 8) & 0xff
   \   000030   EE           MOV     A,R6
   \   000031   FA           MOV     R2,A
   \   000032   EF           MOV     A,R7
   \   000033   FB           MOV     R3,A
   \   000034   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000037   8A..         MOV     ?V4,R2
   \   000039   8B..         MOV     ?V5,R3
   \   00003B   AE..         MOV     R6,?V4
   \   00003D   AF..         MOV     R7,?V5
    609          
    610            *pBuf++ = LO_UINT16( reqTimeout );
   \   00003F   E5..         MOV     A,?V0
   \   000041   C0E0         PUSH    A
   \   000043   8E82         MOV     DPL,R6
   \   000045   8F83         MOV     DPH,R7
   \   000047   D0E0         POP     A
   \   000049   F0           MOVX    @DPTR,A
   \   00004A   8E82         MOV     DPL,R6
   \   00004C   8F83         MOV     DPH,R7
   \   00004E   A3           INC     DPTR
   \   00004F   AE82         MOV     R6,DPL
   \   000051   AF83         MOV     R7,DPH
    611            *pBuf++ = HI_UINT16( reqTimeout );
   \   000053   E4           CLR     A
   \   000054   C5..         XCH     A,?V1
   \   000056   F5..         MOV     ?V0,A
   \   000058   E5..         MOV     A,?V0
   \   00005A   C0E0         PUSH    A
   \   00005C   8E82         MOV     DPL,R6
   \   00005E   8F83         MOV     DPH,R7
   \   000060   D0E0         POP     A
   \   000062   F0           MOVX    @DPTR,A
   \   000063   8E82         MOV     DPL,R6
   \   000065   8F83         MOV     DPH,R7
   \   000067   A3           INC     DPTR
   \   000068   AE82         MOV     R6,DPL
   \   00006A   AF83         MOV     R7,DPH
    612          
    613            return fillAndSend( &ZDP_TransID, &dstAddr, End_Device_Timeout_req, len );
   \   00006C                ; Setup parameters for call to function fillAndSend
   \   00006C   75..1F       MOV     ?V0,#0x1f
   \   00006F   75..00       MOV     ?V1,#0x0
   \   000072   78..         MOV     R0,#?V0
   \   000074   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000077   A9..         MOV     R1,?V2
   \   000079   7402         MOV     A,#0x2
   \   00007B   12....       LCALL   ?XSTACK_DISP102_8
   \   00007E   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000080   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000082   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000085   7402         MOV     A,#0x2
   \   000087   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008A   7409         MOV     A,#0x9
   \   00008C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008F   7F06         MOV     R7,#0x6
   \   000091   02....       LJMP    ?BANKED_LEAVE_XDATA
    614          }
    615          #endif // ZIGBEE_CHILD_AGING
    616          
    617          /*********************************************************************
    618           * Address Responses
    619           */
    620          
    621          /*********************************************************************
    622           * @fn      zdpProcessAddrReq
    623           *
    624           * @brief   Process an incoming NWK_addr_req or IEEE_addr_req message and then
    625           *          build and send a corresponding NWK_addr_rsp or IEEE_addr_rsp msg.
    626           *
    627           * @param   inMsg - incoming message
    628           *
    629           * @return  none
    630           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    631          void zdpProcessAddrReq( zdoIncomingMsg_t *inMsg )
   \                     zdpProcessAddrReq:
    632          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV     A,#-0xe
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V4,R2
   \   00000C   8B..         MOV     ?V5,R3
    633            associated_devices_t *pAssoc;
    634            uint8 reqType;
    635            uint16 aoi = INVALID_NODE_ADDR;
   \   00000E   75..FE       MOV     ?V2,#-0x2
   \   000011   75..FF       MOV     ?V3,#-0x1
    636            uint8 *ieee = NULL;
   \   000014   75..00       MOV     ?V0,#0x0
   \   000017   75..00       MOV     ?V1,#0x0
    637          
    638            reqType = inMsg->asdu[(inMsg->clusterID == NWK_addr_req) ? Z_EXTADDR_LEN : sizeof( uint16 ) ];
   \   00001A   E5..         MOV     A,?V4
   \   00001C   240C         ADD     A,#0xc
   \   00001E   F582         MOV     DPL,A
   \   000020   E4           CLR     A
   \   000021   35..         ADDC    A,?V5
   \   000023   F583         MOV     DPH,A
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F8           MOV     R0,A
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F9           MOV     R1,A
   \   00002A   E8           MOV     A,R0
   \   00002B   49           ORL     A,R1
   \   00002C   7006         JNZ     ??zdpProcessAddrReq_0
   \   00002E   7808         MOV     R0,#0x8
   \   000030   7900         MOV     R1,#0x0
   \   000032   8004         SJMP    ??zdpProcessAddrReq_1
   \                     ??zdpProcessAddrReq_0:
   \   000034   7802         MOV     R0,#0x2
   \   000036   7900         MOV     R1,#0x0
   \                     ??zdpProcessAddrReq_1:
   \   000038   E5..         MOV     A,?V4
   \   00003A   2413         ADD     A,#0x13
   \   00003C   F582         MOV     DPL,A
   \   00003E   E4           CLR     A
   \   00003F   35..         ADDC    A,?V5
   \   000041   F583         MOV     DPH,A
   \   000043   E0           MOVX    A,@DPTR
   \   000044   28           ADD     A,R0
   \   000045   FA           MOV     R2,A
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   39           ADDC    A,R1
   \   000049   8A82         MOV     DPL,R2
   \   00004B   F583         MOV     DPH,A
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   F5..         MOV     ?V6,A
    639          
    640            if ( inMsg->clusterID == NWK_addr_req )
   \   000050   E5..         MOV     A,?V4
   \   000052   240C         ADD     A,#0xc
   \   000054   F582         MOV     DPL,A
   \   000056   E4           CLR     A
   \   000057   35..         ADDC    A,?V5
   \   000059   F583         MOV     DPH,A
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   F8           MOV     R0,A
   \   00005D   A3           INC     DPTR
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   F9           MOV     R1,A
   \   000060   E8           MOV     A,R0
   \   000061   49           ORL     A,R1
   \   000062   6003         JZ      $+5
   \   000064   02....       LJMP    ??zdpProcessAddrReq_2 & 0xFFFF
    641          
    642            {
    643              ieee = inMsg->asdu;
   \   000067   E5..         MOV     A,?V4
   \   000069   2413         ADD     A,#0x13
   \   00006B   F582         MOV     DPL,A
   \   00006D   E4           CLR     A
   \   00006E   35..         ADDC    A,?V5
   \   000070   F583         MOV     DPH,A
   \   000072   E0           MOVX    A,@DPTR
   \   000073   F5..         MOV     ?V0,A
   \   000075   A3           INC     DPTR
   \   000076   E0           MOVX    A,@DPTR
   \   000077   F5..         MOV     ?V1,A
    644          
    645              if ( osal_ExtAddrEqual( saveExtAddr, ieee ) )
   \   000079                ; Setup parameters for call to function sAddrExtCmp
   \   000079   AC..         MOV     R4,?V0
   \   00007B   AD..         MOV     R5,?V1
   \   00007D   7A..         MOV     R2,#saveExtAddr & 0xff
   \   00007F   7B..         MOV     R3,#(saveExtAddr >> 8) & 0xff
   \   000081   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000084   E9           MOV     A,R1
   \   000085   600D         JZ      ??zdpProcessAddrReq_3
    646              {
    647                aoi = ZDAppNwkAddr.addr.shortAddr;
   \   000087   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   F5..         MOV     ?V2,A
   \   00008D   A3           INC     DPTR
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   F5..         MOV     ?V3,A
   \   000091   02....       LJMP    ??zdpProcessAddrReq_4 & 0xFFFF
    648              }
    649              // Handle response for sleeping end devices
    650              else if ( (ZSTACK_ROUTER_BUILD)
    651                && (((pAssoc = AssocGetWithExt( ieee )) != NULL)
    652                       && (pAssoc->nodeRelation == CHILD_RFD)) )
   \                     ??zdpProcessAddrReq_3:
   \   000094   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000097   E0           MOVX    A,@DPTR
   \   000098   600B         JZ      ??zdpProcessAddrReq_5
   \   00009A   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00009D   E0           MOVX    A,@DPTR
   \   00009E   6401         XRL     A,#0x1
   \   0000A0   6003         JZ      $+5
   \   0000A2   02....       LJMP    ??zdpProcessAddrReq_4 & 0xFFFF
   \                     ??zdpProcessAddrReq_5:
   \   0000A5                ; Setup parameters for call to function AssocGetWithExt
   \   0000A5   AA..         MOV     R2,?V0
   \   0000A7   AB..         MOV     R3,?V1
   \   0000A9   12....       LCALL   `??AssocGetWithExt::?relay`; Banked call to: AssocGetWithExt
   \   0000AC   8A..         MOV     ?V8,R2
   \   0000AE   8B..         MOV     ?V9,R3
   \   0000B0   AA..         MOV     R2,?V8
   \   0000B2   AB..         MOV     R3,?V9
   \   0000B4   EA           MOV     A,R2
   \   0000B5   F8           MOV     R0,A
   \   0000B6   EB           MOV     A,R3
   \   0000B7   F9           MOV     R1,A
   \   0000B8   EA           MOV     A,R2
   \   0000B9   4B           ORL     A,R3
   \   0000BA   7003         JNZ     $+5
   \   0000BC   02....       LJMP    ??zdpProcessAddrReq_4 & 0xFFFF
   \   0000BF   8882         MOV     DPL,R0
   \   0000C1   8983         MOV     DPH,R1
   \   0000C3   A3           INC     DPTR
   \   0000C4   A3           INC     DPTR
   \   0000C5   A3           INC     DPTR
   \   0000C6   A3           INC     DPTR
   \   0000C7   E0           MOVX    A,@DPTR
   \   0000C8   6401         XRL     A,#0x1
   \   0000CA   6003         JZ      $+5
   \   0000CC   02....       LJMP    ??zdpProcessAddrReq_4 & 0xFFFF
    653              {
    654                aoi = pAssoc->shortAddr;
   \   0000CF   8882         MOV     DPL,R0
   \   0000D1   8983         MOV     DPH,R1
   \   0000D3   E0           MOVX    A,@DPTR
   \   0000D4   F5..         MOV     ?V2,A
   \   0000D6   A3           INC     DPTR
   \   0000D7   E0           MOVX    A,@DPTR
   \   0000D8   F5..         MOV     ?V3,A
    655                if ( reqType != ZDP_ADDR_REQTYPE_SINGLE )
   \   0000DA   E5..         MOV     A,?V6
   \   0000DC   7003         JNZ     $+5
   \   0000DE   02....       LJMP    ??zdpProcessAddrReq_4 & 0xFFFF
    656                  reqType = 0xFF; // Force Invalid
   \   0000E1   75..FF       MOV     ?V6,#-0x1
   \   0000E4   02....       LJMP    ??zdpProcessAddrReq_4 & 0xFFFF
    657              }
    658            }
    659            else  // if ( inMsg->clusterID == IEEE_addr_req )
    660            {
    661              aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \                     ??zdpProcessAddrReq_2:
   \   0000E7   E5..         MOV     A,?V4
   \   0000E9   2413         ADD     A,#0x13
   \   0000EB   F582         MOV     DPL,A
   \   0000ED   E4           CLR     A
   \   0000EE   35..         ADDC    A,?V5
   \   0000F0   F583         MOV     DPH,A
   \   0000F2   E0           MOVX    A,@DPTR
   \   0000F3   F8           MOV     R0,A
   \   0000F4   A3           INC     DPTR
   \   0000F5   E0           MOVX    A,@DPTR
   \   0000F6   F583         MOV     DPH,A
   \   0000F8   8882         MOV     DPL,R0
   \   0000FA   E0           MOVX    A,@DPTR
   \   0000FB   FA           MOV     R2,A
   \   0000FC   7B00         MOV     R3,#0x0
   \   0000FE   E5..         MOV     A,?V4
   \   000100   2413         ADD     A,#0x13
   \   000102   F582         MOV     DPL,A
   \   000104   E4           CLR     A
   \   000105   35..         ADDC    A,?V5
   \   000107   F583         MOV     DPH,A
   \   000109   E0           MOVX    A,@DPTR
   \   00010A   F8           MOV     R0,A
   \   00010B   A3           INC     DPTR
   \   00010C   E0           MOVX    A,@DPTR
   \   00010D   F583         MOV     DPH,A
   \   00010F   8882         MOV     DPL,R0
   \   000111   A3           INC     DPTR
   \   000112   E0           MOVX    A,@DPTR
   \   000113   F8           MOV     R0,A
   \   000114   7900         MOV     R1,#0x0
   \   000116   E4           CLR     A
   \   000117   C8           XCH     A,R0
   \   000118   F9           MOV     R1,A
   \   000119   EA           MOV     A,R2
   \   00011A   28           ADD     A,R0
   \   00011B   F5..         MOV     ?V2,A
   \   00011D   EB           MOV     A,R3
   \   00011E   39           ADDC    A,R1
   \   00011F   F5..         MOV     ?V3,A
    662          
    663              if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \   000121   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000124   E0           MOVX    A,@DPTR
   \   000125   65..         XRL     A,?V2
   \   000127   7004         JNZ     ??zdpProcessAddrReq_6
   \   000129   A3           INC     DPTR
   \   00012A   E0           MOVX    A,@DPTR
   \   00012B   65..         XRL     A,?V3
   \                     ??zdpProcessAddrReq_6:
   \   00012D   7008         JNZ     ??zdpProcessAddrReq_7
    664              {
    665                ieee = saveExtAddr;
   \   00012F   75....       MOV     ?V0,#saveExtAddr & 0xff
   \   000132   75....       MOV     ?V1,#(saveExtAddr >> 8) & 0xff
   \   000135   806C         SJMP    ??zdpProcessAddrReq_4
    666              }
    667              else if ( (ZSTACK_ROUTER_BUILD)
    668                && (((pAssoc = AssocGetWithShort( aoi )) != NULL)
    669                       && (pAssoc->nodeRelation == CHILD_RFD)) )
   \                     ??zdpProcessAddrReq_7:
   \   000137   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00013A   E0           MOVX    A,@DPTR
   \   00013B   6008         JZ      ??zdpProcessAddrReq_8
   \   00013D   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000140   E0           MOVX    A,@DPTR
   \   000141   6401         XRL     A,#0x1
   \   000143   705E         JNZ     ??zdpProcessAddrReq_4
   \                     ??zdpProcessAddrReq_8:
   \   000145                ; Setup parameters for call to function AssocGetWithShort
   \   000145   AA..         MOV     R2,?V2
   \   000147   AB..         MOV     R3,?V3
   \   000149   12....       LCALL   `??AssocGetWithShort::?relay`; Banked call to: AssocGetWithShort
   \   00014C   8A..         MOV     ?V8,R2
   \   00014E   8B..         MOV     ?V9,R3
   \   000150   AA..         MOV     R2,?V8
   \   000152   AB..         MOV     R3,?V9
   \   000154   EA           MOV     A,R2
   \   000155   F8           MOV     R0,A
   \   000156   EB           MOV     A,R3
   \   000157   F9           MOV     R1,A
   \   000158   EA           MOV     A,R2
   \   000159   4B           ORL     A,R3
   \   00015A   6047         JZ      ??zdpProcessAddrReq_4
   \   00015C   8882         MOV     DPL,R0
   \   00015E   8983         MOV     DPH,R1
   \   000160   A3           INC     DPTR
   \   000161   A3           INC     DPTR
   \   000162   A3           INC     DPTR
   \   000163   A3           INC     DPTR
   \   000164   E0           MOVX    A,@DPTR
   \   000165   6401         XRL     A,#0x1
   \   000167   703A         JNZ     ??zdpProcessAddrReq_4
    670              {
    671                AddrMgrEntry_t addrEntry;
    672                addrEntry.user = ADDRMGR_USER_DEFAULT;
   \   000169   7401         MOV     A,#0x1
   \   00016B   12....       LCALL   ?XSTACK_DISP0_8
   \   00016E   7400         MOV     A,#0x0
   \   000170   F0           MOVX    @DPTR,A
    673                addrEntry.index = pAssoc->addrIdx;
   \   000171   8882         MOV     DPL,R0
   \   000173   8983         MOV     DPH,R1
   \   000175   A3           INC     DPTR
   \   000176   A3           INC     DPTR
   \   000177   E0           MOVX    A,@DPTR
   \   000178   F8           MOV     R0,A
   \   000179   A3           INC     DPTR
   \   00017A   E0           MOVX    A,@DPTR
   \   00017B   F9           MOV     R1,A
   \   00017C   740C         MOV     A,#0xc
   \   00017E   12....       LCALL   ?XSTACK_DISP0_8
   \   000181   E8           MOV     A,R0
   \   000182   F0           MOVX    @DPTR,A
   \   000183   A3           INC     DPTR
   \   000184   E9           MOV     A,R1
   \   000185   F0           MOVX    @DPTR,A
    674                if ( AddrMgrEntryGet( &addrEntry ) )
   \   000186                ; Setup parameters for call to function AddrMgrEntryGet
   \   000186   7401         MOV     A,#0x1
   \   000188   12....       LCALL   ?XSTACK_DISP101_8
   \   00018B   12....       LCALL   `??AddrMgrEntryGet::?relay`; Banked call to: AddrMgrEntryGet
   \   00018E   E9           MOV     A,R1
   \   00018F   600B         JZ      ??zdpProcessAddrReq_9
    675                {
    676                  ieee = addrEntry.extAddr;
   \   000191   7404         MOV     A,#0x4
   \   000193   12....       LCALL   ?XSTACK_DISP0_8
   \   000196   8582..       MOV     ?V0,DPL
   \   000199   8583..       MOV     ?V1,DPH
    677                }
    678          
    679                if ( reqType != ZDP_ADDR_REQTYPE_SINGLE )
   \                     ??zdpProcessAddrReq_9:
   \   00019C   E5..         MOV     A,?V6
   \   00019E   6003         JZ      ??zdpProcessAddrReq_4
    680                  reqType = 0xFF; // Force Invalid
   \   0001A0   75..FF       MOV     ?V6,#-0x1
    681              }
    682            }
    683          
    684            if ( ((aoi != INVALID_NODE_ADDR) && (ieee != NULL)) || (inMsg->wasBroadcast == FALSE) )
   \                     ??zdpProcessAddrReq_4:
   \   0001A3   74FE         MOV     A,#-0x2
   \   0001A5   65..         XRL     A,?V2
   \   0001A7   7004         JNZ     ??zdpProcessAddrReq_10
   \   0001A9   74FF         MOV     A,#-0x1
   \   0001AB   65..         XRL     A,?V3
   \                     ??zdpProcessAddrReq_10:
   \   0001AD   6006         JZ      ??zdpProcessAddrReq_11
   \   0001AF   E5..         MOV     A,?V0
   \   0001B1   45..         ORL     A,?V1
   \   0001B3   7011         JNZ     ??zdpProcessAddrReq_12
   \                     ??zdpProcessAddrReq_11:
   \   0001B5   E5..         MOV     A,?V4
   \   0001B7   240B         ADD     A,#0xb
   \   0001B9   F582         MOV     DPL,A
   \   0001BB   E4           CLR     A
   \   0001BC   35..         ADDC    A,?V5
   \   0001BE   F583         MOV     DPH,A
   \   0001C0   E0           MOVX    A,@DPTR
   \   0001C1   6003         JZ      $+5
   \   0001C3   02....       LJMP    ??zdpProcessAddrReq_13 & 0xFFFF
    685            {
    686              uint8 stat;
    687              uint8 *pBuf = ZDP_TmpBuf;
   \                     ??zdpProcessAddrReq_12:
   \   0001C6   90....       MOV     DPTR,#ZDP_TmpBuf
   \   0001C9   E0           MOVX    A,@DPTR
   \   0001CA   FE           MOV     R6,A
   \   0001CB   A3           INC     DPTR
   \   0001CC   E0           MOVX    A,@DPTR
   \   0001CD   FF           MOV     R7,A
    688              // Status + IEEE-Addr + Nwk-Addr.
    689              uint8 len = 1 + Z_EXTADDR_LEN + 2;
   \   0001CE   75..0B       MOV     ?V8,#0xb
    690          
    691              // If aoi and iee are both setup, we found results
    692              if ( (aoi != INVALID_NODE_ADDR) && (ieee != NULL) )
   \   0001D1   74FE         MOV     A,#-0x2
   \   0001D3   65..         XRL     A,?V2
   \   0001D5   7004         JNZ     ??zdpProcessAddrReq_14
   \   0001D7   74FF         MOV     A,#-0x1
   \   0001D9   65..         XRL     A,?V3
   \                     ??zdpProcessAddrReq_14:
   \   0001DB   601A         JZ      ??zdpProcessAddrReq_15
   \   0001DD   E5..         MOV     A,?V0
   \   0001DF   45..         ORL     A,?V1
   \   0001E1   6014         JZ      ??zdpProcessAddrReq_15
    693              {
    694                stat = ((reqType == ZDP_ADDR_REQTYPE_SINGLE) || (reqType == ZDP_ADDR_REQTYPE_EXTENDED))
    695                              ? ZDP_SUCCESS : ZDP_INVALID_REQTYPE;
   \   0001E3   E5..         MOV     A,?V6
   \   0001E5   6006         JZ      ??zdpProcessAddrReq_16
   \   0001E7   7401         MOV     A,#0x1
   \   0001E9   65..         XRL     A,?V6
   \   0001EB   7005         JNZ     ??zdpProcessAddrReq_17
   \                     ??zdpProcessAddrReq_16:
   \   0001ED   75..00       MOV     ?V7,#0x0
   \   0001F0   802E         SJMP    ??zdpProcessAddrReq_18
   \                     ??zdpProcessAddrReq_17:
   \   0001F2   75..80       MOV     ?V7,#-0x80
   \   0001F5   8029         SJMP    ??zdpProcessAddrReq_18
    696              }
    697              else
    698              {
    699                // not found and the req was unicast to this device
    700                stat = ZDP_DEVICE_NOT_FOUND;
   \                     ??zdpProcessAddrReq_15:
   \   0001F7   75..81       MOV     ?V7,#-0x7f
    701          
    702                // Fill in the missing field with this device's address
    703                if ( inMsg->clusterID == NWK_addr_req )
   \   0001FA   E5..         MOV     A,?V4
   \   0001FC   240C         ADD     A,#0xc
   \   0001FE   F582         MOV     DPL,A
   \   000200   E4           CLR     A
   \   000201   35..         ADDC    A,?V5
   \   000203   F583         MOV     DPH,A
   \   000205   E0           MOVX    A,@DPTR
   \   000206   F8           MOV     R0,A
   \   000207   A3           INC     DPTR
   \   000208   E0           MOVX    A,@DPTR
   \   000209   F9           MOV     R1,A
   \   00020A   E8           MOV     A,R0
   \   00020B   49           ORL     A,R1
   \   00020C   700C         JNZ     ??zdpProcessAddrReq_19
    704                {
    705                  aoi = ZDAppNwkAddr.addr.shortAddr;
   \   00020E   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000211   E0           MOVX    A,@DPTR
   \   000212   F5..         MOV     ?V2,A
   \   000214   A3           INC     DPTR
   \   000215   E0           MOVX    A,@DPTR
   \   000216   F5..         MOV     ?V3,A
   \   000218   8006         SJMP    ??zdpProcessAddrReq_18
    706                }
    707                else
    708                {
    709                  ieee = saveExtAddr;
   \                     ??zdpProcessAddrReq_19:
   \   00021A   75....       MOV     ?V0,#saveExtAddr & 0xff
   \   00021D   75....       MOV     ?V1,#(saveExtAddr >> 8) & 0xff
    710                }
    711              }
    712          
    713              *pBuf++ = stat;
   \                     ??zdpProcessAddrReq_18:
   \   000220   E5..         MOV     A,?V7
   \   000222   C0E0         PUSH    A
   \   000224   8E82         MOV     DPL,R6
   \   000226   8F83         MOV     DPH,R7
   \   000228   D0E0         POP     A
   \   00022A   F0           MOVX    @DPTR,A
   \   00022B   8E82         MOV     DPL,R6
   \   00022D   8F83         MOV     DPH,R7
   \   00022F   A3           INC     DPTR
   \   000230   AE82         MOV     R6,DPL
   \   000232   AF83         MOV     R7,DPH
    714          
    715              pBuf = osal_cpyExtAddr( pBuf, ieee );
   \   000234                ; Setup parameters for call to function sAddrExtCpy
   \   000234   AC..         MOV     R4,?V0
   \   000236   AD..         MOV     R5,?V1
   \   000238   EE           MOV     A,R6
   \   000239   FA           MOV     R2,A
   \   00023A   EF           MOV     A,R7
   \   00023B   FB           MOV     R3,A
   \   00023C   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00023F   8A..         MOV     ?V0,R2
   \   000241   8B..         MOV     ?V1,R3
   \   000243   AE..         MOV     R6,?V0
   \   000245   AF..         MOV     R7,?V1
    716          
    717              *pBuf++ = LO_UINT16( aoi );
   \   000247   E5..         MOV     A,?V2
   \   000249   C0E0         PUSH    A
   \   00024B   8E82         MOV     DPL,R6
   \   00024D   8F83         MOV     DPH,R7
   \   00024F   D0E0         POP     A
   \   000251   F0           MOVX    @DPTR,A
   \   000252   8E82         MOV     DPL,R6
   \   000254   8F83         MOV     DPH,R7
   \   000256   A3           INC     DPTR
   \   000257   AE82         MOV     R6,DPL
   \   000259   AF83         MOV     R7,DPH
    718              *pBuf++ = HI_UINT16( aoi );
   \   00025B   A8..         MOV     R0,?V2
   \   00025D   A9..         MOV     R1,?V3
   \   00025F   E4           CLR     A
   \   000260   C9           XCH     A,R1
   \   000261   F8           MOV     R0,A
   \   000262   E8           MOV     A,R0
   \   000263   C0E0         PUSH    A
   \   000265   8E82         MOV     DPL,R6
   \   000267   8F83         MOV     DPH,R7
   \   000269   D0E0         POP     A
   \   00026B   F0           MOVX    @DPTR,A
   \   00026C   8E82         MOV     DPL,R6
   \   00026E   8F83         MOV     DPH,R7
   \   000270   A3           INC     DPTR
   \   000271   AE82         MOV     R6,DPL
   \   000273   AF83         MOV     R7,DPH
    719          
    720              if ( ZSTACK_ROUTER_BUILD )
   \   000275   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000278   E0           MOVX    A,@DPTR
   \   000279   600B         JZ      ??zdpProcessAddrReq_20
   \   00027B   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00027E   E0           MOVX    A,@DPTR
   \   00027F   6401         XRL     A,#0x1
   \   000281   6003         JZ      $+5
   \   000283   02....       LJMP    ??zdpProcessAddrReq_21 & 0xFFFF
    721              {
    722                if ( (reqType == ZDP_ADDR_REQTYPE_EXTENDED) && (aoi == ZDAppNwkAddr.addr.shortAddr)
    723                     && (stat == ZDP_SUCCESS) )
   \                     ??zdpProcessAddrReq_20:
   \   000286   7401         MOV     A,#0x1
   \   000288   65..         XRL     A,?V6
   \   00028A   6003         JZ      $+5
   \   00028C   02....       LJMP    ??zdpProcessAddrReq_21 & 0xFFFF
   \   00028F   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000292   E0           MOVX    A,@DPTR
   \   000293   65..         XRL     A,?V2
   \   000295   7004         JNZ     ??zdpProcessAddrReq_22
   \   000297   A3           INC     DPTR
   \   000298   E0           MOVX    A,@DPTR
   \   000299   65..         XRL     A,?V3
   \                     ??zdpProcessAddrReq_22:
   \   00029B   6003         JZ      $+5
   \   00029D   02....       LJMP    ??zdpProcessAddrReq_21 & 0xFFFF
   \   0002A0   E5..         MOV     A,?V7
   \   0002A2   6003         JZ      $+5
   \   0002A4   02....       LJMP    ??zdpProcessAddrReq_21 & 0xFFFF
    724                {
    725                  uint8  cnt = 0;
   \   0002A7   85..82       MOV     DPL,?XSP + 0
   \   0002AA   85..83       MOV     DPH,?XSP + 1
   \   0002AD   7400         MOV     A,#0x0
   \   0002AF   F0           MOVX    @DPTR,A
    726                  uint16 *list = AssocMakeList( &cnt );
   \   0002B0                ; Setup parameters for call to function AssocMakeList
   \   0002B0   AA..         MOV     R2,?XSP + 0
   \   0002B2   AB..         MOV     R3,?XSP + 1
   \   0002B4   12....       LCALL   `??AssocMakeList::?relay`; Banked call to: AssocMakeList
   \   0002B7   8A..         MOV     ?V0,R2
   \   0002B9   8B..         MOV     ?V1,R3
   \   0002BB   AA..         MOV     R2,?V0
   \   0002BD   AB..         MOV     R3,?V1
    727          
    728                  if ( list != NULL )
   \   0002BF   EA           MOV     A,R2
   \   0002C0   4B           ORL     A,R3
   \   0002C1   7003         JNZ     $+5
   \   0002C3   02....       LJMP    ??zdpProcessAddrReq_23 & 0xFFFF
    729                  {
    730                    byte idx = inMsg->asdu[(((inMsg->clusterID == NWK_addr_req) ? Z_EXTADDR_LEN : sizeof( uint16 )) + 1)];
   \   0002C6   E5..         MOV     A,?V4
   \   0002C8   240C         ADD     A,#0xc
   \   0002CA   F582         MOV     DPL,A
   \   0002CC   E4           CLR     A
   \   0002CD   35..         ADDC    A,?V5
   \   0002CF   F583         MOV     DPH,A
   \   0002D1   E0           MOVX    A,@DPTR
   \   0002D2   F8           MOV     R0,A
   \   0002D3   A3           INC     DPTR
   \   0002D4   E0           MOVX    A,@DPTR
   \   0002D5   F9           MOV     R1,A
   \   0002D6   E8           MOV     A,R0
   \   0002D7   49           ORL     A,R1
   \   0002D8   7006         JNZ     ??zdpProcessAddrReq_24
   \   0002DA   7808         MOV     R0,#0x8
   \   0002DC   7900         MOV     R1,#0x0
   \   0002DE   8004         SJMP    ??zdpProcessAddrReq_25
   \                     ??zdpProcessAddrReq_24:
   \   0002E0   7802         MOV     R0,#0x2
   \   0002E2   7900         MOV     R1,#0x0
   \                     ??zdpProcessAddrReq_25:
   \   0002E4   E5..         MOV     A,?V4
   \   0002E6   2413         ADD     A,#0x13
   \   0002E8   F582         MOV     DPL,A
   \   0002EA   E4           CLR     A
   \   0002EB   35..         ADDC    A,?V5
   \   0002ED   F583         MOV     DPH,A
   \   0002EF   E0           MOVX    A,@DPTR
   \   0002F0   28           ADD     A,R0
   \   0002F1   FC           MOV     R4,A
   \   0002F2   A3           INC     DPTR
   \   0002F3   E0           MOVX    A,@DPTR
   \   0002F4   39           ADDC    A,R1
   \   0002F5   8C82         MOV     DPL,R4
   \   0002F7   F583         MOV     DPH,A
   \   0002F9   A3           INC     DPTR
   \   0002FA   E0           MOVX    A,@DPTR
   \   0002FB   FC           MOV     R4,A
    731                    uint16 *pList = list + idx;
   \   0002FC   EC           MOV     A,R4
   \   0002FD   F8           MOV     R0,A
   \   0002FE   7900         MOV     R1,#0x0
   \   000300   E8           MOV     A,R0
   \   000301   75F002       MOV     B,#0x2
   \   000304   A4           MUL     AB
   \   000305   C8           XCH     A,R0
   \   000306   ADF0         MOV     R5,B
   \   000308   75F000       MOV     B,#0x0
   \   00030B   A4           MUL     AB
   \   00030C   2D           ADD     A,R5
   \   00030D   FD           MOV     R5,A
   \   00030E   75F002       MOV     B,#0x2
   \   000311   E9           MOV     A,R1
   \   000312   A4           MUL     AB
   \   000313   2D           ADD     A,R5
   \   000314   F9           MOV     R1,A
   \   000315   EA           MOV     A,R2
   \   000316   28           ADD     A,R0
   \   000317   F8           MOV     R0,A
   \   000318   EB           MOV     A,R3
   \   000319   39           ADDC    A,R1
   \   00031A   F9           MOV     R1,A
    732          
    733                    // NumAssocDev field is only present on success.
    734                    if ( cnt > idx )
   \   00031B   85..82       MOV     DPL,?XSP + 0
   \   00031E   85..83       MOV     DPH,?XSP + 1
   \   000321   E0           MOVX    A,@DPTR
   \   000322   FD           MOV     R5,A
   \   000323   EC           MOV     A,R4
   \   000324   C3           CLR     C
   \   000325   9D           SUBB    A,R5
   \   000326   501B         JNC     ??zdpProcessAddrReq_26
    735                    {
    736                      cnt -= idx;
   \   000328   85..82       MOV     DPL,?XSP + 0
   \   00032B   85..83       MOV     DPH,?XSP + 1
   \   00032E   E0           MOVX    A,@DPTR
   \   00032F   C3           CLR     C
   \   000330   9C           SUBB    A,R4
   \   000331   F0           MOVX    @DPTR,A
    737                      len += (cnt * sizeof( uint16 ));
   \   000332   75F002       MOV     B,#0x2
   \   000335   85..82       MOV     DPL,?XSP + 0
   \   000338   85..83       MOV     DPH,?XSP + 1
   \   00033B   E0           MOVX    A,@DPTR
   \   00033C   A4           MUL     AB
   \   00033D   25..         ADD     A,?V8
   \   00033F   F5..         MOV     ?V8,A
   \   000341   8009         SJMP    ??zdpProcessAddrReq_27
    738                    }
    739                    else
    740                    {
    741                      cnt = 0;
   \                     ??zdpProcessAddrReq_26:
   \   000343   85..82       MOV     DPL,?XSP + 0
   \   000346   85..83       MOV     DPH,?XSP + 1
   \   000349   7400         MOV     A,#0x0
   \   00034B   F0           MOVX    @DPTR,A
    742                    }
    743                    *pBuf++ = cnt;
   \                     ??zdpProcessAddrReq_27:
   \   00034C   85..82       MOV     DPL,?XSP + 0
   \   00034F   85..83       MOV     DPH,?XSP + 1
   \   000352   E0           MOVX    A,@DPTR
   \   000353   C0E0         PUSH    A
   \   000355   8E82         MOV     DPL,R6
   \   000357   8F83         MOV     DPH,R7
   \   000359   D0E0         POP     A
   \   00035B   F0           MOVX    @DPTR,A
   \   00035C   8E82         MOV     DPL,R6
   \   00035E   8F83         MOV     DPH,R7
   \   000360   A3           INC     DPTR
   \   000361   AE82         MOV     R6,DPL
   \   000363   AF83         MOV     R7,DPH
    744                    len++;
   \   000365   05..         INC     ?V8
    745          
    746                    // StartIndex field is only present if NumAssocDev field is non-zero.
    747                    *pBuf++ = idx;
   \   000367   EC           MOV     A,R4
   \   000368   C0E0         PUSH    A
   \   00036A   8E82         MOV     DPL,R6
   \   00036C   8F83         MOV     DPH,R7
   \   00036E   D0E0         POP     A
   \   000370   F0           MOVX    @DPTR,A
   \   000371   8E82         MOV     DPL,R6
   \   000373   8F83         MOV     DPH,R7
   \   000375   A3           INC     DPTR
   \   000376   AE82         MOV     R6,DPL
   \   000378   AF83         MOV     R7,DPH
    748                    len++;
   \   00037A   05..         INC     ?V8
   \   00037C   804C         SJMP    ??zdpProcessAddrReq_28
    749          
    750                    while ( cnt != 0 )
    751                    {
    752                      *pBuf++ = LO_UINT16( *pList );
   \                     ??zdpProcessAddrReq_29:
   \   00037E   8882         MOV     DPL,R0
   \   000380   8983         MOV     DPH,R1
   \   000382   E0           MOVX    A,@DPTR
   \   000383   FC           MOV     R4,A
   \   000384   A3           INC     DPTR
   \   000385   E0           MOVX    A,@DPTR
   \   000386   FD           MOV     R5,A
   \   000387   EC           MOV     A,R4
   \   000388   C0E0         PUSH    A
   \   00038A   8E82         MOV     DPL,R6
   \   00038C   8F83         MOV     DPH,R7
   \   00038E   D0E0         POP     A
   \   000390   F0           MOVX    @DPTR,A
   \   000391   8E82         MOV     DPL,R6
   \   000393   8F83         MOV     DPH,R7
   \   000395   A3           INC     DPTR
   \   000396   AE82         MOV     R6,DPL
   \   000398   AF83         MOV     R7,DPH
    753                      *pBuf++ = HI_UINT16( *pList );
   \   00039A   8882         MOV     DPL,R0
   \   00039C   8983         MOV     DPH,R1
   \   00039E   E0           MOVX    A,@DPTR
   \   00039F   FC           MOV     R4,A
   \   0003A0   A3           INC     DPTR
   \   0003A1   E0           MOVX    A,@DPTR
   \   0003A2   FD           MOV     R5,A
   \   0003A3   E4           CLR     A
   \   0003A4   CD           XCH     A,R5
   \   0003A5   FC           MOV     R4,A
   \   0003A6   EC           MOV     A,R4
   \   0003A7   C0E0         PUSH    A
   \   0003A9   8E82         MOV     DPL,R6
   \   0003AB   8F83         MOV     DPH,R7
   \   0003AD   D0E0         POP     A
   \   0003AF   F0           MOVX    @DPTR,A
   \   0003B0   8E82         MOV     DPL,R6
   \   0003B2   8F83         MOV     DPH,R7
   \   0003B4   A3           INC     DPTR
   \   0003B5   AE82         MOV     R6,DPL
   \   0003B7   AF83         MOV     R7,DPH
    754                      pList++;
   \   0003B9   E8           MOV     A,R0
   \   0003BA   2402         ADD     A,#0x2
   \   0003BC   F8           MOV     R0,A
   \   0003BD   5001         JNC     ??zdpProcessAddrReq_30
   \   0003BF   09           INC     R1
    755                      cnt--;
   \                     ??zdpProcessAddrReq_30:
   \   0003C0   85..82       MOV     DPL,?XSP + 0
   \   0003C3   85..83       MOV     DPH,?XSP + 1
   \   0003C6   E0           MOVX    A,@DPTR
   \   0003C7   24FF         ADD     A,#-0x1
   \   0003C9   F0           MOVX    @DPTR,A
    756                    }
   \                     ??zdpProcessAddrReq_28:
   \   0003CA   85..82       MOV     DPL,?XSP + 0
   \   0003CD   85..83       MOV     DPH,?XSP + 1
   \   0003D0   E0           MOVX    A,@DPTR
   \   0003D1   70AB         JNZ     ??zdpProcessAddrReq_29
    757          
    758                    osal_mem_free( (uint8 *)list );
   \   0003D3                ; Setup parameters for call to function osal_mem_free
   \   0003D3   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0003D6   8012         SJMP    ??zdpProcessAddrReq_21
    759                  }
    760                  else
    761                  {
    762                    // NumAssocDev field is only present on success.
    763                    *pBuf++ = 0;
   \                     ??zdpProcessAddrReq_23:
   \   0003D8   8E82         MOV     DPL,R6
   \   0003DA   8F83         MOV     DPH,R7
   \   0003DC   7400         MOV     A,#0x0
   \   0003DE   F0           MOVX    @DPTR,A
   \   0003DF   8E82         MOV     DPL,R6
   \   0003E1   8F83         MOV     DPH,R7
   \   0003E3   A3           INC     DPTR
   \   0003E4   AE82         MOV     R6,DPL
   \   0003E6   AF83         MOV     R7,DPH
    764                    len++;
   \   0003E8   05..         INC     ?V8
    765                  }
    766                }
    767              }
    768          
    769              ZDP_TxOptions = AF_MSG_ACK_REQUEST;
   \                     ??zdpProcessAddrReq_21:
   \   0003EA   90....       MOV     DPTR,#ZDP_TxOptions
   \   0003ED   7410         MOV     A,#0x10
   \   0003EF   F0           MOVX    @DPTR,A
    770              fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), (cId_t)(inMsg->clusterID | ZDO_RESPONSE_BIT), len );
   \   0003F0                ; Setup parameters for call to function fillAndSend
   \   0003F0   E5..         MOV     A,?V4
   \   0003F2   240C         ADD     A,#0xc
   \   0003F4   F582         MOV     DPL,A
   \   0003F6   E4           CLR     A
   \   0003F7   35..         ADDC    A,?V5
   \   0003F9   F583         MOV     DPH,A
   \   0003FB   E0           MOVX    A,@DPTR
   \   0003FC   4400         ORL     A,#0x0
   \   0003FE   F5..         MOV     ?V0,A
   \   000400   A3           INC     DPTR
   \   000401   E0           MOVX    A,@DPTR
   \   000402   4480         ORL     A,#0x80
   \   000404   F5..         MOV     ?V1,A
   \   000406   78..         MOV     R0,#?V0
   \   000408   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00040B   A9..         MOV     R1,?V8
   \   00040D   E5..         MOV     A,?V4
   \   00040F   2402         ADD     A,#0x2
   \   000411   FC           MOV     R4,A
   \   000412   E4           CLR     A
   \   000413   35..         ADDC    A,?V5
   \   000415   FD           MOV     R5,A
   \   000416   E5..         MOV     A,?V4
   \   000418   240F         ADD     A,#0xf
   \   00041A   FA           MOV     R2,A
   \   00041B   E4           CLR     A
   \   00041C   35..         ADDC    A,?V5
   \   00041E   FB           MOV     R3,A
   \   00041F   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000422   7402         MOV     A,#0x2
   \   000424   12....       LCALL   ?DEALLOC_XSTACK8
   \   000427   E9           MOV     A,R1
    771              ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \   000428   90....       MOV     DPTR,#ZDP_TxOptions
   \   00042B   7400         MOV     A,#0x0
   \   00042D   F0           MOVX    @DPTR,A
    772            }
    773          }
   \                     ??zdpProcessAddrReq_13:
   \   00042E   740E         MOV     A,#0xe
   \   000430   12....       LCALL   ?DEALLOC_XSTACK8
   \   000433   7F0A         MOV     R7,#0xa
   \   000435   02....       LJMP    ?BANKED_LEAVE_XDATA
    774          
    775          /*********************************************************************
    776           * @fn          ZDP_NodeDescMsg
    777           *
    778           * @brief       Builds and sends a Node Descriptor message, unicast to the
    779           *              specified device.
    780           *
    781           * @param       inMsg - incoming message
    782           * @param       nwkAddr - 16 bit network address for device
    783           * @param       pNodeDesc - pointer to the node descriptor
    784           *
    785           * @return      afStatus_t
    786           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    787          afStatus_t ZDP_NodeDescMsg( zdoIncomingMsg_t *inMsg,
   \                     ZDP_NodeDescMsg:
    788                                     uint16 nwkAddr, NodeDescriptorFormat_t *pNodeDesc )
    789          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    790            uint8 *pBuf = ZDP_TmpBuf;
   \   000005   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F8           MOV     R0,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
    791            byte len;
    792          
    793            len = 1 + 2 + 13;  // Status + nwkAddr + Node descriptor
   \   00000D   7E10         MOV     R6,#0x10
    794          
    795            *pBuf++ = ZDP_SUCCESS;
   \   00000F   8882         MOV     DPL,R0
   \   000011   8983         MOV     DPH,R1
   \   000013   7400         MOV     A,#0x0
   \   000015   F0           MOVX    @DPTR,A
   \   000016   8882         MOV     DPL,R0
   \   000018   8983         MOV     DPH,R1
   \   00001A   A3           INC     DPTR
   \   00001B   A882         MOV     R0,DPL
   \   00001D   A983         MOV     R1,DPH
    796          
    797            *pBuf++ = LO_UINT16( nwkAddr );
   \   00001F   EC           MOV     A,R4
   \   000020   C0E0         PUSH    A
   \   000022   8882         MOV     DPL,R0
   \   000024   8983         MOV     DPH,R1
   \   000026   D0E0         POP     A
   \   000028   F0           MOVX    @DPTR,A
   \   000029   8882         MOV     DPL,R0
   \   00002B   8983         MOV     DPH,R1
   \   00002D   A3           INC     DPTR
   \   00002E   A882         MOV     R0,DPL
   \   000030   A983         MOV     R1,DPH
    798            *pBuf++ = HI_UINT16( nwkAddr );
   \   000032   E4           CLR     A
   \   000033   CD           XCH     A,R5
   \   000034   FC           MOV     R4,A
   \   000035   EC           MOV     A,R4
   \   000036   C0E0         PUSH    A
   \   000038   8882         MOV     DPL,R0
   \   00003A   8983         MOV     DPH,R1
   \   00003C   D0E0         POP     A
   \   00003E   F0           MOVX    @DPTR,A
   \   00003F   8882         MOV     DPL,R0
   \   000041   8983         MOV     DPH,R1
   \   000043   A3           INC     DPTR
   \   000044   A882         MOV     R0,DPL
   \   000046   A983         MOV     R1,DPH
   \   000048   740A         MOV     A,#0xa
   \   00004A   12....       LCALL   ?XSTACK_DISP0_8
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   FC           MOV     R4,A
   \   00004F   A3           INC     DPTR
   \   000050   E0           MOVX    A,@DPTR
   \   000051   FD           MOV     R5,A
    799          
    800            *pBuf++ = (byte)((pNodeDesc->ComplexDescAvail << 3) |
    801                               (pNodeDesc->UserDescAvail << 4) |
    802                               (pNodeDesc->LogicalType & 0x07));
   \   000052   8C82         MOV     DPL,R4
   \   000054   8D83         MOV     DPH,R5
   \   000056   E0           MOVX    A,@DPTR
   \   000057   5407         ANL     A,#0x7
   \   000059   F5..         MOV     ?V0,A
   \   00005B   8C82         MOV     DPL,R4
   \   00005D   8D83         MOV     DPH,R5
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   A2E4         MOV     C,0xE0 /* A   */.4
   \   000062   E4           CLR     A
   \   000063   33           RLC     A
   \   000064   C4           SWAP    A
   \   000065   54F0         ANL     A,#0xf0
   \   000067   FF           MOV     R7,A
   \   000068   8C82         MOV     DPL,R4
   \   00006A   8D83         MOV     DPH,R5
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   A2E3         MOV     C,0xE0 /* A   */.3
   \   00006F   E4           CLR     A
   \   000070   33           RLC     A
   \   000071   33           RLC     A
   \   000072   33           RLC     A
   \   000073   33           RLC     A
   \   000074   54F8         ANL     A,#0xf8
   \   000076   4F           ORL     A,R7
   \   000077   45..         ORL     A,?V0
   \   000079   C0E0         PUSH    A
   \   00007B   8882         MOV     DPL,R0
   \   00007D   8983         MOV     DPH,R1
   \   00007F   D0E0         POP     A
   \   000081   F0           MOVX    @DPTR,A
   \   000082   8882         MOV     DPL,R0
   \   000084   8983         MOV     DPH,R1
   \   000086   A3           INC     DPTR
   \   000087   A882         MOV     R0,DPL
   \   000089   A983         MOV     R1,DPH
    803          
    804            *pBuf++ = (byte)((pNodeDesc->FrequencyBand << 3) | (pNodeDesc->APSFlags & 0x07));
   \   00008B   8C82         MOV     DPL,R4
   \   00008D   8D83         MOV     DPH,R5
   \   00008F   A3           INC     DPTR
   \   000090   E0           MOVX    A,@DPTR
   \   000091   5407         ANL     A,#0x7
   \   000093   FF           MOV     R7,A
   \   000094   8C82         MOV     DPL,R4
   \   000096   8D83         MOV     DPH,R5
   \   000098   A3           INC     DPTR
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   13           RRC     A
   \   00009B   13           RRC     A
   \   00009C   13           RRC     A
   \   00009D   541F         ANL     A,#0x1f
   \   00009F   33           RLC     A
   \   0000A0   33           RLC     A
   \   0000A1   33           RLC     A
   \   0000A2   54F8         ANL     A,#0xf8
   \   0000A4   4F           ORL     A,R7
   \   0000A5   C0E0         PUSH    A
   \   0000A7   8882         MOV     DPL,R0
   \   0000A9   8983         MOV     DPH,R1
   \   0000AB   D0E0         POP     A
   \   0000AD   F0           MOVX    @DPTR,A
   \   0000AE   8882         MOV     DPL,R0
   \   0000B0   8983         MOV     DPH,R1
   \   0000B2   A3           INC     DPTR
   \   0000B3   A882         MOV     R0,DPL
   \   0000B5   A983         MOV     R1,DPH
    805            *pBuf++ = pNodeDesc->CapabilityFlags;
   \   0000B7   8C82         MOV     DPL,R4
   \   0000B9   8D83         MOV     DPH,R5
   \   0000BB   A3           INC     DPTR
   \   0000BC   A3           INC     DPTR
   \   0000BD   E0           MOVX    A,@DPTR
   \   0000BE   C0E0         PUSH    A
   \   0000C0   8882         MOV     DPL,R0
   \   0000C2   8983         MOV     DPH,R1
   \   0000C4   D0E0         POP     A
   \   0000C6   F0           MOVX    @DPTR,A
   \   0000C7   8882         MOV     DPL,R0
   \   0000C9   8983         MOV     DPH,R1
   \   0000CB   A3           INC     DPTR
   \   0000CC   A882         MOV     R0,DPL
   \   0000CE   A983         MOV     R1,DPH
    806            *pBuf++ = pNodeDesc->ManufacturerCode[0];
   \   0000D0   8C82         MOV     DPL,R4
   \   0000D2   8D83         MOV     DPH,R5
   \   0000D4   A3           INC     DPTR
   \   0000D5   A3           INC     DPTR
   \   0000D6   A3           INC     DPTR
   \   0000D7   E0           MOVX    A,@DPTR
   \   0000D8   C0E0         PUSH    A
   \   0000DA   8882         MOV     DPL,R0
   \   0000DC   8983         MOV     DPH,R1
   \   0000DE   D0E0         POP     A
   \   0000E0   F0           MOVX    @DPTR,A
   \   0000E1   8882         MOV     DPL,R0
   \   0000E3   8983         MOV     DPH,R1
   \   0000E5   A3           INC     DPTR
   \   0000E6   A882         MOV     R0,DPL
   \   0000E8   A983         MOV     R1,DPH
    807            *pBuf++ = pNodeDesc->ManufacturerCode[1];
   \   0000EA   8C82         MOV     DPL,R4
   \   0000EC   8D83         MOV     DPH,R5
   \   0000EE   A3           INC     DPTR
   \   0000EF   A3           INC     DPTR
   \   0000F0   A3           INC     DPTR
   \   0000F1   A3           INC     DPTR
   \   0000F2   E0           MOVX    A,@DPTR
   \   0000F3   C0E0         PUSH    A
   \   0000F5   8882         MOV     DPL,R0
   \   0000F7   8983         MOV     DPH,R1
   \   0000F9   D0E0         POP     A
   \   0000FB   F0           MOVX    @DPTR,A
   \   0000FC   8882         MOV     DPL,R0
   \   0000FE   8983         MOV     DPH,R1
   \   000100   A3           INC     DPTR
   \   000101   A882         MOV     R0,DPL
   \   000103   A983         MOV     R1,DPH
    808            *pBuf++ = pNodeDesc->MaxBufferSize;
   \   000105   8C82         MOV     DPL,R4
   \   000107   8D83         MOV     DPH,R5
   \   000109   A3           INC     DPTR
   \   00010A   A3           INC     DPTR
   \   00010B   A3           INC     DPTR
   \   00010C   A3           INC     DPTR
   \   00010D   A3           INC     DPTR
   \   00010E   E0           MOVX    A,@DPTR
   \   00010F   C0E0         PUSH    A
   \   000111   8882         MOV     DPL,R0
   \   000113   8983         MOV     DPH,R1
   \   000115   D0E0         POP     A
   \   000117   F0           MOVX    @DPTR,A
   \   000118   8882         MOV     DPL,R0
   \   00011A   8983         MOV     DPH,R1
   \   00011C   A3           INC     DPTR
   \   00011D   A882         MOV     R0,DPL
   \   00011F   A983         MOV     R1,DPH
    809            *pBuf++ = pNodeDesc->MaxInTransferSize[0];
   \   000121   8C82         MOV     DPL,R4
   \   000123   8D83         MOV     DPH,R5
   \   000125   A3           INC     DPTR
   \   000126   A3           INC     DPTR
   \   000127   A3           INC     DPTR
   \   000128   A3           INC     DPTR
   \   000129   A3           INC     DPTR
   \   00012A   A3           INC     DPTR
   \   00012B   E0           MOVX    A,@DPTR
   \   00012C   C0E0         PUSH    A
   \   00012E   8882         MOV     DPL,R0
   \   000130   8983         MOV     DPH,R1
   \   000132   D0E0         POP     A
   \   000134   F0           MOVX    @DPTR,A
   \   000135   8882         MOV     DPL,R0
   \   000137   8983         MOV     DPH,R1
   \   000139   A3           INC     DPTR
   \   00013A   A882         MOV     R0,DPL
   \   00013C   A983         MOV     R1,DPH
    810            *pBuf++ = pNodeDesc->MaxInTransferSize[1];
   \   00013E   8C82         MOV     DPL,R4
   \   000140   8D83         MOV     DPH,R5
   \   000142   A3           INC     DPTR
   \   000143   A3           INC     DPTR
   \   000144   A3           INC     DPTR
   \   000145   A3           INC     DPTR
   \   000146   A3           INC     DPTR
   \   000147   A3           INC     DPTR
   \   000148   A3           INC     DPTR
   \   000149   E0           MOVX    A,@DPTR
   \   00014A   C0E0         PUSH    A
   \   00014C   8882         MOV     DPL,R0
   \   00014E   8983         MOV     DPH,R1
   \   000150   D0E0         POP     A
   \   000152   F0           MOVX    @DPTR,A
   \   000153   8882         MOV     DPL,R0
   \   000155   8983         MOV     DPH,R1
   \   000157   A3           INC     DPTR
   \   000158   A882         MOV     R0,DPL
   \   00015A   A983         MOV     R1,DPH
    811          
    812            *pBuf++ = LO_UINT16( pNodeDesc->ServerMask );
   \   00015C   8C82         MOV     DPL,R4
   \   00015E   8D83         MOV     DPH,R5
   \   000160   A3           INC     DPTR
   \   000161   A3           INC     DPTR
   \   000162   A3           INC     DPTR
   \   000163   A3           INC     DPTR
   \   000164   A3           INC     DPTR
   \   000165   A3           INC     DPTR
   \   000166   A3           INC     DPTR
   \   000167   A3           INC     DPTR
   \   000168   E0           MOVX    A,@DPTR
   \   000169   F5..         MOV     ?V0,A
   \   00016B   A3           INC     DPTR
   \   00016C   E0           MOVX    A,@DPTR
   \   00016D   F5..         MOV     ?V1,A
   \   00016F   E5..         MOV     A,?V0
   \   000171   C0E0         PUSH    A
   \   000173   8882         MOV     DPL,R0
   \   000175   8983         MOV     DPH,R1
   \   000177   D0E0         POP     A
   \   000179   F0           MOVX    @DPTR,A
   \   00017A   8882         MOV     DPL,R0
   \   00017C   8983         MOV     DPH,R1
   \   00017E   A3           INC     DPTR
   \   00017F   A882         MOV     R0,DPL
   \   000181   A983         MOV     R1,DPH
    813            *pBuf++ = HI_UINT16( pNodeDesc->ServerMask );
   \   000183   8C82         MOV     DPL,R4
   \   000185   8D83         MOV     DPH,R5
   \   000187   A3           INC     DPTR
   \   000188   A3           INC     DPTR
   \   000189   A3           INC     DPTR
   \   00018A   A3           INC     DPTR
   \   00018B   A3           INC     DPTR
   \   00018C   A3           INC     DPTR
   \   00018D   A3           INC     DPTR
   \   00018E   A3           INC     DPTR
   \   00018F   E0           MOVX    A,@DPTR
   \   000190   F5..         MOV     ?V0,A
   \   000192   A3           INC     DPTR
   \   000193   E0           MOVX    A,@DPTR
   \   000194   F5..         MOV     ?V1,A
   \   000196   E4           CLR     A
   \   000197   C5..         XCH     A,?V1
   \   000199   F5..         MOV     ?V0,A
   \   00019B   E5..         MOV     A,?V0
   \   00019D   C0E0         PUSH    A
   \   00019F   8882         MOV     DPL,R0
   \   0001A1   8983         MOV     DPH,R1
   \   0001A3   D0E0         POP     A
   \   0001A5   F0           MOVX    @DPTR,A
   \   0001A6   8882         MOV     DPL,R0
   \   0001A8   8983         MOV     DPH,R1
   \   0001AA   A3           INC     DPTR
   \   0001AB   A882         MOV     R0,DPL
   \   0001AD   A983         MOV     R1,DPH
    814            *pBuf++ = pNodeDesc->MaxOutTransferSize[0];
   \   0001AF   8C82         MOV     DPL,R4
   \   0001B1   8D83         MOV     DPH,R5
   \   0001B3   A3           INC     DPTR
   \   0001B4   A3           INC     DPTR
   \   0001B5   A3           INC     DPTR
   \   0001B6   A3           INC     DPTR
   \   0001B7   A3           INC     DPTR
   \   0001B8   A3           INC     DPTR
   \   0001B9   A3           INC     DPTR
   \   0001BA   A3           INC     DPTR
   \   0001BB   A3           INC     DPTR
   \   0001BC   A3           INC     DPTR
   \   0001BD   E0           MOVX    A,@DPTR
   \   0001BE   C0E0         PUSH    A
   \   0001C0   8882         MOV     DPL,R0
   \   0001C2   8983         MOV     DPH,R1
   \   0001C4   D0E0         POP     A
   \   0001C6   F0           MOVX    @DPTR,A
   \   0001C7   8882         MOV     DPL,R0
   \   0001C9   8983         MOV     DPH,R1
   \   0001CB   A3           INC     DPTR
   \   0001CC   A882         MOV     R0,DPL
   \   0001CE   A983         MOV     R1,DPH
    815            *pBuf++ = pNodeDesc->MaxOutTransferSize[1];
   \   0001D0   EC           MOV     A,R4
   \   0001D1   240B         ADD     A,#0xb
   \   0001D3   F582         MOV     DPL,A
   \   0001D5   E4           CLR     A
   \   0001D6   3D           ADDC    A,R5
   \   0001D7   F583         MOV     DPH,A
   \   0001D9   E0           MOVX    A,@DPTR
   \   0001DA   C0E0         PUSH    A
   \   0001DC   8882         MOV     DPL,R0
   \   0001DE   8983         MOV     DPH,R1
   \   0001E0   D0E0         POP     A
   \   0001E2   F0           MOVX    @DPTR,A
   \   0001E3   8882         MOV     DPL,R0
   \   0001E5   8983         MOV     DPH,R1
   \   0001E7   A3           INC     DPTR
   \   0001E8   A882         MOV     R0,DPL
   \   0001EA   A983         MOV     R1,DPH
    816            *pBuf = pNodeDesc->DescriptorCapability;
   \   0001EC   EC           MOV     A,R4
   \   0001ED   240C         ADD     A,#0xc
   \   0001EF   F582         MOV     DPL,A
   \   0001F1   E4           CLR     A
   \   0001F2   3D           ADDC    A,R5
   \   0001F3   F583         MOV     DPH,A
   \   0001F5   E0           MOVX    A,@DPTR
   \   0001F6   C0E0         PUSH    A
   \   0001F8   8882         MOV     DPL,R0
   \   0001FA   8983         MOV     DPH,R1
   \   0001FC   D0E0         POP     A
   \   0001FE   F0           MOVX    @DPTR,A
    817          
    818            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Node_Desc_rsp, len );
   \   0001FF                ; Setup parameters for call to function fillAndSend
   \   0001FF   75..02       MOV     ?V0,#0x2
   \   000202   75..80       MOV     ?V1,#-0x80
   \   000205   78..         MOV     R0,#?V0
   \   000207   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00020A   EE           MOV     A,R6
   \   00020B   F9           MOV     R1,A
   \   00020C   EA           MOV     A,R2
   \   00020D   2402         ADD     A,#0x2
   \   00020F   FC           MOV     R4,A
   \   000210   E4           CLR     A
   \   000211   3B           ADDC    A,R3
   \   000212   FD           MOV     R5,A
   \   000213   EA           MOV     A,R2
   \   000214   240F         ADD     A,#0xf
   \   000216   FA           MOV     R2,A
   \   000217   5001         JNC     ??ZDP_NodeDescMsg_0
   \   000219   0B           INC     R3
   \                     ??ZDP_NodeDescMsg_0:
   \   00021A   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00021D   7402         MOV     A,#0x2
   \   00021F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000222   7F02         MOV     R7,#0x2
   \   000224   02....       LJMP    ?BANKED_LEAVE_XDATA
    819          }
    820          
    821          /*********************************************************************
    822           * @fn          ZDP_PowerDescMsg
    823           *
    824           * @brief       Builds and sends a Power Descriptor message, unicast to the
    825           *              specified device.
    826           *
    827           * @param       inMsg - incoming message (request)
    828           * @param       nwkAddr - 16 bit network address for device
    829           * @param       pPowerDesc - pointer to the node descriptor
    830           *
    831           * @return      afStatus_t
    832           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    833          afStatus_t ZDP_PowerDescMsg( zdoIncomingMsg_t *inMsg,
   \                     ZDP_PowerDescMsg:
    834                               uint16 nwkAddr, NodePowerDescriptorFormat_t *pPowerDesc )
    835          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
    836            uint8 *pBuf = ZDP_TmpBuf;
   \   000005   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000008   E0           MOVX    A,@DPTR
   \   000009   FE           MOV     R6,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   FF           MOV     R7,A
    837            byte len = 1 + 2 + 2;  // Status + nwkAddr + Node Power descriptor.
   \   00000D   75..05       MOV     ?V0,#0x5
    838          
    839            *pBuf++ = ZDP_SUCCESS;
   \   000010   8E82         MOV     DPL,R6
   \   000012   8F83         MOV     DPH,R7
   \   000014   7400         MOV     A,#0x0
   \   000016   F0           MOVX    @DPTR,A
   \   000017   8E82         MOV     DPL,R6
   \   000019   8F83         MOV     DPH,R7
   \   00001B   A3           INC     DPTR
   \   00001C   AE82         MOV     R6,DPL
   \   00001E   AF83         MOV     R7,DPH
    840          
    841            *pBuf++ = LO_UINT16( nwkAddr );
   \   000020   EC           MOV     A,R4
   \   000021   C0E0         PUSH    A
   \   000023   8E82         MOV     DPL,R6
   \   000025   8F83         MOV     DPH,R7
   \   000027   D0E0         POP     A
   \   000029   F0           MOVX    @DPTR,A
   \   00002A   8E82         MOV     DPL,R6
   \   00002C   8F83         MOV     DPH,R7
   \   00002E   A3           INC     DPTR
   \   00002F   AE82         MOV     R6,DPL
   \   000031   AF83         MOV     R7,DPH
    842            *pBuf++ = HI_UINT16( nwkAddr );
   \   000033   E4           CLR     A
   \   000034   CD           XCH     A,R5
   \   000035   FC           MOV     R4,A
   \   000036   EC           MOV     A,R4
   \   000037   C0E0         PUSH    A
   \   000039   8E82         MOV     DPL,R6
   \   00003B   8F83         MOV     DPH,R7
   \   00003D   D0E0         POP     A
   \   00003F   F0           MOVX    @DPTR,A
   \   000040   8E82         MOV     DPL,R6
   \   000042   8F83         MOV     DPH,R7
   \   000044   A3           INC     DPTR
   \   000045   AE82         MOV     R6,DPL
   \   000047   AF83         MOV     R7,DPH
   \   000049   740C         MOV     A,#0xc
   \   00004B   12....       LCALL   ?XSTACK_DISP0_8
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   F8           MOV     R0,A
   \   000050   A3           INC     DPTR
   \   000051   E0           MOVX    A,@DPTR
   \   000052   F9           MOV     R1,A
    843          
    844            *pBuf++ = (byte)((pPowerDesc->AvailablePowerSources << 4)
    845                              | (pPowerDesc->PowerMode & 0x0F));
   \   000053   8882         MOV     DPL,R0
   \   000055   8983         MOV     DPH,R1
   \   000057   E0           MOVX    A,@DPTR
   \   000058   FC           MOV     R4,A
   \   000059   A3           INC     DPTR
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   FD           MOV     R5,A
   \   00005C   EC           MOV     A,R4
   \   00005D   540F         ANL     A,#0xf
   \   00005F   F5..         MOV     ?V1,A
   \   000061   8882         MOV     DPL,R0
   \   000063   8983         MOV     DPH,R1
   \   000065   E0           MOVX    A,@DPTR
   \   000066   FC           MOV     R4,A
   \   000067   A3           INC     DPTR
   \   000068   E0           MOVX    A,@DPTR
   \   000069   FD           MOV     R5,A
   \   00006A   EC           MOV     A,R4
   \   00006B   C4           SWAP    A
   \   00006C   540F         ANL     A,#0xf
   \   00006E   C4           SWAP    A
   \   00006F   54F0         ANL     A,#0xf0
   \   000071   45..         ORL     A,?V1
   \   000073   C0E0         PUSH    A
   \   000075   8E82         MOV     DPL,R6
   \   000077   8F83         MOV     DPH,R7
   \   000079   D0E0         POP     A
   \   00007B   F0           MOVX    @DPTR,A
   \   00007C   8E82         MOV     DPL,R6
   \   00007E   8F83         MOV     DPH,R7
   \   000080   A3           INC     DPTR
   \   000081   AE82         MOV     R6,DPL
   \   000083   AF83         MOV     R7,DPH
    846            *pBuf++ = (byte)((pPowerDesc->CurrentPowerSourceLevel << 4)
    847                              | (pPowerDesc->CurrentPowerSource & 0x0F));
   \   000085   8882         MOV     DPL,R0
   \   000087   8983         MOV     DPH,R1
   \   000089   E0           MOVX    A,@DPTR
   \   00008A   FC           MOV     R4,A
   \   00008B   A3           INC     DPTR
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   FD           MOV     R5,A
   \   00008E   E4           CLR     A
   \   00008F   CD           XCH     A,R5
   \   000090   FC           MOV     R4,A
   \   000091   EC           MOV     A,R4
   \   000092   540F         ANL     A,#0xf
   \   000094   FC           MOV     R4,A
   \   000095   ED           MOV     A,R5
   \   000096   5400         ANL     A,#0x0
   \   000098   FD           MOV     R5,A
   \   000099   8882         MOV     DPL,R0
   \   00009B   8983         MOV     DPH,R1
   \   00009D   E0           MOVX    A,@DPTR
   \   00009E   F5..         MOV     ?V2,A
   \   0000A0   A3           INC     DPTR
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   F5..         MOV     ?V3,A
   \   0000A4   740C         MOV     A,#0xc
   \   0000A6   78..         MOV     R0,#?V2
   \   0000A8   12....       LCALL   ?US_SHR
   \   0000AB   E5..         MOV     A,?V2
   \   0000AD   C4           SWAP    A
   \   0000AE   54F0         ANL     A,#0xf0
   \   0000B0   4C           ORL     A,R4
   \   0000B1   C0E0         PUSH    A
   \   0000B3   8E82         MOV     DPL,R6
   \   0000B5   8F83         MOV     DPH,R7
   \   0000B7   D0E0         POP     A
   \   0000B9   F0           MOVX    @DPTR,A
   \   0000BA   8E82         MOV     DPL,R6
   \   0000BC   8F83         MOV     DPH,R7
   \   0000BE   A3           INC     DPTR
   \   0000BF   AE82         MOV     R6,DPL
   \   0000C1   AF83         MOV     R7,DPH
    848          
    849            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Power_Desc_rsp, len );
   \   0000C3                ; Setup parameters for call to function fillAndSend
   \   0000C3   75..03       MOV     ?V2,#0x3
   \   0000C6   75..80       MOV     ?V3,#-0x80
   \   0000C9   78..         MOV     R0,#?V2
   \   0000CB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000CE   A9..         MOV     R1,?V0
   \   0000D0   EA           MOV     A,R2
   \   0000D1   2402         ADD     A,#0x2
   \   0000D3   FC           MOV     R4,A
   \   0000D4   E4           CLR     A
   \   0000D5   3B           ADDC    A,R3
   \   0000D6   FD           MOV     R5,A
   \   0000D7   EA           MOV     A,R2
   \   0000D8   240F         ADD     A,#0xf
   \   0000DA   FA           MOV     R2,A
   \   0000DB   5001         JNC     ??ZDP_PowerDescMsg_0
   \   0000DD   0B           INC     R3
   \                     ??ZDP_PowerDescMsg_0:
   \   0000DE   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   0000E1   7402         MOV     A,#0x2
   \   0000E3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E6   7F04         MOV     R7,#0x4
   \   0000E8   02....       LJMP    ?BANKED_LEAVE_XDATA
    850          }
    851          
    852          /*********************************************************************
    853           * @fn          ZDP_SimpleDescMsg
    854           *
    855           * @brief       Builds and sends a Simple Descriptor message, unicast to the
    856           *              specified device.
    857           *
    858           * @param       inMsg - incoming message (request)
    859           * @param       Status - message status (ZDP_SUCCESS or other)
    860           * @param       pSimpleDesc - pointer to the node descriptor
    861           *
    862           * @return      afStatus_t
    863           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    864          afStatus_t ZDP_SimpleDescMsg( zdoIncomingMsg_t *inMsg, byte Status,
   \                     ZDP_SimpleDescMsg:
    865                                        SimpleDescriptionFormat_t *pSimpleDesc )
    866          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   E9           MOV     A,R1
   \   00000A   FE           MOV     R6,A
   \   00000B   8C..         MOV     ?V2,R4
   \   00000D   8D..         MOV     ?V3,R5
    867            uint8 *pBuf = ZDP_TmpBuf;
   \   00000F   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F8           MOV     R0,A
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F9           MOV     R1,A
    868            uint8 i, len;
    869          
    870            if ( Status == ZDP_SUCCESS && pSimpleDesc )
   \   000017   EE           MOV     A,R6
   \   000018   703E         JNZ     ??ZDP_SimpleDescMsg_0
   \   00001A   E5..         MOV     A,?V2
   \   00001C   45..         ORL     A,?V3
   \   00001E   6038         JZ      ??ZDP_SimpleDescMsg_0
    871            {
    872              // Status + NWKAddrOfInterest + desc length + empty simple descriptor.
    873              len = 1 + 2 + 1 + 8;
   \   000020   7C0C         MOV     R4,#0xc
    874              len += (pSimpleDesc->AppNumInClusters + pSimpleDesc->AppNumOutClusters) * sizeof ( uint16 );
   \   000022   75F002       MOV     B,#0x2
   \   000025   85..82       MOV     DPL,?V2
   \   000028   85..83       MOV     DPH,?V3
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F5..         MOV     ?V4,A
   \   000034   75..00       MOV     ?V5,#0x0
   \   000037   85..82       MOV     DPL,?V2
   \   00003A   85..83       MOV     DPH,?V3
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   E0           MOVX    A,@DPTR
   \   000047   FA           MOV     R2,A
   \   000048   7B00         MOV     R3,#0x0
   \   00004A   E5..         MOV     A,?V4
   \   00004C   2A           ADD     A,R2
   \   00004D   FA           MOV     R2,A
   \   00004E   E5..         MOV     A,?V5
   \   000050   3B           ADDC    A,R3
   \   000051   FB           MOV     R3,A
   \   000052   EA           MOV     A,R2
   \   000053   A4           MUL     AB
   \   000054   2C           ADD     A,R4
   \   000055   FC           MOV     R4,A
   \   000056   8002         SJMP    ??ZDP_SimpleDescMsg_1
    875            }
    876            else
    877            {
    878              len = 1 + 2 + 1; // Status + desc length
   \                     ??ZDP_SimpleDescMsg_0:
   \   000058   7C04         MOV     R4,#0x4
    879            }
    880            if ( len >= ZDP_BUF_SZ-1 )
   \                     ??ZDP_SimpleDescMsg_1:
   \   00005A   EC           MOV     A,R4
   \   00005B   C3           CLR     C
   \   00005C   944F         SUBB    A,#0x4f
   \   00005E   4005         JC      ??ZDP_SimpleDescMsg_2
    881            {
    882              return afStatus_MEM_FAIL;
   \   000060   7910         MOV     R1,#0x10
   \   000062   02....       LJMP    ??ZDP_SimpleDescMsg_3 & 0xFFFF
    883            }
    884          
    885            *pBuf++ = Status;
   \                     ??ZDP_SimpleDescMsg_2:
   \   000065   EE           MOV     A,R6
   \   000066   C0E0         PUSH    A
   \   000068   8882         MOV     DPL,R0
   \   00006A   8983         MOV     DPH,R1
   \   00006C   D0E0         POP     A
   \   00006E   F0           MOVX    @DPTR,A
   \   00006F   8882         MOV     DPL,R0
   \   000071   8983         MOV     DPH,R1
   \   000073   A3           INC     DPTR
   \   000074   A882         MOV     R0,DPL
   \   000076   A983         MOV     R1,DPH
    886          
    887            *pBuf++ = LO_UINT16( ZDAppNwkAddr.addr.shortAddr );
   \   000078   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   FA           MOV     R2,A
   \   00007D   A3           INC     DPTR
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   FB           MOV     R3,A
   \   000080   EA           MOV     A,R2
   \   000081   C0E0         PUSH    A
   \   000083   8882         MOV     DPL,R0
   \   000085   8983         MOV     DPH,R1
   \   000087   D0E0         POP     A
   \   000089   F0           MOVX    @DPTR,A
   \   00008A   8882         MOV     DPL,R0
   \   00008C   8983         MOV     DPH,R1
   \   00008E   A3           INC     DPTR
   \   00008F   A882         MOV     R0,DPL
   \   000091   A983         MOV     R1,DPH
    888            *pBuf++ = HI_UINT16( ZDAppNwkAddr.addr.shortAddr );
   \   000093   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000096   E0           MOVX    A,@DPTR
   \   000097   FA           MOV     R2,A
   \   000098   A3           INC     DPTR
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   FB           MOV     R3,A
   \   00009B   E4           CLR     A
   \   00009C   CB           XCH     A,R3
   \   00009D   FA           MOV     R2,A
   \   00009E   EA           MOV     A,R2
   \   00009F   C0E0         PUSH    A
   \   0000A1   8882         MOV     DPL,R0
   \   0000A3   8983         MOV     DPH,R1
   \   0000A5   D0E0         POP     A
   \   0000A7   F0           MOVX    @DPTR,A
   \   0000A8   8882         MOV     DPL,R0
   \   0000AA   8983         MOV     DPH,R1
   \   0000AC   A3           INC     DPTR
   \   0000AD   A882         MOV     R0,DPL
   \   0000AF   A983         MOV     R1,DPH
    889          
    890            if ( len > 4 )
   \   0000B1   EC           MOV     A,R4
   \   0000B2   C3           CLR     C
   \   0000B3   9405         SUBB    A,#0x5
   \   0000B5   5003         JNC     $+5
   \   0000B7   02....       LJMP    ??ZDP_SimpleDescMsg_4 & 0xFFFF
    891            {
    892              *pBuf++ = len - 4;   // Simple descriptor length
   \   0000BA   74FC         MOV     A,#-0x4
   \   0000BC   2C           ADD     A,R4
   \   0000BD   C0E0         PUSH    A
   \   0000BF   8882         MOV     DPL,R0
   \   0000C1   8983         MOV     DPH,R1
   \   0000C3   D0E0         POP     A
   \   0000C5   F0           MOVX    @DPTR,A
   \   0000C6   8882         MOV     DPL,R0
   \   0000C8   8983         MOV     DPH,R1
   \   0000CA   A3           INC     DPTR
   \   0000CB   A882         MOV     R0,DPL
   \   0000CD   A983         MOV     R1,DPH
    893          
    894              *pBuf++ = pSimpleDesc->EndPoint;
   \   0000CF   85..82       MOV     DPL,?V2
   \   0000D2   85..83       MOV     DPH,?V3
   \   0000D5   E0           MOVX    A,@DPTR
   \   0000D6   C0E0         PUSH    A
   \   0000D8   8882         MOV     DPL,R0
   \   0000DA   8983         MOV     DPH,R1
   \   0000DC   D0E0         POP     A
   \   0000DE   F0           MOVX    @DPTR,A
   \   0000DF   8882         MOV     DPL,R0
   \   0000E1   8983         MOV     DPH,R1
   \   0000E3   A3           INC     DPTR
   \   0000E4   A882         MOV     R0,DPL
   \   0000E6   A983         MOV     R1,DPH
    895              *pBuf++ = LO_UINT16( pSimpleDesc->AppProfId );
   \   0000E8   85..82       MOV     DPL,?V2
   \   0000EB   85..83       MOV     DPH,?V3
   \   0000EE   A3           INC     DPTR
   \   0000EF   E0           MOVX    A,@DPTR
   \   0000F0   FA           MOV     R2,A
   \   0000F1   A3           INC     DPTR
   \   0000F2   E0           MOVX    A,@DPTR
   \   0000F3   FB           MOV     R3,A
   \   0000F4   EA           MOV     A,R2
   \   0000F5   C0E0         PUSH    A
   \   0000F7   8882         MOV     DPL,R0
   \   0000F9   8983         MOV     DPH,R1
   \   0000FB   D0E0         POP     A
   \   0000FD   F0           MOVX    @DPTR,A
   \   0000FE   8882         MOV     DPL,R0
   \   000100   8983         MOV     DPH,R1
   \   000102   A3           INC     DPTR
   \   000103   A882         MOV     R0,DPL
   \   000105   A983         MOV     R1,DPH
    896              *pBuf++ = HI_UINT16( pSimpleDesc->AppProfId );
   \   000107   85..82       MOV     DPL,?V2
   \   00010A   85..83       MOV     DPH,?V3
   \   00010D   A3           INC     DPTR
   \   00010E   E0           MOVX    A,@DPTR
   \   00010F   FA           MOV     R2,A
   \   000110   A3           INC     DPTR
   \   000111   E0           MOVX    A,@DPTR
   \   000112   FB           MOV     R3,A
   \   000113   E4           CLR     A
   \   000114   CB           XCH     A,R3
   \   000115   FA           MOV     R2,A
   \   000116   EA           MOV     A,R2
   \   000117   C0E0         PUSH    A
   \   000119   8882         MOV     DPL,R0
   \   00011B   8983         MOV     DPH,R1
   \   00011D   D0E0         POP     A
   \   00011F   F0           MOVX    @DPTR,A
   \   000120   8882         MOV     DPL,R0
   \   000122   8983         MOV     DPH,R1
   \   000124   A3           INC     DPTR
   \   000125   A882         MOV     R0,DPL
   \   000127   A983         MOV     R1,DPH
    897              *pBuf++ = LO_UINT16( pSimpleDesc->AppDeviceId );
   \   000129   85..82       MOV     DPL,?V2
   \   00012C   85..83       MOV     DPH,?V3
   \   00012F   A3           INC     DPTR
   \   000130   A3           INC     DPTR
   \   000131   A3           INC     DPTR
   \   000132   E0           MOVX    A,@DPTR
   \   000133   FA           MOV     R2,A
   \   000134   A3           INC     DPTR
   \   000135   E0           MOVX    A,@DPTR
   \   000136   FB           MOV     R3,A
   \   000137   EA           MOV     A,R2
   \   000138   C0E0         PUSH    A
   \   00013A   8882         MOV     DPL,R0
   \   00013C   8983         MOV     DPH,R1
   \   00013E   D0E0         POP     A
   \   000140   F0           MOVX    @DPTR,A
   \   000141   8882         MOV     DPL,R0
   \   000143   8983         MOV     DPH,R1
   \   000145   A3           INC     DPTR
   \   000146   A882         MOV     R0,DPL
   \   000148   A983         MOV     R1,DPH
    898              *pBuf++ = HI_UINT16( pSimpleDesc->AppDeviceId );
   \   00014A   85..82       MOV     DPL,?V2
   \   00014D   85..83       MOV     DPH,?V3
   \   000150   A3           INC     DPTR
   \   000151   A3           INC     DPTR
   \   000152   A3           INC     DPTR
   \   000153   E0           MOVX    A,@DPTR
   \   000154   FA           MOV     R2,A
   \   000155   A3           INC     DPTR
   \   000156   E0           MOVX    A,@DPTR
   \   000157   FB           MOV     R3,A
   \   000158   E4           CLR     A
   \   000159   CB           XCH     A,R3
   \   00015A   FA           MOV     R2,A
   \   00015B   EA           MOV     A,R2
   \   00015C   C0E0         PUSH    A
   \   00015E   8882         MOV     DPL,R0
   \   000160   8983         MOV     DPH,R1
   \   000162   D0E0         POP     A
   \   000164   F0           MOVX    @DPTR,A
   \   000165   8882         MOV     DPL,R0
   \   000167   8983         MOV     DPH,R1
   \   000169   A3           INC     DPTR
   \   00016A   A882         MOV     R0,DPL
   \   00016C   A983         MOV     R1,DPH
    899          
    900              *pBuf++ = (byte)(pSimpleDesc->AppDevVer & 0x0F);
   \   00016E   85..82       MOV     DPL,?V2
   \   000171   85..83       MOV     DPH,?V3
   \   000174   A3           INC     DPTR
   \   000175   A3           INC     DPTR
   \   000176   A3           INC     DPTR
   \   000177   A3           INC     DPTR
   \   000178   A3           INC     DPTR
   \   000179   E0           MOVX    A,@DPTR
   \   00017A   540F         ANL     A,#0xf
   \   00017C   C0E0         PUSH    A
   \   00017E   8882         MOV     DPL,R0
   \   000180   8983         MOV     DPH,R1
   \   000182   D0E0         POP     A
   \   000184   F0           MOVX    @DPTR,A
   \   000185   8882         MOV     DPL,R0
   \   000187   8983         MOV     DPH,R1
   \   000189   A3           INC     DPTR
   \   00018A   A882         MOV     R0,DPL
   \   00018C   A983         MOV     R1,DPH
    901          
    902              *pBuf++ = pSimpleDesc->AppNumInClusters;
   \   00018E   85..82       MOV     DPL,?V2
   \   000191   85..83       MOV     DPH,?V3
   \   000194   A3           INC     DPTR
   \   000195   A3           INC     DPTR
   \   000196   A3           INC     DPTR
   \   000197   A3           INC     DPTR
   \   000198   A3           INC     DPTR
   \   000199   A3           INC     DPTR
   \   00019A   E0           MOVX    A,@DPTR
   \   00019B   C0E0         PUSH    A
   \   00019D   8882         MOV     DPL,R0
   \   00019F   8983         MOV     DPH,R1
   \   0001A1   D0E0         POP     A
   \   0001A3   F0           MOVX    @DPTR,A
   \   0001A4   8882         MOV     DPL,R0
   \   0001A6   8983         MOV     DPH,R1
   \   0001A8   A3           INC     DPTR
   \   0001A9   A882         MOV     R0,DPL
   \   0001AB   A983         MOV     R1,DPH
    903              if ( pSimpleDesc->AppNumInClusters )
   \   0001AD   85..82       MOV     DPL,?V2
   \   0001B0   85..83       MOV     DPH,?V3
   \   0001B3   A3           INC     DPTR
   \   0001B4   A3           INC     DPTR
   \   0001B5   A3           INC     DPTR
   \   0001B6   A3           INC     DPTR
   \   0001B7   A3           INC     DPTR
   \   0001B8   A3           INC     DPTR
   \   0001B9   E0           MOVX    A,@DPTR
   \   0001BA   7003         JNZ     $+5
   \   0001BC   02....       LJMP    ??ZDP_SimpleDescMsg_5 & 0xFFFF
    904              {
    905                for (i=0; i<pSimpleDesc->AppNumInClusters; ++i)
   \   0001BF   7D00         MOV     R5,#0x0
   \   0001C1   02....       LJMP    ??ZDP_SimpleDescMsg_6 & 0xFFFF
    906                {
    907                  *pBuf++ = LO_UINT16( pSimpleDesc->pAppInClusterList[i] );
   \                     ??ZDP_SimpleDescMsg_7:
   \   0001C4   ED           MOV     A,R5
   \   0001C5   FA           MOV     R2,A
   \   0001C6   7B00         MOV     R3,#0x0
   \   0001C8   EA           MOV     A,R2
   \   0001C9   75F002       MOV     B,#0x2
   \   0001CC   A4           MUL     AB
   \   0001CD   CA           XCH     A,R2
   \   0001CE   AFF0         MOV     R7,B
   \   0001D0   75F000       MOV     B,#0x0
   \   0001D3   A4           MUL     AB
   \   0001D4   2F           ADD     A,R7
   \   0001D5   FF           MOV     R7,A
   \   0001D6   75F002       MOV     B,#0x2
   \   0001D9   EB           MOV     A,R3
   \   0001DA   A4           MUL     AB
   \   0001DB   2F           ADD     A,R7
   \   0001DC   FB           MOV     R3,A
   \   0001DD   85..82       MOV     DPL,?V2
   \   0001E0   85..83       MOV     DPH,?V3
   \   0001E3   A3           INC     DPTR
   \   0001E4   A3           INC     DPTR
   \   0001E5   A3           INC     DPTR
   \   0001E6   A3           INC     DPTR
   \   0001E7   A3           INC     DPTR
   \   0001E8   A3           INC     DPTR
   \   0001E9   A3           INC     DPTR
   \   0001EA   E0           MOVX    A,@DPTR
   \   0001EB   2A           ADD     A,R2
   \   0001EC   FF           MOV     R7,A
   \   0001ED   A3           INC     DPTR
   \   0001EE   E0           MOVX    A,@DPTR
   \   0001EF   3B           ADDC    A,R3
   \   0001F0   8F82         MOV     DPL,R7
   \   0001F2   F583         MOV     DPH,A
   \   0001F4   E0           MOVX    A,@DPTR
   \   0001F5   FA           MOV     R2,A
   \   0001F6   A3           INC     DPTR
   \   0001F7   E0           MOVX    A,@DPTR
   \   0001F8   FB           MOV     R3,A
   \   0001F9   EA           MOV     A,R2
   \   0001FA   C0E0         PUSH    A
   \   0001FC   8882         MOV     DPL,R0
   \   0001FE   8983         MOV     DPH,R1
   \   000200   D0E0         POP     A
   \   000202   F0           MOVX    @DPTR,A
   \   000203   8882         MOV     DPL,R0
   \   000205   8983         MOV     DPH,R1
   \   000207   A3           INC     DPTR
   \   000208   A882         MOV     R0,DPL
   \   00020A   A983         MOV     R1,DPH
    908                  *pBuf++ = HI_UINT16( pSimpleDesc->pAppInClusterList[i] );
   \   00020C   ED           MOV     A,R5
   \   00020D   FA           MOV     R2,A
   \   00020E   7B00         MOV     R3,#0x0
   \   000210   EA           MOV     A,R2
   \   000211   75F002       MOV     B,#0x2
   \   000214   A4           MUL     AB
   \   000215   CA           XCH     A,R2
   \   000216   AFF0         MOV     R7,B
   \   000218   75F000       MOV     B,#0x0
   \   00021B   A4           MUL     AB
   \   00021C   2F           ADD     A,R7
   \   00021D   FF           MOV     R7,A
   \   00021E   75F002       MOV     B,#0x2
   \   000221   EB           MOV     A,R3
   \   000222   A4           MUL     AB
   \   000223   2F           ADD     A,R7
   \   000224   FB           MOV     R3,A
   \   000225   85..82       MOV     DPL,?V2
   \   000228   85..83       MOV     DPH,?V3
   \   00022B   A3           INC     DPTR
   \   00022C   A3           INC     DPTR
   \   00022D   A3           INC     DPTR
   \   00022E   A3           INC     DPTR
   \   00022F   A3           INC     DPTR
   \   000230   A3           INC     DPTR
   \   000231   A3           INC     DPTR
   \   000232   E0           MOVX    A,@DPTR
   \   000233   2A           ADD     A,R2
   \   000234   FF           MOV     R7,A
   \   000235   A3           INC     DPTR
   \   000236   E0           MOVX    A,@DPTR
   \   000237   3B           ADDC    A,R3
   \   000238   8F82         MOV     DPL,R7
   \   00023A   F583         MOV     DPH,A
   \   00023C   E0           MOVX    A,@DPTR
   \   00023D   FA           MOV     R2,A
   \   00023E   A3           INC     DPTR
   \   00023F   E0           MOVX    A,@DPTR
   \   000240   FB           MOV     R3,A
   \   000241   E4           CLR     A
   \   000242   CB           XCH     A,R3
   \   000243   FA           MOV     R2,A
   \   000244   EA           MOV     A,R2
   \   000245   C0E0         PUSH    A
   \   000247   8882         MOV     DPL,R0
   \   000249   8983         MOV     DPH,R1
   \   00024B   D0E0         POP     A
   \   00024D   F0           MOVX    @DPTR,A
   \   00024E   8882         MOV     DPL,R0
   \   000250   8983         MOV     DPH,R1
   \   000252   A3           INC     DPTR
   \   000253   A882         MOV     R0,DPL
   \   000255   A983         MOV     R1,DPH
    909                }
   \   000257   0D           INC     R5
   \                     ??ZDP_SimpleDescMsg_6:
   \   000258   85..82       MOV     DPL,?V2
   \   00025B   85..83       MOV     DPH,?V3
   \   00025E   A3           INC     DPTR
   \   00025F   A3           INC     DPTR
   \   000260   A3           INC     DPTR
   \   000261   A3           INC     DPTR
   \   000262   A3           INC     DPTR
   \   000263   A3           INC     DPTR
   \   000264   E0           MOVX    A,@DPTR
   \   000265   FA           MOV     R2,A
   \   000266   ED           MOV     A,R5
   \   000267   C3           CLR     C
   \   000268   9A           SUBB    A,R2
   \   000269   5003         JNC     $+5
   \   00026B   02....       LJMP    ??ZDP_SimpleDescMsg_7 & 0xFFFF
    910              }
    911          
    912              *pBuf++ = pSimpleDesc->AppNumOutClusters;
   \                     ??ZDP_SimpleDescMsg_5:
   \   00026E   85..82       MOV     DPL,?V2
   \   000271   85..83       MOV     DPH,?V3
   \   000274   A3           INC     DPTR
   \   000275   A3           INC     DPTR
   \   000276   A3           INC     DPTR
   \   000277   A3           INC     DPTR
   \   000278   A3           INC     DPTR
   \   000279   A3           INC     DPTR
   \   00027A   A3           INC     DPTR
   \   00027B   A3           INC     DPTR
   \   00027C   A3           INC     DPTR
   \   00027D   E0           MOVX    A,@DPTR
   \   00027E   C0E0         PUSH    A
   \   000280   8882         MOV     DPL,R0
   \   000282   8983         MOV     DPH,R1
   \   000284   D0E0         POP     A
   \   000286   F0           MOVX    @DPTR,A
   \   000287   8882         MOV     DPL,R0
   \   000289   8983         MOV     DPH,R1
   \   00028B   A3           INC     DPTR
   \   00028C   A882         MOV     R0,DPL
   \   00028E   A983         MOV     R1,DPH
    913              if ( pSimpleDesc->AppNumOutClusters )
   \   000290   85..82       MOV     DPL,?V2
   \   000293   85..83       MOV     DPH,?V3
   \   000296   A3           INC     DPTR
   \   000297   A3           INC     DPTR
   \   000298   A3           INC     DPTR
   \   000299   A3           INC     DPTR
   \   00029A   A3           INC     DPTR
   \   00029B   A3           INC     DPTR
   \   00029C   A3           INC     DPTR
   \   00029D   A3           INC     DPTR
   \   00029E   A3           INC     DPTR
   \   00029F   E0           MOVX    A,@DPTR
   \   0002A0   7003         JNZ     $+5
   \   0002A2   02....       LJMP    ??ZDP_SimpleDescMsg_8 & 0xFFFF
    914              {
    915                for (i=0; i<pSimpleDesc->AppNumOutClusters; ++i)
   \   0002A5   7D00         MOV     R5,#0x0
   \                     ??ZDP_SimpleDescMsg_9:
   \   0002A7   85..82       MOV     DPL,?V2
   \   0002AA   85..83       MOV     DPH,?V3
   \   0002AD   A3           INC     DPTR
   \   0002AE   A3           INC     DPTR
   \   0002AF   A3           INC     DPTR
   \   0002B0   A3           INC     DPTR
   \   0002B1   A3           INC     DPTR
   \   0002B2   A3           INC     DPTR
   \   0002B3   A3           INC     DPTR
   \   0002B4   A3           INC     DPTR
   \   0002B5   A3           INC     DPTR
   \   0002B6   E0           MOVX    A,@DPTR
   \   0002B7   FA           MOV     R2,A
   \   0002B8   ED           MOV     A,R5
   \   0002B9   C3           CLR     C
   \   0002BA   9A           SUBB    A,R2
   \   0002BB   4003         JC      $+5
   \   0002BD   02....       LJMP    ??ZDP_SimpleDescMsg_8 & 0xFFFF
    916                {
    917                  *pBuf++ = LO_UINT16( pSimpleDesc->pAppOutClusterList[i] );
   \   0002C0   ED           MOV     A,R5
   \   0002C1   FA           MOV     R2,A
   \   0002C2   7B00         MOV     R3,#0x0
   \   0002C4   EA           MOV     A,R2
   \   0002C5   75F002       MOV     B,#0x2
   \   0002C8   A4           MUL     AB
   \   0002C9   CA           XCH     A,R2
   \   0002CA   AFF0         MOV     R7,B
   \   0002CC   75F000       MOV     B,#0x0
   \   0002CF   A4           MUL     AB
   \   0002D0   2F           ADD     A,R7
   \   0002D1   FF           MOV     R7,A
   \   0002D2   75F002       MOV     B,#0x2
   \   0002D5   EB           MOV     A,R3
   \   0002D6   A4           MUL     AB
   \   0002D7   2F           ADD     A,R7
   \   0002D8   FB           MOV     R3,A
   \   0002D9   85..82       MOV     DPL,?V2
   \   0002DC   85..83       MOV     DPH,?V3
   \   0002DF   A3           INC     DPTR
   \   0002E0   A3           INC     DPTR
   \   0002E1   A3           INC     DPTR
   \   0002E2   A3           INC     DPTR
   \   0002E3   A3           INC     DPTR
   \   0002E4   A3           INC     DPTR
   \   0002E5   A3           INC     DPTR
   \   0002E6   A3           INC     DPTR
   \   0002E7   A3           INC     DPTR
   \   0002E8   A3           INC     DPTR
   \   0002E9   E0           MOVX    A,@DPTR
   \   0002EA   2A           ADD     A,R2
   \   0002EB   FF           MOV     R7,A
   \   0002EC   A3           INC     DPTR
   \   0002ED   E0           MOVX    A,@DPTR
   \   0002EE   3B           ADDC    A,R3
   \   0002EF   8F82         MOV     DPL,R7
   \   0002F1   F583         MOV     DPH,A
   \   0002F3   E0           MOVX    A,@DPTR
   \   0002F4   FA           MOV     R2,A
   \   0002F5   A3           INC     DPTR
   \   0002F6   E0           MOVX    A,@DPTR
   \   0002F7   FB           MOV     R3,A
   \   0002F8   EA           MOV     A,R2
   \   0002F9   C0E0         PUSH    A
   \   0002FB   8882         MOV     DPL,R0
   \   0002FD   8983         MOV     DPH,R1
   \   0002FF   D0E0         POP     A
   \   000301   F0           MOVX    @DPTR,A
   \   000302   8882         MOV     DPL,R0
   \   000304   8983         MOV     DPH,R1
   \   000306   A3           INC     DPTR
   \   000307   A882         MOV     R0,DPL
   \   000309   A983         MOV     R1,DPH
    918                  *pBuf++ = HI_UINT16( pSimpleDesc->pAppOutClusterList[i] );
   \   00030B   ED           MOV     A,R5
   \   00030C   FA           MOV     R2,A
   \   00030D   7B00         MOV     R3,#0x0
   \   00030F   EA           MOV     A,R2
   \   000310   75F002       MOV     B,#0x2
   \   000313   A4           MUL     AB
   \   000314   CA           XCH     A,R2
   \   000315   AFF0         MOV     R7,B
   \   000317   75F000       MOV     B,#0x0
   \   00031A   A4           MUL     AB
   \   00031B   2F           ADD     A,R7
   \   00031C   FF           MOV     R7,A
   \   00031D   75F002       MOV     B,#0x2
   \   000320   EB           MOV     A,R3
   \   000321   A4           MUL     AB
   \   000322   2F           ADD     A,R7
   \   000323   FB           MOV     R3,A
   \   000324   85..82       MOV     DPL,?V2
   \   000327   85..83       MOV     DPH,?V3
   \   00032A   A3           INC     DPTR
   \   00032B   A3           INC     DPTR
   \   00032C   A3           INC     DPTR
   \   00032D   A3           INC     DPTR
   \   00032E   A3           INC     DPTR
   \   00032F   A3           INC     DPTR
   \   000330   A3           INC     DPTR
   \   000331   A3           INC     DPTR
   \   000332   A3           INC     DPTR
   \   000333   A3           INC     DPTR
   \   000334   E0           MOVX    A,@DPTR
   \   000335   2A           ADD     A,R2
   \   000336   FF           MOV     R7,A
   \   000337   A3           INC     DPTR
   \   000338   E0           MOVX    A,@DPTR
   \   000339   3B           ADDC    A,R3
   \   00033A   8F82         MOV     DPL,R7
   \   00033C   F583         MOV     DPH,A
   \   00033E   E0           MOVX    A,@DPTR
   \   00033F   FA           MOV     R2,A
   \   000340   A3           INC     DPTR
   \   000341   E0           MOVX    A,@DPTR
   \   000342   FB           MOV     R3,A
   \   000343   E4           CLR     A
   \   000344   CB           XCH     A,R3
   \   000345   FA           MOV     R2,A
   \   000346   EA           MOV     A,R2
   \   000347   C0E0         PUSH    A
   \   000349   8882         MOV     DPL,R0
   \   00034B   8983         MOV     DPH,R1
   \   00034D   D0E0         POP     A
   \   00034F   F0           MOVX    @DPTR,A
   \   000350   8882         MOV     DPL,R0
   \   000352   8983         MOV     DPH,R1
   \   000354   A3           INC     DPTR
   \   000355   A882         MOV     R0,DPL
   \   000357   A983         MOV     R1,DPH
    919                }
   \   000359   0D           INC     R5
   \   00035A   02....       LJMP    ??ZDP_SimpleDescMsg_9 & 0xFFFF
    920              }
    921            }
    922          
    923            else
    924            {
    925              *pBuf = 0; // Description Length = 0;
   \                     ??ZDP_SimpleDescMsg_4:
   \   00035D   8882         MOV     DPL,R0
   \   00035F   8983         MOV     DPH,R1
   \   000361   7400         MOV     A,#0x0
   \   000363   F0           MOVX    @DPTR,A
    926            }
    927          
    928            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Simple_Desc_rsp, len );
   \                     ??ZDP_SimpleDescMsg_8:
   \   000364                ; Setup parameters for call to function fillAndSend
   \   000364   75..04       MOV     ?V2,#0x4
   \   000367   75..80       MOV     ?V3,#-0x80
   \   00036A   78..         MOV     R0,#?V2
   \   00036C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00036F   EC           MOV     A,R4
   \   000370   F9           MOV     R1,A
   \   000371   E5..         MOV     A,?V0
   \   000373   2402         ADD     A,#0x2
   \   000375   FC           MOV     R4,A
   \   000376   E4           CLR     A
   \   000377   35..         ADDC    A,?V1
   \   000379   FD           MOV     R5,A
   \   00037A   E5..         MOV     A,?V0
   \   00037C   240F         ADD     A,#0xf
   \   00037E   FA           MOV     R2,A
   \   00037F   E4           CLR     A
   \   000380   35..         ADDC    A,?V1
   \   000382   FB           MOV     R3,A
   \   000383   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000386   7402         MOV     A,#0x2
   \   000388   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??ZDP_SimpleDescMsg_3:
   \   00038B   7F06         MOV     R7,#0x6
   \   00038D   02....       LJMP    ?BANKED_LEAVE_XDATA
    929          }
    930          
    931          /*********************************************************************
    932           * @fn          ZDP_EPRsp
    933           *
    934           * @brief       This builds and send an endpoint list. Used in
    935           *              Active_EP_rsp and Match_Desc_Rsp
    936           *              message.  This function sends unicast message to the
    937           *              requesting device.
    938           *
    939           * @param       MsgType - either Active_EP_rsp or Match_Desc_Rsp
    940           * @param       dstAddr - destination address
    941           * @param       Status - message status (ZDP_SUCCESS or other)
    942           * @param       nwkAddr - Device's short address that this response describes
    943           * @param       Count - number of endpoint/interfaces in list
    944           * @param       pEPIntfList - Array of Endpoint/Interfaces
    945           * @param       SecurityEnable - Security Options
    946           *
    947           * @return      afStatus_t
    948           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    949          afStatus_t ZDP_EPRsp( uint16 MsgType, byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_EPRsp:
    950                                  byte Status, uint16 nwkAddr, byte Count,
    951                                  uint8 *pEPList,
    952                                  byte SecurityEnable )
    953          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   C0E0         PUSH    A
   \   00000D   85..82       MOV     DPL,?XSP + 0
   \   000010   85..83       MOV     DPH,?XSP + 1
   \   000013   D0E0         POP     A
   \   000015   F0           MOVX    @DPTR,A
   \   000016   8A..         MOV     ?V2,R2
   \   000018   8B..         MOV     ?V3,R3
   \   00001A   EC           MOV     A,R4
   \   00001B   FE           MOV     R6,A
   \   00001C   ED           MOV     A,R5
   \   00001D   FF           MOV     R7,A
    954            uint8 *pBuf = ZDP_TmpBuf;
   \   00001E   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000021   E0           MOVX    A,@DPTR
   \   000022   FA           MOV     R2,A
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   FB           MOV     R3,A
    955            byte len = 1 + 2 + 1;  // Status + nwkAddr + endpoint/interface count.
   \   000026   75..04       MOV     ?V0,#0x4
    956            byte txOptions;
    957          
    958            (void)SecurityEnable;  // Intentionally unreferenced parameter
    959          
    960            if ( MsgType == Match_Desc_rsp )
   \   000029   7406         MOV     A,#0x6
   \   00002B   65..         XRL     A,?V2
   \   00002D   7004         JNZ     ??ZDP_EPRsp_0
   \   00002F   7480         MOV     A,#-0x80
   \   000031   65..         XRL     A,?V3
   \                     ??ZDP_EPRsp_0:
   \   000033   7005         JNZ     ??ZDP_EPRsp_1
    961              txOptions = AF_MSG_ACK_REQUEST;
   \   000035   75..10       MOV     ?V1,#0x10
   \   000038   8003         SJMP    ??ZDP_EPRsp_2
    962            else
    963              txOptions = 0;
   \                     ??ZDP_EPRsp_1:
   \   00003A   75..00       MOV     ?V1,#0x0
    964          
    965              *pBuf++ = Status;
   \                     ??ZDP_EPRsp_2:
   \   00003D   7410         MOV     A,#0x10
   \   00003F   12....       LCALL   ?XSTACK_DISP0_8
   \   000042   E0           MOVX    A,@DPTR
   \   000043   C0E0         PUSH    A
   \   000045   8A82         MOV     DPL,R2
   \   000047   8B83         MOV     DPH,R3
   \   000049   D0E0         POP     A
   \   00004B   F0           MOVX    @DPTR,A
   \   00004C   8A82         MOV     DPL,R2
   \   00004E   8B83         MOV     DPH,R3
   \   000050   A3           INC     DPTR
   \   000051   AA82         MOV     R2,DPL
   \   000053   AB83         MOV     R3,DPH
   \   000055   7411         MOV     A,#0x11
   \   000057   12....       LCALL   ?XSTACK_DISP0_8
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   F8           MOV     R0,A
   \   00005C   A3           INC     DPTR
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   F9           MOV     R1,A
    966            *pBuf++ = LO_UINT16( nwkAddr );
   \   00005F   E8           MOV     A,R0
   \   000060   C0E0         PUSH    A
   \   000062   8A82         MOV     DPL,R2
   \   000064   8B83         MOV     DPH,R3
   \   000066   D0E0         POP     A
   \   000068   F0           MOVX    @DPTR,A
   \   000069   8A82         MOV     DPL,R2
   \   00006B   8B83         MOV     DPH,R3
   \   00006D   A3           INC     DPTR
   \   00006E   AA82         MOV     R2,DPL
   \   000070   AB83         MOV     R3,DPH
    967            *pBuf++ = HI_UINT16( nwkAddr );
   \   000072   E4           CLR     A
   \   000073   C9           XCH     A,R1
   \   000074   F8           MOV     R0,A
   \   000075   E8           MOV     A,R0
   \   000076   C0E0         PUSH    A
   \   000078   8A82         MOV     DPL,R2
   \   00007A   8B83         MOV     DPH,R3
   \   00007C   D0E0         POP     A
   \   00007E   F0           MOVX    @DPTR,A
   \   00007F   8A82         MOV     DPL,R2
   \   000081   8B83         MOV     DPH,R3
   \   000083   A3           INC     DPTR
   \   000084   AA82         MOV     R2,DPL
   \   000086   AB83         MOV     R3,DPH
   \   000088   7413         MOV     A,#0x13
   \   00008A   12....       LCALL   ?XSTACK_DISP0_8
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   FC           MOV     R4,A
    968          
    969            *pBuf++ = Count;   // Endpoint/Interface count
   \   00008F   EC           MOV     A,R4
   \   000090   C0E0         PUSH    A
   \   000092   8A82         MOV     DPL,R2
   \   000094   8B83         MOV     DPH,R3
   \   000096   D0E0         POP     A
   \   000098   F0           MOVX    @DPTR,A
   \   000099   8A82         MOV     DPL,R2
   \   00009B   8B83         MOV     DPH,R3
   \   00009D   A3           INC     DPTR
   \   00009E   AA82         MOV     R2,DPL
   \   0000A0   AB83         MOV     R3,DPH
    970          
    971            if ( Count )
   \   0000A2   EC           MOV     A,R4
   \   0000A3   6023         JZ      ??ZDP_EPRsp_3
    972            {
    973              len += Count;
   \   0000A5   EC           MOV     A,R4
   \   0000A6   25..         ADD     A,?V0
   \   0000A8   F5..         MOV     ?V0,A
    974              osal_memcpy( pBuf, pEPList, Count );
   \   0000AA                ; Setup parameters for call to function osal_memcpy
   \   0000AA   7414         MOV     A,#0x14
   \   0000AC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   F5..         MOV     ?V4,A
   \   0000B2   A3           INC     DPTR
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   F5..         MOV     ?V5,A
   \   0000B6   75..00       MOV     ?V6,#0x0
   \   0000B9   78..         MOV     R0,#?V4
   \   0000BB   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000BE   7D00         MOV     R5,#0x0
   \   0000C0   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000C3   7403         MOV     A,#0x3
   \   0000C5   12....       LCALL   ?DEALLOC_XSTACK8
    975            }
    976          
    977            FillAndSendTxOptions( &TransSeq, dstAddr, MsgType, len, txOptions );
   \                     ??ZDP_EPRsp_3:
   \   0000C8   E5..         MOV     A,?V1
   \   0000CA   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000CD   F0           MOVX    @DPTR,A
   \   0000CE                ; Setup parameters for call to function fillAndSend
   \   0000CE   78..         MOV     R0,#?V2
   \   0000D0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D3   A9..         MOV     R1,?V0
   \   0000D5   EE           MOV     A,R6
   \   0000D6   FC           MOV     R4,A
   \   0000D7   EF           MOV     A,R7
   \   0000D8   FD           MOV     R5,A
   \   0000D9   7402         MOV     A,#0x2
   \   0000DB   12....       LCALL   ?XSTACK_DISP101_8
   \   0000DE   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   0000E1   7402         MOV     A,#0x2
   \   0000E3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E6   E9           MOV     A,R1
   \   0000E7   F9           MOV     R1,A
   \   0000E8   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000EB   7400         MOV     A,#0x0
   \   0000ED   F0           MOVX    @DPTR,A
   \   0000EE   7401         MOV     A,#0x1
   \   0000F0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000F3   7F07         MOV     R7,#0x7
   \   0000F5   02....       LJMP    ?BANKED_LEAVE_XDATA
    978          }
    979          
    980          /*********************************************************************
    981           * @fn          ZDP_UserDescRsp
    982           *
    983           * @brief       Build and send the User Decriptor Response.
    984           *
    985           *
    986           * @param       dstAddr - destination address
    987           * @param       nwkAddrOfInterest -
    988           * @param       userDesc -
    989           * @param       SecurityEnable - Security Options
    990           *
    991           * @return      ZStatus_t
    992           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    993          ZStatus_t ZDP_UserDescRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_UserDescRsp:
    994                          uint16 nwkAddrOfInterest, UserDescriptorFormat_t *userDesc,
    995                          byte SecurityEnable )
    996          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   C0E0         PUSH    A
   \   00000D   85..82       MOV     DPL,?XSP + 0
   \   000010   85..83       MOV     DPH,?XSP + 1
   \   000013   D0E0         POP     A
   \   000015   F0           MOVX    @DPTR,A
   \   000016   EA           MOV     A,R2
   \   000017   FE           MOV     R6,A
   \   000018   EB           MOV     A,R3
   \   000019   FF           MOV     R7,A
    997            uint8 *pBuf = ZDP_TmpBuf;
   \   00001A   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F5..         MOV     ?V0,A
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   F5..         MOV     ?V1,A
    998            byte len = 1 + 2 + 1;  // Status + nwkAddr + descriptor length.
   \   000024   75..04       MOV     ?V2,#0x4
   \   000027   7413         MOV     A,#0x13
   \   000029   12....       LCALL   ?XSTACK_DISP0_8
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F8           MOV     R0,A
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F9           MOV     R1,A
   \   000031   88..         MOV     ?V8,R0
   \   000033   89..         MOV     ?V9,R1
    999          
   1000            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1001          
   1002            len += userDesc->len;
   \   000035   85..82       MOV     DPL,?V8
   \   000038   85..83       MOV     DPH,?V9
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   25..         ADD     A,?V2
   \   00003E   F5..         MOV     ?V2,A
   1003          
   1004            *pBuf++ = ZSUCCESS;
   \   000040   85..82       MOV     DPL,?V0
   \   000043   85..83       MOV     DPH,?V1
   \   000046   7400         MOV     A,#0x0
   \   000048   F0           MOVX    @DPTR,A
   \   000049   85..82       MOV     DPL,?V0
   \   00004C   85..83       MOV     DPH,?V1
   \   00004F   A3           INC     DPTR
   \   000050   8582..       MOV     ?V0,DPL
   \   000053   8583..       MOV     ?V1,DPH
   1005          
   1006            *pBuf++ = LO_UINT16( nwkAddrOfInterest );
   \   000056   EC           MOV     A,R4
   \   000057   C0E0         PUSH    A
   \   000059   85..82       MOV     DPL,?V0
   \   00005C   85..83       MOV     DPH,?V1
   \   00005F   D0E0         POP     A
   \   000061   F0           MOVX    @DPTR,A
   \   000062   85..82       MOV     DPL,?V0
   \   000065   85..83       MOV     DPH,?V1
   \   000068   A3           INC     DPTR
   \   000069   8582..       MOV     ?V0,DPL
   \   00006C   8583..       MOV     ?V1,DPH
   1007            *pBuf++ = HI_UINT16( nwkAddrOfInterest );
   \   00006F   E4           CLR     A
   \   000070   CD           XCH     A,R5
   \   000071   FC           MOV     R4,A
   \   000072   EC           MOV     A,R4
   \   000073   C0E0         PUSH    A
   \   000075   85..82       MOV     DPL,?V0
   \   000078   85..83       MOV     DPH,?V1
   \   00007B   D0E0         POP     A
   \   00007D   F0           MOVX    @DPTR,A
   \   00007E   85..82       MOV     DPL,?V0
   \   000081   85..83       MOV     DPH,?V1
   \   000084   A3           INC     DPTR
   \   000085   8582..       MOV     ?V0,DPL
   \   000088   8583..       MOV     ?V1,DPH
   1008          
   1009            *pBuf++ = userDesc->len;
   \   00008B   85..82       MOV     DPL,?V8
   \   00008E   85..83       MOV     DPH,?V9
   \   000091   E0           MOVX    A,@DPTR
   \   000092   C0E0         PUSH    A
   \   000094   85..82       MOV     DPL,?V0
   \   000097   85..83       MOV     DPH,?V1
   \   00009A   D0E0         POP     A
   \   00009C   F0           MOVX    @DPTR,A
   \   00009D   85..82       MOV     DPL,?V0
   \   0000A0   85..83       MOV     DPH,?V1
   \   0000A3   A3           INC     DPTR
   \   0000A4   8582..       MOV     ?V0,DPL
   \   0000A7   8583..       MOV     ?V1,DPH
   1010            osal_memcpy( pBuf, userDesc->desc, userDesc->len );
   \   0000AA                ; Setup parameters for call to function osal_memcpy
   \   0000AA   85..82       MOV     DPL,?V8
   \   0000AD   85..83       MOV     DPH,?V9
   \   0000B0   A3           INC     DPTR
   \   0000B1   A982         MOV     R1,DPL
   \   0000B3   AA83         MOV     R2,DPH
   \   0000B5   7B00         MOV     R3,#0x0
   \   0000B7   89..         MOV     ?V4,R1
   \   0000B9   8A..         MOV     ?V5,R2
   \   0000BB   8B..         MOV     ?V6,R3
   \   0000BD   78..         MOV     R0,#?V4
   \   0000BF   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000C2   85..82       MOV     DPL,?V8
   \   0000C5   85..83       MOV     DPH,?V9
   \   0000C8   E0           MOVX    A,@DPTR
   \   0000C9   FC           MOV     R4,A
   \   0000CA   7D00         MOV     R5,#0x0
   \   0000CC   AA..         MOV     R2,?V0
   \   0000CE   AB..         MOV     R3,?V1
   \   0000D0   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000D3   7403         MOV     A,#0x3
   \   0000D5   12....       LCALL   ?DEALLOC_XSTACK8
   1011          
   1012            return (ZStatus_t)fillAndSend( &TransSeq, dstAddr, User_Desc_rsp, len );
   \   0000D8                ; Setup parameters for call to function fillAndSend
   \   0000D8   75..11       MOV     ?V0,#0x11
   \   0000DB   75..80       MOV     ?V1,#-0x80
   \   0000DE   78..         MOV     R0,#?V0
   \   0000E0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E3   A9..         MOV     R1,?V2
   \   0000E5   EE           MOV     A,R6
   \   0000E6   FC           MOV     R4,A
   \   0000E7   EF           MOV     A,R7
   \   0000E8   FD           MOV     R5,A
   \   0000E9   7402         MOV     A,#0x2
   \   0000EB   12....       LCALL   ?XSTACK_DISP101_8
   \   0000EE   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   0000F1   7402         MOV     A,#0x2
   \   0000F3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000F6   7401         MOV     A,#0x1
   \   0000F8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000FB   7F0A         MOV     R7,#0xa
   \   0000FD   02....       LJMP    ?BANKED_LEAVE_XDATA
   1013          }
   1014          
   1015          /*********************************************************************
   1016           * @fn          ZDP_ServerDiscRsp
   1017           *
   1018           * @brief       Build and send the Server_Discovery_rsp response.
   1019           *
   1020           * @param       transID - Transaction sequence number of request.
   1021           * @param       dstAddr - Network Destination Address.
   1022           * @param       status - Status of response to request.
   1023           * @param       aoi - Network Address of Interest of request.
   1024           * @param       serverMask - Bit map of service(s) being sought.
   1025           * @param       SecurityEnable - Security Options
   1026           *
   1027           * @return      ZStatus_t
   1028           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1029          ZStatus_t ZDP_ServerDiscRsp( byte transID, zAddrType_t *dstAddr, byte status,
   \                     ZDP_ServerDiscRsp:
   1030                                     uint16 aoi, uint16 serverMask, byte SecurityEnable )
   1031          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   C0E0         PUSH    A
   \   00000D   85..82       MOV     DPL,?XSP + 0
   \   000010   85..83       MOV     DPH,?XSP + 1
   \   000013   D0E0         POP     A
   \   000015   F0           MOVX    @DPTR,A
   \   000016   8C..         MOV     ?V0,R4
   1032            const byte len = 1  + 2;  // status + aoi + mask.
   \   000018   7903         MOV     R1,#0x3
   1033            uint8 *pBuf = ZDP_TmpBuf;
   \   00001A   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   FE           MOV     R6,A
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \   000021   FF           MOV     R7,A
   1034            ZStatus_t stat;
   1035          
   1036            // Intentionally unreferenced parameters
   1037            (void)aoi;
   1038            (void)SecurityEnable;
   1039          
   1040            *pBuf++ = status;
   \   000022   E5..         MOV     A,?V0
   \   000024   C0E0         PUSH    A
   \   000026   8E82         MOV     DPL,R6
   \   000028   8F83         MOV     DPH,R7
   \   00002A   D0E0         POP     A
   \   00002C   F0           MOVX    @DPTR,A
   \   00002D   8E82         MOV     DPL,R6
   \   00002F   8F83         MOV     DPH,R7
   \   000031   A3           INC     DPTR
   \   000032   AE82         MOV     R6,DPL
   \   000034   AF83         MOV     R7,DPH
   \   000036   740F         MOV     A,#0xf
   \   000038   12....       LCALL   ?XSTACK_DISP0_8
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   FC           MOV     R4,A
   \   00003D   A3           INC     DPTR
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   FD           MOV     R5,A
   1041          
   1042            *pBuf++ = LO_UINT16( serverMask );
   \   000040   EC           MOV     A,R4
   \   000041   C0E0         PUSH    A
   \   000043   8E82         MOV     DPL,R6
   \   000045   8F83         MOV     DPH,R7
   \   000047   D0E0         POP     A
   \   000049   F0           MOVX    @DPTR,A
   \   00004A   8E82         MOV     DPL,R6
   \   00004C   8F83         MOV     DPH,R7
   \   00004E   A3           INC     DPTR
   \   00004F   AE82         MOV     R6,DPL
   \   000051   AF83         MOV     R7,DPH
   1043            *pBuf++ = HI_UINT16( serverMask );
   \   000053   E4           CLR     A
   \   000054   CD           XCH     A,R5
   \   000055   FC           MOV     R4,A
   \   000056   EC           MOV     A,R4
   \   000057   C0E0         PUSH    A
   \   000059   8E82         MOV     DPL,R6
   \   00005B   8F83         MOV     DPH,R7
   \   00005D   D0E0         POP     A
   \   00005F   F0           MOVX    @DPTR,A
   \   000060   8E82         MOV     DPL,R6
   \   000062   8F83         MOV     DPH,R7
   \   000064   A3           INC     DPTR
   \   000065   AE82         MOV     R6,DPL
   \   000067   AF83         MOV     R7,DPH
   1044          
   1045            ZDP_TxOptions = AF_MSG_ACK_REQUEST;
   \   000069   90....       MOV     DPTR,#ZDP_TxOptions
   \   00006C   7410         MOV     A,#0x10
   \   00006E   F0           MOVX    @DPTR,A
   1046            stat = fillAndSend( &transID, dstAddr, Server_Discovery_rsp, len );
   \   00006F                ; Setup parameters for call to function fillAndSend
   \   00006F   75..15       MOV     ?V2,#0x15
   \   000072   75..80       MOV     ?V3,#-0x80
   \   000075   78..         MOV     R0,#?V2
   \   000077   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007A   EA           MOV     A,R2
   \   00007B   FC           MOV     R4,A
   \   00007C   EB           MOV     A,R3
   \   00007D   FD           MOV     R5,A
   \   00007E   7402         MOV     A,#0x2
   \   000080   12....       LCALL   ?XSTACK_DISP101_8
   \   000083   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000086   7402         MOV     A,#0x2
   \   000088   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008B   E9           MOV     A,R1
   \   00008C   F9           MOV     R1,A
   1047            ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \   00008D   90....       MOV     DPTR,#ZDP_TxOptions
   \   000090   7400         MOV     A,#0x0
   \   000092   F0           MOVX    @DPTR,A
   1048          
   1049            return ( stat );
   \   000093   7401         MOV     A,#0x1
   \   000095   12....       LCALL   ?DEALLOC_XSTACK8
   \   000098   7F04         MOV     R7,#0x4
   \   00009A   02....       LJMP    ?BANKED_LEAVE_XDATA
   1050          }
   1051          
   1052          /*********************************************************************
   1053           * @fn          ZDP_GenericRsp
   1054           *
   1055           * @brief       Sends a response message with only the parameter status
   1056           *              byte and the addr of interest for data.
   1057           *              This function sends unicast message to the
   1058           *              requesting device.
   1059           *
   1060           * @param       dstAddr - destination address
   1061           * @param       status  - generic status for response
   1062           * @param       aoi     - address of interest
   1063           * @param       dstAddr - destination address
   1064           * @param       rspId   - response cluster ID
   1065           * @param       SecurityEnable - Security Options
   1066           *
   1067           * @return      afStatus_t
   1068           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1069          afStatus_t ZDP_GenericRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_GenericRsp:
   1070                               byte status, uint16 aoi, uint16 rspID, byte SecurityEnable )
   1071          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   C0E0         PUSH    A
   \   00000D   85..82       MOV     DPL,?XSP + 0
   \   000010   85..83       MOV     DPH,?XSP + 1
   \   000013   D0E0         POP     A
   \   000015   F0           MOVX    @DPTR,A
   \   000016   EC           MOV     A,R4
   \   000017   FE           MOV     R6,A
   1072            uint8 len;
   1073          
   1074            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1075          
   1076            ZDP_TmpBuf[0] = status;
   \   000018   EE           MOV     A,R6
   \   000019   C0E0         PUSH    A
   \   00001B   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F8           MOV     R0,A
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   F583         MOV     DPH,A
   \   000024   8882         MOV     DPL,R0
   \   000026   D0E0         POP     A
   \   000028   F0           MOVX    @DPTR,A
   \   000029   740A         MOV     A,#0xa
   \   00002B   12....       LCALL   ?XSTACK_DISP0_8
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F8           MOV     R0,A
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F9           MOV     R1,A
   1077            ZDP_TmpBuf[1] = LO_UINT16( aoi );
   \   000033   E8           MOV     A,R0
   \   000034   C0E0         PUSH    A
   \   000036   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   FC           MOV     R4,A
   \   00003B   A3           INC     DPTR
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   F583         MOV     DPH,A
   \   00003F   8C82         MOV     DPL,R4
   \   000041   A3           INC     DPTR
   \   000042   D0E0         POP     A
   \   000044   F0           MOVX    @DPTR,A
   1078            ZDP_TmpBuf[2] = HI_UINT16( aoi );
   \   000045   E4           CLR     A
   \   000046   C9           XCH     A,R1
   \   000047   F8           MOV     R0,A
   \   000048   E8           MOV     A,R0
   \   000049   C0E0         PUSH    A
   \   00004B   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   F8           MOV     R0,A
   \   000050   A3           INC     DPTR
   \   000051   E0           MOVX    A,@DPTR
   \   000052   F583         MOV     DPH,A
   \   000054   8882         MOV     DPL,R0
   \   000056   A3           INC     DPTR
   \   000057   A3           INC     DPTR
   \   000058   D0E0         POP     A
   \   00005A   F0           MOVX    @DPTR,A
   1079          
   1080            // Length byte
   1081            ZDP_TmpBuf[3] = 0;
   \   00005B   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   F8           MOV     R0,A
   \   000060   A3           INC     DPTR
   \   000061   E0           MOVX    A,@DPTR
   \   000062   F583         MOV     DPH,A
   \   000064   8882         MOV     DPL,R0
   \   000066   A3           INC     DPTR
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   7400         MOV     A,#0x0
   \   00006B   F0           MOVX    @DPTR,A
   1082            len = 4;
   \   00006C   7904         MOV     R1,#0x4
   1083          
   1084            return fillAndSend( &TransSeq, dstAddr, rspID, len );
   \   00006E                ; Setup parameters for call to function fillAndSend
   \   00006E   740C         MOV     A,#0xc
   \   000070   12....       LCALL   ?XSTACK_DISP0_8
   \   000073   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000076   EA           MOV     A,R2
   \   000077   FC           MOV     R4,A
   \   000078   EB           MOV     A,R3
   \   000079   FD           MOV     R5,A
   \   00007A   7402         MOV     A,#0x2
   \   00007C   12....       LCALL   ?XSTACK_DISP101_8
   \   00007F   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000082   7402         MOV     A,#0x2
   \   000084   12....       LCALL   ?DEALLOC_XSTACK8
   \   000087   7401         MOV     A,#0x1
   \   000089   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008C   7F01         MOV     R7,#0x1
   \   00008E   02....       LJMP    ?BANKED_LEAVE_XDATA
   1085          }
   1086          
   1087          /*********************************************************************
   1088           * Binding
   1089           */
   1090          /*********************************************************************
   1091           * @fn          ZDP_EndDeviceBindReq
   1092           *
   1093           * @brief       This builds and sends a End_Device_Bind_req message.
   1094           *              This function sends a unicast message.
   1095           *
   1096           * @param       dstAddr - destination address
   1097           * @param       LocalCoordinator - short address of local coordinator
   1098           * @param       epIntf - Endpoint/Interface of Simple Desc
   1099           * @param       ProfileID - Profile ID
   1100           *
   1101           *   The Input cluster list is the opposite of what you would think.
   1102           *   This is the output cluster list of this device
   1103           * @param       NumInClusters - number of input clusters
   1104           * @param       InClusterList - input cluster ID list
   1105           *
   1106           *   The Output cluster list is the opposite of what you would think.
   1107           *   This is the input cluster list of this device
   1108           * @param       NumOutClusters - number of output clusters
   1109           * @param       OutClusterList - output cluster ID list
   1110           *
   1111           * @param       SecurityEnable - Security Options
   1112           *
   1113           * @return      afStatus_t
   1114           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1115          afStatus_t ZDP_EndDeviceBindReq( zAddrType_t *dstAddr,
   \                     ZDP_EndDeviceBindReq:
   1116                                           uint16 LocalCoordinator,
   1117                                           byte endPoint,
   1118                                           uint16 ProfileID,
   1119                                           byte NumInClusters, cId_t *InClusterList,
   1120                                           byte NumOutClusters, cId_t *OutClusterList,
   1121                                           byte SecurityEnable )
   1122          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V6,R2
   \   000007   8B..         MOV     ?V7,R3
   \   000009   8C..         MOV     ?V4,R4
   \   00000B   8D..         MOV     ?V5,R5
   \   00000D   89..         MOV     ?V3,R1
   1123            uint8 *pBuf = ZDP_TmpBuf;
   \   00000F   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000012   E0           MOVX    A,@DPTR
   \   000013   FE           MOV     R6,A
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   FF           MOV     R7,A
   1124            uint8 i, len;
   1125            uint8 *ieeeAddr;
   1126          
   1127            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1128          
   1129            // LocalCoordinator + SrcExtAddr + ep + ProfileID +  NumInClusters + NumOutClusters.
   1130            len = 2 + Z_EXTADDR_LEN + 1 + 2 + 1 + 1;
   \   000017   75..0F       MOV     ?V0,#0xf
   \   00001A   7414         MOV     A,#0x14
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F5..         MOV     ?V2,A
   \   000022   7417         MOV     A,#0x17
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F5..         MOV     ?V1,A
   1131            len += (NumInClusters + NumOutClusters) * sizeof ( uint16 );
   \   00002A   75F002       MOV     B,#0x2
   \   00002D   AA..         MOV     R2,?V2
   \   00002F   7B00         MOV     R3,#0x0
   \   000031   A8..         MOV     R0,?V1
   \   000033   7900         MOV     R1,#0x0
   \   000035   EA           MOV     A,R2
   \   000036   28           ADD     A,R0
   \   000037   F8           MOV     R0,A
   \   000038   EB           MOV     A,R3
   \   000039   39           ADDC    A,R1
   \   00003A   F9           MOV     R1,A
   \   00003B   E8           MOV     A,R0
   \   00003C   A4           MUL     AB
   \   00003D   25..         ADD     A,?V0
   \   00003F   F5..         MOV     ?V0,A
   1132          
   1133            if ( len >= ZDP_BUF_SZ-1 )
   \   000041   E5..         MOV     A,?V0
   \   000043   C3           CLR     C
   \   000044   944F         SUBB    A,#0x4f
   \   000046   4005         JC      ??ZDP_EndDeviceBindReq_0
   1134            {
   1135              return afStatus_MEM_FAIL;
   \   000048   7910         MOV     R1,#0x10
   \   00004A   02....       LJMP    ??ZDP_EndDeviceBindReq_1 & 0xFFFF
   1136            }
   1137          
   1138            if ( LocalCoordinator != NLME_GetShortAddr() )
   \                     ??ZDP_EndDeviceBindReq_0:
   \   00004D                ; Setup parameters for call to function NLME_GetShortAddr
   \   00004D   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000050   8A..         MOV     ?V8,R2
   \   000052   8B..         MOV     ?V9,R3
   \   000054   E5..         MOV     A,?V8
   \   000056   65..         XRL     A,?V4
   \   000058   7004         JNZ     ??ZDP_EndDeviceBindReq_2
   \   00005A   E5..         MOV     A,?V9
   \   00005C   65..         XRL     A,?V5
   \                     ??ZDP_EndDeviceBindReq_2:
   \   00005E   6005         JZ      ??ZDP_EndDeviceBindReq_3
   1139            {
   1140              return afStatus_INVALID_PARAMETER;
   \   000060   7902         MOV     R1,#0x2
   \   000062   02....       LJMP    ??ZDP_EndDeviceBindReq_1 & 0xFFFF
   1141            }
   1142          
   1143            *pBuf++ = LO_UINT16( LocalCoordinator );
   \                     ??ZDP_EndDeviceBindReq_3:
   \   000065   E5..         MOV     A,?V4
   \   000067   C0E0         PUSH    A
   \   000069   8E82         MOV     DPL,R6
   \   00006B   8F83         MOV     DPH,R7
   \   00006D   D0E0         POP     A
   \   00006F   F0           MOVX    @DPTR,A
   \   000070   8E82         MOV     DPL,R6
   \   000072   8F83         MOV     DPH,R7
   \   000074   A3           INC     DPTR
   \   000075   AE82         MOV     R6,DPL
   \   000077   AF83         MOV     R7,DPH
   1144            *pBuf++ = HI_UINT16( LocalCoordinator );
   \   000079   E4           CLR     A
   \   00007A   C5..         XCH     A,?V5
   \   00007C   F5..         MOV     ?V4,A
   \   00007E   E5..         MOV     A,?V4
   \   000080   C0E0         PUSH    A
   \   000082   8E82         MOV     DPL,R6
   \   000084   8F83         MOV     DPH,R7
   \   000086   D0E0         POP     A
   \   000088   F0           MOVX    @DPTR,A
   \   000089   8E82         MOV     DPL,R6
   \   00008B   8F83         MOV     DPH,R7
   \   00008D   A3           INC     DPTR
   \   00008E   AE82         MOV     R6,DPL
   \   000090   AF83         MOV     R7,DPH
   1145          
   1146            ieeeAddr = NLME_GetExtAddr();
   \   000092                ; Setup parameters for call to function NLME_GetExtAddr
   \   000092   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   000095   8A..         MOV     ?V4,R2
   \   000097   8B..         MOV     ?V5,R3
   \   000099   AC..         MOV     R4,?V4
   \   00009B   AD..         MOV     R5,?V5
   1147            pBuf = osal_cpyExtAddr( pBuf, ieeeAddr );
   \   00009D                ; Setup parameters for call to function sAddrExtCpy
   \   00009D   EE           MOV     A,R6
   \   00009E   FA           MOV     R2,A
   \   00009F   EF           MOV     A,R7
   \   0000A0   FB           MOV     R3,A
   \   0000A1   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0000A4   8A..         MOV     ?V4,R2
   \   0000A6   8B..         MOV     ?V5,R3
   \   0000A8   AE..         MOV     R6,?V4
   \   0000AA   AF..         MOV     R7,?V5
   1148          
   1149            *pBuf++ = endPoint;
   \   0000AC   E5..         MOV     A,?V3
   \   0000AE   C0E0         PUSH    A
   \   0000B0   8E82         MOV     DPL,R6
   \   0000B2   8F83         MOV     DPH,R7
   \   0000B4   D0E0         POP     A
   \   0000B6   F0           MOVX    @DPTR,A
   \   0000B7   8E82         MOV     DPL,R6
   \   0000B9   8F83         MOV     DPH,R7
   \   0000BB   A3           INC     DPTR
   \   0000BC   AE82         MOV     R6,DPL
   \   0000BE   AF83         MOV     R7,DPH
   \   0000C0   7412         MOV     A,#0x12
   \   0000C2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C5   E0           MOVX    A,@DPTR
   \   0000C6   F8           MOV     R0,A
   \   0000C7   A3           INC     DPTR
   \   0000C8   E0           MOVX    A,@DPTR
   \   0000C9   F9           MOV     R1,A
   1150          
   1151            *pBuf++ = LO_UINT16( ProfileID );   // Profile ID
   \   0000CA   E8           MOV     A,R0
   \   0000CB   C0E0         PUSH    A
   \   0000CD   8E82         MOV     DPL,R6
   \   0000CF   8F83         MOV     DPH,R7
   \   0000D1   D0E0         POP     A
   \   0000D3   F0           MOVX    @DPTR,A
   \   0000D4   8E82         MOV     DPL,R6
   \   0000D6   8F83         MOV     DPH,R7
   \   0000D8   A3           INC     DPTR
   \   0000D9   AE82         MOV     R6,DPL
   \   0000DB   AF83         MOV     R7,DPH
   1152            *pBuf++ = HI_UINT16( ProfileID );
   \   0000DD   E4           CLR     A
   \   0000DE   C9           XCH     A,R1
   \   0000DF   F8           MOV     R0,A
   \   0000E0   E8           MOV     A,R0
   \   0000E1   C0E0         PUSH    A
   \   0000E3   8E82         MOV     DPL,R6
   \   0000E5   8F83         MOV     DPH,R7
   \   0000E7   D0E0         POP     A
   \   0000E9   F0           MOVX    @DPTR,A
   \   0000EA   8E82         MOV     DPL,R6
   \   0000EC   8F83         MOV     DPH,R7
   \   0000EE   A3           INC     DPTR
   \   0000EF   AE82         MOV     R6,DPL
   \   0000F1   AF83         MOV     R7,DPH
   1153          
   1154            *pBuf++ = NumInClusters; // Input cluster list
   \   0000F3   E5..         MOV     A,?V2
   \   0000F5   C0E0         PUSH    A
   \   0000F7   8E82         MOV     DPL,R6
   \   0000F9   8F83         MOV     DPH,R7
   \   0000FB   D0E0         POP     A
   \   0000FD   F0           MOVX    @DPTR,A
   \   0000FE   8E82         MOV     DPL,R6
   \   000100   8F83         MOV     DPH,R7
   \   000102   A3           INC     DPTR
   \   000103   AE82         MOV     R6,DPL
   \   000105   AF83         MOV     R7,DPH
   1155            for ( i = 0; i < NumInClusters; ++i )
   \   000107   7C00         MOV     R4,#0x0
   \   000109   7415         MOV     A,#0x15
   \   00010B   12....       LCALL   ?XSTACK_DISP0_8
   \   00010E   E0           MOVX    A,@DPTR
   \   00010F   FA           MOV     R2,A
   \   000110   A3           INC     DPTR
   \   000111   E0           MOVX    A,@DPTR
   \   000112   FB           MOV     R3,A
   \   000113   8076         SJMP    ??ZDP_EndDeviceBindReq_4
   1156            {
   1157              *pBuf++ = LO_UINT16(InClusterList[i]);
   \                     ??ZDP_EndDeviceBindReq_5:
   \   000115   EC           MOV     A,R4
   \   000116   F8           MOV     R0,A
   \   000117   7900         MOV     R1,#0x0
   \   000119   E8           MOV     A,R0
   \   00011A   75F002       MOV     B,#0x2
   \   00011D   A4           MUL     AB
   \   00011E   C8           XCH     A,R0
   \   00011F   ADF0         MOV     R5,B
   \   000121   75F000       MOV     B,#0x0
   \   000124   A4           MUL     AB
   \   000125   2D           ADD     A,R5
   \   000126   FD           MOV     R5,A
   \   000127   75F002       MOV     B,#0x2
   \   00012A   E9           MOV     A,R1
   \   00012B   A4           MUL     AB
   \   00012C   2D           ADD     A,R5
   \   00012D   F9           MOV     R1,A
   \   00012E   EA           MOV     A,R2
   \   00012F   28           ADD     A,R0
   \   000130   F582         MOV     DPL,A
   \   000132   EB           MOV     A,R3
   \   000133   39           ADDC    A,R1
   \   000134   F583         MOV     DPH,A
   \   000136   E0           MOVX    A,@DPTR
   \   000137   F8           MOV     R0,A
   \   000138   A3           INC     DPTR
   \   000139   E0           MOVX    A,@DPTR
   \   00013A   F9           MOV     R1,A
   \   00013B   E8           MOV     A,R0
   \   00013C   C0E0         PUSH    A
   \   00013E   8E82         MOV     DPL,R6
   \   000140   8F83         MOV     DPH,R7
   \   000142   D0E0         POP     A
   \   000144   F0           MOVX    @DPTR,A
   \   000145   8E82         MOV     DPL,R6
   \   000147   8F83         MOV     DPH,R7
   \   000149   A3           INC     DPTR
   \   00014A   AE82         MOV     R6,DPL
   \   00014C   AF83         MOV     R7,DPH
   1158              *pBuf++ = HI_UINT16(InClusterList[i]);
   \   00014E   EC           MOV     A,R4
   \   00014F   F8           MOV     R0,A
   \   000150   7900         MOV     R1,#0x0
   \   000152   E8           MOV     A,R0
   \   000153   75F002       MOV     B,#0x2
   \   000156   A4           MUL     AB
   \   000157   C8           XCH     A,R0
   \   000158   ADF0         MOV     R5,B
   \   00015A   75F000       MOV     B,#0x0
   \   00015D   A4           MUL     AB
   \   00015E   2D           ADD     A,R5
   \   00015F   FD           MOV     R5,A
   \   000160   75F002       MOV     B,#0x2
   \   000163   E9           MOV     A,R1
   \   000164   A4           MUL     AB
   \   000165   2D           ADD     A,R5
   \   000166   F9           MOV     R1,A
   \   000167   EA           MOV     A,R2
   \   000168   28           ADD     A,R0
   \   000169   F582         MOV     DPL,A
   \   00016B   EB           MOV     A,R3
   \   00016C   39           ADDC    A,R1
   \   00016D   F583         MOV     DPH,A
   \   00016F   E0           MOVX    A,@DPTR
   \   000170   F8           MOV     R0,A
   \   000171   A3           INC     DPTR
   \   000172   E0           MOVX    A,@DPTR
   \   000173   F9           MOV     R1,A
   \   000174   E4           CLR     A
   \   000175   C9           XCH     A,R1
   \   000176   F8           MOV     R0,A
   \   000177   E8           MOV     A,R0
   \   000178   C0E0         PUSH    A
   \   00017A   8E82         MOV     DPL,R6
   \   00017C   8F83         MOV     DPH,R7
   \   00017E   D0E0         POP     A
   \   000180   F0           MOVX    @DPTR,A
   \   000181   8E82         MOV     DPL,R6
   \   000183   8F83         MOV     DPH,R7
   \   000185   A3           INC     DPTR
   \   000186   AE82         MOV     R6,DPL
   \   000188   AF83         MOV     R7,DPH
   1159            }
   \   00018A   0C           INC     R4
   \                     ??ZDP_EndDeviceBindReq_4:
   \   00018B   EC           MOV     A,R4
   \   00018C   C3           CLR     C
   \   00018D   95..         SUBB    A,?V2
   \   00018F   4084         JC      ??ZDP_EndDeviceBindReq_5
   1160          
   1161            *pBuf++ = NumOutClusters; // Output cluster list
   \   000191   E5..         MOV     A,?V1
   \   000193   C0E0         PUSH    A
   \   000195   8E82         MOV     DPL,R6
   \   000197   8F83         MOV     DPH,R7
   \   000199   D0E0         POP     A
   \   00019B   F0           MOVX    @DPTR,A
   \   00019C   8E82         MOV     DPL,R6
   \   00019E   8F83         MOV     DPH,R7
   \   0001A0   A3           INC     DPTR
   \   0001A1   AE82         MOV     R6,DPL
   \   0001A3   AF83         MOV     R7,DPH
   1162            for ( i = 0; i < NumOutClusters; ++i )
   \   0001A5   7C00         MOV     R4,#0x0
   \   0001A7   7418         MOV     A,#0x18
   \   0001A9   12....       LCALL   ?XSTACK_DISP0_8
   \   0001AC   E0           MOVX    A,@DPTR
   \   0001AD   FA           MOV     R2,A
   \   0001AE   A3           INC     DPTR
   \   0001AF   E0           MOVX    A,@DPTR
   \   0001B0   FB           MOV     R3,A
   \   0001B1   8076         SJMP    ??ZDP_EndDeviceBindReq_6
   1163            {
   1164              *pBuf++ = LO_UINT16(OutClusterList[i]);
   \                     ??ZDP_EndDeviceBindReq_7:
   \   0001B3   EC           MOV     A,R4
   \   0001B4   F8           MOV     R0,A
   \   0001B5   7900         MOV     R1,#0x0
   \   0001B7   E8           MOV     A,R0
   \   0001B8   75F002       MOV     B,#0x2
   \   0001BB   A4           MUL     AB
   \   0001BC   C8           XCH     A,R0
   \   0001BD   ADF0         MOV     R5,B
   \   0001BF   75F000       MOV     B,#0x0
   \   0001C2   A4           MUL     AB
   \   0001C3   2D           ADD     A,R5
   \   0001C4   FD           MOV     R5,A
   \   0001C5   75F002       MOV     B,#0x2
   \   0001C8   E9           MOV     A,R1
   \   0001C9   A4           MUL     AB
   \   0001CA   2D           ADD     A,R5
   \   0001CB   F9           MOV     R1,A
   \   0001CC   EA           MOV     A,R2
   \   0001CD   28           ADD     A,R0
   \   0001CE   F582         MOV     DPL,A
   \   0001D0   EB           MOV     A,R3
   \   0001D1   39           ADDC    A,R1
   \   0001D2   F583         MOV     DPH,A
   \   0001D4   E0           MOVX    A,@DPTR
   \   0001D5   F8           MOV     R0,A
   \   0001D6   A3           INC     DPTR
   \   0001D7   E0           MOVX    A,@DPTR
   \   0001D8   F9           MOV     R1,A
   \   0001D9   E8           MOV     A,R0
   \   0001DA   C0E0         PUSH    A
   \   0001DC   8E82         MOV     DPL,R6
   \   0001DE   8F83         MOV     DPH,R7
   \   0001E0   D0E0         POP     A
   \   0001E2   F0           MOVX    @DPTR,A
   \   0001E3   8E82         MOV     DPL,R6
   \   0001E5   8F83         MOV     DPH,R7
   \   0001E7   A3           INC     DPTR
   \   0001E8   AE82         MOV     R6,DPL
   \   0001EA   AF83         MOV     R7,DPH
   1165              *pBuf++ = HI_UINT16(OutClusterList[i]);
   \   0001EC   EC           MOV     A,R4
   \   0001ED   F8           MOV     R0,A
   \   0001EE   7900         MOV     R1,#0x0
   \   0001F0   E8           MOV     A,R0
   \   0001F1   75F002       MOV     B,#0x2
   \   0001F4   A4           MUL     AB
   \   0001F5   C8           XCH     A,R0
   \   0001F6   ADF0         MOV     R5,B
   \   0001F8   75F000       MOV     B,#0x0
   \   0001FB   A4           MUL     AB
   \   0001FC   2D           ADD     A,R5
   \   0001FD   FD           MOV     R5,A
   \   0001FE   75F002       MOV     B,#0x2
   \   000201   E9           MOV     A,R1
   \   000202   A4           MUL     AB
   \   000203   2D           ADD     A,R5
   \   000204   F9           MOV     R1,A
   \   000205   EA           MOV     A,R2
   \   000206   28           ADD     A,R0
   \   000207   F582         MOV     DPL,A
   \   000209   EB           MOV     A,R3
   \   00020A   39           ADDC    A,R1
   \   00020B   F583         MOV     DPH,A
   \   00020D   E0           MOVX    A,@DPTR
   \   00020E   F8           MOV     R0,A
   \   00020F   A3           INC     DPTR
   \   000210   E0           MOVX    A,@DPTR
   \   000211   F9           MOV     R1,A
   \   000212   E4           CLR     A
   \   000213   C9           XCH     A,R1
   \   000214   F8           MOV     R0,A
   \   000215   E8           MOV     A,R0
   \   000216   C0E0         PUSH    A
   \   000218   8E82         MOV     DPL,R6
   \   00021A   8F83         MOV     DPH,R7
   \   00021C   D0E0         POP     A
   \   00021E   F0           MOVX    @DPTR,A
   \   00021F   8E82         MOV     DPL,R6
   \   000221   8F83         MOV     DPH,R7
   \   000223   A3           INC     DPTR
   \   000224   AE82         MOV     R6,DPL
   \   000226   AF83         MOV     R7,DPH
   1166            }
   \   000228   0C           INC     R4
   \                     ??ZDP_EndDeviceBindReq_6:
   \   000229   EC           MOV     A,R4
   \   00022A   C3           CLR     C
   \   00022B   95..         SUBB    A,?V1
   \   00022D   4084         JC      ??ZDP_EndDeviceBindReq_7
   1167          
   1168            return fillAndSend( &ZDP_TransID, dstAddr, End_Device_Bind_req, len );
   \   00022F                ; Setup parameters for call to function fillAndSend
   \   00022F   75..20       MOV     ?V4,#0x20
   \   000232   75..00       MOV     ?V5,#0x0
   \   000235   78..         MOV     R0,#?V4
   \   000237   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00023A   A9..         MOV     R1,?V0
   \   00023C   AC..         MOV     R4,?V6
   \   00023E   AD..         MOV     R5,?V7
   \   000240   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000242   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000244   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000247   7402         MOV     A,#0x2
   \   000249   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??ZDP_EndDeviceBindReq_1:
   \   00024C   7F0A         MOV     R7,#0xa
   \   00024E   02....       LJMP    ?BANKED_LEAVE_XDATA
   1169          }
   1170          
   1171          /*********************************************************************
   1172           * @fn          ZDP_BindUnbindReq
   1173           *
   1174           * @brief       This builds and send a Bind_req or Unbind_req message
   1175           *              Depending on the ClusterID. This function
   1176           *              sends a unicast message to the local coordinator.
   1177           *
   1178           * @param       BindOrUnbind - either Bind_req or Unbind_req
   1179           * @param       dstAddr - destination address of the message
   1180           * @param       SourceAddr - source 64 bit address of the binding
   1181           * @param       SrcEPIntf - Source endpoint/interface
   1182           * @param       ClusterID - Binding cluster ID
   1183           * @param       DestinationAddr - destination 64 bit addr of binding
   1184           * @param       DstEPIntf - destination endpoint/interface
   1185           * @param       SecurityEnable - Security Options
   1186           *
   1187           * @return      afStatus_t
   1188           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1189          afStatus_t ZDP_BindUnbindReq( uint16 BindOrUnbind, zAddrType_t *dstAddr,
   \                     ZDP_BindUnbindReq:
   1190                                        uint8 *SourceAddr, byte SrcEndPoint,
   1191                                        cId_t ClusterID,
   1192                                        zAddrType_t *destinationAddr, byte DstEndPoint,
   1193                                        byte SecurityEnable )
   1194          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V4,R2
   \   000007   8B..         MOV     ?V5,R3
   \   000009   8C..         MOV     ?V2,R4
   \   00000B   8D..         MOV     ?V3,R5
   \   00000D   E9           MOV     A,R1
   \   00000E   FF           MOV     R7,A
   1195            uint8 *pBuf = ZDP_TmpBuf;
   \   00000F   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000012   E0           MOVX    A,@DPTR
   \   000013   FA           MOV     R2,A
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   FB           MOV     R3,A
   1196            byte len;
   1197          
   1198            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1199          
   1200            // SourceAddr + SrcEPIntf + ClusterID +  addrMode.
   1201            len = Z_EXTADDR_LEN + 1 + sizeof( cId_t ) + sizeof( uint8 );
   \   000017   7E0C         MOV     R6,#0xc
   \   000019   7414         MOV     A,#0x14
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F5..         MOV     ?V0,A
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F5..         MOV     ?V1,A
   1202            if ( destinationAddr->addrMode == Addr64Bit )
   \   000025   85..82       MOV     DPL,?V0
   \   000028   85..83       MOV     DPH,?V1
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   6403         XRL     A,#0x3
   \   000036   7006         JNZ     ??ZDP_BindUnbindReq_0
   1203              len += Z_EXTADDR_LEN + 1;     // +1 for DstEPIntf
   \   000038   7409         MOV     A,#0x9
   \   00003A   2E           ADD     A,R6
   \   00003B   FE           MOV     R6,A
   \   00003C   8017         SJMP    ??ZDP_BindUnbindReq_1
   1204            else if ( destinationAddr->addrMode == AddrGroup )
   \                     ??ZDP_BindUnbindReq_0:
   \   00003E   85..82       MOV     DPL,?V0
   \   000041   85..83       MOV     DPH,?V1
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   6401         XRL     A,#0x1
   \   00004F   7004         JNZ     ??ZDP_BindUnbindReq_1
   1205              len += sizeof ( uint16 );
   \   000051   7402         MOV     A,#0x2
   \   000053   2E           ADD     A,R6
   \   000054   FE           MOV     R6,A
   1206          
   1207            pBuf = osal_cpyExtAddr( pBuf, SourceAddr );
   \                     ??ZDP_BindUnbindReq_1:
   \   000055                ; Setup parameters for call to function sAddrExtCpy
   \   000055   7410         MOV     A,#0x10
   \   000057   12....       LCALL   ?XSTACK_DISP0_8
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   FC           MOV     R4,A
   \   00005C   A3           INC     DPTR
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   FD           MOV     R5,A
   \   00005F   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000062   8A..         MOV     ?V6,R2
   \   000064   8B..         MOV     ?V7,R3
   \   000066   AA..         MOV     R2,?V6
   \   000068   AB..         MOV     R3,?V7
   1208            *pBuf++ = SrcEndPoint;
   \   00006A   EF           MOV     A,R7
   \   00006B   C0E0         PUSH    A
   \   00006D   8A82         MOV     DPL,R2
   \   00006F   8B83         MOV     DPH,R3
   \   000071   D0E0         POP     A
   \   000073   F0           MOVX    @DPTR,A
   \   000074   8A82         MOV     DPL,R2
   \   000076   8B83         MOV     DPH,R3
   \   000078   A3           INC     DPTR
   \   000079   AA82         MOV     R2,DPL
   \   00007B   AB83         MOV     R3,DPH
   \   00007D   7412         MOV     A,#0x12
   \   00007F   12....       LCALL   ?XSTACK_DISP0_8
   \   000082   E0           MOVX    A,@DPTR
   \   000083   F8           MOV     R0,A
   \   000084   A3           INC     DPTR
   \   000085   E0           MOVX    A,@DPTR
   \   000086   F9           MOV     R1,A
   1209          
   1210            *pBuf++ = LO_UINT16( ClusterID );
   \   000087   E8           MOV     A,R0
   \   000088   C0E0         PUSH    A
   \   00008A   8A82         MOV     DPL,R2
   \   00008C   8B83         MOV     DPH,R3
   \   00008E   D0E0         POP     A
   \   000090   F0           MOVX    @DPTR,A
   \   000091   8A82         MOV     DPL,R2
   \   000093   8B83         MOV     DPH,R3
   \   000095   A3           INC     DPTR
   \   000096   AA82         MOV     R2,DPL
   \   000098   AB83         MOV     R3,DPH
   1211          
   1212            *pBuf++ = HI_UINT16( ClusterID );
   \   00009A   E4           CLR     A
   \   00009B   C9           XCH     A,R1
   \   00009C   F8           MOV     R0,A
   \   00009D   E8           MOV     A,R0
   \   00009E   C0E0         PUSH    A
   \   0000A0   8A82         MOV     DPL,R2
   \   0000A2   8B83         MOV     DPH,R3
   \   0000A4   D0E0         POP     A
   \   0000A6   F0           MOVX    @DPTR,A
   \   0000A7   8A82         MOV     DPL,R2
   \   0000A9   8B83         MOV     DPH,R3
   \   0000AB   A3           INC     DPTR
   \   0000AC   AA82         MOV     R2,DPL
   \   0000AE   AB83         MOV     R3,DPH
   1213            *pBuf++ = destinationAddr->addrMode;
   \   0000B0   85..82       MOV     DPL,?V0
   \   0000B3   85..83       MOV     DPH,?V1
   \   0000B6   A3           INC     DPTR
   \   0000B7   A3           INC     DPTR
   \   0000B8   A3           INC     DPTR
   \   0000B9   A3           INC     DPTR
   \   0000BA   A3           INC     DPTR
   \   0000BB   A3           INC     DPTR
   \   0000BC   A3           INC     DPTR
   \   0000BD   A3           INC     DPTR
   \   0000BE   E0           MOVX    A,@DPTR
   \   0000BF   C0E0         PUSH    A
   \   0000C1   8A82         MOV     DPL,R2
   \   0000C3   8B83         MOV     DPH,R3
   \   0000C5   D0E0         POP     A
   \   0000C7   F0           MOVX    @DPTR,A
   \   0000C8   8A82         MOV     DPL,R2
   \   0000CA   8B83         MOV     DPH,R3
   \   0000CC   A3           INC     DPTR
   \   0000CD   AA82         MOV     R2,DPL
   \   0000CF   AB83         MOV     R3,DPH
   1214            if ( destinationAddr->addrMode == Addr64Bit )
   \   0000D1   85..82       MOV     DPL,?V0
   \   0000D4   85..83       MOV     DPH,?V1
   \   0000D7   A3           INC     DPTR
   \   0000D8   A3           INC     DPTR
   \   0000D9   A3           INC     DPTR
   \   0000DA   A3           INC     DPTR
   \   0000DB   A3           INC     DPTR
   \   0000DC   A3           INC     DPTR
   \   0000DD   A3           INC     DPTR
   \   0000DE   A3           INC     DPTR
   \   0000DF   E0           MOVX    A,@DPTR
   \   0000E0   6403         XRL     A,#0x3
   \   0000E2   7020         JNZ     ??ZDP_BindUnbindReq_2
   1215            {
   1216              pBuf = osal_cpyExtAddr( pBuf, destinationAddr->addr.extAddr );
   \   0000E4                ; Setup parameters for call to function sAddrExtCpy
   \   0000E4   AC..         MOV     R4,?V0
   \   0000E6   AD..         MOV     R5,?V1
   \   0000E8   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0000EB   8A..         MOV     ?V0,R2
   \   0000ED   8B..         MOV     ?V1,R3
   \   0000EF   AA..         MOV     R2,?V0
   \   0000F1   AB..         MOV     R3,?V1
   1217              *pBuf = DstEndPoint;
   \   0000F3   7416         MOV     A,#0x16
   \   0000F5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F8   E0           MOVX    A,@DPTR
   \   0000F9   C0E0         PUSH    A
   \   0000FB   8A82         MOV     DPL,R2
   \   0000FD   8B83         MOV     DPH,R3
   \   0000FF   D0E0         POP     A
   \   000101   F0           MOVX    @DPTR,A
   \   000102   8052         SJMP    ??ZDP_BindUnbindReq_3
   1218            }
   1219            else if ( destinationAddr->addrMode == AddrGroup )
   \                     ??ZDP_BindUnbindReq_2:
   \   000104   85..82       MOV     DPL,?V0
   \   000107   85..83       MOV     DPH,?V1
   \   00010A   A3           INC     DPTR
   \   00010B   A3           INC     DPTR
   \   00010C   A3           INC     DPTR
   \   00010D   A3           INC     DPTR
   \   00010E   A3           INC     DPTR
   \   00010F   A3           INC     DPTR
   \   000110   A3           INC     DPTR
   \   000111   A3           INC     DPTR
   \   000112   E0           MOVX    A,@DPTR
   \   000113   6401         XRL     A,#0x1
   \   000115   703F         JNZ     ??ZDP_BindUnbindReq_3
   1220            {
   1221              *pBuf++ = LO_UINT16( destinationAddr->addr.shortAddr );
   \   000117   85..82       MOV     DPL,?V0
   \   00011A   85..83       MOV     DPH,?V1
   \   00011D   E0           MOVX    A,@DPTR
   \   00011E   F8           MOV     R0,A
   \   00011F   A3           INC     DPTR
   \   000120   E0           MOVX    A,@DPTR
   \   000121   F9           MOV     R1,A
   \   000122   E8           MOV     A,R0
   \   000123   C0E0         PUSH    A
   \   000125   8A82         MOV     DPL,R2
   \   000127   8B83         MOV     DPH,R3
   \   000129   D0E0         POP     A
   \   00012B   F0           MOVX    @DPTR,A
   \   00012C   8A82         MOV     DPL,R2
   \   00012E   8B83         MOV     DPH,R3
   \   000130   A3           INC     DPTR
   \   000131   AA82         MOV     R2,DPL
   \   000133   AB83         MOV     R3,DPH
   1222              *pBuf++ = HI_UINT16( destinationAddr->addr.shortAddr );
   \   000135   85..82       MOV     DPL,?V0
   \   000138   85..83       MOV     DPH,?V1
   \   00013B   E0           MOVX    A,@DPTR
   \   00013C   F8           MOV     R0,A
   \   00013D   A3           INC     DPTR
   \   00013E   E0           MOVX    A,@DPTR
   \   00013F   F9           MOV     R1,A
   \   000140   E4           CLR     A
   \   000141   C9           XCH     A,R1
   \   000142   F8           MOV     R0,A
   \   000143   E8           MOV     A,R0
   \   000144   C0E0         PUSH    A
   \   000146   8A82         MOV     DPL,R2
   \   000148   8B83         MOV     DPH,R3
   \   00014A   D0E0         POP     A
   \   00014C   F0           MOVX    @DPTR,A
   \   00014D   8A82         MOV     DPL,R2
   \   00014F   8B83         MOV     DPH,R3
   \   000151   A3           INC     DPTR
   \   000152   AA82         MOV     R2,DPL
   \   000154   AB83         MOV     R3,DPH
   1223            }
   1224          
   1225            FillAndSendTxOptions( &ZDP_TransID, dstAddr, BindOrUnbind, len, AF_MSG_ACK_REQUEST );
   \                     ??ZDP_BindUnbindReq_3:
   \   000156   90....       MOV     DPTR,#ZDP_TxOptions
   \   000159   7410         MOV     A,#0x10
   \   00015B   F0           MOVX    @DPTR,A
   \   00015C                ; Setup parameters for call to function fillAndSend
   \   00015C   78..         MOV     R0,#?V4
   \   00015E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000161   EE           MOV     A,R6
   \   000162   F9           MOV     R1,A
   \   000163   AC..         MOV     R4,?V2
   \   000165   AD..         MOV     R5,?V3
   \   000167   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000169   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   00016B   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00016E   7402         MOV     A,#0x2
   \   000170   12....       LCALL   ?DEALLOC_XSTACK8
   \   000173   E9           MOV     A,R1
   \   000174   F9           MOV     R1,A
   \   000175   90....       MOV     DPTR,#ZDP_TxOptions
   \   000178   7400         MOV     A,#0x0
   \   00017A   F0           MOVX    @DPTR,A
   \   00017B   7F08         MOV     R7,#0x8
   \   00017D   02....       LJMP    ?BANKED_LEAVE_XDATA
   1226          }
   1227          
   1228          /*********************************************************************
   1229           * Network Management
   1230           */
   1231          
   1232          /*********************************************************************
   1233           * @fn          ZDP_MgmtNwkDiscReq
   1234           *
   1235           * @brief       This builds and send a Mgmt_NWK_Disc_req message. This
   1236           *              function sends a unicast message.
   1237           *
   1238           * @param       dstAddr - destination address of the message
   1239           * @param       ScanChannels - 32 bit address bit map
   1240           * @param       StartIndex - Starting index within the reporting network
   1241           *                           list
   1242           * @param       SecurityEnable - Security Options
   1243           *
   1244           * @return      afStatus_t
   1245           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1246          afStatus_t ZDP_MgmtNwkDiscReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkDiscReq:
   1247                                         uint32 ScanChannels,
   1248                                         byte ScanDuration,
   1249                                         byte StartIndex,
   1250                                         byte SecurityEnable )
   1251          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V1,R1
   \   00000B   8C..         MOV     ?V2,R4
   1252            uint8 *pBuf = ZDP_TmpBuf;
   \   00000D   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000010   E0           MOVX    A,@DPTR
   \   000011   FA           MOV     R2,A
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   FB           MOV     R3,A
   1253            byte len = sizeof( uint32 )+1+1;  // ScanChannels + ScanDuration + StartIndex.
   \   000015   75..06       MOV     ?V0,#0x6
   1254          
   1255            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1256          
   1257            pBuf = osal_buffer_uint32( pBuf, ScanChannels );
   \   000018                ; Setup parameters for call to function osal_buffer_uint32
   \   000018   740E         MOV     A,#0xe
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000020   12....       LCALL   `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   000023   7404         MOV     A,#0x4
   \   000025   12....       LCALL   ?DEALLOC_XSTACK8
   \   000028   8A..         MOV     ?V4,R2
   \   00002A   8B..         MOV     ?V5,R3
   \   00002C   AA..         MOV     R2,?V4
   \   00002E   AB..         MOV     R3,?V5
   1258          
   1259            *pBuf++ = ScanDuration;
   \   000030   E5..         MOV     A,?V1
   \   000032   C0E0         PUSH    A
   \   000034   8A82         MOV     DPL,R2
   \   000036   8B83         MOV     DPH,R3
   \   000038   D0E0         POP     A
   \   00003A   F0           MOVX    @DPTR,A
   \   00003B   8A82         MOV     DPL,R2
   \   00003D   8B83         MOV     DPH,R3
   \   00003F   A3           INC     DPTR
   \   000040   AA82         MOV     R2,DPL
   \   000042   AB83         MOV     R3,DPH
   1260            *pBuf = StartIndex;
   \   000044   E5..         MOV     A,?V2
   \   000046   C0E0         PUSH    A
   \   000048   8A82         MOV     DPL,R2
   \   00004A   8B83         MOV     DPH,R3
   \   00004C   D0E0         POP     A
   \   00004E   F0           MOVX    @DPTR,A
   1261          
   1262            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_NWK_Disc_req, len );
   \   00004F                ; Setup parameters for call to function fillAndSend
   \   00004F   75..30       MOV     ?V4,#0x30
   \   000052   75..00       MOV     ?V5,#0x0
   \   000055   78..         MOV     R0,#?V4
   \   000057   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005A   A9..         MOV     R1,?V0
   \   00005C   EE           MOV     A,R6
   \   00005D   FC           MOV     R4,A
   \   00005E   EF           MOV     A,R7
   \   00005F   FD           MOV     R5,A
   \   000060   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000062   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000064   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000067   7402         MOV     A,#0x2
   \   000069   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006C   7F06         MOV     R7,#0x6
   \   00006E   02....       LJMP    ?BANKED_LEAVE_XDATA
   1263          }
   1264          
   1265          /*********************************************************************
   1266           * @fn          ZDP_MgmtDirectJoinReq
   1267           *
   1268           * @brief       This builds and send a Mgmt_Direct_Join_req message. This
   1269           *              function sends a unicast message.
   1270           *
   1271           * @param       dstAddr - destination address of the message
   1272           * @param       deviceAddr - 64 bit IEEE Address
   1273           * @param       SecurityEnable - Security Options
   1274           *
   1275           * @return      afStatus_t
   1276           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1277          afStatus_t ZDP_MgmtDirectJoinReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtDirectJoinReq:
   1278                                         uint8 *deviceAddr,
   1279                                         byte capInfo,
   1280                                         byte SecurityEnable )
   1281          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V0,R1
   1282            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1283          
   1284            osal_cpyExtAddr( ZDP_TmpBuf, deviceAddr );
   \   00000B                ; Setup parameters for call to function sAddrExtCpy
   \   00000B   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   FA           MOV     R2,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   FB           MOV     R3,A
   \   000013   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1285            ZDP_TmpBuf[Z_EXTADDR_LEN] = capInfo;
   \   000016   E5..         MOV     A,?V0
   \   000018   C0E0         PUSH    A
   \   00001A   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F8           MOV     R0,A
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \   000021   C8           XCH     A,R0
   \   000022   2408         ADD     A,#0x8
   \   000024   F582         MOV     DPL,A
   \   000026   C8           XCH     A,R0
   \   000027   3400         ADDC    A,#0x0
   \   000029   F583         MOV     DPH,A
   \   00002B   D0E0         POP     A
   \   00002D   F0           MOVX    @DPTR,A
   1286          
   1287            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Direct_Join_req, (Z_EXTADDR_LEN + 1) );
   \   00002E                ; Setup parameters for call to function fillAndSend
   \   00002E   75..35       MOV     ?V2,#0x35
   \   000031   75..00       MOV     ?V3,#0x0
   \   000034   78..         MOV     R0,#?V2
   \   000036   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000039   7909         MOV     R1,#0x9
   \   00003B   EE           MOV     A,R6
   \   00003C   FC           MOV     R4,A
   \   00003D   EF           MOV     A,R7
   \   00003E   FD           MOV     R5,A
   \   00003F   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000041   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000043   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000046   7402         MOV     A,#0x2
   \   000048   12....       LCALL   ?DEALLOC_XSTACK8
   \   00004B   7F04         MOV     R7,#0x4
   \   00004D   02....       LJMP    ?BANKED_LEAVE_XDATA
   1288          }
   1289          
   1290          /*********************************************************************
   1291           * @fn          ZDP_MgmtPermitJoinReq
   1292           *
   1293           * @brief       This builds and send a Mgmt_Permit_Join_req message.
   1294           *
   1295           * @param       dstAddr - destination address of the message
   1296           * @param       duration - Permit duration
   1297           * @param       TcSignificance - Trust Center Significance
   1298           *
   1299           * @return      afStatus_t
   1300           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1301          afStatus_t ZDP_MgmtPermitJoinReq( zAddrType_t *dstAddr, byte duration,
   \                     ZDP_MgmtPermitJoinReq:
   1302                                            byte TcSignificance, byte SecurityEnable )
   1303          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EC           MOV     A,R4
   \   000008   FF           MOV     R7,A
   1304            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1305          
   1306            // Build buffer
   1307            ZDP_TmpBuf[ZDP_MGMT_PERMIT_JOIN_REQ_DURATION] = duration;
   \   000009   EE           MOV     A,R6
   \   00000A   C0E0         PUSH    A
   \   00000C   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F8           MOV     R0,A
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F583         MOV     DPH,A
   \   000015   8882         MOV     DPL,R0
   \   000017   D0E0         POP     A
   \   000019   F0           MOVX    @DPTR,A
   1308            ZDP_TmpBuf[ZDP_MGMT_PERMIT_JOIN_REQ_TC_SIG]   = TcSignificance;
   \   00001A   EF           MOV     A,R7
   \   00001B   C0E0         PUSH    A
   \   00001D   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F8           MOV     R0,A
   \   000022   A3           INC     DPTR
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F583         MOV     DPH,A
   \   000026   8882         MOV     DPL,R0
   \   000028   A3           INC     DPTR
   \   000029   D0E0         POP     A
   \   00002B   F0           MOVX    @DPTR,A
   1309          
   1310            // Send the message
   1311            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Permit_Join_req,
   1312                                ZDP_MGMT_PERMIT_JOIN_REQ_SIZE );
   \   00002C                ; Setup parameters for call to function fillAndSend
   \   00002C   75..36       MOV     ?V0,#0x36
   \   00002F   75..00       MOV     ?V1,#0x0
   \   000032   78..         MOV     R0,#?V0
   \   000034   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000037   7902         MOV     R1,#0x2
   \   000039   EA           MOV     A,R2
   \   00003A   FC           MOV     R4,A
   \   00003B   EB           MOV     A,R3
   \   00003C   FD           MOV     R5,A
   \   00003D   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   00003F   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000041   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000044   7402         MOV     A,#0x2
   \   000046   12....       LCALL   ?DEALLOC_XSTACK8
   \   000049   7F02         MOV     R7,#0x2
   \   00004B   02....       LJMP    ?BANKED_LEAVE_XDATA
   1313          }
   1314          
   1315          /*********************************************************************
   1316           * @fn          ZDP_MgmtLeaveReq
   1317           *
   1318           * @brief       This builds and send a Mgmt_Leave_req message.
   1319           *
   1320           * @param       dstAddr - destination address of the message
   1321           *              IEEEAddr - IEEE adddress of device that is removed
   1322           *              RemoveChildren - set to 1 to remove the children of the
   1323           *                                device as well. 0 otherwise.
   1324           *              Rejoin - set to 1 if the removed device should rejoin
   1325                                   afterwards. 0 otherwise.
   1326           *
   1327           * @return      afStatus_t
   1328           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1329          afStatus_t ZDP_MgmtLeaveReq( zAddrType_t *dstAddr, uint8 *IEEEAddr, uint8 RemoveChildren,
   \                     ZDP_MgmtLeaveReq:
   1330                           uint8 Rejoin, uint8 SecurityEnable )
   1331          
   1332          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V0,R1
   1333            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1334          
   1335            osal_cpyExtAddr( ZDP_TmpBuf, IEEEAddr );
   \   00000B                ; Setup parameters for call to function sAddrExtCpy
   \   00000B   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   FA           MOV     R2,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   FB           MOV     R3,A
   \   000013   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1336            ZDP_TmpBuf[Z_EXTADDR_LEN] = 0;
   \   000016   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F8           MOV     R0,A
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   C8           XCH     A,R0
   \   00001E   2408         ADD     A,#0x8
   \   000020   F582         MOV     DPL,A
   \   000022   C8           XCH     A,R0
   \   000023   3400         ADDC    A,#0x0
   \   000025   F583         MOV     DPH,A
   \   000027   7400         MOV     A,#0x0
   \   000029   F0           MOVX    @DPTR,A
   1337          
   1338            if ( RemoveChildren == TRUE )
   \   00002A   7401         MOV     A,#0x1
   \   00002C   65..         XRL     A,?V0
   \   00002E   7015         JNZ     ??ZDP_MgmtLeaveReq_0
   1339            {
   1340              ZDP_TmpBuf[Z_EXTADDR_LEN] |= ZDP_MGMT_LEAVE_REQ_RC;
   \   000030   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F8           MOV     R0,A
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   C8           XCH     A,R0
   \   000038   2408         ADD     A,#0x8
   \   00003A   F582         MOV     DPL,A
   \   00003C   C8           XCH     A,R0
   \   00003D   3400         ADDC    A,#0x0
   \   00003F   F583         MOV     DPH,A
   \   000041   E0           MOVX    A,@DPTR
   \   000042   D2E6         SETB    0xE0 /* A   */.6
   \   000044   F0           MOVX    @DPTR,A
   1341            }
   1342            if ( Rejoin == TRUE )
   \                     ??ZDP_MgmtLeaveReq_0:
   \   000045   740C         MOV     A,#0xc
   \   000047   12....       LCALL   ?XSTACK_DISP0_8
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   6401         XRL     A,#0x1
   \   00004D   7015         JNZ     ??ZDP_MgmtLeaveReq_1
   1343            {
   1344              ZDP_TmpBuf[Z_EXTADDR_LEN] |= ZDP_MGMT_LEAVE_REQ_REJOIN;
   \   00004F   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000052   E0           MOVX    A,@DPTR
   \   000053   F8           MOV     R0,A
   \   000054   A3           INC     DPTR
   \   000055   E0           MOVX    A,@DPTR
   \   000056   C8           XCH     A,R0
   \   000057   2408         ADD     A,#0x8
   \   000059   F582         MOV     DPL,A
   \   00005B   C8           XCH     A,R0
   \   00005C   3400         ADDC    A,#0x0
   \   00005E   F583         MOV     DPH,A
   \   000060   E0           MOVX    A,@DPTR
   \   000061   D2E7         SETB    0xE0 /* A   */.7
   \   000063   F0           MOVX    @DPTR,A
   1345            }
   1346          
   1347            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Leave_req, (Z_EXTADDR_LEN + 1) );
   \                     ??ZDP_MgmtLeaveReq_1:
   \   000064                ; Setup parameters for call to function fillAndSend
   \   000064   75..34       MOV     ?V2,#0x34
   \   000067   75..00       MOV     ?V3,#0x0
   \   00006A   78..         MOV     R0,#?V2
   \   00006C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006F   7909         MOV     R1,#0x9
   \   000071   EE           MOV     A,R6
   \   000072   FC           MOV     R4,A
   \   000073   EF           MOV     A,R7
   \   000074   FD           MOV     R5,A
   \   000075   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000077   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000079   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00007C   7402         MOV     A,#0x2
   \   00007E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000081   7F04         MOV     R7,#0x4
   \   000083   02....       LJMP    ?BANKED_LEAVE_XDATA
   1348          }
   1349          
   1350          /*********************************************************************
   1351           * @fn          ZDP_MgmtNwkUpdateReq
   1352           *
   1353           * @brief       This builds and send a Mgmt_NWK_Update_req message. This
   1354           *              function sends a unicast or broadcast message.
   1355           *
   1356           * @param       dstAddr - destination address of the message
   1357           * @param       ChannelMask - 32 bit address bit map
   1358           * @param       ScanDuration - length of time to spend scanning each channel
   1359           * @param       ScanCount - number of energy scans to be conducted
   1360           * @param       NwkUpdateId - NWk Update Id value
   1361           * @param       NwkManagerAddr - NWK address for device with Network Manager
   1362           *                               bit set in its Node Descriptor
   1363           *
   1364           * @return      afStatus_t
   1365           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1366          afStatus_t ZDP_MgmtNwkUpdateReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkUpdateReq:
   1367                                           uint32 ChannelMask,
   1368                                           uint8 ScanDuration,
   1369                                           uint8 ScanCount,
   1370                                           uint8 NwkUpdateId,
   1371                                           uint16 NwkManagerAddr )
   1372          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V1,R1
   \   00000B   8C..         MOV     ?V2,R4
   \   00000D   8D..         MOV     ?V3,R5
   1373            uint8 *pBuf = ZDP_TmpBuf;
   \   00000F   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000012   E0           MOVX    A,@DPTR
   \   000013   FA           MOV     R2,A
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   FB           MOV     R3,A
   1374            byte len = sizeof( uint32 ) + 1;  // ChannelMask + ScanDuration
   \   000017   75..05       MOV     ?V0,#0x5
   1375          
   1376            pBuf = osal_buffer_uint32( pBuf, ChannelMask );
   \   00001A                ; Setup parameters for call to function osal_buffer_uint32
   \   00001A   740E         MOV     A,#0xe
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000022   12....       LCALL   `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   000025   7404         MOV     A,#0x4
   \   000027   12....       LCALL   ?DEALLOC_XSTACK8
   \   00002A   8A..         MOV     ?V4,R2
   \   00002C   8B..         MOV     ?V5,R3
   \   00002E   AA..         MOV     R2,?V4
   \   000030   AB..         MOV     R3,?V5
   1377          
   1378            *pBuf++ = ScanDuration;
   \   000032   E5..         MOV     A,?V1
   \   000034   C0E0         PUSH    A
   \   000036   8A82         MOV     DPL,R2
   \   000038   8B83         MOV     DPH,R3
   \   00003A   D0E0         POP     A
   \   00003C   F0           MOVX    @DPTR,A
   \   00003D   8A82         MOV     DPL,R2
   \   00003F   8B83         MOV     DPH,R3
   \   000041   A3           INC     DPTR
   \   000042   AA82         MOV     R2,DPL
   \   000044   AB83         MOV     R3,DPH
   1379          
   1380            if ( ScanDuration <= 0x05 )
   \   000046   E5..         MOV     A,?V1
   \   000048   C3           CLR     C
   \   000049   9406         SUBB    A,#0x6
   \   00004B   5018         JNC     ??ZDP_MgmtNwkUpdateReq_0
   1381            {
   1382              // Request is to scan over channelMask
   1383              len += sizeof( uint8 );
   \   00004D   05..         INC     ?V0
   1384          
   1385              *pBuf++ = ScanCount;
   \   00004F   E5..         MOV     A,?V2
   \   000051   C0E0         PUSH    A
   \   000053   8A82         MOV     DPL,R2
   \   000055   8B83         MOV     DPH,R3
   \   000057   D0E0         POP     A
   \   000059   F0           MOVX    @DPTR,A
   \   00005A   8A82         MOV     DPL,R2
   \   00005C   8B83         MOV     DPH,R3
   \   00005E   A3           INC     DPTR
   \   00005F   AA82         MOV     R2,DPL
   \   000061   AB83         MOV     R3,DPH
   \   000063   8061         SJMP    ??ZDP_MgmtNwkUpdateReq_1
   1386            }
   1387            else if ( ( ScanDuration == 0xFE ) || ( ScanDuration == 0xFF ) )
   \                     ??ZDP_MgmtNwkUpdateReq_0:
   \   000065   74FE         MOV     A,#-0x2
   \   000067   65..         XRL     A,?V1
   \   000069   6006         JZ      ??ZDP_MgmtNwkUpdateReq_2
   \   00006B   74FF         MOV     A,#-0x1
   \   00006D   65..         XRL     A,?V1
   \   00006F   7055         JNZ     ??ZDP_MgmtNwkUpdateReq_1
   1388            {
   1389              // Request is to change Channel (0xFE) or apsChannelMask and NwkManagerAddr (0xFF)
   1390              len += sizeof( uint8 );
   \                     ??ZDP_MgmtNwkUpdateReq_2:
   \   000071   05..         INC     ?V0
   1391          
   1392              *pBuf++ = NwkUpdateId;
   \   000073   E5..         MOV     A,?V3
   \   000075   C0E0         PUSH    A
   \   000077   8A82         MOV     DPL,R2
   \   000079   8B83         MOV     DPH,R3
   \   00007B   D0E0         POP     A
   \   00007D   F0           MOVX    @DPTR,A
   \   00007E   8A82         MOV     DPL,R2
   \   000080   8B83         MOV     DPH,R3
   \   000082   A3           INC     DPTR
   \   000083   AA82         MOV     R2,DPL
   \   000085   AB83         MOV     R3,DPH
   1393          
   1394              if ( ScanDuration == 0xFF )
   \   000087   74FF         MOV     A,#-0x1
   \   000089   65..         XRL     A,?V1
   \   00008B   7039         JNZ     ??ZDP_MgmtNwkUpdateReq_1
   1395              {
   1396                len += sizeof( uint16 );
   \   00008D   7402         MOV     A,#0x2
   \   00008F   25..         ADD     A,?V0
   \   000091   F5..         MOV     ?V0,A
   \   000093   7412         MOV     A,#0x12
   \   000095   12....       LCALL   ?XSTACK_DISP0_8
   \   000098   E0           MOVX    A,@DPTR
   \   000099   F8           MOV     R0,A
   \   00009A   A3           INC     DPTR
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   F9           MOV     R1,A
   1397          
   1398                *pBuf++  = LO_UINT16( NwkManagerAddr );
   \   00009D   E8           MOV     A,R0
   \   00009E   C0E0         PUSH    A
   \   0000A0   8A82         MOV     DPL,R2
   \   0000A2   8B83         MOV     DPH,R3
   \   0000A4   D0E0         POP     A
   \   0000A6   F0           MOVX    @DPTR,A
   \   0000A7   8A82         MOV     DPL,R2
   \   0000A9   8B83         MOV     DPH,R3
   \   0000AB   A3           INC     DPTR
   \   0000AC   AA82         MOV     R2,DPL
   \   0000AE   AB83         MOV     R3,DPH
   1399                *pBuf++  = HI_UINT16( NwkManagerAddr );
   \   0000B0   E4           CLR     A
   \   0000B1   C9           XCH     A,R1
   \   0000B2   F8           MOV     R0,A
   \   0000B3   E8           MOV     A,R0
   \   0000B4   C0E0         PUSH    A
   \   0000B6   8A82         MOV     DPL,R2
   \   0000B8   8B83         MOV     DPH,R3
   \   0000BA   D0E0         POP     A
   \   0000BC   F0           MOVX    @DPTR,A
   \   0000BD   8A82         MOV     DPL,R2
   \   0000BF   8B83         MOV     DPH,R3
   \   0000C1   A3           INC     DPTR
   \   0000C2   AA82         MOV     R2,DPL
   \   0000C4   AB83         MOV     R3,DPH
   1400              }
   1401            }
   1402          
   1403            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_NWK_Update_req, len );
   \                     ??ZDP_MgmtNwkUpdateReq_1:
   \   0000C6                ; Setup parameters for call to function fillAndSend
   \   0000C6   75..38       MOV     ?V4,#0x38
   \   0000C9   75..00       MOV     ?V5,#0x0
   \   0000CC   78..         MOV     R0,#?V4
   \   0000CE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D1   A9..         MOV     R1,?V0
   \   0000D3   EE           MOV     A,R6
   \   0000D4   FC           MOV     R4,A
   \   0000D5   EF           MOV     A,R7
   \   0000D6   FD           MOV     R5,A
   \   0000D7   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   0000D9   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   0000DB   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   0000DE   7402         MOV     A,#0x2
   \   0000E0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E3   7F06         MOV     R7,#0x6
   \   0000E5   02....       LJMP    ?BANKED_LEAVE_XDATA
   1404          }
   1405          
   1406          
   1407          /*********************************************************************
   1408           * Network Management Responses
   1409           */
   1410          
   1411          /*********************************************************************
   1412           * @fn          ZDP_MgmtNwkDiscRsp
   1413           *
   1414           * @brief       This builds and send a Mgmt_NWK_Disc_rsp message. This
   1415           *              function sends a unicast message.
   1416           *
   1417           * @param       dstAddr - destination address of the message
   1418           * @param       Status - message status (ZDP_SUCCESS or other)
   1419           * @param       NetworkCount - Total number of networks found
   1420           * @param       StartIndex - Starting index within the reporting network
   1421           *                           list
   1422           * @param       NetworkListCount - number of network lists included
   1423           *                                 in this message
   1424           * @param       NetworkList - List of network descriptors
   1425           * @param       SecurityEnable - Security Options
   1426           *
   1427           * @return      afStatus_t
   1428           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1429          afStatus_t ZDP_MgmtNwkDiscRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkDiscRsp:
   1430                                      byte Status,
   1431                                      byte NetworkCount,
   1432                                      byte StartIndex,
   1433                                      byte NetworkListCount,
   1434                                      networkDesc_t *NetworkList,
   1435                                      byte SecurityEnable )
   1436          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   C0E0         PUSH    A
   \   00000D   85..82       MOV     DPL,?XSP + 0
   \   000010   85..83       MOV     DPH,?XSP + 1
   \   000013   D0E0         POP     A
   \   000015   F0           MOVX    @DPTR,A
   \   000016   8A..         MOV     ?V10,R2
   \   000018   8B..         MOV     ?V11,R3
   \   00001A   8C..         MOV     ?V8,R4
   \   00001C   8D..         MOV     ?V6,R5
   1437            uint8 *buf;
   1438            uint8 *pBuf;
   1439            byte len = 1+1+1+1;  // Status + NetworkCount + StartIndex + NetworkCountList.
   \   00001E   75..04       MOV     ?V4,#0x4
   \   000021   7416         MOV     A,#0x16
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F5..         MOV     ?V5,A
   1440            byte idx;
   1441          
   1442            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1443          
   1444            len += (NetworkListCount * ( ZDP_NETWORK_EXTENDED_DISCRIPTOR_SIZE - 2 ));
   \   000029   75F00C       MOV     B,#0xc
   \   00002C   E5..         MOV     A,?V5
   \   00002E   A4           MUL     AB
   \   00002F   25..         ADD     A,?V4
   \   000031   F5..         MOV     ?V4,A
   1445          
   1446            buf = osal_mem_alloc( len+1 );
   \   000033                ; Setup parameters for call to function osal_mem_alloc
   \   000033   A8..         MOV     R0,?V4
   \   000035   7900         MOV     R1,#0x0
   \   000037   E8           MOV     A,R0
   \   000038   2401         ADD     A,#0x1
   \   00003A   FA           MOV     R2,A
   \   00003B   E4           CLR     A
   \   00003C   39           ADDC    A,R1
   \   00003D   FB           MOV     R3,A
   \   00003E   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000041   8A..         MOV     ?V2,R2
   \   000043   8B..         MOV     ?V3,R3
   \   000045   85....       MOV     ?V0,?V2
   \   000048   85....       MOV     ?V1,?V3
   1447            if ( buf == NULL )
   \   00004B   E5..         MOV     A,?V0
   \   00004D   45..         ORL     A,?V1
   \   00004F   7005         JNZ     ??ZDP_MgmtNwkDiscRsp_0
   1448            {
   1449              return afStatus_MEM_FAIL;
   \   000051   7910         MOV     R1,#0x10
   \   000053   02....       LJMP    ??ZDP_MgmtNwkDiscRsp_1 & 0xFFFF
   1450            }
   1451          
   1452            pBuf = buf+1;
   \                     ??ZDP_MgmtNwkDiscRsp_0:
   \   000056   85..82       MOV     DPL,?V0
   \   000059   85..83       MOV     DPH,?V1
   \   00005C   A3           INC     DPTR
   \   00005D   AE82         MOV     R6,DPL
   \   00005F   AF83         MOV     R7,DPH
   1453          
   1454            *pBuf++ = Status;
   \   000061   E5..         MOV     A,?V8
   \   000063   C0E0         PUSH    A
   \   000065   8E82         MOV     DPL,R6
   \   000067   8F83         MOV     DPH,R7
   \   000069   D0E0         POP     A
   \   00006B   F0           MOVX    @DPTR,A
   \   00006C   8E82         MOV     DPL,R6
   \   00006E   8F83         MOV     DPH,R7
   \   000070   A3           INC     DPTR
   \   000071   AE82         MOV     R6,DPL
   \   000073   AF83         MOV     R7,DPH
   1455            *pBuf++ = NetworkCount;
   \   000075   E5..         MOV     A,?V6
   \   000077   C0E0         PUSH    A
   \   000079   8E82         MOV     DPL,R6
   \   00007B   8F83         MOV     DPH,R7
   \   00007D   D0E0         POP     A
   \   00007F   F0           MOVX    @DPTR,A
   \   000080   8E82         MOV     DPL,R6
   \   000082   8F83         MOV     DPH,R7
   \   000084   A3           INC     DPTR
   \   000085   AE82         MOV     R6,DPL
   \   000087   AF83         MOV     R7,DPH
   1456            *pBuf++ = StartIndex;
   \   000089   7415         MOV     A,#0x15
   \   00008B   12....       LCALL   ?XSTACK_DISP0_8
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   C0E0         PUSH    A
   \   000091   8E82         MOV     DPL,R6
   \   000093   8F83         MOV     DPH,R7
   \   000095   D0E0         POP     A
   \   000097   F0           MOVX    @DPTR,A
   \   000098   8E82         MOV     DPL,R6
   \   00009A   8F83         MOV     DPH,R7
   \   00009C   A3           INC     DPTR
   \   00009D   AE82         MOV     R6,DPL
   \   00009F   AF83         MOV     R7,DPH
   1457            *pBuf++ = NetworkListCount;
   \   0000A1   E5..         MOV     A,?V5
   \   0000A3   C0E0         PUSH    A
   \   0000A5   8E82         MOV     DPL,R6
   \   0000A7   8F83         MOV     DPH,R7
   \   0000A9   D0E0         POP     A
   \   0000AB   F0           MOVX    @DPTR,A
   \   0000AC   8E82         MOV     DPL,R6
   \   0000AE   8F83         MOV     DPH,R7
   \   0000B0   A3           INC     DPTR
   \   0000B1   AE82         MOV     R6,DPL
   \   0000B3   AF83         MOV     R7,DPH
   1458          
   1459            for ( idx = 0; idx < NetworkListCount; idx++ )
   \   0000B5   75..00       MOV     ?V7,#0x0
   \   0000B8   7417         MOV     A,#0x17
   \   0000BA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BD   E0           MOVX    A,@DPTR
   \   0000BE   F5..         MOV     ?V2,A
   \   0000C0   A3           INC     DPTR
   \   0000C1   E0           MOVX    A,@DPTR
   \   0000C2   F5..         MOV     ?V3,A
   \   0000C4   8024         SJMP    ??ZDP_MgmtNwkDiscRsp_2
   1460            {
   1461              osal_cpyExtAddr( pBuf, NetworkList->extendedPANID);
   1462              pBuf += Z_EXTADDR_LEN;
   1463          
   1464              *pBuf++  = NetworkList->logicalChannel;                // LogicalChannel
   1465              *pBuf    = NetworkList->stackProfile;                  // Stack profile
   1466              *pBuf++ |= (byte)(NetworkList->version << 4);          // ZigBee Version
   1467              *pBuf    = BEACON_ORDER_NO_BEACONS;                    // Beacon Order
   1468              *pBuf++ |= (uint8)(BEACON_ORDER_NO_BEACONS << 4);      // Superframe Order
   1469          
   1470              if ( NetworkList->chosenRouter != INVALID_NODE_ADDR )
   1471              {
   1472                *pBuf++ = TRUE;                         // Permit Joining
   1473              }
   1474              else
   1475              {
   1476                *pBuf++ = FALSE;
   \                     ??ZDP_MgmtNwkDiscRsp_3:
   \   0000C6   8E82         MOV     DPL,R6
   \   0000C8   8F83         MOV     DPH,R7
   \   0000CA   7400         MOV     A,#0x0
   \   0000CC   F0           MOVX    @DPTR,A
   \   0000CD   8E82         MOV     DPL,R6
   \   0000CF   8F83         MOV     DPH,R7
   \   0000D1   A3           INC     DPTR
   \   0000D2   AE82         MOV     R6,DPL
   \   0000D4   AF83         MOV     R7,DPH
   1477              }
   1478          
   1479              NetworkList = NetworkList->nextDesc;    // Move to next list entry
   \                     ??ZDP_MgmtNwkDiscRsp_4:
   \   0000D6   E5..         MOV     A,?V2
   \   0000D8   2414         ADD     A,#0x14
   \   0000DA   F582         MOV     DPL,A
   \   0000DC   E4           CLR     A
   \   0000DD   35..         ADDC    A,?V3
   \   0000DF   F583         MOV     DPH,A
   \   0000E1   E0           MOVX    A,@DPTR
   \   0000E2   F5..         MOV     ?V2,A
   \   0000E4   A3           INC     DPTR
   \   0000E5   E0           MOVX    A,@DPTR
   \   0000E6   F5..         MOV     ?V3,A
   \   0000E8   05..         INC     ?V7
   \                     ??ZDP_MgmtNwkDiscRsp_2:
   \   0000EA   E5..         MOV     A,?V7
   \   0000EC   C3           CLR     C
   \   0000ED   95..         SUBB    A,?V5
   \   0000EF   4003         JC      $+5
   \   0000F1   02....       LJMP    ??ZDP_MgmtNwkDiscRsp_5 & 0xFFFF
   \   0000F4                ; Setup parameters for call to function sAddrExtCpy
   \   0000F4   E5..         MOV     A,?V2
   \   0000F6   240B         ADD     A,#0xb
   \   0000F8   FC           MOV     R4,A
   \   0000F9   E4           CLR     A
   \   0000FA   35..         ADDC    A,?V3
   \   0000FC   FD           MOV     R5,A
   \   0000FD   EE           MOV     A,R6
   \   0000FE   FA           MOV     R2,A
   \   0000FF   EF           MOV     A,R7
   \   000100   FB           MOV     R3,A
   \   000101   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000104   EE           MOV     A,R6
   \   000105   2408         ADD     A,#0x8
   \   000107   FE           MOV     R6,A
   \   000108   5001         JNC     ??ZDP_MgmtNwkDiscRsp_6
   \   00010A   0F           INC     R7
   \                     ??ZDP_MgmtNwkDiscRsp_6:
   \   00010B   85..82       MOV     DPL,?V2
   \   00010E   85..83       MOV     DPH,?V3
   \   000111   A3           INC     DPTR
   \   000112   A3           INC     DPTR
   \   000113   E0           MOVX    A,@DPTR
   \   000114   C0E0         PUSH    A
   \   000116   8E82         MOV     DPL,R6
   \   000118   8F83         MOV     DPH,R7
   \   00011A   D0E0         POP     A
   \   00011C   F0           MOVX    @DPTR,A
   \   00011D   8E82         MOV     DPL,R6
   \   00011F   8F83         MOV     DPH,R7
   \   000121   A3           INC     DPTR
   \   000122   AE82         MOV     R6,DPL
   \   000124   AF83         MOV     R7,DPH
   \   000126   85..82       MOV     DPL,?V2
   \   000129   85..83       MOV     DPH,?V3
   \   00012C   A3           INC     DPTR
   \   00012D   A3           INC     DPTR
   \   00012E   A3           INC     DPTR
   \   00012F   A3           INC     DPTR
   \   000130   A3           INC     DPTR
   \   000131   A3           INC     DPTR
   \   000132   E0           MOVX    A,@DPTR
   \   000133   C0E0         PUSH    A
   \   000135   8E82         MOV     DPL,R6
   \   000137   8F83         MOV     DPH,R7
   \   000139   D0E0         POP     A
   \   00013B   F0           MOVX    @DPTR,A
   \   00013C   85..82       MOV     DPL,?V2
   \   00013F   85..83       MOV     DPH,?V3
   \   000142   A3           INC     DPTR
   \   000143   A3           INC     DPTR
   \   000144   A3           INC     DPTR
   \   000145   A3           INC     DPTR
   \   000146   A3           INC     DPTR
   \   000147   E0           MOVX    A,@DPTR
   \   000148   C4           SWAP    A
   \   000149   54F0         ANL     A,#0xf0
   \   00014B   F8           MOV     R0,A
   \   00014C   8E82         MOV     DPL,R6
   \   00014E   8F83         MOV     DPH,R7
   \   000150   E0           MOVX    A,@DPTR
   \   000151   48           ORL     A,R0
   \   000152   F0           MOVX    @DPTR,A
   \   000153   8E82         MOV     DPL,R6
   \   000155   8F83         MOV     DPH,R7
   \   000157   A3           INC     DPTR
   \   000158   AE82         MOV     R6,DPL
   \   00015A   AF83         MOV     R7,DPH
   \   00015C   8E82         MOV     DPL,R6
   \   00015E   8F83         MOV     DPH,R7
   \   000160   740F         MOV     A,#0xf
   \   000162   F0           MOVX    @DPTR,A
   \   000163   8E82         MOV     DPL,R6
   \   000165   8F83         MOV     DPH,R7
   \   000167   E0           MOVX    A,@DPTR
   \   000168   44F0         ORL     A,#0xf0
   \   00016A   F0           MOVX    @DPTR,A
   \   00016B   8E82         MOV     DPL,R6
   \   00016D   8F83         MOV     DPH,R7
   \   00016F   A3           INC     DPTR
   \   000170   AE82         MOV     R6,DPL
   \   000172   AF83         MOV     R7,DPH
   \   000174   85..82       MOV     DPL,?V2
   \   000177   85..83       MOV     DPH,?V3
   \   00017A   A3           INC     DPTR
   \   00017B   A3           INC     DPTR
   \   00017C   A3           INC     DPTR
   \   00017D   A3           INC     DPTR
   \   00017E   A3           INC     DPTR
   \   00017F   A3           INC     DPTR
   \   000180   A3           INC     DPTR
   \   000181   E0           MOVX    A,@DPTR
   \   000182   64FE         XRL     A,#0xfe
   \   000184   7004         JNZ     ??ZDP_MgmtNwkDiscRsp_7
   \   000186   A3           INC     DPTR
   \   000187   E0           MOVX    A,@DPTR
   \   000188   64FF         XRL     A,#0xff
   \                     ??ZDP_MgmtNwkDiscRsp_7:
   \   00018A   7003         JNZ     $+5
   \   00018C   02....       LJMP    ??ZDP_MgmtNwkDiscRsp_3 & 0xFFFF
   \   00018F   8E82         MOV     DPL,R6
   \   000191   8F83         MOV     DPH,R7
   \   000193   7401         MOV     A,#0x1
   \   000195   F0           MOVX    @DPTR,A
   \   000196   8E82         MOV     DPL,R6
   \   000198   8F83         MOV     DPH,R7
   \   00019A   A3           INC     DPTR
   \   00019B   AE82         MOV     R6,DPL
   \   00019D   AF83         MOV     R7,DPH
   \   00019F   02....       LJMP    ??ZDP_MgmtNwkDiscRsp_4 & 0xFFFF
   1480            }
   1481          
   1482            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_NWK_Disc_rsp, len, buf );
   \                     ??ZDP_MgmtNwkDiscRsp_5:
   \   0001A2   85..82       MOV     DPL,?V0
   \   0001A5   85..83       MOV     DPH,?V1
   \   0001A8   A3           INC     DPTR
   \   0001A9   A882         MOV     R0,DPL
   \   0001AB   A983         MOV     R1,DPH
   \   0001AD   90....       MOV     DPTR,#ZDP_TmpBuf
   \   0001B0   E8           MOV     A,R0
   \   0001B1   F0           MOVX    @DPTR,A
   \   0001B2   A3           INC     DPTR
   \   0001B3   E9           MOV     A,R1
   \   0001B4   F0           MOVX    @DPTR,A
   \   0001B5                ; Setup parameters for call to function fillAndSend
   \   0001B5   75..30       MOV     ?V2,#0x30
   \   0001B8   75..80       MOV     ?V3,#-0x80
   \   0001BB   78..         MOV     R0,#?V2
   \   0001BD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001C0   A9..         MOV     R1,?V4
   \   0001C2   AC..         MOV     R4,?V10
   \   0001C4   AD..         MOV     R5,?V11
   \   0001C6   7402         MOV     A,#0x2
   \   0001C8   12....       LCALL   ?XSTACK_DISP101_8
   \   0001CB   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   0001CE   7402         MOV     A,#0x2
   \   0001D0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001D3   E9           MOV     A,R1
   \   0001D4   FE           MOV     R6,A
   \   0001D5                ; Setup parameters for call to function osal_mem_free
   \   0001D5   AA..         MOV     R2,?V0
   \   0001D7   AB..         MOV     R3,?V1
   \   0001D9   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0001DC   90....       MOV     DPTR,#ZDP_TmpBuf
   \   0001DF   74..         MOV     A,#(ZDP_Buf + 1) & 0xff
   \   0001E1   F0           MOVX    @DPTR,A
   \   0001E2   A3           INC     DPTR
   \   0001E3   74..         MOV     A,#((ZDP_Buf + 1) >> 8) & 0xff
   \   0001E5   F0           MOVX    @DPTR,A
   \   0001E6   EE           MOV     A,R6
   \   0001E7   F9           MOV     R1,A
   \                     ??ZDP_MgmtNwkDiscRsp_1:
   \   0001E8   7401         MOV     A,#0x1
   \   0001EA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001ED   7F0C         MOV     R7,#0xc
   \   0001EF   02....       LJMP    ?BANKED_LEAVE_XDATA
   1483          }
   1484          
   1485          /*********************************************************************
   1486           * @fn          ZDP_MgmtLqiRsp
   1487           *
   1488           * @brief       This builds and send a Mgmt_Lqi_rsp message. This
   1489           *              function sends a unicast message.
   1490           *
   1491           * @param       dstAddr - destination address of the message
   1492           * @param       Status - message status (ZDP_SUCCESS or other)
   1493           * @param       NeighborLqiEntries - Total number of entries found
   1494           * @param       StartIndex - Starting index within the reporting list
   1495           * @param       NeighborLqiCount - number of lists included
   1496           *                                 in this message
   1497           * @param       NeighborLqiList - List of NeighborLqiItems.  This list
   1498           *                is the list to be sent, not the entire list
   1499           * @param       SecurityEnable - true if secure
   1500           *
   1501           * @return      ZStatus_t
   1502           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1503          ZStatus_t ZDP_MgmtLqiRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtLqiRsp:
   1504                                    byte Status,
   1505                                    byte NeighborLqiEntries,
   1506                                    byte StartIndex,
   1507                                    byte NeighborLqiCount,
   1508                                    ZDP_MgmtLqiItem_t* NeighborList,
   1509                                    byte SecurityEnable )
   1510          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000   74EB         MOV     A,#-0x15
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 21
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   C0E0         PUSH    A
   \   00000D   85..82       MOV     DPL,?XSP + 0
   \   000010   85..83       MOV     DPH,?XSP + 1
   \   000013   D0E0         POP     A
   \   000015   F0           MOVX    @DPTR,A
   \   000016   8A..         MOV     ?V10,R2
   \   000018   8B..         MOV     ?V11,R3
   \   00001A   8C..         MOV     ?V6,R4
   \   00001C   8D..         MOV     ?V12,R5
   1511            ZDP_MgmtLqiItem_t* list = NeighborList;
   \   00001E   7418         MOV     A,#0x18
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F5..         MOV     ?V0,A
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F5..         MOV     ?V1,A
   1512            uint8 *buf, *pBuf;
   1513            byte len, x;
   1514          
   1515            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1516          
   1517            if ( ZSuccess != Status )
   \   00002A   E5..         MOV     A,?V6
   \   00002C   6033         JZ      ??ZDP_MgmtLqiRsp_0
   1518            {
   1519              ZDP_TmpBuf[0] = Status;
   \   00002E   E5..         MOV     A,?V6
   \   000030   C0E0         PUSH    A
   \   000032   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000035   E0           MOVX    A,@DPTR
   \   000036   F8           MOV     R0,A
   \   000037   A3           INC     DPTR
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F583         MOV     DPH,A
   \   00003B   8882         MOV     DPL,R0
   \   00003D   D0E0         POP     A
   \   00003F   F0           MOVX    @DPTR,A
   1520              return fillAndSend( &TransSeq, dstAddr, Mgmt_Lqi_rsp, 1 );
   \   000040                ; Setup parameters for call to function fillAndSend
   \   000040   75..31       MOV     ?V0,#0x31
   \   000043   75..80       MOV     ?V1,#-0x80
   \   000046   78..         MOV     R0,#?V0
   \   000048   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004B   7901         MOV     R1,#0x1
   \   00004D   AC..         MOV     R4,?V10
   \   00004F   AD..         MOV     R5,?V11
   \   000051   7402         MOV     A,#0x2
   \   000053   12....       LCALL   ?XSTACK_DISP101_8
   \   000056   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000059   7402         MOV     A,#0x2
   \   00005B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005E   02....       LJMP    ??ZDP_MgmtLqiRsp_1 & 0xFFFF
   1521            }
   \                     ??ZDP_MgmtLqiRsp_0:
   \   000061   7417         MOV     A,#0x17
   \   000063   12....       LCALL   ?XSTACK_DISP0_8
   \   000066   E0           MOVX    A,@DPTR
   \   000067   F5..         MOV     ?V5,A
   1522          
   1523            // (Status + NeighborLqiEntries + StartIndex + NeighborLqiCount) +
   1524            //  neighbor LQI data.
   1525            len = (1 + 1 + 1 + 1) + (NeighborLqiCount * ZDP_MGMTLQI_EXTENDED_SIZE);
   \   000069   75F016       MOV     B,#0x16
   \   00006C   E5..         MOV     A,?V5
   \   00006E   A4           MUL     AB
   \   00006F   2404         ADD     A,#0x4
   \   000071   F5..         MOV     ?V7,A
   1526          
   1527            buf = osal_mem_alloc( len+1 );
   \   000073                ; Setup parameters for call to function osal_mem_alloc
   \   000073   A8..         MOV     R0,?V7
   \   000075   7900         MOV     R1,#0x0
   \   000077   E8           MOV     A,R0
   \   000078   2401         ADD     A,#0x1
   \   00007A   FA           MOV     R2,A
   \   00007B   E4           CLR     A
   \   00007C   39           ADDC    A,R1
   \   00007D   FB           MOV     R3,A
   \   00007E   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000081   8A..         MOV     ?V8,R2
   \   000083   8B..         MOV     ?V9,R3
   \   000085   85....       MOV     ?V2,?V8
   \   000088   85....       MOV     ?V3,?V9
   1528            if ( buf == NULL )
   \   00008B   E5..         MOV     A,?V2
   \   00008D   45..         ORL     A,?V3
   \   00008F   7005         JNZ     ??ZDP_MgmtLqiRsp_2
   1529            {
   1530              return afStatus_MEM_FAIL;
   \   000091   7910         MOV     R1,#0x10
   \   000093   02....       LJMP    ??ZDP_MgmtLqiRsp_1 & 0xFFFF
   1531            }
   1532          
   1533            pBuf = buf+1;
   \                     ??ZDP_MgmtLqiRsp_2:
   \   000096   85..82       MOV     DPL,?V2
   \   000099   85..83       MOV     DPH,?V3
   \   00009C   A3           INC     DPTR
   \   00009D   AE82         MOV     R6,DPL
   \   00009F   AF83         MOV     R7,DPH
   1534          
   1535            *pBuf++ = Status;
   \   0000A1   E5..         MOV     A,?V6
   \   0000A3   C0E0         PUSH    A
   \   0000A5   8E82         MOV     DPL,R6
   \   0000A7   8F83         MOV     DPH,R7
   \   0000A9   D0E0         POP     A
   \   0000AB   F0           MOVX    @DPTR,A
   \   0000AC   8E82         MOV     DPL,R6
   \   0000AE   8F83         MOV     DPH,R7
   \   0000B0   A3           INC     DPTR
   \   0000B1   AE82         MOV     R6,DPL
   \   0000B3   AF83         MOV     R7,DPH
   1536            *pBuf++ = NeighborLqiEntries;
   \   0000B5   E5..         MOV     A,?V12
   \   0000B7   C0E0         PUSH    A
   \   0000B9   8E82         MOV     DPL,R6
   \   0000BB   8F83         MOV     DPH,R7
   \   0000BD   D0E0         POP     A
   \   0000BF   F0           MOVX    @DPTR,A
   \   0000C0   8E82         MOV     DPL,R6
   \   0000C2   8F83         MOV     DPH,R7
   \   0000C4   A3           INC     DPTR
   \   0000C5   AE82         MOV     R6,DPL
   \   0000C7   AF83         MOV     R7,DPH
   1537            *pBuf++ = StartIndex;
   \   0000C9   7416         MOV     A,#0x16
   \   0000CB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CE   E0           MOVX    A,@DPTR
   \   0000CF   C0E0         PUSH    A
   \   0000D1   8E82         MOV     DPL,R6
   \   0000D3   8F83         MOV     DPH,R7
   \   0000D5   D0E0         POP     A
   \   0000D7   F0           MOVX    @DPTR,A
   \   0000D8   8E82         MOV     DPL,R6
   \   0000DA   8F83         MOV     DPH,R7
   \   0000DC   A3           INC     DPTR
   \   0000DD   AE82         MOV     R6,DPL
   \   0000DF   AF83         MOV     R7,DPH
   1538            *pBuf++ = NeighborLqiCount;
   \   0000E1   E5..         MOV     A,?V5
   \   0000E3   C0E0         PUSH    A
   \   0000E5   8E82         MOV     DPL,R6
   \   0000E7   8F83         MOV     DPH,R7
   \   0000E9   D0E0         POP     A
   \   0000EB   F0           MOVX    @DPTR,A
   \   0000EC   8E82         MOV     DPL,R6
   \   0000EE   8F83         MOV     DPH,R7
   \   0000F0   A3           INC     DPTR
   \   0000F1   AE82         MOV     R6,DPL
   \   0000F3   AF83         MOV     R7,DPH
   1539          
   1540            for ( x = 0; x < NeighborLqiCount; x++ )
   \   0000F5   75..00       MOV     ?V4,#0x0
   \   0000F8   02....       LJMP    ??ZDP_MgmtLqiRsp_3 & 0xFFFF
   1541            {
   1542              osal_cpyExtAddr( pBuf, list->extPanID);         // Extended PanID
   \                     ??ZDP_MgmtLqiRsp_4:
   \   0000FB                ; Setup parameters for call to function sAddrExtCpy
   \   0000FB   E5..         MOV     A,?V0
   \   0000FD   2402         ADD     A,#0x2
   \   0000FF   FC           MOV     R4,A
   \   000100   E4           CLR     A
   \   000101   35..         ADDC    A,?V1
   \   000103   FD           MOV     R5,A
   \   000104   EE           MOV     A,R6
   \   000105   FA           MOV     R2,A
   \   000106   EF           MOV     A,R7
   \   000107   FB           MOV     R3,A
   \   000108   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1543              pBuf += Z_EXTADDR_LEN;
   \   00010B   EE           MOV     A,R6
   \   00010C   2408         ADD     A,#0x8
   \   00010E   FE           MOV     R6,A
   \   00010F   5001         JNC     ??ZDP_MgmtLqiRsp_5
   \   000111   0F           INC     R7
   1544          
   1545              // EXTADDR
   1546              pBuf = osal_cpyExtAddr( pBuf, list->extAddr );
   \                     ??ZDP_MgmtLqiRsp_5:
   \   000112                ; Setup parameters for call to function sAddrExtCpy
   \   000112   E5..         MOV     A,?V0
   \   000114   240A         ADD     A,#0xa
   \   000116   FC           MOV     R4,A
   \   000117   E4           CLR     A
   \   000118   35..         ADDC    A,?V1
   \   00011A   FD           MOV     R5,A
   \   00011B   EE           MOV     A,R6
   \   00011C   FA           MOV     R2,A
   \   00011D   EF           MOV     A,R7
   \   00011E   FB           MOV     R3,A
   \   00011F   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000122   8A..         MOV     ?V8,R2
   \   000124   8B..         MOV     ?V9,R3
   \   000126   AE..         MOV     R6,?V8
   \   000128   AF..         MOV     R7,?V9
   1547          
   1548              // NWKADDR
   1549              *pBuf++ = LO_UINT16( list->nwkAddr );
   \   00012A   E5..         MOV     A,?V0
   \   00012C   2412         ADD     A,#0x12
   \   00012E   F582         MOV     DPL,A
   \   000130   E4           CLR     A
   \   000131   35..         ADDC    A,?V1
   \   000133   F583         MOV     DPH,A
   \   000135   E0           MOVX    A,@DPTR
   \   000136   F8           MOV     R0,A
   \   000137   A3           INC     DPTR
   \   000138   E0           MOVX    A,@DPTR
   \   000139   F9           MOV     R1,A
   \   00013A   E8           MOV     A,R0
   \   00013B   C0E0         PUSH    A
   \   00013D   8E82         MOV     DPL,R6
   \   00013F   8F83         MOV     DPH,R7
   \   000141   D0E0         POP     A
   \   000143   F0           MOVX    @DPTR,A
   \   000144   8E82         MOV     DPL,R6
   \   000146   8F83         MOV     DPH,R7
   \   000148   A3           INC     DPTR
   \   000149   AE82         MOV     R6,DPL
   \   00014B   AF83         MOV     R7,DPH
   1550              *pBuf++ = HI_UINT16( list->nwkAddr );
   \   00014D   E5..         MOV     A,?V0
   \   00014F   2412         ADD     A,#0x12
   \   000151   F582         MOV     DPL,A
   \   000153   E4           CLR     A
   \   000154   35..         ADDC    A,?V1
   \   000156   F583         MOV     DPH,A
   \   000158   E0           MOVX    A,@DPTR
   \   000159   F8           MOV     R0,A
   \   00015A   A3           INC     DPTR
   \   00015B   E0           MOVX    A,@DPTR
   \   00015C   F9           MOV     R1,A
   \   00015D   E4           CLR     A
   \   00015E   C9           XCH     A,R1
   \   00015F   F8           MOV     R0,A
   \   000160   E8           MOV     A,R0
   \   000161   C0E0         PUSH    A
   \   000163   8E82         MOV     DPL,R6
   \   000165   8F83         MOV     DPH,R7
   \   000167   D0E0         POP     A
   \   000169   F0           MOVX    @DPTR,A
   \   00016A   8E82         MOV     DPL,R6
   \   00016C   8F83         MOV     DPH,R7
   \   00016E   A3           INC     DPTR
   \   00016F   AE82         MOV     R6,DPL
   \   000171   AF83         MOV     R7,DPH
   1551          
   1552              // DEVICETYPE
   1553              *pBuf = list->devType;
   \   000173   E5..         MOV     A,?V0
   \   000175   2414         ADD     A,#0x14
   \   000177   F582         MOV     DPL,A
   \   000179   E4           CLR     A
   \   00017A   35..         ADDC    A,?V1
   \   00017C   F583         MOV     DPH,A
   \   00017E   E0           MOVX    A,@DPTR
   \   00017F   C0E0         PUSH    A
   \   000181   8E82         MOV     DPL,R6
   \   000183   8F83         MOV     DPH,R7
   \   000185   D0E0         POP     A
   \   000187   F0           MOVX    @DPTR,A
   1554          
   1555              // RXONIDLE
   1556              *pBuf |= (uint8)(list->rxOnIdle << 2);
   \   000188   E5..         MOV     A,?V0
   \   00018A   2415         ADD     A,#0x15
   \   00018C   F582         MOV     DPL,A
   \   00018E   E4           CLR     A
   \   00018F   35..         ADDC    A,?V1
   \   000191   F583         MOV     DPH,A
   \   000193   E0           MOVX    A,@DPTR
   \   000194   33           RLC     A
   \   000195   33           RLC     A
   \   000196   54FC         ANL     A,#0xfc
   \   000198   F8           MOV     R0,A
   \   000199   8E82         MOV     DPL,R6
   \   00019B   8F83         MOV     DPH,R7
   \   00019D   E0           MOVX    A,@DPTR
   \   00019E   48           ORL     A,R0
   \   00019F   F0           MOVX    @DPTR,A
   1557          
   1558              // RELATIONSHIP
   1559              *pBuf++ |= (uint8)(list->relation << 4);
   \   0001A0   E5..         MOV     A,?V0
   \   0001A2   2416         ADD     A,#0x16
   \   0001A4   F582         MOV     DPL,A
   \   0001A6   E4           CLR     A
   \   0001A7   35..         ADDC    A,?V1
   \   0001A9   F583         MOV     DPH,A
   \   0001AB   E0           MOVX    A,@DPTR
   \   0001AC   C4           SWAP    A
   \   0001AD   54F0         ANL     A,#0xf0
   \   0001AF   F8           MOV     R0,A
   \   0001B0   8E82         MOV     DPL,R6
   \   0001B2   8F83         MOV     DPH,R7
   \   0001B4   E0           MOVX    A,@DPTR
   \   0001B5   48           ORL     A,R0
   \   0001B6   F0           MOVX    @DPTR,A
   \   0001B7   8E82         MOV     DPL,R6
   \   0001B9   8F83         MOV     DPH,R7
   \   0001BB   A3           INC     DPTR
   \   0001BC   AE82         MOV     R6,DPL
   \   0001BE   AF83         MOV     R7,DPH
   1560          
   1561              // PERMITJOINING
   1562              *pBuf++ = (uint8)(list->permit);
   \   0001C0   E5..         MOV     A,?V0
   \   0001C2   2417         ADD     A,#0x17
   \   0001C4   F582         MOV     DPL,A
   \   0001C6   E4           CLR     A
   \   0001C7   35..         ADDC    A,?V1
   \   0001C9   F583         MOV     DPH,A
   \   0001CB   E0           MOVX    A,@DPTR
   \   0001CC   C0E0         PUSH    A
   \   0001CE   8E82         MOV     DPL,R6
   \   0001D0   8F83         MOV     DPH,R7
   \   0001D2   D0E0         POP     A
   \   0001D4   F0           MOVX    @DPTR,A
   \   0001D5   8E82         MOV     DPL,R6
   \   0001D7   8F83         MOV     DPH,R7
   \   0001D9   A3           INC     DPTR
   \   0001DA   AE82         MOV     R6,DPL
   \   0001DC   AF83         MOV     R7,DPH
   1563          
   1564              // DEPTH
   1565              *pBuf++ = list->depth;
   \   0001DE   E5..         MOV     A,?V0
   \   0001E0   2418         ADD     A,#0x18
   \   0001E2   F582         MOV     DPL,A
   \   0001E4   E4           CLR     A
   \   0001E5   35..         ADDC    A,?V1
   \   0001E7   F583         MOV     DPH,A
   \   0001E9   E0           MOVX    A,@DPTR
   \   0001EA   C0E0         PUSH    A
   \   0001EC   8E82         MOV     DPL,R6
   \   0001EE   8F83         MOV     DPH,R7
   \   0001F0   D0E0         POP     A
   \   0001F2   F0           MOVX    @DPTR,A
   \   0001F3   8E82         MOV     DPL,R6
   \   0001F5   8F83         MOV     DPH,R7
   \   0001F7   A3           INC     DPTR
   \   0001F8   AE82         MOV     R6,DPL
   \   0001FA   AF83         MOV     R7,DPH
   1566          
   1567              // LQI
   1568              *pBuf++ = list->lqi;
   \   0001FC   E5..         MOV     A,?V0
   \   0001FE   2419         ADD     A,#0x19
   \   000200   F582         MOV     DPL,A
   \   000202   E4           CLR     A
   \   000203   35..         ADDC    A,?V1
   \   000205   F583         MOV     DPH,A
   \   000207   E0           MOVX    A,@DPTR
   \   000208   C0E0         PUSH    A
   \   00020A   8E82         MOV     DPL,R6
   \   00020C   8F83         MOV     DPH,R7
   \   00020E   D0E0         POP     A
   \   000210   F0           MOVX    @DPTR,A
   \   000211   8E82         MOV     DPL,R6
   \   000213   8F83         MOV     DPH,R7
   \   000215   A3           INC     DPTR
   \   000216   AE82         MOV     R6,DPL
   \   000218   AF83         MOV     R7,DPH
   1569          
   1570              list++; // next list entry
   \   00021A   E5..         MOV     A,?V0
   \   00021C   241A         ADD     A,#0x1a
   \   00021E   F5..         MOV     ?V0,A
   \   000220   5002         JNC     ??ZDP_MgmtLqiRsp_6
   \   000222   05..         INC     ?V1
   1571            }
   \                     ??ZDP_MgmtLqiRsp_6:
   \   000224   05..         INC     ?V4
   \                     ??ZDP_MgmtLqiRsp_3:
   \   000226   E5..         MOV     A,?V4
   \   000228   C3           CLR     C
   \   000229   95..         SUBB    A,?V5
   \   00022B   5003         JNC     $+5
   \   00022D   02....       LJMP    ??ZDP_MgmtLqiRsp_4 & 0xFFFF
   1572          
   1573            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Lqi_rsp, len, buf );
   \   000230   85..82       MOV     DPL,?V2
   \   000233   85..83       MOV     DPH,?V3
   \   000236   A3           INC     DPTR
   \   000237   A882         MOV     R0,DPL
   \   000239   A983         MOV     R1,DPH
   \   00023B   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00023E   E8           MOV     A,R0
   \   00023F   F0           MOVX    @DPTR,A
   \   000240   A3           INC     DPTR
   \   000241   E9           MOV     A,R1
   \   000242   F0           MOVX    @DPTR,A
   \   000243                ; Setup parameters for call to function fillAndSend
   \   000243   75..31       MOV     ?V0,#0x31
   \   000246   75..80       MOV     ?V1,#-0x80
   \   000249   78..         MOV     R0,#?V0
   \   00024B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00024E   A9..         MOV     R1,?V7
   \   000250   AC..         MOV     R4,?V10
   \   000252   AD..         MOV     R5,?V11
   \   000254   7402         MOV     A,#0x2
   \   000256   12....       LCALL   ?XSTACK_DISP101_8
   \   000259   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00025C   7402         MOV     A,#0x2
   \   00025E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000261   E9           MOV     A,R1
   \   000262   FE           MOV     R6,A
   \   000263                ; Setup parameters for call to function osal_mem_free
   \   000263   AA..         MOV     R2,?V2
   \   000265   AB..         MOV     R3,?V3
   \   000267   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00026A   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00026D   74..         MOV     A,#(ZDP_Buf + 1) & 0xff
   \   00026F   F0           MOVX    @DPTR,A
   \   000270   A3           INC     DPTR
   \   000271   74..         MOV     A,#((ZDP_Buf + 1) >> 8) & 0xff
   \   000273   F0           MOVX    @DPTR,A
   \   000274   EE           MOV     A,R6
   \   000275   F9           MOV     R1,A
   \                     ??ZDP_MgmtLqiRsp_1:
   \   000276   7401         MOV     A,#0x1
   \   000278   12....       LCALL   ?DEALLOC_XSTACK8
   \   00027B   7F0D         MOV     R7,#0xd
   \   00027D   02....       LJMP    ?BANKED_LEAVE_XDATA
   1574          }
   1575          
   1576          /*********************************************************************
   1577           * @fn          ZDP_MgmtRtgRsp
   1578           *
   1579           * @brief       This builds and send a Mgmt_Rtg_rsp message. This
   1580           *              function sends a unicast message.
   1581           *
   1582           * @param       dstAddr - destination address of the message
   1583           * @param       Status - message status (ZDP_SUCCESS or other)
   1584           * @param       RoutingTableEntries - Total number of entries
   1585           * @param       StartIndex - Starting index within the reporting list
   1586           * @param       RoutingTableListCount - number of entries included
   1587           *                                      in this message
   1588           * @param       RoutingTableList - List of Routing Table entries
   1589           * @param       SecurityEnable - true to enable security for this message
   1590           *
   1591           * @return      ZStatus_t
   1592           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1593          ZStatus_t ZDP_MgmtRtgRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtRtgRsp:
   1594                                      byte Status,
   1595                                      byte RoutingTableEntries,
   1596                                      byte StartIndex,
   1597                                      byte RoutingListCount,
   1598                                      rtgItem_t *RoutingTableList,
   1599                                      byte SecurityEnable )
   1600          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   C0E0         PUSH    A
   \   00000D   85..82       MOV     DPL,?XSP + 0
   \   000010   85..83       MOV     DPH,?XSP + 1
   \   000013   D0E0         POP     A
   \   000015   F0           MOVX    @DPTR,A
   \   000016   8A..         MOV     ?V2,R2
   \   000018   8B..         MOV     ?V3,R3
   \   00001A   8C..         MOV     ?V1,R4
   \   00001C   8D..         MOV     ?V0,R5
   1601            uint8 *buf;
   1602            uint8 *pBuf;
   1603            // Status + RoutingTableEntries + StartIndex + RoutingListCount.
   1604            byte len = 1 + 1 + 1 + 1;
   \   00001E   75..04       MOV     ?V5,#0x4
   \   000021   7412         MOV     A,#0x12
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F5..         MOV     ?V4,A
   1605            byte x;
   1606          
   1607            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1608          
   1609            // Add an array for Routing List data
   1610            len += (RoutingListCount * ZDP_ROUTINGENTRY_SIZE);
   \   000029   75F005       MOV     B,#0x5
   \   00002C   E5..         MOV     A,?V4
   \   00002E   A4           MUL     AB
   \   00002F   25..         ADD     A,?V5
   \   000031   F5..         MOV     ?V5,A
   1611          
   1612            buf = osal_mem_alloc( (short)(len+1) );
   \   000033                ; Setup parameters for call to function osal_mem_alloc
   \   000033   A8..         MOV     R0,?V5
   \   000035   7900         MOV     R1,#0x0
   \   000037   E8           MOV     A,R0
   \   000038   2401         ADD     A,#0x1
   \   00003A   FA           MOV     R2,A
   \   00003B   E4           CLR     A
   \   00003C   39           ADDC    A,R1
   \   00003D   FB           MOV     R3,A
   \   00003E   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000041   8A..         MOV     ?V6,R2
   \   000043   8B..         MOV     ?V7,R3
   \   000045   AE..         MOV     R6,?V6
   \   000047   AF..         MOV     R7,?V7
   1613            if ( buf == NULL )
   \   000049   EE           MOV     A,R6
   \   00004A   4F           ORL     A,R7
   \   00004B   7005         JNZ     ??ZDP_MgmtRtgRsp_0
   1614            {
   1615              return afStatus_MEM_FAIL;
   \   00004D   7910         MOV     R1,#0x10
   \   00004F   02....       LJMP    ??ZDP_MgmtRtgRsp_1 & 0xFFFF
   1616            }
   1617          
   1618            pBuf = buf+1;
   \                     ??ZDP_MgmtRtgRsp_0:
   \   000052   8E82         MOV     DPL,R6
   \   000054   8F83         MOV     DPH,R7
   \   000056   A3           INC     DPTR
   \   000057   A882         MOV     R0,DPL
   \   000059   A983         MOV     R1,DPH
   1619          
   1620            *pBuf++ = Status;
   \   00005B   E5..         MOV     A,?V1
   \   00005D   C0E0         PUSH    A
   \   00005F   8882         MOV     DPL,R0
   \   000061   8983         MOV     DPH,R1
   \   000063   D0E0         POP     A
   \   000065   F0           MOVX    @DPTR,A
   \   000066   8882         MOV     DPL,R0
   \   000068   8983         MOV     DPH,R1
   \   00006A   A3           INC     DPTR
   \   00006B   A882         MOV     R0,DPL
   \   00006D   A983         MOV     R1,DPH
   1621            *pBuf++ = RoutingTableEntries;
   \   00006F   E5..         MOV     A,?V0
   \   000071   C0E0         PUSH    A
   \   000073   8882         MOV     DPL,R0
   \   000075   8983         MOV     DPH,R1
   \   000077   D0E0         POP     A
   \   000079   F0           MOVX    @DPTR,A
   \   00007A   8882         MOV     DPL,R0
   \   00007C   8983         MOV     DPH,R1
   \   00007E   A3           INC     DPTR
   \   00007F   A882         MOV     R0,DPL
   \   000081   A983         MOV     R1,DPH
   1622            *pBuf++ = StartIndex;
   \   000083   7411         MOV     A,#0x11
   \   000085   12....       LCALL   ?XSTACK_DISP0_8
   \   000088   E0           MOVX    A,@DPTR
   \   000089   C0E0         PUSH    A
   \   00008B   8882         MOV     DPL,R0
   \   00008D   8983         MOV     DPH,R1
   \   00008F   D0E0         POP     A
   \   000091   F0           MOVX    @DPTR,A
   \   000092   8882         MOV     DPL,R0
   \   000094   8983         MOV     DPH,R1
   \   000096   A3           INC     DPTR
   \   000097   A882         MOV     R0,DPL
   \   000099   A983         MOV     R1,DPH
   1623            *pBuf++ = RoutingListCount;
   \   00009B   E5..         MOV     A,?V4
   \   00009D   C0E0         PUSH    A
   \   00009F   8882         MOV     DPL,R0
   \   0000A1   8983         MOV     DPH,R1
   \   0000A3   D0E0         POP     A
   \   0000A5   F0           MOVX    @DPTR,A
   \   0000A6   8882         MOV     DPL,R0
   \   0000A8   8983         MOV     DPH,R1
   \   0000AA   A3           INC     DPTR
   \   0000AB   A882         MOV     R0,DPL
   \   0000AD   A983         MOV     R1,DPH
   1624          
   1625            for ( x = 0; x < RoutingListCount; x++ )
   \   0000AF   7C00         MOV     R4,#0x0
   \   0000B1   7413         MOV     A,#0x13
   \   0000B3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B6   E0           MOVX    A,@DPTR
   \   0000B7   FA           MOV     R2,A
   \   0000B8   A3           INC     DPTR
   \   0000B9   E0           MOVX    A,@DPTR
   \   0000BA   FB           MOV     R3,A
   \   0000BB   02....       LJMP    ??ZDP_MgmtRtgRsp_2 & 0xFFFF
   1626            {
   1627              *pBuf++ = LO_UINT16( RoutingTableList->dstAddress );  // Destination Address
   \                     ??ZDP_MgmtRtgRsp_3:
   \   0000BE   8A82         MOV     DPL,R2
   \   0000C0   8B83         MOV     DPH,R3
   \   0000C2   E0           MOVX    A,@DPTR
   \   0000C3   F5..         MOV     ?V6,A
   \   0000C5   A3           INC     DPTR
   \   0000C6   E0           MOVX    A,@DPTR
   \   0000C7   F5..         MOV     ?V7,A
   \   0000C9   E5..         MOV     A,?V6
   \   0000CB   C0E0         PUSH    A
   \   0000CD   8882         MOV     DPL,R0
   \   0000CF   8983         MOV     DPH,R1
   \   0000D1   D0E0         POP     A
   \   0000D3   F0           MOVX    @DPTR,A
   \   0000D4   8882         MOV     DPL,R0
   \   0000D6   8983         MOV     DPH,R1
   \   0000D8   A3           INC     DPTR
   \   0000D9   A882         MOV     R0,DPL
   \   0000DB   A983         MOV     R1,DPH
   1628              *pBuf++ = HI_UINT16( RoutingTableList->dstAddress );
   \   0000DD   8A82         MOV     DPL,R2
   \   0000DF   8B83         MOV     DPH,R3
   \   0000E1   E0           MOVX    A,@DPTR
   \   0000E2   F5..         MOV     ?V6,A
   \   0000E4   A3           INC     DPTR
   \   0000E5   E0           MOVX    A,@DPTR
   \   0000E6   F5..         MOV     ?V7,A
   \   0000E8   E4           CLR     A
   \   0000E9   C5..         XCH     A,?V7
   \   0000EB   F5..         MOV     ?V6,A
   \   0000ED   E5..         MOV     A,?V6
   \   0000EF   C0E0         PUSH    A
   \   0000F1   8882         MOV     DPL,R0
   \   0000F3   8983         MOV     DPH,R1
   \   0000F5   D0E0         POP     A
   \   0000F7   F0           MOVX    @DPTR,A
   \   0000F8   8882         MOV     DPL,R0
   \   0000FA   8983         MOV     DPH,R1
   \   0000FC   A3           INC     DPTR
   \   0000FD   A882         MOV     R0,DPL
   \   0000FF   A983         MOV     R1,DPH
   1629          
   1630              *pBuf = (RoutingTableList->status & 0x07);
   \   000101   8A82         MOV     DPL,R2
   \   000103   8B83         MOV     DPH,R3
   \   000105   A3           INC     DPTR
   \   000106   A3           INC     DPTR
   \   000107   A3           INC     DPTR
   \   000108   A3           INC     DPTR
   \   000109   A3           INC     DPTR
   \   00010A   E0           MOVX    A,@DPTR
   \   00010B   5407         ANL     A,#0x7
   \   00010D   C0E0         PUSH    A
   \   00010F   8882         MOV     DPL,R0
   \   000111   8983         MOV     DPH,R1
   \   000113   D0E0         POP     A
   \   000115   F0           MOVX    @DPTR,A
   1631              if ( RoutingTableList->options & (ZP_MTO_ROUTE_RC | ZP_MTO_ROUTE_NRC) )
   \   000116   8A82         MOV     DPL,R2
   \   000118   8B83         MOV     DPH,R3
   \   00011A   A3           INC     DPTR
   \   00011B   A3           INC     DPTR
   \   00011C   A3           INC     DPTR
   \   00011D   A3           INC     DPTR
   \   00011E   A3           INC     DPTR
   \   00011F   A3           INC     DPTR
   \   000120   E0           MOVX    A,@DPTR
   \   000121   5418         ANL     A,#0x18
   \   000123   603D         JZ      ??ZDP_MgmtRtgRsp_4
   1632              {
   1633                uint8 options = 0;
   \   000125   7D00         MOV     R5,#0x0
   1634                options |= ZDO_MGMT_RTG_ENTRY_MANYTOONE;
   \   000127   D3           SETB    C
   \   000128   ED           MOV     A,R5
   \   000129   92E1         MOV     0xE0 /* A   */.1,C
   \   00012B   FD           MOV     R5,A
   1635          
   1636                if ( RoutingTableList->options & ZP_RTG_RECORD )
   \   00012C   8A82         MOV     DPL,R2
   \   00012E   8B83         MOV     DPH,R3
   \   000130   A3           INC     DPTR
   \   000131   A3           INC     DPTR
   \   000132   A3           INC     DPTR
   \   000133   A3           INC     DPTR
   \   000134   A3           INC     DPTR
   \   000135   A3           INC     DPTR
   \   000136   E0           MOVX    A,@DPTR
   \   000137   A2E2         MOV     C,0xE0 /* A   */.2
   \   000139   5005         JNC     ??ZDP_MgmtRtgRsp_5
   1637                {
   1638                  options |= ZDO_MGMT_RTG_ENTRY_ROUTE_RECORD_REQUIRED;
   \   00013B   D3           SETB    C
   \   00013C   ED           MOV     A,R5
   \   00013D   92E2         MOV     0xE0 /* A   */.2,C
   \   00013F   FD           MOV     R5,A
   1639                }
   1640          
   1641                if ( RoutingTableList->options & ZP_MTO_ROUTE_NRC )
   \                     ??ZDP_MgmtRtgRsp_5:
   \   000140   8A82         MOV     DPL,R2
   \   000142   8B83         MOV     DPH,R3
   \   000144   A3           INC     DPTR
   \   000145   A3           INC     DPTR
   \   000146   A3           INC     DPTR
   \   000147   A3           INC     DPTR
   \   000148   A3           INC     DPTR
   \   000149   A3           INC     DPTR
   \   00014A   E0           MOVX    A,@DPTR
   \   00014B   A2E4         MOV     C,0xE0 /* A   */.4
   \   00014D   5005         JNC     ??ZDP_MgmtRtgRsp_6
   1642                {
   1643                  options |= ZDO_MGMT_RTG_ENTRY_MEMORY_CONSTRAINED;
   \   00014F   D3           SETB    C
   \   000150   ED           MOV     A,R5
   \   000151   92E0         MOV     0xE0 /* A   */.0,C
   \   000153   FD           MOV     R5,A
   1644                }
   1645          
   1646                *pBuf |= (options << 3);
   \                     ??ZDP_MgmtRtgRsp_6:
   \   000154   ED           MOV     A,R5
   \   000155   33           RLC     A
   \   000156   33           RLC     A
   \   000157   33           RLC     A
   \   000158   54F8         ANL     A,#0xf8
   \   00015A   FD           MOV     R5,A
   \   00015B   8882         MOV     DPL,R0
   \   00015D   8983         MOV     DPH,R1
   \   00015F   E0           MOVX    A,@DPTR
   \   000160   4D           ORL     A,R5
   \   000161   F0           MOVX    @DPTR,A
   1647              }
   1648              pBuf++;
   \                     ??ZDP_MgmtRtgRsp_4:
   \   000162   8882         MOV     DPL,R0
   \   000164   8983         MOV     DPH,R1
   \   000166   A3           INC     DPTR
   \   000167   A882         MOV     R0,DPL
   \   000169   A983         MOV     R1,DPH
   1649          
   1650              *pBuf++ = LO_UINT16( RoutingTableList->nextHopAddress );  // Next hop
   \   00016B   8A82         MOV     DPL,R2
   \   00016D   8B83         MOV     DPH,R3
   \   00016F   A3           INC     DPTR
   \   000170   A3           INC     DPTR
   \   000171   E0           MOVX    A,@DPTR
   \   000172   F5..         MOV     ?V6,A
   \   000174   A3           INC     DPTR
   \   000175   E0           MOVX    A,@DPTR
   \   000176   F5..         MOV     ?V7,A
   \   000178   E5..         MOV     A,?V6
   \   00017A   C0E0         PUSH    A
   \   00017C   8882         MOV     DPL,R0
   \   00017E   8983         MOV     DPH,R1
   \   000180   D0E0         POP     A
   \   000182   F0           MOVX    @DPTR,A
   \   000183   8882         MOV     DPL,R0
   \   000185   8983         MOV     DPH,R1
   \   000187   A3           INC     DPTR
   \   000188   A882         MOV     R0,DPL
   \   00018A   A983         MOV     R1,DPH
   1651              *pBuf++ = HI_UINT16( RoutingTableList->nextHopAddress );
   \   00018C   8A82         MOV     DPL,R2
   \   00018E   8B83         MOV     DPH,R3
   \   000190   A3           INC     DPTR
   \   000191   A3           INC     DPTR
   \   000192   E0           MOVX    A,@DPTR
   \   000193   F5..         MOV     ?V6,A
   \   000195   A3           INC     DPTR
   \   000196   E0           MOVX    A,@DPTR
   \   000197   F5..         MOV     ?V7,A
   \   000199   E4           CLR     A
   \   00019A   C5..         XCH     A,?V7
   \   00019C   F5..         MOV     ?V6,A
   \   00019E   E5..         MOV     A,?V6
   \   0001A0   C0E0         PUSH    A
   \   0001A2   8882         MOV     DPL,R0
   \   0001A4   8983         MOV     DPH,R1
   \   0001A6   D0E0         POP     A
   \   0001A8   F0           MOVX    @DPTR,A
   \   0001A9   8882         MOV     DPL,R0
   \   0001AB   8983         MOV     DPH,R1
   \   0001AD   A3           INC     DPTR
   \   0001AE   A882         MOV     R0,DPL
   \   0001B0   A983         MOV     R1,DPH
   1652              RoutingTableList++;    // Move to next list entry
   \   0001B2   EA           MOV     A,R2
   \   0001B3   2407         ADD     A,#0x7
   \   0001B5   FA           MOV     R2,A
   \   0001B6   5001         JNC     ??ZDP_MgmtRtgRsp_7
   \   0001B8   0B           INC     R3
   1653            }
   \                     ??ZDP_MgmtRtgRsp_7:
   \   0001B9   0C           INC     R4
   \                     ??ZDP_MgmtRtgRsp_2:
   \   0001BA   EC           MOV     A,R4
   \   0001BB   C3           CLR     C
   \   0001BC   95..         SUBB    A,?V4
   \   0001BE   5003         JNC     $+5
   \   0001C0   02....       LJMP    ??ZDP_MgmtRtgRsp_3 & 0xFFFF
   1654          
   1655            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Rtg_rsp, len, buf );
   \   0001C3   8E82         MOV     DPL,R6
   \   0001C5   8F83         MOV     DPH,R7
   \   0001C7   A3           INC     DPTR
   \   0001C8   A882         MOV     R0,DPL
   \   0001CA   A983         MOV     R1,DPH
   \   0001CC   90....       MOV     DPTR,#ZDP_TmpBuf
   \   0001CF   E8           MOV     A,R0
   \   0001D0   F0           MOVX    @DPTR,A
   \   0001D1   A3           INC     DPTR
   \   0001D2   E9           MOV     A,R1
   \   0001D3   F0           MOVX    @DPTR,A
   \   0001D4                ; Setup parameters for call to function fillAndSend
   \   0001D4   75..32       MOV     ?V6,#0x32
   \   0001D7   75..80       MOV     ?V7,#-0x80
   \   0001DA   78..         MOV     R0,#?V6
   \   0001DC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001DF   A9..         MOV     R1,?V5
   \   0001E1   AC..         MOV     R4,?V2
   \   0001E3   AD..         MOV     R5,?V3
   \   0001E5   7402         MOV     A,#0x2
   \   0001E7   12....       LCALL   ?XSTACK_DISP101_8
   \   0001EA   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   0001ED   7402         MOV     A,#0x2
   \   0001EF   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001F2   E9           MOV     A,R1
   \   0001F3   F5..         MOV     ?V2,A
   \   0001F5                ; Setup parameters for call to function osal_mem_free
   \   0001F5   EE           MOV     A,R6
   \   0001F6   FA           MOV     R2,A
   \   0001F7   EF           MOV     A,R7
   \   0001F8   FB           MOV     R3,A
   \   0001F9   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0001FC   90....       MOV     DPTR,#ZDP_TmpBuf
   \   0001FF   74..         MOV     A,#(ZDP_Buf + 1) & 0xff
   \   000201   F0           MOVX    @DPTR,A
   \   000202   A3           INC     DPTR
   \   000203   74..         MOV     A,#((ZDP_Buf + 1) >> 8) & 0xff
   \   000205   F0           MOVX    @DPTR,A
   \   000206   A9..         MOV     R1,?V2
   \                     ??ZDP_MgmtRtgRsp_1:
   \   000208   7401         MOV     A,#0x1
   \   00020A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00020D   7F08         MOV     R7,#0x8
   \   00020F   02....       LJMP    ?BANKED_LEAVE_XDATA
   1656          }
   1657          
   1658          /*********************************************************************
   1659           * @fn          ZDP_MgmtBindRsp
   1660           *
   1661           * @brief       This builds and send a Mgmt_Bind_rsp message. This
   1662           *              function sends a unicast message.
   1663           *
   1664           * @param       dstAddr - destination address of the message
   1665           * @param       Status - message status (ZDP_SUCCESS or other)
   1666           * @param       BindingTableEntries - Total number of entries
   1667           * @param       StartIndex - Starting index within the reporting list
   1668           * @param       BindingTableListCount - number of entries included
   1669           *                                 in this message
   1670           * @param       BindingTableList - List of Binding Table entries
   1671           * @param       SecurityEnable - Security Options
   1672           *
   1673           * @return      ZStatus_t
   1674           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1675          ZStatus_t ZDP_MgmtBindRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtBindRsp:
   1676                                      byte Status,
   1677                                      byte BindingTableEntries,
   1678                                      byte StartIndex,
   1679                                      byte BindingTableListCount,
   1680                                      apsBindingItem_t *BindingTableList,
   1681                                      byte SecurityEnable )
   1682          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   C0E0         PUSH    A
   \   00000D   85..82       MOV     DPL,?XSP + 0
   \   000010   85..83       MOV     DPH,?XSP + 1
   \   000013   D0E0         POP     A
   \   000015   F0           MOVX    @DPTR,A
   \   000016   8A..         MOV     ?V12,R2
   \   000018   8B..         MOV     ?V13,R3
   \   00001A   8C..         MOV     ?V10,R4
   \   00001C   8D..         MOV     ?V7,R5
   1683            uint8 *buf;
   1684            uint8 *pBuf;
   1685            uint8 maxLen; // maxLen is the maximum packet length to allocate enough memory space
   1686            uint8 len;    // Actual length varies due to different addrMode
   1687            uint8 x;
   1688            byte extZdpBindEntrySize = ZDP_BINDINGENTRY_SIZE + 1 + 1; // One more byte for cluserID and DstAddrMode
   \   00001E   75..15       MOV     ?V5,#0x15
   1689            byte shortZdpBindEntrySize = ZDP_BINDINGENTRY_SIZE + 1 + 1 + 2 - 8 - 1; // clusterID + DstAddrMode + shortAddr - ExtAddr - DstEndpoint
   \   000021   75..0E       MOV     ?V6,#0xe
   1690          
   1691            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1692          
   1693            // Status + BindingTableEntries + StartIndex + BindingTableListCount.
   1694            maxLen = 1 + 1 + 1 + 1;
   \   000024   7804         MOV     R0,#0x4
   \   000026   7418         MOV     A,#0x18
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F5..         MOV     ?V4,A
   1695            maxLen += (BindingTableListCount * extZdpBindEntrySize );  //max length
   \   00002E   E5..         MOV     A,?V5
   \   000030   F5F0         MOV     B,A
   \   000032   E5..         MOV     A,?V4
   \   000034   A4           MUL     AB
   \   000035   28           ADD     A,R0
   \   000036   F8           MOV     R0,A
   1696            buf = osal_mem_alloc( maxLen + 1 );  // +1 for transaction ID
   \   000037                ; Setup parameters for call to function osal_mem_alloc
   \   000037   7900         MOV     R1,#0x0
   \   000039   E8           MOV     A,R0
   \   00003A   2401         ADD     A,#0x1
   \   00003C   FA           MOV     R2,A
   \   00003D   E4           CLR     A
   \   00003E   39           ADDC    A,R1
   \   00003F   FB           MOV     R3,A
   \   000040   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000043   8A..         MOV     ?V0,R2
   \   000045   8B..         MOV     ?V1,R3
   \   000047   85....       MOV     ?V2,?V0
   \   00004A   85....       MOV     ?V3,?V1
   1697          
   1698            if ( buf == NULL )
   \   00004D   E5..         MOV     A,?V2
   \   00004F   45..         ORL     A,?V3
   \   000051   7005         JNZ     ??ZDP_MgmtBindRsp_0
   1699            {
   1700              return afStatus_MEM_FAIL;
   \   000053   7910         MOV     R1,#0x10
   \   000055   02....       LJMP    ??ZDP_MgmtBindRsp_1 & 0xFFFF
   1701            }
   1702          
   1703            pBuf = buf+1;
   \                     ??ZDP_MgmtBindRsp_0:
   \   000058   85..82       MOV     DPL,?V2
   \   00005B   85..83       MOV     DPH,?V3
   \   00005E   A3           INC     DPTR
   \   00005F   AA82         MOV     R2,DPL
   \   000061   AB83         MOV     R3,DPH
   1704          
   1705            *pBuf++ = Status;
   \   000063   E5..         MOV     A,?V10
   \   000065   C0E0         PUSH    A
   \   000067   8A82         MOV     DPL,R2
   \   000069   8B83         MOV     DPH,R3
   \   00006B   D0E0         POP     A
   \   00006D   F0           MOVX    @DPTR,A
   \   00006E   8A82         MOV     DPL,R2
   \   000070   8B83         MOV     DPH,R3
   \   000072   A3           INC     DPTR
   \   000073   AA82         MOV     R2,DPL
   \   000075   AB83         MOV     R3,DPH
   1706            *pBuf++ = BindingTableEntries;
   \   000077   E5..         MOV     A,?V7
   \   000079   C0E0         PUSH    A
   \   00007B   8A82         MOV     DPL,R2
   \   00007D   8B83         MOV     DPH,R3
   \   00007F   D0E0         POP     A
   \   000081   F0           MOVX    @DPTR,A
   \   000082   8A82         MOV     DPL,R2
   \   000084   8B83         MOV     DPH,R3
   \   000086   A3           INC     DPTR
   \   000087   AA82         MOV     R2,DPL
   \   000089   AB83         MOV     R3,DPH
   1707            *pBuf++ = StartIndex;
   \   00008B   7417         MOV     A,#0x17
   \   00008D   12....       LCALL   ?XSTACK_DISP0_8
   \   000090   E0           MOVX    A,@DPTR
   \   000091   C0E0         PUSH    A
   \   000093   8A82         MOV     DPL,R2
   \   000095   8B83         MOV     DPH,R3
   \   000097   D0E0         POP     A
   \   000099   F0           MOVX    @DPTR,A
   \   00009A   8A82         MOV     DPL,R2
   \   00009C   8B83         MOV     DPH,R3
   \   00009E   A3           INC     DPTR
   \   00009F   AA82         MOV     R2,DPL
   \   0000A1   AB83         MOV     R3,DPH
   1708            *pBuf++ = BindingTableListCount;
   \   0000A3   E5..         MOV     A,?V4
   \   0000A5   C0E0         PUSH    A
   \   0000A7   8A82         MOV     DPL,R2
   \   0000A9   8B83         MOV     DPH,R3
   \   0000AB   D0E0         POP     A
   \   0000AD   F0           MOVX    @DPTR,A
   \   0000AE   8A82         MOV     DPL,R2
   \   0000B0   8B83         MOV     DPH,R3
   \   0000B2   A3           INC     DPTR
   \   0000B3   AA82         MOV     R2,DPL
   \   0000B5   AB83         MOV     R3,DPH
   1709          
   1710            // Initial length = Status + BindingTableEntries + StartIndex + BindingTableListCount.
   1711            // length += ZDP_BINDINGENTRY_SIZE   -- Version 1.0
   1712            //           extZdpBindEntrySize     -- Version 1.1 extended address mode
   1713            //           shortZdpBindEntrySize   -- Version 1.1 group address mode
   1714          
   1715            len = 1 + 1 + 1 + 1;
   \   0000B7   75..04       MOV     ?V0,#0x4
   1716            for ( x = 0; x < BindingTableListCount; x++ )
   \   0000BA   75..00       MOV     ?V1,#0x0
   \   0000BD   7419         MOV     A,#0x19
   \   0000BF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C2   E0           MOVX    A,@DPTR
   \   0000C3   FE           MOV     R6,A
   \   0000C4   A3           INC     DPTR
   \   0000C5   E0           MOVX    A,@DPTR
   \   0000C6   FF           MOV     R7,A
   \   0000C7   8054         SJMP    ??ZDP_MgmtBindRsp_2
   1717            {
   1718              pBuf = osal_cpyExtAddr( pBuf, BindingTableList->srcAddr );
   1719              *pBuf++ = BindingTableList->srcEP;
   1720          
   1721              // Cluster ID
   1722              *pBuf++ = LO_UINT16( BindingTableList->clusterID );
   1723              *pBuf++ = HI_UINT16( BindingTableList->clusterID );
   1724          
   1725              *pBuf++ = BindingTableList->dstAddr.addrMode;
   1726              if ( BindingTableList->dstAddr.addrMode == Addr64Bit )
   1727              {
   1728                len += extZdpBindEntrySize;
   1729                pBuf = osal_cpyExtAddr( pBuf, BindingTableList->dstAddr.addr.extAddr );
   1730                *pBuf++ = BindingTableList->dstEP;
   1731              }
   1732              else
   1733              {
   1734                len += shortZdpBindEntrySize;
   \                     ??ZDP_MgmtBindRsp_3:
   \   0000C9   E5..         MOV     A,?V6
   \   0000CB   25..         ADD     A,?V0
   \   0000CD   F5..         MOV     ?V0,A
   1735                *pBuf++ = LO_UINT16( BindingTableList->dstAddr.addr.shortAddr );
   \   0000CF   EE           MOV     A,R6
   \   0000D0   240B         ADD     A,#0xb
   \   0000D2   F582         MOV     DPL,A
   \   0000D4   E4           CLR     A
   \   0000D5   3F           ADDC    A,R7
   \   0000D6   F583         MOV     DPH,A
   \   0000D8   E0           MOVX    A,@DPTR
   \   0000D9   F8           MOV     R0,A
   \   0000DA   A3           INC     DPTR
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   F9           MOV     R1,A
   \   0000DD   E8           MOV     A,R0
   \   0000DE   C0E0         PUSH    A
   \   0000E0   8A82         MOV     DPL,R2
   \   0000E2   8B83         MOV     DPH,R3
   \   0000E4   D0E0         POP     A
   \   0000E6   F0           MOVX    @DPTR,A
   \   0000E7   8A82         MOV     DPL,R2
   \   0000E9   8B83         MOV     DPH,R3
   \   0000EB   A3           INC     DPTR
   \   0000EC   AA82         MOV     R2,DPL
   \   0000EE   AB83         MOV     R3,DPH
   1736                *pBuf++ = HI_UINT16( BindingTableList->dstAddr.addr.shortAddr );
   \   0000F0   EE           MOV     A,R6
   \   0000F1   240B         ADD     A,#0xb
   \   0000F3   F582         MOV     DPL,A
   \   0000F5   E4           CLR     A
   \   0000F6   3F           ADDC    A,R7
   \   0000F7   F583         MOV     DPH,A
   \   0000F9   E0           MOVX    A,@DPTR
   \   0000FA   F8           MOV     R0,A
   \   0000FB   A3           INC     DPTR
   \   0000FC   E0           MOVX    A,@DPTR
   \   0000FD   F9           MOV     R1,A
   \   0000FE   E4           CLR     A
   \   0000FF   C9           XCH     A,R1
   \   000100   F8           MOV     R0,A
   \   000101   E8           MOV     A,R0
   \   000102   C0E0         PUSH    A
   \   000104   8A82         MOV     DPL,R2
   \   000106   8B83         MOV     DPH,R3
   \   000108   D0E0         POP     A
   \   00010A   F0           MOVX    @DPTR,A
   \   00010B   8A82         MOV     DPL,R2
   \   00010D   8B83         MOV     DPH,R3
   \   00010F   A3           INC     DPTR
   \   000110   AA82         MOV     R2,DPL
   \   000112   AB83         MOV     R3,DPH
   1737              }
   1738              BindingTableList++;    // Move to next list entry
   \                     ??ZDP_MgmtBindRsp_4:
   \   000114   EE           MOV     A,R6
   \   000115   2415         ADD     A,#0x15
   \   000117   FE           MOV     R6,A
   \   000118   5001         JNC     ??ZDP_MgmtBindRsp_5
   \   00011A   0F           INC     R7
   \                     ??ZDP_MgmtBindRsp_5:
   \   00011B   05..         INC     ?V1
   \                     ??ZDP_MgmtBindRsp_2:
   \   00011D   E5..         MOV     A,?V1
   \   00011F   C3           CLR     C
   \   000120   95..         SUBB    A,?V4
   \   000122   4003         JC      $+5
   \   000124   02....       LJMP    ??ZDP_MgmtBindRsp_6 & 0xFFFF
   \   000127                ; Setup parameters for call to function sAddrExtCpy
   \   000127   EE           MOV     A,R6
   \   000128   FC           MOV     R4,A
   \   000129   EF           MOV     A,R7
   \   00012A   FD           MOV     R5,A
   \   00012B   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00012E   8A..         MOV     ?V8,R2
   \   000130   8B..         MOV     ?V9,R3
   \   000132   AA..         MOV     R2,?V8
   \   000134   AB..         MOV     R3,?V9
   \   000136   8E82         MOV     DPL,R6
   \   000138   8F83         MOV     DPH,R7
   \   00013A   A3           INC     DPTR
   \   00013B   A3           INC     DPTR
   \   00013C   A3           INC     DPTR
   \   00013D   A3           INC     DPTR
   \   00013E   A3           INC     DPTR
   \   00013F   A3           INC     DPTR
   \   000140   A3           INC     DPTR
   \   000141   A3           INC     DPTR
   \   000142   E0           MOVX    A,@DPTR
   \   000143   C0E0         PUSH    A
   \   000145   8A82         MOV     DPL,R2
   \   000147   8B83         MOV     DPH,R3
   \   000149   D0E0         POP     A
   \   00014B   F0           MOVX    @DPTR,A
   \   00014C   8A82         MOV     DPL,R2
   \   00014E   8B83         MOV     DPH,R3
   \   000150   A3           INC     DPTR
   \   000151   AA82         MOV     R2,DPL
   \   000153   AB83         MOV     R3,DPH
   \   000155   8E82         MOV     DPL,R6
   \   000157   8F83         MOV     DPH,R7
   \   000159   A3           INC     DPTR
   \   00015A   A3           INC     DPTR
   \   00015B   A3           INC     DPTR
   \   00015C   A3           INC     DPTR
   \   00015D   A3           INC     DPTR
   \   00015E   A3           INC     DPTR
   \   00015F   A3           INC     DPTR
   \   000160   A3           INC     DPTR
   \   000161   A3           INC     DPTR
   \   000162   E0           MOVX    A,@DPTR
   \   000163   F8           MOV     R0,A
   \   000164   A3           INC     DPTR
   \   000165   E0           MOVX    A,@DPTR
   \   000166   F9           MOV     R1,A
   \   000167   E8           MOV     A,R0
   \   000168   C0E0         PUSH    A
   \   00016A   8A82         MOV     DPL,R2
   \   00016C   8B83         MOV     DPH,R3
   \   00016E   D0E0         POP     A
   \   000170   F0           MOVX    @DPTR,A
   \   000171   8A82         MOV     DPL,R2
   \   000173   8B83         MOV     DPH,R3
   \   000175   A3           INC     DPTR
   \   000176   AA82         MOV     R2,DPL
   \   000178   AB83         MOV     R3,DPH
   \   00017A   8E82         MOV     DPL,R6
   \   00017C   8F83         MOV     DPH,R7
   \   00017E   A3           INC     DPTR
   \   00017F   A3           INC     DPTR
   \   000180   A3           INC     DPTR
   \   000181   A3           INC     DPTR
   \   000182   A3           INC     DPTR
   \   000183   A3           INC     DPTR
   \   000184   A3           INC     DPTR
   \   000185   A3           INC     DPTR
   \   000186   A3           INC     DPTR
   \   000187   E0           MOVX    A,@DPTR
   \   000188   F8           MOV     R0,A
   \   000189   A3           INC     DPTR
   \   00018A   E0           MOVX    A,@DPTR
   \   00018B   F9           MOV     R1,A
   \   00018C   E4           CLR     A
   \   00018D   C9           XCH     A,R1
   \   00018E   F8           MOV     R0,A
   \   00018F   E8           MOV     A,R0
   \   000190   C0E0         PUSH    A
   \   000192   8A82         MOV     DPL,R2
   \   000194   8B83         MOV     DPH,R3
   \   000196   D0E0         POP     A
   \   000198   F0           MOVX    @DPTR,A
   \   000199   8A82         MOV     DPL,R2
   \   00019B   8B83         MOV     DPH,R3
   \   00019D   A3           INC     DPTR
   \   00019E   AA82         MOV     R2,DPL
   \   0001A0   AB83         MOV     R3,DPH
   \   0001A2   EE           MOV     A,R6
   \   0001A3   2413         ADD     A,#0x13
   \   0001A5   F582         MOV     DPL,A
   \   0001A7   E4           CLR     A
   \   0001A8   3F           ADDC    A,R7
   \   0001A9   F583         MOV     DPH,A
   \   0001AB   E0           MOVX    A,@DPTR
   \   0001AC   C0E0         PUSH    A
   \   0001AE   8A82         MOV     DPL,R2
   \   0001B0   8B83         MOV     DPH,R3
   \   0001B2   D0E0         POP     A
   \   0001B4   F0           MOVX    @DPTR,A
   \   0001B5   8A82         MOV     DPL,R2
   \   0001B7   8B83         MOV     DPH,R3
   \   0001B9   A3           INC     DPTR
   \   0001BA   AA82         MOV     R2,DPL
   \   0001BC   AB83         MOV     R3,DPH
   \   0001BE   EE           MOV     A,R6
   \   0001BF   2413         ADD     A,#0x13
   \   0001C1   F582         MOV     DPL,A
   \   0001C3   E4           CLR     A
   \   0001C4   3F           ADDC    A,R7
   \   0001C5   F583         MOV     DPH,A
   \   0001C7   E0           MOVX    A,@DPTR
   \   0001C8   6403         XRL     A,#0x3
   \   0001CA   6003         JZ      $+5
   \   0001CC   02....       LJMP    ??ZDP_MgmtBindRsp_3 & 0xFFFF
   \   0001CF   E5..         MOV     A,?V5
   \   0001D1   25..         ADD     A,?V0
   \   0001D3   F5..         MOV     ?V0,A
   \   0001D5                ; Setup parameters for call to function sAddrExtCpy
   \   0001D5   EE           MOV     A,R6
   \   0001D6   240B         ADD     A,#0xb
   \   0001D8   FC           MOV     R4,A
   \   0001D9   E4           CLR     A
   \   0001DA   3F           ADDC    A,R7
   \   0001DB   FD           MOV     R5,A
   \   0001DC   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0001DF   8A..         MOV     ?V8,R2
   \   0001E1   8B..         MOV     ?V9,R3
   \   0001E3   AA..         MOV     R2,?V8
   \   0001E5   AB..         MOV     R3,?V9
   \   0001E7   EE           MOV     A,R6
   \   0001E8   2414         ADD     A,#0x14
   \   0001EA   F582         MOV     DPL,A
   \   0001EC   E4           CLR     A
   \   0001ED   3F           ADDC    A,R7
   \   0001EE   F583         MOV     DPH,A
   \   0001F0   E0           MOVX    A,@DPTR
   \   0001F1   C0E0         PUSH    A
   \   0001F3   8A82         MOV     DPL,R2
   \   0001F5   8B83         MOV     DPH,R3
   \   0001F7   D0E0         POP     A
   \   0001F9   F0           MOVX    @DPTR,A
   \   0001FA   8A82         MOV     DPL,R2
   \   0001FC   8B83         MOV     DPH,R3
   \   0001FE   A3           INC     DPTR
   \   0001FF   AA82         MOV     R2,DPL
   \   000201   AB83         MOV     R3,DPH
   \   000203   02....       LJMP    ??ZDP_MgmtBindRsp_4 & 0xFFFF
   1739            }
   1740          
   1741            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Bind_rsp, len, buf );
   \                     ??ZDP_MgmtBindRsp_6:
   \   000206   85..82       MOV     DPL,?V2
   \   000209   85..83       MOV     DPH,?V3
   \   00020C   A3           INC     DPTR
   \   00020D   A882         MOV     R0,DPL
   \   00020F   A983         MOV     R1,DPH
   \   000211   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000214   E8           MOV     A,R0
   \   000215   F0           MOVX    @DPTR,A
   \   000216   A3           INC     DPTR
   \   000217   E9           MOV     A,R1
   \   000218   F0           MOVX    @DPTR,A
   \   000219                ; Setup parameters for call to function fillAndSend
   \   000219   75..33       MOV     ?V4,#0x33
   \   00021C   75..80       MOV     ?V5,#-0x80
   \   00021F   78..         MOV     R0,#?V4
   \   000221   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000224   A9..         MOV     R1,?V0
   \   000226   AC..         MOV     R4,?V12
   \   000228   AD..         MOV     R5,?V13
   \   00022A   7402         MOV     A,#0x2
   \   00022C   12....       LCALL   ?XSTACK_DISP101_8
   \   00022F   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   000232   7402         MOV     A,#0x2
   \   000234   12....       LCALL   ?DEALLOC_XSTACK8
   \   000237   E9           MOV     A,R1
   \   000238   FE           MOV     R6,A
   \   000239                ; Setup parameters for call to function osal_mem_free
   \   000239   AA..         MOV     R2,?V2
   \   00023B   AB..         MOV     R3,?V3
   \   00023D   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000240   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000243   74..         MOV     A,#(ZDP_Buf + 1) & 0xff
   \   000245   F0           MOVX    @DPTR,A
   \   000246   A3           INC     DPTR
   \   000247   74..         MOV     A,#((ZDP_Buf + 1) >> 8) & 0xff
   \   000249   F0           MOVX    @DPTR,A
   \   00024A   EE           MOV     A,R6
   \   00024B   F9           MOV     R1,A
   \                     ??ZDP_MgmtBindRsp_1:
   \   00024C   7401         MOV     A,#0x1
   \   00024E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000251   7F0E         MOV     R7,#0xe
   \   000253   02....       LJMP    ?BANKED_LEAVE_XDATA
   1742          }
   1743          
   1744          /*********************************************************************
   1745           * @fn          ZDP_MgmtNwkUpdateNotify
   1746           *
   1747           * @brief       This builds and send a Mgmt_NWK_Update_notify message. This
   1748           *              function sends a unicast message.
   1749           *
   1750           * @param       dstAddr - destination address of the message
   1751           * @param       status - message status (ZDP_SUCCESS or other)
   1752           * @param       scannedChannels - List of channels scanned by the request
   1753           * @param       totalTransmissions - Total transmissions
   1754           * @param       transmissionFailures - Sum of transmission failures
   1755           * @param       listCount - Number of records contained in the energyValues list
   1756           * @param       energyValues - List of descriptors, one for each of ListCount,
   1757           *                             of the enegry detect descriptors
   1758           * @param       txOptions - Transmit options
   1759           * @param       securityEnable - Security options
   1760           *
   1761           * @return      afStatus_t
   1762           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1763          afStatus_t ZDP_MgmtNwkUpdateNotify( uint8 TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkUpdateNotify:
   1764                                              uint8 status, uint32 scannedChannels,
   1765                                              uint16 totalTransmissions, uint16 transmissionFailures,
   1766                                              uint8 listCount, uint8 *energyValues, uint8 txOptions,
   1767                                              uint8 securityEnable )
   1768          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   C0E0         PUSH    A
   \   00000D   85..82       MOV     DPL,?XSP + 0
   \   000010   85..83       MOV     DPH,?XSP + 1
   \   000013   D0E0         POP     A
   \   000015   F0           MOVX    @DPTR,A
   \   000016   8A..         MOV     ?V8,R2
   \   000018   8B..         MOV     ?V9,R3
   \   00001A   8C..         MOV     ?V2,R4
   \   00001C   8D..         MOV     ?V0,R5
   1769            uint8 *buf;
   1770            uint8 *pBuf;
   1771            uint8 len;
   1772          
   1773            (void)securityEnable;  // Intentionally unreferenced parameter
   1774          
   1775            // Status + ScannedChannels + totalTransmissions + transmissionFailures + ListCount + energyValues
   1776            len = 1 + 4 + 2 + 2 + 1 + listCount;
   \   00001E   740A         MOV     A,#0xa
   \   000020   25..         ADD     A,?V0
   \   000022   F5..         MOV     ?V1,A
   1777          
   1778            buf = osal_mem_alloc( len+1 ); // +1 for transaction ID
   \   000024                ; Setup parameters for call to function osal_mem_alloc
   \   000024   A8..         MOV     R0,?V1
   \   000026   7900         MOV     R1,#0x0
   \   000028   E8           MOV     A,R0
   \   000029   2401         ADD     A,#0x1
   \   00002B   FA           MOV     R2,A
   \   00002C   E4           CLR     A
   \   00002D   39           ADDC    A,R1
   \   00002E   FB           MOV     R3,A
   \   00002F   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000032   8A..         MOV     ?V4,R2
   \   000034   8B..         MOV     ?V5,R3
   \   000036   AE..         MOV     R6,?V4
   \   000038   AF..         MOV     R7,?V5
   1779            if ( buf == NULL )
   \   00003A   EE           MOV     A,R6
   \   00003B   4F           ORL     A,R7
   \   00003C   7005         JNZ     ??ZDP_MgmtNwkUpdateNotify_0
   1780            {
   1781              return afStatus_MEM_FAIL;
   \   00003E   7910         MOV     R1,#0x10
   \   000040   02....       LJMP    ??ZDP_MgmtNwkUpdateNotify_1 & 0xFFFF
   1782            }
   1783          
   1784            pBuf = buf+1;
   \                     ??ZDP_MgmtNwkUpdateNotify_0:
   \   000043   8E82         MOV     DPL,R6
   \   000045   8F83         MOV     DPH,R7
   \   000047   A3           INC     DPTR
   \   000048   AA82         MOV     R2,DPL
   \   00004A   AB83         MOV     R3,DPH
   1785          
   1786            *pBuf++ = status;
   \   00004C   E5..         MOV     A,?V2
   \   00004E   C0E0         PUSH    A
   \   000050   8A82         MOV     DPL,R2
   \   000052   8B83         MOV     DPH,R3
   \   000054   D0E0         POP     A
   \   000056   F0           MOVX    @DPTR,A
   \   000057   8A82         MOV     DPL,R2
   \   000059   8B83         MOV     DPH,R3
   \   00005B   A3           INC     DPTR
   \   00005C   AA82         MOV     R2,DPL
   \   00005E   AB83         MOV     R3,DPH
   1787          
   1788            pBuf = osal_buffer_uint32( pBuf, scannedChannels );
   \   000060                ; Setup parameters for call to function osal_buffer_uint32
   \   000060   7413         MOV     A,#0x13
   \   000062   12....       LCALL   ?XSTACK_DISP0_8
   \   000065   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000068   12....       LCALL   `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   00006B   7404         MOV     A,#0x4
   \   00006D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000070   8A..         MOV     ?V4,R2
   \   000072   8B..         MOV     ?V5,R3
   \   000074   AA..         MOV     R2,?V4
   \   000076   AB..         MOV     R3,?V5
   \   000078   7417         MOV     A,#0x17
   \   00007A   12....       LCALL   ?XSTACK_DISP0_8
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   F8           MOV     R0,A
   \   00007F   A3           INC     DPTR
   \   000080   E0           MOVX    A,@DPTR
   \   000081   F9           MOV     R1,A
   1789          
   1790            *pBuf++ = LO_UINT16( totalTransmissions );
   \   000082   E8           MOV     A,R0
   \   000083   C0E0         PUSH    A
   \   000085   8A82         MOV     DPL,R2
   \   000087   8B83         MOV     DPH,R3
   \   000089   D0E0         POP     A
   \   00008B   F0           MOVX    @DPTR,A
   \   00008C   8A82         MOV     DPL,R2
   \   00008E   8B83         MOV     DPH,R3
   \   000090   A3           INC     DPTR
   \   000091   AA82         MOV     R2,DPL
   \   000093   AB83         MOV     R3,DPH
   1791            *pBuf++ = HI_UINT16( totalTransmissions );
   \   000095   E4           CLR     A
   \   000096   C9           XCH     A,R1
   \   000097   F8           MOV     R0,A
   \   000098   E8           MOV     A,R0
   \   000099   C0E0         PUSH    A
   \   00009B   8A82         MOV     DPL,R2
   \   00009D   8B83         MOV     DPH,R3
   \   00009F   D0E0         POP     A
   \   0000A1   F0           MOVX    @DPTR,A
   \   0000A2   8A82         MOV     DPL,R2
   \   0000A4   8B83         MOV     DPH,R3
   \   0000A6   A3           INC     DPTR
   \   0000A7   AA82         MOV     R2,DPL
   \   0000A9   AB83         MOV     R3,DPH
   \   0000AB   7419         MOV     A,#0x19
   \   0000AD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B0   E0           MOVX    A,@DPTR
   \   0000B1   F8           MOV     R0,A
   \   0000B2   A3           INC     DPTR
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   F9           MOV     R1,A
   1792          
   1793            *pBuf++ = LO_UINT16( transmissionFailures );
   \   0000B5   E8           MOV     A,R0
   \   0000B6   C0E0         PUSH    A
   \   0000B8   8A82         MOV     DPL,R2
   \   0000BA   8B83         MOV     DPH,R3
   \   0000BC   D0E0         POP     A
   \   0000BE   F0           MOVX    @DPTR,A
   \   0000BF   8A82         MOV     DPL,R2
   \   0000C1   8B83         MOV     DPH,R3
   \   0000C3   A3           INC     DPTR
   \   0000C4   AA82         MOV     R2,DPL
   \   0000C6   AB83         MOV     R3,DPH
   1794            *pBuf++ = HI_UINT16( transmissionFailures );
   \   0000C8   E4           CLR     A
   \   0000C9   C9           XCH     A,R1
   \   0000CA   F8           MOV     R0,A
   \   0000CB   E8           MOV     A,R0
   \   0000CC   C0E0         PUSH    A
   \   0000CE   8A82         MOV     DPL,R2
   \   0000D0   8B83         MOV     DPH,R3
   \   0000D2   D0E0         POP     A
   \   0000D4   F0           MOVX    @DPTR,A
   \   0000D5   8A82         MOV     DPL,R2
   \   0000D7   8B83         MOV     DPH,R3
   \   0000D9   A3           INC     DPTR
   \   0000DA   AA82         MOV     R2,DPL
   \   0000DC   AB83         MOV     R3,DPH
   1795          
   1796            *pBuf++ = listCount;
   \   0000DE   E5..         MOV     A,?V0
   \   0000E0   C0E0         PUSH    A
   \   0000E2   8A82         MOV     DPL,R2
   \   0000E4   8B83         MOV     DPH,R3
   \   0000E6   D0E0         POP     A
   \   0000E8   F0           MOVX    @DPTR,A
   \   0000E9   8A82         MOV     DPL,R2
   \   0000EB   8B83         MOV     DPH,R3
   \   0000ED   A3           INC     DPTR
   \   0000EE   AA82         MOV     R2,DPL
   \   0000F0   AB83         MOV     R3,DPH
   1797          
   1798            if ( listCount > 0 )
   \   0000F2   E5..         MOV     A,?V0
   \   0000F4   6020         JZ      ??ZDP_MgmtNwkUpdateNotify_2
   1799              osal_memcpy( pBuf, energyValues, listCount );
   \   0000F6                ; Setup parameters for call to function osal_memcpy
   \   0000F6   741B         MOV     A,#0x1b
   \   0000F8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FB   E0           MOVX    A,@DPTR
   \   0000FC   F5..         MOV     ?V4,A
   \   0000FE   A3           INC     DPTR
   \   0000FF   E0           MOVX    A,@DPTR
   \   000100   F5..         MOV     ?V5,A
   \   000102   75..00       MOV     ?V6,#0x0
   \   000105   78..         MOV     R0,#?V4
   \   000107   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00010A   AC..         MOV     R4,?V0
   \   00010C   7D00         MOV     R5,#0x0
   \   00010E   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000111   7403         MOV     A,#0x3
   \   000113   12....       LCALL   ?DEALLOC_XSTACK8
   1800          
   1801            FillAndSendBufferTxOptions( &TransSeq, dstAddr, Mgmt_NWK_Update_notify, len, buf, txOptions );
   \                     ??ZDP_MgmtNwkUpdateNotify_2:
   \   000116   8E82         MOV     DPL,R6
   \   000118   8F83         MOV     DPH,R7
   \   00011A   A3           INC     DPTR
   \   00011B   A882         MOV     R0,DPL
   \   00011D   A983         MOV     R1,DPH
   \   00011F   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000122   E8           MOV     A,R0
   \   000123   F0           MOVX    @DPTR,A
   \   000124   A3           INC     DPTR
   \   000125   E9           MOV     A,R1
   \   000126   F0           MOVX    @DPTR,A
   \   000127   741D         MOV     A,#0x1d
   \   000129   12....       LCALL   ?XSTACK_DISP0_8
   \   00012C   E0           MOVX    A,@DPTR
   \   00012D   90....       MOV     DPTR,#ZDP_TxOptions
   \   000130   F0           MOVX    @DPTR,A
   \   000131                ; Setup parameters for call to function fillAndSend
   \   000131   75..38       MOV     ?V4,#0x38
   \   000134   75..80       MOV     ?V5,#-0x80
   \   000137   78..         MOV     R0,#?V4
   \   000139   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00013C   A9..         MOV     R1,?V1
   \   00013E   AC..         MOV     R4,?V8
   \   000140   AD..         MOV     R5,?V9
   \   000142   7402         MOV     A,#0x2
   \   000144   12....       LCALL   ?XSTACK_DISP101_8
   \   000147   12....       LCALL   `??fillAndSend::?relay`; Banked call to: fillAndSend
   \   00014A   7402         MOV     A,#0x2
   \   00014C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00014F   E9           MOV     A,R1
   \   000150   F5..         MOV     ?V1,A
   \   000152                ; Setup parameters for call to function osal_mem_free
   \   000152   EE           MOV     A,R6
   \   000153   FA           MOV     R2,A
   \   000154   EF           MOV     A,R7
   \   000155   FB           MOV     R3,A
   \   000156   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000159   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00015C   74..         MOV     A,#(ZDP_Buf + 1) & 0xff
   \   00015E   F0           MOVX    @DPTR,A
   \   00015F   A3           INC     DPTR
   \   000160   74..         MOV     A,#((ZDP_Buf + 1) >> 8) & 0xff
   \   000162   F0           MOVX    @DPTR,A
   \   000163   90....       MOV     DPTR,#ZDP_TxOptions
   \   000166   7400         MOV     A,#0x0
   \   000168   F0           MOVX    @DPTR,A
   \   000169   A9..         MOV     R1,?V1
   \                     ??ZDP_MgmtNwkUpdateNotify_1:
   \   00016B   7401         MOV     A,#0x1
   \   00016D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000170   7F0A         MOV     R7,#0xa
   \   000172   02....       LJMP    ?BANKED_LEAVE_XDATA
   1802          }
   1803          
   1804          /*********************************************************************
   1805           * Functions to register for ZDO Over-the-air messages
   1806           */
   1807          
   1808          /*********************************************************************
   1809           * @fn          ZDO_RegisterForZDOMsg
   1810           *
   1811           * @brief       Call this function to register of an incoming over
   1812           *              the air ZDO message - probably a response message
   1813           *              but requests can also be received.
   1814           *              Messages are delivered to the task with ZDO_CB_MSG
   1815           *              as the message ID.
   1816           *
   1817           * @param       taskID - Where you would like the message delivered
   1818           * @param       clusterID - What message?
   1819           *                          ZDO_ALL_MSGS_CLUSTERID - all responses
   1820           *                          and device announce
   1821           *
   1822           * @return      ZSuccess - successful, ZMemError if not
   1823           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1824          ZStatus_t ZDO_RegisterForZDOMsg( uint8 taskID, uint16 clusterID )
   \                     ZDO_RegisterForZDOMsg:
   1825          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V2,R1
   \   000007   8A..         MOV     ?V0,R2
   \   000009   8B..         MOV     ?V1,R3
   1826            ZDO_MsgCB_t *pList;
   1827            ZDO_MsgCB_t *pLast;
   1828            ZDO_MsgCB_t *pNew;
   1829          
   1830            // Look for duplicate
   1831            pList = pLast = zdoMsgCBs;
   \   00000B   90....       MOV     DPTR,#zdoMsgCBs
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   FE           MOV     R6,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   FF           MOV     R7,A
   \   000013   EE           MOV     A,R6
   \   000014   F8           MOV     R0,A
   \   000015   EF           MOV     A,R7
   \   000016   F9           MOV     R1,A
   \   000017   800D         SJMP    ??ZDO_RegisterForZDOMsg_0
   1832            while ( pList )
   1833            {
   1834              if ( pList->taskID == taskID && pList->clusterID == clusterID )
   1835                return ( ZSuccess );
   1836              pLast = pList;
   \                     ??ZDO_RegisterForZDOMsg_1:
   \   000019   E8           MOV     A,R0
   \   00001A   FE           MOV     R6,A
   \   00001B   E9           MOV     A,R1
   \   00001C   FF           MOV     R7,A
   1837              pList = (ZDO_MsgCB_t *)pList->next;
   \   00001D   8882         MOV     DPL,R0
   \   00001F   8983         MOV     DPH,R1
   \   000021   E0           MOVX    A,@DPTR
   \   000022   F8           MOV     R0,A
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F9           MOV     R1,A
   \                     ??ZDO_RegisterForZDOMsg_0:
   \   000026   E8           MOV     A,R0
   \   000027   49           ORL     A,R1
   \   000028   6021         JZ      ??ZDO_RegisterForZDOMsg_2
   \   00002A   8882         MOV     DPL,R0
   \   00002C   8983         MOV     DPH,R1
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   E0           MOVX    A,@DPTR
   \   000031   65..         XRL     A,?V2
   \   000033   70E4         JNZ     ??ZDO_RegisterForZDOMsg_1
   \   000035   8882         MOV     DPL,R0
   \   000037   8983         MOV     DPH,R1
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   A3           INC     DPTR
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   65..         XRL     A,?V0
   \   00003F   7004         JNZ     ??ZDO_RegisterForZDOMsg_3
   \   000041   A3           INC     DPTR
   \   000042   E0           MOVX    A,@DPTR
   \   000043   65..         XRL     A,?V1
   \                     ??ZDO_RegisterForZDOMsg_3:
   \   000045   70D2         JNZ     ??ZDO_RegisterForZDOMsg_1
   \   000047   7900         MOV     R1,#0x0
   \   000049   805E         SJMP    ??ZDO_RegisterForZDOMsg_4
   1838            }
   1839          
   1840            // Add to the list
   1841            pNew = (ZDO_MsgCB_t *)osal_mem_alloc( sizeof ( ZDO_MsgCB_t ) );
   \                     ??ZDO_RegisterForZDOMsg_2:
   \   00004B                ; Setup parameters for call to function osal_mem_alloc
   \   00004B   7A05         MOV     R2,#0x5
   \   00004D   7B00         MOV     R3,#0x0
   \   00004F   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000052   8A..         MOV     ?V4,R2
   \   000054   8B..         MOV     ?V5,R3
   \   000056   A8..         MOV     R0,?V4
   \   000058   A9..         MOV     R1,?V5
   1842            if ( pNew )
   \   00005A   E8           MOV     A,R0
   \   00005B   49           ORL     A,R1
   \   00005C   6049         JZ      ??ZDO_RegisterForZDOMsg_5
   1843            {
   1844              pNew->taskID = taskID;
   \   00005E   E5..         MOV     A,?V2
   \   000060   C0E0         PUSH    A
   \   000062   8882         MOV     DPL,R0
   \   000064   8983         MOV     DPH,R1
   \   000066   A3           INC     DPTR
   \   000067   A3           INC     DPTR
   \   000068   D0E0         POP     A
   \   00006A   F0           MOVX    @DPTR,A
   1845              pNew->clusterID = clusterID;
   \   00006B   8882         MOV     DPL,R0
   \   00006D   8983         MOV     DPH,R1
   \   00006F   A3           INC     DPTR
   \   000070   A3           INC     DPTR
   \   000071   A3           INC     DPTR
   \   000072   E5..         MOV     A,?V0
   \   000074   F0           MOVX    @DPTR,A
   \   000075   A3           INC     DPTR
   \   000076   E5..         MOV     A,?V1
   \   000078   F0           MOVX    @DPTR,A
   1846              pNew->next = NULL;
   \   000079   8882         MOV     DPL,R0
   \   00007B   8983         MOV     DPH,R1
   \   00007D   7400         MOV     A,#0x0
   \   00007F   F0           MOVX    @DPTR,A
   \   000080   A3           INC     DPTR
   \   000081   7400         MOV     A,#0x0
   \   000083   F0           MOVX    @DPTR,A
   1847              if ( zdoMsgCBs )
   \   000084   90....       MOV     DPTR,#zdoMsgCBs
   \   000087   E0           MOVX    A,@DPTR
   \   000088   FA           MOV     R2,A
   \   000089   A3           INC     DPTR
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   FB           MOV     R3,A
   \   00008C   EA           MOV     A,R2
   \   00008D   4B           ORL     A,R3
   \   00008E   600B         JZ      ??ZDO_RegisterForZDOMsg_6
   1848              {
   1849                pLast->next = pNew;
   \   000090   8E82         MOV     DPL,R6
   \   000092   8F83         MOV     DPH,R7
   \   000094   E8           MOV     A,R0
   \   000095   F0           MOVX    @DPTR,A
   \   000096   A3           INC     DPTR
   \   000097   E9           MOV     A,R1
   \   000098   F0           MOVX    @DPTR,A
   \   000099   8008         SJMP    ??ZDO_RegisterForZDOMsg_7
   1850              }
   1851              else
   1852                zdoMsgCBs = pNew;
   \                     ??ZDO_RegisterForZDOMsg_6:
   \   00009B   90....       MOV     DPTR,#zdoMsgCBs
   \   00009E   E8           MOV     A,R0
   \   00009F   F0           MOVX    @DPTR,A
   \   0000A0   A3           INC     DPTR
   \   0000A1   E9           MOV     A,R1
   \   0000A2   F0           MOVX    @DPTR,A
   1853              return ( ZSuccess );
   \                     ??ZDO_RegisterForZDOMsg_7:
   \   0000A3   7900         MOV     R1,#0x0
   \   0000A5   8002         SJMP    ??ZDO_RegisterForZDOMsg_4
   1854            }
   1855            else
   1856              return ( ZMemError );
   \                     ??ZDO_RegisterForZDOMsg_5:
   \   0000A7   7910         MOV     R1,#0x10
   \                     ??ZDO_RegisterForZDOMsg_4:
   \   0000A9   7F06         MOV     R7,#0x6
   \   0000AB   02....       LJMP    ?BANKED_LEAVE_XDATA
   1857          }
   1858          
   1859          /*********************************************************************
   1860           * @fn          ZDO_RemoveRegisteredCB
   1861           *
   1862           * @brief       Call this function if you don't want to receive the
   1863           *              incoming message.
   1864           *
   1865           * @param       taskID - Where the messages are being delivered.
   1866           * @param       clusterID - What message?
   1867           *
   1868           * @return      ZSuccess - successful, ZFailure if not found
   1869           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1870          ZStatus_t ZDO_RemoveRegisteredCB( uint8 taskID, uint16 clusterID )
   \                     ZDO_RemoveRegisteredCB:
   1871          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EA           MOV     A,R2
   \   000008   FC           MOV     R4,A
   \   000009   EB           MOV     A,R3
   \   00000A   FD           MOV     R5,A
   1872            ZDO_MsgCB_t *pList;
   1873            ZDO_MsgCB_t *pLast = NULL;
   \   00000B   7800         MOV     R0,#0x0
   \   00000D   7900         MOV     R1,#0x0
   1874          
   1875            pList = zdoMsgCBs;
   \   00000F   90....       MOV     DPTR,#zdoMsgCBs
   \   000012   E0           MOVX    A,@DPTR
   \   000013   FA           MOV     R2,A
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   FB           MOV     R3,A
   \   000017   800D         SJMP    ??ZDO_RemoveRegisteredCB_0
   1876            while ( pList )
   1877            {
   1878              if ( pList->taskID == taskID && pList->clusterID == clusterID )
   1879              {
   1880                if ( pLast )
   1881                {
   1882                  // remove this one from the linked list
   1883                  pLast->next = pList->next;
   1884                }
   1885                else if ( pList->next )
   1886                {
   1887                  // remove the first one from the linked list
   1888                  zdoMsgCBs = pList->next;
   1889                }
   1890                else
   1891                {
   1892                  // remove the only item from the list
   1893                  zdoMsgCBs = (ZDO_MsgCB_t *)NULL;
   1894                }
   1895                osal_mem_free( pList );
   1896                return ( ZSuccess );
   1897              }
   1898              pLast = pList;
   \                     ??ZDO_RemoveRegisteredCB_1:
   \   000019   EA           MOV     A,R2
   \   00001A   F8           MOV     R0,A
   \   00001B   EB           MOV     A,R3
   \   00001C   F9           MOV     R1,A
   1899              pList = pList->next;
   \   00001D   8A82         MOV     DPL,R2
   \   00001F   8B83         MOV     DPH,R3
   \   000021   E0           MOVX    A,@DPTR
   \   000022   FA           MOV     R2,A
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   FB           MOV     R3,A
   \                     ??ZDO_RemoveRegisteredCB_0:
   \   000026   EA           MOV     A,R2
   \   000027   4B           ORL     A,R3
   \   000028   6063         JZ      ??ZDO_RemoveRegisteredCB_2
   \   00002A   8A82         MOV     DPL,R2
   \   00002C   8B83         MOV     DPH,R3
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   E0           MOVX    A,@DPTR
   \   000031   6E           XRL     A,R6
   \   000032   70E5         JNZ     ??ZDO_RemoveRegisteredCB_1
   \   000034   8A82         MOV     DPL,R2
   \   000036   8B83         MOV     DPH,R3
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   6C           XRL     A,R4
   \   00003D   7003         JNZ     ??ZDO_RemoveRegisteredCB_3
   \   00003F   A3           INC     DPTR
   \   000040   E0           MOVX    A,@DPTR
   \   000041   6D           XRL     A,R5
   \                     ??ZDO_RemoveRegisteredCB_3:
   \   000042   70D5         JNZ     ??ZDO_RemoveRegisteredCB_1
   \   000044   E8           MOV     A,R0
   \   000045   49           ORL     A,R1
   \   000046   6014         JZ      ??ZDO_RemoveRegisteredCB_4
   \   000048   8A82         MOV     DPL,R2
   \   00004A   8B83         MOV     DPH,R3
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   FC           MOV     R4,A
   \   00004E   A3           INC     DPTR
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   FD           MOV     R5,A
   \   000051   8882         MOV     DPL,R0
   \   000053   8983         MOV     DPH,R1
   \   000055   EC           MOV     A,R4
   \   000056   F0           MOVX    @DPTR,A
   \   000057   A3           INC     DPTR
   \   000058   ED           MOV     A,R5
   \   000059   F0           MOVX    @DPTR,A
   \   00005A   802A         SJMP    ??ZDO_RemoveRegisteredCB_5
   \                     ??ZDO_RemoveRegisteredCB_4:
   \   00005C   8A82         MOV     DPL,R2
   \   00005E   8B83         MOV     DPH,R3
   \   000060   E0           MOVX    A,@DPTR
   \   000061   F8           MOV     R0,A
   \   000062   A3           INC     DPTR
   \   000063   E0           MOVX    A,@DPTR
   \   000064   F9           MOV     R1,A
   \   000065   E8           MOV     A,R0
   \   000066   49           ORL     A,R1
   \   000067   6013         JZ      ??ZDO_RemoveRegisteredCB_6
   \   000069   8A82         MOV     DPL,R2
   \   00006B   8B83         MOV     DPH,R3
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   F8           MOV     R0,A
   \   00006F   A3           INC     DPTR
   \   000070   E0           MOVX    A,@DPTR
   \   000071   F9           MOV     R1,A
   \   000072   90....       MOV     DPTR,#zdoMsgCBs
   \   000075   E8           MOV     A,R0
   \   000076   F0           MOVX    @DPTR,A
   \   000077   A3           INC     DPTR
   \   000078   E9           MOV     A,R1
   \   000079   F0           MOVX    @DPTR,A
   \   00007A   800A         SJMP    ??ZDO_RemoveRegisteredCB_5
   \                     ??ZDO_RemoveRegisteredCB_6:
   \   00007C   90....       MOV     DPTR,#zdoMsgCBs
   \   00007F   7400         MOV     A,#0x0
   \   000081   F0           MOVX    @DPTR,A
   \   000082   A3           INC     DPTR
   \   000083   7400         MOV     A,#0x0
   \   000085   F0           MOVX    @DPTR,A
   \                     ??ZDO_RemoveRegisteredCB_5:
   \   000086                ; Setup parameters for call to function osal_mem_free
   \   000086   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000089   7900         MOV     R1,#0x0
   \   00008B   8002         SJMP    ??ZDO_RemoveRegisteredCB_7
   1900            }
   1901          
   1902            return ( ZFailure );
   \                     ??ZDO_RemoveRegisteredCB_2:
   \   00008D   7901         MOV     R1,#0x1
   \                     ??ZDO_RemoveRegisteredCB_7:
   \   00008F   7F01         MOV     R7,#0x1
   \   000091   02....       LJMP    ?BANKED_LEAVE_XDATA
   1903          }
   1904          
   1905          /*********************************************************************
   1906           * @fn          ZDO_SendMsgCBs
   1907           *
   1908           * @brief       This function sends messages to registered tasks.
   1909           *              Local to ZDO and shouldn't be called outside of ZDO.
   1910           *
   1911           * @param       inMsg - incoming message
   1912           *
   1913           * @return      TRUE if sent to at least 1 task, FALSE if not
   1914           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1915          uint8 ZDO_SendMsgCBs( zdoIncomingMsg_t *inMsg )
   \                     ZDO_SendMsgCBs:
   1916          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   1917            uint8 ret = FALSE;
   \   000009   75..00       MOV     ?V4,#0x0
   1918            ZDO_MsgCB_t *pList = zdoMsgCBs;
   \   00000C   90....       MOV     DPTR,#zdoMsgCBs
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F5..         MOV     ?V2,A
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F5..         MOV     ?V3,A
   \   000016   02....       LJMP    ??ZDO_SendMsgCBs_0 & 0xFFFF
   1919            while ( pList )
   1920            {
   1921              if ( (pList->clusterID == inMsg->clusterID)
   1922                 || ((pList->clusterID == ZDO_ALL_MSGS_CLUSTERID)
   1923                     && ((inMsg->clusterID & ZDO_RESPONSE_BIT) || (inMsg->clusterID == Device_annce))) )
   \                     ??ZDO_SendMsgCBs_1:
   \   000019   85..82       MOV     DPL,?V2
   \   00001C   85..83       MOV     DPH,?V3
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F8           MOV     R0,A
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F9           MOV     R1,A
   \   000027   E5..         MOV     A,?V0
   \   000029   240C         ADD     A,#0xc
   \   00002B   F582         MOV     DPL,A
   \   00002D   E4           CLR     A
   \   00002E   35..         ADDC    A,?V1
   \   000030   F583         MOV     DPH,A
   \   000032   E0           MOVX    A,@DPTR
   \   000033   68           XRL     A,R0
   \   000034   7003         JNZ     ??ZDO_SendMsgCBs_2
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   69           XRL     A,R1
   \                     ??ZDO_SendMsgCBs_2:
   \   000039   6048         JZ      ??ZDO_SendMsgCBs_3
   \   00003B   85..82       MOV     DPL,?V2
   \   00003E   85..83       MOV     DPH,?V3
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   E0           MOVX    A,@DPTR
   \   000045   64FF         XRL     A,#0xff
   \   000047   7004         JNZ     ??ZDO_SendMsgCBs_4
   \   000049   A3           INC     DPTR
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   64FF         XRL     A,#0xff
   \                     ??ZDO_SendMsgCBs_4:
   \   00004D   6003         JZ      $+5
   \   00004F   02....       LJMP    ??ZDO_SendMsgCBs_5 & 0xFFFF
   \   000052   E5..         MOV     A,?V0
   \   000054   240C         ADD     A,#0xc
   \   000056   F582         MOV     DPL,A
   \   000058   E4           CLR     A
   \   000059   35..         ADDC    A,?V1
   \   00005B   F583         MOV     DPH,A
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   5400         ANL     A,#0x0
   \   000060   F8           MOV     R0,A
   \   000061   A3           INC     DPTR
   \   000062   E0           MOVX    A,@DPTR
   \   000063   5480         ANL     A,#0x80
   \   000065   F9           MOV     R1,A
   \   000066   E8           MOV     A,R0
   \   000067   49           ORL     A,R1
   \   000068   7019         JNZ     ??ZDO_SendMsgCBs_3
   \   00006A   E5..         MOV     A,?V0
   \   00006C   240C         ADD     A,#0xc
   \   00006E   F582         MOV     DPL,A
   \   000070   E4           CLR     A
   \   000071   35..         ADDC    A,?V1
   \   000073   F583         MOV     DPH,A
   \   000075   E0           MOVX    A,@DPTR
   \   000076   6413         XRL     A,#0x13
   \   000078   7004         JNZ     ??ZDO_SendMsgCBs_6
   \   00007A   A3           INC     DPTR
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   6400         XRL     A,#0x0
   \                     ??ZDO_SendMsgCBs_6:
   \   00007E   6003         JZ      $+5
   \   000080   02....       LJMP    ??ZDO_SendMsgCBs_5 & 0xFFFF
   1924              {
   1925                zdoIncomingMsg_t *msgPtr;
   1926          
   1927                // Send the address to the task
   1928                msgPtr = (zdoIncomingMsg_t *)osal_msg_allocate( sizeof( zdoIncomingMsg_t ) + inMsg->asduLen );
   \                     ??ZDO_SendMsgCBs_3:
   \   000083                ; Setup parameters for call to function osal_msg_allocate
   \   000083   E5..         MOV     A,?V0
   \   000085   2410         ADD     A,#0x10
   \   000087   F582         MOV     DPL,A
   \   000089   E4           CLR     A
   \   00008A   35..         ADDC    A,?V1
   \   00008C   F583         MOV     DPH,A
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   F8           MOV     R0,A
   \   000090   7900         MOV     R1,#0x0
   \   000092   E8           MOV     A,R0
   \   000093   2417         ADD     A,#0x17
   \   000095   FA           MOV     R2,A
   \   000096   E4           CLR     A
   \   000097   39           ADDC    A,R1
   \   000098   FB           MOV     R3,A
   \   000099   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   00009C   8A..         MOV     ?V6,R2
   \   00009E   8B..         MOV     ?V7,R3
   \   0000A0   AE..         MOV     R6,?V6
   \   0000A2   AF..         MOV     R7,?V7
   1929                if ( msgPtr )
   \   0000A4   EE           MOV     A,R6
   \   0000A5   4F           ORL     A,R7
   \   0000A6   7003         JNZ     $+5
   \   0000A8   02....       LJMP    ??ZDO_SendMsgCBs_5 & 0xFFFF
   1930                {
   1931                  // copy struct
   1932                  osal_memcpy( msgPtr, inMsg, sizeof( zdoIncomingMsg_t ));
   \   0000AB                ; Setup parameters for call to function osal_memcpy
   \   0000AB   85....       MOV     ?V4,?V0
   \   0000AE   85....       MOV     ?V5,?V1
   \   0000B1   75..00       MOV     ?V6,#0x0
   \   0000B4   78..         MOV     R0,#?V4
   \   0000B6   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000B9   7C17         MOV     R4,#0x17
   \   0000BB   7D00         MOV     R5,#0x0
   \   0000BD   EE           MOV     A,R6
   \   0000BE   FA           MOV     R2,A
   \   0000BF   EF           MOV     A,R7
   \   0000C0   FB           MOV     R3,A
   \   0000C1   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000C4   7403         MOV     A,#0x3
   \   0000C6   12....       LCALL   ?DEALLOC_XSTACK8
   1933          
   1934                  if ( inMsg->asduLen )
   \   0000C9   E5..         MOV     A,?V0
   \   0000CB   2410         ADD     A,#0x10
   \   0000CD   F582         MOV     DPL,A
   \   0000CF   E4           CLR     A
   \   0000D0   35..         ADDC    A,?V1
   \   0000D2   F583         MOV     DPH,A
   \   0000D4   E0           MOVX    A,@DPTR
   \   0000D5   6054         JZ      ??ZDO_SendMsgCBs_7
   1935                  {
   1936                    msgPtr->asdu = (byte*)(((byte*)msgPtr) + sizeof( zdoIncomingMsg_t ));
   \   0000D7   EE           MOV     A,R6
   \   0000D8   2417         ADD     A,#0x17
   \   0000DA   F8           MOV     R0,A
   \   0000DB   E4           CLR     A
   \   0000DC   3F           ADDC    A,R7
   \   0000DD   F9           MOV     R1,A
   \   0000DE   EE           MOV     A,R6
   \   0000DF   2413         ADD     A,#0x13
   \   0000E1   F582         MOV     DPL,A
   \   0000E3   E4           CLR     A
   \   0000E4   3F           ADDC    A,R7
   \   0000E5   F583         MOV     DPH,A
   \   0000E7   E8           MOV     A,R0
   \   0000E8   F0           MOVX    @DPTR,A
   \   0000E9   A3           INC     DPTR
   \   0000EA   E9           MOV     A,R1
   \   0000EB   F0           MOVX    @DPTR,A
   1937                    osal_memcpy( msgPtr->asdu, inMsg->asdu, inMsg->asduLen );
   \   0000EC                ; Setup parameters for call to function osal_memcpy
   \   0000EC   E5..         MOV     A,?V0
   \   0000EE   2413         ADD     A,#0x13
   \   0000F0   F582         MOV     DPL,A
   \   0000F2   E4           CLR     A
   \   0000F3   35..         ADDC    A,?V1
   \   0000F5   F583         MOV     DPH,A
   \   0000F7   E0           MOVX    A,@DPTR
   \   0000F8   F5..         MOV     ?V4,A
   \   0000FA   A3           INC     DPTR
   \   0000FB   E0           MOVX    A,@DPTR
   \   0000FC   F5..         MOV     ?V5,A
   \   0000FE   75..00       MOV     ?V6,#0x0
   \   000101   78..         MOV     R0,#?V4
   \   000103   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000106   E5..         MOV     A,?V0
   \   000108   2410         ADD     A,#0x10
   \   00010A   F582         MOV     DPL,A
   \   00010C   E4           CLR     A
   \   00010D   35..         ADDC    A,?V1
   \   00010F   F583         MOV     DPH,A
   \   000111   E0           MOVX    A,@DPTR
   \   000112   FC           MOV     R4,A
   \   000113   7D00         MOV     R5,#0x0
   \   000115   EE           MOV     A,R6
   \   000116   2413         ADD     A,#0x13
   \   000118   F582         MOV     DPL,A
   \   00011A   E4           CLR     A
   \   00011B   3F           ADDC    A,R7
   \   00011C   F583         MOV     DPH,A
   \   00011E   E0           MOVX    A,@DPTR
   \   00011F   FA           MOV     R2,A
   \   000120   A3           INC     DPTR
   \   000121   E0           MOVX    A,@DPTR
   \   000122   FB           MOV     R3,A
   \   000123   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000126   7403         MOV     A,#0x3
   \   000128   12....       LCALL   ?DEALLOC_XSTACK8
   1938                  }
   1939          
   1940                  msgPtr->hdr.event = ZDO_CB_MSG;
   \                     ??ZDO_SendMsgCBs_7:
   \   00012B   8E82         MOV     DPL,R6
   \   00012D   8F83         MOV     DPH,R7
   \   00012F   74D3         MOV     A,#-0x2d
   \   000131   F0           MOVX    @DPTR,A
   1941                  osal_msg_send( pList->taskID, (uint8 *)msgPtr );
   \   000132                ; Setup parameters for call to function osal_msg_send
   \   000132   EE           MOV     A,R6
   \   000133   FA           MOV     R2,A
   \   000134   EF           MOV     A,R7
   \   000135   FB           MOV     R3,A
   \   000136   85..82       MOV     DPL,?V2
   \   000139   85..83       MOV     DPH,?V3
   \   00013C   A3           INC     DPTR
   \   00013D   A3           INC     DPTR
   \   00013E   E0           MOVX    A,@DPTR
   \   00013F   F9           MOV     R1,A
   \   000140   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   000143   E9           MOV     A,R1
   1942                  ret = TRUE;
   \   000144   75..01       MOV     ?V4,#0x1
   1943                }
   1944              }
   1945              pList = (ZDO_MsgCB_t *)pList->next;
   \                     ??ZDO_SendMsgCBs_5:
   \   000147   85..82       MOV     DPL,?V2
   \   00014A   85..83       MOV     DPH,?V3
   \   00014D   E0           MOVX    A,@DPTR
   \   00014E   F5..         MOV     ?V2,A
   \   000150   A3           INC     DPTR
   \   000151   E0           MOVX    A,@DPTR
   \   000152   F5..         MOV     ?V3,A
   1946            }
   \                     ??ZDO_SendMsgCBs_0:
   \   000154   E5..         MOV     A,?V2
   \   000156   45..         ORL     A,?V3
   \   000158   6003         JZ      $+5
   \   00015A   02....       LJMP    ??ZDO_SendMsgCBs_1 & 0xFFFF
   1947            return ( ret );
   \   00015D   A9..         MOV     R1,?V4
   \   00015F   7F08         MOV     R7,#0x8
   \   000161   02....       LJMP    ?BANKED_LEAVE_XDATA
   1948          }
   1949          
   1950          /*********************************************************************
   1951           * Incoming message processor
   1952           */
   1953          
   1954          /*********************************************************************
   1955           * @fn          ZDP_IncomingData
   1956           *
   1957           * @brief       This function indicates the transfer of a data PDU (ASDU)
   1958           *              from the APS sub-layer to the ZDO.
   1959           *
   1960           * @param       pData - Incoming Message
   1961           *
   1962           * @return      none
   1963           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1964          void ZDP_IncomingData( afIncomingMSGPacket_t *pData )
   \                     ZDP_IncomingData:
   1965          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 23
   \   000005   74E9         MOV     A,#-0x17
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1966            uint8 x = 0;
   \   00000A   7E00         MOV     R6,#0x0
   1967            uint8 handled;
   1968            zdoIncomingMsg_t inMsg;
   1969          
   1970            inMsg.srcAddr.addrMode = Addr16Bit;
   \   00000C   740A         MOV     A,#0xa
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   7402         MOV     A,#0x2
   \   000013   F0           MOVX    @DPTR,A
   1971            inMsg.srcAddr.addr.shortAddr = pData->srcAddr.addr.shortAddr;
   \   000014   8A82         MOV     DPL,R2
   \   000016   8B83         MOV     DPH,R3
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F8           MOV     R0,A
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   F9           MOV     R1,A
   \   000023   7402         MOV     A,#0x2
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   E8           MOV     A,R0
   \   000029   F0           MOVX    @DPTR,A
   \   00002A   A3           INC     DPTR
   \   00002B   E9           MOV     A,R1
   \   00002C   F0           MOVX    @DPTR,A
   1972            inMsg.wasBroadcast = pData->wasBroadcast;
   \   00002D   EA           MOV     A,R2
   \   00002E   2415         ADD     A,#0x15
   \   000030   F582         MOV     DPL,A
   \   000032   E4           CLR     A
   \   000033   3B           ADDC    A,R3
   \   000034   F583         MOV     DPH,A
   \   000036   E0           MOVX    A,@DPTR
   \   000037   C0E0         PUSH    A
   \   000039   740B         MOV     A,#0xb
   \   00003B   12....       LCALL   ?XSTACK_DISP0_8
   \   00003E   D0E0         POP     A
   \   000040   F0           MOVX    @DPTR,A
   1973            inMsg.clusterID = pData->clusterId;
   \   000041   8A82         MOV     DPL,R2
   \   000043   8B83         MOV     DPH,R3
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   F8           MOV     R0,A
   \   00004B   A3           INC     DPTR
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   F9           MOV     R1,A
   \   00004E   740C         MOV     A,#0xc
   \   000050   12....       LCALL   ?XSTACK_DISP0_8
   \   000053   E8           MOV     A,R0
   \   000054   F0           MOVX    @DPTR,A
   \   000055   A3           INC     DPTR
   \   000056   E9           MOV     A,R1
   \   000057   F0           MOVX    @DPTR,A
   1974            inMsg.SecurityUse = pData->SecurityUse;
   \   000058   EA           MOV     A,R2
   \   000059   2419         ADD     A,#0x19
   \   00005B   F582         MOV     DPL,A
   \   00005D   E4           CLR     A
   \   00005E   3B           ADDC    A,R3
   \   00005F   F583         MOV     DPH,A
   \   000061   E0           MOVX    A,@DPTR
   \   000062   C0E0         PUSH    A
   \   000064   740E         MOV     A,#0xe
   \   000066   12....       LCALL   ?XSTACK_DISP0_8
   \   000069   D0E0         POP     A
   \   00006B   F0           MOVX    @DPTR,A
   1975          
   1976            inMsg.asduLen = pData->cmd.DataLength-1;
   \   00006C   EA           MOV     A,R2
   \   00006D   2420         ADD     A,#0x20
   \   00006F   F582         MOV     DPL,A
   \   000071   E4           CLR     A
   \   000072   3B           ADDC    A,R3
   \   000073   F583         MOV     DPH,A
   \   000075   E0           MOVX    A,@DPTR
   \   000076   F8           MOV     R0,A
   \   000077   A3           INC     DPTR
   \   000078   E0           MOVX    A,@DPTR
   \   000079   F9           MOV     R1,A
   \   00007A   E8           MOV     A,R0
   \   00007B   24FF         ADD     A,#-0x1
   \   00007D   C0E0         PUSH    A
   \   00007F   7410         MOV     A,#0x10
   \   000081   12....       LCALL   ?XSTACK_DISP0_8
   \   000084   D0E0         POP     A
   \   000086   F0           MOVX    @DPTR,A
   1977            inMsg.asdu = pData->cmd.Data+1;
   \   000087   EA           MOV     A,R2
   \   000088   2422         ADD     A,#0x22
   \   00008A   F582         MOV     DPL,A
   \   00008C   E4           CLR     A
   \   00008D   3B           ADDC    A,R3
   \   00008E   F583         MOV     DPH,A
   \   000090   E0           MOVX    A,@DPTR
   \   000091   2401         ADD     A,#0x1
   \   000093   F8           MOV     R0,A
   \   000094   A3           INC     DPTR
   \   000095   E0           MOVX    A,@DPTR
   \   000096   3400         ADDC    A,#0x0
   \   000098   F9           MOV     R1,A
   \   000099   7413         MOV     A,#0x13
   \   00009B   12....       LCALL   ?XSTACK_DISP0_8
   \   00009E   E8           MOV     A,R0
   \   00009F   F0           MOVX    @DPTR,A
   \   0000A0   A3           INC     DPTR
   \   0000A1   E9           MOV     A,R1
   \   0000A2   F0           MOVX    @DPTR,A
   1978            inMsg.TransSeq = pData->cmd.Data[0];
   \   0000A3   EA           MOV     A,R2
   \   0000A4   2422         ADD     A,#0x22
   \   0000A6   F582         MOV     DPL,A
   \   0000A8   E4           CLR     A
   \   0000A9   3B           ADDC    A,R3
   \   0000AA   F583         MOV     DPH,A
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   F8           MOV     R0,A
   \   0000AE   A3           INC     DPTR
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   F583         MOV     DPH,A
   \   0000B2   8882         MOV     DPL,R0
   \   0000B4   E0           MOVX    A,@DPTR
   \   0000B5   C0E0         PUSH    A
   \   0000B7   740F         MOV     A,#0xf
   \   0000B9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BC   D0E0         POP     A
   \   0000BE   F0           MOVX    @DPTR,A
   1979            inMsg.macDestAddr = pData->macDestAddr;
   \   0000BF   EA           MOV     A,R2
   \   0000C0   2412         ADD     A,#0x12
   \   0000C2   F582         MOV     DPL,A
   \   0000C4   E4           CLR     A
   \   0000C5   3B           ADDC    A,R3
   \   0000C6   F583         MOV     DPH,A
   \   0000C8   E0           MOVX    A,@DPTR
   \   0000C9   F8           MOV     R0,A
   \   0000CA   A3           INC     DPTR
   \   0000CB   E0           MOVX    A,@DPTR
   \   0000CC   F9           MOV     R1,A
   \   0000CD   7411         MOV     A,#0x11
   \   0000CF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D2   E8           MOV     A,R0
   \   0000D3   F0           MOVX    @DPTR,A
   \   0000D4   A3           INC     DPTR
   \   0000D5   E9           MOV     A,R1
   \   0000D6   F0           MOVX    @DPTR,A
   1980            inMsg.macSrcAddr = pData->macSrcAddr;
   \   0000D7   EA           MOV     A,R2
   \   0000D8   2424         ADD     A,#0x24
   \   0000DA   F582         MOV     DPL,A
   \   0000DC   E4           CLR     A
   \   0000DD   3B           ADDC    A,R3
   \   0000DE   F583         MOV     DPH,A
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   F8           MOV     R0,A
   \   0000E2   A3           INC     DPTR
   \   0000E3   E0           MOVX    A,@DPTR
   \   0000E4   F9           MOV     R1,A
   \   0000E5   7415         MOV     A,#0x15
   \   0000E7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EA   E8           MOV     A,R0
   \   0000EB   F0           MOVX    @DPTR,A
   \   0000EC   A3           INC     DPTR
   \   0000ED   E9           MOV     A,R1
   \   0000EE   F0           MOVX    @DPTR,A
   1981          
   1982            handled = ZDO_SendMsgCBs( &inMsg );
   \   0000EF                ; Setup parameters for call to function ZDO_SendMsgCBs
   \   0000EF   AA..         MOV     R2,?XSP + 0
   \   0000F1   AB..         MOV     R3,?XSP + 1
   \   0000F3   12....       LCALL   `??ZDO_SendMsgCBs::?relay`; Banked call to: ZDO_SendMsgCBs
   \   0000F6   E9           MOV     A,R1
   \   0000F7   FA           MOV     R2,A
   \   0000F8   8001         SJMP    ??ZDP_IncomingData_0
   1983          
   1984          #if (defined MT_ZDO_CB_FUNC)
   1985          #if !defined MT_TASK
   1986            if (zgZdoDirectCB)
   1987          #endif
   1988            {
   1989              MT_ZdoDirectCB( pData, &inMsg );
   1990            }
   1991          #endif
   1992          
   1993            while ( zdpMsgProcs[x].clusterID != 0xFFFF )
   1994            {
   1995              if ( zdpMsgProcs[x].clusterID == inMsg.clusterID )
   1996              {
   1997                zdpMsgProcs[x].pFn( &inMsg );
   1998                return;
   1999              }
   2000              x++;
   \                     ??ZDP_IncomingData_1:
   \   0000FA   0E           INC     R6
   \                     ??ZDP_IncomingData_0:
   \   0000FB   EE           MOV     A,R6
   \   0000FC   F8           MOV     R0,A
   \   0000FD   7900         MOV     R1,#0x0
   \   0000FF   E8           MOV     A,R0
   \   000100   75F004       MOV     B,#0x4
   \   000103   A4           MUL     AB
   \   000104   C8           XCH     A,R0
   \   000105   ABF0         MOV     R3,B
   \   000107   75F000       MOV     B,#0x0
   \   00010A   A4           MUL     AB
   \   00010B   2B           ADD     A,R3
   \   00010C   FB           MOV     R3,A
   \   00010D   75F004       MOV     B,#0x4
   \   000110   E9           MOV     A,R1
   \   000111   A4           MUL     AB
   \   000112   2B           ADD     A,R3
   \   000113   F9           MOV     R1,A
   \   000114   74..         MOV     A,#zdpMsgProcs & 0xff
   \   000116   28           ADD     A,R0
   \   000117   F582         MOV     DPL,A
   \   000119   74..         MOV     A,#(zdpMsgProcs >> 8) & 0xff
   \   00011B   39           ADDC    A,R1
   \   00011C   F583         MOV     DPH,A
   \   00011E   E4           CLR     A
   \   00011F   93           MOVC    A,@A+DPTR
   \   000120   F8           MOV     R0,A
   \   000121   7401         MOV     A,#0x1
   \   000123   93           MOVC    A,@A+DPTR
   \   000124   F9           MOV     R1,A
   \   000125   74FF         MOV     A,#-0x1
   \   000127   68           XRL     A,R0
   \   000128   7003         JNZ     ??ZDP_IncomingData_2
   \   00012A   74FF         MOV     A,#-0x1
   \   00012C   69           XRL     A,R1
   \                     ??ZDP_IncomingData_2:
   \   00012D   606F         JZ      ??ZDP_IncomingData_3
   \   00012F   EE           MOV     A,R6
   \   000130   F8           MOV     R0,A
   \   000131   7900         MOV     R1,#0x0
   \   000133   E8           MOV     A,R0
   \   000134   75F004       MOV     B,#0x4
   \   000137   A4           MUL     AB
   \   000138   C8           XCH     A,R0
   \   000139   ABF0         MOV     R3,B
   \   00013B   75F000       MOV     B,#0x0
   \   00013E   A4           MUL     AB
   \   00013F   2B           ADD     A,R3
   \   000140   FB           MOV     R3,A
   \   000141   75F004       MOV     B,#0x4
   \   000144   E9           MOV     A,R1
   \   000145   A4           MUL     AB
   \   000146   2B           ADD     A,R3
   \   000147   F9           MOV     R1,A
   \   000148   74..         MOV     A,#zdpMsgProcs & 0xff
   \   00014A   28           ADD     A,R0
   \   00014B   F582         MOV     DPL,A
   \   00014D   74..         MOV     A,#(zdpMsgProcs >> 8) & 0xff
   \   00014F   39           ADDC    A,R1
   \   000150   F583         MOV     DPH,A
   \   000152   E4           CLR     A
   \   000153   93           MOVC    A,@A+DPTR
   \   000154   F8           MOV     R0,A
   \   000155   7401         MOV     A,#0x1
   \   000157   93           MOVC    A,@A+DPTR
   \   000158   F9           MOV     R1,A
   \   000159   740C         MOV     A,#0xc
   \   00015B   12....       LCALL   ?XSTACK_DISP0_8
   \   00015E   E0           MOVX    A,@DPTR
   \   00015F   68           XRL     A,R0
   \   000160   7003         JNZ     ??ZDP_IncomingData_4
   \   000162   A3           INC     DPTR
   \   000163   E0           MOVX    A,@DPTR
   \   000164   69           XRL     A,R1
   \                     ??ZDP_IncomingData_4:
   \   000165   7093         JNZ     ??ZDP_IncomingData_1
   \   000167                ; Setup parameters for indirect call
   \   000167   AA..         MOV     R2,?XSP + 0
   \   000169   AB..         MOV     R3,?XSP + 1
   \   00016B   EE           MOV     A,R6
   \   00016C   F8           MOV     R0,A
   \   00016D   7900         MOV     R1,#0x0
   \   00016F   E8           MOV     A,R0
   \   000170   75F004       MOV     B,#0x4
   \   000173   A4           MUL     AB
   \   000174   C8           XCH     A,R0
   \   000175   ACF0         MOV     R4,B
   \   000177   75F000       MOV     B,#0x0
   \   00017A   A4           MUL     AB
   \   00017B   2C           ADD     A,R4
   \   00017C   FC           MOV     R4,A
   \   00017D   75F004       MOV     B,#0x4
   \   000180   E9           MOV     A,R1
   \   000181   A4           MUL     AB
   \   000182   2C           ADD     A,R4
   \   000183   F9           MOV     R1,A
   \   000184   74..         MOV     A,#(zdpMsgProcs + 2) & 0xff
   \   000186   28           ADD     A,R0
   \   000187   F582         MOV     DPL,A
   \   000189   74..         MOV     A,#((zdpMsgProcs + 2) >> 8) & 0xff
   \   00018B   39           ADDC    A,R1
   \   00018C   F583         MOV     DPH,A
   \   00018E   E4           CLR     A
   \   00018F   93           MOVC    A,@A+DPTR
   \   000190   C0E0         PUSH    A
   \   000192   7401         MOV     A,#0x1
   \   000194   93           MOVC    A,@A+DPTR
   \   000195   F583         MOV     DPH,A
   \   000197   D082         POP     DPL
   \   000199   12....       LCALL   ?CALL_IND
   \   00019C   800A         SJMP    ??ZDP_IncomingData_5
   2001            }
   2002          
   2003            // Handle unhandled messages
   2004            if ( !handled )
   \                     ??ZDP_IncomingData_3:
   \   00019E   EA           MOV     A,R2
   \   00019F   7007         JNZ     ??ZDP_IncomingData_5
   2005              ZDApp_InMsgCB( &inMsg );
   \   0001A1                ; Setup parameters for call to function ZDApp_InMsgCB
   \   0001A1   AA..         MOV     R2,?XSP + 0
   \   0001A3   AB..         MOV     R3,?XSP + 1
   \   0001A5   12....       LCALL   `??ZDApp_InMsgCB::?relay`; Banked call to: ZDApp_InMsgCB
   2006          }
   \                     ??ZDP_IncomingData_5:
   \   0001A8   7417         MOV     A,#0x17
   \   0001AA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001AD   7F01         MOV     R7,#0x1
   \   0001AF   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDP_TmpBuf>`:
   \   000000   ....         DW ZDP_Buf + 1H

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??fillAndSend::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    fillAndSend

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_SendData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_SendData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_NWKAddrOfInterestReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_NWKAddrOfInterestReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_NwkAddrReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_NwkAddrReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_IEEEAddrReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_IEEEAddrReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MatchDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MatchDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_SimpleDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_SimpleDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_UserDescSet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_UserDescSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_ServerDiscReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_ServerDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_DeviceAnnce::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_DeviceAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_EndDeviceTimeoutReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_EndDeviceTimeoutReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zdpProcessAddrReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zdpProcessAddrReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_NodeDescMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_NodeDescMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_PowerDescMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_PowerDescMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_SimpleDescMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_SimpleDescMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_EPRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_EPRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_UserDescRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_UserDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_ServerDiscRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_ServerDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_GenericRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_GenericRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_EndDeviceBindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_EndDeviceBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_BindUnbindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_BindUnbindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtNwkDiscReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtDirectJoinReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtDirectJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtPermitJoinReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtPermitJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtLeaveReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtLeaveReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtNwkUpdateReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkUpdateReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtNwkDiscRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtLqiRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtLqiRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtRtgRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtRtgRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtBindRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtBindRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_MgmtNwkUpdateNotify::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkUpdateNotify

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_RegisterForZDOMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RegisterForZDOMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_RemoveRegisteredCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RemoveRegisteredCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_SendMsgCBs::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SendMsgCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDP_IncomingData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_IncomingData
   2007          
   2008          /*********************************************************************
   2009          *********************************************************************/
   2010          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     14   ZDO_RegisterForZDOMsg
        0     14   -> osal_mem_alloc
      0      9   ZDO_RemoveRegisteredCB
        0      9   -> osal_mem_free
      0     51   ZDO_SendMsgCBs
        0     19   -> osal_memcpy
        0     16   -> osal_msg_allocate
        0     16   -> osal_msg_send
      1     26   ZDP_BindUnbindReq
        0     18   -> fillAndSend
        0     16   -> sAddrExtCpy
      1     22   ZDP_DeviceAnnce
        0     21   -> fillAndSend
        0     19   -> sAddrExtCpy
      1     26   ZDP_EPRsp
        0     18   -> fillAndSend
        0     19   -> osal_memcpy
      1     29   ZDP_EndDeviceBindReq
        0     18   -> NLME_GetExtAddr
        0     18   -> NLME_GetShortAddr
        0     20   -> fillAndSend
        0     18   -> sAddrExtCpy
      1     25   ZDP_EndDeviceTimeoutReq
        0     25   -> fillAndSend
        0     23   -> sAddrExtCpy
      1     16   ZDP_GenericRsp
        0     12   -> fillAndSend
      1     23   ZDP_IEEEAddrReq
        0     23   -> fillAndSend
      1     32   ZDP_IncomingData
        0     32   -> ZDApp_InMsgCB
        0     32   -> ZDO_SendMsgCBs
      1     24   ZDP_MatchDescReq
        0     16   -> fillAndSend
      1     30   ZDP_MgmtBindRsp
        0     25   -> fillAndSend
        0     23   -> osal_mem_alloc
        0     23   -> osal_mem_free
        0     23   -> sAddrExtCpy
      1     15   ZDP_MgmtDirectJoinReq
        0     14   -> fillAndSend
        0     12   -> sAddrExtCpy
      0     16   ZDP_MgmtLeaveReq
        0     14   -> fillAndSend
        0     12   -> sAddrExtCpy
      1     29   ZDP_MgmtLqiRsp
        0     24   -> fillAndSend
        0     22   -> osal_mem_alloc
        0     22   -> osal_mem_free
        0     22   -> sAddrExtCpy
      1     22   ZDP_MgmtNwkDiscReq
        0     16   -> fillAndSend
        0     18   -> osal_buffer_uint32
      1     28   ZDP_MgmtNwkDiscRsp
        0     23   -> fillAndSend
        0     21   -> osal_mem_alloc
        0     21   -> osal_mem_free
        0     21   -> sAddrExtCpy
      1     35   ZDP_MgmtNwkUpdateNotify
        0     21   -> fillAndSend
        0     23   -> osal_buffer_uint32
        0     19   -> osal_mem_alloc
        0     19   -> osal_mem_free
        0     22   -> osal_memcpy
      1     24   ZDP_MgmtNwkUpdateReq
        0     16   -> fillAndSend
        0     18   -> osal_buffer_uint32
      1     12   ZDP_MgmtPermitJoinReq
        0     12   -> fillAndSend
      1     24   ZDP_MgmtRtgRsp
        0     19   -> fillAndSend
        0     17   -> osal_mem_alloc
        0     17   -> osal_mem_free
      1     13   ZDP_NWKAddrOfInterestReq
        0     12   -> fillAndSend
      1     14   ZDP_NodeDescMsg
        0     12   -> fillAndSend
      1     24   ZDP_NwkAddrReq
        0     24   -> fillAndSend
        0     22   -> sAddrExtCmp
        0     22   -> sAddrExtCpy
      1     16   ZDP_PowerDescMsg
        0     14   -> fillAndSend
      1     19   ZDP_SendData
        0     14   -> fillAndSend
      1     21   ZDP_ServerDiscReq
        0     21   -> fillAndSend
      1     19   ZDP_ServerDiscRsp
        0     15   -> fillAndSend
      1     16   ZDP_SimpleDescMsg
        0     16   -> fillAndSend
      1     13   ZDP_SimpleDescReq
        0     12   -> fillAndSend
      1     25   ZDP_UserDescRsp
        0     21   -> fillAndSend
        0     22   -> osal_memcpy
      1     20   ZDP_UserDescSet
        0     17   -> fillAndSend
        0     18   -> osal_memcpy
        0     15   -> osal_memset
      1     67   fillAndSend
        0     33   -> AF_DataRequest
        0     24   -> osal_memset
      1     34   zdpProcessAddrReq
        0     32   -> AddrMgrEntryGet
        0     32   -> AssocGetWithExt
        0     32   -> AssocGetWithShort
        0     32   -> AssocMakeList
        0     34   -> fillAndSend
        0     32   -> osal_mem_free
        0     32   -> sAddrExtCmp
        0     32   -> sAddrExtCpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Initializer for ZDP_TmpBuf>
     174  ZDO_RegisterForZDOMsg
       6  ZDO_RegisterForZDOMsg::?relay
     148  ZDO_RemoveRegisteredCB
       6  ZDO_RemoveRegisteredCB::?relay
     356  ZDO_SendMsgCBs
       6  ZDO_SendMsgCBs::?relay
       1  ZDP_AF_ENDPOINT
     384  ZDP_BindUnbindReq
       6  ZDP_BindUnbindReq::?relay
      80  ZDP_Buf
     150  ZDP_DeviceAnnce
       6  ZDP_DeviceAnnce::?relay
     248  ZDP_EPRsp
       6  ZDP_EPRsp::?relay
     593  ZDP_EndDeviceBindReq
       6  ZDP_EndDeviceBindReq::?relay
     148  ZDP_EndDeviceTimeoutReq
       6  ZDP_EndDeviceTimeoutReq::?relay
     145  ZDP_GenericRsp
       6  ZDP_GenericRsp::?relay
     162  ZDP_IEEEAddrReq
       6  ZDP_IEEEAddrReq::?relay
     434  ZDP_IncomingData
       6  ZDP_IncomingData::?relay
     636  ZDP_MatchDescReq
       6  ZDP_MatchDescReq::?relay
     598  ZDP_MgmtBindRsp
       6  ZDP_MgmtBindRsp::?relay
      80  ZDP_MgmtDirectJoinReq
       6  ZDP_MgmtDirectJoinReq::?relay
     134  ZDP_MgmtLeaveReq
       6  ZDP_MgmtLeaveReq::?relay
     640  ZDP_MgmtLqiRsp
       6  ZDP_MgmtLqiRsp::?relay
     113  ZDP_MgmtNwkDiscReq
       6  ZDP_MgmtNwkDiscReq::?relay
     498  ZDP_MgmtNwkDiscRsp
       6  ZDP_MgmtNwkDiscRsp::?relay
     373  ZDP_MgmtNwkUpdateNotify
       6  ZDP_MgmtNwkUpdateNotify::?relay
     232  ZDP_MgmtNwkUpdateReq
       6  ZDP_MgmtNwkUpdateReq::?relay
      78  ZDP_MgmtPermitJoinReq
       6  ZDP_MgmtPermitJoinReq::?relay
     530  ZDP_MgmtRtgRsp
       6  ZDP_MgmtRtgRsp::?relay
      78  ZDP_NWKAddrOfInterestReq
       6  ZDP_NWKAddrOfInterestReq::?relay
     551  ZDP_NodeDescMsg
       6  ZDP_NodeDescMsg::?relay
     191  ZDP_NwkAddrReq
       6  ZDP_NwkAddrReq::?relay
     235  ZDP_PowerDescMsg
       6  ZDP_PowerDescMsg::?relay
     133  ZDP_SendData
       6  ZDP_SendData::?relay
     138  ZDP_ServerDiscReq
       6  ZDP_ServerDiscReq::?relay
     157  ZDP_ServerDiscRsp
       6  ZDP_ServerDiscRsp::?relay
     912  ZDP_SimpleDescMsg
       6  ZDP_SimpleDescMsg::?relay
      98  ZDP_SimpleDescReq
       6  ZDP_SimpleDescReq::?relay
       2  ZDP_TmpBuf
       1  ZDP_TransID
       1  ZDP_TxOptions
     256  ZDP_UserDescRsp
       6  ZDP_UserDescRsp::?relay
     243  ZDP_UserDescSet
       6  ZDP_UserDescSet::?relay
     210  fillAndSend
       6  fillAndSend::?relay
       2  zdoMsgCBs
      36  zdpMsgProcs
    1080  zdpProcessAddrReq
       6  zdpProcessAddrReq::?relay

 
 11 136 bytes in segment BANKED_CODE
    210 bytes in segment BANK_RELAYS
     37 bytes in segment CODE_C
      2 bytes in segment XDATA_I
      2 bytes in segment XDATA_ID
     84 bytes in segment XDATA_Z
 
 11 385 bytes of CODE  memory
     86 bytes of XDATA memory

Errors: none
Warnings: none

###############################################################################
#
# IAR C/C++ Compiler V9.20.1.2476 for 8051                22/Feb/2017  14:31:38
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\koen\ZigBee-Code-WTWS\Components\stack\nwk\BindingTable.c
#    Command line       =  
#        -f
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00002000 -DZDAPP_CONFIG_PAN_ID=0xABCD
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={'H', 'O', 'G', 'E', 'S',
#        'C', 'H', 'O', 'O', 'L', 'U', 'T', 'R', 'E', 'C', 'H'}"
#        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440
#        C:\Users\koen\ZigBee-Code-WTWS\Components\stack\nwk\BindingTable.c -D
#        HOLD_AUTO_START -D BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D
#        NV_RESTORE -D HAL_UART=TRUE -lC
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\
#        -lA
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\
#        --diag_suppress Pe001,Pa010,Pe1665 -o
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\Obj\
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\Source\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ol --require_prototypes
#    List file          =  
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\BindingTable.lst
#    Object file        =  
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\Obj\BindingTable.r51
#
###############################################################################

C:\Users\koen\ZigBee-Code-WTWS\Components\stack\nwk\BindingTable.c
      1          /**************************************************************************************************
      2            Filename:       BindingTable.c
      3            Revised:        $Date: 2014-06-03 14:02:45 -0700 (Tue, 03 Jun 2014) $
      4            Revision:       $Revision: 38776 $
      5          
      6            Description:    Device binding table functions.
      7          
      8          
      9            Copyright 2004-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComDef.h"
     44          #include "OSAL.h"
     45          #include "OSAL_Nv.h"
     46          #include "nwk_globals.h"
     47          #include "AddrMgr.h"
     48          #include "BindingTable.h"
     49          #include "nwk_util.h"
     50          
     51          /*********************************************************************
     52           * MACROS
     53           */
     54          
     55          /*********************************************************************
     56           * CONSTANTS
     57           */
     58          #define NV_BIND_EMPTY   0xFF
     59          #define NV_BIND_REC_SIZE (gBIND_REC_SIZE)
     60          #define NV_BIND_ITEM_SIZE  (gBIND_REC_SIZE * gNWK_MAX_BINDING_ENTRIES)
     61          
     62          /*********************************************************************
     63           * TYPEDEFS
     64           */
     65          typedef struct
     66          {
     67            uint8        srcEP;
     68            uint16       srcIndex;
     69            uint16       dstIndex;
     70            uint8        dstEP;
     71            uint8        dstAddrMode;
     72            uint8        clusterIDs;
     73            uint16*      clusterIDList;
     74          } bindFields_t;
     75          
     76          /*********************************************************************
     77           * GLOBAL VARIABLES
     78           */
     79          
     80          /*********************************************************************
     81           * LOCAL FUNCTIONS
     82           */
     83          void BindAddrMgrCB( uint8 update, AddrMgrEntry_t *entryOld,
     84                              AddrMgrEntry_t *entryNew );
     85          BindingEntry_t *bindFindEmpty( void );
     86          uint16 bindingAddrMgsHelperFind( zAddrType_t *addr );
     87          uint8 bindingAddrMgsHelperConvert( uint16 idx, zAddrType_t *addr );
     88          void bindAddrMgrLocalLoad( void );
     89          
     90          static uint8 BindCopyBackupToNewNV( uint16 dupLen, uint16 newLen );
     91          static uint8 BindUpgradeTableInNV( void );
     92          
     93          /*********************************************************************
     94           * LOCAL VARIABLES
     95           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     96          static uint8 bindAddrMgrLocalLoaded = FALSE;
   \                     bindAddrMgrLocalLoaded:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     97          
     98          /*********************************************************************
     99           * Function Pointers
    100           */
    101          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    102          BindingEntry_t *(*pbindAddEntry)( byte srcEpInt,
   \                     pbindAddEntry:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    103                                            zAddrType_t *dstAddr, byte dstEpInt,
    104                                            byte numClusterIds, uint16 *clusterIds ) = (void*)NULL;

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    105          uint16 (*pbindNumOfEntries)( void ) = (void*)NULL;
   \                     pbindNumOfEntries:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    106          void (*pbindRemoveDev)( zAddrType_t *Addr ) = (void*)NULL;
   \                     pbindRemoveDev:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    107          byte (*pBindInitNV)( void ) = (void*)NULL;
   \                     pBindInitNV:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    108          void (*pBindSetDefaultNV)( void ) = (void*)NULL;
   \                     pBindSetDefaultNV:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    109          uint16 (*pBindRestoreFromNV)( void ) = (void*)NULL;
   \                     pBindRestoreFromNV:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    110          void (*pBindWriteNV)( void ) = (void*)NULL;
   \                     pBindWriteNV:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    111          
    112          #if ( ADDRMGR_CALLBACK_ENABLED == 1 )
    113          /*********************************************************************
    114           * @fn      BindAddrMgrCB()
    115           *
    116           * @brief   Address Manager Callback function
    117           *
    118           * @param   update -
    119           * @param   entry -
    120           *
    121           * @return  pointer to
    122           */
    123          void BindAddrMgrCB( uint8 update, AddrMgrEntry_t *entryNew,
    124                              AddrMgrEntry_t *entryOld )
    125          {
    126            // Check for either deleted items or changed Extended (Duplicate) addresses
    127          }
    128          #endif // ( ADDRMGR_CALLBACK_ENABLED == 1 )
    129          
    130          /*********************************************************************
    131           * @fn      InitBindingTable()
    132           *
    133           * @brief
    134           *
    135           *   This function is used to initialise the binding table
    136           *
    137           * @param   none
    138           *
    139           * @return  none
    140           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    141          void InitBindingTable( void )
   \                     InitBindingTable:
    142          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    143            osal_memset( BindingTable, 0xFF, gBIND_REC_SIZE * gNWK_MAX_BINDING_ENTRIES );
   \   000005                ; Setup parameters for call to function osal_memset
   \   000005   90....       MOV     DPTR,#gBIND_REC_SIZE
   \   000008   E4           CLR     A
   \   000009   93           MOVC    A,@A+DPTR
   \   00000A   FC           MOV     R4,A
   \   00000B   7401         MOV     A,#0x1
   \   00000D   93           MOVC    A,@A+DPTR
   \   00000E   FD           MOV     R5,A
   \   00000F   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000012   E4           CLR     A
   \   000013   93           MOVC    A,@A+DPTR
   \   000014   F5..         MOV     ?V0,A
   \   000016   75..00       MOV     ?V1,#0x0
   \   000019   EC           MOV     A,R4
   \   00001A   85..F0       MOV     B,?V0
   \   00001D   A4           MUL     AB
   \   00001E   CC           XCH     A,R4
   \   00001F   A8F0         MOV     R0,B
   \   000021   85..F0       MOV     B,?V1
   \   000024   A4           MUL     AB
   \   000025   28           ADD     A,R0
   \   000026   F8           MOV     R0,A
   \   000027   85..F0       MOV     B,?V0
   \   00002A   ED           MOV     A,R5
   \   00002B   A4           MUL     AB
   \   00002C   28           ADD     A,R0
   \   00002D   FD           MOV     R5,A
   \   00002E   79FF         MOV     R1,#-0x1
   \   000030   7A..         MOV     R2,#BindingTable & 0xff
   \   000032   7B..         MOV     R3,#(BindingTable >> 8) & 0xff
   \   000034   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    144          
    145            pbindAddEntry = bindAddEntry;
   \   000037   90....       MOV     DPTR,#pbindAddEntry
   \   00003A   74..         MOV     A,#`??bindAddEntry::?relay` & 0xff
   \   00003C   F0           MOVX    @DPTR,A
   \   00003D   A3           INC     DPTR
   \   00003E   74..         MOV     A,#(`??bindAddEntry::?relay` >> 8) & 0xff
   \   000040   F0           MOVX    @DPTR,A
    146            pbindNumOfEntries = bindNumOfEntries;
   \   000041   90....       MOV     DPTR,#pbindNumOfEntries
   \   000044   74..         MOV     A,#`??bindNumOfEntries::?relay` & 0xff
   \   000046   F0           MOVX    @DPTR,A
   \   000047   A3           INC     DPTR
   \   000048   74..         MOV     A,#(`??bindNumOfEntries::?relay` >> 8) & 0xff
   \   00004A   F0           MOVX    @DPTR,A
    147            pbindRemoveDev = bindRemoveDev;
   \   00004B   90....       MOV     DPTR,#pbindRemoveDev
   \   00004E   74..         MOV     A,#`??bindRemoveDev::?relay` & 0xff
   \   000050   F0           MOVX    @DPTR,A
   \   000051   A3           INC     DPTR
   \   000052   74..         MOV     A,#(`??bindRemoveDev::?relay` >> 8) & 0xff
   \   000054   F0           MOVX    @DPTR,A
    148            pBindInitNV = BindInitNV;
   \   000055   90....       MOV     DPTR,#pBindInitNV
   \   000058   74..         MOV     A,#`??BindInitNV::?relay` & 0xff
   \   00005A   F0           MOVX    @DPTR,A
   \   00005B   A3           INC     DPTR
   \   00005C   74..         MOV     A,#(`??BindInitNV::?relay` >> 8) & 0xff
   \   00005E   F0           MOVX    @DPTR,A
    149            pBindSetDefaultNV = BindSetDefaultNV;
   \   00005F   90....       MOV     DPTR,#pBindSetDefaultNV
   \   000062   74..         MOV     A,#`??BindSetDefaultNV::?relay` & 0xff
   \   000064   F0           MOVX    @DPTR,A
   \   000065   A3           INC     DPTR
   \   000066   74..         MOV     A,#(`??BindSetDefaultNV::?relay` >> 8) & 0xff
   \   000068   F0           MOVX    @DPTR,A
    150            pBindRestoreFromNV = BindRestoreFromNV;
   \   000069   90....       MOV     DPTR,#pBindRestoreFromNV
   \   00006C   74..         MOV     A,#`??BindRestoreFromNV::?relay` & 0xff
   \   00006E   F0           MOVX    @DPTR,A
   \   00006F   A3           INC     DPTR
   \   000070   74..         MOV     A,#(`??BindRestoreFromNV::?relay` >> 8) & 0xff
   \   000072   F0           MOVX    @DPTR,A
    151            pBindWriteNV = BindWriteNV;
   \   000073   90....       MOV     DPTR,#pBindWriteNV
   \   000076   74..         MOV     A,#`??BindWriteNV::?relay` & 0xff
   \   000078   F0           MOVX    @DPTR,A
   \   000079   A3           INC     DPTR
   \   00007A   74..         MOV     A,#(`??BindWriteNV::?relay` >> 8) & 0xff
   \   00007C   F0           MOVX    @DPTR,A
    152          
    153            bindAddrMgrLocalLoaded = FALSE;
   \   00007D   90....       MOV     DPTR,#bindAddrMgrLocalLoaded
   \   000080   7400         MOV     A,#0x0
   \   000082   F0           MOVX    @DPTR,A
    154          
    155          #if ( ADDRMGR_CALLBACK_ENABLED == 1 )
    156            // Register with the address manager
    157            AddrMgrRegister( ADDRMGR_REG_BINDING, BindAddrMgrCB );
    158          #endif
    159          }
   \   000083   7F02         MOV     R7,#0x2
   \   000085   02....       LJMP    ?BANKED_LEAVE_XDATA
    160          
    161          /*********************************************************************
    162           * @fn      bindFindEmpty()
    163           *
    164           * @brief   This function returns a pointer to an empty binding slot
    165           *
    166           * @param   none
    167           *
    168           * @return  pointer to binding table entry, NULL if not added
    169           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    170          BindingEntry_t *bindFindEmpty( void )
   \                     bindFindEmpty:
    171          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    172            bindTableIndex_t x;
    173          
    174            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   000004   7A00         MOV     R2,#0x0
   \   000006   8001         SJMP    ??bindFindEmpty_0
   \                     ??bindFindEmpty_1:
   \   000008   0A           INC     R2
   \                     ??bindFindEmpty_0:
   \   000009   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   00000C   E4           CLR     A
   \   00000D   93           MOVC    A,@A+DPTR
   \   00000E   F8           MOV     R0,A
   \   00000F   EA           MOV     A,R2
   \   000010   C3           CLR     C
   \   000011   98           SUBB    A,R0
   \   000012   504B         JNC     ??bindFindEmpty_2
    175            {
    176              // It's empty if the index is "Not Found"
    177              if ( BindingTable[x].srcEP == NV_BIND_EMPTY )
   \   000014   EA           MOV     A,R2
   \   000015   F8           MOV     R0,A
   \   000016   7900         MOV     R1,#0x0
   \   000018   E8           MOV     A,R0
   \   000019   75F00E       MOV     B,#0xe
   \   00001C   A4           MUL     AB
   \   00001D   C8           XCH     A,R0
   \   00001E   ABF0         MOV     R3,B
   \   000020   75F000       MOV     B,#0x0
   \   000023   A4           MUL     AB
   \   000024   2B           ADD     A,R3
   \   000025   FB           MOV     R3,A
   \   000026   75F00E       MOV     B,#0xe
   \   000029   E9           MOV     A,R1
   \   00002A   A4           MUL     AB
   \   00002B   2B           ADD     A,R3
   \   00002C   F9           MOV     R1,A
   \   00002D   74..         MOV     A,#BindingTable & 0xff
   \   00002F   28           ADD     A,R0
   \   000030   F582         MOV     DPL,A
   \   000032   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   000034   39           ADDC    A,R1
   \   000035   F583         MOV     DPH,A
   \   000037   E0           MOVX    A,@DPTR
   \   000038   64FF         XRL     A,#0xff
   \   00003A   70CC         JNZ     ??bindFindEmpty_1
    178              {
    179                return ( &BindingTable[x] );
   \   00003C   EA           MOV     A,R2
   \   00003D   F8           MOV     R0,A
   \   00003E   7900         MOV     R1,#0x0
   \   000040   E8           MOV     A,R0
   \   000041   75F00E       MOV     B,#0xe
   \   000044   A4           MUL     AB
   \   000045   C8           XCH     A,R0
   \   000046   AAF0         MOV     R2,B
   \   000048   75F000       MOV     B,#0x0
   \   00004B   A4           MUL     AB
   \   00004C   2A           ADD     A,R2
   \   00004D   FA           MOV     R2,A
   \   00004E   75F00E       MOV     B,#0xe
   \   000051   E9           MOV     A,R1
   \   000052   A4           MUL     AB
   \   000053   2A           ADD     A,R2
   \   000054   F9           MOV     R1,A
   \   000055   74..         MOV     A,#BindingTable & 0xff
   \   000057   28           ADD     A,R0
   \   000058   FA           MOV     R2,A
   \   000059   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   00005B   39           ADDC    A,R1
   \   00005C   FB           MOV     R3,A
   \   00005D   8004         SJMP    ??bindFindEmpty_3
    180              }
    181            }
    182          
    183            return ( (BindingEntry_t *)NULL );
   \                     ??bindFindEmpty_2:
   \   00005F   7A00         MOV     R2,#0x0
   \   000061   7B00         MOV     R3,#0x0
   \                     ??bindFindEmpty_3:
   \   000063   D083         POP     DPH
   \   000065   D082         POP     DPL
   \   000067   02....       LJMP    ?BRET
    184          }
    185          
    186          /*********************************************************************
    187           * @fn      bindNumOfEntries()
    188           *
    189           * @brief   This function returns the number of binding table entries.
    190           *          The return for this is the number of clusters in the
    191           *          table NOT the number of entries.
    192           *
    193           * @param   none
    194           *
    195           * @return  number of entries
    196           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    197          uint16 bindNumOfEntries( void )
   \                     bindNumOfEntries:
    198          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    199            bindTableIndex_t x;
    200            uint16 found;
    201          
    202            for ( found = 0, x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   000004   7A00         MOV     R2,#0x0
   \   000006   7B00         MOV     R3,#0x0
   \   000008   7C00         MOV     R4,#0x0
   \   00000A   8056         SJMP    ??bindNumOfEntries_0
    203            {
    204              // It's empty if the index is "Not Found"
    205              if ( BindingTable[x].srcEP != NV_BIND_EMPTY )
   \                     ??bindNumOfEntries_1:
   \   00000C   EC           MOV     A,R4
   \   00000D   F8           MOV     R0,A
   \   00000E   7900         MOV     R1,#0x0
   \   000010   E8           MOV     A,R0
   \   000011   75F00E       MOV     B,#0xe
   \   000014   A4           MUL     AB
   \   000015   C8           XCH     A,R0
   \   000016   ADF0         MOV     R5,B
   \   000018   75F000       MOV     B,#0x0
   \   00001B   A4           MUL     AB
   \   00001C   2D           ADD     A,R5
   \   00001D   FD           MOV     R5,A
   \   00001E   75F00E       MOV     B,#0xe
   \   000021   E9           MOV     A,R1
   \   000022   A4           MUL     AB
   \   000023   2D           ADD     A,R5
   \   000024   F9           MOV     R1,A
   \   000025   74..         MOV     A,#BindingTable & 0xff
   \   000027   28           ADD     A,R0
   \   000028   F582         MOV     DPL,A
   \   00002A   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   00002C   39           ADDC    A,R1
   \   00002D   F583         MOV     DPH,A
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   64FF         XRL     A,#0xff
   \   000032   602D         JZ      ??bindNumOfEntries_2
    206              {
    207                found += BindingTable[x].numClusterIds;
   \   000034   EC           MOV     A,R4
   \   000035   F8           MOV     R0,A
   \   000036   7900         MOV     R1,#0x0
   \   000038   E8           MOV     A,R0
   \   000039   75F00E       MOV     B,#0xe
   \   00003C   A4           MUL     AB
   \   00003D   C8           XCH     A,R0
   \   00003E   ADF0         MOV     R5,B
   \   000040   75F000       MOV     B,#0x0
   \   000043   A4           MUL     AB
   \   000044   2D           ADD     A,R5
   \   000045   FD           MOV     R5,A
   \   000046   75F00E       MOV     B,#0xe
   \   000049   E9           MOV     A,R1
   \   00004A   A4           MUL     AB
   \   00004B   2D           ADD     A,R5
   \   00004C   F9           MOV     R1,A
   \   00004D   74..         MOV     A,#(BindingTable + 5) & 0xff
   \   00004F   28           ADD     A,R0
   \   000050   F582         MOV     DPL,A
   \   000052   74..         MOV     A,#((BindingTable + 5) >> 8) & 0xff
   \   000054   39           ADDC    A,R1
   \   000055   F583         MOV     DPH,A
   \   000057   E0           MOVX    A,@DPTR
   \   000058   F8           MOV     R0,A
   \   000059   7900         MOV     R1,#0x0
   \   00005B   EA           MOV     A,R2
   \   00005C   28           ADD     A,R0
   \   00005D   FA           MOV     R2,A
   \   00005E   EB           MOV     A,R3
   \   00005F   39           ADDC    A,R1
   \   000060   FB           MOV     R3,A
    208              }
    209            }
   \                     ??bindNumOfEntries_2:
   \   000061   0C           INC     R4
   \                     ??bindNumOfEntries_0:
   \   000062   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000065   E4           CLR     A
   \   000066   93           MOVC    A,@A+DPTR
   \   000067   F8           MOV     R0,A
   \   000068   EC           MOV     A,R4
   \   000069   C3           CLR     C
   \   00006A   98           SUBB    A,R0
   \   00006B   409F         JC      ??bindNumOfEntries_1
    210          
    211            return ( found );
   \   00006D   D083         POP     DPH
   \   00006F   D082         POP     DPL
   \   000071   02....       LJMP    ?BRET
    212          }
    213          
    214          /*********************************************************************
    215           * @fn      bindCapacity()
    216           *
    217           * @brief   This function returns the number of binding entries
    218           *          possible and used.
    219           *
    220           * @param   maxEntries - pointer to a place to put the max entries
    221           * @param   usedEntries - pointer to a place to put the number
    222           *               of used entries
    223           *
    224           * @return  none
    225           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    226          void bindCapacity( uint16 *maxEntries, uint16 *usedEntries  )
   \                     bindCapacity:
    227          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    228            bindTableIndex_t x;
    229            bindTableIndex_t used;
    230          
    231            for ( used = 0, x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   000005   7E00         MOV     R6,#0x0
   \   000007   7F00         MOV     R7,#0x0
   \   000009   802E         SJMP    ??bindCapacity_0
    232            {
    233              // It's empty if the index is "Not Found"
    234              if ( BindingTable[x].srcEP != NV_BIND_EMPTY )
   \                     ??bindCapacity_1:
   \   00000B   EF           MOV     A,R7
   \   00000C   F8           MOV     R0,A
   \   00000D   7900         MOV     R1,#0x0
   \   00000F   E8           MOV     A,R0
   \   000010   75F00E       MOV     B,#0xe
   \   000013   A4           MUL     AB
   \   000014   C8           XCH     A,R0
   \   000015   85F0..       MOV     ?V0,B
   \   000018   75F000       MOV     B,#0x0
   \   00001B   A4           MUL     AB
   \   00001C   25..         ADD     A,?V0
   \   00001E   F5..         MOV     ?V0,A
   \   000020   75F00E       MOV     B,#0xe
   \   000023   E9           MOV     A,R1
   \   000024   A4           MUL     AB
   \   000025   25..         ADD     A,?V0
   \   000027   F9           MOV     R1,A
   \   000028   74..         MOV     A,#BindingTable & 0xff
   \   00002A   28           ADD     A,R0
   \   00002B   F582         MOV     DPL,A
   \   00002D   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   00002F   39           ADDC    A,R1
   \   000030   F583         MOV     DPH,A
   \   000032   E0           MOVX    A,@DPTR
   \   000033   64FF         XRL     A,#0xff
   \   000035   6001         JZ      ??bindCapacity_2
    235              {
    236                used++;
   \   000037   0E           INC     R6
    237              }
    238            }
   \                     ??bindCapacity_2:
   \   000038   0F           INC     R7
   \                     ??bindCapacity_0:
   \   000039   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   00003C   E4           CLR     A
   \   00003D   93           MOVC    A,@A+DPTR
   \   00003E   F8           MOV     R0,A
   \   00003F   EF           MOV     A,R7
   \   000040   C3           CLR     C
   \   000041   98           SUBB    A,R0
   \   000042   40C7         JC      ??bindCapacity_1
    239          
    240            *maxEntries = gNWK_MAX_BINDING_ENTRIES;
   \   000044   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000047   E4           CLR     A
   \   000048   93           MOVC    A,@A+DPTR
   \   000049   F8           MOV     R0,A
   \   00004A   7900         MOV     R1,#0x0
   \   00004C   8A82         MOV     DPL,R2
   \   00004E   8B83         MOV     DPH,R3
   \   000050   E8           MOV     A,R0
   \   000051   F0           MOVX    @DPTR,A
   \   000052   A3           INC     DPTR
   \   000053   E9           MOV     A,R1
   \   000054   F0           MOVX    @DPTR,A
    241            *usedEntries = used;
   \   000055   7F00         MOV     R7,#0x0
   \   000057   8C82         MOV     DPL,R4
   \   000059   8D83         MOV     DPH,R5
   \   00005B   EE           MOV     A,R6
   \   00005C   F0           MOVX    @DPTR,A
   \   00005D   A3           INC     DPTR
   \   00005E   EF           MOV     A,R7
   \   00005F   F0           MOVX    @DPTR,A
    242          }
   \   000060   7F01         MOV     R7,#0x1
   \   000062   02....       LJMP    ?BANKED_LEAVE_XDATA
    243          
    244          /*********************************************************************
    245           * @fn      bindAddEntry()
    246           *
    247           * @brief   This function is used to Add an entry to the binding table
    248           *
    249           * @param       srcEpInt - source endpoint
    250           * @param       dstAddr - destination Address
    251           * @param       dstEpInt - destination endpoint
    252           * @param       numClusterIds - number of cluster Ids in the list
    253           * @param       clusterIds - pointer to the Object ID list
    254           *
    255           * @return  pointer to binding table entry, NULL if not added
    256           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    257          BindingEntry_t *bindAddEntry( byte srcEpInt,
   \                     bindAddEntry:
    258                                        zAddrType_t *dstAddr, byte dstEpInt,
    259                                        byte numClusterIds, uint16 *clusterIds )
    260          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V7,R1
   \   00000C   8A..         MOV     ?V0,R2
   \   00000E   8B..         MOV     ?V1,R3
   \   000010   8C..         MOV     ?V3,R4
   \   000012   8D..         MOV     ?V2,R5
    261            uint8            index;
    262            bindTableIndex_t bindIdx;
    263            BindingEntry_t*  entry;
    264            bindFields_t     fields;
    265          
    266            // initialize results
    267            entry = NULL;
   \   000014   7E00         MOV     R6,#0x0
   \   000016   7F00         MOV     R7,#0x0
    268          
    269            // make sure local addresses have been loaded
    270            bindAddrMgrLocalLoad();
   \   000018                ; Setup parameters for call to function bindAddrMgrLocalLoad
   \   000018   12....       LCALL   `??bindAddrMgrLocalLoad::?relay`; Banked call to: bindAddrMgrLocalLoad
    271          
    272            // setup fields
    273            fields.dstIndex = bindAddrIndexGet( dstAddr );
   \   00001B                ; Setup parameters for call to function bindAddrIndexGet
   \   00001B   AA..         MOV     R2,?V0
   \   00001D   AB..         MOV     R3,?V1
   \   00001F   12....       LCALL   `??bindAddrIndexGet::?relay`; Banked call to: bindAddrIndexGet
   \   000022   7403         MOV     A,#0x3
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   EA           MOV     A,R2
   \   000028   F0           MOVX    @DPTR,A
   \   000029   A3           INC     DPTR
   \   00002A   EB           MOV     A,R3
   \   00002B   F0           MOVX    @DPTR,A
    274            fields.srcEP    = srcEpInt;
   \   00002C   E5..         MOV     A,?V7
   \   00002E   C0E0         PUSH    A
   \   000030   85..82       MOV     DPL,?XSP + 0
   \   000033   85..83       MOV     DPH,?XSP + 1
   \   000036   D0E0         POP     A
   \   000038   F0           MOVX    @DPTR,A
    275          
    276            if ( dstAddr->addrMode == AddrGroup )
   \   000039   85..82       MOV     DPL,?V0
   \   00003C   85..83       MOV     DPH,?V1
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   6401         XRL     A,#0x1
   \   00004A   7012         JNZ     ??bindAddEntry_0
    277            {
    278              fields.dstAddrMode = DSTGROUPMODE_GROUP;
   \   00004C   7406         MOV     A,#0x6
   \   00004E   12....       LCALL   ?XSTACK_DISP0_8
   \   000051   7401         MOV     A,#0x1
   \   000053   F0           MOVX    @DPTR,A
    279              fields.dstEP       = 0;
   \   000054   7405         MOV     A,#0x5
   \   000056   12....       LCALL   ?XSTACK_DISP0_8
   \   000059   7400         MOV     A,#0x0
   \   00005B   F0           MOVX    @DPTR,A
   \   00005C   8014         SJMP    ??bindAddEntry_1
    280            }
    281            else
    282            {
    283              fields.dstAddrMode = DSTGROUPMODE_ADDR;
   \                     ??bindAddEntry_0:
   \   00005E   7406         MOV     A,#0x6
   \   000060   12....       LCALL   ?XSTACK_DISP0_8
   \   000063   7400         MOV     A,#0x0
   \   000065   F0           MOVX    @DPTR,A
    284              fields.dstEP       = dstEpInt;
   \   000066   E5..         MOV     A,?V3
   \   000068   C0E0         PUSH    A
   \   00006A   7405         MOV     A,#0x5
   \   00006C   12....       LCALL   ?XSTACK_DISP0_8
   \   00006F   D0E0         POP     A
   \   000071   F0           MOVX    @DPTR,A
    285            }
    286          
    287            if ( fields.dstIndex != INVALID_NODE_ADDR  )
   \                     ??bindAddEntry_1:
   \   000072   7403         MOV     A,#0x3
   \   000074   12....       LCALL   ?XSTACK_DISP0_8
   \   000077   E0           MOVX    A,@DPTR
   \   000078   64FE         XRL     A,#0xfe
   \   00007A   7004         JNZ     ??bindAddEntry_2
   \   00007C   A3           INC     DPTR
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   64FF         XRL     A,#0xff
   \                     ??bindAddEntry_2:
   \   000080   7003         JNZ     $+5
   \   000082   02....       LJMP    ??bindAddEntry_3 & 0xFFFF
    288            {
    289              for ( bindIdx = 0; bindIdx < gNWK_MAX_BINDING_ENTRIES; bindIdx++ )
   \   000085   7A00         MOV     R2,#0x0
   \   000087   8001         SJMP    ??bindAddEntry_4
   \                     ??bindAddEntry_5:
   \   000089   0A           INC     R2
   \                     ??bindAddEntry_4:
   \   00008A   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   00008D   E4           CLR     A
   \   00008E   93           MOVC    A,@A+DPTR
   \   00008F   F8           MOV     R0,A
   \   000090   EA           MOV     A,R2
   \   000091   C3           CLR     C
   \   000092   98           SUBB    A,R0
   \   000093   4003         JC      $+5
   \   000095   02....       LJMP    ??bindAddEntry_6 & 0xFFFF
    290              {
    291                if ( ( fields.srcEP       == BindingTable[bindIdx].srcEP        ) &&
    292                     ( fields.dstAddrMode == BindingTable[bindIdx].dstGroupMode ) &&
    293                     ( fields.dstIndex    == BindingTable[bindIdx].dstIdx       ) &&
    294                     ( fields.dstEP       == BindingTable[bindIdx].dstEP        )    )
   \   000098   85..82       MOV     DPL,?XSP + 0
   \   00009B   85..83       MOV     DPH,?XSP + 1
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   FC           MOV     R4,A
   \   0000A0   EA           MOV     A,R2
   \   0000A1   F8           MOV     R0,A
   \   0000A2   7900         MOV     R1,#0x0
   \   0000A4   E8           MOV     A,R0
   \   0000A5   75F00E       MOV     B,#0xe
   \   0000A8   A4           MUL     AB
   \   0000A9   C8           XCH     A,R0
   \   0000AA   ABF0         MOV     R3,B
   \   0000AC   75F000       MOV     B,#0x0
   \   0000AF   A4           MUL     AB
   \   0000B0   2B           ADD     A,R3
   \   0000B1   FB           MOV     R3,A
   \   0000B2   75F00E       MOV     B,#0xe
   \   0000B5   E9           MOV     A,R1
   \   0000B6   A4           MUL     AB
   \   0000B7   2B           ADD     A,R3
   \   0000B8   F9           MOV     R1,A
   \   0000B9   74..         MOV     A,#BindingTable & 0xff
   \   0000BB   28           ADD     A,R0
   \   0000BC   F582         MOV     DPL,A
   \   0000BE   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   0000C0   39           ADDC    A,R1
   \   0000C1   F583         MOV     DPH,A
   \   0000C3   E0           MOVX    A,@DPTR
   \   0000C4   6C           XRL     A,R4
   \   0000C5   70C2         JNZ     ??bindAddEntry_5
   \   0000C7   7406         MOV     A,#0x6
   \   0000C9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CC   E0           MOVX    A,@DPTR
   \   0000CD   FC           MOV     R4,A
   \   0000CE   EA           MOV     A,R2
   \   0000CF   F8           MOV     R0,A
   \   0000D0   7900         MOV     R1,#0x0
   \   0000D2   E8           MOV     A,R0
   \   0000D3   75F00E       MOV     B,#0xe
   \   0000D6   A4           MUL     AB
   \   0000D7   C8           XCH     A,R0
   \   0000D8   ABF0         MOV     R3,B
   \   0000DA   75F000       MOV     B,#0x0
   \   0000DD   A4           MUL     AB
   \   0000DE   2B           ADD     A,R3
   \   0000DF   FB           MOV     R3,A
   \   0000E0   75F00E       MOV     B,#0xe
   \   0000E3   E9           MOV     A,R1
   \   0000E4   A4           MUL     AB
   \   0000E5   2B           ADD     A,R3
   \   0000E6   F9           MOV     R1,A
   \   0000E7   74..         MOV     A,#(BindingTable + 1) & 0xff
   \   0000E9   28           ADD     A,R0
   \   0000EA   F582         MOV     DPL,A
   \   0000EC   74..         MOV     A,#((BindingTable + 1) >> 8) & 0xff
   \   0000EE   39           ADDC    A,R1
   \   0000EF   F583         MOV     DPH,A
   \   0000F1   E0           MOVX    A,@DPTR
   \   0000F2   6C           XRL     A,R4
   \   0000F3   7094         JNZ     ??bindAddEntry_5
   \   0000F5   7403         MOV     A,#0x3
   \   0000F7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FA   E0           MOVX    A,@DPTR
   \   0000FB   FC           MOV     R4,A
   \   0000FC   A3           INC     DPTR
   \   0000FD   E0           MOVX    A,@DPTR
   \   0000FE   FD           MOV     R5,A
   \   0000FF   EA           MOV     A,R2
   \   000100   F8           MOV     R0,A
   \   000101   7900         MOV     R1,#0x0
   \   000103   E8           MOV     A,R0
   \   000104   75F00E       MOV     B,#0xe
   \   000107   A4           MUL     AB
   \   000108   C8           XCH     A,R0
   \   000109   ABF0         MOV     R3,B
   \   00010B   75F000       MOV     B,#0x0
   \   00010E   A4           MUL     AB
   \   00010F   2B           ADD     A,R3
   \   000110   FB           MOV     R3,A
   \   000111   75F00E       MOV     B,#0xe
   \   000114   E9           MOV     A,R1
   \   000115   A4           MUL     AB
   \   000116   2B           ADD     A,R3
   \   000117   F9           MOV     R1,A
   \   000118   74..         MOV     A,#(BindingTable + 2) & 0xff
   \   00011A   28           ADD     A,R0
   \   00011B   F582         MOV     DPL,A
   \   00011D   74..         MOV     A,#((BindingTable + 2) >> 8) & 0xff
   \   00011F   39           ADDC    A,R1
   \   000120   F583         MOV     DPH,A
   \   000122   E0           MOVX    A,@DPTR
   \   000123   6C           XRL     A,R4
   \   000124   7003         JNZ     ??bindAddEntry_7
   \   000126   A3           INC     DPTR
   \   000127   E0           MOVX    A,@DPTR
   \   000128   6D           XRL     A,R5
   \                     ??bindAddEntry_7:
   \   000129   6003         JZ      $+5
   \   00012B   02....       LJMP    ??bindAddEntry_5 & 0xFFFF
   \   00012E   7405         MOV     A,#0x5
   \   000130   12....       LCALL   ?XSTACK_DISP0_8
   \   000133   E0           MOVX    A,@DPTR
   \   000134   FC           MOV     R4,A
   \   000135   EA           MOV     A,R2
   \   000136   F8           MOV     R0,A
   \   000137   7900         MOV     R1,#0x0
   \   000139   E8           MOV     A,R0
   \   00013A   75F00E       MOV     B,#0xe
   \   00013D   A4           MUL     AB
   \   00013E   C8           XCH     A,R0
   \   00013F   ABF0         MOV     R3,B
   \   000141   75F000       MOV     B,#0x0
   \   000144   A4           MUL     AB
   \   000145   2B           ADD     A,R3
   \   000146   FB           MOV     R3,A
   \   000147   75F00E       MOV     B,#0xe
   \   00014A   E9           MOV     A,R1
   \   00014B   A4           MUL     AB
   \   00014C   2B           ADD     A,R3
   \   00014D   F9           MOV     R1,A
   \   00014E   74..         MOV     A,#(BindingTable + 4) & 0xff
   \   000150   28           ADD     A,R0
   \   000151   F582         MOV     DPL,A
   \   000153   74..         MOV     A,#((BindingTable + 4) >> 8) & 0xff
   \   000155   39           ADDC    A,R1
   \   000156   F583         MOV     DPH,A
   \   000158   E0           MOVX    A,@DPTR
   \   000159   6C           XRL     A,R4
   \   00015A   6003         JZ      $+5
   \   00015C   02....       LJMP    ??bindAddEntry_5 & 0xFFFF
    295                {
    296                  entry = &BindingTable[bindIdx];
   \   00015F   EA           MOV     A,R2
   \   000160   F8           MOV     R0,A
   \   000161   7900         MOV     R1,#0x0
   \   000163   E8           MOV     A,R0
   \   000164   75F00E       MOV     B,#0xe
   \   000167   A4           MUL     AB
   \   000168   C8           XCH     A,R0
   \   000169   AAF0         MOV     R2,B
   \   00016B   75F000       MOV     B,#0x0
   \   00016E   A4           MUL     AB
   \   00016F   2A           ADD     A,R2
   \   000170   FA           MOV     R2,A
   \   000171   75F00E       MOV     B,#0xe
   \   000174   E9           MOV     A,R1
   \   000175   A4           MUL     AB
   \   000176   2A           ADD     A,R2
   \   000177   F9           MOV     R1,A
   \   000178   74..         MOV     A,#BindingTable & 0xff
   \   00017A   28           ADD     A,R0
   \   00017B   FE           MOV     R6,A
   \   00017C   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   00017E   39           ADDC    A,R1
   \   00017F   FF           MOV     R7,A
    297          
    298                  // break from loop
    299                  break;
   \                     ??bindAddEntry_6:
   \   000180   741A         MOV     A,#0x1a
   \   000182   12....       LCALL   ?XSTACK_DISP0_8
   \   000185   E0           MOVX    A,@DPTR
   \   000186   F5..         MOV     ?V0,A
   \   000188   A3           INC     DPTR
   \   000189   E0           MOVX    A,@DPTR
   \   00018A   F5..         MOV     ?V1,A
    300                }
    301              }
    302          
    303              if ( entry != NULL )
   \   00018C   EE           MOV     A,R6
   \   00018D   4F           ORL     A,R7
   \   00018E   6079         JZ      ??bindAddEntry_8
    304              {
    305                // Loop through the cluster IDs
    306                for ( index = 0; index < numClusterIds; index++ )
   \   000190   75..00       MOV     ?V4,#0x0
   \                     ??bindAddEntry_9:
   \   000193   E5..         MOV     A,?V4
   \   000195   C3           CLR     C
   \   000196   95..         SUBB    A,?V2
   \   000198   4003         JC      $+5
   \   00019A   02....       LJMP    ??bindAddEntry_3 & 0xFFFF
    307                {
    308                  // Found - is the cluster already defined?
    309                  if ( bindIsClusterIDinList( entry, clusterIds[index] ) == FALSE )
   \   00019D                ; Setup parameters for call to function bindIsClusterIDinList
   \   00019D   A8..         MOV     R0,?V4
   \   00019F   7900         MOV     R1,#0x0
   \   0001A1   E8           MOV     A,R0
   \   0001A2   75F002       MOV     B,#0x2
   \   0001A5   A4           MUL     AB
   \   0001A6   C8           XCH     A,R0
   \   0001A7   AAF0         MOV     R2,B
   \   0001A9   75F000       MOV     B,#0x0
   \   0001AC   A4           MUL     AB
   \   0001AD   2A           ADD     A,R2
   \   0001AE   FA           MOV     R2,A
   \   0001AF   75F002       MOV     B,#0x2
   \   0001B2   E9           MOV     A,R1
   \   0001B3   A4           MUL     AB
   \   0001B4   2A           ADD     A,R2
   \   0001B5   F9           MOV     R1,A
   \   0001B6   E5..         MOV     A,?V0
   \   0001B8   28           ADD     A,R0
   \   0001B9   F582         MOV     DPL,A
   \   0001BB   E5..         MOV     A,?V1
   \   0001BD   39           ADDC    A,R1
   \   0001BE   F583         MOV     DPH,A
   \   0001C0   E0           MOVX    A,@DPTR
   \   0001C1   FC           MOV     R4,A
   \   0001C2   A3           INC     DPTR
   \   0001C3   E0           MOVX    A,@DPTR
   \   0001C4   FD           MOV     R5,A
   \   0001C5   EE           MOV     A,R6
   \   0001C6   FA           MOV     R2,A
   \   0001C7   EF           MOV     A,R7
   \   0001C8   FB           MOV     R3,A
   \   0001C9   12....       LCALL   `??bindIsClusterIDinList::?relay`; Banked call to: bindIsClusterIDinList
   \   0001CC   E9           MOV     A,R1
   \   0001CD   7036         JNZ     ??bindAddEntry_10
    310                  {
    311                    // Nope, add this cluster
    312                    if ( bindAddClusterIdToList( entry, clusterIds[index] ) == FALSE )
   \   0001CF                ; Setup parameters for call to function bindAddClusterIdToList
   \   0001CF   A8..         MOV     R0,?V4
   \   0001D1   7900         MOV     R1,#0x0
   \   0001D3   E8           MOV     A,R0
   \   0001D4   75F002       MOV     B,#0x2
   \   0001D7   A4           MUL     AB
   \   0001D8   C8           XCH     A,R0
   \   0001D9   AAF0         MOV     R2,B
   \   0001DB   75F000       MOV     B,#0x0
   \   0001DE   A4           MUL     AB
   \   0001DF   2A           ADD     A,R2
   \   0001E0   FA           MOV     R2,A
   \   0001E1   75F002       MOV     B,#0x2
   \   0001E4   E9           MOV     A,R1
   \   0001E5   A4           MUL     AB
   \   0001E6   2A           ADD     A,R2
   \   0001E7   F9           MOV     R1,A
   \   0001E8   E5..         MOV     A,?V0
   \   0001EA   28           ADD     A,R0
   \   0001EB   F582         MOV     DPL,A
   \   0001ED   E5..         MOV     A,?V1
   \   0001EF   39           ADDC    A,R1
   \   0001F0   F583         MOV     DPH,A
   \   0001F2   E0           MOVX    A,@DPTR
   \   0001F3   FC           MOV     R4,A
   \   0001F4   A3           INC     DPTR
   \   0001F5   E0           MOVX    A,@DPTR
   \   0001F6   FD           MOV     R5,A
   \   0001F7   EE           MOV     A,R6
   \   0001F8   FA           MOV     R2,A
   \   0001F9   EF           MOV     A,R7
   \   0001FA   FB           MOV     R3,A
   \   0001FB   12....       LCALL   `??bindAddClusterIdToList::?relay`; Banked call to: bindAddClusterIdToList
   \   0001FE   E9           MOV     A,R1
   \   0001FF   7004         JNZ     ??bindAddEntry_10
    313                    {
    314                      // Indicate error if cluster list was full
    315                      entry = NULL;
   \   000201   7E00         MOV     R6,#0x0
   \   000203   7F00         MOV     R7,#0x0
    316                    }
    317                  }
    318                }
   \                     ??bindAddEntry_10:
   \   000205   05..         INC     ?V4
   \   000207   808A         SJMP    ??bindAddEntry_9
    319              }
    320              else
    321              {
    322                // Find an empty slot
    323                entry = bindFindEmpty();
   \                     ??bindAddEntry_8:
   \   000209                ; Setup parameters for call to function bindFindEmpty
   \   000209   12....       LCALL   `??bindFindEmpty::?relay`; Banked call to: bindFindEmpty
   \   00020C   8A..         MOV     ?V4,R2
   \   00020E   8B..         MOV     ?V5,R3
   \   000210   AE..         MOV     R6,?V4
   \   000212   AF..         MOV     R7,?V5
    324          
    325                // Check against the maximum number allowed
    326                if ( entry != NULL )
   \   000214   EE           MOV     A,R6
   \   000215   4F           ORL     A,R7
   \   000216   7003         JNZ     $+5
   \   000218   02....       LJMP    ??bindAddEntry_3 & 0xFFFF
    327                {
    328                  // Add new entry
    329                  entry->srcEP         = fields.srcEP;
   \   00021B   85..82       MOV     DPL,?XSP + 0
   \   00021E   85..83       MOV     DPH,?XSP + 1
   \   000221   E0           MOVX    A,@DPTR
   \   000222   C0E0         PUSH    A
   \   000224   8E82         MOV     DPL,R6
   \   000226   8F83         MOV     DPH,R7
   \   000228   D0E0         POP     A
   \   00022A   F0           MOVX    @DPTR,A
    330                  entry->dstGroupMode  = fields.dstAddrMode;
   \   00022B   7406         MOV     A,#0x6
   \   00022D   12....       LCALL   ?XSTACK_DISP0_8
   \   000230   E0           MOVX    A,@DPTR
   \   000231   C0E0         PUSH    A
   \   000233   8E82         MOV     DPL,R6
   \   000235   8F83         MOV     DPH,R7
   \   000237   A3           INC     DPTR
   \   000238   D0E0         POP     A
   \   00023A   F0           MOVX    @DPTR,A
    331                  entry->dstIdx        = fields.dstIndex;
   \   00023B   7403         MOV     A,#0x3
   \   00023D   12....       LCALL   ?XSTACK_DISP0_8
   \   000240   E0           MOVX    A,@DPTR
   \   000241   F8           MOV     R0,A
   \   000242   A3           INC     DPTR
   \   000243   E0           MOVX    A,@DPTR
   \   000244   F9           MOV     R1,A
   \   000245   8E82         MOV     DPL,R6
   \   000247   8F83         MOV     DPH,R7
   \   000249   A3           INC     DPTR
   \   00024A   A3           INC     DPTR
   \   00024B   E8           MOV     A,R0
   \   00024C   F0           MOVX    @DPTR,A
   \   00024D   A3           INC     DPTR
   \   00024E   E9           MOV     A,R1
   \   00024F   F0           MOVX    @DPTR,A
    332                  entry->dstEP         = fields.dstEP;
   \   000250   7405         MOV     A,#0x5
   \   000252   12....       LCALL   ?XSTACK_DISP0_8
   \   000255   E0           MOVX    A,@DPTR
   \   000256   C0E0         PUSH    A
   \   000258   8E82         MOV     DPL,R6
   \   00025A   8F83         MOV     DPH,R7
   \   00025C   A3           INC     DPTR
   \   00025D   A3           INC     DPTR
   \   00025E   A3           INC     DPTR
   \   00025F   A3           INC     DPTR
   \   000260   D0E0         POP     A
   \   000262   F0           MOVX    @DPTR,A
    333          
    334                  if ( numClusterIds > gMAX_BINDING_CLUSTER_IDS )
   \   000263   90....       MOV     DPTR,#gMAX_BINDING_CLUSTER_IDS
   \   000266   E4           CLR     A
   \   000267   93           MOVC    A,@A+DPTR
   \   000268   C3           CLR     C
   \   000269   95..         SUBB    A,?V2
   \   00026B   5007         JNC     ??bindAddEntry_11
    335                  {
    336                    numClusterIds = gMAX_BINDING_CLUSTER_IDS;
   \   00026D   90....       MOV     DPTR,#gMAX_BINDING_CLUSTER_IDS
   \   000270   E4           CLR     A
   \   000271   93           MOVC    A,@A+DPTR
   \   000272   F5..         MOV     ?V2,A
    337                  }
    338          
    339                  entry->numClusterIds = numClusterIds;
   \                     ??bindAddEntry_11:
   \   000274   E5..         MOV     A,?V2
   \   000276   C0E0         PUSH    A
   \   000278   8E82         MOV     DPL,R6
   \   00027A   8F83         MOV     DPH,R7
   \   00027C   A3           INC     DPTR
   \   00027D   A3           INC     DPTR
   \   00027E   A3           INC     DPTR
   \   00027F   A3           INC     DPTR
   \   000280   A3           INC     DPTR
   \   000281   D0E0         POP     A
   \   000283   F0           MOVX    @DPTR,A
    340          
    341                  osal_memcpy( entry->clusterIdList,
    342                               clusterIds,
    343                               numClusterIds * sizeof(uint16) );
   \   000284                ; Setup parameters for call to function osal_memcpy
   \   000284   85....       MOV     ?V4,?V0
   \   000287   85....       MOV     ?V5,?V1
   \   00028A   75..00       MOV     ?V6,#0x0
   \   00028D   78..         MOV     R0,#?V4
   \   00028F   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000292   AC..         MOV     R4,?V2
   \   000294   7D00         MOV     R5,#0x0
   \   000296   EC           MOV     A,R4
   \   000297   75F002       MOV     B,#0x2
   \   00029A   A4           MUL     AB
   \   00029B   CC           XCH     A,R4
   \   00029C   A8F0         MOV     R0,B
   \   00029E   75F000       MOV     B,#0x0
   \   0002A1   A4           MUL     AB
   \   0002A2   28           ADD     A,R0
   \   0002A3   F8           MOV     R0,A
   \   0002A4   75F002       MOV     B,#0x2
   \   0002A7   ED           MOV     A,R5
   \   0002A8   A4           MUL     AB
   \   0002A9   28           ADD     A,R0
   \   0002AA   FD           MOV     R5,A
   \   0002AB   EE           MOV     A,R6
   \   0002AC   2406         ADD     A,#0x6
   \   0002AE   FA           MOV     R2,A
   \   0002AF   E4           CLR     A
   \   0002B0   3F           ADDC    A,R7
   \   0002B1   FB           MOV     R3,A
   \   0002B2   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0002B5   7403         MOV     A,#0x3
   \   0002B7   12....       LCALL   ?DEALLOC_XSTACK8
    344                }
    345              }
    346            }
    347          
    348            return entry;
   \                     ??bindAddEntry_3:
   \   0002BA   EE           MOV     A,R6
   \   0002BB   FA           MOV     R2,A
   \   0002BC   EF           MOV     A,R7
   \   0002BD   FB           MOV     R3,A
   \   0002BE   740A         MOV     A,#0xa
   \   0002C0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002C3   7F08         MOV     R7,#0x8
   \   0002C5   02....       LJMP    ?BANKED_LEAVE_XDATA
    349          }
    350          
    351          /*********************************************************************
    352           * @fn      bindRemoveEntry
    353           *
    354           * @brief   Removes a binding table entry.
    355           *
    356           * @param   pBind - pointer to binding table entry to delete
    357           *
    358           * @return  TRUE if Removed, FALSE if not
    359           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    360          byte bindRemoveEntry( BindingEntry_t *pBind )
   \                     bindRemoveEntry:
    361          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    362            osal_memset( pBind, 0xFF, gBIND_REC_SIZE );
   \   000004                ; Setup parameters for call to function osal_memset
   \   000004   90....       MOV     DPTR,#gBIND_REC_SIZE
   \   000007   E4           CLR     A
   \   000008   93           MOVC    A,@A+DPTR
   \   000009   FC           MOV     R4,A
   \   00000A   7401         MOV     A,#0x1
   \   00000C   93           MOVC    A,@A+DPTR
   \   00000D   FD           MOV     R5,A
   \   00000E   79FF         MOV     R1,#-0x1
   \   000010   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    363            return ( TRUE );
   \   000013   7901         MOV     R1,#0x1
   \   000015   D083         POP     DPH
   \   000017   D082         POP     DPL
   \   000019   02....       LJMP    ?BRET
    364          }
    365          
    366          /*********************************************************************
    367           * @fn      bindIsClusterIDinList()
    368           *
    369           * @brief   Is the clusterID in the clusterID list?
    370           *
    371           * @param   enter - binding table entry
    372           * @param   clusterId  - Cluster ID to look for
    373           *
    374           * @return  TRUE if found, FALSE if not found
    375           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    376          byte bindIsClusterIDinList( BindingEntry_t *entry, uint16 clusterId )
   \                     bindIsClusterIDinList:
    377          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    378            uint8 x;
    379          
    380            if ( entry != NULL )
   \   000005   EA           MOV     A,R2
   \   000006   4B           ORL     A,R3
   \   000007   6049         JZ      ??bindIsClusterIDinList_0
    381            {
    382              for ( x = 0; x < entry->numClusterIds; x++ )
   \   000009   7E00         MOV     R6,#0x0
   \   00000B   8001         SJMP    ??bindIsClusterIDinList_1
   \                     ??bindIsClusterIDinList_2:
   \   00000D   0E           INC     R6
   \                     ??bindIsClusterIDinList_1:
   \   00000E   8A82         MOV     DPL,R2
   \   000010   8B83         MOV     DPH,R3
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F8           MOV     R0,A
   \   000019   EE           MOV     A,R6
   \   00001A   C3           CLR     C
   \   00001B   98           SUBB    A,R0
   \   00001C   5034         JNC     ??bindIsClusterIDinList_0
    383              {
    384                if ( entry->clusterIdList[x] == clusterId )
   \   00001E   EE           MOV     A,R6
   \   00001F   F8           MOV     R0,A
   \   000020   7900         MOV     R1,#0x0
   \   000022   E8           MOV     A,R0
   \   000023   75F002       MOV     B,#0x2
   \   000026   A4           MUL     AB
   \   000027   C8           XCH     A,R0
   \   000028   AFF0         MOV     R7,B
   \   00002A   75F000       MOV     B,#0x0
   \   00002D   A4           MUL     AB
   \   00002E   2F           ADD     A,R7
   \   00002F   FF           MOV     R7,A
   \   000030   75F002       MOV     B,#0x2
   \   000033   E9           MOV     A,R1
   \   000034   A4           MUL     AB
   \   000035   2F           ADD     A,R7
   \   000036   F9           MOV     R1,A
   \   000037   EA           MOV     A,R2
   \   000038   28           ADD     A,R0
   \   000039   F582         MOV     DPL,A
   \   00003B   EB           MOV     A,R3
   \   00003C   39           ADDC    A,R1
   \   00003D   F583         MOV     DPH,A
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   E0           MOVX    A,@DPTR
   \   000046   6C           XRL     A,R4
   \   000047   7003         JNZ     ??bindIsClusterIDinList_3
   \   000049   A3           INC     DPTR
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   6D           XRL     A,R5
   \                     ??bindIsClusterIDinList_3:
   \   00004C   70BF         JNZ     ??bindIsClusterIDinList_2
    385                {
    386                  return ( TRUE );
   \   00004E   7901         MOV     R1,#0x1
   \   000050   8002         SJMP    ??bindIsClusterIDinList_4
    387                }
    388              }
    389            }
    390          
    391            return ( FALSE );
   \                     ??bindIsClusterIDinList_0:
   \   000052   7900         MOV     R1,#0x0
   \                     ??bindIsClusterIDinList_4:
   \   000054   7F01         MOV     R7,#0x1
   \   000056   02....       LJMP    ?BANKED_LEAVE_XDATA
    392          }
    393          
    394          /*********************************************************************
    395           * @fn      bindRemoveClusterIdFromList()
    396           *
    397           * @brief   Removes a ClusterID from a list of ClusterIDs.
    398           *
    399           * @param   enter - binding table entry
    400           * @param   clusterId  - Cluster ID to look for
    401           *
    402           * @return  TRUE if there are at least 1 clusterID left, FALSE if none
    403           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    404          byte bindRemoveClusterIdFromList( BindingEntry_t *entry, uint16 clusterId )
   \                     bindRemoveClusterIdFromList:
    405          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   EC           MOV     A,R4
   \   000006   FE           MOV     R6,A
   \   000007   ED           MOV     A,R5
   \   000008   FF           MOV     R7,A
    406            byte x;
    407            uint16 *listPtr;
    408            byte numIds;
    409          
    410            if ( entry )
   \   000009   EA           MOV     A,R2
   \   00000A   4B           ORL     A,R3
   \   00000B   7003         JNZ     $+5
   \   00000D   02....       LJMP    ??bindRemoveClusterIdFromList_0 & 0xFFFF
    411            {
    412              if ( entry->numClusterIds > 0 )
   \   000010   8A82         MOV     DPL,R2
   \   000012   8B83         MOV     DPH,R3
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   7003         JNZ     $+5
   \   00001C   02....       LJMP    ??bindRemoveClusterIdFromList_0 & 0xFFFF
    413              {
    414                listPtr = entry->clusterIdList;
   \   00001F   EA           MOV     A,R2
   \   000020   2406         ADD     A,#0x6
   \   000022   FC           MOV     R4,A
   \   000023   E4           CLR     A
   \   000024   3B           ADDC    A,R3
   \   000025   FD           MOV     R5,A
    415                numIds = entry->numClusterIds;
   \   000026   8A82         MOV     DPL,R2
   \   000028   8B83         MOV     DPH,R3
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F5..         MOV     ?V1,A
    416          
    417                // Copy the new list over
    418                for ( x = 0; x < numIds; x++ )
   \   000032   75..00       MOV     ?V0,#0x0
   \   000035   8046         SJMP    ??bindRemoveClusterIdFromList_1
    419                {
    420                  if ( entry->clusterIdList[x] != clusterId )
    421                  {
    422                    *listPtr++ = entry->clusterIdList[x];
   \                     ??bindRemoveClusterIdFromList_2:
   \   000037   A8..         MOV     R0,?V0
   \   000039   7900         MOV     R1,#0x0
   \   00003B   E8           MOV     A,R0
   \   00003C   75F002       MOV     B,#0x2
   \   00003F   A4           MUL     AB
   \   000040   C8           XCH     A,R0
   \   000041   85F0..       MOV     ?V2,B
   \   000044   75F000       MOV     B,#0x0
   \   000047   A4           MUL     AB
   \   000048   25..         ADD     A,?V2
   \   00004A   F5..         MOV     ?V2,A
   \   00004C   75F002       MOV     B,#0x2
   \   00004F   E9           MOV     A,R1
   \   000050   A4           MUL     AB
   \   000051   25..         ADD     A,?V2
   \   000053   F9           MOV     R1,A
   \   000054   EA           MOV     A,R2
   \   000055   28           ADD     A,R0
   \   000056   F582         MOV     DPL,A
   \   000058   EB           MOV     A,R3
   \   000059   39           ADDC    A,R1
   \   00005A   F583         MOV     DPH,A
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   A3           INC     DPTR
   \   000062   E0           MOVX    A,@DPTR
   \   000063   F8           MOV     R0,A
   \   000064   A3           INC     DPTR
   \   000065   E0           MOVX    A,@DPTR
   \   000066   F9           MOV     R1,A
   \   000067   8C82         MOV     DPL,R4
   \   000069   8D83         MOV     DPH,R5
   \   00006B   E8           MOV     A,R0
   \   00006C   F0           MOVX    @DPTR,A
   \   00006D   A3           INC     DPTR
   \   00006E   E9           MOV     A,R1
   \   00006F   F0           MOVX    @DPTR,A
   \   000070   EC           MOV     A,R4
   \   000071   2402         ADD     A,#0x2
   \   000073   F8           MOV     R0,A
   \   000074   E4           CLR     A
   \   000075   3D           ADDC    A,R5
   \   000076   F9           MOV     R1,A
   \   000077   E8           MOV     A,R0
   \   000078   FC           MOV     R4,A
   \   000079   E9           MOV     A,R1
   \   00007A   FD           MOV     R5,A
    423                  }
   \                     ??bindRemoveClusterIdFromList_3:
   \   00007B   05..         INC     ?V0
   \                     ??bindRemoveClusterIdFromList_1:
   \   00007D   E5..         MOV     A,?V0
   \   00007F   C3           CLR     C
   \   000080   95..         SUBB    A,?V1
   \   000082   5050         JNC     ??bindRemoveClusterIdFromList_0
   \   000084   A8..         MOV     R0,?V0
   \   000086   7900         MOV     R1,#0x0
   \   000088   E8           MOV     A,R0
   \   000089   75F002       MOV     B,#0x2
   \   00008C   A4           MUL     AB
   \   00008D   C8           XCH     A,R0
   \   00008E   85F0..       MOV     ?V2,B
   \   000091   75F000       MOV     B,#0x0
   \   000094   A4           MUL     AB
   \   000095   25..         ADD     A,?V2
   \   000097   F5..         MOV     ?V2,A
   \   000099   75F002       MOV     B,#0x2
   \   00009C   E9           MOV     A,R1
   \   00009D   A4           MUL     AB
   \   00009E   25..         ADD     A,?V2
   \   0000A0   F9           MOV     R1,A
   \   0000A1   EA           MOV     A,R2
   \   0000A2   28           ADD     A,R0
   \   0000A3   F582         MOV     DPL,A
   \   0000A5   EB           MOV     A,R3
   \   0000A6   39           ADDC    A,R1
   \   0000A7   F583         MOV     DPH,A
   \   0000A9   A3           INC     DPTR
   \   0000AA   A3           INC     DPTR
   \   0000AB   A3           INC     DPTR
   \   0000AC   A3           INC     DPTR
   \   0000AD   A3           INC     DPTR
   \   0000AE   A3           INC     DPTR
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   6E           XRL     A,R6
   \   0000B1   7003         JNZ     ??bindRemoveClusterIdFromList_4
   \   0000B3   A3           INC     DPTR
   \   0000B4   E0           MOVX    A,@DPTR
   \   0000B5   6F           XRL     A,R7
   \                     ??bindRemoveClusterIdFromList_4:
   \   0000B6   6003         JZ      $+5
   \   0000B8   02....       LJMP    ??bindRemoveClusterIdFromList_2 & 0xFFFF
    424                  else
    425                  {
    426                    entry->numClusterIds--;
   \   0000BB   8A82         MOV     DPL,R2
   \   0000BD   8B83         MOV     DPH,R3
   \   0000BF   A3           INC     DPTR
   \   0000C0   A3           INC     DPTR
   \   0000C1   A3           INC     DPTR
   \   0000C2   A3           INC     DPTR
   \   0000C3   A3           INC     DPTR
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   24FF         ADD     A,#-0x1
   \   0000C7   F0           MOVX    @DPTR,A
    427                    if ( entry->numClusterIds == 0 )
   \   0000C8   8A82         MOV     DPL,R2
   \   0000CA   8B83         MOV     DPH,R3
   \   0000CC   A3           INC     DPTR
   \   0000CD   A3           INC     DPTR
   \   0000CE   A3           INC     DPTR
   \   0000CF   A3           INC     DPTR
   \   0000D0   A3           INC     DPTR
   \   0000D1   E0           MOVX    A,@DPTR
   \   0000D2   70A7         JNZ     ??bindRemoveClusterIdFromList_3
    428                    {
    429                      break;
    430                    }
    431                  }
    432                }
    433              }
    434            }
    435          
    436            if ( entry && (entry->numClusterIds > 0) )
   \                     ??bindRemoveClusterIdFromList_0:
   \   0000D4   EA           MOV     A,R2
   \   0000D5   4B           ORL     A,R3
   \   0000D6   6010         JZ      ??bindRemoveClusterIdFromList_5
   \   0000D8   8A82         MOV     DPL,R2
   \   0000DA   8B83         MOV     DPH,R3
   \   0000DC   A3           INC     DPTR
   \   0000DD   A3           INC     DPTR
   \   0000DE   A3           INC     DPTR
   \   0000DF   A3           INC     DPTR
   \   0000E0   A3           INC     DPTR
   \   0000E1   E0           MOVX    A,@DPTR
   \   0000E2   6004         JZ      ??bindRemoveClusterIdFromList_5
    437            {
    438              return ( TRUE );
   \   0000E4   7901         MOV     R1,#0x1
   \   0000E6   8002         SJMP    ??bindRemoveClusterIdFromList_6
    439            }
    440            else
    441            {
    442              return ( FALSE );
   \                     ??bindRemoveClusterIdFromList_5:
   \   0000E8   7900         MOV     R1,#0x0
   \                     ??bindRemoveClusterIdFromList_6:
   \   0000EA   7F03         MOV     R7,#0x3
   \   0000EC   02....       LJMP    ?BANKED_LEAVE_XDATA
    443            }
    444          }
    445          
    446          /*********************************************************************
    447           * @fn      bindAddClusterIdToList()
    448           *
    449           * @brief   Adds a ClusterID to a list of ClusterIDs.
    450           *
    451           * @param   enter - binding table entry
    452           * @param   clusterId  - Cluster ID to Add
    453           *
    454           * @return  TRUE if Added, FALSE if not
    455           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    456          byte bindAddClusterIdToList( BindingEntry_t *entry, uint16 clusterId )
   \                     bindAddClusterIdToList:
    457          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    458            if ( entry && entry->numClusterIds < gMAX_BINDING_CLUSTER_IDS )
   \   000005   EA           MOV     A,R2
   \   000006   4B           ORL     A,R3
   \   000007   605A         JZ      ??bindAddClusterIdToList_0
   \   000009   90....       MOV     DPTR,#gMAX_BINDING_CLUSTER_IDS
   \   00000C   E4           CLR     A
   \   00000D   93           MOVC    A,@A+DPTR
   \   00000E   F8           MOV     R0,A
   \   00000F   8A82         MOV     DPL,R2
   \   000011   8B83         MOV     DPH,R3
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   C3           CLR     C
   \   00001A   98           SUBB    A,R0
   \   00001B   5046         JNC     ??bindAddClusterIdToList_0
    459            {
    460              // Add the new one
    461              entry->clusterIdList[entry->numClusterIds] = clusterId;
   \   00001D   8A82         MOV     DPL,R2
   \   00001F   8B83         MOV     DPH,R3
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F8           MOV     R0,A
   \   000028   7900         MOV     R1,#0x0
   \   00002A   E8           MOV     A,R0
   \   00002B   75F002       MOV     B,#0x2
   \   00002E   A4           MUL     AB
   \   00002F   C8           XCH     A,R0
   \   000030   AEF0         MOV     R6,B
   \   000032   75F000       MOV     B,#0x0
   \   000035   A4           MUL     AB
   \   000036   2E           ADD     A,R6
   \   000037   FE           MOV     R6,A
   \   000038   75F002       MOV     B,#0x2
   \   00003B   E9           MOV     A,R1
   \   00003C   A4           MUL     AB
   \   00003D   2E           ADD     A,R6
   \   00003E   F9           MOV     R1,A
   \   00003F   EA           MOV     A,R2
   \   000040   28           ADD     A,R0
   \   000041   F582         MOV     DPL,A
   \   000043   EB           MOV     A,R3
   \   000044   39           ADDC    A,R1
   \   000045   F583         MOV     DPH,A
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   EC           MOV     A,R4
   \   00004E   F0           MOVX    @DPTR,A
   \   00004F   A3           INC     DPTR
   \   000050   ED           MOV     A,R5
   \   000051   F0           MOVX    @DPTR,A
    462              entry->numClusterIds++;
   \   000052   8A82         MOV     DPL,R2
   \   000054   8B83         MOV     DPH,R3
   \   000056   A3           INC     DPTR
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   2401         ADD     A,#0x1
   \   00005E   F0           MOVX    @DPTR,A
    463              return ( TRUE );
   \   00005F   7901         MOV     R1,#0x1
   \   000061   8002         SJMP    ??bindAddClusterIdToList_1
    464            }
    465            return ( FALSE );
   \                     ??bindAddClusterIdToList_0:
   \   000063   7900         MOV     R1,#0x0
   \                     ??bindAddClusterIdToList_1:
   \   000065   7F01         MOV     R7,#0x1
   \   000067   02....       LJMP    ?BANKED_LEAVE_XDATA
    466          }
    467          
    468          /*********************************************************************
    469           * @fn      bindFindExisting
    470           *
    471           * @brief   Finds an existing src/epint to dst/epint bind record
    472           *
    473           * @param   srcAddr - Source address
    474           * @param   srcEpInt - Source Endpoint/Interface
    475           * @param   dstAddr - Destination address
    476           * @param   dstEpInt - Destination Endpoint/Interface
    477           *
    478           * @return  pointer to existing entry or NULL
    479           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    480          BindingEntry_t *bindFindExisting( byte srcEpInt,
   \                     bindFindExisting:
    481                                            zAddrType_t *dstAddr, byte dstEpInt )
    482          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
   \   00000B   8C..         MOV     ?V1,R4
    483            uint16 dstIdx;
    484            bindTableIndex_t x;
    485          
    486            // Find the records in the assoc list
    487            if ( dstAddr->addrMode == AddrGroup )
   \   00000D   8E82         MOV     DPL,R6
   \   00000F   8F83         MOV     DPH,R7
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   6401         XRL     A,#0x1
   \   00001C   700B         JNZ     ??bindFindExisting_0
    488            {
    489              dstIdx = dstAddr->addr.shortAddr;
   \   00001E   8E82         MOV     DPL,R6
   \   000020   8F83         MOV     DPH,R7
   \   000022   E0           MOVX    A,@DPTR
   \   000023   FC           MOV     R4,A
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   FD           MOV     R5,A
   \   000027   800F         SJMP    ??bindFindExisting_1
    490            }
    491            else
    492            {
    493              dstIdx = bindingAddrMgsHelperFind( dstAddr );
   \                     ??bindFindExisting_0:
   \   000029                ; Setup parameters for call to function bindingAddrMgsHelperFind
   \   000029   EE           MOV     A,R6
   \   00002A   FA           MOV     R2,A
   \   00002B   EF           MOV     A,R7
   \   00002C   FB           MOV     R3,A
   \   00002D   12....       LCALL   `??bindingAddrMgsHelperFind::?relay`; Banked call to: bindingAddrMgsHelperFind
   \   000030   8A..         MOV     ?V2,R2
   \   000032   8B..         MOV     ?V3,R3
   \   000034   AC..         MOV     R4,?V2
   \   000036   AD..         MOV     R5,?V3
    494            }
    495          
    496            if ( dstIdx == INVALID_NODE_ADDR )
   \                     ??bindFindExisting_1:
   \   000038   74FE         MOV     A,#-0x2
   \   00003A   6C           XRL     A,R4
   \   00003B   7003         JNZ     ??bindFindExisting_2
   \   00003D   74FF         MOV     A,#-0x1
   \   00003F   6D           XRL     A,R5
   \                     ??bindFindExisting_2:
   \   000040   7007         JNZ     ??bindFindExisting_3
    497            {
    498              return ( (BindingEntry_t *)NULL );
   \   000042   7A00         MOV     R2,#0x0
   \   000044   7B00         MOV     R3,#0x0
   \   000046   02....       LJMP    ??bindFindExisting_4 & 0xFFFF
    499            }
    500          
    501            // Start at the beginning
    502            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \                     ??bindFindExisting_3:
   \   000049   7A00         MOV     R2,#0x0
   \   00004B   8001         SJMP    ??bindFindExisting_5
   \                     ??bindFindExisting_6:
   \   00004D   0A           INC     R2
   \                     ??bindFindExisting_5:
   \   00004E   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000051   E4           CLR     A
   \   000052   93           MOVC    A,@A+DPTR
   \   000053   F8           MOV     R0,A
   \   000054   EA           MOV     A,R2
   \   000055   C3           CLR     C
   \   000056   98           SUBB    A,R0
   \   000057   4003         JC      $+5
   \   000059   02....       LJMP    ??bindFindExisting_7 & 0xFFFF
    503            {
    504              if ( (BindingTable[x].srcEP == srcEpInt) )
   \   00005C   EA           MOV     A,R2
   \   00005D   F8           MOV     R0,A
   \   00005E   7900         MOV     R1,#0x0
   \   000060   E8           MOV     A,R0
   \   000061   75F00E       MOV     B,#0xe
   \   000064   A4           MUL     AB
   \   000065   C8           XCH     A,R0
   \   000066   ABF0         MOV     R3,B
   \   000068   75F000       MOV     B,#0x0
   \   00006B   A4           MUL     AB
   \   00006C   2B           ADD     A,R3
   \   00006D   FB           MOV     R3,A
   \   00006E   75F00E       MOV     B,#0xe
   \   000071   E9           MOV     A,R1
   \   000072   A4           MUL     AB
   \   000073   2B           ADD     A,R3
   \   000074   F9           MOV     R1,A
   \   000075   74..         MOV     A,#BindingTable & 0xff
   \   000077   28           ADD     A,R0
   \   000078   F582         MOV     DPL,A
   \   00007A   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   00007C   39           ADDC    A,R1
   \   00007D   F583         MOV     DPH,A
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   65..         XRL     A,?V0
   \   000082   70C9         JNZ     ??bindFindExisting_6
    505              {
    506                if ( ((dstAddr->addrMode == AddrGroup)
    507                        && (BindingTable[x].dstGroupMode == DSTGROUPMODE_GROUP)
    508                        && (dstIdx == BindingTable[x].dstIdx))
    509                   || ((dstAddr->addrMode != AddrGroup)
    510                       && (BindingTable[x].dstGroupMode == DSTGROUPMODE_ADDR)
    511                       && (dstIdx == BindingTable[x].dstIdx) && (BindingTable[x].dstEP == dstEpInt)) )
   \   000084   8E82         MOV     DPL,R6
   \   000086   8F83         MOV     DPH,R7
   \   000088   A3           INC     DPTR
   \   000089   A3           INC     DPTR
   \   00008A   A3           INC     DPTR
   \   00008B   A3           INC     DPTR
   \   00008C   A3           INC     DPTR
   \   00008D   A3           INC     DPTR
   \   00008E   A3           INC     DPTR
   \   00008F   A3           INC     DPTR
   \   000090   E0           MOVX    A,@DPTR
   \   000091   6401         XRL     A,#0x1
   \   000093   7057         JNZ     ??bindFindExisting_8
   \   000095   EA           MOV     A,R2
   \   000096   F8           MOV     R0,A
   \   000097   7900         MOV     R1,#0x0
   \   000099   E8           MOV     A,R0
   \   00009A   75F00E       MOV     B,#0xe
   \   00009D   A4           MUL     AB
   \   00009E   C8           XCH     A,R0
   \   00009F   ABF0         MOV     R3,B
   \   0000A1   75F000       MOV     B,#0x0
   \   0000A4   A4           MUL     AB
   \   0000A5   2B           ADD     A,R3
   \   0000A6   FB           MOV     R3,A
   \   0000A7   75F00E       MOV     B,#0xe
   \   0000AA   E9           MOV     A,R1
   \   0000AB   A4           MUL     AB
   \   0000AC   2B           ADD     A,R3
   \   0000AD   F9           MOV     R1,A
   \   0000AE   74..         MOV     A,#(BindingTable + 1) & 0xff
   \   0000B0   28           ADD     A,R0
   \   0000B1   F582         MOV     DPL,A
   \   0000B3   74..         MOV     A,#((BindingTable + 1) >> 8) & 0xff
   \   0000B5   39           ADDC    A,R1
   \   0000B6   F583         MOV     DPH,A
   \   0000B8   E0           MOVX    A,@DPTR
   \   0000B9   6401         XRL     A,#0x1
   \   0000BB   702F         JNZ     ??bindFindExisting_8
   \   0000BD   EA           MOV     A,R2
   \   0000BE   F8           MOV     R0,A
   \   0000BF   7900         MOV     R1,#0x0
   \   0000C1   E8           MOV     A,R0
   \   0000C2   75F00E       MOV     B,#0xe
   \   0000C5   A4           MUL     AB
   \   0000C6   C8           XCH     A,R0
   \   0000C7   ABF0         MOV     R3,B
   \   0000C9   75F000       MOV     B,#0x0
   \   0000CC   A4           MUL     AB
   \   0000CD   2B           ADD     A,R3
   \   0000CE   FB           MOV     R3,A
   \   0000CF   75F00E       MOV     B,#0xe
   \   0000D2   E9           MOV     A,R1
   \   0000D3   A4           MUL     AB
   \   0000D4   2B           ADD     A,R3
   \   0000D5   F9           MOV     R1,A
   \   0000D6   74..         MOV     A,#(BindingTable + 2) & 0xff
   \   0000D8   28           ADD     A,R0
   \   0000D9   F582         MOV     DPL,A
   \   0000DB   74..         MOV     A,#((BindingTable + 2) >> 8) & 0xff
   \   0000DD   39           ADDC    A,R1
   \   0000DE   F583         MOV     DPH,A
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   6C           XRL     A,R4
   \   0000E2   7003         JNZ     ??bindFindExisting_9
   \   0000E4   A3           INC     DPTR
   \   0000E5   E0           MOVX    A,@DPTR
   \   0000E6   6D           XRL     A,R5
   \                     ??bindFindExisting_9:
   \   0000E7   7003         JNZ     $+5
   \   0000E9   02....       LJMP    ??bindFindExisting_10 & 0xFFFF
   \                     ??bindFindExisting_8:
   \   0000EC   8E82         MOV     DPL,R6
   \   0000EE   8F83         MOV     DPH,R7
   \   0000F0   A3           INC     DPTR
   \   0000F1   A3           INC     DPTR
   \   0000F2   A3           INC     DPTR
   \   0000F3   A3           INC     DPTR
   \   0000F4   A3           INC     DPTR
   \   0000F5   A3           INC     DPTR
   \   0000F6   A3           INC     DPTR
   \   0000F7   A3           INC     DPTR
   \   0000F8   E0           MOVX    A,@DPTR
   \   0000F9   6401         XRL     A,#0x1
   \   0000FB   7003         JNZ     $+5
   \   0000FD   02....       LJMP    ??bindFindExisting_6 & 0xFFFF
   \   000100   EA           MOV     A,R2
   \   000101   F8           MOV     R0,A
   \   000102   7900         MOV     R1,#0x0
   \   000104   E8           MOV     A,R0
   \   000105   75F00E       MOV     B,#0xe
   \   000108   A4           MUL     AB
   \   000109   C8           XCH     A,R0
   \   00010A   ABF0         MOV     R3,B
   \   00010C   75F000       MOV     B,#0x0
   \   00010F   A4           MUL     AB
   \   000110   2B           ADD     A,R3
   \   000111   FB           MOV     R3,A
   \   000112   75F00E       MOV     B,#0xe
   \   000115   E9           MOV     A,R1
   \   000116   A4           MUL     AB
   \   000117   2B           ADD     A,R3
   \   000118   F9           MOV     R1,A
   \   000119   74..         MOV     A,#(BindingTable + 1) & 0xff
   \   00011B   28           ADD     A,R0
   \   00011C   F582         MOV     DPL,A
   \   00011E   74..         MOV     A,#((BindingTable + 1) >> 8) & 0xff
   \   000120   39           ADDC    A,R1
   \   000121   F583         MOV     DPH,A
   \   000123   E0           MOVX    A,@DPTR
   \   000124   6003         JZ      $+5
   \   000126   02....       LJMP    ??bindFindExisting_6 & 0xFFFF
   \   000129   EA           MOV     A,R2
   \   00012A   F8           MOV     R0,A
   \   00012B   7900         MOV     R1,#0x0
   \   00012D   E8           MOV     A,R0
   \   00012E   75F00E       MOV     B,#0xe
   \   000131   A4           MUL     AB
   \   000132   C8           XCH     A,R0
   \   000133   ABF0         MOV     R3,B
   \   000135   75F000       MOV     B,#0x0
   \   000138   A4           MUL     AB
   \   000139   2B           ADD     A,R3
   \   00013A   FB           MOV     R3,A
   \   00013B   75F00E       MOV     B,#0xe
   \   00013E   E9           MOV     A,R1
   \   00013F   A4           MUL     AB
   \   000140   2B           ADD     A,R3
   \   000141   F9           MOV     R1,A
   \   000142   74..         MOV     A,#(BindingTable + 2) & 0xff
   \   000144   28           ADD     A,R0
   \   000145   F582         MOV     DPL,A
   \   000147   74..         MOV     A,#((BindingTable + 2) >> 8) & 0xff
   \   000149   39           ADDC    A,R1
   \   00014A   F583         MOV     DPH,A
   \   00014C   E0           MOVX    A,@DPTR
   \   00014D   6C           XRL     A,R4
   \   00014E   7003         JNZ     ??bindFindExisting_11
   \   000150   A3           INC     DPTR
   \   000151   E0           MOVX    A,@DPTR
   \   000152   6D           XRL     A,R5
   \                     ??bindFindExisting_11:
   \   000153   6003         JZ      $+5
   \   000155   02....       LJMP    ??bindFindExisting_6 & 0xFFFF
   \   000158   EA           MOV     A,R2
   \   000159   F8           MOV     R0,A
   \   00015A   7900         MOV     R1,#0x0
   \   00015C   E8           MOV     A,R0
   \   00015D   75F00E       MOV     B,#0xe
   \   000160   A4           MUL     AB
   \   000161   C8           XCH     A,R0
   \   000162   ABF0         MOV     R3,B
   \   000164   75F000       MOV     B,#0x0
   \   000167   A4           MUL     AB
   \   000168   2B           ADD     A,R3
   \   000169   FB           MOV     R3,A
   \   00016A   75F00E       MOV     B,#0xe
   \   00016D   E9           MOV     A,R1
   \   00016E   A4           MUL     AB
   \   00016F   2B           ADD     A,R3
   \   000170   F9           MOV     R1,A
   \   000171   74..         MOV     A,#(BindingTable + 4) & 0xff
   \   000173   28           ADD     A,R0
   \   000174   F582         MOV     DPL,A
   \   000176   74..         MOV     A,#((BindingTable + 4) >> 8) & 0xff
   \   000178   39           ADDC    A,R1
   \   000179   F583         MOV     DPH,A
   \   00017B   E0           MOVX    A,@DPTR
   \   00017C   65..         XRL     A,?V1
   \   00017E   6003         JZ      $+5
   \   000180   02....       LJMP    ??bindFindExisting_6 & 0xFFFF
    512                {
    513                  return ( &BindingTable[x] );
   \                     ??bindFindExisting_10:
   \   000183   EA           MOV     A,R2
   \   000184   F8           MOV     R0,A
   \   000185   7900         MOV     R1,#0x0
   \   000187   E8           MOV     A,R0
   \   000188   75F00E       MOV     B,#0xe
   \   00018B   A4           MUL     AB
   \   00018C   C8           XCH     A,R0
   \   00018D   AAF0         MOV     R2,B
   \   00018F   75F000       MOV     B,#0x0
   \   000192   A4           MUL     AB
   \   000193   2A           ADD     A,R2
   \   000194   FA           MOV     R2,A
   \   000195   75F00E       MOV     B,#0xe
   \   000198   E9           MOV     A,R1
   \   000199   A4           MUL     AB
   \   00019A   2A           ADD     A,R2
   \   00019B   F9           MOV     R1,A
   \   00019C   74..         MOV     A,#BindingTable & 0xff
   \   00019E   28           ADD     A,R0
   \   00019F   FA           MOV     R2,A
   \   0001A0   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   0001A2   39           ADDC    A,R1
   \   0001A3   FB           MOV     R3,A
   \   0001A4   8004         SJMP    ??bindFindExisting_4
    514                }
    515              }
    516            }
    517          
    518            return ( (BindingEntry_t *)NULL );
   \                     ??bindFindExisting_7:
   \   0001A6   7A00         MOV     R2,#0x0
   \   0001A8   7B00         MOV     R3,#0x0
   \                     ??bindFindExisting_4:
   \   0001AA   7F04         MOV     R7,#0x4
   \   0001AC   02....       LJMP    ?BANKED_LEAVE_XDATA
    519          }
    520          
    521          /*********************************************************************
    522           * @fn       bindRemoveDev()
    523           *
    524           * @brief
    525           *
    526           *   Remove all bind(s) entries associated to a device address (destination).
    527           *   Updates binding table.
    528           *
    529           * @param   Addr - address of device to be removed from Binding Table
    530           *
    531           * @return  none
    532           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    533          void bindRemoveDev( zAddrType_t *Addr )
   \                     bindRemoveDev:
    534          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    535            uint16 idx;
    536            bindTableIndex_t x;
    537          
    538            if ( Addr->addrMode == AddrGroup )
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   6401         XRL     A,#0x1
   \   000018   700D         JNZ     ??bindRemoveDev_0
    539            {
    540              idx = Addr->addr.shortAddr;
   \   00001A   8E82         MOV     DPL,R6
   \   00001C   8F83         MOV     DPH,R7
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F5..         MOV     ?V0,A
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F5..         MOV     ?V1,A
   \   000025   8011         SJMP    ??bindRemoveDev_1
    541            }
    542            else
    543            {
    544              idx = bindingAddrMgsHelperFind( Addr );
   \                     ??bindRemoveDev_0:
   \   000027                ; Setup parameters for call to function bindingAddrMgsHelperFind
   \   000027   EE           MOV     A,R6
   \   000028   FA           MOV     R2,A
   \   000029   EF           MOV     A,R7
   \   00002A   FB           MOV     R3,A
   \   00002B   12....       LCALL   `??bindingAddrMgsHelperFind::?relay`; Banked call to: bindingAddrMgsHelperFind
   \   00002E   8A..         MOV     ?V2,R2
   \   000030   8B..         MOV     ?V3,R3
   \   000032   85....       MOV     ?V0,?V2
   \   000035   85....       MOV     ?V1,?V3
    545            }
    546          
    547            if ( idx == INVALID_NODE_ADDR )
   \                     ??bindRemoveDev_1:
   \   000038   74FE         MOV     A,#-0x2
   \   00003A   65..         XRL     A,?V0
   \   00003C   7004         JNZ     ??bindRemoveDev_2
   \   00003E   74FF         MOV     A,#-0x1
   \   000040   65..         XRL     A,?V1
   \                     ??bindRemoveDev_2:
   \   000042   7003         JNZ     $+5
   \   000044   02....       LJMP    ??bindRemoveDev_3 & 0xFFFF
    548            {
    549              return;
    550            }
    551          
    552            // Removes all the entries that match the destination Address/Index
    553            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   000047   75..00       MOV     ?V2,#0x0
   \   00004A   02....       LJMP    ??bindRemoveDev_4 & 0xFFFF
    554            {
    555              if ( ( (Addr->addrMode == AddrGroup) && (BindingTable[x].dstGroupMode == DSTGROUPMODE_GROUP)
    556                                                   && (BindingTable[x].dstIdx == idx) ) ||
    557                   ( (Addr->addrMode != AddrGroup) && (BindingTable[x].dstGroupMode == DSTGROUPMODE_ADDR)
    558                                                   && (BindingTable[x].dstIdx == idx) ) )
   \                     ??bindRemoveDev_5:
   \   00004D   8E82         MOV     DPL,R6
   \   00004F   8F83         MOV     DPH,R7
   \   000051   A3           INC     DPTR
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   A3           INC     DPTR
   \   000056   A3           INC     DPTR
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   6401         XRL     A,#0x1
   \   00005C   7056         JNZ     ??bindRemoveDev_6
   \   00005E   A8..         MOV     R0,?V2
   \   000060   7900         MOV     R1,#0x0
   \   000062   E8           MOV     A,R0
   \   000063   75F00E       MOV     B,#0xe
   \   000066   A4           MUL     AB
   \   000067   C8           XCH     A,R0
   \   000068   AAF0         MOV     R2,B
   \   00006A   75F000       MOV     B,#0x0
   \   00006D   A4           MUL     AB
   \   00006E   2A           ADD     A,R2
   \   00006F   FA           MOV     R2,A
   \   000070   75F00E       MOV     B,#0xe
   \   000073   E9           MOV     A,R1
   \   000074   A4           MUL     AB
   \   000075   2A           ADD     A,R2
   \   000076   F9           MOV     R1,A
   \   000077   74..         MOV     A,#(BindingTable + 1) & 0xff
   \   000079   28           ADD     A,R0
   \   00007A   F582         MOV     DPL,A
   \   00007C   74..         MOV     A,#((BindingTable + 1) >> 8) & 0xff
   \   00007E   39           ADDC    A,R1
   \   00007F   F583         MOV     DPH,A
   \   000081   E0           MOVX    A,@DPTR
   \   000082   6401         XRL     A,#0x1
   \   000084   702E         JNZ     ??bindRemoveDev_6
   \   000086   A8..         MOV     R0,?V2
   \   000088   7900         MOV     R1,#0x0
   \   00008A   E8           MOV     A,R0
   \   00008B   75F00E       MOV     B,#0xe
   \   00008E   A4           MUL     AB
   \   00008F   C8           XCH     A,R0
   \   000090   AAF0         MOV     R2,B
   \   000092   75F000       MOV     B,#0x0
   \   000095   A4           MUL     AB
   \   000096   2A           ADD     A,R2
   \   000097   FA           MOV     R2,A
   \   000098   75F00E       MOV     B,#0xe
   \   00009B   E9           MOV     A,R1
   \   00009C   A4           MUL     AB
   \   00009D   2A           ADD     A,R2
   \   00009E   F9           MOV     R1,A
   \   00009F   74..         MOV     A,#(BindingTable + 2) & 0xff
   \   0000A1   28           ADD     A,R0
   \   0000A2   F582         MOV     DPL,A
   \   0000A4   74..         MOV     A,#((BindingTable + 2) >> 8) & 0xff
   \   0000A6   39           ADDC    A,R1
   \   0000A7   F583         MOV     DPH,A
   \   0000A9   E0           MOVX    A,@DPTR
   \   0000AA   65..         XRL     A,?V0
   \   0000AC   7004         JNZ     ??bindRemoveDev_7
   \   0000AE   A3           INC     DPTR
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   65..         XRL     A,?V1
   \                     ??bindRemoveDev_7:
   \   0000B2   6065         JZ      ??bindRemoveDev_8
   \                     ??bindRemoveDev_6:
   \   0000B4   8E82         MOV     DPL,R6
   \   0000B6   8F83         MOV     DPH,R7
   \   0000B8   A3           INC     DPTR
   \   0000B9   A3           INC     DPTR
   \   0000BA   A3           INC     DPTR
   \   0000BB   A3           INC     DPTR
   \   0000BC   A3           INC     DPTR
   \   0000BD   A3           INC     DPTR
   \   0000BE   A3           INC     DPTR
   \   0000BF   A3           INC     DPTR
   \   0000C0   E0           MOVX    A,@DPTR
   \   0000C1   6401         XRL     A,#0x1
   \   0000C3   6079         JZ      ??bindRemoveDev_9
   \   0000C5   A8..         MOV     R0,?V2
   \   0000C7   7900         MOV     R1,#0x0
   \   0000C9   E8           MOV     A,R0
   \   0000CA   75F00E       MOV     B,#0xe
   \   0000CD   A4           MUL     AB
   \   0000CE   C8           XCH     A,R0
   \   0000CF   AAF0         MOV     R2,B
   \   0000D1   75F000       MOV     B,#0x0
   \   0000D4   A4           MUL     AB
   \   0000D5   2A           ADD     A,R2
   \   0000D6   FA           MOV     R2,A
   \   0000D7   75F00E       MOV     B,#0xe
   \   0000DA   E9           MOV     A,R1
   \   0000DB   A4           MUL     AB
   \   0000DC   2A           ADD     A,R2
   \   0000DD   F9           MOV     R1,A
   \   0000DE   74..         MOV     A,#(BindingTable + 1) & 0xff
   \   0000E0   28           ADD     A,R0
   \   0000E1   F582         MOV     DPL,A
   \   0000E3   74..         MOV     A,#((BindingTable + 1) >> 8) & 0xff
   \   0000E5   39           ADDC    A,R1
   \   0000E6   F583         MOV     DPH,A
   \   0000E8   E0           MOVX    A,@DPTR
   \   0000E9   7053         JNZ     ??bindRemoveDev_9
   \   0000EB   A8..         MOV     R0,?V2
   \   0000ED   7900         MOV     R1,#0x0
   \   0000EF   E8           MOV     A,R0
   \   0000F0   75F00E       MOV     B,#0xe
   \   0000F3   A4           MUL     AB
   \   0000F4   C8           XCH     A,R0
   \   0000F5   AAF0         MOV     R2,B
   \   0000F7   75F000       MOV     B,#0x0
   \   0000FA   A4           MUL     AB
   \   0000FB   2A           ADD     A,R2
   \   0000FC   FA           MOV     R2,A
   \   0000FD   75F00E       MOV     B,#0xe
   \   000100   E9           MOV     A,R1
   \   000101   A4           MUL     AB
   \   000102   2A           ADD     A,R2
   \   000103   F9           MOV     R1,A
   \   000104   74..         MOV     A,#(BindingTable + 2) & 0xff
   \   000106   28           ADD     A,R0
   \   000107   F582         MOV     DPL,A
   \   000109   74..         MOV     A,#((BindingTable + 2) >> 8) & 0xff
   \   00010B   39           ADDC    A,R1
   \   00010C   F583         MOV     DPH,A
   \   00010E   E0           MOVX    A,@DPTR
   \   00010F   65..         XRL     A,?V0
   \   000111   7004         JNZ     ??bindRemoveDev_10
   \   000113   A3           INC     DPTR
   \   000114   E0           MOVX    A,@DPTR
   \   000115   65..         XRL     A,?V1
   \                     ??bindRemoveDev_10:
   \   000117   7025         JNZ     ??bindRemoveDev_9
    559              {
    560                bindRemoveEntry( &BindingTable[x] );
   \                     ??bindRemoveDev_8:
   \   000119                ; Setup parameters for call to function bindRemoveEntry
   \   000119   A8..         MOV     R0,?V2
   \   00011B   7900         MOV     R1,#0x0
   \   00011D   E8           MOV     A,R0
   \   00011E   75F00E       MOV     B,#0xe
   \   000121   A4           MUL     AB
   \   000122   C8           XCH     A,R0
   \   000123   AAF0         MOV     R2,B
   \   000125   75F000       MOV     B,#0x0
   \   000128   A4           MUL     AB
   \   000129   2A           ADD     A,R2
   \   00012A   FA           MOV     R2,A
   \   00012B   75F00E       MOV     B,#0xe
   \   00012E   E9           MOV     A,R1
   \   00012F   A4           MUL     AB
   \   000130   2A           ADD     A,R2
   \   000131   F9           MOV     R1,A
   \   000132   74..         MOV     A,#BindingTable & 0xff
   \   000134   28           ADD     A,R0
   \   000135   FA           MOV     R2,A
   \   000136   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   000138   39           ADDC    A,R1
   \   000139   FB           MOV     R3,A
   \   00013A   12....       LCALL   `??bindRemoveEntry::?relay`; Banked call to: bindRemoveEntry
   \   00013D   E9           MOV     A,R1
    561              }
    562            }
   \                     ??bindRemoveDev_9:
   \   00013E   05..         INC     ?V2
   \                     ??bindRemoveDev_4:
   \   000140   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000143   E4           CLR     A
   \   000144   93           MOVC    A,@A+DPTR
   \   000145   F8           MOV     R0,A
   \   000146   E5..         MOV     A,?V2
   \   000148   C3           CLR     C
   \   000149   98           SUBB    A,R0
   \   00014A   5003         JNC     $+5
   \   00014C   02....       LJMP    ??bindRemoveDev_5 & 0xFFFF
    563          
    564            // If this is the last Bind Entry for that idx then clear BINDING
    565            // user from Address Manager
    566            bindAddressClear( idx );
   \   00014F                ; Setup parameters for call to function bindAddressClear
   \   00014F   AA..         MOV     R2,?V0
   \   000151   AB..         MOV     R3,?V1
   \   000153   12....       LCALL   `??bindAddressClear::?relay`; Banked call to: bindAddressClear
    567          }
   \                     ??bindRemoveDev_3:
   \   000156   7F04         MOV     R7,#0x4
   \   000158   02....       LJMP    ?BANKED_LEAVE_XDATA
    568          
    569          /*********************************************************************
    570           * @fn       bindRemoveSrcDev()
    571           *
    572           * @brief
    573           *
    574           *   Remove binds(s) associated to device address (source).
    575           *   Updates binding table.
    576           *
    577           * @param   srcAddr - address of device
    578           * @param   ep - endpoint to remove, 0xFF is all endpoints
    579           *
    580           * @return  none
    581           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    582          void bindRemoveSrcDev( uint8 ep )
   \                     bindRemoveSrcDev:
    583          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V1,R1
    584            bindTableIndex_t x;
    585          
    586            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   000007   75..00       MOV     ?V0,#0x0
   \   00000A   02....       LJMP    ??bindRemoveSrcDev_0 & 0xFFFF
    587            {
    588              if ( (ep == 0xFF) || (ep == BindingTable[x].srcEP) )
   \                     ??bindRemoveSrcDev_1:
   \   00000D   74FF         MOV     A,#-0x1
   \   00000F   65..         XRL     A,?V1
   \   000011   6028         JZ      ??bindRemoveSrcDev_2
   \   000013   A8..         MOV     R0,?V0
   \   000015   7900         MOV     R1,#0x0
   \   000017   E8           MOV     A,R0
   \   000018   75F00E       MOV     B,#0xe
   \   00001B   A4           MUL     AB
   \   00001C   C8           XCH     A,R0
   \   00001D   AAF0         MOV     R2,B
   \   00001F   75F000       MOV     B,#0x0
   \   000022   A4           MUL     AB
   \   000023   2A           ADD     A,R2
   \   000024   FA           MOV     R2,A
   \   000025   75F00E       MOV     B,#0xe
   \   000028   E9           MOV     A,R1
   \   000029   A4           MUL     AB
   \   00002A   2A           ADD     A,R2
   \   00002B   F9           MOV     R1,A
   \   00002C   74..         MOV     A,#BindingTable & 0xff
   \   00002E   28           ADD     A,R0
   \   00002F   F582         MOV     DPL,A
   \   000031   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   000033   39           ADDC    A,R1
   \   000034   F583         MOV     DPH,A
   \   000036   E0           MOVX    A,@DPTR
   \   000037   65..         XRL     A,?V1
   \   000039   7054         JNZ     ??bindRemoveSrcDev_3
    589              {
    590                uint16 idx = BindingTable[x].dstIdx;
   \                     ??bindRemoveSrcDev_2:
   \   00003B   A8..         MOV     R0,?V0
   \   00003D   7900         MOV     R1,#0x0
   \   00003F   E8           MOV     A,R0
   \   000040   75F00E       MOV     B,#0xe
   \   000043   A4           MUL     AB
   \   000044   C8           XCH     A,R0
   \   000045   AAF0         MOV     R2,B
   \   000047   75F000       MOV     B,#0x0
   \   00004A   A4           MUL     AB
   \   00004B   2A           ADD     A,R2
   \   00004C   FA           MOV     R2,A
   \   00004D   75F00E       MOV     B,#0xe
   \   000050   E9           MOV     A,R1
   \   000051   A4           MUL     AB
   \   000052   2A           ADD     A,R2
   \   000053   F9           MOV     R1,A
   \   000054   74..         MOV     A,#(BindingTable + 2) & 0xff
   \   000056   28           ADD     A,R0
   \   000057   F582         MOV     DPL,A
   \   000059   74..         MOV     A,#((BindingTable + 2) >> 8) & 0xff
   \   00005B   39           ADDC    A,R1
   \   00005C   F583         MOV     DPH,A
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   FE           MOV     R6,A
   \   000060   A3           INC     DPTR
   \   000061   E0           MOVX    A,@DPTR
   \   000062   FF           MOV     R7,A
    591          
    592                bindRemoveEntry( &BindingTable[x] );
   \   000063                ; Setup parameters for call to function bindRemoveEntry
   \   000063   A8..         MOV     R0,?V0
   \   000065   7900         MOV     R1,#0x0
   \   000067   E8           MOV     A,R0
   \   000068   75F00E       MOV     B,#0xe
   \   00006B   A4           MUL     AB
   \   00006C   C8           XCH     A,R0
   \   00006D   AAF0         MOV     R2,B
   \   00006F   75F000       MOV     B,#0x0
   \   000072   A4           MUL     AB
   \   000073   2A           ADD     A,R2
   \   000074   FA           MOV     R2,A
   \   000075   75F00E       MOV     B,#0xe
   \   000078   E9           MOV     A,R1
   \   000079   A4           MUL     AB
   \   00007A   2A           ADD     A,R2
   \   00007B   F9           MOV     R1,A
   \   00007C   74..         MOV     A,#BindingTable & 0xff
   \   00007E   28           ADD     A,R0
   \   00007F   FA           MOV     R2,A
   \   000080   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   000082   39           ADDC    A,R1
   \   000083   FB           MOV     R3,A
   \   000084   12....       LCALL   `??bindRemoveEntry::?relay`; Banked call to: bindRemoveEntry
   \   000087   E9           MOV     A,R1
    593          
    594                // If this is the last Bind Entry for that idx then clear BINDING
    595                // user from Address Manager
    596                bindAddressClear( idx );
   \   000088                ; Setup parameters for call to function bindAddressClear
   \   000088   EE           MOV     A,R6
   \   000089   FA           MOV     R2,A
   \   00008A   EF           MOV     A,R7
   \   00008B   FB           MOV     R3,A
   \   00008C   12....       LCALL   `??bindAddressClear::?relay`; Banked call to: bindAddressClear
    597              }
    598            }
   \                     ??bindRemoveSrcDev_3:
   \   00008F   05..         INC     ?V0
   \                     ??bindRemoveSrcDev_0:
   \   000091   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000094   E4           CLR     A
   \   000095   93           MOVC    A,@A+DPTR
   \   000096   F8           MOV     R0,A
   \   000097   E5..         MOV     A,?V0
   \   000099   C3           CLR     C
   \   00009A   98           SUBB    A,R0
   \   00009B   5003         JNC     $+5
   \   00009D   02....       LJMP    ??bindRemoveSrcDev_1 & 0xFFFF
    599          }
   \   0000A0   7F02         MOV     R7,#0x2
   \   0000A2   02....       LJMP    ?BANKED_LEAVE_XDATA
    600          
    601          /*********************************************************************
    602           * @fn          bindNumBoundTo
    603           *
    604           * @brief       Calculate the number items this device is bound to.
    605           *              When srcMode is set to TRUE, discard what value devAddr
    606           *              has, it returns number count bound to the local dev.
    607           *
    608           * @param       devAddr - device Address
    609           * @param       devEP - endpoint
    610           * @param       srcMode - TRUE - assume devHandle is a source address
    611           *                        FALSE - destination address
    612           *
    613           * @return      status
    614           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    615          byte bindNumBoundTo( zAddrType_t *devAddr, byte devEpInt, byte srcMode )
   \                     bindNumBoundTo:
    616          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V1,R1
   \   00000B   8C..         MOV     ?V2,R4
    617            BindingEntry_t *pBind;
    618            uint16 idx;
    619            byte   num;
    620            bindTableIndex_t x;
    621          
    622            // Init
    623            num = 0;
   \   00000D   75..00       MOV     ?V0,#0x0
    624          
    625            if ( devAddr->addrMode == AddrGroup )
   \   000010   8E82         MOV     DPL,R6
   \   000012   8F83         MOV     DPH,R7
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   6401         XRL     A,#0x1
   \   00001F   700B         JNZ     ??bindNumBoundTo_0
    626            {
    627              idx = devAddr->addr.shortAddr;
   \   000021   8E82         MOV     DPL,R6
   \   000023   8F83         MOV     DPH,R7
   \   000025   E0           MOVX    A,@DPTR
   \   000026   FA           MOV     R2,A
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   FB           MOV     R3,A
   \   00002A   800F         SJMP    ??bindNumBoundTo_1
    628            }
    629            else
    630            {
    631              idx = bindingAddrMgsHelperFind( devAddr );
   \                     ??bindNumBoundTo_0:
   \   00002C                ; Setup parameters for call to function bindingAddrMgsHelperFind
   \   00002C   EE           MOV     A,R6
   \   00002D   FA           MOV     R2,A
   \   00002E   EF           MOV     A,R7
   \   00002F   FB           MOV     R3,A
   \   000030   12....       LCALL   `??bindingAddrMgsHelperFind::?relay`; Banked call to: bindingAddrMgsHelperFind
   \   000033   8A..         MOV     ?V4,R2
   \   000035   8B..         MOV     ?V5,R3
   \   000037   AA..         MOV     R2,?V4
   \   000039   AB..         MOV     R3,?V5
    632            }
    633          
    634            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \                     ??bindNumBoundTo_1:
   \   00003B   7C00         MOV     R4,#0x0
   \   00003D   8062         SJMP    ??bindNumBoundTo_2
    635            {
    636              pBind = &BindingTable[x];
    637              if ( srcMode )
    638              {
    639                if ( pBind->srcEP == devEpInt )
    640                {
    641                  num++;
    642                }
    643              }
    644              else
    645              {
    646                if ( ((devAddr->addrMode == AddrGroup)
    647                        && (pBind->dstGroupMode == DSTGROUPMODE_GROUP) && (pBind->dstIdx == idx))
    648                    || ((devAddr->addrMode != AddrGroup) && (pBind->dstGroupMode == DSTGROUPMODE_ADDR)
    649                                          && (pBind->dstIdx == idx) && (pBind->dstEP == devEpInt)) )
   \                     ??bindNumBoundTo_3:
   \   00003F   8E82         MOV     DPL,R6
   \   000041   8F83         MOV     DPH,R7
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   6401         XRL     A,#0x1
   \   00004E   7019         JNZ     ??bindNumBoundTo_4
   \   000050   8882         MOV     DPL,R0
   \   000052   8983         MOV     DPH,R1
   \   000054   A3           INC     DPTR
   \   000055   E0           MOVX    A,@DPTR
   \   000056   6401         XRL     A,#0x1
   \   000058   700F         JNZ     ??bindNumBoundTo_4
   \   00005A   8882         MOV     DPL,R0
   \   00005C   8983         MOV     DPH,R1
   \   00005E   A3           INC     DPTR
   \   00005F   A3           INC     DPTR
   \   000060   E0           MOVX    A,@DPTR
   \   000061   6A           XRL     A,R2
   \   000062   7003         JNZ     ??bindNumBoundTo_5
   \   000064   A3           INC     DPTR
   \   000065   E0           MOVX    A,@DPTR
   \   000066   6B           XRL     A,R3
   \                     ??bindNumBoundTo_5:
   \   000067   6035         JZ      ??bindNumBoundTo_6
   \                     ??bindNumBoundTo_4:
   \   000069   8E82         MOV     DPL,R6
   \   00006B   8F83         MOV     DPH,R7
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   A3           INC     DPTR
   \   000070   A3           INC     DPTR
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   A3           INC     DPTR
   \   000075   E0           MOVX    A,@DPTR
   \   000076   6401         XRL     A,#0x1
   \   000078   6026         JZ      ??bindNumBoundTo_7
   \   00007A   8882         MOV     DPL,R0
   \   00007C   8983         MOV     DPH,R1
   \   00007E   A3           INC     DPTR
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   701E         JNZ     ??bindNumBoundTo_7
   \   000082   8882         MOV     DPL,R0
   \   000084   8983         MOV     DPH,R1
   \   000086   A3           INC     DPTR
   \   000087   A3           INC     DPTR
   \   000088   E0           MOVX    A,@DPTR
   \   000089   6A           XRL     A,R2
   \   00008A   7003         JNZ     ??bindNumBoundTo_8
   \   00008C   A3           INC     DPTR
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   6B           XRL     A,R3
   \                     ??bindNumBoundTo_8:
   \   00008F   700F         JNZ     ??bindNumBoundTo_7
   \   000091   8882         MOV     DPL,R0
   \   000093   8983         MOV     DPH,R1
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   65..         XRL     A,?V1
   \   00009C   7002         JNZ     ??bindNumBoundTo_7
    650                {
    651                  num++;
   \                     ??bindNumBoundTo_6:
   \   00009E   05..         INC     ?V0
    652                }
    653              }
   \                     ??bindNumBoundTo_7:
   \   0000A0   0C           INC     R4
   \                     ??bindNumBoundTo_2:
   \   0000A1   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   0000A4   E4           CLR     A
   \   0000A5   93           MOVC    A,@A+DPTR
   \   0000A6   F8           MOV     R0,A
   \   0000A7   EC           MOV     A,R4
   \   0000A8   C3           CLR     C
   \   0000A9   98           SUBB    A,R0
   \   0000AA   5035         JNC     ??bindNumBoundTo_9
   \   0000AC   EC           MOV     A,R4
   \   0000AD   F8           MOV     R0,A
   \   0000AE   7900         MOV     R1,#0x0
   \   0000B0   E8           MOV     A,R0
   \   0000B1   75F00E       MOV     B,#0xe
   \   0000B4   A4           MUL     AB
   \   0000B5   C8           XCH     A,R0
   \   0000B6   ADF0         MOV     R5,B
   \   0000B8   75F000       MOV     B,#0x0
   \   0000BB   A4           MUL     AB
   \   0000BC   2D           ADD     A,R5
   \   0000BD   FD           MOV     R5,A
   \   0000BE   75F00E       MOV     B,#0xe
   \   0000C1   E9           MOV     A,R1
   \   0000C2   A4           MUL     AB
   \   0000C3   2D           ADD     A,R5
   \   0000C4   F9           MOV     R1,A
   \   0000C5   74..         MOV     A,#BindingTable & 0xff
   \   0000C7   28           ADD     A,R0
   \   0000C8   F8           MOV     R0,A
   \   0000C9   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   0000CB   39           ADDC    A,R1
   \   0000CC   F9           MOV     R1,A
   \   0000CD   E5..         MOV     A,?V2
   \   0000CF   7003         JNZ     $+5
   \   0000D1   02....       LJMP    ??bindNumBoundTo_3 & 0xFFFF
   \   0000D4   8882         MOV     DPL,R0
   \   0000D6   8983         MOV     DPH,R1
   \   0000D8   E0           MOVX    A,@DPTR
   \   0000D9   65..         XRL     A,?V1
   \   0000DB   70C3         JNZ     ??bindNumBoundTo_7
   \   0000DD   05..         INC     ?V0
   \   0000DF   80BF         SJMP    ??bindNumBoundTo_7
    654            }
    655          
    656            return num;
   \                     ??bindNumBoundTo_9:
   \   0000E1   A9..         MOV     R1,?V0
   \   0000E3   7F06         MOV     R7,#0x6
   \   0000E5   02....       LJMP    ?BANKED_LEAVE_XDATA
    657          }
    658          
    659          /*********************************************************************
    660           * @fn          bindNumReflections
    661           *
    662           * @brief       Counts the number of reflections needed for a
    663           *              endpoint and cluster ID combo.
    664           *
    665           * @param       ep - source endpoint
    666           * @param       clusterID - matching clusterID
    667           *
    668           * @return      number of reflections needed.
    669           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    670          uint16 bindNumReflections( uint8 ep, uint16 clusterID )
   \                     bindNumReflections:
    671          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V3,R1
   \   000007   8A..         MOV     ?V0,R2
   \   000009   8B..         MOV     ?V1,R3
    672            bindTableIndex_t x;
    673            BindingEntry_t *pBind;
    674            uint16 cnt = 0;
   \   00000B   7E00         MOV     R6,#0x0
   \   00000D   7F00         MOV     R7,#0x0
    675            uint8 bindEP;
    676          
    677            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   00000F   75..00       MOV     ?V2,#0x0
   \   000012   803F         SJMP    ??bindNumReflections_0
    678            {
    679              pBind = &BindingTable[x];
   \                     ??bindNumReflections_1:
   \   000014   A8..         MOV     R0,?V2
   \   000016   7900         MOV     R1,#0x0
   \   000018   E8           MOV     A,R0
   \   000019   75F00E       MOV     B,#0xe
   \   00001C   A4           MUL     AB
   \   00001D   C8           XCH     A,R0
   \   00001E   AAF0         MOV     R2,B
   \   000020   75F000       MOV     B,#0x0
   \   000023   A4           MUL     AB
   \   000024   2A           ADD     A,R2
   \   000025   FA           MOV     R2,A
   \   000026   75F00E       MOV     B,#0xe
   \   000029   E9           MOV     A,R1
   \   00002A   A4           MUL     AB
   \   00002B   2A           ADD     A,R2
   \   00002C   F9           MOV     R1,A
   \   00002D   74..         MOV     A,#BindingTable & 0xff
   \   00002F   28           ADD     A,R0
   \   000030   F582         MOV     DPL,A
   \   000032   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   000034   39           ADDC    A,R1
   \   000035   F583         MOV     DPH,A
    680              bindEP = pBind->srcEP;
   \   000037   E0           MOVX    A,@DPTR
   \   000038   F8           MOV     R0,A
    681          
    682              if ( (bindEP == ep) && (bindIsClusterIDinList( pBind, clusterID )) )
   \   000039   E5..         MOV     A,?V3
   \   00003B   68           XRL     A,R0
   \   00003C   7013         JNZ     ??bindNumReflections_2
   \   00003E                ; Setup parameters for call to function bindIsClusterIDinList
   \   00003E   AC..         MOV     R4,?V0
   \   000040   AD..         MOV     R5,?V1
   \   000042   AA82         MOV     R2,DPL
   \   000044   AB83         MOV     R3,DPH
   \   000046   12....       LCALL   `??bindIsClusterIDinList::?relay`; Banked call to: bindIsClusterIDinList
   \   000049   E9           MOV     A,R1
   \   00004A   6005         JZ      ??bindNumReflections_2
    683              {
    684                cnt++;
   \   00004C   0E           INC     R6
   \   00004D   EE           MOV     A,R6
   \   00004E   7001         JNZ     ??bindNumReflections_2
   \   000050   0F           INC     R7
    685              }
    686            }
   \                     ??bindNumReflections_2:
   \   000051   05..         INC     ?V2
   \                     ??bindNumReflections_0:
   \   000053   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000056   E4           CLR     A
   \   000057   93           MOVC    A,@A+DPTR
   \   000058   F8           MOV     R0,A
   \   000059   E5..         MOV     A,?V2
   \   00005B   C3           CLR     C
   \   00005C   98           SUBB    A,R0
   \   00005D   40B5         JC      ??bindNumReflections_1
    687          
    688            return ( cnt );
   \   00005F   EE           MOV     A,R6
   \   000060   FA           MOV     R2,A
   \   000061   EF           MOV     A,R7
   \   000062   FB           MOV     R3,A
   \   000063   7F04         MOV     R7,#0x4
   \   000065   02....       LJMP    ?BANKED_LEAVE_XDATA
    689          }
    690          
    691          /*********************************************************************
    692           * @fn          bindFind
    693           *
    694           * @brief       Finds the binding entry for the source address, endpoint
    695           *              and cluster ID passed in as a parameter.
    696           *
    697           * @param       ep - source endpoint
    698           * @param       clusterID - matching clusterID
    699           * @param       skip - number of matches to skip before returning
    700           *
    701           * @return      pointer to the binding table entry, NULL if not found
    702           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    703          BindingEntry_t *bindFind( uint8 ep, uint16 clusterID, uint8 skipping )
   \                     bindFind:
    704          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V3,R1
   \   000007   8A..         MOV     ?V0,R2
   \   000009   8B..         MOV     ?V1,R3
   \   00000B   8C..         MOV     ?V4,R4
    705            BindingEntry_t *pBind;
    706            byte skipped = 0;
   \   00000D   75..00       MOV     ?V2,#0x0
    707            bindTableIndex_t x;
    708          
    709            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   000010   75..00       MOV     ?V5,#0x0
   \   000013   8004         SJMP    ??bindFind_0
    710            {
    711              pBind = &BindingTable[x];
    712          
    713              if ( ( pBind->srcEP == ep) && bindIsClusterIDinList( pBind, clusterID ))
    714              {
    715                if ( skipped < skipping )
    716                {
    717                  skipped++;
   \                     ??bindFind_1:
   \   000015   05..         INC     ?V2
    718                }
   \                     ??bindFind_2:
   \   000017   05..         INC     ?V5
   \                     ??bindFind_0:
   \   000019   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   00001C   E4           CLR     A
   \   00001D   93           MOVC    A,@A+DPTR
   \   00001E   F8           MOV     R0,A
   \   00001F   E5..         MOV     A,?V5
   \   000021   C3           CLR     C
   \   000022   98           SUBB    A,R0
   \   000023   5045         JNC     ??bindFind_3
   \   000025   A8..         MOV     R0,?V5
   \   000027   7900         MOV     R1,#0x0
   \   000029   E8           MOV     A,R0
   \   00002A   75F00E       MOV     B,#0xe
   \   00002D   A4           MUL     AB
   \   00002E   C8           XCH     A,R0
   \   00002F   AAF0         MOV     R2,B
   \   000031   75F000       MOV     B,#0x0
   \   000034   A4           MUL     AB
   \   000035   2A           ADD     A,R2
   \   000036   FA           MOV     R2,A
   \   000037   75F00E       MOV     B,#0xe
   \   00003A   E9           MOV     A,R1
   \   00003B   A4           MUL     AB
   \   00003C   2A           ADD     A,R2
   \   00003D   F9           MOV     R1,A
   \   00003E   74..         MOV     A,#BindingTable & 0xff
   \   000040   28           ADD     A,R0
   \   000041   FE           MOV     R6,A
   \   000042   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   000044   39           ADDC    A,R1
   \   000045   FF           MOV     R7,A
   \   000046   8E82         MOV     DPL,R6
   \   000048   8F83         MOV     DPH,R7
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   65..         XRL     A,?V3
   \   00004D   70C8         JNZ     ??bindFind_2
   \   00004F                ; Setup parameters for call to function bindIsClusterIDinList
   \   00004F   AC..         MOV     R4,?V0
   \   000051   AD..         MOV     R5,?V1
   \   000053   EE           MOV     A,R6
   \   000054   FA           MOV     R2,A
   \   000055   EF           MOV     A,R7
   \   000056   FB           MOV     R3,A
   \   000057   12....       LCALL   `??bindIsClusterIDinList::?relay`; Banked call to: bindIsClusterIDinList
   \   00005A   E9           MOV     A,R1
   \   00005B   60BA         JZ      ??bindFind_2
   \   00005D   E5..         MOV     A,?V2
   \   00005F   C3           CLR     C
   \   000060   95..         SUBB    A,?V4
   \   000062   40B1         JC      ??bindFind_1
    719                else
    720                {
    721                  return ( pBind );
   \   000064   EE           MOV     A,R6
   \   000065   FA           MOV     R2,A
   \   000066   EF           MOV     A,R7
   \   000067   FB           MOV     R3,A
   \   000068   8004         SJMP    ??bindFind_4
    722                }
    723              }
    724            }
    725          
    726            return ( (BindingEntry_t *)NULL );
   \                     ??bindFind_3:
   \   00006A   7A00         MOV     R2,#0x0
   \   00006C   7B00         MOV     R3,#0x0
   \                     ??bindFind_4:
   \   00006E   7F06         MOV     R7,#0x6
   \   000070   02....       LJMP    ?BANKED_LEAVE_XDATA
    727          }
    728          
    729          /*********************************************************************
    730           * @fn      bindAddressClear
    731           *
    732           * @brief   Lookup a binding entry by specific Idx, if none is found
    733           *          clears the BINDING user from Address Manager.
    734           *
    735           * @param   dstIdx - Source Address Manager Index
    736           *
    737           * @return  none
    738           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    739          void bindAddressClear( uint16 dstIdx )
   \                     bindAddressClear:
    740          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 13
   \   000004   74F3         MOV     A,#-0xd
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    741            bindTableIndex_t i;
    742          
    743            if ( dstIdx != INVALID_NODE_ADDR )
   \   000009   74FE         MOV     A,#-0x2
   \   00000B   6A           XRL     A,R2
   \   00000C   7003         JNZ     ??bindAddressClear_0
   \   00000E   74FF         MOV     A,#-0x1
   \   000010   6B           XRL     A,R3
   \                     ??bindAddressClear_0:
   \   000011   7003         JNZ     $+5
   \   000013   02....       LJMP    ??bindAddressClear_1 & 0xFFFF
    744            {
    745              // Looks for a specific Idx
    746              for ( i = 0; i < gNWK_MAX_BINDING_ENTRIES; i++ )
   \   000016   7C00         MOV     R4,#0x0
   \   000018   8001         SJMP    ??bindAddressClear_2
   \                     ??bindAddressClear_3:
   \   00001A   0C           INC     R4
   \                     ??bindAddressClear_2:
   \   00001B   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   00001E   E4           CLR     A
   \   00001F   93           MOVC    A,@A+DPTR
   \   000020   F8           MOV     R0,A
   \   000021   EC           MOV     A,R4
   \   000022   C3           CLR     C
   \   000023   98           SUBB    A,R0
   \   000024   507D         JNC     ??bindAddressClear_4
    747              {
    748                if ( ( BindingTable[i].dstGroupMode != AddrGroup ) &&
    749                     ( BindingTable[i].dstGroupMode == DSTGROUPMODE_ADDR ) &&
    750                     ( BindingTable[i].dstIdx == dstIdx ) )
   \   000026   EC           MOV     A,R4
   \   000027   F8           MOV     R0,A
   \   000028   7900         MOV     R1,#0x0
   \   00002A   E8           MOV     A,R0
   \   00002B   75F00E       MOV     B,#0xe
   \   00002E   A4           MUL     AB
   \   00002F   C8           XCH     A,R0
   \   000030   ADF0         MOV     R5,B
   \   000032   75F000       MOV     B,#0x0
   \   000035   A4           MUL     AB
   \   000036   2D           ADD     A,R5
   \   000037   FD           MOV     R5,A
   \   000038   75F00E       MOV     B,#0xe
   \   00003B   E9           MOV     A,R1
   \   00003C   A4           MUL     AB
   \   00003D   2D           ADD     A,R5
   \   00003E   F9           MOV     R1,A
   \   00003F   74..         MOV     A,#(BindingTable + 1) & 0xff
   \   000041   28           ADD     A,R0
   \   000042   F582         MOV     DPL,A
   \   000044   74..         MOV     A,#((BindingTable + 1) >> 8) & 0xff
   \   000046   39           ADDC    A,R1
   \   000047   F583         MOV     DPH,A
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   6401         XRL     A,#0x1
   \   00004C   60CC         JZ      ??bindAddressClear_3
   \   00004E   EC           MOV     A,R4
   \   00004F   F8           MOV     R0,A
   \   000050   7900         MOV     R1,#0x0
   \   000052   E8           MOV     A,R0
   \   000053   75F00E       MOV     B,#0xe
   \   000056   A4           MUL     AB
   \   000057   C8           XCH     A,R0
   \   000058   ADF0         MOV     R5,B
   \   00005A   75F000       MOV     B,#0x0
   \   00005D   A4           MUL     AB
   \   00005E   2D           ADD     A,R5
   \   00005F   FD           MOV     R5,A
   \   000060   75F00E       MOV     B,#0xe
   \   000063   E9           MOV     A,R1
   \   000064   A4           MUL     AB
   \   000065   2D           ADD     A,R5
   \   000066   F9           MOV     R1,A
   \   000067   74..         MOV     A,#(BindingTable + 1) & 0xff
   \   000069   28           ADD     A,R0
   \   00006A   F582         MOV     DPL,A
   \   00006C   74..         MOV     A,#((BindingTable + 1) >> 8) & 0xff
   \   00006E   39           ADDC    A,R1
   \   00006F   F583         MOV     DPH,A
   \   000071   E0           MOVX    A,@DPTR
   \   000072   70A6         JNZ     ??bindAddressClear_3
   \   000074   EC           MOV     A,R4
   \   000075   F8           MOV     R0,A
   \   000076   7900         MOV     R1,#0x0
   \   000078   E8           MOV     A,R0
   \   000079   75F00E       MOV     B,#0xe
   \   00007C   A4           MUL     AB
   \   00007D   C8           XCH     A,R0
   \   00007E   ADF0         MOV     R5,B
   \   000080   75F000       MOV     B,#0x0
   \   000083   A4           MUL     AB
   \   000084   2D           ADD     A,R5
   \   000085   FD           MOV     R5,A
   \   000086   75F00E       MOV     B,#0xe
   \   000089   E9           MOV     A,R1
   \   00008A   A4           MUL     AB
   \   00008B   2D           ADD     A,R5
   \   00008C   F9           MOV     R1,A
   \   00008D   74..         MOV     A,#(BindingTable + 2) & 0xff
   \   00008F   28           ADD     A,R0
   \   000090   F582         MOV     DPL,A
   \   000092   74..         MOV     A,#((BindingTable + 2) >> 8) & 0xff
   \   000094   39           ADDC    A,R1
   \   000095   F583         MOV     DPH,A
   \   000097   E0           MOVX    A,@DPTR
   \   000098   6A           XRL     A,R2
   \   000099   7003         JNZ     ??bindAddressClear_5
   \   00009B   A3           INC     DPTR
   \   00009C   E0           MOVX    A,@DPTR
   \   00009D   6B           XRL     A,R3
   \                     ??bindAddressClear_5:
   \   00009E   6003         JZ      $+5
   \   0000A0   02....       LJMP    ??bindAddressClear_3 & 0xFFFF
    751                {
    752                  break;  // found at least one
    753                }
    754              }
    755          
    756              if ( i == gNWK_MAX_BINDING_ENTRIES )
   \                     ??bindAddressClear_4:
   \   0000A3   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   0000A6   E4           CLR     A
   \   0000A7   93           MOVC    A,@A+DPTR
   \   0000A8   6C           XRL     A,R4
   \   0000A9   701B         JNZ     ??bindAddressClear_1
    757              {
    758                // No binding entry is associated with dstIdx.
    759                // Remove user binding bit from the address manager entry corresponding to dstIdx.
    760                AddrMgrEntry_t addrEntry;
    761          
    762                addrEntry.user = ADDRMGR_USER_BINDING;
   \   0000AB   85..82       MOV     DPL,?XSP + 0
   \   0000AE   85..83       MOV     DPH,?XSP + 1
   \   0000B1   7404         MOV     A,#0x4
   \   0000B3   F0           MOVX    @DPTR,A
    763                addrEntry.index = dstIdx;
   \   0000B4   740B         MOV     A,#0xb
   \   0000B6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B9   EA           MOV     A,R2
   \   0000BA   F0           MOVX    @DPTR,A
   \   0000BB   A3           INC     DPTR
   \   0000BC   EB           MOV     A,R3
   \   0000BD   F0           MOVX    @DPTR,A
    764          
    765                AddrMgrEntryRelease( &addrEntry );
   \   0000BE                ; Setup parameters for call to function AddrMgrEntryRelease
   \   0000BE   AA..         MOV     R2,?XSP + 0
   \   0000C0   AB..         MOV     R3,?XSP + 1
   \   0000C2   12....       LCALL   `??AddrMgrEntryRelease::?relay`; Banked call to: AddrMgrEntryRelease
   \   0000C5   E9           MOV     A,R1
    766              }
    767            }
    768          }
   \                     ??bindAddressClear_1:
   \   0000C6   740D         MOV     A,#0xd
   \   0000C8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000CB   D083         POP     DPH
   \   0000CD   D082         POP     DPL
   \   0000CF   02....       LJMP    ?BRET
    769          
    770          /*********************************************************************
    771           * @fn          BindInitNV
    772           *
    773           * @brief       Initialize the Binding NV Item
    774           *
    775           * @param       none
    776           *
    777           * @return      ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
    778           *              exist in NV, NV_OPER_FAILED if failure.
    779           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    780          byte BindInitNV( void )
   \                     BindInitNV:
    781          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    782            byte ret;
    783          
    784            // Initialize the device list
    785            ret = osal_nv_item_init( ZCD_NV_BINDING_TABLE,
    786                            (uint16)( sizeof( nvBindingHdr_t ) + NV_BIND_ITEM_SIZE ), NULL );
   \   000005                ; Setup parameters for call to function osal_nv_item_init
   \   000005   E4           CLR     A
   \   000006   F5..         MOV     ?V0,A
   \   000008   F5..         MOV     ?V1,A
   \   00000A   78..         MOV     R0,#?V0
   \   00000C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00000F   90....       MOV     DPTR,#gBIND_REC_SIZE
   \   000012   E4           CLR     A
   \   000013   93           MOVC    A,@A+DPTR
   \   000014   F8           MOV     R0,A
   \   000015   7401         MOV     A,#0x1
   \   000017   93           MOVC    A,@A+DPTR
   \   000018   F9           MOV     R1,A
   \   000019   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   00001C   E4           CLR     A
   \   00001D   93           MOVC    A,@A+DPTR
   \   00001E   F5..         MOV     ?V0,A
   \   000020   75..00       MOV     ?V1,#0x0
   \   000023   E8           MOV     A,R0
   \   000024   85..F0       MOV     B,?V0
   \   000027   A4           MUL     AB
   \   000028   C8           XCH     A,R0
   \   000029   AAF0         MOV     R2,B
   \   00002B   85..F0       MOV     B,?V1
   \   00002E   A4           MUL     AB
   \   00002F   2A           ADD     A,R2
   \   000030   FA           MOV     R2,A
   \   000031   85..F0       MOV     B,?V0
   \   000034   E9           MOV     A,R1
   \   000035   A4           MUL     AB
   \   000036   2A           ADD     A,R2
   \   000037   F9           MOV     R1,A
   \   000038   E8           MOV     A,R0
   \   000039   2402         ADD     A,#0x2
   \   00003B   FC           MOV     R4,A
   \   00003C   E4           CLR     A
   \   00003D   39           ADDC    A,R1
   \   00003E   FD           MOV     R5,A
   \   00003F   7A41         MOV     R2,#0x41
   \   000041   7B00         MOV     R3,#0x0
   \   000043   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000046   7402         MOV     A,#0x2
   \   000048   12....       LCALL   ?DEALLOC_XSTACK8
   \   00004B   E9           MOV     A,R1
   \   00004C   FE           MOV     R6,A
    787          
    788            if ( ret != ZSUCCESS )
   \   00004D   EE           MOV     A,R6
   \   00004E   6003         JZ      ??BindInitNV_0
    789            {
    790              BindSetDefaultNV();
   \   000050                ; Setup parameters for call to function BindSetDefaultNV
   \   000050   12....       LCALL   `??BindSetDefaultNV::?relay`; Banked call to: BindSetDefaultNV
    791            }
    792          
    793            return ( ret );
   \                     ??BindInitNV_0:
   \   000053   EE           MOV     A,R6
   \   000054   F9           MOV     R1,A
   \   000055   7F02         MOV     R7,#0x2
   \   000057   02....       LJMP    ?BANKED_LEAVE_XDATA
    794          }
    795          
    796          /*********************************************************************
    797           * @fn          BindSetDefaultNV
    798           *
    799           * @brief       Write the defaults to NV
    800           *
    801           * @param       none
    802           *
    803           * @return      none
    804           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    805          void BindSetDefaultNV( void )
   \                     BindSetDefaultNV:
    806          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    807            nvBindingHdr_t hdr;
    808          
    809            // Initialize the header
    810            hdr.numRecs = 0;
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   7400         MOV     A,#0x0
   \   000012   F0           MOVX    @DPTR,A
   \   000013   A3           INC     DPTR
   \   000014   7400         MOV     A,#0x0
   \   000016   F0           MOVX    @DPTR,A
    811          
    812            // Save off the header
    813            osal_nv_write( ZCD_NV_BINDING_TABLE, 0, sizeof( nvBindingHdr_t ), &hdr );
   \   000017                ; Setup parameters for call to function osal_nv_write
   \   000017   A8..         MOV     R0,?XSP + 0
   \   000019   A9..         MOV     R1,?XSP + 1
   \   00001B   88..         MOV     ?V0,R0
   \   00001D   89..         MOV     ?V1,R1
   \   00001F   78..         MOV     R0,#?V0
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000024   75..02       MOV     ?V0,#0x2
   \   000027   75..00       MOV     ?V1,#0x0
   \   00002A   78..         MOV     R0,#?V0
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002F   7C00         MOV     R4,#0x0
   \   000031   7D00         MOV     R5,#0x0
   \   000033   7A41         MOV     R2,#0x41
   \   000035   7B00         MOV     R3,#0x0
   \   000037   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00003A   7404         MOV     A,#0x4
   \   00003C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00003F   E9           MOV     A,R1
    814          }
   \   000040   7402         MOV     A,#0x2
   \   000042   12....       LCALL   ?DEALLOC_XSTACK8
   \   000045   7F02         MOV     R7,#0x2
   \   000047   02....       LJMP    ?BANKED_LEAVE_XDATA
    815          
    816          /*********************************************************************
    817           * @fn          BindCopyBackupToNewNV
    818           *
    819           * @brief       Creates the New NV item, copies the backup data into
    820           *              the New NV ID, and Deletes the duplicate NV item.
    821           *
    822           * @param       dupLen - NV item length of the old Binding table.
    823           * @param       newLen - NV item length of the new Binding table to be created.
    824           *
    825           * @return      ZSuccess - All the actions were successful.
    826           *              ZFailure - Any of the actions failed.
    827           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    828          static uint8 BindCopyBackupToNewNV( uint16 dupLen, uint16 newLen )
   \                     BindCopyBackupToNewNV:
    829          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 18
   \   000005   74EE         MOV     A,#-0x12
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   \   00000E   8C..         MOV     ?V2,R4
   \   000010   8D..         MOV     ?V3,R5
    830            uint16 bindLen;
    831            uint8 status = ZSuccess;
   \   000012   7E00         MOV     R6,#0x0
    832          
    833            bindLen = osal_nv_item_len( ZCD_NV_BINDING_TABLE );
   \   000014                ; Setup parameters for call to function osal_nv_item_len
   \   000014   7A41         MOV     R2,#0x41
   \   000016   7B00         MOV     R3,#0x0
   \   000018   12....       LCALL   `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
   \   00001B   8A..         MOV     ?V4,R2
   \   00001D   8B..         MOV     ?V5,R3
   \   00001F   AC..         MOV     R4,?V4
   \   000021   AD..         MOV     R5,?V5
    834          
    835          
    836            if ( ( bindLen > 0 ) && ( bindLen != newLen ) )
   \   000023   EC           MOV     A,R4
   \   000024   4D           ORL     A,R5
   \   000025   6012         JZ      ??BindCopyBackupToNewNV_0
   \   000027   E5..         MOV     A,?V2
   \   000029   6C           XRL     A,R4
   \   00002A   7003         JNZ     ??BindCopyBackupToNewNV_1
   \   00002C   E5..         MOV     A,?V3
   \   00002E   6D           XRL     A,R5
   \                     ??BindCopyBackupToNewNV_1:
   \   00002F   6008         JZ      ??BindCopyBackupToNewNV_0
    837            {
    838              // The existing item does not match the New length
    839              osal_nv_delete( ZCD_NV_BINDING_TABLE, bindLen );
   \   000031                ; Setup parameters for call to function osal_nv_delete
   \   000031   7A41         MOV     R2,#0x41
   \   000033   7B00         MOV     R3,#0x0
   \   000035   12....       LCALL   `??osal_nv_delete::?relay`; Banked call to: osal_nv_delete
   \   000038   E9           MOV     A,R1
    840            }
    841          
    842            // Create Binding Table NV item with the NEW legth
    843            if ( osal_nv_item_init( ZCD_NV_BINDING_TABLE, newLen, NULL ) != NV_OPER_FAILED )
   \                     ??BindCopyBackupToNewNV_0:
   \   000039                ; Setup parameters for call to function osal_nv_item_init
   \   000039   E4           CLR     A
   \   00003A   F5..         MOV     ?V4,A
   \   00003C   F5..         MOV     ?V5,A
   \   00003E   78..         MOV     R0,#?V4
   \   000040   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000043   AC..         MOV     R4,?V2
   \   000045   AD..         MOV     R5,?V3
   \   000047   7A41         MOV     R2,#0x41
   \   000049   7B00         MOV     R3,#0x0
   \   00004B   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00004E   7402         MOV     A,#0x2
   \   000050   12....       LCALL   ?DEALLOC_XSTACK8
   \   000053   E9           MOV     A,R1
   \   000054   640A         XRL     A,#0xa
   \   000056   7003         JNZ     $+5
   \   000058   02....       LJMP    ??BindCopyBackupToNewNV_2 & 0xFFFF
    844            {
    845              nvBindingHdr_t hdrBackup;
    846          
    847              // Copy ONLY the valid records from the duplicate NV table into the new table
    848              // at the end of this process the table content will be compacted
    849              if ( osal_nv_read( ZCD_NV_DUPLICATE_BINDING_TABLE, 0, sizeof(nvBindingHdr_t), &hdrBackup ) == ZSuccess )
   \   00005B                ; Setup parameters for call to function osal_nv_read
   \   00005B   7402         MOV     A,#0x2
   \   00005D   12....       LCALL   ?XSTACK_DISP100_8
   \   000060   88..         MOV     ?V2,R0
   \   000062   89..         MOV     ?V3,R1
   \   000064   78..         MOV     R0,#?V2
   \   000066   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000069   75..02       MOV     ?V2,#0x2
   \   00006C   75..00       MOV     ?V3,#0x0
   \   00006F   78..         MOV     R0,#?V2
   \   000071   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000074   7C00         MOV     R4,#0x0
   \   000076   7D00         MOV     R5,#0x0
   \   000078   7A00         MOV     R2,#0x0
   \   00007A   7B03         MOV     R3,#0x3
   \   00007C   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00007F   7404         MOV     A,#0x4
   \   000081   12....       LCALL   ?DEALLOC_XSTACK8
   \   000084   E9           MOV     A,R1
   \   000085   6003         JZ      $+5
   \   000087   02....       LJMP    ??BindCopyBackupToNewNV_3 & 0xFFFF
    850              {
    851                bindTableIndex_t i;
    852                uint16 validBackupRecs = 0;
   \   00008A   85..82       MOV     DPL,?XSP + 0
   \   00008D   85..83       MOV     DPH,?XSP + 1
   \   000090   7400         MOV     A,#0x0
   \   000092   F0           MOVX    @DPTR,A
   \   000093   A3           INC     DPTR
   \   000094   7400         MOV     A,#0x0
   \   000096   F0           MOVX    @DPTR,A
    853                BindingEntry_t backupRec;
    854          
    855                // Read in the device list. This loop will stop when:
    856                // The total number of valid records has been reached either because:
    857                //          The new table is full of valid records OR
    858                //          The old table has less valid records than the size of the table
    859                for ( i = 0; ( validBackupRecs < gNWK_MAX_BINDING_ENTRIES ) && ( validBackupRecs < hdrBackup.numRecs ); i++ )
   \   000097   7F00         MOV     R7,#0x0
   \   000099   8010         SJMP    ??BindCopyBackupToNewNV_4
    860                {
    861                  if ( osal_nv_read( ZCD_NV_DUPLICATE_BINDING_TABLE,
    862                                    (uint16)(sizeof(nvBindingHdr_t) + (i * NV_BIND_REC_SIZE)),
    863                                    NV_BIND_REC_SIZE, &backupRec ) == ZSuccess )
    864                  {
    865                    if ( backupRec.srcEP != NV_BIND_EMPTY )
    866                    {
    867                      // Save the valid record into the NEW NV table.
    868                      if ( osal_nv_write( ZCD_NV_BINDING_TABLE,
    869                                          (uint16)((sizeof(nvBindingHdr_t)) + (validBackupRecs * NV_BIND_REC_SIZE)),
    870                                          NV_BIND_REC_SIZE, &backupRec ) != ZSuccess )
    871                      {
    872                         status = ZFailure;
    873                         break; // Terminate the loop as soon as a problem with NV is detected
    874                      }
    875          
    876                      validBackupRecs++;
   \                     ??BindCopyBackupToNewNV_5:
   \   00009B   85..82       MOV     DPL,?XSP + 0
   \   00009E   85..83       MOV     DPH,?XSP + 1
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   2401         ADD     A,#0x1
   \   0000A4   F0           MOVX    @DPTR,A
   \   0000A5   A3           INC     DPTR
   \   0000A6   E0           MOVX    A,@DPTR
   \   0000A7   3400         ADDC    A,#0x0
   \   0000A9   F0           MOVX    @DPTR,A
   \                     ??BindCopyBackupToNewNV_6:
   \   0000AA   0F           INC     R7
   \                     ??BindCopyBackupToNewNV_4:
   \   0000AB   85..82       MOV     DPL,?XSP + 0
   \   0000AE   85..83       MOV     DPH,?XSP + 1
   \   0000B1   C082         PUSH    DPL
   \   0000B3   C083         PUSH    DPH
   \   0000B5   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   0000B8   E4           CLR     A
   \   0000B9   93           MOVC    A,@A+DPTR
   \   0000BA   F8           MOV     R0,A
   \   0000BB   7900         MOV     R1,#0x0
   \   0000BD   D083         POP     DPH
   \   0000BF   D082         POP     DPL
   \   0000C1   C3           CLR     C
   \   0000C2   E0           MOVX    A,@DPTR
   \   0000C3   98           SUBB    A,R0
   \   0000C4   A3           INC     DPTR
   \   0000C5   E0           MOVX    A,@DPTR
   \   0000C6   99           SUBB    A,R1
   \   0000C7   4003         JC      $+5
   \   0000C9   02....       LJMP    ??BindCopyBackupToNewNV_7 & 0xFFFF
   \   0000CC   85..82       MOV     DPL,?XSP + 0
   \   0000CF   85..83       MOV     DPH,?XSP + 1
   \   0000D2   C082         PUSH    DPL
   \   0000D4   C083         PUSH    DPH
   \   0000D6   7402         MOV     A,#0x2
   \   0000D8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   F8           MOV     R0,A
   \   0000DD   A3           INC     DPTR
   \   0000DE   E0           MOVX    A,@DPTR
   \   0000DF   F9           MOV     R1,A
   \   0000E0   D083         POP     DPH
   \   0000E2   D082         POP     DPL
   \   0000E4   C3           CLR     C
   \   0000E5   E0           MOVX    A,@DPTR
   \   0000E6   98           SUBB    A,R0
   \   0000E7   A3           INC     DPTR
   \   0000E8   E0           MOVX    A,@DPTR
   \   0000E9   99           SUBB    A,R1
   \   0000EA   4003         JC      $+5
   \   0000EC   02....       LJMP    ??BindCopyBackupToNewNV_7 & 0xFFFF
   \   0000EF                ; Setup parameters for call to function osal_nv_read
   \   0000EF   7404         MOV     A,#0x4
   \   0000F1   12....       LCALL   ?XSTACK_DISP100_8
   \   0000F4   88..         MOV     ?V2,R0
   \   0000F6   89..         MOV     ?V3,R1
   \   0000F8   78..         MOV     R0,#?V2
   \   0000FA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000FD   90....       MOV     DPTR,#gBIND_REC_SIZE
   \   000100   12....       LCALL   ?PUSH_XSTACK8_C_TWO
   \   000103   EF           MOV     A,R7
   \   000104   F8           MOV     R0,A
   \   000105   7900         MOV     R1,#0x0
   \   000107   90....       MOV     DPTR,#gBIND_REC_SIZE
   \   00010A   E4           CLR     A
   \   00010B   93           MOVC    A,@A+DPTR
   \   00010C   F5..         MOV     ?V2,A
   \   00010E   7401         MOV     A,#0x1
   \   000110   93           MOVC    A,@A+DPTR
   \   000111   F5..         MOV     ?V3,A
   \   000113   E8           MOV     A,R0
   \   000114   85..F0       MOV     B,?V2
   \   000117   A4           MUL     AB
   \   000118   C8           XCH     A,R0
   \   000119   AAF0         MOV     R2,B
   \   00011B   85..F0       MOV     B,?V3
   \   00011E   A4           MUL     AB
   \   00011F   2A           ADD     A,R2
   \   000120   FA           MOV     R2,A
   \   000121   85..F0       MOV     B,?V2
   \   000124   E9           MOV     A,R1
   \   000125   A4           MUL     AB
   \   000126   2A           ADD     A,R2
   \   000127   F9           MOV     R1,A
   \   000128   E8           MOV     A,R0
   \   000129   2402         ADD     A,#0x2
   \   00012B   FC           MOV     R4,A
   \   00012C   E4           CLR     A
   \   00012D   39           ADDC    A,R1
   \   00012E   FD           MOV     R5,A
   \   00012F   7A00         MOV     R2,#0x0
   \   000131   7B03         MOV     R3,#0x3
   \   000133   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000136   7404         MOV     A,#0x4
   \   000138   12....       LCALL   ?DEALLOC_XSTACK8
   \   00013B   E9           MOV     A,R1
   \   00013C   7069         JNZ     ??BindCopyBackupToNewNV_8
   \   00013E   7404         MOV     A,#0x4
   \   000140   12....       LCALL   ?XSTACK_DISP0_8
   \   000143   E0           MOVX    A,@DPTR
   \   000144   64FF         XRL     A,#0xff
   \   000146   7003         JNZ     $+5
   \   000148   02....       LJMP    ??BindCopyBackupToNewNV_6 & 0xFFFF
   \   00014B                ; Setup parameters for call to function osal_nv_write
   \   00014B   7404         MOV     A,#0x4
   \   00014D   12....       LCALL   ?XSTACK_DISP100_8
   \   000150   88..         MOV     ?V2,R0
   \   000152   89..         MOV     ?V3,R1
   \   000154   78..         MOV     R0,#?V2
   \   000156   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000159   90....       MOV     DPTR,#gBIND_REC_SIZE
   \   00015C   12....       LCALL   ?PUSH_XSTACK8_C_TWO
   \   00015F   7404         MOV     A,#0x4
   \   000161   12....       LCALL   ?XSTACK_DISP0_8
   \   000164   E0           MOVX    A,@DPTR
   \   000165   F8           MOV     R0,A
   \   000166   A3           INC     DPTR
   \   000167   E0           MOVX    A,@DPTR
   \   000168   F9           MOV     R1,A
   \   000169   90....       MOV     DPTR,#gBIND_REC_SIZE
   \   00016C   E4           CLR     A
   \   00016D   93           MOVC    A,@A+DPTR
   \   00016E   F5..         MOV     ?V2,A
   \   000170   7401         MOV     A,#0x1
   \   000172   93           MOVC    A,@A+DPTR
   \   000173   F5..         MOV     ?V3,A
   \   000175   E8           MOV     A,R0
   \   000176   85..F0       MOV     B,?V2
   \   000179   A4           MUL     AB
   \   00017A   C8           XCH     A,R0
   \   00017B   AAF0         MOV     R2,B
   \   00017D   85..F0       MOV     B,?V3
   \   000180   A4           MUL     AB
   \   000181   2A           ADD     A,R2
   \   000182   FA           MOV     R2,A
   \   000183   85..F0       MOV     B,?V2
   \   000186   E9           MOV     A,R1
   \   000187   A4           MUL     AB
   \   000188   2A           ADD     A,R2
   \   000189   F9           MOV     R1,A
   \   00018A   E8           MOV     A,R0
   \   00018B   2402         ADD     A,#0x2
   \   00018D   FC           MOV     R4,A
   \   00018E   E4           CLR     A
   \   00018F   39           ADDC    A,R1
   \   000190   FD           MOV     R5,A
   \   000191   7A41         MOV     R2,#0x41
   \   000193   7B00         MOV     R3,#0x0
   \   000195   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000198   7404         MOV     A,#0x4
   \   00019A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00019D   E9           MOV     A,R1
   \   00019E   7003         JNZ     $+5
   \   0001A0   02....       LJMP    ??BindCopyBackupToNewNV_5 & 0xFFFF
   \   0001A3   7E01         MOV     R6,#0x1
   \   0001A5   8002         SJMP    ??BindCopyBackupToNewNV_7
    877                    }
    878                  }
    879                  else
    880                  {
    881                     status = ZFailure;
   \                     ??BindCopyBackupToNewNV_8:
   \   0001A7   7E01         MOV     R6,#0x1
    882                     break; // Terminate the loop as soon as a problem with NV is detected
    883                  }
    884                }
    885          
    886                // Only save the header and delete the duplicate element if the previous
    887                // process was successful
    888                if ( status == ZSuccess )
   \                     ??BindCopyBackupToNewNV_7:
   \   0001A9   EE           MOV     A,R6
   \   0001AA   7047         JNZ     ??BindCopyBackupToNewNV_9
    889                {
    890                  // Save off the header
    891                  if ( osal_nv_write( ZCD_NV_BINDING_TABLE, 0,
    892                                      sizeof(nvBindingHdr_t), &validBackupRecs ) == ZSuccess )
   \   0001AC                ; Setup parameters for call to function osal_nv_write
   \   0001AC   A8..         MOV     R0,?XSP + 0
   \   0001AE   A9..         MOV     R1,?XSP + 1
   \   0001B0   88..         MOV     ?V2,R0
   \   0001B2   89..         MOV     ?V3,R1
   \   0001B4   78..         MOV     R0,#?V2
   \   0001B6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001B9   75..02       MOV     ?V2,#0x2
   \   0001BC   75..00       MOV     ?V3,#0x0
   \   0001BF   78..         MOV     R0,#?V2
   \   0001C1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001C4   7C00         MOV     R4,#0x0
   \   0001C6   7D00         MOV     R5,#0x0
   \   0001C8   7A41         MOV     R2,#0x41
   \   0001CA   7B00         MOV     R3,#0x0
   \   0001CC   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0001CF   7404         MOV     A,#0x4
   \   0001D1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001D4   E9           MOV     A,R1
   \   0001D5   7012         JNZ     ??BindCopyBackupToNewNV_10
    893                  {
    894                    // Delete the duplicate NV Item, once the data has been stored in the NEW table
    895                    if ( osal_nv_delete( ZCD_NV_DUPLICATE_BINDING_TABLE, dupLen ) != ZSuccess )
   \   0001D7                ; Setup parameters for call to function osal_nv_delete
   \   0001D7   AC..         MOV     R4,?V0
   \   0001D9   AD..         MOV     R5,?V1
   \   0001DB   7A00         MOV     R2,#0x0
   \   0001DD   7B03         MOV     R3,#0x3
   \   0001DF   12....       LCALL   `??osal_nv_delete::?relay`; Banked call to: osal_nv_delete
   \   0001E2   E9           MOV     A,R1
   \   0001E3   600E         JZ      ??BindCopyBackupToNewNV_9
    896                    {
    897                      status = ZFailure;
   \   0001E5   7E01         MOV     R6,#0x1
   \   0001E7   800A         SJMP    ??BindCopyBackupToNewNV_9
    898                    }
    899                  }
    900                  else
    901                  {
    902                    status = ZFailure;
   \                     ??BindCopyBackupToNewNV_10:
   \   0001E9   7E01         MOV     R6,#0x1
   \   0001EB   8006         SJMP    ??BindCopyBackupToNewNV_9
    903                  }
    904                }
    905              }
    906              else
    907              {
    908                status = ZFailure;
   \                     ??BindCopyBackupToNewNV_3:
   \   0001ED   7E01         MOV     R6,#0x1
   \   0001EF   8002         SJMP    ??BindCopyBackupToNewNV_9
    909              }
    910            }
    911            else
    912            {
    913              status = ZFailure;
   \                     ??BindCopyBackupToNewNV_2:
   \   0001F1   7E01         MOV     R6,#0x1
    914            }
    915          
    916            return ( status );
   \                     ??BindCopyBackupToNewNV_9:
   \   0001F3   EE           MOV     A,R6
   \   0001F4   F9           MOV     R1,A
   \   0001F5   7412         MOV     A,#0x12
   \   0001F7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001FA   7F06         MOV     R7,#0x6
   \   0001FC   02....       LJMP    ?BANKED_LEAVE_XDATA
    917          }
    918          
    919          /*********************************************************************
    920           * @fn          BindUpgradeTableInNV
    921           *
    922           * @brief       Verifies if the existing table in NV has different size
    923           *              than the table defined by parameters in the current code.
    924           *              If different, creates a backup table, deletes the existing
    925           *              table and creates the new table with the new size. After
    926           *              this process is done ZCD_NV_BINDING_TABLE NV item contains
    927           *              only valid records retrieved from the original table, up to
    928           *              the maximum number of records defined by gNWK_MAX_BINDING_ENTRIES
    929           *
    930           * @param       none
    931           *
    932           * @return      ZSuccess - the Update process was sucessful.
    933           *              ZFailure - otherwise.
    934           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    935          static uint8 BindUpgradeTableInNV( void )
   \                     BindUpgradeTableInNV:
    936          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    937            nvBindingHdr_t hdr;
    938            uint16 dupLen;
    939            uint16 bindLen;
    940            uint16 newLen;
    941            uint8 status = ZSuccess;
   \   00000A   75..00       MOV     ?V2,#0x0
    942            bool duplicateReady = FALSE;
   \   00000D   75..00       MOV     ?V3,#0x0
    943          
    944            // Size of the Binding table based on current paramenters in the code
    945            newLen = sizeof(nvBindingHdr_t) + NV_BIND_ITEM_SIZE;
   \   000010   90....       MOV     DPTR,#gBIND_REC_SIZE
   \   000013   E4           CLR     A
   \   000014   93           MOVC    A,@A+DPTR
   \   000015   F8           MOV     R0,A
   \   000016   7401         MOV     A,#0x1
   \   000018   93           MOVC    A,@A+DPTR
   \   000019   F9           MOV     R1,A
   \   00001A   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   00001D   E4           CLR     A
   \   00001E   93           MOVC    A,@A+DPTR
   \   00001F   F5..         MOV     ?V0,A
   \   000021   75..00       MOV     ?V1,#0x0
   \   000024   E8           MOV     A,R0
   \   000025   85..F0       MOV     B,?V0
   \   000028   A4           MUL     AB
   \   000029   C8           XCH     A,R0
   \   00002A   AAF0         MOV     R2,B
   \   00002C   85..F0       MOV     B,?V1
   \   00002F   A4           MUL     AB
   \   000030   2A           ADD     A,R2
   \   000031   FA           MOV     R2,A
   \   000032   85..F0       MOV     B,?V0
   \   000035   E9           MOV     A,R1
   \   000036   A4           MUL     AB
   \   000037   2A           ADD     A,R2
   \   000038   F9           MOV     R1,A
   \   000039   E8           MOV     A,R0
   \   00003A   2402         ADD     A,#0x2
   \   00003C   F5..         MOV     ?V0,A
   \   00003E   E4           CLR     A
   \   00003F   39           ADDC    A,R1
   \   000040   F5..         MOV     ?V1,A
    946          
    947            // Size of the Binding table NV item, this is the whole size of the item,
    948            // it could inculde invalid records also
    949            bindLen = osal_nv_item_len( ZCD_NV_BINDING_TABLE );
   \   000042                ; Setup parameters for call to function osal_nv_item_len
   \   000042   7A41         MOV     R2,#0x41
   \   000044   7B00         MOV     R3,#0x0
   \   000046   12....       LCALL   `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
   \   000049   8A..         MOV     ?V4,R2
   \   00004B   8B..         MOV     ?V5,R3
   \   00004D   AE..         MOV     R6,?V4
   \   00004F   AF..         MOV     R7,?V5
    950          
    951            // Get the number of valid records from the Binding table
    952            osal_nv_read( ZCD_NV_BINDING_TABLE, 0, sizeof(nvBindingHdr_t), &hdr );
   \   000051                ; Setup parameters for call to function osal_nv_read
   \   000051   A8..         MOV     R0,?XSP + 0
   \   000053   A9..         MOV     R1,?XSP + 1
   \   000055   88..         MOV     ?V4,R0
   \   000057   89..         MOV     ?V5,R1
   \   000059   78..         MOV     R0,#?V4
   \   00005B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005E   75..02       MOV     ?V4,#0x2
   \   000061   75..00       MOV     ?V5,#0x0
   \   000064   78..         MOV     R0,#?V4
   \   000066   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000069   7C00         MOV     R4,#0x0
   \   00006B   7D00         MOV     R5,#0x0
   \   00006D   7A41         MOV     R2,#0x41
   \   00006F   7B00         MOV     R3,#0x0
   \   000071   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000074   7404         MOV     A,#0x4
   \   000076   12....       LCALL   ?DEALLOC_XSTACK8
   \   000079   E9           MOV     A,R1
    953          
    954            // Identify if there is a duplicate NV item, if it is there, that means an
    955            // Upgrade process did not finish properly last time
    956            // The length function will return 0 if the Backup NV ID does not exist.
    957            dupLen = osal_nv_item_len( ZCD_NV_DUPLICATE_BINDING_TABLE );
   \   00007A                ; Setup parameters for call to function osal_nv_item_len
   \   00007A   7A00         MOV     R2,#0x0
   \   00007C   7B03         MOV     R3,#0x3
   \   00007E   12....       LCALL   `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
   \   000081   8A..         MOV     ?V4,R2
   \   000083   8B..         MOV     ?V5,R3
   \   000085   A8..         MOV     R0,?V4
   \   000087   A9..         MOV     R1,?V5
    958          
    959            // A duplicate of the original Binding item will be done if:
    960            // 1) A duplicate NV item DOES NOT exist AND the size of the original Binding
    961            //    item in NV is different (larger/smaller) than the the length calculated
    962            //    from the parameters in the code. If they are the same there is no need
    963            //    to do the Upgrade process.
    964            // 2) A duplicate NV item exists (probably because the previous upgrade
    965            //    process was interrupted) and [the original Binding NV items exists AND
    966            //    has valid recods (it is important to make sure that valid records exist
    967            //    in the binding table because it is possible that the item was created
    968            //    but the data was not copied in the previous upgrade process).
    969            if ( ( ( dupLen == 0 ) && ( bindLen != newLen ) ) ||
    970                 ( ( dupLen > 0 ) && ( bindLen > 0 ) && ( hdr.numRecs > 0 ) ) )
   \   000089   E8           MOV     A,R0
   \   00008A   49           ORL     A,R1
   \   00008B   700A         JNZ     ??BindUpgradeTableInNV_0
   \   00008D   E5..         MOV     A,?V0
   \   00008F   6E           XRL     A,R6
   \   000090   7003         JNZ     ??BindUpgradeTableInNV_1
   \   000092   E5..         MOV     A,?V1
   \   000094   6F           XRL     A,R7
   \                     ??BindUpgradeTableInNV_1:
   \   000095   7017         JNZ     ??BindUpgradeTableInNV_2
   \                     ??BindUpgradeTableInNV_0:
   \   000097   E8           MOV     A,R0
   \   000098   49           ORL     A,R1
   \   000099   603D         JZ      ??BindUpgradeTableInNV_3
   \   00009B   EE           MOV     A,R6
   \   00009C   4F           ORL     A,R7
   \   00009D   6039         JZ      ??BindUpgradeTableInNV_3
   \   00009F   85..82       MOV     DPL,?XSP + 0
   \   0000A2   85..83       MOV     DPH,?XSP + 1
   \   0000A5   E0           MOVX    A,@DPTR
   \   0000A6   FA           MOV     R2,A
   \   0000A7   A3           INC     DPTR
   \   0000A8   E0           MOVX    A,@DPTR
   \   0000A9   FB           MOV     R3,A
   \   0000AA   EA           MOV     A,R2
   \   0000AB   4B           ORL     A,R3
   \   0000AC   602A         JZ      ??BindUpgradeTableInNV_3
    971            {
    972              // Create a copy from original NV item into a duplicate NV item
    973              if ( ( status = nwkCreateDuplicateNV( ZCD_NV_BINDING_TABLE,
    974                                                    ZCD_NV_DUPLICATE_BINDING_TABLE ) ) == ZSuccess )
   \                     ??BindUpgradeTableInNV_2:
   \   0000AE                ; Setup parameters for call to function nwkCreateDuplicateNV
   \   0000AE   7C00         MOV     R4,#0x0
   \   0000B0   7D03         MOV     R5,#0x3
   \   0000B2   7A41         MOV     R2,#0x41
   \   0000B4   7B00         MOV     R3,#0x0
   \   0000B6   12....       LCALL   `??nwkCreateDuplicateNV::?relay`; Banked call to: nwkCreateDuplicateNV
   \   0000B9   E9           MOV     A,R1
   \   0000BA   F8           MOV     R0,A
   \   0000BB   88..         MOV     ?V2,R0
   \   0000BD   E8           MOV     A,R0
   \   0000BE   703E         JNZ     ??BindUpgradeTableInNV_4
    975              {
    976                // Delete the original NV item once the duplicate is ready
    977                if ( osal_nv_delete( ZCD_NV_BINDING_TABLE, bindLen ) != ZSuccess )
   \   0000C0                ; Setup parameters for call to function osal_nv_delete
   \   0000C0   EE           MOV     A,R6
   \   0000C1   FC           MOV     R4,A
   \   0000C2   EF           MOV     A,R7
   \   0000C3   FD           MOV     R5,A
   \   0000C4   7A41         MOV     R2,#0x41
   \   0000C6   7B00         MOV     R3,#0x0
   \   0000C8   12....       LCALL   `??osal_nv_delete::?relay`; Banked call to: osal_nv_delete
   \   0000CB   E9           MOV     A,R1
   \   0000CC   6005         JZ      ??BindUpgradeTableInNV_5
    978                {
    979                  status = ZFailure;
   \   0000CE   75..01       MOV     ?V2,#0x1
   \   0000D1   802B         SJMP    ??BindUpgradeTableInNV_4
    980                }
    981                else
    982                {
    983                  duplicateReady = TRUE;
   \                     ??BindUpgradeTableInNV_5:
   \   0000D3   75..01       MOV     ?V3,#0x1
   \   0000D6   8026         SJMP    ??BindUpgradeTableInNV_4
    984                }
    985              }
    986            }
    987            else if ( ( ( dupLen > 0 ) && ( bindLen == 0 ) ) ||
    988                      ( ( dupLen > 0 ) && ( bindLen > 0 ) && ( hdr.numRecs == 0 ) ) )
   \                     ??BindUpgradeTableInNV_3:
   \   0000D8   E8           MOV     A,R0
   \   0000D9   49           ORL     A,R1
   \   0000DA   6004         JZ      ??BindUpgradeTableInNV_6
   \   0000DC   EE           MOV     A,R6
   \   0000DD   4F           ORL     A,R7
   \   0000DE   6017         JZ      ??BindUpgradeTableInNV_7
   \                     ??BindUpgradeTableInNV_6:
   \   0000E0   E8           MOV     A,R0
   \   0000E1   49           ORL     A,R1
   \   0000E2   601A         JZ      ??BindUpgradeTableInNV_4
   \   0000E4   EE           MOV     A,R6
   \   0000E5   4F           ORL     A,R7
   \   0000E6   6016         JZ      ??BindUpgradeTableInNV_4
   \   0000E8   85..82       MOV     DPL,?XSP + 0
   \   0000EB   85..83       MOV     DPH,?XSP + 1
   \   0000EE   E0           MOVX    A,@DPTR
   \   0000EF   FA           MOV     R2,A
   \   0000F0   A3           INC     DPTR
   \   0000F1   E0           MOVX    A,@DPTR
   \   0000F2   FB           MOV     R3,A
   \   0000F3   EA           MOV     A,R2
   \   0000F4   4B           ORL     A,R3
   \   0000F5   7007         JNZ     ??BindUpgradeTableInNV_4
    989            {
    990              // If for some reason a duplicate NV item was left in the system from a
    991              // previous upgrade process and:
    992              // 1) The original Binding NV item DOES NOT exist OR
    993              // 2) The original Binding NV item exist, but has no valid records.
    994              // it is necessary to rely in the data in the Duplicate item to create
    995              // the Binding table
    996              bindLen = dupLen;
   \                     ??BindUpgradeTableInNV_7:
   \   0000F7   E8           MOV     A,R0
   \   0000F8   FE           MOV     R6,A
   \   0000F9   E9           MOV     A,R1
   \   0000FA   FF           MOV     R7,A
    997          
    998              duplicateReady = TRUE;
   \   0000FB   75..01       MOV     ?V3,#0x1
    999            }
   1000          
   1001            if ( duplicateReady == TRUE )
   \                     ??BindUpgradeTableInNV_4:
   \   0000FE   7401         MOV     A,#0x1
   \   000100   65..         XRL     A,?V3
   \   000102   700E         JNZ     ??BindUpgradeTableInNV_8
   1002            {
   1003              // Creates the New Binding table, Copy data from backup and Delete backup NV ID
   1004              status = BindCopyBackupToNewNV( bindLen, newLen );
   \   000104                ; Setup parameters for call to function BindCopyBackupToNewNV
   \   000104   AC..         MOV     R4,?V0
   \   000106   AD..         MOV     R5,?V1
   \   000108   EE           MOV     A,R6
   \   000109   FA           MOV     R2,A
   \   00010A   EF           MOV     A,R7
   \   00010B   FB           MOV     R3,A
   \   00010C   12....       LCALL   `??BindCopyBackupToNewNV::?relay`; Banked call to: BindCopyBackupToNewNV
   \   00010F   E9           MOV     A,R1
   \   000110   F5..         MOV     ?V2,A
   1005            }
   1006          
   1007            return ( status );
   \                     ??BindUpgradeTableInNV_8:
   \   000112   A9..         MOV     R1,?V2
   \   000114   7402         MOV     A,#0x2
   \   000116   12....       LCALL   ?DEALLOC_XSTACK8
   \   000119   7F06         MOV     R7,#0x6
   \   00011B   02....       LJMP    ?BANKED_LEAVE_XDATA
   1008          }
   1009          
   1010          /*********************************************************************
   1011           * @fn          BindRestoreFromNV
   1012           *
   1013           * @brief       Restore the binding table from NV
   1014           *
   1015           * @param       none
   1016           *
   1017           * @return      Number of entries restored
   1018           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1019          uint16 BindRestoreFromNV( void )
   \                     BindRestoreFromNV:
   1020          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1021            nvBindingHdr_t hdr;
   1022          
   1023            hdr.numRecs = 0;
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   7400         MOV     A,#0x0
   \   000012   F0           MOVX    @DPTR,A
   \   000013   A3           INC     DPTR
   \   000014   7400         MOV     A,#0x0
   \   000016   F0           MOVX    @DPTR,A
   1024          
   1025            if ( BindUpgradeTableInNV() == ZSuccess )
   \   000017                ; Setup parameters for call to function BindUpgradeTableInNV
   \   000017   12....       LCALL   `??BindUpgradeTableInNV::?relay`; Banked call to: BindUpgradeTableInNV
   \   00001A   E9           MOV     A,R1
   \   00001B   6003         JZ      $+5
   \   00001D   02....       LJMP    ??BindRestoreFromNV_0 & 0xFFFF
   1026            {
   1027              if ( osal_nv_read( ZCD_NV_BINDING_TABLE, 0, sizeof(nvBindingHdr_t), &hdr ) == ZSuccess )
   \   000020                ; Setup parameters for call to function osal_nv_read
   \   000020   A8..         MOV     R0,?XSP + 0
   \   000022   A9..         MOV     R1,?XSP + 1
   \   000024   88..         MOV     ?V0,R0
   \   000026   89..         MOV     ?V1,R1
   \   000028   78..         MOV     R0,#?V0
   \   00002A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002D   75..02       MOV     ?V0,#0x2
   \   000030   75..00       MOV     ?V1,#0x0
   \   000033   78..         MOV     R0,#?V0
   \   000035   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000038   7C00         MOV     R4,#0x0
   \   00003A   7D00         MOV     R5,#0x0
   \   00003C   7A41         MOV     R2,#0x41
   \   00003E   7B00         MOV     R3,#0x0
   \   000040   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000043   7404         MOV     A,#0x4
   \   000045   12....       LCALL   ?DEALLOC_XSTACK8
   \   000048   E9           MOV     A,R1
   \   000049   6003         JZ      $+5
   \   00004B   02....       LJMP    ??BindRestoreFromNV_0 & 0xFFFF
   1028              {
   1029                bindTableIndex_t x;
   1030                uint16 validRecsCount = 0;
   \   00004E   7E00         MOV     R6,#0x0
   \   000050   7F00         MOV     R7,#0x0
   1031          
   1032                // Read in the device list
   1033                for ( x = 0; ( x < gNWK_MAX_BINDING_ENTRIES ) && ( validRecsCount < hdr.numRecs ); x++ )
   \   000052   75..00       MOV     ?V0,#0x0
   \   000055   02....       LJMP    ??BindRestoreFromNV_1 & 0xFFFF
   1034                {
   1035                  if ( osal_nv_read( ZCD_NV_BINDING_TABLE,
   1036                                     (uint16)(sizeof(nvBindingHdr_t) + (x * NV_BIND_REC_SIZE)),
   1037                                     NV_BIND_REC_SIZE, &BindingTable[x] ) == ZSUCCESS )
   \                     ??BindRestoreFromNV_2:
   \   000058                ; Setup parameters for call to function osal_nv_read
   \   000058   A8..         MOV     R0,?V0
   \   00005A   7900         MOV     R1,#0x0
   \   00005C   E8           MOV     A,R0
   \   00005D   75F00E       MOV     B,#0xe
   \   000060   A4           MUL     AB
   \   000061   C8           XCH     A,R0
   \   000062   AAF0         MOV     R2,B
   \   000064   75F000       MOV     B,#0x0
   \   000067   A4           MUL     AB
   \   000068   2A           ADD     A,R2
   \   000069   FA           MOV     R2,A
   \   00006A   75F00E       MOV     B,#0xe
   \   00006D   E9           MOV     A,R1
   \   00006E   A4           MUL     AB
   \   00006F   2A           ADD     A,R2
   \   000070   F9           MOV     R1,A
   \   000071   74..         MOV     A,#BindingTable & 0xff
   \   000073   28           ADD     A,R0
   \   000074   F5..         MOV     ?V2,A
   \   000076   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   000078   39           ADDC    A,R1
   \   000079   F5..         MOV     ?V3,A
   \   00007B   78..         MOV     R0,#?V2
   \   00007D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000080   90....       MOV     DPTR,#gBIND_REC_SIZE
   \   000083   12....       LCALL   ?PUSH_XSTACK8_C_TWO
   \   000086   A8..         MOV     R0,?V0
   \   000088   7900         MOV     R1,#0x0
   \   00008A   90....       MOV     DPTR,#gBIND_REC_SIZE
   \   00008D   E4           CLR     A
   \   00008E   93           MOVC    A,@A+DPTR
   \   00008F   F5..         MOV     ?V2,A
   \   000091   7401         MOV     A,#0x1
   \   000093   93           MOVC    A,@A+DPTR
   \   000094   F5..         MOV     ?V3,A
   \   000096   E8           MOV     A,R0
   \   000097   85..F0       MOV     B,?V2
   \   00009A   A4           MUL     AB
   \   00009B   C8           XCH     A,R0
   \   00009C   AAF0         MOV     R2,B
   \   00009E   85..F0       MOV     B,?V3
   \   0000A1   A4           MUL     AB
   \   0000A2   2A           ADD     A,R2
   \   0000A3   FA           MOV     R2,A
   \   0000A4   85..F0       MOV     B,?V2
   \   0000A7   E9           MOV     A,R1
   \   0000A8   A4           MUL     AB
   \   0000A9   2A           ADD     A,R2
   \   0000AA   F9           MOV     R1,A
   \   0000AB   E8           MOV     A,R0
   \   0000AC   2402         ADD     A,#0x2
   \   0000AE   FC           MOV     R4,A
   \   0000AF   E4           CLR     A
   \   0000B0   39           ADDC    A,R1
   \   0000B1   FD           MOV     R5,A
   \   0000B2   7A41         MOV     R2,#0x41
   \   0000B4   7B00         MOV     R3,#0x0
   \   0000B6   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   0000B9   7404         MOV     A,#0x4
   \   0000BB   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000BE   E9           MOV     A,R1
   \   0000BF   702D         JNZ     ??BindRestoreFromNV_3
   1038                  {
   1039                    if ( BindingTable[x].srcEP != NV_BIND_EMPTY )
   \   0000C1   A8..         MOV     R0,?V0
   \   0000C3   7900         MOV     R1,#0x0
   \   0000C5   E8           MOV     A,R0
   \   0000C6   75F00E       MOV     B,#0xe
   \   0000C9   A4           MUL     AB
   \   0000CA   C8           XCH     A,R0
   \   0000CB   AAF0         MOV     R2,B
   \   0000CD   75F000       MOV     B,#0x0
   \   0000D0   A4           MUL     AB
   \   0000D1   2A           ADD     A,R2
   \   0000D2   FA           MOV     R2,A
   \   0000D3   75F00E       MOV     B,#0xe
   \   0000D6   E9           MOV     A,R1
   \   0000D7   A4           MUL     AB
   \   0000D8   2A           ADD     A,R2
   \   0000D9   F9           MOV     R1,A
   \   0000DA   74..         MOV     A,#BindingTable & 0xff
   \   0000DC   28           ADD     A,R0
   \   0000DD   F582         MOV     DPL,A
   \   0000DF   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   0000E1   39           ADDC    A,R1
   \   0000E2   F583         MOV     DPH,A
   \   0000E4   E0           MOVX    A,@DPTR
   \   0000E5   64FF         XRL     A,#0xff
   \   0000E7   6005         JZ      ??BindRestoreFromNV_3
   1040                    {
   1041                      validRecsCount++;
   \   0000E9   0E           INC     R6
   \   0000EA   EE           MOV     A,R6
   \   0000EB   7001         JNZ     ??BindRestoreFromNV_3
   \   0000ED   0F           INC     R7
   1042                    }
   1043                  }
   1044                }
   \                     ??BindRestoreFromNV_3:
   \   0000EE   05..         INC     ?V0
   \                     ??BindRestoreFromNV_1:
   \   0000F0   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   0000F3   E4           CLR     A
   \   0000F4   93           MOVC    A,@A+DPTR
   \   0000F5   F8           MOV     R0,A
   \   0000F6   E5..         MOV     A,?V0
   \   0000F8   C3           CLR     C
   \   0000F9   98           SUBB    A,R0
   \   0000FA   5015         JNC     ??BindRestoreFromNV_0
   \   0000FC   85..82       MOV     DPL,?XSP + 0
   \   0000FF   85..83       MOV     DPH,?XSP + 1
   \   000102   E0           MOVX    A,@DPTR
   \   000103   F8           MOV     R0,A
   \   000104   A3           INC     DPTR
   \   000105   E0           MOVX    A,@DPTR
   \   000106   F9           MOV     R1,A
   \   000107   C3           CLR     C
   \   000108   EE           MOV     A,R6
   \   000109   98           SUBB    A,R0
   \   00010A   EF           MOV     A,R7
   \   00010B   99           SUBB    A,R1
   \   00010C   5003         JNC     $+5
   \   00010E   02....       LJMP    ??BindRestoreFromNV_2 & 0xFFFF
   1045              }
   1046            }
   1047            return ( hdr.numRecs );
   \                     ??BindRestoreFromNV_0:
   \   000111   85..82       MOV     DPL,?XSP + 0
   \   000114   85..83       MOV     DPH,?XSP + 1
   \   000117   E0           MOVX    A,@DPTR
   \   000118   FA           MOV     R2,A
   \   000119   A3           INC     DPTR
   \   00011A   E0           MOVX    A,@DPTR
   \   00011B   FB           MOV     R3,A
   \   00011C   7402         MOV     A,#0x2
   \   00011E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000121   7F04         MOV     R7,#0x4
   \   000123   02....       LJMP    ?BANKED_LEAVE_XDATA
   1048          }
   1049          
   1050          /*********************************************************************
   1051           * @fn          BindWriteNV
   1052           *
   1053           * @brief       Save the Binding Table in NV
   1054           *
   1055           * @param       none
   1056           *
   1057           * @return      none
   1058           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1059          void BindWriteNV( void )
   \                     BindWriteNV:
   1060          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV     A,#-0x10
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1061            BindingEntry_t *pBind;
   1062            BindingEntry_t bind;
   1063            nvBindingHdr_t hdr;
   1064            bindTableIndex_t x;
   1065          
   1066            hdr.numRecs = 0;
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   7400         MOV     A,#0x0
   \   000012   F0           MOVX    @DPTR,A
   \   000013   A3           INC     DPTR
   \   000014   7400         MOV     A,#0x0
   \   000016   F0           MOVX    @DPTR,A
   1067          
   1068            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   000017   7E00         MOV     R6,#0x0
   \   000019   02....       LJMP    ??BindWriteNV_0 & 0xFFFF
   1069            {
   1070              pBind = &BindingTable[x];
   \                     ??BindWriteNV_1:
   \   00001C   EE           MOV     A,R6
   \   00001D   F8           MOV     R0,A
   \   00001E   7900         MOV     R1,#0x0
   \   000020   E8           MOV     A,R0
   \   000021   75F00E       MOV     B,#0xe
   \   000024   A4           MUL     AB
   \   000025   C8           XCH     A,R0
   \   000026   AAF0         MOV     R2,B
   \   000028   75F000       MOV     B,#0x0
   \   00002B   A4           MUL     AB
   \   00002C   2A           ADD     A,R2
   \   00002D   FA           MOV     R2,A
   \   00002E   75F00E       MOV     B,#0xe
   \   000031   E9           MOV     A,R1
   \   000032   A4           MUL     AB
   \   000033   2A           ADD     A,R2
   \   000034   F9           MOV     R1,A
   \   000035   74..         MOV     A,#BindingTable & 0xff
   \   000037   28           ADD     A,R0
   \   000038   F5..         MOV     ?V0,A
   \   00003A   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   00003C   39           ADDC    A,R1
   \   00003D   F5..         MOV     ?V1,A
   1071          
   1072              osal_memcpy( &bind, pBind, gBIND_REC_SIZE );
   \   00003F                ; Setup parameters for call to function osal_memcpy
   \   00003F   85....       MOV     ?V4,?V0
   \   000042   85....       MOV     ?V5,?V1
   \   000045   75..00       MOV     ?V6,#0x0
   \   000048   78..         MOV     R0,#?V4
   \   00004A   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00004D   90....       MOV     DPTR,#gBIND_REC_SIZE
   \   000050   E4           CLR     A
   \   000051   93           MOVC    A,@A+DPTR
   \   000052   FC           MOV     R4,A
   \   000053   7401         MOV     A,#0x1
   \   000055   93           MOVC    A,@A+DPTR
   \   000056   FD           MOV     R5,A
   \   000057   7405         MOV     A,#0x5
   \   000059   12....       LCALL   ?XSTACK_DISP101_8
   \   00005C   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00005F   7403         MOV     A,#0x3
   \   000061   12....       LCALL   ?DEALLOC_XSTACK8
   1073          
   1074              // Save the record to NV
   1075              osal_nv_write( ZCD_NV_BINDING_TABLE,
   1076                             (uint16)((sizeof(nvBindingHdr_t)) + (x * NV_BIND_REC_SIZE)),
   1077                             NV_BIND_REC_SIZE, &bind );
   \   000064                ; Setup parameters for call to function osal_nv_write
   \   000064   7402         MOV     A,#0x2
   \   000066   12....       LCALL   ?XSTACK_DISP100_8
   \   000069   88..         MOV     ?V2,R0
   \   00006B   89..         MOV     ?V3,R1
   \   00006D   78..         MOV     R0,#?V2
   \   00006F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000072   90....       MOV     DPTR,#gBIND_REC_SIZE
   \   000075   12....       LCALL   ?PUSH_XSTACK8_C_TWO
   \   000078   EE           MOV     A,R6
   \   000079   F8           MOV     R0,A
   \   00007A   7900         MOV     R1,#0x0
   \   00007C   90....       MOV     DPTR,#gBIND_REC_SIZE
   \   00007F   E4           CLR     A
   \   000080   93           MOVC    A,@A+DPTR
   \   000081   F5..         MOV     ?V2,A
   \   000083   7401         MOV     A,#0x1
   \   000085   93           MOVC    A,@A+DPTR
   \   000086   F5..         MOV     ?V3,A
   \   000088   E8           MOV     A,R0
   \   000089   85..F0       MOV     B,?V2
   \   00008C   A4           MUL     AB
   \   00008D   C8           XCH     A,R0
   \   00008E   AAF0         MOV     R2,B
   \   000090   85..F0       MOV     B,?V3
   \   000093   A4           MUL     AB
   \   000094   2A           ADD     A,R2
   \   000095   FA           MOV     R2,A
   \   000096   85..F0       MOV     B,?V2
   \   000099   E9           MOV     A,R1
   \   00009A   A4           MUL     AB
   \   00009B   2A           ADD     A,R2
   \   00009C   F9           MOV     R1,A
   \   00009D   E8           MOV     A,R0
   \   00009E   2402         ADD     A,#0x2
   \   0000A0   FC           MOV     R4,A
   \   0000A1   E4           CLR     A
   \   0000A2   39           ADDC    A,R1
   \   0000A3   FD           MOV     R5,A
   \   0000A4   7A41         MOV     R2,#0x41
   \   0000A6   7B00         MOV     R3,#0x0
   \   0000A8   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000AB   7404         MOV     A,#0x4
   \   0000AD   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B0   E9           MOV     A,R1
   1078          
   1079              if ( pBind->srcEP != NV_BIND_EMPTY )
   \   0000B1   85..82       MOV     DPL,?V0
   \   0000B4   85..83       MOV     DPH,?V1
   \   0000B7   E0           MOVX    A,@DPTR
   \   0000B8   64FF         XRL     A,#0xff
   \   0000BA   600F         JZ      ??BindWriteNV_2
   1080              {
   1081                hdr.numRecs++;
   \   0000BC   85..82       MOV     DPL,?XSP + 0
   \   0000BF   85..83       MOV     DPH,?XSP + 1
   \   0000C2   E0           MOVX    A,@DPTR
   \   0000C3   2401         ADD     A,#0x1
   \   0000C5   F0           MOVX    @DPTR,A
   \   0000C6   A3           INC     DPTR
   \   0000C7   E0           MOVX    A,@DPTR
   \   0000C8   3400         ADDC    A,#0x0
   \   0000CA   F0           MOVX    @DPTR,A
   1082              }
   1083            }
   \                     ??BindWriteNV_2:
   \   0000CB   0E           INC     R6
   \                     ??BindWriteNV_0:
   \   0000CC   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   0000CF   E4           CLR     A
   \   0000D0   93           MOVC    A,@A+DPTR
   \   0000D1   F8           MOV     R0,A
   \   0000D2   EE           MOV     A,R6
   \   0000D3   C3           CLR     C
   \   0000D4   98           SUBB    A,R0
   \   0000D5   5003         JNC     $+5
   \   0000D7   02....       LJMP    ??BindWriteNV_1 & 0xFFFF
   1084          
   1085            // Save off the header
   1086            osal_nv_write( ZCD_NV_BINDING_TABLE, 0, sizeof(nvBindingHdr_t), &hdr );
   \   0000DA                ; Setup parameters for call to function osal_nv_write
   \   0000DA   A8..         MOV     R0,?XSP + 0
   \   0000DC   A9..         MOV     R1,?XSP + 1
   \   0000DE   88..         MOV     ?V0,R0
   \   0000E0   89..         MOV     ?V1,R1
   \   0000E2   78..         MOV     R0,#?V0
   \   0000E4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E7   75..02       MOV     ?V0,#0x2
   \   0000EA   75..00       MOV     ?V1,#0x0
   \   0000ED   78..         MOV     R0,#?V0
   \   0000EF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F2   7C00         MOV     R4,#0x0
   \   0000F4   7D00         MOV     R5,#0x0
   \   0000F6   7A41         MOV     R2,#0x41
   \   0000F8   7B00         MOV     R3,#0x0
   \   0000FA   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000FD   7404         MOV     A,#0x4
   \   0000FF   12....       LCALL   ?DEALLOC_XSTACK8
   \   000102   E9           MOV     A,R1
   1087          }
   \   000103   7410         MOV     A,#0x10
   \   000105   12....       LCALL   ?DEALLOC_XSTACK8
   \   000108   7F07         MOV     R7,#0x7
   \   00010A   02....       LJMP    ?BANKED_LEAVE_XDATA
   1088          
   1089          /*********************************************************************
   1090           * @fn          bindUpdateAddr
   1091           *
   1092           * @brief       Update the network address in the binding table.
   1093           *
   1094           * @param       oldAddr - old network address
   1095           * @param       newAddr - new network address
   1096           *
   1097           * @return      none
   1098           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1099          void bindUpdateAddr( uint16 oldAddr, uint16 newAddr )
   \                     bindUpdateAddr:
   1100          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EC           MOV     A,R4
   \   00000B   FE           MOV     R6,A
   \   00000C   ED           MOV     A,R5
   \   00000D   FF           MOV     R7,A
   1101            uint16 oldIdx;
   1102            uint16 newIdx;
   1103            zAddrType_t addr;
   1104            bindTableIndex_t x;
   1105            BindingEntry_t *pBind;
   1106          
   1107            addr.addrMode = Addr16Bit;
   \   00000E   7408         MOV     A,#0x8
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   7402         MOV     A,#0x2
   \   000015   F0           MOVX    @DPTR,A
   1108            addr.addr.shortAddr = oldAddr;
   \   000016   85..82       MOV     DPL,?XSP + 0
   \   000019   85..83       MOV     DPH,?XSP + 1
   \   00001C   EA           MOV     A,R2
   \   00001D   F0           MOVX    @DPTR,A
   \   00001E   A3           INC     DPTR
   \   00001F   EB           MOV     A,R3
   \   000020   F0           MOVX    @DPTR,A
   1109            oldIdx = bindingAddrMgsHelperFind( &addr );
   \   000021                ; Setup parameters for call to function bindingAddrMgsHelperFind
   \   000021   AA..         MOV     R2,?XSP + 0
   \   000023   AB..         MOV     R3,?XSP + 1
   \   000025   12....       LCALL   `??bindingAddrMgsHelperFind::?relay`; Banked call to: bindingAddrMgsHelperFind
   \   000028   8A..         MOV     ?V2,R2
   \   00002A   8B..         MOV     ?V3,R3
   \   00002C   85....       MOV     ?V0,?V2
   \   00002F   85....       MOV     ?V1,?V3
   1110            addr.addr.shortAddr = newAddr;
   \   000032   85..82       MOV     DPL,?XSP + 0
   \   000035   85..83       MOV     DPH,?XSP + 1
   \   000038   EE           MOV     A,R6
   \   000039   F0           MOVX    @DPTR,A
   \   00003A   A3           INC     DPTR
   \   00003B   EF           MOV     A,R7
   \   00003C   F0           MOVX    @DPTR,A
   1111            newIdx = bindingAddrMgsHelperFind( &addr );
   \   00003D                ; Setup parameters for call to function bindingAddrMgsHelperFind
   \   00003D   AA..         MOV     R2,?XSP + 0
   \   00003F   AB..         MOV     R3,?XSP + 1
   \   000041   12....       LCALL   `??bindingAddrMgsHelperFind::?relay`; Banked call to: bindingAddrMgsHelperFind
   \   000044   8A..         MOV     ?V2,R2
   \   000046   8B..         MOV     ?V3,R3
   \   000048   AC..         MOV     R4,?V2
   \   00004A   AD..         MOV     R5,?V3
   1112          
   1113            for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
   \   00004C   7A00         MOV     R2,#0x0
   \   00004E   803E         SJMP    ??bindUpdateAddr_0
   1114            {
   1115              pBind = &BindingTable[x];
   \                     ??bindUpdateAddr_1:
   \   000050   EA           MOV     A,R2
   \   000051   F8           MOV     R0,A
   \   000052   7900         MOV     R1,#0x0
   \   000054   E8           MOV     A,R0
   \   000055   75F00E       MOV     B,#0xe
   \   000058   A4           MUL     AB
   \   000059   C8           XCH     A,R0
   \   00005A   ABF0         MOV     R3,B
   \   00005C   75F000       MOV     B,#0x0
   \   00005F   A4           MUL     AB
   \   000060   2B           ADD     A,R3
   \   000061   FB           MOV     R3,A
   \   000062   75F00E       MOV     B,#0xe
   \   000065   E9           MOV     A,R1
   \   000066   A4           MUL     AB
   \   000067   2B           ADD     A,R3
   \   000068   F9           MOV     R1,A
   \   000069   74..         MOV     A,#BindingTable & 0xff
   \   00006B   28           ADD     A,R0
   \   00006C   F8           MOV     R0,A
   \   00006D   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   00006F   39           ADDC    A,R1
   \   000070   F9           MOV     R1,A
   1116          
   1117              if ( pBind->dstIdx == oldIdx )
   \   000071   8882         MOV     DPL,R0
   \   000073   8983         MOV     DPH,R1
   \   000075   A3           INC     DPTR
   \   000076   A3           INC     DPTR
   \   000077   E0           MOVX    A,@DPTR
   \   000078   65..         XRL     A,?V0
   \   00007A   7004         JNZ     ??bindUpdateAddr_2
   \   00007C   A3           INC     DPTR
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   65..         XRL     A,?V1
   \                     ??bindUpdateAddr_2:
   \   000080   700B         JNZ     ??bindUpdateAddr_3
   1118              {
   1119                pBind->dstIdx = newIdx;
   \   000082   8882         MOV     DPL,R0
   \   000084   8983         MOV     DPH,R1
   \   000086   A3           INC     DPTR
   \   000087   A3           INC     DPTR
   \   000088   EC           MOV     A,R4
   \   000089   F0           MOVX    @DPTR,A
   \   00008A   A3           INC     DPTR
   \   00008B   ED           MOV     A,R5
   \   00008C   F0           MOVX    @DPTR,A
   1120              }
   1121            }
   \                     ??bindUpdateAddr_3:
   \   00008D   0A           INC     R2
   \                     ??bindUpdateAddr_0:
   \   00008E   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000091   E4           CLR     A
   \   000092   93           MOVC    A,@A+DPTR
   \   000093   F8           MOV     R0,A
   \   000094   EA           MOV     A,R2
   \   000095   C3           CLR     C
   \   000096   98           SUBB    A,R0
   \   000097   40B7         JC      ??bindUpdateAddr_1
   1122          }
   \   000099   7409         MOV     A,#0x9
   \   00009B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00009E   7F04         MOV     R7,#0x4
   \   0000A0   02....       LJMP    ?BANKED_LEAVE_XDATA
   1123          
   1124          /*********************************************************************
   1125           * @fn      bindingAddrMgsHelperFind
   1126           *
   1127           * @brief   Turns an zAddrType_t to an Addr Manager index
   1128           *
   1129           * @param   addr - zAddrType_t
   1130           *
   1131           * @return  INVALID_NODE_ADDR if not found, otherwise an index
   1132           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1133          uint16 bindingAddrMgsHelperFind( zAddrType_t *addr )
   \                     bindingAddrMgsHelperFind:
   1134          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 13
   \   000004   74F3         MOV     A,#-0xd
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   1135            AddrMgrEntry_t entry;
   1136          
   1137            // Resolve addresses with the address manager
   1138            entry.user = ADDRMGR_USER_BINDING;
   \   000009   85..82       MOV     DPL,?XSP + 0
   \   00000C   85..83       MOV     DPH,?XSP + 1
   \   00000F   7404         MOV     A,#0x4
   \   000011   F0           MOVX    @DPTR,A
   1139            if ( addr->addrMode == Addr16Bit )
   \   000012   8A82         MOV     DPL,R2
   \   000014   8B83         MOV     DPH,R3
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   6402         XRL     A,#0x2
   \   000021   701D         JNZ     ??bindingAddrMgsHelperFind_0
   1140            {
   1141              entry.nwkAddr = addr->addr.shortAddr;
   \   000023   8A82         MOV     DPL,R2
   \   000025   8B83         MOV     DPH,R3
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F8           MOV     R0,A
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F9           MOV     R1,A
   \   00002C   7401         MOV     A,#0x1
   \   00002E   12....       LCALL   ?XSTACK_DISP0_8
   \   000031   E8           MOV     A,R0
   \   000032   F0           MOVX    @DPTR,A
   \   000033   A3           INC     DPTR
   \   000034   E9           MOV     A,R1
   \   000035   F0           MOVX    @DPTR,A
   1142              AddrMgrEntryLookupNwk( &entry );
   \   000036                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   000036   AA..         MOV     R2,?XSP + 0
   \   000038   AB..         MOV     R3,?XSP + 1
   \   00003A   12....       LCALL   `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
   \   00003D   E9           MOV     A,R1
   \   00003E   8018         SJMP    ??bindingAddrMgsHelperFind_1
   1143            }
   1144            else
   1145            {
   1146              AddrMgrExtAddrSet( entry.extAddr, addr->addr.extAddr );
   \                     ??bindingAddrMgsHelperFind_0:
   \   000040                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000040   EA           MOV     A,R2
   \   000041   FC           MOV     R4,A
   \   000042   EB           MOV     A,R3
   \   000043   FD           MOV     R5,A
   \   000044   7403         MOV     A,#0x3
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   AA82         MOV     R2,DPL
   \   00004B   AB83         MOV     R3,DPH
   \   00004D   12....       LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   1147              AddrMgrEntryLookupExt( &entry );
   \   000050                ; Setup parameters for call to function AddrMgrEntryLookupExt
   \   000050   AA..         MOV     R2,?XSP + 0
   \   000052   AB..         MOV     R3,?XSP + 1
   \   000054   12....       LCALL   `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
   \   000057   E9           MOV     A,R1
   1148            }
   1149          
   1150            return ( entry.index );
   \                     ??bindingAddrMgsHelperFind_1:
   \   000058   740B         MOV     A,#0xb
   \   00005A   12....       LCALL   ?XSTACK_DISP0_8
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   FA           MOV     R2,A
   \   00005F   A3           INC     DPTR
   \   000060   E0           MOVX    A,@DPTR
   \   000061   FB           MOV     R3,A
   \   000062   740D         MOV     A,#0xd
   \   000064   12....       LCALL   ?DEALLOC_XSTACK8
   \   000067   D083         POP     DPH
   \   000069   D082         POP     DPL
   \   00006B   02....       LJMP    ?BRET
   1151          }
   1152          
   1153          /*********************************************************************
   1154           * @fn      bindingAddrMgsHelperConvert
   1155           *
   1156           * @brief   Convert an index into an zAddrType_t
   1157           *
   1158           * @param   idx -
   1159           * @param   addr - zAddrType_t
   1160           *
   1161           * @return  TRUE if found, FALSE if not
   1162           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1163          uint8 bindingAddrMgsHelperConvert( uint16 idx, zAddrType_t *addr )
   \                     bindingAddrMgsHelperConvert:
   1164          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EC           MOV     A,R4
   \   00000B   FE           MOV     R6,A
   \   00000C   ED           MOV     A,R5
   \   00000D   FF           MOV     R7,A
   1165            AddrMgrEntry_t entry;
   1166            uint8 stat;
   1167          
   1168            // Resolve addresses with the address manager
   1169            entry.user = ADDRMGR_USER_BINDING;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   7404         MOV     A,#0x4
   \   000016   F0           MOVX    @DPTR,A
   1170            entry.index = idx;
   \   000017   740B         MOV     A,#0xb
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   EA           MOV     A,R2
   \   00001D   F0           MOVX    @DPTR,A
   \   00001E   A3           INC     DPTR
   \   00001F   EB           MOV     A,R3
   \   000020   F0           MOVX    @DPTR,A
   1171            stat = AddrMgrEntryGet( &entry );
   \   000021                ; Setup parameters for call to function AddrMgrEntryGet
   \   000021   AA..         MOV     R2,?XSP + 0
   \   000023   AB..         MOV     R3,?XSP + 1
   \   000025   12....       LCALL   `??AddrMgrEntryGet::?relay`; Banked call to: AddrMgrEntryGet
   \   000028   E9           MOV     A,R1
   \   000029   F5..         MOV     ?V0,A
   1172            if ( stat )
   \   00002B   E5..         MOV     A,?V0
   \   00002D   601F         JZ      ??bindingAddrMgsHelperConvert_0
   1173            {
   1174              addr->addrMode = Addr64Bit;
   \   00002F   8E82         MOV     DPL,R6
   \   000031   8F83         MOV     DPH,R7
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   7403         MOV     A,#0x3
   \   00003D   F0           MOVX    @DPTR,A
   1175              osal_cpyExtAddr( addr->addr.extAddr, entry.extAddr );
   \   00003E                ; Setup parameters for call to function sAddrExtCpy
   \   00003E   7403         MOV     A,#0x3
   \   000040   12....       LCALL   ?XSTACK_DISP0_8
   \   000043   AC82         MOV     R4,DPL
   \   000045   AD83         MOV     R5,DPH
   \   000047   EE           MOV     A,R6
   \   000048   FA           MOV     R2,A
   \   000049   EF           MOV     A,R7
   \   00004A   FB           MOV     R3,A
   \   00004B   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1176            }
   1177          
   1178            return ( stat );
   \                     ??bindingAddrMgsHelperConvert_0:
   \   00004E   A9..         MOV     R1,?V0
   \   000050   740D         MOV     A,#0xd
   \   000052   12....       LCALL   ?DEALLOC_XSTACK8
   \   000055   7F01         MOV     R7,#0x1
   \   000057   02....       LJMP    ?BANKED_LEAVE_XDATA
   1179          }
   1180          
   1181          /*********************************************************************
   1182           * @fn      bindingAddrMgsHelperConvertShort
   1183           *
   1184           * @brief   Convert an index into a short address
   1185           *
   1186           * @param   idx -
   1187           *
   1188           * @return  INVALID_NODE_ADDR if not available, otherwise the short address
   1189           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1190          uint16 bindingAddrMgsHelperConvertShort( uint16 idx )
   \                     bindingAddrMgsHelperConvertShort:
   1191          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 13
   \   000004   74F3         MOV     A,#-0xd
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   1192            AddrMgrEntry_t entry;
   1193          
   1194            // Resolve addresses with the address manager
   1195            entry.user = ADDRMGR_USER_BINDING;
   \   000009   85..82       MOV     DPL,?XSP + 0
   \   00000C   85..83       MOV     DPH,?XSP + 1
   \   00000F   7404         MOV     A,#0x4
   \   000011   F0           MOVX    @DPTR,A
   1196            entry.index = idx;
   \   000012   740B         MOV     A,#0xb
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   EA           MOV     A,R2
   \   000018   F0           MOVX    @DPTR,A
   \   000019   A3           INC     DPTR
   \   00001A   EB           MOV     A,R3
   \   00001B   F0           MOVX    @DPTR,A
   1197            AddrMgrEntryGet( &entry );
   \   00001C                ; Setup parameters for call to function AddrMgrEntryGet
   \   00001C   AA..         MOV     R2,?XSP + 0
   \   00001E   AB..         MOV     R3,?XSP + 1
   \   000020   12....       LCALL   `??AddrMgrEntryGet::?relay`; Banked call to: AddrMgrEntryGet
   \   000023   E9           MOV     A,R1
   1198          
   1199            return ( entry.nwkAddr );
   \   000024   7401         MOV     A,#0x1
   \   000026   12....       LCALL   ?XSTACK_DISP0_8
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   FA           MOV     R2,A
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   FB           MOV     R3,A
   \   00002E   740D         MOV     A,#0xd
   \   000030   12....       LCALL   ?DEALLOC_XSTACK8
   \   000033   D083         POP     DPH
   \   000035   D082         POP     DPL
   \   000037   02....       LJMP    ?BRET
   1200          }
   1201          
   1202          /*********************************************************************
   1203           * @fn      bindAddrMgrLocalLoad
   1204           *
   1205           * @brief   Load local(self and parent) address information into
   1206           *          Address Manager
   1207           *
   1208           * @param   none
   1209           *
   1210           * @return  none
   1211           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1212          void bindAddrMgrLocalLoad( void )
   \                     bindAddrMgrLocalLoad:
   1213          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1214            AddrMgrEntry_t entry;
   1215            uint16         parent;
   1216          
   1217            // add "local"(self and parent) address informtion into the Address
   1218            // Manager
   1219            if ( bindAddrMgrLocalLoaded == FALSE )
   \   00000A   90....       MOV     DPTR,#bindAddrMgrLocalLoaded
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6003         JZ      $+5
   \   000010   02....       LJMP    ??bindAddrMgrLocalLoad_0 & 0xFFFF
   1220            {
   1221              // add the device's address information
   1222              entry.user    = ADDRMGR_USER_BINDING;
   \   000013   85..82       MOV     DPL,?XSP + 0
   \   000016   85..83       MOV     DPH,?XSP + 1
   \   000019   7404         MOV     A,#0x4
   \   00001B   F0           MOVX    @DPTR,A
   1223              entry.nwkAddr = _NIB.nwkDevAddress;
   \   00001C   90....       MOV     DPTR,#_NIB + 20
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F8           MOV     R0,A
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F9           MOV     R1,A
   \   000024   7401         MOV     A,#0x1
   \   000026   12....       LCALL   ?XSTACK_DISP0_8
   \   000029   E8           MOV     A,R0
   \   00002A   F0           MOVX    @DPTR,A
   \   00002B   A3           INC     DPTR
   \   00002C   E9           MOV     A,R1
   \   00002D   F0           MOVX    @DPTR,A
   1224              AddrMgrExtAddrSet( entry.extAddr, NLME_GetExtAddr() );
   \   00002E                ; Setup parameters for call to function NLME_GetExtAddr
   \   00002E   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   000031   8A..         MOV     ?V0,R2
   \   000033   8B..         MOV     ?V1,R3
   \   000035   AC..         MOV     R4,?V0
   \   000037   AD..         MOV     R5,?V1
   \   000039                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000039   7403         MOV     A,#0x3
   \   00003B   12....       LCALL   ?XSTACK_DISP0_8
   \   00003E   AA82         MOV     R2,DPL
   \   000040   AB83         MOV     R3,DPH
   \   000042   12....       LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   1225              AddrMgrEntryUpdate( &entry );
   \   000045                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000045   AA..         MOV     R2,?XSP + 0
   \   000047   AB..         MOV     R3,?XSP + 1
   \   000049   12....       LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   \   00004C   E9           MOV     A,R1
   1226          
   1227              // make sure parent address is valid
   1228              parent = NLME_GetCoordShortAddr();
   \   00004D                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   00004D   12....       LCALL   `??NLME_GetCoordShortAddr::?relay`; Banked call to: NLME_GetCoordShortAddr
   \   000050   8A..         MOV     ?V0,R2
   \   000052   8B..         MOV     ?V1,R3
   \   000054   A8..         MOV     R0,?V0
   \   000056   A9..         MOV     R1,?V1
   1229              if ( ( parent != entry.nwkAddr     ) &&
   1230                   ( parent != INVALID_NODE_ADDR )    )
   \   000058   7401         MOV     A,#0x1
   \   00005A   12....       LCALL   ?XSTACK_DISP0_8
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   68           XRL     A,R0
   \   00005F   7003         JNZ     ??bindAddrMgrLocalLoad_1
   \   000061   A3           INC     DPTR
   \   000062   E0           MOVX    A,@DPTR
   \   000063   69           XRL     A,R1
   \                     ??bindAddrMgrLocalLoad_1:
   \   000064   6028         JZ      ??bindAddrMgrLocalLoad_2
   \   000066   74FE         MOV     A,#-0x2
   \   000068   68           XRL     A,R0
   \   000069   7003         JNZ     ??bindAddrMgrLocalLoad_3
   \   00006B   74FF         MOV     A,#-0x1
   \   00006D   69           XRL     A,R1
   \                     ??bindAddrMgrLocalLoad_3:
   \   00006E   601E         JZ      ??bindAddrMgrLocalLoad_2
   1231              {
   1232                // add the parent's address information
   1233                entry.nwkAddr = parent;
   \   000070   7401         MOV     A,#0x1
   \   000072   12....       LCALL   ?XSTACK_DISP0_8
   \   000075   E8           MOV     A,R0
   \   000076   F0           MOVX    @DPTR,A
   \   000077   A3           INC     DPTR
   \   000078   E9           MOV     A,R1
   \   000079   F0           MOVX    @DPTR,A
   1234                NLME_GetCoordExtAddr( entry.extAddr );
   \   00007A                ; Setup parameters for call to function NLME_GetCoordExtAddr
   \   00007A   7403         MOV     A,#0x3
   \   00007C   12....       LCALL   ?XSTACK_DISP0_8
   \   00007F   AA82         MOV     R2,DPL
   \   000081   AB83         MOV     R3,DPH
   \   000083   12....       LCALL   `??NLME_GetCoordExtAddr::?relay`; Banked call to: NLME_GetCoordExtAddr
   1235                AddrMgrEntryUpdate( &entry );
   \   000086                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000086   AA..         MOV     R2,?XSP + 0
   \   000088   AB..         MOV     R3,?XSP + 1
   \   00008A   12....       LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   \   00008D   E9           MOV     A,R1
   1236              }
   1237          
   1238              bindAddrMgrLocalLoaded = TRUE;
   \                     ??bindAddrMgrLocalLoad_2:
   \   00008E   90....       MOV     DPTR,#bindAddrMgrLocalLoaded
   \   000091   7401         MOV     A,#0x1
   \   000093   F0           MOVX    @DPTR,A
   1239            }
   1240          }
   \                     ??bindAddrMgrLocalLoad_0:
   \   000094   740D         MOV     A,#0xd
   \   000096   12....       LCALL   ?DEALLOC_XSTACK8
   \   000099   7F02         MOV     R7,#0x2
   \   00009B   02....       LJMP    ?BANKED_LEAVE_XDATA
   1241          
   1242          /*********************************************************************
   1243           * @fn      bindAddrIndexGet
   1244           *
   1245           * @brief   Get bind address index.
   1246           *
   1247           * @param   addr - <zAddrType_t>
   1248           *
   1249           * @return  (uint16) address index
   1250           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1251          uint16 bindAddrIndexGet( zAddrType_t* addr )
   \                     bindAddrIndexGet:
   1252          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1253            AddrMgrEntry_t entry;
   1254            uint8          update;
   1255          
   1256            update = FALSE;
   \   00000A   7E00         MOV     R6,#0x0
   1257          
   1258            // sync binding addresses with the address manager
   1259            entry.user = ADDRMGR_USER_BINDING;
   \   00000C   85..82       MOV     DPL,?XSP + 0
   \   00000F   85..83       MOV     DPH,?XSP + 1
   \   000012   7404         MOV     A,#0x4
   \   000014   F0           MOVX    @DPTR,A
   1260          
   1261            if ( addr->addrMode == Addr16Bit )
   \   000015   8A82         MOV     DPL,R2
   \   000017   8B83         MOV     DPH,R3
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   6402         XRL     A,#0x2
   \   000024   7021         JNZ     ??bindAddrIndexGet_0
   1262            {
   1263              entry.nwkAddr = addr->addr.shortAddr;
   \   000026   8A82         MOV     DPL,R2
   \   000028   8B83         MOV     DPH,R3
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F8           MOV     R0,A
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F9           MOV     R1,A
   \   00002F   7401         MOV     A,#0x1
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   E8           MOV     A,R0
   \   000035   F0           MOVX    @DPTR,A
   \   000036   A3           INC     DPTR
   \   000037   E9           MOV     A,R1
   \   000038   F0           MOVX    @DPTR,A
   1264          
   1265              if ( AddrMgrEntryLookupNwk( &entry ) == FALSE )
   \   000039                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   000039   AA..         MOV     R2,?XSP + 0
   \   00003B   AB..         MOV     R3,?XSP + 1
   \   00003D   12....       LCALL   `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
   \   000040   E9           MOV     A,R1
   \   000041   7065         JNZ     ??bindAddrIndexGet_1
   1266              {
   1267                update = TRUE;
   \   000043   7E01         MOV     R6,#0x1
   \   000045   8061         SJMP    ??bindAddrIndexGet_1
   1268              }
   1269            }
   1270            else if ( addr->addrMode == Addr64Bit )
   \                     ??bindAddrIndexGet_0:
   \   000047   8A82         MOV     DPL,R2
   \   000049   8B83         MOV     DPH,R3
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   A3           INC     DPTR
   \   000052   A3           INC     DPTR
   \   000053   E0           MOVX    A,@DPTR
   \   000054   6403         XRL     A,#0x3
   \   000056   701E         JNZ     ??bindAddrIndexGet_2
   1271            {
   1272              AddrMgrExtAddrSet( entry.extAddr, addr->addr.extAddr );
   \   000058                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000058   EA           MOV     A,R2
   \   000059   FC           MOV     R4,A
   \   00005A   EB           MOV     A,R3
   \   00005B   FD           MOV     R5,A
   \   00005C   7403         MOV     A,#0x3
   \   00005E   12....       LCALL   ?XSTACK_DISP0_8
   \   000061   AA82         MOV     R2,DPL
   \   000063   AB83         MOV     R3,DPH
   \   000065   12....       LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   1273          
   1274              if ( AddrMgrEntryLookupExt( &entry ) == FALSE )
   \   000068                ; Setup parameters for call to function AddrMgrEntryLookupExt
   \   000068   AA..         MOV     R2,?XSP + 0
   \   00006A   AB..         MOV     R3,?XSP + 1
   \   00006C   12....       LCALL   `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
   \   00006F   E9           MOV     A,R1
   \   000070   7036         JNZ     ??bindAddrIndexGet_1
   1275              {
   1276                update = TRUE;
   \   000072   7E01         MOV     R6,#0x1
   \   000074   8032         SJMP    ??bindAddrIndexGet_1
   1277              }
   1278            }
   1279            else if ( addr->addrMode == AddrGroup )
   \                     ??bindAddrIndexGet_2:
   \   000076   8A82         MOV     DPL,R2
   \   000078   8B83         MOV     DPH,R3
   \   00007A   A3           INC     DPTR
   \   00007B   A3           INC     DPTR
   \   00007C   A3           INC     DPTR
   \   00007D   A3           INC     DPTR
   \   00007E   A3           INC     DPTR
   \   00007F   A3           INC     DPTR
   \   000080   A3           INC     DPTR
   \   000081   A3           INC     DPTR
   \   000082   E0           MOVX    A,@DPTR
   \   000083   6401         XRL     A,#0x1
   \   000085   7015         JNZ     ??bindAddrIndexGet_3
   1280            {
   1281              entry.index = addr->addr.shortAddr;
   \   000087   8A82         MOV     DPL,R2
   \   000089   8B83         MOV     DPH,R3
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   F8           MOV     R0,A
   \   00008D   A3           INC     DPTR
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   F9           MOV     R1,A
   \   000090   740B         MOV     A,#0xb
   \   000092   12....       LCALL   ?XSTACK_DISP0_8
   \   000095   E8           MOV     A,R0
   \   000096   F0           MOVX    @DPTR,A
   \   000097   A3           INC     DPTR
   \   000098   E9           MOV     A,R1
   \   000099   F0           MOVX    @DPTR,A
   \   00009A   800C         SJMP    ??bindAddrIndexGet_1
   1282            }
   1283            else
   1284            {
   1285              entry.index = INVALID_NODE_ADDR;
   \                     ??bindAddrIndexGet_3:
   \   00009C   740B         MOV     A,#0xb
   \   00009E   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A1   74FE         MOV     A,#-0x2
   \   0000A3   F0           MOVX    @DPTR,A
   \   0000A4   A3           INC     DPTR
   \   0000A5   74FF         MOV     A,#-0x1
   \   0000A7   F0           MOVX    @DPTR,A
   1286            }
   1287          
   1288            if ( update )
   \                     ??bindAddrIndexGet_1:
   \   0000A8   EE           MOV     A,R6
   \   0000A9   6008         JZ      ??bindAddrIndexGet_4
   1289            {
   1290              AddrMgrEntryUpdate( &entry );
   \   0000AB                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   0000AB   AA..         MOV     R2,?XSP + 0
   \   0000AD   AB..         MOV     R3,?XSP + 1
   \   0000AF   12....       LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   \   0000B2   E9           MOV     A,R1
   1291            }
   1292          
   1293            return entry.index;
   \                     ??bindAddrIndexGet_4:
   \   0000B3   740B         MOV     A,#0xb
   \   0000B5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B8   E0           MOVX    A,@DPTR
   \   0000B9   FA           MOV     R2,A
   \   0000BA   A3           INC     DPTR
   \   0000BB   E0           MOVX    A,@DPTR
   \   0000BC   FB           MOV     R3,A
   \   0000BD   740D         MOV     A,#0xd
   \   0000BF   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C2   7F01         MOV     R7,#0x1
   \   0000C4   02....       LJMP    ?BANKED_LEAVE_XDATA
   1294          }
   1295          
   1296          /*********************************************************************
   1297           * @fn      GetBindingTableEntry
   1298           *
   1299           * @brief   Get a pointer to the Nth valid binding table entry.
   1300           *
   1301           * @param   Nth valid entry being requested.
   1302           *
   1303           * @return  The Nth valid binding table entry.
   1304           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1305          BindingEntry_t *GetBindingTableEntry( uint16 Nth )
   \                     GetBindingTableEntry:
   1306          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   1307            BindingEntry_t *rtrn = NULL;
   \   000005   7C00         MOV     R4,#0x0
   \   000007   7D00         MOV     R5,#0x0
   1308          
   1309          #if defined ( REFLECTOR )
   1310            bindTableIndex_t idx, cnt = 0;
   \   000009   7F00         MOV     R7,#0x0
   1311          
   1312            for ( idx = 0; idx < gNWK_MAX_BINDING_ENTRIES; idx++ )
   \   00000B   7E00         MOV     R6,#0x0
   \   00000D   8001         SJMP    ??GetBindingTableEntry_0
   \                     ??GetBindingTableEntry_1:
   \   00000F   0E           INC     R6
   \                     ??GetBindingTableEntry_0:
   \   000010   90....       MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
   \   000013   E4           CLR     A
   \   000014   93           MOVC    A,@A+DPTR
   \   000015   F8           MOV     R0,A
   \   000016   EE           MOV     A,R6
   \   000017   C3           CLR     C
   \   000018   98           SUBB    A,R0
   \   000019   5060         JNC     ??GetBindingTableEntry_2
   1313            {
   1314              if ( BindingTable[idx].srcEP != NV_BIND_EMPTY )
   \   00001B   EE           MOV     A,R6
   \   00001C   F8           MOV     R0,A
   \   00001D   7900         MOV     R1,#0x0
   \   00001F   E8           MOV     A,R0
   \   000020   75F00E       MOV     B,#0xe
   \   000023   A4           MUL     AB
   \   000024   C8           XCH     A,R0
   \   000025   85F0..       MOV     ?V0,B
   \   000028   75F000       MOV     B,#0x0
   \   00002B   A4           MUL     AB
   \   00002C   25..         ADD     A,?V0
   \   00002E   F5..         MOV     ?V0,A
   \   000030   75F00E       MOV     B,#0xe
   \   000033   E9           MOV     A,R1
   \   000034   A4           MUL     AB
   \   000035   25..         ADD     A,?V0
   \   000037   F9           MOV     R1,A
   \   000038   74..         MOV     A,#BindingTable & 0xff
   \   00003A   28           ADD     A,R0
   \   00003B   F582         MOV     DPL,A
   \   00003D   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   00003F   39           ADDC    A,R1
   \   000040   F583         MOV     DPH,A
   \   000042   E0           MOVX    A,@DPTR
   \   000043   64FF         XRL     A,#0xff
   \   000045   60C8         JZ      ??GetBindingTableEntry_1
   1315              {
   1316                if ( cnt++ == Nth )
   \   000047   8F..         MOV     ?V0,R7
   \   000049   7401         MOV     A,#0x1
   \   00004B   25..         ADD     A,?V0
   \   00004D   FF           MOV     R7,A
   \   00004E   A8..         MOV     R0,?V0
   \   000050   7900         MOV     R1,#0x0
   \   000052   EA           MOV     A,R2
   \   000053   68           XRL     A,R0
   \   000054   7002         JNZ     ??GetBindingTableEntry_3
   \   000056   EB           MOV     A,R3
   \   000057   69           XRL     A,R1
   \                     ??GetBindingTableEntry_3:
   \   000058   70B5         JNZ     ??GetBindingTableEntry_1
   1317                {
   1318                  rtrn = BindingTable+idx;
   \   00005A   EE           MOV     A,R6
   \   00005B   F8           MOV     R0,A
   \   00005C   7900         MOV     R1,#0x0
   \   00005E   E8           MOV     A,R0
   \   00005F   75F00E       MOV     B,#0xe
   \   000062   A4           MUL     AB
   \   000063   C8           XCH     A,R0
   \   000064   AAF0         MOV     R2,B
   \   000066   75F000       MOV     B,#0x0
   \   000069   A4           MUL     AB
   \   00006A   2A           ADD     A,R2
   \   00006B   FA           MOV     R2,A
   \   00006C   75F00E       MOV     B,#0xe
   \   00006F   E9           MOV     A,R1
   \   000070   A4           MUL     AB
   \   000071   2A           ADD     A,R2
   \   000072   F9           MOV     R1,A
   \   000073   74..         MOV     A,#BindingTable & 0xff
   \   000075   28           ADD     A,R0
   \   000076   FC           MOV     R4,A
   \   000077   74..         MOV     A,#(BindingTable >> 8) & 0xff
   \   000079   39           ADDC    A,R1
   \   00007A   FD           MOV     R5,A
   1319                  break;
   1320                }
   1321              }
   1322            }
   1323          #else
   1324            (void)Nth;
   1325          #endif
   1326          
   1327            return rtrn;
   \                     ??GetBindingTableEntry_2:
   \   00007B   EC           MOV     A,R4
   \   00007C   FA           MOV     R2,A
   \   00007D   ED           MOV     A,R5
   \   00007E   FB           MOV     R3,A
   \   00007F   7F01         MOV     R7,#0x1
   \   000081   02....       LJMP    ?BANKED_LEAVE_XDATA
   1328          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??InitBindingTable::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    InitBindingTable

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindFindEmpty::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindFindEmpty

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindNumOfEntries::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindNumOfEntries

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindCapacity::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindCapacity

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindAddEntry::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindAddEntry

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindRemoveEntry::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindRemoveEntry

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindIsClusterIDinList::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindIsClusterIDinList

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindRemoveClusterIdFromList::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindRemoveClusterIdFromList

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindAddClusterIdToList::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindAddClusterIdToList

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindFindExisting::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindFindExisting

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindRemoveDev::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindRemoveDev

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindRemoveSrcDev::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindRemoveSrcDev

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindNumBoundTo::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindNumBoundTo

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindNumReflections::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindNumReflections

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindFind::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindFind

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindAddressClear::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindAddressClear

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??BindInitNV::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BindInitNV

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??BindSetDefaultNV::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BindSetDefaultNV

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??BindCopyBackupToNewNV::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BindCopyBackupToNewNV

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??BindUpgradeTableInNV::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BindUpgradeTableInNV

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??BindRestoreFromNV::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BindRestoreFromNV

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??BindWriteNV::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BindWriteNV

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindUpdateAddr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindUpdateAddr

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindingAddrMgsHelperFind::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindingAddrMgsHelperFind

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindingAddrMgsHelperConvert::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindingAddrMgsHelperConvert

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindingAddrMgsHelperConvertShort::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindingAddrMgsHelperConvertShort

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindAddrMgrLocalLoad::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindAddrMgrLocalLoad

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??bindAddrIndexGet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    bindAddrIndexGet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??GetBindingTableEntry::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GetBindingTableEntry
   1329          
   1330          /*********************************************************************
   1331          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2     52   BindCopyBackupToNewNV
        0     32   -> osal_nv_delete
        0     34   -> osal_nv_item_init
        0     32   -> osal_nv_item_len
        0     36   -> osal_nv_read
        0     36   -> osal_nv_write
      0     12   BindInitNV
        0     10   -> BindSetDefaultNV
        0     12   -> osal_nv_item_init
      0     18   BindRestoreFromNV
        0     14   -> BindUpgradeTableInNV
        0     18   -> osal_nv_read
      0     26   BindSetDefaultNV
        0     16   -> osal_nv_write
      0     34   BindUpgradeTableInNV
        0     16   -> BindCopyBackupToNewNV
        0     16   -> nwkCreateDuplicateNV
        0     16   -> osal_nv_delete
        0     16   -> osal_nv_item_len
        0     20   -> osal_nv_read
      0     35   BindWriteNV
        0     34   -> osal_memcpy
        0     35   -> osal_nv_write
      0      9   GetBindingTableEntry
      0     10   InitBindingTable
        0     10   -> osal_memset
      0     35   bindAddClusterIdToList
      1     31   bindAddEntry
        0     26   -> bindAddClusterIdToList
        0     26   -> bindAddrIndexGet
        0     26   -> bindAddrMgrLocalLoad
        0     26   -> bindFindEmpty
        0     26   -> bindIsClusterIDinList
        0     29   -> osal_memcpy
      0     48   bindAddrIndexGet
        0     22   -> AddrMgrEntryLookupExt
        0     22   -> AddrMgrEntryLookupNwk
        0     22   -> AddrMgrEntryUpdate
        0     22   -> AddrMgrExtAddrSet
      0     49   bindAddrMgrLocalLoad
        0     23   -> AddrMgrEntryUpdate
        0     23   -> AddrMgrExtAddrSet
        0     23   -> NLME_GetCoordExtAddr
        0     23   -> NLME_GetCoordShortAddr
        0     23   -> NLME_GetExtAddr
      2     25   bindAddressClear
        2     13   -> AddrMgrEntryRelease
      0      9   bindCapacity
      0     14   bindFind
        0     14   -> bindIsClusterIDinList
      2     26   bindFindEmpty
      0     12   bindFindExisting
        0     12   -> bindingAddrMgsHelperFind
      0     35   bindIsClusterIDinList
      0     14   bindNumBoundTo
        0     14   -> bindingAddrMgsHelperFind
      2      0   bindNumOfEntries
      0     12   bindNumReflections
        0     12   -> bindIsClusterIDinList
      0     11   bindRemoveClusterIdFromList
      0     12   bindRemoveDev
        0     12   -> bindAddressClear
        0     12   -> bindRemoveEntry
        0     12   -> bindingAddrMgsHelperFind
      2     12   bindRemoveEntry
        2      0   -> osal_memset
      0     10   bindRemoveSrcDev
        0     10   -> bindAddressClear
        0     10   -> bindRemoveEntry
      0     21   bindUpdateAddr
        0     21   -> bindingAddrMgsHelperFind
      0     22   bindingAddrMgsHelperConvert
        0     22   -> AddrMgrEntryGet
        0     22   -> sAddrExtCpy
      2     13   bindingAddrMgsHelperConvertShort
        2     13   -> AddrMgrEntryGet
      2     34   bindingAddrMgsHelperFind
        2     13   -> AddrMgrEntryLookupExt
        2     13   -> AddrMgrEntryLookupNwk
        2     13   -> AddrMgrExtAddrSet


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
     511  BindCopyBackupToNewNV
       6  BindCopyBackupToNewNV::?relay
      90  BindInitNV
       6  BindInitNV::?relay
     294  BindRestoreFromNV
       6  BindRestoreFromNV::?relay
      74  BindSetDefaultNV
       6  BindSetDefaultNV::?relay
     286  BindUpgradeTableInNV
       6  BindUpgradeTableInNV::?relay
     269  BindWriteNV
       6  BindWriteNV::?relay
     132  GetBindingTableEntry
       6  GetBindingTableEntry::?relay
     136  InitBindingTable
       6  InitBindingTable::?relay
     106  bindAddClusterIdToList
       6  bindAddClusterIdToList::?relay
     712  bindAddEntry
       6  bindAddEntry::?relay
     199  bindAddrIndexGet
       6  bindAddrIndexGet::?relay
     158  bindAddrMgrLocalLoad
       6  bindAddrMgrLocalLoad::?relay
       1  bindAddrMgrLocalLoaded
     210  bindAddressClear
       6  bindAddressClear::?relay
     101  bindCapacity
       6  bindCapacity::?relay
     115  bindFind
       6  bindFind::?relay
     106  bindFindEmpty
       6  bindFindEmpty::?relay
     431  bindFindExisting
       6  bindFindExisting::?relay
      89  bindIsClusterIDinList
       6  bindIsClusterIDinList::?relay
     232  bindNumBoundTo
       6  bindNumBoundTo::?relay
     116  bindNumOfEntries
       6  bindNumOfEntries::?relay
     104  bindNumReflections
       6  bindNumReflections::?relay
     239  bindRemoveClusterIdFromList
       6  bindRemoveClusterIdFromList::?relay
     347  bindRemoveDev
       6  bindRemoveDev::?relay
      28  bindRemoveEntry
       6  bindRemoveEntry::?relay
     165  bindRemoveSrcDev
       6  bindRemoveSrcDev::?relay
     163  bindUpdateAddr
       6  bindUpdateAddr::?relay
      90  bindingAddrMgsHelperConvert
       6  bindingAddrMgsHelperConvert::?relay
      58  bindingAddrMgsHelperConvertShort
       6  bindingAddrMgsHelperConvertShort::?relay
     110  bindingAddrMgsHelperFind
       6  bindingAddrMgsHelperFind::?relay
       2  pBindInitNV
       2  pBindRestoreFromNV
       2  pBindSetDefaultNV
       2  pBindWriteNV
       2  pbindAddEntry
       2  pbindNumOfEntries
       2  pbindRemoveDev

 
 5 671 bytes in segment BANKED_CODE
   174 bytes in segment BANK_RELAYS
    15 bytes in segment XDATA_Z
 
 5 845 bytes of CODE  memory
    15 bytes of XDATA memory

Errors: none
Warnings: none

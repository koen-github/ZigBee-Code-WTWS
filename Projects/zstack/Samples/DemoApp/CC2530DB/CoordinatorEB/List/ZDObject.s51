///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V9.20.1.2476 for 8051               22/Feb/2017  14:31:45
// Copyright 2004-2015 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Users\koen\ZigBee-Code-WTWS\Components\stack\zdo\ZDObject.c
//    Command line       =  
//        -f
//        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DZDO_COORDINATOR -DRTR_NWK) -f
//        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
//        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00002000 -DZDAPP_CONFIG_PAN_ID=0xABCD
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={'H', 'O', 'G', 'E', 'S',
//        'C', 'H', 'O', 'O', 'L', 'U', 'T', 'R', 'E', 'C', 'H'}"
//        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
//        -DREJOIN_POLL_RATE=440
//        C:\Users\koen\ZigBee-Code-WTWS\Components\stack\zdo\ZDObject.c -D
//        HOLD_AUTO_START -D BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D
//        NV_RESTORE -D HAL_UART=TRUE -lC
//        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\
//        -lA
//        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\
//        --diag_suppress Pe001,Pa010,Pe1665 -o
//        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\Obj\
//        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
//        --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -I
//        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\
//        -I
//        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\Source\
//        -I
//        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\ZMain\TI2530DB\
//        -I
//        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\hal\include\
//        -I
//        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
//        -I
//        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\include\
//        -I
//        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
//        -I
//        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
//        -I
//        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
//        -I
//        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mt\
//        -I
//        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\osal\include\
//        -I
//        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
//        -I
//        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
//        -I
//        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\af\
//        -I
//        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
//        -I
//        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
//        -I
//        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
//        -I
//        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
//        -I
//        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
//        -I
//        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\zmac\
//        -I
//        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
//        -Ol --require_prototypes
//    List file          =  
//        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\ZDObject.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME ZDObject

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?V8
        EXTERN ?V9
        EXTERN ?V10
        EXTERN ?V11
        EXTERN ?V12
        EXTERN ?V13
        EXTERN ?V14
        EXTERN ?V15
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_MOV_TO_X
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?S_SHL
        EXTERN ?XLOAD_R2345
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP100_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN ?XSTACK_DISP102_8
        EXTERN ?XSTORE_R0123
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC `??NLME_PermitJoiningTimeout::?relay`
        FUNCTION `??NLME_PermitJoiningTimeout::?relay`,0203H
        PUBLIC `??ZDMatchSendState::?relay`
        FUNCTION `??ZDMatchSendState::?relay`,0203H
        FUNCTION `??ZDODeviceSetup::?relay`,0203H
        PUBLIC `??ZDO_AnyClusterMatches::?relay`
        FUNCTION `??ZDO_AnyClusterMatches::?relay`,0203H
        PUBLIC `??ZDO_BuildSimpleDescBuf::?relay`
        FUNCTION `??ZDO_BuildSimpleDescBuf::?relay`,0203H
        FUNCTION `??ZDO_CompareClusterLists::?relay`,0203H
        PUBLIC `??ZDO_ConvertOTAClusters::?relay`
        FUNCTION `??ZDO_ConvertOTAClusters::?relay`,0203H
        FUNCTION `??ZDO_CopyMatchInfo::?relay`,0203H
        FUNCTION `??ZDO_EndDeviceBindMatchTimeoutCB::?relay`,0203H
        PUBLIC `??ZDO_EndDeviceTimeoutCB::?relay`
        FUNCTION `??ZDO_EndDeviceTimeoutCB::?relay`,0203H
        PUBLIC `??ZDO_Init::?relay`
        FUNCTION `??ZDO_Init::?relay`,0203H
        PUBLIC `??ZDO_MatchEndDeviceBind::?relay`
        FUNCTION `??ZDO_MatchEndDeviceBind::?relay`,0203H
        PUBLIC `??ZDO_ParseAddrRsp::?relay`
        FUNCTION `??ZDO_ParseAddrRsp::?relay`,0203H
        PUBLIC `??ZDO_ParseBindUnbindReq::?relay`
        FUNCTION `??ZDO_ParseBindUnbindReq::?relay`,0203H
        PUBLIC `??ZDO_ParseDeviceAnnce::?relay`
        FUNCTION `??ZDO_ParseDeviceAnnce::?relay`,0203H
        PUBLIC `??ZDO_ParseEPListRsp::?relay`
        FUNCTION `??ZDO_ParseEPListRsp::?relay`,0203H
        PUBLIC `??ZDO_ParseEndDeviceBindReq::?relay`
        FUNCTION `??ZDO_ParseEndDeviceBindReq::?relay`,0203H
        PUBLIC `??ZDO_ParseEndDeviceTimeoutRsp::?relay`
        FUNCTION `??ZDO_ParseEndDeviceTimeoutRsp::?relay`,0203H
        PUBLIC `??ZDO_ParseMgmNwkDiscRsp::?relay`
        FUNCTION `??ZDO_ParseMgmNwkDiscRsp::?relay`,0203H
        PUBLIC `??ZDO_ParseMgmtBindRsp::?relay`
        FUNCTION `??ZDO_ParseMgmtBindRsp::?relay`,0203H
        PUBLIC `??ZDO_ParseMgmtLqiRsp::?relay`
        FUNCTION `??ZDO_ParseMgmtLqiRsp::?relay`,0203H
        PUBLIC `??ZDO_ParseMgmtNwkUpdateNotify::?relay`
        FUNCTION `??ZDO_ParseMgmtNwkUpdateNotify::?relay`,0203H
        PUBLIC `??ZDO_ParseMgmtNwkUpdateReq::?relay`
        FUNCTION `??ZDO_ParseMgmtNwkUpdateReq::?relay`,0203H
        PUBLIC `??ZDO_ParseMgmtRtgRsp::?relay`
        FUNCTION `??ZDO_ParseMgmtRtgRsp::?relay`,0203H
        PUBLIC `??ZDO_ParseNodeDescRsp::?relay`
        FUNCTION `??ZDO_ParseNodeDescRsp::?relay`,0203H
        PUBLIC `??ZDO_ParsePowerDescRsp::?relay`
        FUNCTION `??ZDO_ParsePowerDescRsp::?relay`,0203H
        PUBLIC `??ZDO_ParseServerDiscRsp::?relay`
        FUNCTION `??ZDO_ParseServerDiscRsp::?relay`,0203H
        PUBLIC `??ZDO_ParseSimpleDescBuf::?relay`
        FUNCTION `??ZDO_ParseSimpleDescBuf::?relay`,0203H
        PUBLIC `??ZDO_ParseSimpleDescRsp::?relay`
        FUNCTION `??ZDO_ParseSimpleDescRsp::?relay`,0203H
        PUBLIC `??ZDO_ParseUserDescRsp::?relay`
        FUNCTION `??ZDO_ParseUserDescRsp::?relay`,0203H
        PUBLIC `??ZDO_ProcessActiveEPReq::?relay`
        FUNCTION `??ZDO_ProcessActiveEPReq::?relay`,0203H
        PUBLIC `??ZDO_ProcessBindUnbindReq::?relay`
        FUNCTION `??ZDO_ProcessBindUnbindReq::?relay`,0203H
        PUBLIC `??ZDO_ProcessDeviceAnnce::?relay`
        FUNCTION `??ZDO_ProcessDeviceAnnce::?relay`,0203H
        PUBLIC `??ZDO_ProcessEndDeviceTimeoutReq::?relay`
        FUNCTION `??ZDO_ProcessEndDeviceTimeoutReq::?relay`,0203H
        PUBLIC `??ZDO_ProcessMatchDescReq::?relay`
        FUNCTION `??ZDO_ProcessMatchDescReq::?relay`,0203H
        PUBLIC `??ZDO_ProcessMgmtBindReq::?relay`
        FUNCTION `??ZDO_ProcessMgmtBindReq::?relay`,0203H
        PUBLIC `??ZDO_ProcessMgmtDirectJoinReq::?relay`
        FUNCTION `??ZDO_ProcessMgmtDirectJoinReq::?relay`,0203H
        PUBLIC `??ZDO_ProcessMgmtLeaveReq::?relay`
        FUNCTION `??ZDO_ProcessMgmtLeaveReq::?relay`,0203H
        PUBLIC `??ZDO_ProcessMgmtLqiReq::?relay`
        FUNCTION `??ZDO_ProcessMgmtLqiReq::?relay`,0203H
        PUBLIC `??ZDO_ProcessMgmtNwkDiscReq::?relay`
        FUNCTION `??ZDO_ProcessMgmtNwkDiscReq::?relay`,0203H
        PUBLIC `??ZDO_ProcessMgmtPermitJoinReq::?relay`
        FUNCTION `??ZDO_ProcessMgmtPermitJoinReq::?relay`,0203H
        PUBLIC `??ZDO_ProcessMgmtRtgReq::?relay`
        FUNCTION `??ZDO_ProcessMgmtRtgReq::?relay`,0203H
        PUBLIC `??ZDO_ProcessNodeDescReq::?relay`
        FUNCTION `??ZDO_ProcessNodeDescReq::?relay`,0203H
        PUBLIC `??ZDO_ProcessPowerDescReq::?relay`
        FUNCTION `??ZDO_ProcessPowerDescReq::?relay`,0203H
        PUBLIC `??ZDO_ProcessServerDiscReq::?relay`
        FUNCTION `??ZDO_ProcessServerDiscReq::?relay`,0203H
        PUBLIC `??ZDO_ProcessSimpleDescReq::?relay`
        FUNCTION `??ZDO_ProcessSimpleDescReq::?relay`,0203H
        PUBLIC `??ZDO_ProcessUserDescReq::?relay`
        FUNCTION `??ZDO_ProcessUserDescReq::?relay`,0203H
        PUBLIC `??ZDO_ProcessUserDescSet::?relay`
        FUNCTION `??ZDO_ProcessUserDescSet::?relay`,0203H
        FUNCTION `??ZDO_RemoveEndDeviceBind::?relay`,0203H
        FUNCTION `??ZDO_RemoveMatchMemory::?relay`,0203H
        FUNCTION `??ZDO_SendEDBindRsp::?relay`,0203H
        PUBLIC `??ZDO_StartDevice::?relay`
        FUNCTION `??ZDO_StartDevice::?relay`,0203H
        PUBLIC `??ZDO_UpdateAddrManager::?relay`
        FUNCTION `??ZDO_UpdateAddrManager::?relay`,0203H
        PUBLIC `??ZDO_UpdateNwkStatus::?relay`
        FUNCTION `??ZDO_UpdateNwkStatus::?relay`,0203H
        FUNCTION `??zdoSendStateChangeMsg::?relay`,0203H
        PUBLIC NLME_PermitJoiningTimeout
        FUNCTION NLME_PermitJoiningTimeout,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC ZDMatchSendState
        FUNCTION ZDMatchSendState,0a1203H
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 45, STACK
        FUNCTION ZDODeviceSetup,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDO_AnyClusterMatches
        FUNCTION ZDO_AnyClusterMatches,080203H
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 13, STACK
        PUBLIC ZDO_BuildSimpleDescBuf
        FUNCTION ZDO_BuildSimpleDescBuf,080203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        FUNCTION ZDO_CompareClusterLists,080203H
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDO_ConvertOTAClusters
        FUNCTION ZDO_ConvertOTAClusters,080203H
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 11, STACK
        FUNCTION ZDO_CopyMatchInfo,0a1203H
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 18, STACK
        FUNCTION ZDO_EndDeviceBindMatchTimeoutCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDO_EndDeviceTimeoutCB
        FUNCTION ZDO_EndDeviceTimeoutCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDO_Init
        FUNCTION ZDO_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDO_MatchEndDeviceBind
        FUNCTION ZDO_MatchEndDeviceBind,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 30, STACK
        PUBLIC ZDO_ParseAddrRsp
        FUNCTION ZDO_ParseAddrRsp,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDO_ParseBindUnbindReq
        FUNCTION ZDO_ParseBindUnbindReq,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ZDO_ParseDeviceAnnce
        FUNCTION ZDO_ParseDeviceAnnce,0a1203H
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ZDO_ParseEPListRsp
        FUNCTION ZDO_ParseEPListRsp,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC ZDO_ParseEndDeviceBindReq
        FUNCTION ZDO_ParseEndDeviceBindReq,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZDO_ParseEndDeviceTimeoutRsp
        FUNCTION ZDO_ParseEndDeviceTimeoutRsp,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDO_ParseMgmNwkDiscRsp
        FUNCTION ZDO_ParseMgmNwkDiscRsp,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDO_ParseMgmtBindRsp
        FUNCTION ZDO_ParseMgmtBindRsp,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC ZDO_ParseMgmtLqiRsp
        FUNCTION ZDO_ParseMgmtLqiRsp,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDO_ParseMgmtNwkUpdateNotify
        FUNCTION ZDO_ParseMgmtNwkUpdateNotify,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 25, STACK
        PUBLIC ZDO_ParseMgmtNwkUpdateReq
        FUNCTION ZDO_ParseMgmtNwkUpdateReq,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ZDO_ParseMgmtRtgRsp
        FUNCTION ZDO_ParseMgmtRtgRsp,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDO_ParseNodeDescRsp
        FUNCTION ZDO_ParseNodeDescRsp,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDO_ParsePowerDescRsp
        FUNCTION ZDO_ParsePowerDescRsp,080203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ZDO_ParseServerDiscRsp
        FUNCTION ZDO_ParseServerDiscRsp,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDO_ParseSimpleDescBuf
        FUNCTION ZDO_ParseSimpleDescBuf,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC ZDO_ParseSimpleDescRsp
        FUNCTION ZDO_ParseSimpleDescRsp,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDO_ParseUserDescRsp
        FUNCTION ZDO_ParseUserDescRsp,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC ZDO_ProcessActiveEPReq
        FUNCTION ZDO_ProcessActiveEPReq,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        PUBLIC ZDO_ProcessBindUnbindReq
        FUNCTION ZDO_ProcessBindUnbindReq,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 32, STACK
        PUBLIC ZDO_ProcessDeviceAnnce
        FUNCTION ZDO_ProcessDeviceAnnce,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        PUBLIC ZDO_ProcessEndDeviceTimeoutReq
        FUNCTION ZDO_ProcessEndDeviceTimeoutReq,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC ZDO_ProcessMatchDescReq
        FUNCTION ZDO_ProcessMatchDescReq,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 38, STACK
        PUBLIC ZDO_ProcessMgmtBindReq
        FUNCTION ZDO_ProcessMgmtBindReq,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        PUBLIC ZDO_ProcessMgmtDirectJoinReq
        FUNCTION ZDO_ProcessMgmtDirectJoinReq,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDO_ProcessMgmtLeaveReq
        FUNCTION ZDO_ProcessMgmtLeaveReq,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 23, STACK
        PUBLIC ZDO_ProcessMgmtLqiReq
        FUNCTION ZDO_ProcessMgmtLqiReq,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 64, STACK
        PUBLIC ZDO_ProcessMgmtNwkDiscReq
        FUNCTION ZDO_ProcessMgmtNwkDiscReq,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 17, STACK
        PUBLIC ZDO_ProcessMgmtPermitJoinReq
        FUNCTION ZDO_ProcessMgmtPermitJoinReq,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC ZDO_ProcessMgmtRtgReq
        FUNCTION ZDO_ProcessMgmtRtgReq,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC ZDO_ProcessNodeDescReq
        FUNCTION ZDO_ProcessNodeDescReq,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDO_ProcessPowerDescReq
        FUNCTION ZDO_ProcessPowerDescReq,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDO_ProcessServerDiscReq
        FUNCTION ZDO_ProcessServerDiscReq,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC ZDO_ProcessSimpleDescReq
        FUNCTION ZDO_ProcessSimpleDescReq,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZDO_ProcessUserDescReq
        FUNCTION ZDO_ProcessUserDescReq,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        PUBLIC ZDO_ProcessUserDescSet
        FUNCTION ZDO_ProcessUserDescSet,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 40, STACK
        FUNCTION ZDO_RemoveEndDeviceBind,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION ZDO_RemoveMatchMemory,021203H
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION ZDO_SendEDBindRsp,0a1203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 17, STACK
        PUBLIC ZDO_StartDevice
        FUNCTION ZDO_StartDevice,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        PUBLIC ZDO_UpdateAddrManager
        FUNCTION ZDO_UpdateAddrManager,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC ZDO_UpdateNwkStatus
        FUNCTION ZDO_UpdateNwkStatus,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBWEAK __Constant_3e8
        PUBLIC apsChannelMask
        PUBLIC matchED
        FUNCTION zdoSendStateChangeMsg,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC zdpExternalStateTaskID
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
APSME_BindRequest   SYMBOL "APSME_BindRequest"
`??APSME_BindRequest::?relay` SYMBOL "?relay", APSME_BindRequest
APSME_GetRequest    SYMBOL "APSME_GetRequest"
`??APSME_GetRequest::?relay` SYMBOL "?relay", APSME_GetRequest
APSME_LookupNwkAddr SYMBOL "APSME_LookupNwkAddr"
`??APSME_LookupNwkAddr::?relay` SYMBOL "?relay", APSME_LookupNwkAddr
APSME_UnBindRequest SYMBOL "APSME_UnBindRequest"
`??APSME_UnBindRequest::?relay` SYMBOL "?relay", APSME_UnBindRequest
APS_ReflectorInit   SYMBOL "APS_ReflectorInit"
`??APS_ReflectorInit::?relay` SYMBOL "?relay", APS_ReflectorInit
APS_SetEndDeviceBindTimeout SYMBOL "APS_SetEndDeviceBindTimeout"
`??APS_SetEndDeviceBindTimeout::?relay` SYMBOL "?relay", APS_SetEndDeviceBindTimeout
AddrMgrEntryLookupExt SYMBOL "AddrMgrEntryLookupExt"
`??AddrMgrEntryLookupExt::?relay` SYMBOL "?relay", AddrMgrEntryLookupExt
AddrMgrEntryLookupNwk SYMBOL "AddrMgrEntryLookupNwk"
`??AddrMgrEntryLookupNwk::?relay` SYMBOL "?relay", AddrMgrEntryLookupNwk
AddrMgrEntryUpdate  SYMBOL "AddrMgrEntryUpdate"
`??AddrMgrEntryUpdate::?relay` SYMBOL "?relay", AddrMgrEntryUpdate
AddrMgrExtAddrSet   SYMBOL "AddrMgrExtAddrSet"
`??AddrMgrExtAddrSet::?relay` SYMBOL "?relay", AddrMgrExtAddrSet
AddrMgrExtAddrValid SYMBOL "AddrMgrExtAddrValid"
`??AddrMgrExtAddrValid::?relay` SYMBOL "?relay", AddrMgrExtAddrValid
AssocChangeNwkAddr  SYMBOL "AssocChangeNwkAddr"
`??AssocChangeNwkAddr::?relay` SYMBOL "?relay", AssocChangeNwkAddr
AssocCount          SYMBOL "AssocCount"
`??AssocCount::?relay` SYMBOL "?relay", AssocCount
AssocFindDevice     SYMBOL "AssocFindDevice"
`??AssocFindDevice::?relay` SYMBOL "?relay", AssocFindDevice
AssocGetWithExt     SYMBOL "AssocGetWithExt"
`??AssocGetWithExt::?relay` SYMBOL "?relay", AssocGetWithExt
AssocRemove         SYMBOL "AssocRemove"
`??AssocRemove::?relay` SYMBOL "?relay", AssocRemove
NLME_CheckNewAddrSet SYMBOL "NLME_CheckNewAddrSet"
`??NLME_CheckNewAddrSet::?relay` SYMBOL "?relay", NLME_CheckNewAddrSet
NLME_CoordinatorInit SYMBOL "NLME_CoordinatorInit"
`??NLME_CoordinatorInit::?relay` SYMBOL "?relay", NLME_CoordinatorInit
NLME_DeviceJoiningInit SYMBOL "NLME_DeviceJoiningInit"
`??NLME_DeviceJoiningInit::?relay` SYMBOL "?relay", NLME_DeviceJoiningInit
NLME_DirectJoinRequest SYMBOL "NLME_DirectJoinRequest"
`??NLME_DirectJoinRequest::?relay` SYMBOL "?relay", NLME_DirectJoinRequest
NLME_GetCoordExtAddr SYMBOL "NLME_GetCoordExtAddr"
`??NLME_GetCoordExtAddr::?relay` SYMBOL "?relay", NLME_GetCoordExtAddr
NLME_GetCoordShortAddr SYMBOL "NLME_GetCoordShortAddr"
`??NLME_GetCoordShortAddr::?relay` SYMBOL "?relay", NLME_GetCoordShortAddr
NLME_GetExtAddr     SYMBOL "NLME_GetExtAddr"
`??NLME_GetExtAddr::?relay` SYMBOL "?relay", NLME_GetExtAddr
NLME_GetRequest     SYMBOL "NLME_GetRequest"
`??NLME_GetRequest::?relay` SYMBOL "?relay", NLME_GetRequest
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
`??NLME_GetShortAddr::?relay` SYMBOL "?relay", NLME_GetShortAddr
NLME_IsAddressBroadcast SYMBOL "NLME_IsAddressBroadcast"
`??NLME_IsAddressBroadcast::?relay` SYMBOL "?relay", NLME_IsAddressBroadcast
NLME_LeaveReq       SYMBOL "NLME_LeaveReq"
`??NLME_LeaveReq::?relay` SYMBOL "?relay", NLME_LeaveReq
NLME_NetworkDiscoveryRequest SYMBOL "NLME_NetworkDiscoveryRequest"
`??NLME_NetworkDiscoveryRequest::?relay` SYMBOL "?relay", NLME_NetworkDiscoveryRequest
NLME_NetworkFormationRequest SYMBOL "NLME_NetworkFormationRequest"
`??NLME_NetworkFormationRequest::?relay` SYMBOL "?relay", NLME_NetworkFormationRequest
NLME_NwkDiscReq2    SYMBOL "NLME_NwkDiscReq2"
`??NLME_NwkDiscReq2::?relay` SYMBOL "?relay", NLME_NwkDiscReq2
NLME_NwkDiscTerm    SYMBOL "NLME_NwkDiscTerm"
`??NLME_NwkDiscTerm::?relay` SYMBOL "?relay", NLME_NwkDiscTerm
NLME_OrphanJoinRequest SYMBOL "NLME_OrphanJoinRequest"
`??NLME_OrphanJoinRequest::?relay` SYMBOL "?relay", NLME_OrphanJoinRequest
NLME_PermitJoiningRequest SYMBOL "NLME_PermitJoiningRequest"
`??NLME_PermitJoiningRequest::?relay` SYMBOL "?relay", NLME_PermitJoiningRequest
NLME_SetPollRate    SYMBOL "NLME_SetPollRate"
`??NLME_SetPollRate::?relay` SYMBOL "?relay", NLME_SetPollRate
NLME_StartRouterRequest SYMBOL "NLME_StartRouterRequest"
`??NLME_StartRouterRequest::?relay` SYMBOL "?relay", NLME_StartRouterRequest
RTG_RemoveRtgEntry  SYMBOL "RTG_RemoveRtgEntry"
`??RTG_RemoveRtgEntry::?relay` SYMBOL "?relay", RTG_RemoveRtgEntry
ZDApp_GetEmptyPendingBindReq SYMBOL "ZDApp_GetEmptyPendingBindReq"
`??ZDApp_GetEmptyPendingBindReq::?relay` SYMBOL "?relay", ZDApp_GetEmptyPendingBindReq
ZDApp_NVUpdate      SYMBOL "ZDApp_NVUpdate"
`??ZDApp_NVUpdate::?relay` SYMBOL "?relay", ZDApp_NVUpdate
ZDP_BindUnbindReq   SYMBOL "ZDP_BindUnbindReq"
`??ZDP_BindUnbindReq::?relay` SYMBOL "?relay", ZDP_BindUnbindReq
ZDP_EPRsp           SYMBOL "ZDP_EPRsp"
`??ZDP_EPRsp::?relay` SYMBOL "?relay", ZDP_EPRsp
ZDP_GenericRsp      SYMBOL "ZDP_GenericRsp"
`??ZDP_GenericRsp::?relay` SYMBOL "?relay", ZDP_GenericRsp
ZDP_MgmtBindRsp     SYMBOL "ZDP_MgmtBindRsp"
`??ZDP_MgmtBindRsp::?relay` SYMBOL "?relay", ZDP_MgmtBindRsp
ZDP_MgmtLqiRsp      SYMBOL "ZDP_MgmtLqiRsp"
`??ZDP_MgmtLqiRsp::?relay` SYMBOL "?relay", ZDP_MgmtLqiRsp
ZDP_MgmtRtgRsp      SYMBOL "ZDP_MgmtRtgRsp"
`??ZDP_MgmtRtgRsp::?relay` SYMBOL "?relay", ZDP_MgmtRtgRsp
ZDP_NodeDescMsg     SYMBOL "ZDP_NodeDescMsg"
`??ZDP_NodeDescMsg::?relay` SYMBOL "?relay", ZDP_NodeDescMsg
ZDP_NwkAddrReq      SYMBOL "ZDP_NwkAddrReq"
`??ZDP_NwkAddrReq::?relay` SYMBOL "?relay", ZDP_NwkAddrReq
ZDP_PowerDescMsg    SYMBOL "ZDP_PowerDescMsg"
`??ZDP_PowerDescMsg::?relay` SYMBOL "?relay", ZDP_PowerDescMsg
ZDP_SendData        SYMBOL "ZDP_SendData"
`??ZDP_SendData::?relay` SYMBOL "?relay", ZDP_SendData
ZDP_ServerDiscRsp   SYMBOL "ZDP_ServerDiscRsp"
`??ZDP_ServerDiscRsp::?relay` SYMBOL "?relay", ZDP_ServerDiscRsp
ZDP_SimpleDescMsg   SYMBOL "ZDP_SimpleDescMsg"
`??ZDP_SimpleDescMsg::?relay` SYMBOL "?relay", ZDP_SimpleDescMsg
ZDP_UserDescRsp     SYMBOL "ZDP_UserDescRsp"
`??ZDP_UserDescRsp::?relay` SYMBOL "?relay", ZDP_UserDescRsp
ZMacSetReq          SYMBOL "ZMacSetReq"
`??ZMacSetReq::?relay` SYMBOL "?relay", ZMacSetReq
afEndPoints         SYMBOL "afEndPoints"
`??afEndPoints::?relay` SYMBOL "?relay", afEndPoints
afFindSimpleDesc    SYMBOL "afFindSimpleDesc"
`??afFindSimpleDesc::?relay` SYMBOL "?relay", afFindSimpleDesc
afNumEndPoints      SYMBOL "afNumEndPoints"
`??afNumEndPoints::?relay` SYMBOL "?relay", afNumEndPoints
bindAddrIndexGet    SYMBOL "bindAddrIndexGet"
`??bindAddrIndexGet::?relay` SYMBOL "?relay", bindAddrIndexGet
nwkNeighborRemoveAllStranded SYMBOL "nwkNeighborRemoveAllStranded"
`??nwkNeighborRemoveAllStranded::?relay` SYMBOL "?relay", nwkNeighborRemoveAllStranded
nwkNeighborUpdateNwkAddr SYMBOL "nwkNeighborUpdateNwkAddr"
`??nwkNeighborUpdateNwkAddr::?relay` SYMBOL "?relay", nwkNeighborUpdateNwkAddr
nwk_ScanJoiningOrphan SYMBOL "nwk_ScanJoiningOrphan"
`??nwk_ScanJoiningOrphan::?relay` SYMBOL "?relay", nwk_ScanJoiningOrphan
osal_build_uint32   SYMBOL "osal_build_uint32"
`??osal_build_uint32::?relay` SYMBOL "?relay", osal_build_uint32
osal_mem_alloc      SYMBOL "osal_mem_alloc"
`??osal_mem_alloc::?relay` SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_memset         SYMBOL "osal_memset"
`??osal_memset::?relay` SYMBOL "?relay", osal_memset
osal_msg_allocate   SYMBOL "osal_msg_allocate"
`??osal_msg_allocate::?relay` SYMBOL "?relay", osal_msg_allocate
osal_msg_find       SYMBOL "osal_msg_find"
`??osal_msg_find::?relay` SYMBOL "?relay", osal_msg_find
osal_msg_send       SYMBOL "osal_msg_send"
`??osal_msg_send::?relay` SYMBOL "?relay", osal_msg_send
osal_nv_read        SYMBOL "osal_nv_read"
`??osal_nv_read::?relay` SYMBOL "?relay", osal_nv_read
osal_nv_write       SYMBOL "osal_nv_write"
`??osal_nv_write::?relay` SYMBOL "?relay", osal_nv_write
osal_set_event      SYMBOL "osal_set_event"
`??osal_set_event::?relay` SYMBOL "?relay", osal_set_event
osal_start_timerEx  SYMBOL "osal_start_timerEx"
`??osal_start_timerEx::?relay` SYMBOL "?relay", osal_start_timerEx
sAddrExtCmp         SYMBOL "sAddrExtCmp"
`??sAddrExtCmp::?relay` SYMBOL "?relay", sAddrExtCmp
sAddrExtCpy         SYMBOL "sAddrExtCpy"
`??sAddrExtCpy::?relay` SYMBOL "?relay", sAddrExtCpy
NLME_PermitJoiningTimeout SYMBOL "NLME_PermitJoiningTimeout"
`??NLME_PermitJoiningTimeout::?relay` SYMBOL "?relay", NLME_PermitJoiningTimeout
ZDMatchSendState    SYMBOL "ZDMatchSendState"
`??ZDMatchSendState::?relay` SYMBOL "?relay", ZDMatchSendState
ZDO_AnyClusterMatches SYMBOL "ZDO_AnyClusterMatches"
`??ZDO_AnyClusterMatches::?relay` SYMBOL "?relay", ZDO_AnyClusterMatches
ZDO_BuildSimpleDescBuf SYMBOL "ZDO_BuildSimpleDescBuf"
`??ZDO_BuildSimpleDescBuf::?relay` SYMBOL "?relay", ZDO_BuildSimpleDescBuf
ZDO_ConvertOTAClusters SYMBOL "ZDO_ConvertOTAClusters"
`??ZDO_ConvertOTAClusters::?relay` SYMBOL "?relay", ZDO_ConvertOTAClusters
ZDO_EndDeviceTimeoutCB SYMBOL "ZDO_EndDeviceTimeoutCB"
`??ZDO_EndDeviceTimeoutCB::?relay` SYMBOL "?relay", ZDO_EndDeviceTimeoutCB
ZDO_Init            SYMBOL "ZDO_Init"
`??ZDO_Init::?relay` SYMBOL "?relay", ZDO_Init
ZDO_MatchEndDeviceBind SYMBOL "ZDO_MatchEndDeviceBind"
`??ZDO_MatchEndDeviceBind::?relay` SYMBOL "?relay", ZDO_MatchEndDeviceBind
ZDO_ParseAddrRsp    SYMBOL "ZDO_ParseAddrRsp"
`??ZDO_ParseAddrRsp::?relay` SYMBOL "?relay", ZDO_ParseAddrRsp
ZDO_ParseBindUnbindReq SYMBOL "ZDO_ParseBindUnbindReq"
`??ZDO_ParseBindUnbindReq::?relay` SYMBOL "?relay", ZDO_ParseBindUnbindReq
ZDO_ParseDeviceAnnce SYMBOL "ZDO_ParseDeviceAnnce"
`??ZDO_ParseDeviceAnnce::?relay` SYMBOL "?relay", ZDO_ParseDeviceAnnce
ZDO_ParseEPListRsp  SYMBOL "ZDO_ParseEPListRsp"
`??ZDO_ParseEPListRsp::?relay` SYMBOL "?relay", ZDO_ParseEPListRsp
ZDO_ParseEndDeviceBindReq SYMBOL "ZDO_ParseEndDeviceBindReq"
`??ZDO_ParseEndDeviceBindReq::?relay` SYMBOL "?relay", ZDO_ParseEndDeviceBindReq
ZDO_ParseEndDeviceTimeoutRsp SYMBOL "ZDO_ParseEndDeviceTimeoutRsp"
`??ZDO_ParseEndDeviceTimeoutRsp::?relay` SYMBOL "?relay", ZDO_ParseEndDeviceTimeoutRsp
ZDO_ParseMgmNwkDiscRsp SYMBOL "ZDO_ParseMgmNwkDiscRsp"
`??ZDO_ParseMgmNwkDiscRsp::?relay` SYMBOL "?relay", ZDO_ParseMgmNwkDiscRsp
ZDO_ParseMgmtBindRsp SYMBOL "ZDO_ParseMgmtBindRsp"
`??ZDO_ParseMgmtBindRsp::?relay` SYMBOL "?relay", ZDO_ParseMgmtBindRsp
ZDO_ParseMgmtLqiRsp SYMBOL "ZDO_ParseMgmtLqiRsp"
`??ZDO_ParseMgmtLqiRsp::?relay` SYMBOL "?relay", ZDO_ParseMgmtLqiRsp
ZDO_ParseMgmtNwkUpdateNotify SYMBOL "ZDO_ParseMgmtNwkUpdateNotify"
`??ZDO_ParseMgmtNwkUpdateNotify::?relay` SYMBOL "?relay", ZDO_ParseMgmtNwkUpdateNotify
ZDO_ParseMgmtNwkUpdateReq SYMBOL "ZDO_ParseMgmtNwkUpdateReq"
`??ZDO_ParseMgmtNwkUpdateReq::?relay` SYMBOL "?relay", ZDO_ParseMgmtNwkUpdateReq
ZDO_ParseMgmtRtgRsp SYMBOL "ZDO_ParseMgmtRtgRsp"
`??ZDO_ParseMgmtRtgRsp::?relay` SYMBOL "?relay", ZDO_ParseMgmtRtgRsp
ZDO_ParseNodeDescRsp SYMBOL "ZDO_ParseNodeDescRsp"
`??ZDO_ParseNodeDescRsp::?relay` SYMBOL "?relay", ZDO_ParseNodeDescRsp
ZDO_ParsePowerDescRsp SYMBOL "ZDO_ParsePowerDescRsp"
`??ZDO_ParsePowerDescRsp::?relay` SYMBOL "?relay", ZDO_ParsePowerDescRsp
ZDO_ParseServerDiscRsp SYMBOL "ZDO_ParseServerDiscRsp"
`??ZDO_ParseServerDiscRsp::?relay` SYMBOL "?relay", ZDO_ParseServerDiscRsp
ZDO_ParseSimpleDescBuf SYMBOL "ZDO_ParseSimpleDescBuf"
`??ZDO_ParseSimpleDescBuf::?relay` SYMBOL "?relay", ZDO_ParseSimpleDescBuf
ZDO_ParseSimpleDescRsp SYMBOL "ZDO_ParseSimpleDescRsp"
`??ZDO_ParseSimpleDescRsp::?relay` SYMBOL "?relay", ZDO_ParseSimpleDescRsp
ZDO_ParseUserDescRsp SYMBOL "ZDO_ParseUserDescRsp"
`??ZDO_ParseUserDescRsp::?relay` SYMBOL "?relay", ZDO_ParseUserDescRsp
ZDO_ProcessActiveEPReq SYMBOL "ZDO_ProcessActiveEPReq"
`??ZDO_ProcessActiveEPReq::?relay` SYMBOL "?relay", ZDO_ProcessActiveEPReq
ZDO_ProcessBindUnbindReq SYMBOL "ZDO_ProcessBindUnbindReq"
`??ZDO_ProcessBindUnbindReq::?relay` SYMBOL "?relay", ZDO_ProcessBindUnbindReq
ZDO_ProcessDeviceAnnce SYMBOL "ZDO_ProcessDeviceAnnce"
`??ZDO_ProcessDeviceAnnce::?relay` SYMBOL "?relay", ZDO_ProcessDeviceAnnce
ZDO_ProcessEndDeviceTimeoutReq SYMBOL "ZDO_ProcessEndDeviceTimeoutReq"
`??ZDO_ProcessEndDeviceTimeoutReq::?relay` SYMBOL "?relay", ZDO_ProcessEndDeviceTimeoutReq
ZDO_ProcessMatchDescReq SYMBOL "ZDO_ProcessMatchDescReq"
`??ZDO_ProcessMatchDescReq::?relay` SYMBOL "?relay", ZDO_ProcessMatchDescReq
ZDO_ProcessMgmtBindReq SYMBOL "ZDO_ProcessMgmtBindReq"
`??ZDO_ProcessMgmtBindReq::?relay` SYMBOL "?relay", ZDO_ProcessMgmtBindReq
ZDO_ProcessMgmtDirectJoinReq SYMBOL "ZDO_ProcessMgmtDirectJoinReq"
`??ZDO_ProcessMgmtDirectJoinReq::?relay` SYMBOL "?relay", ZDO_ProcessMgmtDirectJoinReq
ZDO_ProcessMgmtLeaveReq SYMBOL "ZDO_ProcessMgmtLeaveReq"
`??ZDO_ProcessMgmtLeaveReq::?relay` SYMBOL "?relay", ZDO_ProcessMgmtLeaveReq
ZDO_ProcessMgmtLqiReq SYMBOL "ZDO_ProcessMgmtLqiReq"
`??ZDO_ProcessMgmtLqiReq::?relay` SYMBOL "?relay", ZDO_ProcessMgmtLqiReq
ZDO_ProcessMgmtNwkDiscReq SYMBOL "ZDO_ProcessMgmtNwkDiscReq"
`??ZDO_ProcessMgmtNwkDiscReq::?relay` SYMBOL "?relay", ZDO_ProcessMgmtNwkDiscReq
ZDO_ProcessMgmtPermitJoinReq SYMBOL "ZDO_ProcessMgmtPermitJoinReq"
`??ZDO_ProcessMgmtPermitJoinReq::?relay` SYMBOL "?relay", ZDO_ProcessMgmtPermitJoinReq
ZDO_ProcessMgmtRtgReq SYMBOL "ZDO_ProcessMgmtRtgReq"
`??ZDO_ProcessMgmtRtgReq::?relay` SYMBOL "?relay", ZDO_ProcessMgmtRtgReq
ZDO_ProcessNodeDescReq SYMBOL "ZDO_ProcessNodeDescReq"
`??ZDO_ProcessNodeDescReq::?relay` SYMBOL "?relay", ZDO_ProcessNodeDescReq
ZDO_ProcessPowerDescReq SYMBOL "ZDO_ProcessPowerDescReq"
`??ZDO_ProcessPowerDescReq::?relay` SYMBOL "?relay", ZDO_ProcessPowerDescReq
ZDO_ProcessServerDiscReq SYMBOL "ZDO_ProcessServerDiscReq"
`??ZDO_ProcessServerDiscReq::?relay` SYMBOL "?relay", ZDO_ProcessServerDiscReq
ZDO_ProcessSimpleDescReq SYMBOL "ZDO_ProcessSimpleDescReq"
`??ZDO_ProcessSimpleDescReq::?relay` SYMBOL "?relay", ZDO_ProcessSimpleDescReq
ZDO_ProcessUserDescReq SYMBOL "ZDO_ProcessUserDescReq"
`??ZDO_ProcessUserDescReq::?relay` SYMBOL "?relay", ZDO_ProcessUserDescReq
ZDO_ProcessUserDescSet SYMBOL "ZDO_ProcessUserDescSet"
`??ZDO_ProcessUserDescSet::?relay` SYMBOL "?relay", ZDO_ProcessUserDescSet
ZDO_StartDevice     SYMBOL "ZDO_StartDevice"
`??ZDO_StartDevice::?relay` SYMBOL "?relay", ZDO_StartDevice
ZDO_UpdateAddrManager SYMBOL "ZDO_UpdateAddrManager"
`??ZDO_UpdateAddrManager::?relay` SYMBOL "?relay", ZDO_UpdateAddrManager
ZDO_UpdateNwkStatus SYMBOL "ZDO_UpdateNwkStatus"
`??ZDO_UpdateNwkStatus::?relay` SYMBOL "?relay", ZDO_UpdateNwkStatus

        EXTERN `??APSME_BindRequest::?relay`
        FUNCTION `??APSME_BindRequest::?relay`,00H
        EXTERN `??APSME_GetRequest::?relay`
        FUNCTION `??APSME_GetRequest::?relay`,00H
        EXTERN `??APSME_LookupNwkAddr::?relay`
        FUNCTION `??APSME_LookupNwkAddr::?relay`,00H
        EXTERN `??APSME_UnBindRequest::?relay`
        FUNCTION `??APSME_UnBindRequest::?relay`,00H
        EXTERN `??APS_ReflectorInit::?relay`
        FUNCTION `??APS_ReflectorInit::?relay`,00H
        EXTERN `??APS_SetEndDeviceBindTimeout::?relay`
        FUNCTION `??APS_SetEndDeviceBindTimeout::?relay`,00H
        EXTERN `??AddrMgrEntryLookupExt::?relay`
        FUNCTION `??AddrMgrEntryLookupExt::?relay`,00H
        EXTERN `??AddrMgrEntryLookupNwk::?relay`
        FUNCTION `??AddrMgrEntryLookupNwk::?relay`,00H
        EXTERN `??AddrMgrEntryUpdate::?relay`
        FUNCTION `??AddrMgrEntryUpdate::?relay`,00H
        EXTERN `??AddrMgrExtAddrSet::?relay`
        FUNCTION `??AddrMgrExtAddrSet::?relay`,00H
        EXTERN `??AddrMgrExtAddrValid::?relay`
        FUNCTION `??AddrMgrExtAddrValid::?relay`,00H
        EXTERN `??AssocChangeNwkAddr::?relay`
        FUNCTION `??AssocChangeNwkAddr::?relay`,00H
        EXTERN `??AssocCount::?relay`
        FUNCTION `??AssocCount::?relay`,00H
        EXTERN `??AssocFindDevice::?relay`
        FUNCTION `??AssocFindDevice::?relay`,00H
        EXTERN `??AssocGetWithExt::?relay`
        FUNCTION `??AssocGetWithExt::?relay`,00H
        EXTERN `??AssocRemove::?relay`
        FUNCTION `??AssocRemove::?relay`,00H
        EXTERN `??NLME_CheckNewAddrSet::?relay`
        FUNCTION `??NLME_CheckNewAddrSet::?relay`,00H
        EXTERN `??NLME_CoordinatorInit::?relay`
        FUNCTION `??NLME_CoordinatorInit::?relay`,00H
        EXTERN `??NLME_DeviceJoiningInit::?relay`
        FUNCTION `??NLME_DeviceJoiningInit::?relay`,00H
        EXTERN `??NLME_DirectJoinRequest::?relay`
        FUNCTION `??NLME_DirectJoinRequest::?relay`,00H
        EXTERN `??NLME_GetCoordExtAddr::?relay`
        FUNCTION `??NLME_GetCoordExtAddr::?relay`,00H
        EXTERN `??NLME_GetCoordShortAddr::?relay`
        FUNCTION `??NLME_GetCoordShortAddr::?relay`,00H
        EXTERN `??NLME_GetExtAddr::?relay`
        FUNCTION `??NLME_GetExtAddr::?relay`,00H
        EXTERN `??NLME_GetRequest::?relay`
        FUNCTION `??NLME_GetRequest::?relay`,00H
        EXTERN `??NLME_GetShortAddr::?relay`
        FUNCTION `??NLME_GetShortAddr::?relay`,00H
        EXTERN `??NLME_IsAddressBroadcast::?relay`
        FUNCTION `??NLME_IsAddressBroadcast::?relay`,00H
        EXTERN `??NLME_LeaveReq::?relay`
        FUNCTION `??NLME_LeaveReq::?relay`,00H
        EXTERN `??NLME_NetworkDiscoveryRequest::?relay`
        FUNCTION `??NLME_NetworkDiscoveryRequest::?relay`,00H
        EXTERN `??NLME_NetworkFormationRequest::?relay`
        FUNCTION `??NLME_NetworkFormationRequest::?relay`,00H
        EXTERN `??NLME_NwkDiscReq2::?relay`
        FUNCTION `??NLME_NwkDiscReq2::?relay`,00H
        EXTERN `??NLME_NwkDiscTerm::?relay`
        FUNCTION `??NLME_NwkDiscTerm::?relay`,00H
        EXTERN `??NLME_OrphanJoinRequest::?relay`
        FUNCTION `??NLME_OrphanJoinRequest::?relay`,00H
        EXTERN `??NLME_PermitJoiningRequest::?relay`
        FUNCTION `??NLME_PermitJoiningRequest::?relay`,00H
        EXTERN `??NLME_SetPollRate::?relay`
        FUNCTION `??NLME_SetPollRate::?relay`,00H
        EXTERN `??NLME_StartRouterRequest::?relay`
        FUNCTION `??NLME_StartRouterRequest::?relay`,00H
        EXTERN `??RTG_RemoveRtgEntry::?relay`
        FUNCTION `??RTG_RemoveRtgEntry::?relay`,00H
        EXTERN `??ZDApp_GetEmptyPendingBindReq::?relay`
        FUNCTION `??ZDApp_GetEmptyPendingBindReq::?relay`,00H
        EXTERN `??ZDApp_NVUpdate::?relay`
        FUNCTION `??ZDApp_NVUpdate::?relay`,00H
        EXTERN `??ZDP_BindUnbindReq::?relay`
        FUNCTION `??ZDP_BindUnbindReq::?relay`,00H
        EXTERN `??ZDP_EPRsp::?relay`
        FUNCTION `??ZDP_EPRsp::?relay`,00H
        EXTERN `??ZDP_GenericRsp::?relay`
        FUNCTION `??ZDP_GenericRsp::?relay`,00H
        EXTERN `??ZDP_MgmtBindRsp::?relay`
        FUNCTION `??ZDP_MgmtBindRsp::?relay`,00H
        EXTERN `??ZDP_MgmtLqiRsp::?relay`
        FUNCTION `??ZDP_MgmtLqiRsp::?relay`,00H
        EXTERN `??ZDP_MgmtRtgRsp::?relay`
        FUNCTION `??ZDP_MgmtRtgRsp::?relay`,00H
        EXTERN `??ZDP_NodeDescMsg::?relay`
        FUNCTION `??ZDP_NodeDescMsg::?relay`,00H
        EXTERN `??ZDP_NwkAddrReq::?relay`
        FUNCTION `??ZDP_NwkAddrReq::?relay`,00H
        EXTERN `??ZDP_PowerDescMsg::?relay`
        FUNCTION `??ZDP_PowerDescMsg::?relay`,00H
        EXTERN `??ZDP_SendData::?relay`
        FUNCTION `??ZDP_SendData::?relay`,00H
        EXTERN `??ZDP_ServerDiscRsp::?relay`
        FUNCTION `??ZDP_ServerDiscRsp::?relay`,00H
        EXTERN `??ZDP_SimpleDescMsg::?relay`
        FUNCTION `??ZDP_SimpleDescMsg::?relay`,00H
        EXTERN `??ZDP_UserDescRsp::?relay`
        FUNCTION `??ZDP_UserDescRsp::?relay`,00H
        EXTERN `??ZMacSetReq::?relay`
        FUNCTION `??ZMacSetReq::?relay`,00H
        EXTERN `??afEndPoints::?relay`
        FUNCTION `??afEndPoints::?relay`,00H
        EXTERN `??afFindSimpleDesc::?relay`
        FUNCTION `??afFindSimpleDesc::?relay`,00H
        EXTERN `??afNumEndPoints::?relay`
        FUNCTION `??afNumEndPoints::?relay`,00H
        EXTERN `??bindAddrIndexGet::?relay`
        FUNCTION `??bindAddrIndexGet::?relay`,00H
        EXTERN `??nwkNeighborRemoveAllStranded::?relay`
        FUNCTION `??nwkNeighborRemoveAllStranded::?relay`,00H
        EXTERN `??nwkNeighborUpdateNwkAddr::?relay`
        FUNCTION `??nwkNeighborUpdateNwkAddr::?relay`,00H
        EXTERN `??nwk_ScanJoiningOrphan::?relay`
        FUNCTION `??nwk_ScanJoiningOrphan::?relay`,00H
        EXTERN `??osal_build_uint32::?relay`
        FUNCTION `??osal_build_uint32::?relay`,00H
        EXTERN `??osal_mem_alloc::?relay`
        FUNCTION `??osal_mem_alloc::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_memset::?relay`
        FUNCTION `??osal_memset::?relay`,00H
        EXTERN `??osal_msg_allocate::?relay`
        FUNCTION `??osal_msg_allocate::?relay`,00H
        EXTERN `??osal_msg_find::?relay`
        FUNCTION `??osal_msg_find::?relay`,00H
        EXTERN `??osal_msg_send::?relay`
        FUNCTION `??osal_msg_send::?relay`,00H
        EXTERN `??osal_nv_read::?relay`
        FUNCTION `??osal_nv_read::?relay`,00H
        EXTERN `??osal_nv_write::?relay`
        FUNCTION `??osal_nv_write::?relay`,00H
        EXTERN `??osal_set_event::?relay`
        FUNCTION `??osal_set_event::?relay`,00H
        EXTERN `??osal_start_timerEx::?relay`
        FUNCTION `??osal_start_timerEx::?relay`,00H
        EXTERN `??sAddrExtCmp::?relay`
        FUNCTION `??sAddrExtCmp::?relay`,00H
        EXTERN `??sAddrExtCpy::?relay`
        FUNCTION `??sAddrExtCpy::?relay`,00H
        EXTERN AIB_MaxBindingTime
        EXTERN AIB_apsUseExtendedPANID
        EXTERN APSME_BindRequest
        FUNCTION APSME_BindRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_GetRequest
        FUNCTION APSME_GetRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_LookupNwkAddr
        FUNCTION APSME_LookupNwkAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSME_UnBindRequest
        FUNCTION APSME_UnBindRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APS_ReflectorInit
        FUNCTION APS_ReflectorInit,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APS_SetEndDeviceBindTimeout
        FUNCTION APS_SetEndDeviceBindTimeout,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryLookupExt
        FUNCTION AddrMgrEntryLookupExt,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryLookupNwk
        FUNCTION AddrMgrEntryLookupNwk,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryUpdate
        FUNCTION AddrMgrEntryUpdate,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrExtAddrSet
        FUNCTION AddrMgrExtAddrSet,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrExtAddrValid
        FUNCTION AddrMgrExtAddrValid,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AssocChangeNwkAddr
        FUNCTION AssocChangeNwkAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AssocCount
        FUNCTION AssocCount,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AssocFindDevice
        FUNCTION AssocFindDevice,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AssocGetWithExt
        FUNCTION AssocGetWithExt,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AssocRemove
        FUNCTION AssocRemove,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_CheckNewAddrSet
        FUNCTION NLME_CheckNewAddrSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_CoordinatorInit
        FUNCTION NLME_CoordinatorInit,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_DeviceJoiningInit
        FUNCTION NLME_DeviceJoiningInit,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_DirectJoinRequest
        FUNCTION NLME_DirectJoinRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetCoordExtAddr
        FUNCTION NLME_GetCoordExtAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetCoordShortAddr
        FUNCTION NLME_GetCoordShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetExtAddr
        FUNCTION NLME_GetExtAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetRequest
        FUNCTION NLME_GetRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_IsAddressBroadcast
        FUNCTION NLME_IsAddressBroadcast,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_LeaveReq
        FUNCTION NLME_LeaveReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_NetworkDiscoveryRequest
        FUNCTION NLME_NetworkDiscoveryRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_NetworkFormationRequest
        FUNCTION NLME_NetworkFormationRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_NwkDiscReq2
        FUNCTION NLME_NwkDiscReq2,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_NwkDiscTerm
        FUNCTION NLME_NwkDiscTerm,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_OrphanJoinRequest
        FUNCTION NLME_OrphanJoinRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_PermitJoiningRequest
        FUNCTION NLME_PermitJoiningRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetPollRate
        FUNCTION NLME_SetPollRate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_StartRouterRequest
        FUNCTION NLME_StartRouterRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RTG_RemoveRtgEntry
        FUNCTION RTG_RemoveRtgEntry,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDAppNwkAddr
        EXTERN ZDAppTaskID
        EXTERN ZDApp_GetEmptyPendingBindReq
        FUNCTION ZDApp_GetEmptyPendingBindReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDApp_NVUpdate
        FUNCTION ZDApp_NVUpdate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_Config_Node_Descriptor
        EXTERN ZDO_Config_Power_Descriptor
        EXTERN ZDO_UseExtendedPANID
        EXTERN ZDP_BindUnbindReq
        FUNCTION ZDP_BindUnbindReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_EPRsp
        FUNCTION ZDP_EPRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_GenericRsp
        FUNCTION ZDP_GenericRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_MgmtBindRsp
        FUNCTION ZDP_MgmtBindRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_MgmtLqiRsp
        FUNCTION ZDP_MgmtLqiRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 64, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_MgmtRtgRsp
        FUNCTION ZDP_MgmtRtgRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_NodeDescMsg
        FUNCTION ZDP_NodeDescMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_NwkAddrReq
        FUNCTION ZDP_NwkAddrReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_PowerDescMsg
        FUNCTION ZDP_PowerDescMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_SendData
        FUNCTION ZDP_SendData,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_ServerDiscRsp
        FUNCTION ZDP_ServerDiscRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_SimpleDescMsg
        FUNCTION ZDP_SimpleDescMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_TransID
        EXTERN ZDP_UserDescRsp
        FUNCTION ZDP_UserDescRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZMacSetReq
        FUNCTION ZMacSetReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN _NIB
        EXTERN afEndPoints
        FUNCTION afEndPoints,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afFindSimpleDesc
        FUNCTION afFindSimpleDesc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afNumEndPoints
        FUNCTION afNumEndPoints,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN bindAddrIndexGet
        FUNCTION bindAddrIndexGet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN devState
        EXTERN epList
        EXTERN nwkNeighborRemoveAllStranded
        FUNCTION nwkNeighborRemoveAllStranded,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nwkNeighborUpdateNwkAddr
        FUNCTION nwkNeighborUpdateNwkAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN nwk_ScanJoiningOrphan
        FUNCTION nwk_ScanJoiningOrphan,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_build_uint32
        FUNCTION osal_build_uint32,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_allocate
        FUNCTION osal_msg_allocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_find
        FUNCTION osal_msg_find,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_send
        FUNCTION osal_msg_send,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN pNwkNotMyChildListDelete
        EXTERN sAddrExtCmp
        FUNCTION sAddrExtCmp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sAddrExtCpy
        FUNCTION sAddrExtCpy,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zdappMgmtNwkDiscReqInProgress
        EXTERN zdappMgmtNwkDiscRspAddr
        EXTERN zdappMgmtNwkDiscRspTransSeq
        EXTERN zdappMgmtNwkDiscStartIndex
        EXTERN zgApsUseExtendedPANID
        EXTERN zgChildAgingEnable
        EXTERN zgConfigPANID
        EXTERN zgDefaultChannelList
        EXTERN zgDefaultStartingScanDuration
        EXTERN zgDeviceLogicalType

// C:\Users\koen\ZigBee-Code-WTWS\Components\stack\zdo\ZDObject.c
//    1 /**************************************************************************************************
//    2   Filename:       ZDObject.c
//    3   Revised:        $Date: 2014-08-04 18:42:36 -0700 (Mon, 04 Aug 2014) $
//    4   Revision:       $Revision: 39656 $
//    5 
//    6   Description:    This is the Zigbee Device Object.
//    7 
//    8 
//    9   Copyright 2004-2014 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License"). You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product. Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41  * INCLUDES
//   42  */
//   43 #include "ZComDef.h"
//   44 #include "OSAL.h"
//   45 #include "OSAL_Nv.h"
//   46 #include "rtg.h"
//   47 #include "NLMEDE.h"
//   48 #include "nwk_globals.h"
//   49 #include "APS.h"
//   50 #include "APSMEDE.h"
//   51 #include "AssocList.h"
//   52 #include "BindingTable.h"
//   53 #include "AddrMgr.h"
//   54 #include "AF.h"
//   55 #include "ZDObject.h"
//   56 #include "ZDProfile.h"
//   57 #include "ZDConfig.h"
//   58 #include "ZDSecMgr.h"
//   59 #include "ZDApp.h"
//   60 #include "nwk_util.h"   // NLME_IsAddressBroadcast()
//   61 #include "ZGlobals.h"
//   62 #if defined MT_ZDO_CB_FUNC
//   63 #include "MT.h"
//   64 #endif
//   65 
//   66 #if defined( LCD_SUPPORTED )
//   67   #include "OnBoard.h"
//   68 #endif
//   69 
//   70 /* HAL */
//   71 #include "hal_lcd.h"
//   72 
//   73 /*********************************************************************
//   74  * MACROS
//   75  */
//   76 
//   77 /*********************************************************************
//   78  * CONSTANTS
//   79  */
//   80 // NLME Stub Implementations
//   81 #define ZDO_ProcessMgmtPermitJoinTimeout NLME_PermitJoiningTimeout
//   82 
//   83 /*********************************************************************
//   84  * TYPEDEFS
//   85  */
//   86 #if defined ( REFLECTOR )
//   87 typedef struct
//   88 {
//   89   byte SrcTransSeq;
//   90   zAddrType_t SrcAddr;
//   91   uint16 LocalCoordinator;
//   92   byte epIntf;
//   93   uint16 ProfileID;
//   94   byte numInClusters;
//   95   uint16 *inClusters;
//   96   byte numOutClusters;
//   97   uint16 *outClusters;
//   98   byte SecurityUse;
//   99   byte status;
//  100 } ZDO_EDBind_t;
//  101 #endif // defined ( REFLECTOR )
//  102 
//  103 enum
//  104 {
//  105   ZDMATCH_INIT,           // Initialized
//  106   ZDMATCH_WAIT_REQ,       // Received first request, waiting for second
//  107   ZDMATCH_SENDING_BINDS   // Received both requests, sending unbind/binds
//  108 };
//  109 
//  110 enum
//  111 {
//  112   ZDMATCH_SENDING_NOT,
//  113   ZDMATCH_SENDING_UNBIND,
//  114   ZDMATCH_SENDING_BIND
//  115 };
//  116 
//  117 /*********************************************************************
//  118  * GLOBAL VARIABLES
//  119  */
//  120 
//  121 /*********************************************************************
//  122  * EXTERNAL VARIABLES
//  123  */
//  124 
//  125 /*********************************************************************
//  126  * EXTERNAL FUNCTIONS
//  127  */
//  128 
//  129 /*********************************************************************
//  130  * LOCAL VARIABLES
//  131  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  132 static uint16 ZDOBuildBuf[26];  // temp area to build data without allocation
ZDOBuildBuf:
        DS 52
        REQUIRE __INIT_XDATA_Z
//  133 
//  134 #if defined ( REFLECTOR )

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  135 static ZDO_EDBind_t *ZDO_EDBind;     // Null when not used
ZDO_EDBind:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  136 #endif
//  137 
//  138 #if defined ( MANAGED_SCAN )
//  139   uint32 managedScanNextChannel = 0;
//  140   uint32 managedScanChannelMask = 0;
//  141   uint8  managedScanTimesPerChannel = 0;
//  142 #endif
//  143 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  144 ZDMatchEndDeviceBind_t *matchED = (ZDMatchEndDeviceBind_t *)NULL;
matchED:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  145 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//  146 uint32 apsChannelMask = 0;
apsChannelMask:
        DS 4
        REQUIRE __INIT_XDATA_Z
//  147 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  148 int16 zdpExternalStateTaskID = -1;
zdpExternalStateTaskID:
        DATA16
        DS 2
        REQUIRE `?<Initializer for zdpExternalStateTaskID>`
        REQUIRE __INIT_XDATA_I
//  149 
//  150 /*********************************************************************
//  151  * LOCAL FUNCTIONS
//  152  */
//  153 static void ZDODeviceSetup( void );
//  154 #if defined ( MANAGED_SCAN )
//  155   static void ZDOManagedScan_Next( void );
//  156 #endif
//  157 #if defined ( REFLECTOR )
//  158   static void ZDO_RemoveEndDeviceBind( void );
//  159   static void ZDO_SendEDBindRsp( byte TransSeq, zAddrType_t *dstAddr, byte Status, byte secUse );
//  160 #endif
//  161 #if ( ZG_BUILD_COORDINATOR_TYPE )
//  162   static byte ZDO_CompareClusterLists( byte numList1, uint16 *list1,
//  163                                        byte numList2, uint16 *list2, uint16 *pMatches );
//  164   static void ZDO_RemoveMatchMemory( void );
//  165   static uint8 ZDO_CopyMatchInfo( ZDEndDeviceBind_t *destReq, ZDEndDeviceBind_t *srcReq );
//  166   static void ZDO_EndDeviceBindMatchTimeoutCB( void );
//  167 #endif
//  168 uint8 *ZDO_ConvertOTAClusters( uint8 cnt, uint8 *inBuf, uint16 *outList );
//  169 static void zdoSendStateChangeMsg(uint8 state, uint8 taskId);
//  170 
//  171 /*********************************************************************
//  172  * @fn          ZDO_Init
//  173  *
//  174  * @brief       ZDObject and ZDProfile initialization.
//  175  *
//  176  * @param       none
//  177  *
//  178  * @return      none
//  179  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  180 void ZDO_Init( void )
ZDO_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function ZDO_Init
        CODE
//  181 {
        FUNCALL ZDO_Init, sAddrExtCpy
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_Init, ZDODeviceSetup
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  182   // Initialize ZD items
//  183   #if defined ( REFLECTOR )
//  184   ZDO_EDBind = NULL;
        MOV     DPTR,#ZDO_EDBind
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
//  185   #endif
//  186 
//  187   // Initialize default ZDO_UseExtendedPANID to the APS one.
//  188   osal_cpyExtAddr( ZDO_UseExtendedPANID, AIB_apsUseExtendedPANID );
        ; Setup parameters for call to function sAddrExtCpy
        MOV     R4,#AIB_apsUseExtendedPANID & 0xff
        MOV     R5,#(AIB_apsUseExtendedPANID >> 8) & 0xff
        MOV     R2,#ZDO_UseExtendedPANID & 0xff
        MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
        LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
//  189 
//  190   // Setup the device - type of device to create.
//  191   ZDODeviceSetup();
        ; Setup parameters for call to function ZDODeviceSetup
        LCALL   `??ZDODeviceSetup::?relay`; Banked call to: ZDODeviceSetup
//  192 }
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
          CFI EndBlock cfiBlock0
//  193 
//  194 #if defined ( MANAGED_SCAN )
//  195 /*********************************************************************
//  196  * @fn      ZDOManagedScan_Next()
//  197  *
//  198  * @brief   Setup a managed scan.
//  199  *
//  200  * @param   none
//  201  *
//  202  * @return  none
//  203  */
//  204 static void ZDOManagedScan_Next( void )
//  205 {
//  206   // Is it the first time
//  207   if ( managedScanNextChannel == 0 && managedScanTimesPerChannel == 0 )
//  208   {
//  209     // Setup the defaults
//  210     managedScanNextChannel  = 1;
//  211 
//  212     while( managedScanNextChannel && (zgDefaultChannelList & managedScanNextChannel) == 0 )
//  213       managedScanNextChannel <<= 1;
//  214 
//  215     managedScanChannelMask = managedScanNextChannel;
//  216     managedScanTimesPerChannel = MANAGEDSCAN_TIMES_PRE_CHANNEL;
//  217   }
//  218   else
//  219   {
//  220     // Do we need to go to the next channel
//  221     if ( managedScanTimesPerChannel == 0 )
//  222     {
//  223       // Find next active channel
//  224       managedScanChannelMask  = managedScanNextChannel;
//  225       managedScanTimesPerChannel = MANAGEDSCAN_TIMES_PRE_CHANNEL;
//  226     }
//  227     else
//  228     {
//  229       managedScanTimesPerChannel--;
//  230 
//  231       if ( managedScanTimesPerChannel == 0 )
//  232       {
//  233         managedScanNextChannel  <<= 1;
//  234         while( managedScanNextChannel && (zgDefaultChannelList & managedScanNextChannel) == 0 )
//  235           managedScanNextChannel <<= 1;
//  236 
//  237         if ( managedScanNextChannel == 0 )
//  238           zdoDiscCounter  = NUM_DISC_ATTEMPTS + 1; // Stop
//  239       }
//  240     }
//  241   }
//  242 }
//  243 #endif // MANAGED_SCAN
//  244 
//  245 /*********************************************************************
//  246  * @fn      ZDODeviceSetup()
//  247  *
//  248  * @brief   Call set functions depending on the type of device compiled.
//  249  *
//  250  * @param   none
//  251  *
//  252  * @return  none
//  253  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  254 static void ZDODeviceSetup( void )
ZDODeviceSetup:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function ZDODeviceSetup
        CODE
//  255 {
        FUNCALL ZDODeviceSetup, NLME_CoordinatorInit
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDODeviceSetup, APS_ReflectorInit
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDODeviceSetup, NLME_DeviceJoiningInit
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  256   if ( ZG_BUILD_COORDINATOR_TYPE )
//  257   {
//  258     NLME_CoordinatorInit();
        ; Setup parameters for call to function NLME_CoordinatorInit
        LCALL   `??NLME_CoordinatorInit::?relay`; Banked call to: NLME_CoordinatorInit
//  259   }
//  260 
//  261 #if defined ( REFLECTOR )
//  262   APS_ReflectorInit();
        ; Setup parameters for call to function APS_ReflectorInit
        LCALL   `??APS_ReflectorInit::?relay`; Banked call to: APS_ReflectorInit
//  263 #endif
//  264 
//  265   if ( ZG_BUILD_JOINING_TYPE )
//  266   {
//  267     NLME_DeviceJoiningInit();
        ; Setup parameters for call to function NLME_DeviceJoiningInit
        LCALL   `??NLME_DeviceJoiningInit::?relay`; Banked call to: NLME_DeviceJoiningInit
//  268   }
//  269 }
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
          CFI EndBlock cfiBlock1
//  270 
//  271 /*********************************************************************
//  272  * @fn          ZDO_StartDevice
//  273  *
//  274  * @brief       This function starts a device in a network.
//  275  *
//  276  * @param       logicalType     - Device type to start
//  277  *              startMode       - indicates mode of device startup
//  278  *              beaconOrder     - indicates time betwen beacons
//  279  *              superframeOrder - indicates length of active superframe
//  280  *
//  281  * @return      none
//  282  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  283 void ZDO_StartDevice( byte logicalType, devStartModes_t startMode, byte beaconOrder, byte superframeOrder )
ZDO_StartDevice:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function ZDO_StartDevice
        CODE
//  284 {
        FUNCALL ZDO_StartDevice, NLME_NetworkFormationRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_StartDevice, NLME_StartRouterRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_StartDevice, NLME_NetworkDiscoveryRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_StartDevice, nwk_ScanJoiningOrphan
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_StartDevice, NLME_OrphanJoinRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_StartDevice, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        MOV     A,#-0xd
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 13)
        ; Saved register size: 13
        ; Auto size: 11
        MOV     A,#-0xb
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     ?V1,R1
        MOV     ?V0,R2
        MOV     ?V2,R3
        MOV     ?V3,R4
//  285   ZStatus_t ret;
//  286 #if defined ( ZIGBEE_FREQ_AGILITY )
//  287   static uint8 discRetries = 0;
//  288 #endif
//  289 #if defined ( ZIGBEE_COMMISSIONING )
//  290   static uint8 scanCnt = 0;
//  291 #endif
//  292 
//  293   ret = ZUnsupportedMode;
        MOV     R1,#0x12
//  294 
//  295   if ( ZG_BUILD_COORDINATOR_TYPE && logicalType == NODETYPE_COORDINATOR )
        MOV     A,?V1
        JNZ     ??ZDO_StartDevice_0
//  296   {
//  297     if ( startMode == MODE_HARD )
        MOV     A,#0x2
        XRL     A,?V0
        JNZ     ??ZDO_StartDevice_1
//  298     {
//  299       devState = DEV_COORD_STARTING;
        MOV     DPTR,#devState
        MOV     A,#0x8
        MOVX    @DPTR,A
//  300       ret = NLME_NetworkFormationRequest( zgConfigPANID, zgApsUseExtendedPANID, zgDefaultChannelList,
//  301                                           zgDefaultStartingScanDuration, beaconOrder,
//  302                                           superframeOrder, false );
        ; Setup parameters for call to function NLME_NetworkFormationRequest
        MOV     ?V4,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     A,?V3
        MOV     ?V4,A
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 26)
        MOV     A,?V2
        MOV     ?V4,A
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 27)
        MOV     DPTR,#zgDefaultChannelList
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 31)
        MOV     DPTR,#zgDefaultStartingScanDuration
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     R4,#zgApsUseExtendedPANID & 0xff
        MOV     R5,#(zgApsUseExtendedPANID >> 8) & 0xff
        MOV     DPTR,#zgConfigPANID
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   `??NLME_NetworkFormationRequest::?relay`; Banked call to: NLME_NetworkFormationRequest
        MOV     A,#0x7
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     A,R1
        MOV     R1,A
        SJMP    ??ZDO_StartDevice_0
//  303     }
//  304     else if ( startMode == MODE_RESUME )
??ZDO_StartDevice_1:
        MOV     A,#0x1
        XRL     A,?V0
        JNZ     ??ZDO_StartDevice_0
//  305     {
//  306       // Just start the coordinator
//  307       devState = DEV_COORD_STARTING;
        MOV     DPTR,#devState
        MOV     A,#0x8
        MOVX    @DPTR,A
//  308       ret = NLME_StartRouterRequest( beaconOrder, beaconOrder, false );
        ; Setup parameters for call to function NLME_StartRouterRequest
        MOV     R3,#0x0
        MOV     R2,?V2
        MOV     R1,?V2
        LCALL   `??NLME_StartRouterRequest::?relay`; Banked call to: NLME_StartRouterRequest
        MOV     A,R1
        MOV     R1,A
//  309     }
//  310     else
//  311     {
//  312 #if defined( LCD_SUPPORTED )
//  313       HalLcdWriteScreen( "StartDevice ERR", "MODE unknown" );
//  314 #endif
//  315     }
//  316   }
//  317 
//  318   if ( ZG_BUILD_JOINING_TYPE && (logicalType == NODETYPE_ROUTER || logicalType == NODETYPE_DEVICE) )
??ZDO_StartDevice_0:
        MOV     A,#0x1
        XRL     A,?V1
        JZ      ??ZDO_StartDevice_2
        MOV     A,#0x2
        XRL     A,?V1
        JZ      $+5
        LJMP    ??ZDO_StartDevice_3 & 0xFFFF
//  319   {
//  320     if ( (startMode == MODE_JOIN) || (startMode == MODE_REJOIN) )
??ZDO_StartDevice_2:
        MOV     A,?V0
        JZ      ??ZDO_StartDevice_4
        MOV     A,#0x3
        XRL     A,?V0
        JNZ     ??ZDO_StartDevice_5
//  321     {
//  322       devState = DEV_NWK_DISC;
??ZDO_StartDevice_4:
        MOV     DPTR,#devState
        MOV     A,#0x2
        MOVX    @DPTR,A
//  323 
//  324   #if defined( MANAGED_SCAN )
//  325       ZDOManagedScan_Next();
//  326       ret = NLME_NetworkDiscoveryRequest( managedScanChannelMask, BEACON_ORDER_15_MSEC );
//  327   #else
//  328       ret = NLME_NetworkDiscoveryRequest( zgDefaultChannelList, zgDefaultStartingScanDuration );
        ; Setup parameters for call to function NLME_NetworkDiscoveryRequest
        MOV     DPTR,#zgDefaultStartingScanDuration
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#zgDefaultChannelList
        LCALL   ?XLOAD_R2345
        LCALL   `??NLME_NetworkDiscoveryRequest::?relay`; Banked call to: NLME_NetworkDiscoveryRequest
        MOV     A,R1
        MOV     R1,A
//  329     #if defined ( ZIGBEE_FREQ_AGILITY )
//  330       if ( !( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE ) &&
//  331             ( ret == ZSuccess ) && ( ++discRetries == 4 ) )
        MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.3
        JC      ??ZDO_StartDevice_6
        MOV     A,R1
        JNZ     ??ZDO_StartDevice_6
        MOV     DPTR,#??discRetries
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOVX    @DPTR,A
        MOV     DPTR,#??discRetries
        MOVX    A,@DPTR
        XRL     A,#0x4
        JNZ     ??ZDO_StartDevice_6
//  332       {
//  333         // For devices with RxOnWhenIdle equals to FALSE, any network channel
//  334         // change will not be recieved. On these devices or routers that have
//  335         // lost the network, an active scan shall be conducted on the Default
//  336         // Channel list using the extended PANID to find the network. If the
//  337         // extended PANID isn't found using the Default Channel list, an scan
//  338         // should be completed using all channels.
//  339         zgDefaultChannelList = MAX_CHANNELS_24GHZ;
        MOV     R4,#0x0
        MOV     R5,#-0x8
        MOV     R6,#-0x1
        MOV     R7,#0x7
        MOV     DPTR,#zgDefaultChannelList
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
//  340       }
//  341     #endif // ZIGBEE_FREQ_AGILITY
//  342     #if defined ( ZIGBEE_COMMISSIONING )
//  343       if (startMode == MODE_REJOIN && scanCnt++ >= 5 )
??ZDO_StartDevice_6:
        MOV     A,#0x3
        XRL     A,?V0
        JZ      $+5
        LJMP    ??ZDO_StartDevice_3 & 0xFFFF
        MOV     DPTR,#??scanCnt
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0x1
        ADD     A,R0
        MOV     DPTR,#??scanCnt
        MOVX    @DPTR,A
        MOV     A,R0
        CLR     C
        SUBB    A,#0x5
        JC      ??ZDO_StartDevice_3
//  344       {
//  345         // When ApsUseExtendedPanID is commissioned to a non zero value via
//  346         // application specific means, the device shall conduct an active scan
//  347         // on the Default Channel list and join the PAN with the same
//  348         // ExtendedPanID. If the PAN is not found, an scan should be completed
//  349         // on all channels.
//  350         // When devices rejoin the network and the PAN is not found from
//  351         zgDefaultChannelList = MAX_CHANNELS_24GHZ;
        MOV     R4,#0x0
        MOV     R5,#-0x8
        MOV     R6,#-0x1
        MOV     R7,#0x7
        MOV     DPTR,#zgDefaultChannelList
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
        SJMP    ??ZDO_StartDevice_3
//  352       }
//  353     #endif // ZIGBEE_COMMISSIONING
//  354   #endif
//  355     }
//  356     else if ( startMode == MODE_RESUME )
??ZDO_StartDevice_5:
        MOV     A,#0x1
        XRL     A,?V0
        JNZ     ??ZDO_StartDevice_3
//  357     {
//  358       if ( logicalType == NODETYPE_ROUTER )
        MOV     A,#0x1
        XRL     A,?V1
        JNZ     ??ZDO_StartDevice_7
//  359       {
//  360         ZMacScanCnf_t scanCnf;
//  361         devState = DEV_NWK_ORPHAN;
        MOV     DPTR,#devState
        MOV     A,#0xa
        MOVX    @DPTR,A
//  362 
//  363         /* if router and nvram is available, fake successful orphan scan */
//  364         scanCnf.hdr.Status = ZSUCCESS;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x0
        MOVX    @DPTR,A
//  365         scanCnf.ScanType = ZMAC_ORPHAN_SCAN;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x3
        MOVX    @DPTR,A
//  366         scanCnf.UnscannedChannels = 0;
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R6,#0x0
        MOV     R7,#0x0
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
//  367         scanCnf.ResultListSize = 0;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x0
        MOVX    @DPTR,A
//  368         nwk_ScanJoiningOrphan(&scanCnf);
        ; Setup parameters for call to function nwk_ScanJoiningOrphan
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??nwk_ScanJoiningOrphan::?relay`; Banked call to: nwk_ScanJoiningOrphan
//  369 
//  370         ret = ZSuccess;
        MOV     R1,#0x0
        SJMP    ??ZDO_StartDevice_3
//  371       }
//  372       else
//  373       {
//  374         devState = DEV_NWK_ORPHAN;
??ZDO_StartDevice_7:
        MOV     DPTR,#devState
        MOV     A,#0xa
        MOVX    @DPTR,A
//  375         ret = NLME_OrphanJoinRequest( zgDefaultChannelList,
//  376                                       zgDefaultStartingScanDuration );
        ; Setup parameters for call to function NLME_OrphanJoinRequest
        MOV     DPTR,#zgDefaultStartingScanDuration
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#zgDefaultChannelList
        LCALL   ?XLOAD_R2345
        LCALL   `??NLME_OrphanJoinRequest::?relay`; Banked call to: NLME_OrphanJoinRequest
        MOV     A,R1
        MOV     R1,A
//  377       }
//  378     }
//  379     else
//  380     {
//  381 #if defined( LCD_SUPPORTED )
//  382       HalLcdWriteScreen( "StartDevice ERR", "MODE unknown" );
//  383 #endif
//  384     }
//  385   }
//  386 
//  387   if ( ret != ZSuccess )
??ZDO_StartDevice_3:
        MOV     A,R1
        JZ      ??ZDO_StartDevice_8
//  388   {
//  389     osal_start_timerEx(ZDAppTaskID, ZDO_NETWORK_INIT, NWK_RETRY_DELAY );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_3e8
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 28)
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     A,R1
//  390   }
//  391 }
??ZDO_StartDevice_8:
        MOV     A,#0xb
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     R7,#0x5
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
          CFI EndBlock cfiBlock2

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??discRetries:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??scanCnt:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  392 
//  393 /**************************************************************************************************
//  394  * @fn          zdoSendStateChangeMsg
//  395  *
//  396  * @brief       Helper function for ZDO_UpdateNwkStatus.
//  397  *
//  398  * input parameters
//  399  *
//  400  * @param       taskId - The OSAL task identifier to which to send the ZDO_STATE_CHANGE_EVT.
//  401  * @param       state - The current device state.
//  402  *
//  403  * output parameters
//  404  *
//  405  * None.
//  406  *
//  407  * @return      None.
//  408  **************************************************************************************************
//  409  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  410 static void zdoSendStateChangeMsg(uint8 state, uint8 taskId)
zdoSendStateChangeMsg:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function zdoSendStateChangeMsg
        CODE
//  411 {
        FUNCALL zdoSendStateChangeMsg, osal_msg_find
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zdoSendStateChangeMsg, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zdoSendStateChangeMsg, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zdoSendStateChangeMsg, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        MOV     A,R1
        MOV     R7,A
        MOV     A,R2
        MOV     R6,A
//  412   osal_event_hdr_t *pMsg = (osal_event_hdr_t *)osal_msg_find(taskId, ZDO_STATE_CHANGE);
        ; Setup parameters for call to function osal_msg_find
        MOV     R2,#-0x2f
        MOV     A,R6
        MOV     R1,A
        LCALL   `??osal_msg_find::?relay`; Banked call to: osal_msg_find
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R2,?V0
        MOV     R3,?V1
//  413 
//  414   if (NULL == pMsg)
        MOV     A,R2
        ORL     A,R3
        JNZ     ??zdoSendStateChangeMsg_0
//  415   {
//  416     if (NULL == (pMsg = (osal_event_hdr_t *)osal_msg_allocate(sizeof(osal_event_hdr_t))))
        ; Setup parameters for call to function osal_msg_allocate
        MOV     R2,#0x2
        MOV     R3,#0x0
        LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R2,?V0
        MOV     R3,?V1
        MOV     A,R2
        ORL     A,R3
        JNZ     ??zdoSendStateChangeMsg_1
//  417     {
//  418       // Upon failure to notify any EndPoint of the state change, re-set the ZDO event to
//  419       // try again later when more Heap may be available.
//  420       osal_set_event(ZDAppTaskID, ZDO_STATE_CHANGE_EVT);
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x10
        MOV     R3,#0x0
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
        MOV     A,R1
        SJMP    ??zdoSendStateChangeMsg_2
//  421     }
//  422     else
//  423     {
//  424       pMsg->event = ZDO_STATE_CHANGE;
??zdoSendStateChangeMsg_1:
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,#-0x2f
        MOVX    @DPTR,A
//  425       pMsg->status = state;
        MOV     A,R7
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  426 
//  427       (void)osal_msg_send(taskId, (uint8 *)pMsg);
        ; Setup parameters for call to function osal_msg_send
        MOV     A,R6
        MOV     R1,A
        LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
        MOV     A,R1
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        SJMP    ??zdoSendStateChangeMsg_2
//  428     }
//  429   }
//  430   else
//  431   {
//  432     // Modify in place the status of an existing ZDO_STATE_CHANGE message to the EndPoint.
//  433     pMsg->status = state;
??zdoSendStateChangeMsg_0:
        MOV     A,R7
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  434   }
//  435 }
??zdoSendStateChangeMsg_2:
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
          CFI EndBlock cfiBlock3
//  436 
//  437 /**************************************************************************************************
//  438  * @fn          ZDO_UpdateNwkStatus
//  439  *
//  440  * @brief       This function sends a ZDO_STATE_CHANGE message to the task of every EndPoint
//  441  *              registered with AF (except, of course, the ZDO_EP). Even if a single task has more
//  442  *              than one registered EndPoint, it will only receive one notification per state
//  443  *              change. Although the device may go through a sequence of state changes, the
//  444  *              Application task may only receive notification of the final, steady-state state
//  445  *              because it has the lowest priority and never even runs to receive the intermediate
//  446  *              state change notifications.
//  447  *
//  448  * input parameters
//  449  *
//  450  * @param       state - The current device state.
//  451  *
//  452  * output parameters
//  453  *
//  454  * None.
//  455  *
//  456  * @return      None.
//  457  **************************************************************************************************
//  458  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  459 void ZDO_UpdateNwkStatus(devStates_t state)
ZDO_UpdateNwkStatus:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function ZDO_UpdateNwkStatus
        CODE
//  460 {
        FUNCALL ZDO_UpdateNwkStatus, zdoSendStateChangeMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_UpdateNwkStatus, zdoSendStateChangeMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_UpdateNwkStatus, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_UpdateNwkStatus, NLME_GetExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0,R1
//  461   epList_t *pItem = epList;
        MOV     DPTR,#epList
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        SJMP    ??ZDO_UpdateNwkStatus_0
//  462 
//  463 #if defined MT_ZDO_CB_FUNC
//  464   if ( zdpExternalStateTaskID == -1 )
//  465   {
//  466     zdpExternalStateTaskID = MT_TaskID;
//  467   }
//  468 #endif
//  469 
//  470   while (pItem != NULL)
//  471   {
//  472     if (pItem->epDesc->endPoint != ZDO_EP)
??ZDO_UpdateNwkStatus_1:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        JZ      ??ZDO_UpdateNwkStatus_2
//  473     {
//  474       zdoSendStateChangeMsg(state, *(pItem->epDesc->task_id));
        ; Setup parameters for call to function zdoSendStateChangeMsg
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R1,?V0
        LCALL   `??zdoSendStateChangeMsg::?relay`; Banked call to: zdoSendStateChangeMsg
//  475     }
//  476 
//  477     pItem = pItem->nextDesc;
??ZDO_UpdateNwkStatus_2:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
//  478   }
??ZDO_UpdateNwkStatus_0:
        MOV     A,R6
        ORL     A,R7
        JNZ     ??ZDO_UpdateNwkStatus_1
//  479   
//  480   if ( zdpExternalStateTaskID != -1 )
        MOV     DPTR,#zdpExternalStateTaskID
        MOVX    A,@DPTR
        XRL     A,#0xff
        JNZ     ??ZDO_UpdateNwkStatus_3
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0xff
??ZDO_UpdateNwkStatus_3:
        JZ      ??ZDO_UpdateNwkStatus_4
//  481   {  
//  482     zdoSendStateChangeMsg( state, zdpExternalStateTaskID );
        ; Setup parameters for call to function zdoSendStateChangeMsg
        MOV     DPTR,#zdpExternalStateTaskID
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     R1,?V0
        LCALL   `??zdoSendStateChangeMsg::?relay`; Banked call to: zdoSendStateChangeMsg
//  483   }
//  484   
//  485   ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
??ZDO_UpdateNwkStatus_4:
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV     DPTR,#ZDAppNwkAddr
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  486   (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
        ; Setup parameters for call to function NLME_GetExtAddr
        LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
        MOV     ?V2,R2
        MOV     ?V3,R3
        MOV     DPL,?V2
        MOV     DPH,?V3
//  487 }
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
          CFI EndBlock cfiBlock4
//  488 
//  489 #if defined ( REFLECTOR )
//  490 /*********************************************************************
//  491  * @fn          ZDO_RemoveEndDeviceBind
//  492  *
//  493  * @brief       Remove the end device bind
//  494  *
//  495  * @param  none
//  496  *
//  497  * @return      none
//  498  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  499 static void ZDO_RemoveEndDeviceBind( void )
ZDO_RemoveEndDeviceBind:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function ZDO_RemoveEndDeviceBind
        CODE
//  500 {
        FUNCALL ZDO_RemoveEndDeviceBind, osal_mem_free
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_RemoveEndDeviceBind, osal_mem_free
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_RemoveEndDeviceBind, osal_mem_free
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  501   if ( ZDO_EDBind != NULL )
        MOV     DPTR,#ZDO_EDBind
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??ZDO_RemoveEndDeviceBind_0
//  502   {
//  503     // Free the RAM
//  504     if ( ZDO_EDBind->inClusters != NULL )
        MOV     DPTR,#ZDO_EDBind
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x10
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??ZDO_RemoveEndDeviceBind_1
//  505     {
//  506       osal_mem_free( ZDO_EDBind->inClusters );
        ; Setup parameters for call to function osal_mem_free
        MOV     DPTR,#ZDO_EDBind
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x10
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  507     }
//  508     if ( ZDO_EDBind->outClusters != NULL )
??ZDO_RemoveEndDeviceBind_1:
        MOV     DPTR,#ZDO_EDBind
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x13
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??ZDO_RemoveEndDeviceBind_2
//  509     {
//  510       osal_mem_free( ZDO_EDBind->outClusters );
        ; Setup parameters for call to function osal_mem_free
        MOV     DPTR,#ZDO_EDBind
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x13
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  511     }
//  512     osal_mem_free( ZDO_EDBind );
??ZDO_RemoveEndDeviceBind_2:
        ; Setup parameters for call to function osal_mem_free
        MOV     DPTR,#ZDO_EDBind
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  513     ZDO_EDBind = NULL;
        MOV     DPTR,#ZDO_EDBind
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
//  514   }
//  515 }
??ZDO_RemoveEndDeviceBind_0:
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
          CFI EndBlock cfiBlock5
//  516 #endif // REFLECTOR
//  517 
//  518 #if defined ( REFLECTOR )
//  519 /*********************************************************************
//  520  * @fn          ZDO_RemoveEndDeviceBind
//  521  *
//  522  * @brief       Remove the end device bind
//  523  *
//  524  * @param  none
//  525  *
//  526  * @return      none
//  527  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  528 static void ZDO_SendEDBindRsp( byte TransSeq, zAddrType_t *dstAddr, byte Status, byte secUse )
ZDO_SendEDBindRsp:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function ZDO_SendEDBindRsp
        CODE
//  529 {
        FUNCALL ZDO_SendEDBindRsp, ZDP_SendData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     A,R1
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,R4
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,R5
        MOV     R6,A
//  530   ZDP_EndDeviceBindRsp( TransSeq, dstAddr, Status, secUse );
        ; Setup parameters for call to function ZDP_SendData
        MOV     A,R6
        MOV     ?V0,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     ?V0,#0x20
        MOV     ?V1,#-0x80
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     R1,#0x1
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     A,R1
//  531 
//  532 #if defined( LCD_SUPPORTED )
//  533   HalLcdWriteString( "End Device Bind", HAL_LCD_LINE_1 );
//  534   if ( Status == ZDP_SUCCESS )
//  535   {
//  536     HalLcdWriteString( "Success Sent", HAL_LCD_LINE_2 );
//  537   }
//  538   else
//  539   {
//  540     HalLcdWriteString( "Timeout", HAL_LCD_LINE_2 );
//  541   }
//  542 #endif
//  543 
//  544 }
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
          CFI EndBlock cfiBlock6
//  545 #endif // REFLECTOR
//  546 
//  547 #if ( ZG_BUILD_COORDINATOR_TYPE )
//  548 /*********************************************************************
//  549  * @fn          ZDO_CompareClusterLists
//  550  *
//  551  * @brief       Compare one list to another list
//  552  *
//  553  * @param       numList1 - number of items in list 1
//  554  * @param       list1 - first list of cluster IDs
//  555  * @param       numList2 - number of items in list 2
//  556  * @param       list2 - second list of cluster IDs
//  557  * @param       pMatches - buffer to put matches
//  558  *
//  559  * @return      number of matches
//  560  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  561 static byte ZDO_CompareClusterLists( byte numList1, uint16 *list1,
ZDO_CompareClusterLists:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function ZDO_CompareClusterLists
        CODE
//  562                           byte numList2, uint16 *list2, uint16 *pMatches )
//  563 {
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     ?V3,R1
        MOV     ?V4,R4
//  564   byte x, y;
//  565   uint16 z;
//  566   byte numMatches = 0;
        MOV     ?V1,#0x0
//  567 
//  568   // Check the first in against the seconds out
//  569   for ( x = 0; x < numList1; x++ )
        MOV     ?V0,#0x0
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        MOV     R4,A
        MOV     A,R1
        MOV     R5,A
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        LJMP    ??ZDO_CompareClusterLists_0 & 0xFFFF
//  570   {
//  571     for ( y = 0; y < numList2; y++ )
//  572     {
//  573       z = list2[y];
??ZDO_CompareClusterLists_1:
        MOV     R0,?V2
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0x2
        MUL     AB
        XCH     A,R0
        MOV     ?V5,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,?V5
        MOV     ?V5,A
        MOV     B,#0x2
        MOV     A,R1
        MUL     AB
        ADD     A,?V5
        MOV     R1,A
        MOV     A,R4
        ADD     A,R0
        MOV     DPL,A
        MOV     A,R5
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V7,A
//  574       if ( list1[x] == z )
        MOV     R0,?V0
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0x2
        MUL     AB
        XCH     A,R0
        MOV     ?V5,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,?V5
        MOV     ?V5,A
        MOV     B,#0x2
        MOV     A,R1
        MUL     AB
        ADD     A,?V5
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,?V6
        JNZ     ??ZDO_CompareClusterLists_2
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V7
??ZDO_CompareClusterLists_2:
        JNZ     ??ZDO_CompareClusterLists_3
//  575       {
//  576         pMatches[numMatches++] = z;
        MOV     R0,?V1
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0x2
        MUL     AB
        XCH     A,R0
        MOV     ?V5,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,?V5
        MOV     ?V5,A
        MOV     B,#0x2
        MOV     A,R1
        MUL     AB
        ADD     A,?V5
        MOV     R1,A
        MOV     A,R6
        ADD     A,R0
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,R1
        MOV     DPH,A
        MOV     A,?V6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V7
        MOVX    @DPTR,A
        INC     ?V1
//  577       }
//  578     }
??ZDO_CompareClusterLists_3:
        INC     ?V2
??ZDO_CompareClusterLists_4:
        MOV     A,?V2
        CLR     C
        SUBB    A,?V4
        JNC     $+5
        LJMP    ??ZDO_CompareClusterLists_1 & 0xFFFF
        INC     ?V0
??ZDO_CompareClusterLists_0:
        MOV     A,?V0
        CLR     C
        SUBB    A,?V3
        JNC     ??ZDO_CompareClusterLists_5
        MOV     ?V2,#0x0
        SJMP    ??ZDO_CompareClusterLists_4
//  579   }
//  580 
//  581   return ( numMatches );
??ZDO_CompareClusterLists_5:
        MOV     R1,?V1
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
//  582 }
          CFI EndBlock cfiBlock7
//  583 #endif // ZG_BUILD_COORDINATOR_TYPE
//  584 
//  585 /*********************************************************************
//  586  * Utility functions
//  587  */
//  588 
//  589 /*********************************************************************
//  590  * @fn          ZDO_CompareByteLists
//  591  *
//  592  * @brief       Compares two lists for matches.
//  593  *
//  594  * @param       ACnt  - number of entries in list A
//  595  * @param       AList  - List A
//  596  * @param       BCnt  - number of entries in list B
//  597  * @param       BList  - List B
//  598  *
//  599  * @return      true if a match is found
//  600  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  601 byte ZDO_AnyClusterMatches( byte ACnt, uint16 *AList, byte BCnt, uint16 *BList )
ZDO_AnyClusterMatches:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function ZDO_AnyClusterMatches
        CODE
//  602 {
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        MOV     A,#-0xd
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 13)
        ; Saved register size: 13
        ; Auto size: 0
        MOV     ?V4,R1
        MOV     ?V2,R4
//  603   byte x, y;
//  604 
//  605   for ( x = 0; x < ACnt; x++ )
        MOV     ?V0,#0x0
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        MOV     R4,A
        MOV     A,R1
        MOV     R5,A
        SJMP    ??ZDO_AnyClusterMatches_0
??ZDO_AnyClusterMatches_1:
        INC     ?V0
??ZDO_AnyClusterMatches_0:
        MOV     A,?V0
        CLR     C
        SUBB    A,?V4
        JNC     ??ZDO_AnyClusterMatches_2
//  606   {
//  607     for ( y = 0; y < BCnt; y++ )
        MOV     ?V1,#0x0
        SJMP    ??ZDO_AnyClusterMatches_3
??ZDO_AnyClusterMatches_4:
        INC     ?V1
??ZDO_AnyClusterMatches_3:
        MOV     A,?V1
        CLR     C
        SUBB    A,?V2
        JNC     ??ZDO_AnyClusterMatches_1
//  608     {
//  609       if ( AList[x] == BList[y] )
        MOV     R0,?V0
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0x2
        MUL     AB
        XCH     A,R0
        MOV     R6,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R6
        MOV     R6,A
        MOV     B,#0x2
        MOV     A,R1
        MUL     AB
        ADD     A,R6
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        MOV     R0,?V1
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0x2
        MUL     AB
        XCH     A,R0
        MOV     ?V3,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,?V3
        MOV     ?V3,A
        MOV     B,#0x2
        MOV     A,R1
        MUL     AB
        ADD     A,?V3
        MOV     R1,A
        MOV     A,R4
        ADD     A,R0
        MOV     DPL,A
        MOV     A,R5
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,R6
        JNZ     ??ZDO_AnyClusterMatches_5
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R7
??ZDO_AnyClusterMatches_5:
        JNZ     ??ZDO_AnyClusterMatches_4
//  610       {
//  611         return true;
        MOV     R1,#0x1
        SJMP    ??ZDO_AnyClusterMatches_6
//  612       }
//  613     }
//  614   }
//  615 
//  616   return false;
??ZDO_AnyClusterMatches_2:
        MOV     R1,#0x0
??ZDO_AnyClusterMatches_6:
        MOV     R7,#0x5
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
//  617 }
          CFI EndBlock cfiBlock8
//  618 
//  619 /*********************************************************************
//  620  * Callback functions from ZDProfile
//  621  */
//  622 
//  623 /*********************************************************************
//  624  * @fn          ZDO_ProcessNodeDescReq
//  625  *
//  626  * @brief       This function processes and responds to the
//  627  *              Node_Desc_req message.
//  628  *
//  629  * @param       inMsg - incoming message
//  630  *
//  631  * @return      none
//  632  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  633 void ZDO_ProcessNodeDescReq( zdoIncomingMsg_t *inMsg )
ZDO_ProcessNodeDescReq:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function ZDO_ProcessNodeDescReq
        CODE
//  634 {
        FUNCALL ZDO_ProcessNodeDescReq, ZDP_NodeDescMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessNodeDescReq, ZDP_GenericRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  635   uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
        MOV     A,R6
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R3,#0x0
        MOV     A,R6
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     R4,A
        MOV     A,R3
        ADDC    A,R1
        MOV     R5,A
//  636   NodeDescriptorFormat_t *desc = NULL;
        MOV     ?V0,#0x0
        MOV     ?V1,#0x0
//  637 
//  638   if ( aoi == ZDAppNwkAddr.addr.shortAddr )
        MOV     DPTR,#ZDAppNwkAddr
        MOVX    A,@DPTR
        XRL     A,R4
        JNZ     ??ZDO_ProcessNodeDescReq_0
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R5
??ZDO_ProcessNodeDescReq_0:
        JNZ     ??ZDO_ProcessNodeDescReq_1
//  639   {
//  640     desc = &ZDO_Config_Node_Descriptor;
        MOV     ?V0,#ZDO_Config_Node_Descriptor & 0xff
        MOV     ?V1,#(ZDO_Config_Node_Descriptor >> 8) & 0xff
//  641   }
//  642 
//  643   if ( desc != NULL )
??ZDO_ProcessNodeDescReq_1:
        MOV     A,?V0
        ORL     A,?V1
        JZ      ??ZDO_ProcessNodeDescReq_2
//  644   {
//  645     ZDP_NodeDescMsg( inMsg, aoi, desc );
        ; Setup parameters for call to function ZDP_NodeDescMsg
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??ZDP_NodeDescMsg::?relay`; Banked call to: ZDP_NodeDescMsg
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     A,R1
        SJMP    ??ZDO_ProcessNodeDescReq_3
//  646   }
//  647   else
//  648   {
//  649     ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr),
//  650               ZDP_INVALID_REQTYPE, aoi, Node_Desc_rsp, inMsg->SecurityUse );
??ZDO_ProcessNodeDescReq_2:
        ; Setup parameters for call to function ZDP_GenericRsp
        MOV     ?V0,#0x2
        MOV     ?V1,#-0x80
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0,R4
        MOV     ?V1,R5
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R6
        ADD     A,#0xe
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     R4,#-0x80
        MOV     A,R6
        ADD     A,#0x2
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        MOV     A,R6
        ADD     A,#0xf
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     A,R1
//  651   }
//  652 }
??ZDO_ProcessNodeDescReq_3:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
          CFI EndBlock cfiBlock9
//  653 
//  654 /*********************************************************************
//  655  * @fn          ZDO_ProcessPowerDescReq
//  656  *
//  657  * @brief       This function processes and responds to the
//  658  *              Node_Power_req message.
//  659  *
//  660  * @param       inMsg  - incoming request
//  661  *
//  662  * @return      none
//  663  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  664 void ZDO_ProcessPowerDescReq( zdoIncomingMsg_t *inMsg )
ZDO_ProcessPowerDescReq:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI Function ZDO_ProcessPowerDescReq
        CODE
//  665 {
        FUNCALL ZDO_ProcessPowerDescReq, ZDP_PowerDescMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessPowerDescReq, ZDP_GenericRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  666   uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
        MOV     A,R6
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R3,#0x0
        MOV     A,R6
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     R4,A
        MOV     A,R3
        ADDC    A,R1
        MOV     R5,A
//  667   NodePowerDescriptorFormat_t *desc = NULL;
        MOV     ?V0,#0x0
        MOV     ?V1,#0x0
//  668 
//  669   if ( aoi == ZDAppNwkAddr.addr.shortAddr )
        MOV     DPTR,#ZDAppNwkAddr
        MOVX    A,@DPTR
        XRL     A,R4
        JNZ     ??ZDO_ProcessPowerDescReq_0
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R5
??ZDO_ProcessPowerDescReq_0:
        JNZ     ??ZDO_ProcessPowerDescReq_1
//  670   {
//  671     desc = &ZDO_Config_Power_Descriptor;
        MOV     ?V0,#ZDO_Config_Power_Descriptor & 0xff
        MOV     ?V1,#(ZDO_Config_Power_Descriptor >> 8) & 0xff
//  672   }
//  673 
//  674   if ( desc != NULL )
??ZDO_ProcessPowerDescReq_1:
        MOV     A,?V0
        ORL     A,?V1
        JZ      ??ZDO_ProcessPowerDescReq_2
//  675   {
//  676     ZDP_PowerDescMsg( inMsg, aoi, desc );
        ; Setup parameters for call to function ZDP_PowerDescMsg
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??ZDP_PowerDescMsg::?relay`; Banked call to: ZDP_PowerDescMsg
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     A,R1
        SJMP    ??ZDO_ProcessPowerDescReq_3
//  677   }
//  678   else
//  679   {
//  680     ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr),
//  681               ZDP_INVALID_REQTYPE, aoi, Power_Desc_rsp, inMsg->SecurityUse );
??ZDO_ProcessPowerDescReq_2:
        ; Setup parameters for call to function ZDP_GenericRsp
        MOV     ?V0,#0x3
        MOV     ?V1,#-0x80
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0,R4
        MOV     ?V1,R5
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R6
        ADD     A,#0xe
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     R4,#-0x80
        MOV     A,R6
        ADD     A,#0x2
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        MOV     A,R6
        ADD     A,#0xf
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     A,R1
//  682   }
//  683 }
??ZDO_ProcessPowerDescReq_3:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
          CFI EndBlock cfiBlock10
//  684 
//  685 /*********************************************************************
//  686  * @fn          ZDO_ProcessSimpleDescReq
//  687  *
//  688  * @brief       This function processes and responds to the
//  689  *              Simple_Desc_req message.
//  690  *
//  691  * @param       inMsg - incoming message (request)
//  692  *
//  693  * @return      none
//  694  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  695 void ZDO_ProcessSimpleDescReq( zdoIncomingMsg_t *inMsg )
ZDO_ProcessSimpleDescReq:
          CFI Block cfiBlock11 Using cfiCommon0
          CFI Function ZDO_ProcessSimpleDescReq
        CODE
//  696 {
        FUNCALL ZDO_ProcessSimpleDescReq, afFindSimpleDesc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessSimpleDescReq, ZDP_SimpleDescMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessSimpleDescReq, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  697   SimpleDescriptionFormat_t *sDesc = NULL;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
//  698   uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
        MOV     A,R6
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R3,#0x0
        MOV     A,R6
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     R2,A
        MOV     A,R3
        ADDC    A,R1
        MOV     R3,A
//  699   byte endPoint = inMsg->asdu[2];
        MOV     A,R6
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
//  700   byte free = false;
        MOV     ?V1,#0x0
//  701   byte stat = ZDP_SUCCESS;
        MOV     ?V0,#0x0
//  702 
//  703   if ( (endPoint == ZDO_EP) || (endPoint > MAX_ENDPOINTS) )
        MOV     A,R1
        JZ      ??ZDO_ProcessSimpleDescReq_0
        MOV     A,#-0x1
        XRL     A,R1
        JNZ     ??ZDO_ProcessSimpleDescReq_1
//  704   {
//  705     stat = ZDP_INVALID_EP;
??ZDO_ProcessSimpleDescReq_0:
        MOV     ?V0,#-0x7e
        SJMP    ??ZDO_ProcessSimpleDescReq_2
//  706   }
//  707   else if ( aoi == ZDAppNwkAddr.addr.shortAddr )
??ZDO_ProcessSimpleDescReq_1:
        MOV     DPTR,#ZDAppNwkAddr
        MOVX    A,@DPTR
        XRL     A,R2
        JNZ     ??ZDO_ProcessSimpleDescReq_3
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R3
??ZDO_ProcessSimpleDescReq_3:
        JNZ     ??ZDO_ProcessSimpleDescReq_4
//  708   {
//  709     free = afFindSimpleDesc( &sDesc, endPoint );
        ; Setup parameters for call to function afFindSimpleDesc
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??afFindSimpleDesc::?relay`; Banked call to: afFindSimpleDesc
        MOV     A,R1
        MOV     ?V1,A
//  710     if ( sDesc == NULL )
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??ZDO_ProcessSimpleDescReq_2
//  711     {
//  712       stat = ZDP_NOT_ACTIVE;
        MOV     ?V0,#-0x7d
        SJMP    ??ZDO_ProcessSimpleDescReq_2
//  713     }
//  714   }
//  715   else
//  716   {
//  717     if ( ZSTACK_ROUTER_BUILD )
??ZDO_ProcessSimpleDescReq_4:
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        JZ      ??ZDO_ProcessSimpleDescReq_5
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDO_ProcessSimpleDescReq_6
//  718     {
//  719       stat = ZDP_DEVICE_NOT_FOUND;
??ZDO_ProcessSimpleDescReq_5:
        MOV     ?V0,#-0x7f
        SJMP    ??ZDO_ProcessSimpleDescReq_2
//  720     }
//  721     else if ( ZSTACK_END_DEVICE_BUILD )
??ZDO_ProcessSimpleDescReq_6:
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??ZDO_ProcessSimpleDescReq_2
//  722     {
//  723       stat = ZDP_INVALID_REQTYPE;
        MOV     ?V0,#-0x80
//  724     }
//  725   }
//  726 
//  727   ZDP_SimpleDescMsg( inMsg, stat, sDesc );
??ZDO_ProcessSimpleDescReq_2:
        ; Setup parameters for call to function ZDP_SimpleDescMsg
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     R1,?V0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??ZDP_SimpleDescMsg::?relay`; Banked call to: ZDP_SimpleDescMsg
        MOV     A,R1
//  728 
//  729   if ( free && sDesc )
        MOV     A,?V1
        JZ      ??ZDO_ProcessSimpleDescReq_7
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??ZDO_ProcessSimpleDescReq_7
//  730   {
//  731     osal_mem_free( sDesc );
        ; Setup parameters for call to function osal_mem_free
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  732   }
//  733 }
??ZDO_ProcessSimpleDescReq_7:
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
          CFI EndBlock cfiBlock11
//  734 
//  735 /*********************************************************************
//  736  * @fn          ZDO_ProcessActiveEPReq
//  737  *
//  738  * @brief       This function processes and responds to the
//  739  *              Active_EP_req message.
//  740  *
//  741  * @param       inMsg  - incoming message (request)
//  742  *
//  743  * @return      none
//  744  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  745 void ZDO_ProcessActiveEPReq( zdoIncomingMsg_t *inMsg )
ZDO_ProcessActiveEPReq:
          CFI Block cfiBlock12 Using cfiCommon0
          CFI Function ZDO_ProcessActiveEPReq
        CODE
//  746 {
        FUNCALL ZDO_ProcessActiveEPReq, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessActiveEPReq, afNumEndPoints
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessActiveEPReq, afEndPoints
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessActiveEPReq, ZDP_EPRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  747   byte cnt = 0;
        MOV     ?V0,#0x0
//  748   uint16 aoi;
//  749   byte stat = ZDP_SUCCESS;
        MOV     ?V1,#0x0
//  750 
//  751   aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
        MOV     A,R6
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R3,#0x0
        MOV     A,R6
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     ?V2,A
        MOV     A,R3
        ADDC    A,R1
        MOV     ?V3,A
//  752 
//  753   if ( aoi == NLME_GetShortAddr() )
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     A,?V4
        XRL     A,?V2
        JNZ     ??ZDO_ProcessActiveEPReq_0
        MOV     A,?V5
        XRL     A,?V3
??ZDO_ProcessActiveEPReq_0:
        JNZ     ??ZDO_ProcessActiveEPReq_1
//  754   {
//  755     cnt = afNumEndPoints() - 1;  // -1 for ZDO endpoint descriptor
        ; Setup parameters for call to function afNumEndPoints
        LCALL   `??afNumEndPoints::?relay`; Banked call to: afNumEndPoints
        MOV     A,R1
        ADD     A,#-0x1
        MOV     ?V0,A
//  756     afEndPoints( (uint8 *)ZDOBuildBuf, true );
        ; Setup parameters for call to function afEndPoints
        MOV     R1,#0x1
        MOV     R2,#ZDOBuildBuf & 0xff
        MOV     R3,#(ZDOBuildBuf >> 8) & 0xff
        LCALL   `??afEndPoints::?relay`; Banked call to: afEndPoints
        SJMP    ??ZDO_ProcessActiveEPReq_2
//  757   }
//  758   else
//  759   {
//  760     stat = ZDP_INVALID_REQTYPE;
??ZDO_ProcessActiveEPReq_1:
        MOV     ?V1,#-0x80
//  761   }
//  762 
//  763   ZDP_ActiveEPRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat,
//  764                   aoi, cnt, (uint8 *)ZDOBuildBuf, inMsg->SecurityUse );
??ZDO_ProcessActiveEPReq_2:
        ; Setup parameters for call to function ZDP_EPRsp
        MOV     A,R6
        ADD     A,#0xe
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V4,A
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     ?V4,#ZDOBuildBuf & 0xff
        MOV     ?V5,#(ZDOBuildBuf >> 8) & 0xff
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     A,?V0
        MOV     ?V0,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     A,?V1
        MOV     ?V0,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 21)
        MOV     A,R6
        ADD     A,#0x2
        MOV     R4,A
        CLR     A
        ADDC    A,R7
        MOV     R5,A
        MOV     A,R6
        ADD     A,#0xf
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     R2,#0x5
        MOV     R3,#-0x80
        LCALL   `??ZDP_EPRsp::?relay`; Banked call to: ZDP_EPRsp
        MOV     A,#0x7
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R1
//  765 }
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
          CFI EndBlock cfiBlock12
//  766 
//  767 /*********************************************************************
//  768  * @fn          ZDO_ConvertOTAClusters
//  769  *
//  770  * @brief       This function will convert the over-the-air cluster list
//  771  *              format to an internal format.
//  772  *
//  773  * @param       inMsg  - incoming message (request)
//  774  *
//  775  * @return      pointer to incremented inBuf
//  776  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  777 uint8 *ZDO_ConvertOTAClusters( uint8 cnt, uint8 *inBuf, uint16 *outList )
ZDO_ConvertOTAClusters:
          CFI Block cfiBlock13 Using cfiCommon0
          CFI Function ZDO_ConvertOTAClusters
        CODE
//  778 {
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
        MOV     ?V1,R1
//  779   uint8 x;
//  780 
//  781   for ( x = 0; x < cnt; x++ )
        MOV     ?V0,#0x0
        SJMP    ??ZDO_ConvertOTAClusters_0
//  782   {
//  783     // convert ota format to internal
//  784     outList[x] = BUILD_UINT16( inBuf[0], inBuf[1] );
??ZDO_ConvertOTAClusters_1:
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R6,A
        MOV     R7,#0x0
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R6
        ADD     A,R0
        MOV     R6,A
        MOV     A,R7
        ADDC    A,R1
        MOV     R7,A
        MOV     R0,?V0
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0x2
        MUL     AB
        XCH     A,R0
        MOV     ?V2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,?V2
        MOV     ?V2,A
        MOV     B,#0x2
        MOV     A,R1
        MUL     AB
        ADD     A,?V2
        MOV     R1,A
        MOV     A,R4
        ADD     A,R0
        MOV     DPL,A
        MOV     A,R5
        ADDC    A,R1
        MOV     DPH,A
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
//  785     inBuf += sizeof( uint16 );
        MOV     A,R2
        ADD     A,#0x2
        MOV     R2,A
        JNC     ??ZDO_ConvertOTAClusters_2
        INC     R3
//  786   }
??ZDO_ConvertOTAClusters_2:
        INC     ?V0
??ZDO_ConvertOTAClusters_0:
        MOV     A,?V0
        CLR     C
        SUBB    A,?V1
        JC      ??ZDO_ConvertOTAClusters_1
//  787   return ( inBuf );
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
//  788 }
          CFI EndBlock cfiBlock13
//  789 
//  790 /*********************************************************************
//  791  * @fn          ZDO_ProcessMatchDescReq
//  792  *
//  793  * @brief       This function processes and responds to the
//  794  *              Match_Desc_req message.
//  795  *
//  796  * @param       inMsg  - incoming message (request)
//  797  *
//  798  * @return      none
//  799  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  800 void ZDO_ProcessMatchDescReq( zdoIncomingMsg_t *inMsg )
ZDO_ProcessMatchDescReq:
          CFI Block cfiBlock14 Using cfiCommon0
          CFI Function ZDO_ProcessMatchDescReq
        CODE
//  801 {
        FUNCALL ZDO_ProcessMatchDescReq, NLME_IsAddressBroadcast
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessMatchDescReq, ZDP_EPRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessMatchDescReq, NLME_IsAddressBroadcast
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessMatchDescReq, ZDP_EPRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessMatchDescReq, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessMatchDescReq, ZDO_ConvertOTAClusters
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessMatchDescReq, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessMatchDescReq, ZDO_ConvertOTAClusters
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessMatchDescReq, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessMatchDescReq, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessMatchDescReq, ZDO_AnyClusterMatches
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessMatchDescReq, ZDO_AnyClusterMatches
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessMatchDescReq, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessMatchDescReq, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessMatchDescReq, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessMatchDescReq, ZDP_EPRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessMatchDescReq, NLME_IsAddressBroadcast
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessMatchDescReq, ZDP_EPRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessMatchDescReq, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessMatchDescReq, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V13
        REQUIRE ?V14
        REQUIRE ?V15
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 7
        MOV     A,#-0x7
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
        MOV     ?V12,R2
        MOV     ?V13,R3
//  802   uint8 epCnt = 0;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x0
        MOVX    @DPTR,A
//  803   uint8 numInClusters;
//  804   uint16 *inClusters = NULL;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
//  805   uint8 numOutClusters;
//  806   uint16 *outClusters = NULL;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
//  807   epList_t *epDesc;
//  808   SimpleDescriptionFormat_t *sDesc = NULL;
        MOV     ?V10,#0x0
        MOV     ?V11,#0x0
//  809   uint8 allocated;
//  810   uint8 *msg;
//  811   uint16 aoi;
//  812   uint16 profileID;
//  813 
//  814   // Parse the incoming message
//  815   msg = inMsg->asdu;
        MOV     A,?V12
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,?V13
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V3,A
//  816   aoi = BUILD_UINT16( msg[0], msg[1] );
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R3,#0x0
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     R6,A
        MOV     A,R3
        ADDC    A,R1
        MOV     R7,A
//  817   profileID = BUILD_UINT16( msg[2], msg[3] );
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R3,#0x0
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     ?V0,A
        MOV     A,R3
        ADDC    A,R1
        MOV     ?V1,A
//  818   msg += 4;
        MOV     A,?V2
        ADD     A,#0x4
        MOV     ?V2,A
        JNC     ??ZDO_ProcessMatchDescReq_0
        INC     ?V3
//  819 
//  820   if ( ADDR_BCAST_NOT_ME == NLME_IsAddressBroadcast(aoi) )
??ZDO_ProcessMatchDescReq_0:
        ; Setup parameters for call to function NLME_IsAddressBroadcast
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??NLME_IsAddressBroadcast::?relay`; Banked call to: NLME_IsAddressBroadcast
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??ZDO_ProcessMatchDescReq_1
//  821   {
//  822     ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_INVALID_REQTYPE,
//  823                           ZDAppNwkAddr.addr.shortAddr, 0, NULL, inMsg->SecurityUse );
        ; Setup parameters for call to function ZDP_EPRsp
        MOV     A,?V12
        ADD     A,#0xe
        MOV     DPL,A
        CLR     A
        ADDC    A,?V13
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 32)
        CLR     A
        MOV     ?V0,A
        MOV     ?V1,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV     ?V0,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 35)
        MOV     DPTR,#ZDAppNwkAddr
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 37)
        MOV     ?V0,#-0x80
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 38)
        MOV     A,?V12
        ADD     A,#0x2
        MOV     R4,A
        CLR     A
        ADDC    A,?V13
        MOV     R5,A
        MOV     A,?V12
        ADD     A,#0xf
        MOV     DPL,A
        CLR     A
        ADDC    A,?V13
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     R2,#0x6
        MOV     R3,#-0x80
        LCALL   `??ZDP_EPRsp::?relay`; Banked call to: ZDP_EPRsp
        MOV     A,#0x7
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
        MOV     A,R1
//  824     return;
        LJMP    ??ZDO_ProcessMatchDescReq_2 & 0xFFFF
//  825   }
//  826   else if ( (ADDR_NOT_BCAST == NLME_IsAddressBroadcast(aoi)) && (aoi != ZDAppNwkAddr.addr.shortAddr) )
??ZDO_ProcessMatchDescReq_1:
        ; Setup parameters for call to function NLME_IsAddressBroadcast
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??NLME_IsAddressBroadcast::?relay`; Banked call to: NLME_IsAddressBroadcast
        MOV     A,R1
        JNZ     ??ZDO_ProcessMatchDescReq_3
        MOV     DPTR,#ZDAppNwkAddr
        MOVX    A,@DPTR
        XRL     A,R6
        JNZ     ??ZDO_ProcessMatchDescReq_4
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R7
??ZDO_ProcessMatchDescReq_4:
        JZ      ??ZDO_ProcessMatchDescReq_3
//  827   {
//  828     ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_INVALID_REQTYPE,
//  829                              ZDAppNwkAddr.addr.shortAddr, 0, NULL, inMsg->SecurityUse );
        ; Setup parameters for call to function ZDP_EPRsp
        MOV     A,?V12
        ADD     A,#0xe
        MOV     DPL,A
        CLR     A
        ADDC    A,?V13
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 32)
        CLR     A
        MOV     ?V0,A
        MOV     ?V1,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV     ?V0,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 35)
        MOV     DPTR,#ZDAppNwkAddr
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 37)
        MOV     ?V0,#-0x80
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 38)
        MOV     A,?V12
        ADD     A,#0x2
        MOV     R4,A
        CLR     A
        ADDC    A,?V13
        MOV     R5,A
        MOV     A,?V12
        ADD     A,#0xf
        MOV     DPL,A
        CLR     A
        ADDC    A,?V13
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     R2,#0x6
        MOV     R3,#-0x80
        LCALL   `??ZDP_EPRsp::?relay`; Banked call to: ZDP_EPRsp
        MOV     A,#0x7
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
        MOV     A,R1
//  830     return;
        LJMP    ??ZDO_ProcessMatchDescReq_2 & 0xFFFF
//  831   }
//  832 
//  833   if ((numInClusters = *msg++) &&
//  834       (inClusters = (uint16*)osal_mem_alloc( numInClusters * sizeof( uint16 ) )))
??ZDO_ProcessMatchDescReq_3:
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOVX    A,@DPTR
        MOV     ?V8,A
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        MOV     ?V2,DPL
        MOV     ?V3,DPH
        MOV     A,?V8
        JZ      ??ZDO_ProcessMatchDescReq_5
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,?V8
        MOV     R3,#0x0
        MOV     A,R2
        MOV     B,#0x2
        MUL     AB
        XCH     A,R2
        MOV     R0,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R0
        MOV     R0,A
        MOV     B,#0x2
        MOV     A,R3
        MUL     AB
        ADD     A,R0
        MOV     R3,A
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??ZDO_ProcessMatchDescReq_5
//  835   {
//  836     msg = ZDO_ConvertOTAClusters( numInClusters, msg, inClusters );
        ; Setup parameters for call to function ZDO_ConvertOTAClusters
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     R2,?V2
        MOV     R3,?V3
        MOV     R1,?V8
        LCALL   `??ZDO_ConvertOTAClusters::?relay`; Banked call to: ZDO_ConvertOTAClusters
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     ?V2,?V4
        MOV     ?V3,?V5
        SJMP    ??ZDO_ProcessMatchDescReq_6
//  837   }
//  838   else
//  839   {
//  840     numInClusters = 0;
??ZDO_ProcessMatchDescReq_5:
        MOV     ?V8,#0x0
//  841   }
//  842 
//  843   if ((numOutClusters = *msg++) &&
//  844       (outClusters = (uint16 *)osal_mem_alloc( numOutClusters * sizeof( uint16 ) )))
??ZDO_ProcessMatchDescReq_6:
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOVX    A,@DPTR
        MOV     ?V7,A
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        MOV     ?V2,DPL
        MOV     ?V3,DPH
        MOV     A,?V7
        JZ      ??ZDO_ProcessMatchDescReq_7
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,?V7
        MOV     R3,#0x0
        MOV     A,R2
        MOV     B,#0x2
        MUL     AB
        XCH     A,R2
        MOV     R0,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R0
        MOV     R0,A
        MOV     B,#0x2
        MOV     A,R3
        MUL     AB
        ADD     A,R0
        MOV     R3,A
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??ZDO_ProcessMatchDescReq_7
//  845   {
//  846     msg = ZDO_ConvertOTAClusters( numOutClusters, msg, outClusters );
        ; Setup parameters for call to function ZDO_ConvertOTAClusters
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     R2,?V2
        MOV     R3,?V3
        MOV     R1,?V7
        LCALL   `??ZDO_ConvertOTAClusters::?relay`; Banked call to: ZDO_ConvertOTAClusters
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     ?V2,?V4
        MOV     ?V3,?V5
        SJMP    ??ZDO_ProcessMatchDescReq_8
//  847   }
//  848   else
//  849   {
//  850     numOutClusters = 0;
??ZDO_ProcessMatchDescReq_7:
        MOV     ?V7,#0x0
//  851   }
//  852 
//  853   // First count the number of endpoints that match.
//  854   epDesc = epList;
??ZDO_ProcessMatchDescReq_8:
        MOV     DPTR,#epList
        MOVX    A,@DPTR
        MOV     ?V14,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V15,A
        SJMP    ??ZDO_ProcessMatchDescReq_9
//  855   while ( epDesc )
//  856   {
//  857     // Don't search endpoint 0 and check if response is allowed
//  858     if ( epDesc->epDesc->endPoint != ZDO_EP && (epDesc->flags&eEP_AllowMatch) )
//  859     {
//  860       if ( epDesc->pfnDescCB )
//  861       {
//  862         sDesc = (SimpleDescriptionFormat_t *)epDesc->pfnDescCB( AF_DESCRIPTOR_SIMPLE, epDesc->epDesc->endPoint );
//  863         allocated = TRUE;
//  864       }
//  865       else
//  866       {
//  867         sDesc = epDesc->epDesc->simpleDesc;
//  868         allocated = FALSE;
//  869       }
//  870 
//  871       // Allow specific ProfileId or Wildcard ProfileID
//  872       if ( sDesc && ( ( sDesc->AppProfId == profileID ) || ( profileID == ZDO_WILDCARD_PROFILE_ID ) ) )
//  873       {
//  874         uint8 *uint8Buf = (uint8 *)ZDOBuildBuf;
//  875 
//  876         // Are there matching input clusters?
//  877         if ((ZDO_AnyClusterMatches( numInClusters, inClusters,
//  878                    sDesc->AppNumInClusters, sDesc->pAppInClusterList )) ||
//  879             // Are there matching output clusters?
//  880             (ZDO_AnyClusterMatches( numOutClusters, outClusters,
//  881                    sDesc->AppNumOutClusters, sDesc->pAppOutClusterList )))
//  882         {
//  883           // Notify the endpoint of the match.
//  884           uint8 bufLen = sizeof( ZDO_MatchDescRspSent_t ) + (numOutClusters + numInClusters) * sizeof(uint16);
//  885           ZDO_MatchDescRspSent_t *pRspSent = (ZDO_MatchDescRspSent_t *) osal_msg_allocate( bufLen );
//  886 
//  887           if (pRspSent)
//  888           {
//  889             pRspSent->hdr.event = ZDO_MATCH_DESC_RSP_SENT;
//  890             pRspSent->nwkAddr = inMsg->srcAddr.addr.shortAddr;
//  891             pRspSent->numInClusters = numInClusters;
//  892             pRspSent->numOutClusters = numOutClusters;
//  893 
//  894             if (numInClusters)
//  895             {
//  896               pRspSent->pInClusters = (uint16*) (pRspSent + 1);
//  897               osal_memcpy(pRspSent->pInClusters, inClusters, numInClusters * sizeof(uint16));
//  898             }
//  899             else
//  900             {
//  901               pRspSent->pInClusters = NULL;
//  902             }
//  903 
//  904             if (numOutClusters)
//  905             {
//  906               pRspSent->pOutClusters = (uint16*)(pRspSent + 1) + numInClusters;
//  907               osal_memcpy(pRspSent->pOutClusters, outClusters, numOutClusters * sizeof(uint16));
//  908             }
//  909             else
//  910             {
//  911               pRspSent->pOutClusters = NULL;
??ZDO_ProcessMatchDescReq_10:
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
//  912             }
//  913 
//  914             osal_msg_send( *epDesc->epDesc->task_id, (uint8 *)pRspSent );
??ZDO_ProcessMatchDescReq_11:
        ; Setup parameters for call to function osal_msg_send
        MOV     R2,?V2
        MOV     R3,?V3
        MOV     DPL,?V14
        MOV     DPH,?V15
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
        MOV     A,R1
//  915           }
//  916 
//  917           uint8Buf[epCnt++] = sDesc->EndPoint;
??ZDO_ProcessMatchDescReq_12:
        MOV     DPL,?V10
        MOV     DPH,?V11
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     DPL,R2
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOVX    @DPTR,A
//  918         }
//  919       }
//  920 
//  921       if ( allocated )
??ZDO_ProcessMatchDescReq_13:
        MOV     A,?V9
        JZ      ??ZDO_ProcessMatchDescReq_14
//  922       {
//  923         osal_mem_free( sDesc );
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V10
        MOV     R3,?V11
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  924       }
//  925     }
//  926     epDesc = epDesc->nextDesc;
??ZDO_ProcessMatchDescReq_14:
        MOV     DPL,?V14
        MOV     DPH,?V15
        MOVX    A,@DPTR
        MOV     ?V14,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V15,A
??ZDO_ProcessMatchDescReq_9:
        MOV     A,?V14
        ORL     A,?V15
        JNZ     $+5
        LJMP    ??ZDO_ProcessMatchDescReq_15 & 0xFFFF
        MOV     DPL,?V14
        MOV     DPH,?V15
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        JZ      ??ZDO_ProcessMatchDescReq_14
        MOV     DPL,?V14
        MOV     DPH,?V15
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        JNC     ??ZDO_ProcessMatchDescReq_14
        MOV     DPL,?V14
        MOV     DPH,?V15
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??ZDO_ProcessMatchDescReq_16
        ; Setup parameters for indirect call
        MOV     DPL,?V14
        MOV     DPH,?V15
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R1,#0x1
        MOV     DPL,?V14
        MOV     DPH,?V15
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        MOV     ?V2,R2
        MOV     ?V3,R3
        MOV     ?V10,?V2
        MOV     ?V11,?V3
        MOV     ?V9,#0x1
        SJMP    ??ZDO_ProcessMatchDescReq_17
??ZDO_ProcessMatchDescReq_16:
        MOV     DPL,?V14
        MOV     DPH,?V15
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V10,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V11,A
        MOV     ?V9,#0x0
??ZDO_ProcessMatchDescReq_17:
        MOV     A,?V10
        ORL     A,?V11
        JNZ     $+5
        LJMP    ??ZDO_ProcessMatchDescReq_13 & 0xFFFF
        MOV     DPL,?V10
        MOV     DPH,?V11
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V0
        JNZ     ??ZDO_ProcessMatchDescReq_18
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V1
??ZDO_ProcessMatchDescReq_18:
        JZ      ??ZDO_ProcessMatchDescReq_19
        MOV     A,#-0x1
        XRL     A,?V0
        JNZ     ??ZDO_ProcessMatchDescReq_20
        MOV     A,#-0x1
        XRL     A,?V1
??ZDO_ProcessMatchDescReq_20:
        JZ      $+5
        LJMP    ??ZDO_ProcessMatchDescReq_13 & 0xFFFF
??ZDO_ProcessMatchDescReq_19:
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#ZDOBuildBuf & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(ZDOBuildBuf >> 8) & 0xff
        MOVX    @DPTR,A
        ; Setup parameters for call to function ZDO_AnyClusterMatches
        MOV     DPL,?V10
        MOV     DPH,?V11
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 33)
        MOV     DPL,?V10
        MOV     DPH,?V11
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     R1,?V8
        LCALL   `??ZDO_AnyClusterMatches::?relay`; Banked call to: ZDO_AnyClusterMatches
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
        MOV     A,R1
        JNZ     ??ZDO_ProcessMatchDescReq_21
        ; Setup parameters for call to function ZDO_AnyClusterMatches
        MOV     DPL,?V10
        MOV     DPH,?V11
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 33)
        MOV     DPL,?V10
        MOV     DPH,?V11
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     R1,?V7
        LCALL   `??ZDO_AnyClusterMatches::?relay`; Banked call to: ZDO_AnyClusterMatches
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
        MOV     A,R1
        JNZ     $+5
        LJMP    ??ZDO_ProcessMatchDescReq_13 & 0xFFFF
??ZDO_ProcessMatchDescReq_21:
        MOV     B,#0x2
        MOV     R2,?V7
        MOV     R3,#0x0
        MOV     R0,?V8
        MOV     R1,#0x0
        MOV     A,R2
        ADD     A,R0
        MOV     R0,A
        MOV     A,R3
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        MUL     AB
        ADD     A,#0xa
        MOV     R2,A
        ; Setup parameters for call to function osal_msg_allocate
        MOV     R3,#0x0
        LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     ?V2,?V4
        MOV     ?V3,?V5
        MOV     A,?V2
        ORL     A,?V3
        JNZ     $+5
        LJMP    ??ZDO_ProcessMatchDescReq_12 & 0xFFFF
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOV     A,#-0x2e
        MOVX    @DPTR,A
        MOV     DPL,?V12
        MOV     DPH,?V13
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        INC     DPTR
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     A,?V8
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,?V7
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,?V8
        JZ      ??ZDO_ProcessMatchDescReq_22
        MOV     A,?V2
        ADD     A,#0xa
        MOV     R0,A
        CLR     A
        ADDC    A,?V3
        MOV     R1,A
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        ; Setup parameters for call to function osal_memcpy
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V5,A
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 34)
        MOV     R4,?V8
        MOV     R5,#0x0
        MOV     A,R4
        MOV     B,#0x2
        MUL     AB
        XCH     A,R4
        MOV     R0,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R0
        MOV     R0,A
        MOV     B,#0x2
        MOV     A,R5
        MUL     AB
        ADD     A,R0
        MOV     R5,A
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
        SJMP    ??ZDO_ProcessMatchDescReq_23
??ZDO_ProcessMatchDescReq_22:
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
??ZDO_ProcessMatchDescReq_23:
        MOV     A,?V7
        JNZ     $+5
        LJMP    ??ZDO_ProcessMatchDescReq_10 & 0xFFFF
        MOV     R0,?V8
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0x2
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0x2
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,?V2
        ADD     A,R0
        MOV     R0,A
        MOV     A,?V3
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0xa
        MOV     R0,A
        JNC     ??ZDO_ProcessMatchDescReq_24
        INC     R1
??ZDO_ProcessMatchDescReq_24:
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        ; Setup parameters for call to function osal_memcpy
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V5,A
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 34)
        MOV     R4,?V7
        MOV     R5,#0x0
        MOV     A,R4
        MOV     B,#0x2
        MUL     AB
        XCH     A,R4
        MOV     R0,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R0
        MOV     R0,A
        MOV     B,#0x2
        MOV     A,R5
        MUL     AB
        ADD     A,R0
        MOV     R5,A
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
        LJMP    ??ZDO_ProcessMatchDescReq_11 & 0xFFFF
//  927   }
//  928 
//  929   if ( epCnt )
??ZDO_ProcessMatchDescReq_15:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        JZ      ??ZDO_ProcessMatchDescReq_25
//  930   {
//  931     // Send the message if at least one match found.
//  932     if ( ZSuccess == ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_SUCCESS,
//  933               ZDAppNwkAddr.addr.shortAddr, epCnt, (uint8 *)ZDOBuildBuf, inMsg->SecurityUse ) )
        ; Setup parameters for call to function ZDP_EPRsp
        MOV     A,?V12
        ADD     A,#0xe
        MOV     DPL,A
        CLR     A
        ADDC    A,?V13
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 32)
        MOV     ?V0,#ZDOBuildBuf & 0xff
        MOV     ?V1,#(ZDOBuildBuf >> 8) & 0xff
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 35)
        MOV     DPTR,#ZDAppNwkAddr
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 37)
        MOV     ?V0,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 38)
        MOV     A,?V12
        ADD     A,#0x2
        MOV     R4,A
        CLR     A
        ADDC    A,?V13
        MOV     R5,A
        MOV     A,?V12
        ADD     A,#0xf
        MOV     DPL,A
        CLR     A
        ADDC    A,?V13
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     R2,#0x6
        MOV     R3,#-0x80
        LCALL   `??ZDP_EPRsp::?relay`; Banked call to: ZDP_EPRsp
        MOV     A,#0x7
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
        MOV     A,R1
        SJMP    ??ZDO_ProcessMatchDescReq_26
//  934     {
//  935 #if defined( LCD_SUPPORTED )
//  936       HalLcdWriteScreen( "Match Desc Req", "Rsp Sent" );
//  937 #endif
//  938     }
//  939   }
//  940   else
//  941   {
//  942     // No match found
//  943     if (ADDR_NOT_BCAST == NLME_IsAddressBroadcast(aoi))
??ZDO_ProcessMatchDescReq_25:
        ; Setup parameters for call to function NLME_IsAddressBroadcast
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??NLME_IsAddressBroadcast::?relay`; Banked call to: NLME_IsAddressBroadcast
        MOV     A,R1
        JNZ     ??ZDO_ProcessMatchDescReq_26
//  944     {
//  945       // send response message with match length = 0
//  946       ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_SUCCESS,
//  947                         ZDAppNwkAddr.addr.shortAddr, 0, (uint8 *)ZDOBuildBuf, inMsg->SecurityUse );
        ; Setup parameters for call to function ZDP_EPRsp
        MOV     A,?V12
        ADD     A,#0xe
        MOV     DPL,A
        CLR     A
        ADDC    A,?V13
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 32)
        MOV     ?V0,#ZDOBuildBuf & 0xff
        MOV     ?V1,#(ZDOBuildBuf >> 8) & 0xff
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV     ?V0,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 35)
        MOV     DPTR,#ZDAppNwkAddr
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 37)
        MOV     ?V0,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 38)
        MOV     A,?V12
        ADD     A,#0x2
        MOV     R4,A
        CLR     A
        ADDC    A,?V13
        MOV     R5,A
        MOV     A,?V12
        ADD     A,#0xf
        MOV     DPL,A
        CLR     A
        ADDC    A,?V13
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     R2,#0x6
        MOV     R3,#-0x80
        LCALL   `??ZDP_EPRsp::?relay`; Banked call to: ZDP_EPRsp
        MOV     A,#0x7
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
        MOV     A,R1
//  948 #if defined( LCD_SUPPORTED )
//  949       HalLcdWriteScreen( "Match Desc Req", "Rsp Non Matched" );
//  950 #endif
//  951     }
//  952     else
//  953     {
//  954       // no response mesage for broadcast message
//  955 #if defined( LCD_SUPPORTED )
//  956       HalLcdWriteScreen( "Match Desc Req", "Non Matched" );
//  957 #endif
//  958     }
//  959   }
//  960 
//  961   if ( inClusters != NULL )
??ZDO_ProcessMatchDescReq_26:
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??ZDO_ProcessMatchDescReq_27
//  962   {
//  963     osal_mem_free( inClusters );
        ; Setup parameters for call to function osal_mem_free
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  964   }
//  965 
//  966   if ( outClusters != NULL )
??ZDO_ProcessMatchDescReq_27:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??ZDO_ProcessMatchDescReq_2
//  967   {
//  968     osal_mem_free( outClusters );
        ; Setup parameters for call to function osal_mem_free
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  969   }
//  970 }
??ZDO_ProcessMatchDescReq_2:
        MOV     A,#0x7
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     R7,#0x10
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
          CFI EndBlock cfiBlock14
//  971 
//  972 #if defined ( REFLECTOR )
//  973 /*********************************************************************
//  974  * @fn      ZDO_ProcessBindUnbindReq()
//  975  *
//  976  * @brief   Called to process a Bind or Unbind Request message.
//  977  *
//  978  * @param   inMsg  - incoming message (request)
//  979  * @param   pReq - place to put parsed information
//  980  *
//  981  * @return  none
//  982  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  983 void ZDO_ProcessBindUnbindReq( zdoIncomingMsg_t *inMsg, ZDO_BindUnbindReq_t *pReq )
ZDO_ProcessBindUnbindReq:
          CFI Block cfiBlock15 Using cfiCommon0
          CFI Function ZDO_ProcessBindUnbindReq
        CODE
//  984 {
        FUNCALL ZDO_ProcessBindUnbindReq, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessBindUnbindReq, NLME_GetExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessBindUnbindReq, sAddrExtCmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessBindUnbindReq, APSME_LookupNwkAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessBindUnbindReq, ZDApp_GetEmptyPendingBindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessBindUnbindReq, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessBindUnbindReq, bindAddrIndexGet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessBindUnbindReq, ZDP_NwkAddrReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessBindUnbindReq, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessBindUnbindReq, APSME_BindRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessBindUnbindReq, ZDApp_NVUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessBindUnbindReq, APSME_UnBindRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessBindUnbindReq, ZDApp_NVUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessBindUnbindReq, ZDP_SendData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 12
        MOV     A,#-0xc
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  985   zAddrType_t SourceAddr;       // Binding Source addres
//  986   byte bindStat;
//  987 
//  988   SourceAddr.addrMode = Addr64Bit;
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x3
        MOVX    @DPTR,A
//  989   osal_cpyExtAddr( SourceAddr.addr.extAddr, pReq->srcAddress );
        ; Setup parameters for call to function sAddrExtCpy
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
//  990 
//  991   // If the local device is not the primary binding cache
//  992   // check the src address of the bind request.
//  993   // If it is not the local device's extended address
//  994   // discard the request.
//  995   if ( !osal_ExtAddrEqual( SourceAddr.addr.extAddr, NLME_GetExtAddr()) ||
//  996         (pReq->dstAddress.addrMode != Addr64Bit &&
//  997          pReq->dstAddress.addrMode != AddrGroup) )
        ; Setup parameters for call to function NLME_GetExtAddr
        LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
        MOV     ?V2,R2
        MOV     ?V3,R3
        MOV     R4,?V2
        MOV     R5,?V3
        ; Setup parameters for call to function sAddrExtCmp
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
        MOV     A,R1
        JZ      ??ZDO_ProcessBindUnbindReq_0
        MOV     A,R6
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0x3
        JZ      ??ZDO_ProcessBindUnbindReq_1
        MOV     A,R6
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??ZDO_ProcessBindUnbindReq_1
//  998   {
//  999     bindStat = ZDP_NOT_SUPPORTED;
??ZDO_ProcessBindUnbindReq_0:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x7c
        MOVX    @DPTR,A
        LJMP    ??ZDO_ProcessBindUnbindReq_2 & 0xFFFF
// 1000   }
// 1001   else
// 1002   {
// 1003     // Check source & destination endpoints
// 1004     if ( (pReq->srcEndpoint == 0 || pReq->srcEndpoint > MAX_ENDPOINTS)
// 1005         || (( pReq->dstAddress.addrMode == Addr64Bit ) &&
// 1006             (pReq->dstEndpoint == 0 || pReq->dstEndpoint > MAX_ENDPOINTS)) )
??ZDO_ProcessBindUnbindReq_1:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??ZDO_ProcessBindUnbindReq_3
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0xff
        JZ      ??ZDO_ProcessBindUnbindReq_3
        MOV     A,R6
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0x3
        JNZ     ??ZDO_ProcessBindUnbindReq_4
        MOV     A,R6
        ADD     A,#0x14
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        JZ      ??ZDO_ProcessBindUnbindReq_3
        MOV     A,R6
        ADD     A,#0x14
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0xff
        JNZ     ??ZDO_ProcessBindUnbindReq_4
// 1007     {
// 1008       bindStat = ZDP_INVALID_EP;
??ZDO_ProcessBindUnbindReq_3:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x7e
        MOVX    @DPTR,A
        LJMP    ??ZDO_ProcessBindUnbindReq_2 & 0xFFFF
// 1009     }
// 1010     else
// 1011     {
// 1012       if ( inMsg->clusterID == Bind_req )
??ZDO_ProcessBindUnbindReq_4:
        MOV     A,?V0
        ADD     A,#0xc
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0x21
        JNZ     ??ZDO_ProcessBindUnbindReq_5
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x0
??ZDO_ProcessBindUnbindReq_5:
        JZ      $+5
        LJMP    ??ZDO_ProcessBindUnbindReq_6 & 0xFFFF
// 1013       {
// 1014         // Assume the table is full
// 1015         bindStat = ZDP_TABLE_FULL;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x74
        MOVX    @DPTR,A
// 1016 
// 1017 #if defined( APP_TP ) || defined( APP_TP2 )
// 1018         // For ZigBee Conformance Testing
// 1019         if ( bindNumOfEntries() < gNWK_MAX_BINDING_ENTRIES )
// 1020 #endif
// 1021         {
// 1022 #if !defined ( ZDP_BIND_SKIP_VALIDATION )
// 1023           uint16 nwkAddr;
// 1024 
// 1025           // Verifies that a valid NWK address exists for the device
// 1026           // before creating a Binding entry. If NWK address does not
// 1027           // exist the request is sent out and the BindReq is saved, to
// 1028           // create the Bind Entry once the NwkAddrRsp is received
// 1029           if ( ( pReq->dstAddress.addrMode == Addr64Bit ) &&
// 1030                ( APSME_LookupNwkAddr( pReq->dstAddress.addr.extAddr, &nwkAddr ) == FALSE ) )
        MOV     A,R6
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0x3
        JZ      $+5
        LJMP    ??ZDO_ProcessBindUnbindReq_7 & 0xFFFF
        ; Setup parameters for call to function APSME_LookupNwkAddr
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP102_8
        MOV     A,R6
        ADD     A,#0xb
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        LCALL   `??APSME_LookupNwkAddr::?relay`; Banked call to: APSME_LookupNwkAddr
        MOV     A,R1
        JZ      $+5
        LJMP    ??ZDO_ProcessBindUnbindReq_7 & 0xFFFF
// 1031           {
// 1032             // find an empty bind slot in the pending Bind Req list
// 1033             ZDO_PendingBindReq_t *pPendingBind;
// 1034 
// 1035             if ( ( pPendingBind = ZDApp_GetEmptyPendingBindReq() ) != NULL )
        ; Setup parameters for call to function ZDApp_GetEmptyPendingBindReq
        LCALL   `??ZDApp_GetEmptyPendingBindReq::?relay`; Banked call to: ZDApp_GetEmptyPendingBindReq
        MOV     ?V2,R2
        MOV     ?V3,R3
        MOV     R0,?V2
        MOV     R1,?V3
        MOV     ?V2,R0
        MOV     ?V3,R1
        MOV     A,R0
        ORL     A,R1
        JNZ     $+5
        LJMP    ??ZDO_ProcessBindUnbindReq_2 & 0xFFFF
// 1036             {
// 1037               // copy the received request into the empty slot and all required info
// 1038               osal_memcpy( &(pPendingBind->bindReq), pReq, sizeof( ZDO_BindUnbindReq_t ) );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V4,R6
        MOV     ?V5,R7
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 30)
        MOV     R4,#0x15
        MOV     R5,#0x0
        MOV     R2,?V2
        MOV     R3,?V3
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
// 1039 
// 1040               pPendingBind->srcAddr = inMsg->srcAddr;
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        MOV     A,?V2
        ADD     A,#0x15
        MOV     R4,A
        CLR     A
        ADDC    A,?V3
        MOV     R5,A
        MOV     A,#0x9
        LCALL   ?MOVE_LONG8_XDATA_XDATA
// 1041               pPendingBind->securityUse = inMsg->SecurityUse;
        MOV     A,?V0
        ADD     A,#0xe
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,?V2
        ADD     A,#0x1e
        MOV     DPL,A
        CLR     A
        ADDC    A,?V3
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1042               pPendingBind->transSeq = inMsg->TransSeq;
        MOV     A,?V0
        ADD     A,#0xf
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,?V2
        ADD     A,#0x1f
        MOV     DPL,A
        CLR     A
        ADDC    A,?V3
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1043               pPendingBind->age = MAX_TIME_ADDR_REQ;
        MOV     A,?V2
        ADD     A,#0x20
        MOV     DPL,A
        CLR     A
        ADDC    A,?V3
        MOV     DPH,A
        MOV     A,#0x5
        MOVX    @DPTR,A
// 1044 
// 1045               // create an entry in Address Manager
// 1046               ( void )bindAddrIndexGet( &(pReq->dstAddress) );
        ; Setup parameters for call to function bindAddrIndexGet
        MOV     A,R6
        ADD     A,#0xb
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        LCALL   `??bindAddrIndexGet::?relay`; Banked call to: bindAddrIndexGet
        MOV     ?V2,R2
        MOV     ?V3,R3
        MOV     ?V0,?V2
        MOV     ?V1,?V3
// 1047 
// 1048               ZDP_NwkAddrReq( pReq->dstAddress.addr.extAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
        ; Setup parameters for call to function ZDP_NwkAddrReq
        MOV     R5,#0x0
        MOV     R4,#0x0
        MOV     R1,#0x0
        MOV     A,R6
        ADD     A,#0xb
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        LCALL   `??ZDP_NwkAddrReq::?relay`; Banked call to: ZDP_NwkAddrReq
        MOV     A,R1
// 1049 
// 1050               osal_start_timerEx( ZDAppTaskID, ZDO_PENDING_BIND_REQ_EVT,
// 1051                                   AGE_OUT_PEND_BIND_REQ_DELAY );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_3e8
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 31)
        MOV     R2,#0x0
        MOV     R3,#0x10
        MOV     DPTR,#ZDAppTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
        MOV     A,R1
// 1052               return;
        LJMP    ??ZDO_ProcessBindUnbindReq_8 & 0xFFFF
// 1053             }
// 1054           }
// 1055           // Add Bind entry
// 1056           else if ( APSME_BindRequest( pReq->srcEndpoint, pReq->clusterID,
// 1057                                        &(pReq->dstAddress), pReq->dstEndpoint ) == ZSuccess )
??ZDO_ProcessBindUnbindReq_7:
        ; Setup parameters for call to function APSME_BindRequest
        MOV     A,R6
        ADD     A,#0x14
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V2,A
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 28)
        MOV     A,R6
        ADD     A,#0xb
        MOV     R4,A
        CLR     A
        ADDC    A,R7
        MOV     R5,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??APSME_BindRequest::?relay`; Banked call to: APSME_BindRequest
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
        MOV     A,R1
        JNZ     ??ZDO_ProcessBindUnbindReq_2
// 1058           {
// 1059             // valid entry
// 1060             bindStat = ZDP_SUCCESS;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x0
        MOVX    @DPTR,A
// 1061 
// 1062             // Notify to save info into NV
// 1063             ZDApp_NVUpdate();
        ; Setup parameters for call to function ZDApp_NVUpdate
        LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
        SJMP    ??ZDO_ProcessBindUnbindReq_2
// 1064           }
// 1065 #else // ZDP_BIND_SKIP_VALIDATION  is defined
// 1066           // Create binding entry first independently of existance of  valid NWK addres
// 1067           // if NWK address does not exist a request is sent out
// 1068           if ( APSME_BindRequest( pReq->srcEndpoint, pReq->clusterID,
// 1069                          &(pReq->dstAddress), pReq->dstEndpoint ) == ZSuccess )
// 1070           {
// 1071             uint16 nwkAddr;
// 1072 
// 1073             // valid entry
// 1074             bindStat = ZDP_SUCCESS;
// 1075 
// 1076             // Notify to save info into NV
// 1077             ZDApp_NVUpdate();
// 1078 
// 1079             // Check for the destination address
// 1080             if ( pReq->dstAddress.addrMode == Addr64Bit )
// 1081             {
// 1082               if ( APSME_LookupNwkAddr( pReq->dstAddress.addr.extAddr, &nwkAddr ) == FALSE )
// 1083               {
// 1084                 ZDP_NwkAddrReq( pReq->dstAddress.addr.extAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
// 1085               }
// 1086             }
// 1087           }
// 1088 #endif
// 1089         }
// 1090       }
// 1091       else // Unbind_req
// 1092       {
// 1093         if ( APSME_UnBindRequest( pReq->srcEndpoint, pReq->clusterID,
// 1094                        &(pReq->dstAddress), pReq->dstEndpoint ) == ZSuccess )
??ZDO_ProcessBindUnbindReq_6:
        ; Setup parameters for call to function APSME_UnBindRequest
        MOV     A,R6
        ADD     A,#0x14
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V2,A
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 28)
        MOV     A,R6
        ADD     A,#0xb
        MOV     R4,A
        CLR     A
        ADDC    A,R7
        MOV     R5,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??APSME_UnBindRequest::?relay`; Banked call to: APSME_UnBindRequest
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
        MOV     A,R1
        JNZ     ??ZDO_ProcessBindUnbindReq_9
// 1095         {
// 1096           bindStat = ZDP_SUCCESS;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x0
        MOVX    @DPTR,A
// 1097 
// 1098           // Notify to save info into NV
// 1099           ZDApp_NVUpdate();
        ; Setup parameters for call to function ZDApp_NVUpdate
        LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
        SJMP    ??ZDO_ProcessBindUnbindReq_2
// 1100         }
// 1101         else
// 1102           bindStat = ZDP_NO_ENTRY;
??ZDO_ProcessBindUnbindReq_9:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x78
        MOVX    @DPTR,A
// 1103       }
// 1104     }
// 1105   }
// 1106 
// 1107   // Send back a response message
// 1108   ZDP_SendData( &(inMsg->TransSeq), &(inMsg->srcAddr),
// 1109                (inMsg->clusterID | ZDO_RESPONSE_BIT), 1, &bindStat,
// 1110                inMsg->SecurityUse );
??ZDO_ProcessBindUnbindReq_2:
        ; Setup parameters for call to function ZDP_SendData
        MOV     A,?V0
        ADD     A,#0xe
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V2,A
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 28)
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V2,R0
        MOV     ?V3,R1
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 30)
        MOV     A,?V0
        ADD     A,#0xc
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        ORL     A,#0x0
        MOV     ?V2,A
        INC     DPTR
        MOVX    A,@DPTR
        ORL     A,#0x80
        MOV     ?V3,A
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 32)
        MOV     R1,#0x1
        MOV     A,?V0
        ADD     A,#0x2
        MOV     R4,A
        CLR     A
        ADDC    A,?V1
        MOV     R5,A
        MOV     A,?V0
        ADD     A,#0xf
        MOV     R2,A
        CLR     A
        ADDC    A,?V1
        MOV     R3,A
        LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
        MOV     A,R1
// 1111 }
??ZDO_ProcessBindUnbindReq_8:
        MOV     A,#0xc
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     R7,#0x7
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
          CFI EndBlock cfiBlock15
// 1112 #endif // REFLECTOR
// 1113 
// 1114 /*********************************************************************
// 1115  * @fn      ZDO_UpdateAddrManager
// 1116  *
// 1117  * @brief   Update the Address Manager.
// 1118  *
// 1119  * @param   nwkAddr - network address
// 1120  * @param   extAddr - extended address
// 1121  *
// 1122  * @return  none
// 1123  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1124 void ZDO_UpdateAddrManager( uint16 nwkAddr, uint8 *extAddr )
ZDO_UpdateAddrManager:
          CFI Block cfiBlock16 Using cfiCommon0
          CFI Function ZDO_UpdateAddrManager
        CODE
// 1125 {
        FUNCALL ZDO_UpdateAddrManager, AddrMgrExtAddrSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_UpdateAddrManager, AddrMgrEntryUpdate
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
// 1126   AddrMgrEntry_t addrEntry;
// 1127 
// 1128   // Update the address manager
// 1129   addrEntry.user = ADDRMGR_USER_DEFAULT;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x0
        MOVX    @DPTR,A
// 1130   addrEntry.nwkAddr = nwkAddr;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
// 1131   AddrMgrExtAddrSet( addrEntry.extAddr, extAddr );
        ; Setup parameters for call to function AddrMgrExtAddrSet
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
// 1132   AddrMgrEntryUpdate( &addrEntry );
        ; Setup parameters for call to function AddrMgrEntryUpdate
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
        MOV     A,R1
// 1133 }
        MOV     A,#0xd
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 XSP16+0
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
          CFI EndBlock cfiBlock16
// 1134 
// 1135 /*********************************************************************
// 1136  * @fn      ZDO_ProcessServerDiscReq
// 1137  *
// 1138  * @brief   Process the Server_Discovery_req message.
// 1139  *
// 1140  * @param   inMsg  - incoming message (request)
// 1141  *
// 1142  * @return  none
// 1143  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1144 void ZDO_ProcessServerDiscReq( zdoIncomingMsg_t *inMsg )
ZDO_ProcessServerDiscReq:
          CFI Block cfiBlock17 Using cfiCommon0
          CFI Function ZDO_ProcessServerDiscReq
        CODE
// 1145 {
        FUNCALL ZDO_ProcessServerDiscReq, ZDP_ServerDiscRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1146   uint16 serverMask = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
        MOV     A,R6
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R3,#0x0
        MOV     A,R6
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     R0,A
        MOV     A,R3
        ADDC    A,R1
        MOV     R1,A
// 1147   uint16 matchMask = serverMask & ZDO_Config_Node_Descriptor.ServerMask;
        MOV     DPTR,#ZDO_Config_Node_Descriptor + 8
        MOVX    A,@DPTR
        ANL     A,R0
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        ANL     A,R1
        MOV     ?V1,A
// 1148 
// 1149   if ( matchMask )
        MOV     A,?V0
        ORL     A,?V1
        JZ      ??ZDO_ProcessServerDiscReq_0
// 1150   {
// 1151     ZDP_ServerDiscRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSUCCESS,
// 1152                 ZDAppNwkAddr.addr.shortAddr, matchMask, inMsg->SecurityUse );
        ; Setup parameters for call to function ZDP_ServerDiscRsp
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     DPTR,#ZDAppNwkAddr
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R6
        ADD     A,#0xe
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     R4,#0x0
        MOV     A,R6
        ADD     A,#0x2
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        MOV     A,R6
        ADD     A,#0xf
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??ZDP_ServerDiscRsp::?relay`; Banked call to: ZDP_ServerDiscRsp
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     A,R1
// 1153   }
// 1154 }
??ZDO_ProcessServerDiscReq_0:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
          CFI EndBlock cfiBlock17
// 1155 
// 1156 #if defined ( ZIGBEE_CHILD_AGING )
// 1157 /*********************************************************************
// 1158  * @fn          ZDO_ProcessEndDeviceTimeoutReq
// 1159  *
// 1160  * @brief       This function processes and responds to the
// 1161  *              End_Device_Timeout_Req message.
// 1162  *
// 1163  * @param       inMsg  - incoming message (request)
// 1164  *
// 1165  * @return      none
// 1166  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1167 void ZDO_ProcessEndDeviceTimeoutReq( zdoIncomingMsg_t *inMsg )
ZDO_ProcessEndDeviceTimeoutReq:
          CFI Block cfiBlock18 Using cfiCommon0
          CFI Function ZDO_ProcessEndDeviceTimeoutReq
        CODE
// 1168 {
        FUNCALL ZDO_ProcessEndDeviceTimeoutReq, AssocGetWithExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessEndDeviceTimeoutReq, ZDApp_NVUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessEndDeviceTimeoutReq, ZDP_SendData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1169   uint8 stat = ZDP_SUCCESS;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x0
        MOVX    @DPTR,A
// 1170   uint8 *ieee = NULL;
        MOV     R2,#0x0
        MOV     R3,#0x0
// 1171   uint16 reqTimeout;
// 1172 
// 1173   // Only process this message if Child Table Management is enabled OR
// 1174   // If message was broadcast OR multicast OR
// 1175   // if the NWK src and the MAC src are not the same) drop message
// 1176   if ( ( zgChildAgingEnable == FALSE ) ||
// 1177        ( inMsg->wasBroadcast == TRUE ) ||
// 1178        ( inMsg->srcAddr.addr.shortAddr != inMsg->macSrcAddr ) )
        MOV     DPTR,#zgChildAgingEnable
        MOVX    A,@DPTR
        JZ      ??ZDO_ProcessEndDeviceTimeoutReq_0
        MOV     A,R6
        ADD     A,#0xb
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??ZDO_ProcessEndDeviceTimeoutReq_0
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R6
        ADD     A,#0x15
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??ZDO_ProcessEndDeviceTimeoutReq_1
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??ZDO_ProcessEndDeviceTimeoutReq_1:
        JZ      ??ZDO_ProcessEndDeviceTimeoutReq_2
// 1179   {
// 1180     // the message does not come from a child, drop it
// 1181     return;
??ZDO_ProcessEndDeviceTimeoutReq_0:
        LJMP    ??ZDO_ProcessEndDeviceTimeoutReq_3 & 0xFFFF
// 1182   }
// 1183 
// 1184   ieee = inMsg->asdu;
??ZDO_ProcessEndDeviceTimeoutReq_2:
        MOV     A,R6
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
// 1185 
// 1186   reqTimeout = BUILD_UINT16( inMsg->asdu[Z_EXTADDR_LEN], inMsg->asdu[Z_EXTADDR_LEN+1] );
        MOV     A,R6
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x8
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R5,#0x0
        MOV     A,R6
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x9
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R4
        ADD     A,R0
        MOV     ?V0,A
        MOV     A,R5
        ADDC    A,R1
        MOV     ?V1,A
// 1187 
// 1188   if ( ( ( reqTimeout < ZDO_MIN_REQ_TIMEOUT ) || ( reqTimeout > ZDO_MAX_REQ_TIMEOUT ) ) ||
// 1189        ( ZSTACK_END_DEVICE_BUILD ) )
        MOV     A,?V0
        ORL     A,?V1
        JZ      ??ZDO_ProcessEndDeviceTimeoutReq_4
        CLR     C
        MOV     A,?V0
        SUBB    A,#0x71
        MOV     A,?V1
        SUBB    A,#0x8
        JNC     ??ZDO_ProcessEndDeviceTimeoutReq_4
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??ZDO_ProcessEndDeviceTimeoutReq_5
// 1190   {
// 1191     stat = ZDP_INVALID_REQTYPE;
??ZDO_ProcessEndDeviceTimeoutReq_4:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x80
        MOVX    @DPTR,A
        SJMP    ??ZDO_ProcessEndDeviceTimeoutReq_6
// 1192   }
// 1193   else
// 1194   {
// 1195     associated_devices_t *pAssoc;
// 1196 
// 1197     if ( ( ( pAssoc = AssocGetWithExt( ieee ) ) != NULL ) &&
// 1198          ( ( pAssoc->nodeRelation >= CHILD_RFD ) &&
// 1199            ( pAssoc->nodeRelation <= CHILD_RFD_RX_IDLE ) ) )
??ZDO_ProcessEndDeviceTimeoutReq_5:
        ; Setup parameters for call to function AssocGetWithExt
        LCALL   `??AssocGetWithExt::?relay`; Banked call to: AssocGetWithExt
        MOV     ?V2,R2
        MOV     ?V3,R3
        MOV     R2,?V2
        MOV     R3,?V3
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     A,R2
        ORL     A,R3
        JZ      ??ZDO_ProcessEndDeviceTimeoutReq_7
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??ZDO_ProcessEndDeviceTimeoutReq_7
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x3
        JNC     ??ZDO_ProcessEndDeviceTimeoutReq_7
// 1200     {
// 1201       pAssoc->timeoutCounter = reqTimeout;
        MOV     A,R0
        ADD     A,#0x12
        MOV     DPL,A
        CLR     A
        ADDC    A,R1
        MOV     DPH,A
        MOV     A,?V0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V1
        MOVX    @DPTR,A
// 1202       pAssoc->endDevKaTimeout = reqTimeout;
        MOV     A,R0
        ADD     A,#0x14
        MOV     DPL,A
        CLR     A
        ADDC    A,R1
        MOV     DPH,A
        MOV     A,?V0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V1
        MOVX    @DPTR,A
// 1203 
// 1204       // Set event to save NV
// 1205       ZDApp_NVUpdate();
        ; Setup parameters for call to function ZDApp_NVUpdate
        LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
        SJMP    ??ZDO_ProcessEndDeviceTimeoutReq_6
// 1206     }
// 1207     else
// 1208     {
// 1209       stat = ZDP_DEVICE_NOT_FOUND;
??ZDO_ProcessEndDeviceTimeoutReq_7:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x7f
        MOVX    @DPTR,A
// 1210     }
// 1211 
// 1212   }
// 1213 
// 1214   ZDP_EndDeviceTimeoutRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat,
// 1215                            inMsg->SecurityUse );
??ZDO_ProcessEndDeviceTimeoutReq_6:
        ; Setup parameters for call to function ZDP_SendData
        MOV     A,R6
        ADD     A,#0xe
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     ?V0,#0x1f
        MOV     ?V1,#-0x80
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R1,#0x1
        MOV     A,R6
        ADD     A,#0x2
        MOV     R4,A
        CLR     A
        ADDC    A,R7
        MOV     R5,A
        MOV     A,R6
        ADD     A,#0xf
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     A,R1
// 1216 }
??ZDO_ProcessEndDeviceTimeoutReq_3:
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
          CFI EndBlock cfiBlock18
// 1217 #endif // ZIGBEE_CHILD_AGING
// 1218 
// 1219 /*********************************************************************
// 1220  * Call Back Functions from APS  - API
// 1221  */
// 1222 
// 1223 /*********************************************************************
// 1224  * @fn          ZDO_EndDeviceTimeoutCB
// 1225  *
// 1226  * @brief       This function handles the binding timer for the End
// 1227  *              Device Bind command.
// 1228  *
// 1229  * @param       none
// 1230  *
// 1231  * @return      none
// 1232  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1233 void ZDO_EndDeviceTimeoutCB( void )
ZDO_EndDeviceTimeoutCB:
          CFI Block cfiBlock19 Using cfiCommon0
          CFI Function ZDO_EndDeviceTimeoutCB
        CODE
// 1234 {
        FUNCALL ZDO_EndDeviceTimeoutCB, ZDO_SendEDBindRsp
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_EndDeviceTimeoutCB, ZDO_RemoveEndDeviceBind
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1235 #if defined ( REFLECTOR )
// 1236   byte stat;
// 1237   if ( ZDO_EDBind )
        MOV     DPTR,#ZDO_EDBind
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??ZDO_EndDeviceTimeoutCB_0
// 1238   {
// 1239     stat = ZDO_EDBind->status;
        MOV     DPTR,#ZDO_EDBind
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x16
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R4,A
// 1240 
// 1241     // Send the response message to the first sent
// 1242     ZDO_SendEDBindRsp( ZDO_EDBind->SrcTransSeq, &(ZDO_EDBind->SrcAddr),
// 1243                         stat, ZDO_EDBind->SecurityUse );
        ; Setup parameters for call to function ZDO_SendEDBindRsp
        MOV     DPTR,#ZDO_EDBind
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x15
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     DPTR,#ZDO_EDBind
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R3,A
        MOV     DPTR,#ZDO_EDBind
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??ZDO_SendEDBindRsp::?relay`; Banked call to: ZDO_SendEDBindRsp
// 1244 
// 1245     ZDO_RemoveEndDeviceBind();
        ; Setup parameters for call to function ZDO_RemoveEndDeviceBind
        LCALL   `??ZDO_RemoveEndDeviceBind::?relay`; Banked call to: ZDO_RemoveEndDeviceBind
// 1246   }
// 1247 #endif  // REFLECTOR
// 1248 }
??ZDO_EndDeviceTimeoutCB_0:
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
          CFI EndBlock cfiBlock19
// 1249 
// 1250 /*********************************************************************
// 1251  * Optional Management Messages
// 1252  */
// 1253 
// 1254 /*********************************************************************
// 1255  * @fn          ZDO_ProcessMgmtLqiReq
// 1256  *
// 1257  * @brief       This function handles parsing the incoming Management
// 1258  *              LQI request and generate the response.
// 1259  *
// 1260  *   Note:      This function will limit the number of items returned
// 1261  *              to ZDO_MAX_LQI_ITEMS items.
// 1262  *
// 1263  * @param       inMsg - incoming message (request)
// 1264  *
// 1265  * @return      none
// 1266  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1267 void ZDO_ProcessMgmtLqiReq( zdoIncomingMsg_t *inMsg )
ZDO_ProcessMgmtLqiReq:
          CFI Block cfiBlock20 Using cfiCommon0
          CFI Function ZDO_ProcessMgmtLqiReq
        CODE
// 1268 {
        FUNCALL ZDO_ProcessMgmtLqiReq, NLME_GetRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 59, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessMgmtLqiReq, AssocCount
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 59, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessMgmtLqiReq, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 59, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessMgmtLqiReq, AssocFindDevice
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 59, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessMgmtLqiReq, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 59, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessMgmtLqiReq, AddrMgrEntryLookupNwk
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 59, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessMgmtLqiReq, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 59, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessMgmtLqiReq, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 59, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessMgmtLqiReq, NLME_GetRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 59, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessMgmtLqiReq, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 59, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessMgmtLqiReq, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 59, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessMgmtLqiReq, ZDP_MgmtLqiRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 64, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 64, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessMgmtLqiReq, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 59, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 59, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V13
        MOV     A,#-0x16
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
        ; Saved register size: 22
        ; Auto size: 37
        MOV     A,#-0x25
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 59)
        MOV     ?V12,R2
        MOV     ?V13,R3
// 1269   byte x;
// 1270   byte index;
// 1271   byte numItems;
// 1272   byte maxItems;
// 1273   ZDP_MgmtLqiItem_t* table = NULL;
        MOV     ?V10,#0x0
        MOV     ?V11,#0x0
// 1274   ZDP_MgmtLqiItem_t* item;
// 1275   neighborEntry_t    entry;
// 1276   byte aItems;
// 1277   associated_devices_t *aDevice;
// 1278   AddrMgrEntry_t  nwkEntry;
// 1279   uint8 StartIndex = inMsg->asdu[0];
        MOV     A,?V12
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,?V13
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        MOV     ?V5,A
// 1280 
// 1281   // Get the number of neighbor items
// 1282   NLME_GetRequest( nwkNumNeighborTableEntries, 0, &maxItems );
        ; Setup parameters for call to function NLME_GetRequest
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     R2,#0x0
        MOV     R3,#0x0
        MOV     R1,#-0x64
        LCALL   `??NLME_GetRequest::?relay`; Banked call to: NLME_GetRequest
        MOV     A,R1
// 1283 
// 1284   // Get the number of associated items
// 1285   aItems = (uint8)AssocCount( PARENT, CHILD_FFD_RX_IDLE );
        ; Setup parameters for call to function AssocCount
        MOV     R2,#0x4
        MOV     R1,#0x0
        LCALL   `??AssocCount::?relay`; Banked call to: AssocCount
        MOV     A,R2
        MOV     ?V4,A
// 1286 
// 1287   // Total number of items
// 1288   maxItems += aItems;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ADD     A,?V4
        MOVX    @DPTR,A
// 1289 
// 1290   // Start with the supplied index
// 1291   if ( maxItems > StartIndex )
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,?V5
        CLR     C
        SUBB    A,R0
        JC      $+5
        LJMP    ??ZDO_ProcessMgmtLqiReq_0 & 0xFFFF
// 1292   {
// 1293     numItems = maxItems - StartIndex;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,?V5
        MOV     ?V1,A
// 1294 
// 1295     // limit the size of the list
// 1296     if ( numItems > ZDO_MAX_LQI_ITEMS )
        MOV     A,?V1
        CLR     C
        SUBB    A,#0x4
        JC      ??ZDO_ProcessMgmtLqiReq_1
// 1297       numItems = ZDO_MAX_LQI_ITEMS;
        MOV     ?V1,#0x3
// 1298 
// 1299     // Allocate the memory to build the table
// 1300     table = (ZDP_MgmtLqiItem_t*)osal_mem_alloc( (short)
// 1301               ( numItems * sizeof( ZDP_MgmtLqiItem_t ) ) );
??ZDO_ProcessMgmtLqiReq_1:
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,?V1
        MOV     R3,#0x0
        MOV     A,R2
        MOV     B,#0x1a
        MUL     AB
        XCH     A,R2
        MOV     R0,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R0
        MOV     R0,A
        MOV     B,#0x1a
        MOV     A,R3
        MUL     AB
        ADD     A,R0
        MOV     R3,A
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V2,R2
        MOV     ?V3,R3
        MOV     ?V10,?V2
        MOV     ?V11,?V3
// 1302 
// 1303     if ( table != NULL )
        MOV     A,?V10
        ORL     A,?V11
        JNZ     $+5
        LJMP    ??ZDO_ProcessMgmtLqiReq_2 & 0xFFFF
// 1304     {
// 1305       x = 0;
        MOV     ?V6,#0x0
// 1306       item = table;
        MOV     R6,?V10
        MOV     R7,?V11
// 1307       index = StartIndex;
        MOV     ?V0,?V5
        SJMP    ??ZDO_ProcessMgmtLqiReq_3
// 1308 
// 1309       // Loop through associated items and build list
// 1310       for ( ; x < numItems; x++ )
// 1311       {
// 1312         if ( index < aItems )
// 1313         {
// 1314           // get next associated device
// 1315           aDevice = AssocFindDevice( index++ );
// 1316 
// 1317           // set basic fields
// 1318           item->panID   = _NIB.nwkPanId;
// 1319           osal_cpyExtAddr( item->extPanID, _NIB.extendedPANID );
// 1320           item->nwkAddr = aDevice->shortAddr;
// 1321           item->permit  = ZDP_MGMT_BOOL_UNKNOWN;
// 1322           item->depth   = 0xFF;
// 1323           item->lqi     = aDevice->linkInfo.rxLqi;
// 1324 
// 1325           // set extented address
// 1326           nwkEntry.user    = ADDRMGR_USER_DEFAULT;
// 1327           nwkEntry.nwkAddr = aDevice->shortAddr;
// 1328 
// 1329           if ( AddrMgrEntryLookupNwk( &nwkEntry ) == TRUE )
// 1330           {
// 1331             osal_cpyExtAddr( item->extAddr, nwkEntry.extAddr );
// 1332           }
// 1333           else
// 1334           {
// 1335             osal_memset( item->extAddr, 0xFF, Z_EXTADDR_LEN );
// 1336           }
// 1337 
// 1338           // use association info to set other fields
// 1339           if ( aDevice->nodeRelation == PARENT )
// 1340           {
// 1341             if (  aDevice->shortAddr == 0 )
// 1342             {
// 1343               item->devType = ZDP_MGMT_DT_COORD;
// 1344               item->depth = 0;
// 1345             }
// 1346             else
// 1347             {
// 1348               item->devType = ZDP_MGMT_DT_ROUTER;
// 1349               item->depth = _NIB.nodeDepth - 1;
// 1350             }
// 1351 
// 1352             item->rxOnIdle = ZDP_MGMT_BOOL_UNKNOWN;
// 1353             item->relation = ZDP_MGMT_REL_PARENT;
// 1354           }
// 1355           else
// 1356           {
// 1357             // If not parent, then it's a child
// 1358             item->depth = _NIB.nodeDepth + 1;
// 1359 
// 1360             if ( aDevice->nodeRelation < CHILD_FFD )
// 1361             {
// 1362               item->devType = ZDP_MGMT_DT_ENDDEV;
// 1363 
// 1364               if ( aDevice->nodeRelation == CHILD_RFD )
// 1365               {
// 1366                 item->rxOnIdle = FALSE;
// 1367               }
// 1368               else
// 1369               {
// 1370                 item->rxOnIdle = TRUE;
// 1371               }
// 1372             }
// 1373             else
// 1374             {
// 1375               item->devType = ZDP_MGMT_DT_ROUTER;
// 1376 
// 1377               if ( aDevice->nodeRelation == CHILD_FFD )
// 1378               {
// 1379                 item->rxOnIdle = FALSE;
// 1380               }
// 1381               else
// 1382               {
// 1383                 item->rxOnIdle = TRUE;
??ZDO_ProcessMgmtLqiReq_4:
        MOV     A,R6
        ADD     A,#0x15
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1384               }
// 1385             }
// 1386 
// 1387             item->relation = ZDP_MGMT_REL_CHILD;
??ZDO_ProcessMgmtLqiReq_5:
        MOV     A,R6
        ADD     A,#0x16
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1388           }
// 1389 
// 1390           item++;
??ZDO_ProcessMgmtLqiReq_6:
        MOV     A,R6
        ADD     A,#0x1a
        MOV     R6,A
        JNC     ??ZDO_ProcessMgmtLqiReq_7
        INC     R7
??ZDO_ProcessMgmtLqiReq_7:
        INC     ?V6
??ZDO_ProcessMgmtLqiReq_3:
        MOV     A,?V6
        CLR     C
        SUBB    A,?V1
        JC      $+5
        LJMP    ??ZDO_ProcessMgmtLqiReq_8 & 0xFFFF
        MOV     A,?V0
        CLR     C
        SUBB    A,?V4
        JC      $+5
        LJMP    ??ZDO_ProcessMgmtLqiReq_9 & 0xFFFF
        ; Setup parameters for call to function AssocFindDevice
        MOV     R2,?V0
        MOV     R3,#0x0
        LCALL   `??AssocFindDevice::?relay`; Banked call to: AssocFindDevice
        MOV     ?V8,R2
        MOV     ?V9,R3
        MOV     ?V2,?V8
        MOV     ?V3,?V9
        INC     ?V0
        MOV     DPTR,#_NIB + 33
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        ; Setup parameters for call to function sAddrExtCpy
        MOV     R4,#(_NIB + 53) & 0xff
        MOV     R5,#((_NIB + 53) >> 8) & 0xff
        MOV     A,R6
        ADD     A,#0x2
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R6
        ADD     A,#0x12
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     A,R6
        ADD     A,#0x17
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOV     A,#0x2
        MOVX    @DPTR,A
        MOV     A,R6
        ADD     A,#0x18
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOV     A,#-0x1
        MOVX    @DPTR,A
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,#0x19
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x0
        MOVX    @DPTR,A
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        ; Setup parameters for call to function AddrMgrEntryLookupNwk
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??ZDO_ProcessMgmtLqiReq_10
        ; Setup parameters for call to function sAddrExtCpy
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R6
        ADD     A,#0xa
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
        SJMP    ??ZDO_ProcessMgmtLqiReq_11
??ZDO_ProcessMgmtLqiReq_10:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     R1,#-0x1
        MOV     A,R6
        ADD     A,#0xa
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
??ZDO_ProcessMgmtLqiReq_11:
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??ZDO_ProcessMgmtLqiReq_12
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??ZDO_ProcessMgmtLqiReq_13
        MOV     A,R6
        ADD     A,#0x14
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOV     A,#0x0
        MOVX    @DPTR,A
        MOV     A,R6
        ADD     A,#0x18
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOV     A,#0x0
        MOVX    @DPTR,A
        SJMP    ??ZDO_ProcessMgmtLqiReq_14
??ZDO_ProcessMgmtLqiReq_13:
        MOV     A,R6
        ADD     A,#0x14
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     DPTR,#_NIB + 52
        MOVX    A,@DPTR
        ADD     A,#-0x1
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,#0x18
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
??ZDO_ProcessMgmtLqiReq_14:
        MOV     A,R6
        ADD     A,#0x15
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOV     A,#0x2
        MOVX    @DPTR,A
        MOV     A,R6
        ADD     A,#0x16
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOV     A,#0x0
        MOVX    @DPTR,A
        LJMP    ??ZDO_ProcessMgmtLqiReq_6 & 0xFFFF
??ZDO_ProcessMgmtLqiReq_12:
        MOV     DPTR,#_NIB + 52
        MOVX    A,@DPTR
        ADD     A,#0x1
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,#0x18
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x3
        JNC     ??ZDO_ProcessMgmtLqiReq_15
        MOV     A,R6
        ADD     A,#0x14
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOV     A,#0x2
        MOVX    @DPTR,A
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDO_ProcessMgmtLqiReq_16
        MOV     A,R6
        ADD     A,#0x15
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOV     A,#0x0
        MOVX    @DPTR,A
        LJMP    ??ZDO_ProcessMgmtLqiReq_5 & 0xFFFF
??ZDO_ProcessMgmtLqiReq_16:
        MOV     A,R6
        ADD     A,#0x15
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOV     A,#0x1
        MOVX    @DPTR,A
        LJMP    ??ZDO_ProcessMgmtLqiReq_5 & 0xFFFF
??ZDO_ProcessMgmtLqiReq_15:
        MOV     A,R6
        ADD     A,#0x14
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x3
        JZ      $+5
        LJMP    ??ZDO_ProcessMgmtLqiReq_4 & 0xFFFF
        MOV     A,R6
        ADD     A,#0x15
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOV     A,#0x0
        MOVX    @DPTR,A
        LJMP    ??ZDO_ProcessMgmtLqiReq_5 & 0xFFFF
// 1391         }
// 1392         else
// 1393         {
// 1394           if ( StartIndex <= aItems )
??ZDO_ProcessMgmtLqiReq_9:
        MOV     A,?V4
        CLR     C
        SUBB    A,?V5
        JC      ??ZDO_ProcessMgmtLqiReq_17
// 1395             // Start with 1st neighbor
// 1396             index = 0;
        MOV     ?V0,#0x0
        SJMP    ??ZDO_ProcessMgmtLqiReq_8
// 1397           else
// 1398             // Start with >1st neighbor
// 1399             index = StartIndex - aItems;
??ZDO_ProcessMgmtLqiReq_17:
        MOV     A,?V5
        CLR     C
        SUBB    A,?V4
        MOV     ?V0,A
// 1400           break;
        SJMP    ??ZDO_ProcessMgmtLqiReq_8
// 1401         }
// 1402       }
// 1403 
// 1404       // Loop through neighbor items and finish list
// 1405       for ( ; x < numItems; x++ )
// 1406       {
// 1407         // Add next neighbor table item
// 1408         NLME_GetRequest( nwkNeighborTable, index++, &entry );
// 1409 
// 1410         // set ZDP_MgmtLqiItem_t fields
// 1411         item->panID    = entry.panId;
// 1412         osal_cpyExtAddr( item->extPanID, _NIB.extendedPANID );
// 1413         osal_memset( item->extAddr, 0xFF, Z_EXTADDR_LEN );
// 1414         item->nwkAddr  = entry.neighborAddress;
// 1415         item->rxOnIdle = ZDP_MGMT_BOOL_UNKNOWN;
// 1416         item->relation = ZDP_MGMT_REL_UNKNOWN;
// 1417         item->permit   = ZDP_MGMT_BOOL_UNKNOWN;
// 1418         item->depth    = 0xFF;
// 1419         item->lqi      = entry.linkInfo.rxLqi;
// 1420 
// 1421         if ( item->nwkAddr == 0 )
// 1422         {
// 1423           item->devType = ZDP_MGMT_DT_COORD;
// 1424         }
// 1425         else
// 1426         {
// 1427           item->devType = ZDP_MGMT_DT_ROUTER;
??ZDO_ProcessMgmtLqiReq_18:
        MOV     A,R6
        ADD     A,#0x14
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1428         }
// 1429 
// 1430         item++;
??ZDO_ProcessMgmtLqiReq_19:
        MOV     A,R6
        ADD     A,#0x1a
        MOV     R6,A
        JNC     ??ZDO_ProcessMgmtLqiReq_20
        INC     R7
??ZDO_ProcessMgmtLqiReq_20:
        INC     ?V6
??ZDO_ProcessMgmtLqiReq_8:
        MOV     A,?V6
        CLR     C
        SUBB    A,?V1
        JC      $+5
        LJMP    ??ZDO_ProcessMgmtLqiReq_2 & 0xFFFF
        ; Setup parameters for call to function NLME_GetRequest
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP102_8
        MOV     R2,?V0
        MOV     R3,#0x0
        MOV     R1,#-0x79
        LCALL   `??NLME_GetRequest::?relay`; Banked call to: NLME_GetRequest
        MOV     A,R1
        INC     ?V0
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        ; Setup parameters for call to function sAddrExtCpy
        MOV     R4,#(_NIB + 53) & 0xff
        MOV     R5,#((_NIB + 53) >> 8) & 0xff
        MOV     A,R6
        ADD     A,#0x2
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     R1,#-0x1
        MOV     A,R6
        ADD     A,#0xa
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R6
        ADD     A,#0x12
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     A,R6
        ADD     A,#0x15
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOV     A,#0x2
        MOVX    @DPTR,A
        MOV     A,R6
        ADD     A,#0x16
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOV     A,#0x3
        MOVX    @DPTR,A
        MOV     A,R6
        ADD     A,#0x17
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOV     A,#0x2
        MOVX    @DPTR,A
        MOV     A,R6
        ADD     A,#0x18
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOV     A,#-0x1
        MOVX    @DPTR,A
        MOV     A,#0x1d
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,#0x19
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,R6
        ADD     A,#0x12
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      $+5
        LJMP    ??ZDO_ProcessMgmtLqiReq_18 & 0xFFFF
        MOV     A,R6
        ADD     A,#0x14
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOV     A,#0x0
        MOVX    @DPTR,A
        LJMP    ??ZDO_ProcessMgmtLqiReq_19 & 0xFFFF
// 1431       }
// 1432     }
// 1433   }
// 1434   else
// 1435   {
// 1436     numItems = 0;
??ZDO_ProcessMgmtLqiReq_0:
        MOV     ?V1,#0x0
// 1437   }
// 1438 
// 1439   // Send response
// 1440   ZDP_MgmtLqiRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSuccess, maxItems,
// 1441                   StartIndex, numItems, table, false );
??ZDO_ProcessMgmtLqiReq_2:
        ; Setup parameters for call to function ZDP_MgmtLqiRsp
        MOV     ?V2,#0x0
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 60)
        MOV     R0,#?V10
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 62)
        MOV     A,?V1
        MOV     ?V1,A
        MOV     R0,#?V1
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 63)
        MOV     A,?V5
        MOV     ?V1,A
        MOV     R0,#?V1
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 64)
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     R4,#0x0
        MOV     A,?V12
        ADD     A,#0x2
        MOV     R2,A
        CLR     A
        ADDC    A,?V13
        MOV     R3,A
        MOV     A,?V12
        ADD     A,#0xf
        MOV     DPL,A
        CLR     A
        ADDC    A,?V13
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??ZDP_MgmtLqiRsp::?relay`; Banked call to: ZDP_MgmtLqiRsp
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 59)
        MOV     A,R1
// 1442 
// 1443   if ( table )
        MOV     A,?V10
        ORL     A,?V11
        JZ      ??ZDO_ProcessMgmtLqiReq_21
// 1444   {
// 1445     osal_mem_free( table );
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V10
        MOV     R3,?V11
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 1446   }
// 1447 }
??ZDO_ProcessMgmtLqiReq_21:
        MOV     A,#0x25
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     R7,#0xe
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
          CFI EndBlock cfiBlock20
// 1448 
// 1449 /*********************************************************************
// 1450  * @fn          ZDO_ProcessMgmtNwkDiscReq
// 1451  *
// 1452  * @brief       This function handles parsing the incoming Management
// 1453  *              Network Discover request and starts the request.
// 1454  *
// 1455  * @param       inMsg - incoming message (request)
// 1456  *
// 1457  * @return      none
// 1458  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1459 void ZDO_ProcessMgmtNwkDiscReq( zdoIncomingMsg_t *inMsg )
ZDO_ProcessMgmtNwkDiscReq:
          CFI Block cfiBlock21 Using cfiCommon0
          CFI Function ZDO_ProcessMgmtNwkDiscReq
        CODE
// 1460 {
        FUNCALL ZDO_ProcessMgmtNwkDiscReq, osal_build_uint32
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessMgmtNwkDiscReq, NLME_NwkDiscReq2
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessMgmtNwkDiscReq, NLME_NwkDiscTerm
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 7
        MOV     A,#-0x7
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     ?V0,R2
        MOV     ?V1,R3
// 1461   NLME_ScanFields_t scan;
// 1462   uint8             index;
// 1463   uint8             *msg;
// 1464 
// 1465   msg = inMsg->asdu;
        MOV     A,?V0
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
// 1466   scan.channels = osal_build_uint32( msg, 4 );
        ; Setup parameters for call to function osal_build_uint32
        MOV     R1,#0x4
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     A,R4
        MOV     R2,A
        MOV     A,R5
        MOV     R3,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?XSTORE_R0123
// 1467   msg += 4;
        MOV     A,R6
        ADD     A,#0x4
        MOV     R6,A
        JNC     ??ZDO_ProcessMgmtNwkDiscReq_0
        INC     R7
// 1468   scan.duration = *msg++;
??ZDO_ProcessMgmtNwkDiscReq_0:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1469   index         = *msg;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R0,A
// 1470   scan.scanType = ZMAC_ACTIVE_SCAN;
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1471   scan.scanApp  = NLME_DISC_SCAN;
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1472 
// 1473   // Save off the information to be used for the response
// 1474   zdappMgmtNwkDiscReqInProgress          = true;
        MOV     DPTR,#zdappMgmtNwkDiscReqInProgress
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1475   zdappMgmtNwkDiscRspAddr.addrMode       = Addr16Bit;
        MOV     DPTR,#zdappMgmtNwkDiscRspAddr + 8
        MOV     A,#0x2
        MOVX    @DPTR,A
// 1476   zdappMgmtNwkDiscRspAddr.addr.shortAddr = inMsg->srcAddr.addr.shortAddr;
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     DPTR,#zdappMgmtNwkDiscRspAddr
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
// 1477   zdappMgmtNwkDiscStartIndex             = index;
        MOV     A,R0
        MOV     DPTR,#zdappMgmtNwkDiscStartIndex
        MOVX    @DPTR,A
// 1478   zdappMgmtNwkDiscRspTransSeq            = inMsg->TransSeq;
        MOV     A,?V0
        ADD     A,#0xf
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     DPTR,#zdappMgmtNwkDiscRspTransSeq
        MOVX    @DPTR,A
// 1479 
// 1480   if ( NLME_NwkDiscReq2( &scan ) != ZSuccess )
        ; Setup parameters for call to function NLME_NwkDiscReq2
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??NLME_NwkDiscReq2::?relay`; Banked call to: NLME_NwkDiscReq2
        MOV     A,R1
        JZ      ??ZDO_ProcessMgmtNwkDiscReq_1
// 1481   {
// 1482     NLME_NwkDiscTerm();
        ; Setup parameters for call to function NLME_NwkDiscTerm
        LCALL   `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
// 1483 
// 1484     // zdappMgmtNwkDiscReqInProgress will be reset in the confirm callback
// 1485   }
// 1486 }
??ZDO_ProcessMgmtNwkDiscReq_1:
        MOV     A,#0x7
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
          CFI EndBlock cfiBlock21
// 1487 
// 1488 #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
// 1489 /*********************************************************************
// 1490  * @fn          ZDO_FinishProcessingMgmtNwkDiscReq
// 1491  *
// 1492  * @brief       This function finishes the processing of the Management
// 1493  *              Network Discover Request and generates the response.
// 1494  *
// 1495  *   Note:      This function will limit the number of items returned
// 1496  *              to ZDO_MAX_NWKDISC_ITEMS items.
// 1497  *
// 1498  * @param       ResultCountSrcAddr - source of the request
// 1499  * @param       msg - pointer to incoming message
// 1500  * @param       SecurityUse -
// 1501  *
// 1502  * @return      none
// 1503  */
// 1504 void ZDO_FinishProcessingMgmtNwkDiscReq( void )
// 1505 {
// 1506   byte count, i, ResultCount = 0;
// 1507   networkDesc_t *newDesc = NULL, *pList, *NetworkList;
// 1508 
// 1509   NetworkList = nwk_getNwkDescList();
// 1510 
// 1511   // Count the number of nwk descriptors in the list
// 1512   pList = nwk_getNwkDescList();
// 1513   while (pList)
// 1514   {
// 1515     ResultCount++;
// 1516     pList = pList->nextDesc;
// 1517   }
// 1518 
// 1519   if ( ZSTACK_ROUTER_BUILD )
// 1520   {
// 1521     // Look for my PanID.
// 1522     pList = nwk_getNwkDescList();
// 1523     while ( pList )
// 1524     {
// 1525       if ( pList->panId == _NIB.nwkPanId )
// 1526       {
// 1527         break;
// 1528       }
// 1529 
// 1530 
// 1531       if ( !pList->nextDesc )
// 1532       {
// 1533         break;
// 1534       }
// 1535       pList = pList->nextDesc;
// 1536     }
// 1537 
// 1538 
// 1539     // If my Pan not present (query to a star network ZC or an isolated ZR?),
// 1540     // prepend it.
// 1541     if ( !pList || (pList->panId != _NIB.nwkPanId) )
// 1542     {
// 1543       newDesc = (networkDesc_t *)osal_mem_alloc( sizeof( networkDesc_t ) );
// 1544       if ( newDesc )
// 1545       {
// 1546         byte pJoin;
// 1547 
// 1548         newDesc->panId = _NIB.nwkPanId;
// 1549         newDesc->logicalChannel = _NIB.nwkLogicalChannel;
// 1550         newDesc->version = NLME_GetProtocolVersion();
// 1551         newDesc->stackProfile = zgStackProfile;
// 1552 
// 1553         //Extended PanID
// 1554         osal_cpyExtAddr( newDesc->extendedPANID, _NIB.extendedPANID);
// 1555 
// 1556         ZMacGetReq( ZMacAssociationPermit, &pJoin );
// 1557         newDesc->chosenRouter = ((pJoin) ? ZDAppNwkAddr.addr.shortAddr :
// 1558                                            INVALID_NODE_ADDR);
// 1559 
// 1560         newDesc->nextDesc = NetworkList;
// 1561         NetworkList = newDesc;
// 1562         ResultCount++;
// 1563       }
// 1564     }
// 1565   }
// 1566 
// 1567   // Calc the count and apply a max count.
// 1568   if ( zdappMgmtNwkDiscStartIndex > ResultCount )
// 1569   {
// 1570     count = 0;
// 1571   }
// 1572   else
// 1573   {
// 1574     count = ResultCount - zdappMgmtNwkDiscStartIndex;
// 1575     if ( count > ZDO_MAX_NWKDISC_ITEMS )
// 1576     {
// 1577       count = ZDO_MAX_NWKDISC_ITEMS;
// 1578     }
// 1579 
// 1580     // Move the list pointer up to the start index.
// 1581     for ( i = 0; i < zdappMgmtNwkDiscStartIndex; i++ )
// 1582     {
// 1583       NetworkList = NetworkList->nextDesc;
// 1584     }
// 1585   }
// 1586 
// 1587   ZDP_MgmtNwkDiscRsp( zdappMgmtNwkDiscRspTransSeq,
// 1588                      &zdappMgmtNwkDiscRspAddr, ZSuccess, ResultCount,
// 1589                       zdappMgmtNwkDiscStartIndex,
// 1590                       count,
// 1591                       NetworkList,
// 1592                       false );
// 1593 
// 1594   if ( ZSTACK_ROUTER_BUILD )
// 1595   {
// 1596     if ( newDesc != NULL )
// 1597     {
// 1598       osal_mem_free( newDesc );
// 1599     }
// 1600   }
// 1601 
// 1602   NLME_NwkDiscTerm();
// 1603 }
// 1604 #endif
// 1605 
// 1606 /*********************************************************************
// 1607  * @fn          ZDO_ProcessMgmtRtgReq
// 1608  *
// 1609  * @brief       This function finishes the processing of the Management
// 1610  *              Routing Request and generates the response.
// 1611  *
// 1612  *   Note:      This function will limit the number of items returned
// 1613  *              to ZDO_MAX_RTG_ITEMS items.
// 1614  *
// 1615  * @param       inMsg - incoming message (request)
// 1616  *
// 1617  * @return      none
// 1618  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1619 void ZDO_ProcessMgmtRtgReq( zdoIncomingMsg_t *inMsg )
ZDO_ProcessMgmtRtgReq:
          CFI Block cfiBlock22 Using cfiCommon0
          CFI Function ZDO_ProcessMgmtRtgReq
        CODE
// 1620 {
        FUNCALL ZDO_ProcessMgmtRtgReq, NLME_GetRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessMgmtRtgReq, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessMgmtRtgReq, NLME_GetRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessMgmtRtgReq, ZDP_MgmtRtgRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessMgmtRtgReq, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     ?V2,R2
        MOV     ?V3,R3
// 1621   byte x;
// 1622   byte maxNumItems;
// 1623   byte numItems = 0;
        MOV     R6,#0x0
// 1624   uint8 *pBuf = NULL;
        MOV     ?V6,#0x0
        MOV     ?V7,#0x0
// 1625   rtgItem_t *pList;
// 1626   uint8 StartIndex = inMsg->asdu[0];
        MOV     A,?V2
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,?V3
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        MOV     R7,A
// 1627 
// 1628   // Get the number of table items
// 1629   NLME_GetRequest( nwkNumRoutingTableEntries, 0, &maxNumItems );
        ; Setup parameters for call to function NLME_GetRequest
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     R2,#0x0
        MOV     R3,#0x0
        MOV     R1,#-0x63
        LCALL   `??NLME_GetRequest::?relay`; Banked call to: NLME_GetRequest
        MOV     A,R1
// 1630 
// 1631   if ( maxNumItems > StartIndex )
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,R7
        CLR     C
        SUBB    A,R0
        JC      $+5
        LJMP    ??ZDO_ProcessMgmtRtgReq_0 & 0xFFFF
// 1632   {
// 1633     numItems = maxNumItems - StartIndex;    // Start at the passed in index
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R7
        MOV     R6,A
// 1634 
// 1635     // limit the size of the list
// 1636     if ( numItems > ZDO_MAX_RTG_ITEMS )
        MOV     A,R6
        CLR     C
        SUBB    A,#0xb
        JC      ??ZDO_ProcessMgmtRtgReq_1
// 1637     {
// 1638       numItems = ZDO_MAX_RTG_ITEMS;
        MOV     R6,#0xa
// 1639     }
// 1640 
// 1641     // Allocate the memory to build the table
// 1642     pBuf = osal_mem_alloc( (short)(sizeof( rtgItem_t ) * numItems) );
??ZDO_ProcessMgmtRtgReq_1:
        ; Setup parameters for call to function osal_mem_alloc
        MOV     A,R6
        MOV     R2,A
        MOV     R3,#0x0
        MOV     A,R2
        MOV     B,#0x7
        MUL     AB
        XCH     A,R2
        MOV     R0,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R0
        MOV     R0,A
        MOV     B,#0x7
        MOV     A,R3
        MUL     AB
        ADD     A,R0
        MOV     R3,A
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     ?V6,?V0
        MOV     ?V7,?V1
// 1643 
// 1644     if ( pBuf != NULL )
        MOV     A,?V6
        ORL     A,?V7
        JNZ     $+5
        LJMP    ??ZDO_ProcessMgmtRtgReq_2 & 0xFFFF
// 1645     {
// 1646       // Convert buffer to list
// 1647       pList = (rtgItem_t *)pBuf;
        MOV     ?V0,?V6
        MOV     ?V1,?V7
// 1648 
// 1649       // Loop through items and build list
// 1650       for ( x = 0; x < numItems; x++ )
        MOV     ?V4,#0x0
        SJMP    ??ZDO_ProcessMgmtRtgReq_3
// 1651       {
// 1652         NLME_GetRequest( nwkRoutingTable, (uint16)(x + StartIndex), (void*)pList );
// 1653 
// 1654         // Remap the status to the RoutingTableList Record Format defined in the ZigBee spec
// 1655         switch( pList->status )
// 1656         {
// 1657           case RT_ACTIVE:
// 1658             pList->status = ZDO_MGMT_RTG_ENTRY_ACTIVE;
// 1659             break;
// 1660 
// 1661           case RT_DISC:
// 1662             pList->status = ZDO_MGMT_RTG_ENTRY_DISCOVERY_UNDERWAY;
// 1663             break;
// 1664 
// 1665           case RT_LINK_FAIL:
// 1666             pList->status = ZDO_MGMT_RTG_ENTRY_DISCOVERY_FAILED;
// 1667             break;
// 1668 
// 1669           case RT_INIT:
// 1670           case RT_REPAIR:
// 1671           default:
// 1672             pList->status = ZDO_MGMT_RTG_ENTRY_INACTIVE;
??ZDO_ProcessMgmtRtgReq_4:
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#0x3
        MOVX    @DPTR,A
// 1673             break;
// 1674         }
// 1675 
// 1676         // Increment pointer to next record
// 1677         pList++;
??ZDO_ProcessMgmtRtgReq_5:
        MOV     A,?V0
        ADD     A,#0x7
        MOV     ?V0,A
        JNC     ??ZDO_ProcessMgmtRtgReq_6
        INC     ?V1
??ZDO_ProcessMgmtRtgReq_6:
        INC     ?V4
??ZDO_ProcessMgmtRtgReq_3:
        MOV     A,?V4
        CLR     C
        SUBB    A,R6
        JNC     ??ZDO_ProcessMgmtRtgReq_0
        ; Setup parameters for call to function NLME_GetRequest
        MOV     R4,?V0
        MOV     R5,?V1
        MOV     R0,?V4
        MOV     R1,#0x0
        MOV     A,R7
        MOV     R2,A
        MOV     R3,#0x0
        MOV     A,R0
        ADD     A,R2
        MOV     R2,A
        MOV     A,R1
        ADDC    A,R3
        MOV     R3,A
        MOV     R1,#-0x75
        LCALL   `??NLME_GetRequest::?relay`; Banked call to: NLME_GetRequest
        MOV     A,R1
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        DEC     A
        JZ      ??ZDO_ProcessMgmtRtgReq_7
        DEC     A
        JZ      ??ZDO_ProcessMgmtRtgReq_8
        DEC     A
        JZ      ??ZDO_ProcessMgmtRtgReq_9
        SJMP    ??ZDO_ProcessMgmtRtgReq_4
??ZDO_ProcessMgmtRtgReq_7:
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
        SJMP    ??ZDO_ProcessMgmtRtgReq_5
??ZDO_ProcessMgmtRtgReq_8:
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#0x1
        MOVX    @DPTR,A
        SJMP    ??ZDO_ProcessMgmtRtgReq_5
??ZDO_ProcessMgmtRtgReq_9:
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#0x2
        MOVX    @DPTR,A
        SJMP    ??ZDO_ProcessMgmtRtgReq_5
// 1678       }
// 1679     }
// 1680     else
// 1681     {
// 1682       numItems = 0;
??ZDO_ProcessMgmtRtgReq_2:
        MOV     R6,#0x0
// 1683     }
// 1684   }
// 1685 
// 1686   // Send response
// 1687   ZDP_MgmtRtgRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSuccess, maxNumItems, StartIndex, numItems,
// 1688                         (rtgItem_t *)pBuf, false );
??ZDO_ProcessMgmtRtgReq_0:
        ; Setup parameters for call to function ZDP_MgmtRtgRsp
        MOV     ?V0,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R0,#?V6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     A,R6
        MOV     ?V0,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 21)
        MOV     A,R7
        MOV     ?V0,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     R4,#0x0
        MOV     A,?V2
        ADD     A,#0x2
        MOV     R2,A
        CLR     A
        ADDC    A,?V3
        MOV     R3,A
        MOV     A,?V2
        ADD     A,#0xf
        MOV     DPL,A
        CLR     A
        ADDC    A,?V3
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??ZDP_MgmtRtgRsp::?relay`; Banked call to: ZDP_MgmtRtgRsp
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     A,R1
// 1689 
// 1690   if ( pBuf != NULL )
        MOV     A,?V6
        ORL     A,?V7
        JZ      ??ZDO_ProcessMgmtRtgReq_10
// 1691   {
// 1692     osal_mem_free( pBuf );
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V6
        MOV     R3,?V7
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 1693   }
// 1694 }
??ZDO_ProcessMgmtRtgReq_10:
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
          CFI EndBlock cfiBlock22
// 1695 
// 1696 /*********************************************************************
// 1697  * @fn          ZDO_ProcessMgmtBindReq
// 1698  *
// 1699  * @brief       This function finishes the processing of the Management
// 1700  *              Bind Request and generates the response.
// 1701  *
// 1702  *   Note:      This function will limit the number of items returned
// 1703  *              to ZDO_MAX_BIND_ITEMS items.
// 1704  *
// 1705  * @param       inMsg - incoming message (request)
// 1706  *
// 1707  * @return      none
// 1708  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1709 void ZDO_ProcessMgmtBindReq( zdoIncomingMsg_t *inMsg )
ZDO_ProcessMgmtBindReq:
          CFI Block cfiBlock23 Using cfiCommon0
          CFI Function ZDO_ProcessMgmtBindReq
        CODE
// 1710 {
        FUNCALL ZDO_ProcessMgmtBindReq, APSME_GetRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessMgmtBindReq, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessMgmtBindReq, APSME_GetRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessMgmtBindReq, ZDP_MgmtBindRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessMgmtBindReq, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V8
        REQUIRE ?V9
        MOV     A,#-0x12
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     ?V4,R2
        MOV     ?V5,R3
// 1711 #if defined ( REFLECTOR )
// 1712   byte x;
// 1713   uint16 maxNumItems;
// 1714   uint16 numItems;
// 1715   uint8 *pBuf = NULL;
        MOV     ?V8,#0x0
        MOV     ?V9,#0x0
// 1716   apsBindingItem_t *pList;
// 1717   uint8 StartIndex = inMsg->asdu[0];
        MOV     A,?V4
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,?V5
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        MOV     ?V2,A
// 1718   uint8 status;
// 1719 
// 1720   // Get the number of table items
// 1721   APSME_GetRequest( apsNumBindingTableEntries, 0, (byte*)(&maxNumItems) );
        ; Setup parameters for call to function APSME_GetRequest
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     R2,#0x0
        MOV     R3,#0x0
        MOV     R1,#-0x5d
        LCALL   `??APSME_GetRequest::?relay`; Banked call to: APSME_GetRequest
        MOV     A,R1
// 1722 
// 1723   if ( maxNumItems > StartIndex )
        MOV     R0,?V2
        MOV     R1,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        CLR     C
        MOV     A,R0
        SUBB    A,R2
        MOV     A,R1
        SUBB    A,R3
        JNC     ??ZDO_ProcessMgmtBindReq_0
// 1724   {
// 1725     numItems = maxNumItems - StartIndex;    // Start at the passed in index
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R0,?V2
        MOV     R1,#0x0
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R0
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,R1
        MOV     R7,A
        SJMP    ??ZDO_ProcessMgmtBindReq_1
// 1726   }
// 1727   else
// 1728   {
// 1729     numItems = 0;
??ZDO_ProcessMgmtBindReq_0:
        MOV     R6,#0x0
        MOV     R7,#0x0
// 1730   }
// 1731 
// 1732   // limit the size of the list
// 1733   if ( numItems > ZDO_MAX_BIND_ITEMS )
??ZDO_ProcessMgmtBindReq_1:
        CLR     C
        MOV     A,R6
        SUBB    A,#0x4
        MOV     A,R7
        SUBB    A,#0x0
        JC      ??ZDO_ProcessMgmtBindReq_2
// 1734   {
// 1735     numItems = ZDO_MAX_BIND_ITEMS;
        MOV     R6,#0x3
        MOV     R7,#0x0
// 1736   }
// 1737 
// 1738   // Allocate the memory to build the table
// 1739   if ( numItems && (pBuf = osal_mem_alloc( sizeof( apsBindingItem_t ) * numItems )) )
??ZDO_ProcessMgmtBindReq_2:
        MOV     A,R6
        ORL     A,R7
        JZ      ??ZDO_ProcessMgmtBindReq_3
        ; Setup parameters for call to function osal_mem_alloc
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     A,R2
        MOV     B,#0x15
        MUL     AB
        XCH     A,R2
        MOV     R0,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R0
        MOV     R0,A
        MOV     B,#0x15
        MOV     A,R3
        MUL     AB
        ADD     A,R0
        MOV     R3,A
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     ?V8,?V0
        MOV     ?V9,?V1
        MOV     A,?V8
        ORL     A,?V9
        JZ      ??ZDO_ProcessMgmtBindReq_3
// 1740   {
// 1741     status = ZSuccess;
        MOV     ?V3,#0x0
// 1742 
// 1743     // Convert buffer to list
// 1744     pList = (apsBindingItem_t *)pBuf;
        MOV     ?V0,?V8
        MOV     ?V1,?V9
// 1745 
// 1746     // Loop through items and build list
// 1747     for ( x = 0; x < numItems; x++ )
        MOV     ?V6,#0x0
??ZDO_ProcessMgmtBindReq_4:
        MOV     R0,?V6
        MOV     R1,#0x0
        CLR     C
        MOV     A,R0
        SUBB    A,R6
        MOV     A,R1
        SUBB    A,R7
        JNC     ??ZDO_ProcessMgmtBindReq_5
// 1748     {
// 1749       APSME_GetRequest( apsBindingTable, (x + StartIndex), (void*)pList );
        ; Setup parameters for call to function APSME_GetRequest
        MOV     R4,?V0
        MOV     R5,?V1
        MOV     R2,?V6
        MOV     R3,#0x0
        MOV     R0,?V2
        MOV     R1,#0x0
        MOV     A,R2
        ADD     A,R0
        MOV     R2,A
        MOV     A,R3
        ADDC    A,R1
        MOV     R3,A
        MOV     R1,#-0x5e
        LCALL   `??APSME_GetRequest::?relay`; Banked call to: APSME_GetRequest
        MOV     A,R1
// 1750       pList++;
        MOV     A,?V0
        ADD     A,#0x15
        MOV     ?V0,A
        JNC     ??ZDO_ProcessMgmtBindReq_6
        INC     ?V1
// 1751     }
??ZDO_ProcessMgmtBindReq_6:
        INC     ?V6
        SJMP    ??ZDO_ProcessMgmtBindReq_4
// 1752 
// 1753   }
// 1754   else
// 1755   {
// 1756     status = ZDP_NOT_PERMITTED;
??ZDO_ProcessMgmtBindReq_3:
        MOV     ?V3,#-0x75
// 1757     numItems = 0;
        MOV     R6,#0x0
        MOV     R7,#0x0
// 1758   }
// 1759 
// 1760   // Send response
// 1761   ZDP_MgmtBindRsp( inMsg->TransSeq, &(inMsg->srcAddr), status, (byte)maxNumItems, StartIndex,
// 1762                    (byte)numItems, (apsBindingItem_t *)pBuf, false );
??ZDO_ProcessMgmtBindReq_5:
        ; Setup parameters for call to function ZDP_MgmtBindRsp
        MOV     ?V0,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 21)
        MOV     R0,#?V8
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     A,R6
        MOV     ?V0,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     A,?V2
        MOV     ?V0,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        MOV     R5,A
        MOV     R4,?V3
        MOV     A,?V4
        ADD     A,#0x2
        MOV     R2,A
        CLR     A
        ADDC    A,?V5
        MOV     R3,A
        MOV     A,?V4
        ADD     A,#0xf
        MOV     DPL,A
        CLR     A
        ADDC    A,?V5
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??ZDP_MgmtBindRsp::?relay`; Banked call to: ZDP_MgmtBindRsp
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     A,R1
// 1763 
// 1764   if ( pBuf )
        MOV     A,?V8
        ORL     A,?V9
        JZ      ??ZDO_ProcessMgmtBindReq_7
// 1765   {
// 1766     osal_mem_free( pBuf );
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V8
        MOV     R3,?V9
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 1767   }
// 1768 #else
// 1769   (void)inMsg;
// 1770 #endif
// 1771 }
??ZDO_ProcessMgmtBindReq_7:
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R7,#0xa
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
          CFI EndBlock cfiBlock23
// 1772 
// 1773 /*********************************************************************
// 1774  * @fn          ZDO_ProcessMgmtDirectJoinReq
// 1775  *
// 1776  * @brief       This function finishes the processing of the Management
// 1777  *              Direct Join Request and generates the response.
// 1778  *
// 1779  * @param       inMsg - incoming message (request)
// 1780  *
// 1781  * @return      none
// 1782  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1783 void ZDO_ProcessMgmtDirectJoinReq( zdoIncomingMsg_t *inMsg )
ZDO_ProcessMgmtDirectJoinReq:
          CFI Block cfiBlock24 Using cfiCommon0
          CFI Function ZDO_ProcessMgmtDirectJoinReq
        CODE
// 1784 {
        FUNCALL ZDO_ProcessMgmtDirectJoinReq, NLME_DirectJoinRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessMgmtDirectJoinReq, ZDP_SendData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1785   uint8 *deviceAddr;
// 1786   uint8 capInfo;
// 1787   uint8 stat;
// 1788 
// 1789   // Parse the message
// 1790   deviceAddr = inMsg->asdu;
        MOV     A,R6
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
// 1791   capInfo = inMsg->asdu[Z_EXTADDR_LEN];
        MOV     A,R6
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x8
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R1,A
// 1792 
// 1793   stat = (byte) NLME_DirectJoinRequest( deviceAddr, capInfo );
        ; Setup parameters for call to function NLME_DirectJoinRequest
        LCALL   `??NLME_DirectJoinRequest::?relay`; Banked call to: NLME_DirectJoinRequest
        MOV     A,R1
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1794 
// 1795   ZDP_MgmtDirectJoinRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat, false );
        ; Setup parameters for call to function ZDP_SendData
        MOV     ?V0,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     ?V0,#0x35
        MOV     ?V1,#-0x80
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R1,#0x1
        MOV     A,R6
        ADD     A,#0x2
        MOV     R4,A
        CLR     A
        ADDC    A,R7
        MOV     R5,A
        MOV     A,R6
        ADD     A,#0xf
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        MOV     A,R1
// 1796 }
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
          CFI EndBlock cfiBlock24
// 1797 
// 1798 /*********************************************************************
// 1799  * @fn          ZDO_ProcessMgmtLeaveReq
// 1800  *
// 1801  * @brief       This function processes a Management Leave Request
// 1802  *              and generates the response.
// 1803  *
// 1804  * @param       inMsg - incoming message (request)
// 1805  *
// 1806  * @return      none
// 1807  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1808 void ZDO_ProcessMgmtLeaveReq( zdoIncomingMsg_t *inMsg )
ZDO_ProcessMgmtLeaveReq:
          CFI Block cfiBlock25 Using cfiCommon0
          CFI Function ZDO_ProcessMgmtLeaveReq
        CODE
// 1809 {
        FUNCALL ZDO_ProcessMgmtLeaveReq, AddrMgrExtAddrValid
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessMgmtLeaveReq, NLME_GetExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessMgmtLeaveReq, sAddrExtCmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessMgmtLeaveReq, NLME_LeaveReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessMgmtLeaveReq, NLME_SetPollRate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessMgmtLeaveReq, ZDP_SendData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 6
        MOV     A,#-0x6
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     ?V0,R2
        MOV     ?V1,R3
// 1810   NLME_LeaveReq_t req;
// 1811   ZStatus_t       status;
// 1812   uint8           option;
// 1813   uint8 *msg = inMsg->asdu;
        MOV     A,?V0
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
// 1814 
// 1815   if ( ( AddrMgrExtAddrValid( msg ) == FALSE                 ) ||
// 1816        ( osal_ExtAddrEqual( msg, NLME_GetExtAddr() ) == TRUE )    )
        ; Setup parameters for call to function AddrMgrExtAddrValid
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??AddrMgrExtAddrValid::?relay`; Banked call to: AddrMgrExtAddrValid
        MOV     A,R1
        JZ      ??ZDO_ProcessMgmtLeaveReq_0
        ; Setup parameters for call to function NLME_GetExtAddr
        LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
        MOV     ?V2,R2
        MOV     ?V3,R3
        MOV     R4,?V2
        MOV     R5,?V3
        ; Setup parameters for call to function sAddrExtCmp
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
        MOV     A,R1
        XRL     A,#0x1
        JNZ     ??ZDO_ProcessMgmtLeaveReq_1
// 1817   {
// 1818     // Remove this device
// 1819     req.extAddr = NULL;
??ZDO_ProcessMgmtLeaveReq_0:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
        SJMP    ??ZDO_ProcessMgmtLeaveReq_2
// 1820   }
// 1821   else
// 1822   {
// 1823     // Remove child device
// 1824     req.extAddr = msg;
??ZDO_ProcessMgmtLeaveReq_1:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
// 1825   }
// 1826 
// 1827   option = msg[Z_EXTADDR_LEN];
??ZDO_ProcessMgmtLeaveReq_2:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
// 1828   if ( option & ZDP_MGMT_LEAVE_REQ_RC )
        MOV     A,R0
        MOV     C,0xE0 /* A   */.6
        JNC     ??ZDO_ProcessMgmtLeaveReq_3
// 1829   {
// 1830     req.removeChildren = TRUE;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1831   }
// 1832 
// 1833   if ( option & ZDP_MGMT_LEAVE_REQ_REJOIN )
??ZDO_ProcessMgmtLeaveReq_3:
        MOV     A,R0
        MOV     C,0xE0 /* A   */.7
        JNC     ??ZDO_ProcessMgmtLeaveReq_4
// 1834   {
// 1835      req.rejoin = TRUE;
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1836   }
// 1837 
// 1838   req.silent = FALSE;
??ZDO_ProcessMgmtLeaveReq_4:
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x0
        MOVX    @DPTR,A
// 1839 
// 1840   status = NLME_LeaveReq( &req );
        ; Setup parameters for call to function NLME_LeaveReq
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??NLME_LeaveReq::?relay`; Banked call to: NLME_LeaveReq
        MOV     A,R1
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1841 
// 1842   if ( ZG_BUILD_ENDDEVICE_TYPE )
// 1843   {
// 1844     // Stop polling and get ready to reset
// 1845     NLME_SetPollRate( 0 );
        ; Setup parameters for call to function NLME_SetPollRate
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
// 1846   }
// 1847 
// 1848   ZDP_MgmtLeaveRsp( inMsg->TransSeq, &(inMsg->srcAddr), status, FALSE );
        ; Setup parameters for call to function ZDP_SendData
        MOV     ?V2,#0x0
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V2,R0
        MOV     ?V3,R1
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 21)
        MOV     ?V2,#0x34
        MOV     ?V3,#-0x80
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     R1,#0x1
        MOV     A,?V0
        ADD     A,#0x2
        MOV     R4,A
        CLR     A
        ADDC    A,?V1
        MOV     R5,A
        MOV     A,?V0
        ADD     A,#0xf
        MOV     R2,A
        CLR     A
        ADDC    A,?V1
        MOV     R3,A
        LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     A,R1
// 1849 }
        MOV     A,#0x6
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
          CFI EndBlock cfiBlock25
// 1850 
// 1851 
// 1852 /*********************************************************************
// 1853  * @fn          ZDO_ProcessMgmtPermitJoinReq
// 1854  *
// 1855  * @brief       This function processes a Management Permit Join Request
// 1856  *              and generates the response.
// 1857  *
// 1858  * @param       inMsg - incoming message (request)
// 1859  *
// 1860  * @return      none
// 1861  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1862 void ZDO_ProcessMgmtPermitJoinReq( zdoIncomingMsg_t *inMsg )
ZDO_ProcessMgmtPermitJoinReq:
          CFI Block cfiBlock26 Using cfiCommon0
          CFI Function ZDO_ProcessMgmtPermitJoinReq
        CODE
// 1863 {
        FUNCALL ZDO_ProcessMgmtPermitJoinReq, NLME_PermitJoiningRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessMgmtPermitJoinReq, ZDP_SendData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1864   uint8 stat;
// 1865   uint8 duration;
// 1866   uint8 tcsig;
// 1867 
// 1868   duration = inMsg->asdu[ZDP_MGMT_PERMIT_JOIN_REQ_DURATION];
        MOV     A,R6
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        MOV     R1,A
// 1869   tcsig    = inMsg->asdu[ZDP_MGMT_PERMIT_JOIN_REQ_TC_SIG];
        MOV     A,R6
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0,A
// 1870 
// 1871   // Set the network layer permit join duration
// 1872   stat = (byte) NLME_PermitJoiningRequest( duration );
        ; Setup parameters for call to function NLME_PermitJoiningRequest
        LCALL   `??NLME_PermitJoiningRequest::?relay`; Banked call to: NLME_PermitJoiningRequest
        MOV     A,R1
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1873 
// 1874   // Handle the Trust Center Significance
// 1875   if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
// 1876   {
// 1877     if ( tcsig == TRUE )
// 1878     {
// 1879       ZDSecMgrPermitJoining( duration );
// 1880     }
// 1881   }
// 1882 
// 1883   // Send a response if unicast
// 1884   if ( !inMsg->wasBroadcast )
        MOV     A,R6
        ADD     A,#0xb
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        JNZ     ??ZDO_ProcessMgmtPermitJoinReq_0
// 1885   {
// 1886     ZDP_MgmtPermitJoinRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat, false );
        ; Setup parameters for call to function ZDP_SendData
        MOV     ?V0,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     ?V0,#0x36
        MOV     ?V1,#-0x80
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R1,#0x1
        MOV     A,R6
        ADD     A,#0x2
        MOV     R4,A
        CLR     A
        ADDC    A,R7
        MOV     R5,A
        MOV     A,R6
        ADD     A,#0xf
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        MOV     A,R1
// 1887   }
// 1888 }
??ZDO_ProcessMgmtPermitJoinReq_0:
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
          CFI EndBlock cfiBlock26
// 1889 
// 1890 /*
// 1891  * This function stub allows the next higher layer to be notified of
// 1892  * a permit joining timeout.
// 1893  */
// 1894 /*********************************************************************
// 1895  * @fn          ZDO_ProcessMgmtPermitJoinTimeout
// 1896  *
// 1897  * @brief       This function stub allows the next higher layer to be
// 1898  *              notified of a permit joining timeout. Currently, this
// 1899  *              directly bypasses the APS layer.
// 1900  *
// 1901  * @param       none
// 1902  *
// 1903  * @return      none
// 1904  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1905 void ZDO_ProcessMgmtPermitJoinTimeout( void )
NLME_PermitJoiningTimeout:
          CFI Block cfiBlock27 Using cfiCommon0
          CFI Function NLME_PermitJoiningTimeout
        CODE
// 1906 {
        ; Saved register size: 0
        ; Auto size: 0
// 1907   #if defined( ZDO_MGMT_PERMIT_JOIN_RESPONSE )
// 1908   // Currently, only the ZDSecMgr needs to be notified
// 1909   if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
// 1910   {
// 1911     ZDSecMgrPermitJoiningTimeout();
// 1912   }
// 1913   #endif
// 1914 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock27
// 1915 
// 1916 /*********************************************************************
// 1917  * @fn          ZDO_ProcessUserDescReq
// 1918  *
// 1919  * @brief       This function finishes the processing of the User
// 1920  *              Descriptor Request and generates the response.
// 1921  *
// 1922  * @param       inMsg - incoming message (request)
// 1923  *
// 1924  * @return      none
// 1925  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1926 void ZDO_ProcessUserDescReq( zdoIncomingMsg_t *inMsg )
ZDO_ProcessUserDescReq:
          CFI Block cfiBlock28 Using cfiCommon0
          CFI Function ZDO_ProcessUserDescReq
        CODE
// 1927 {
        FUNCALL ZDO_ProcessUserDescReq, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessUserDescReq, ZDP_UserDescRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessUserDescReq, ZDP_GenericRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 17
        MOV     A,#-0x11
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 29)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1928   uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
        MOV     A,R6
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R3,#0x0
        MOV     A,R6
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     ?V0,A
        MOV     A,R3
        ADDC    A,R1
        MOV     ?V1,A
// 1929   UserDescriptorFormat_t userDesc;
// 1930 
// 1931   if ( (aoi == ZDAppNwkAddr.addr.shortAddr) && (ZSUCCESS == osal_nv_read(
// 1932              ZCD_NV_USERDESC, 0, sizeof(UserDescriptorFormat_t), &userDesc )) )
        MOV     DPTR,#ZDAppNwkAddr
        MOVX    A,@DPTR
        XRL     A,?V0
        JNZ     ??ZDO_ProcessUserDescReq_0
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V1
??ZDO_ProcessUserDescReq_0:
        JNZ     ??ZDO_ProcessUserDescReq_1
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V2,R0
        MOV     ?V3,R1
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 31)
        MOV     ?V2,#0x11
        MOV     ?V3,#0x0
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 33)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x7f
        MOV     R3,#0x0
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 29)
        MOV     A,R1
        JNZ     ??ZDO_ProcessUserDescReq_1
// 1933   {
// 1934     ZDP_UserDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), aoi, &userDesc, false );
        ; Setup parameters for call to function ZDP_UserDescRsp
        MOV     ?V2,#0x0
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 30)
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V2,R0
        MOV     ?V3,R1
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 32)
        MOV     R4,?V0
        MOV     R5,?V1
        MOV     A,R6
        ADD     A,#0x2
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        MOV     A,R6
        ADD     A,#0xf
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??ZDP_UserDescRsp::?relay`; Banked call to: ZDP_UserDescRsp
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 29)
        MOV     A,R1
        SJMP    ??ZDO_ProcessUserDescReq_2
// 1935   }
// 1936   else
// 1937   {
// 1938     ZDP_GenericRsp(inMsg->TransSeq, &(inMsg->srcAddr),
// 1939            ZDP_NOT_SUPPORTED, aoi, User_Desc_rsp, inMsg->SecurityUse );
??ZDO_ProcessUserDescReq_1:
        ; Setup parameters for call to function ZDP_GenericRsp
        MOV     ?V2,#0x11
        MOV     ?V3,#-0x80
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 31)
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 33)
        MOV     A,R6
        ADD     A,#0xe
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     R4,#-0x7c
        MOV     A,R6
        ADD     A,#0x2
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        MOV     A,R6
        ADD     A,#0xf
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 29)
        MOV     A,R1
// 1940   }
// 1941 }
??ZDO_ProcessUserDescReq_2:
        MOV     A,#0x11
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
          CFI EndBlock cfiBlock28
// 1942 
// 1943 /*********************************************************************
// 1944  * @fn          ZDO_ProcessUserDescSet
// 1945  *
// 1946  * @brief       This function finishes the processing of the User
// 1947  *              Descriptor Set and generates the response.
// 1948  *
// 1949  * @param       inMsg - incoming message (request)
// 1950  *
// 1951  * @return      none
// 1952  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1953 void ZDO_ProcessUserDescSet( zdoIncomingMsg_t *inMsg )
ZDO_ProcessUserDescSet:
          CFI Block cfiBlock29 Using cfiCommon0
          CFI Function ZDO_ProcessUserDescSet
        CODE
// 1954 {
        FUNCALL ZDO_ProcessUserDescSet, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessUserDescSet, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessUserDescSet, ZDP_SendData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 20
        MOV     A,#-0x14
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 35)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1955   uint8 *msg;
// 1956   uint16 aoi;
// 1957   UserDescriptorFormat_t userDesc;
// 1958   uint8 outMsg[3];
// 1959   uint8 status;
// 1960 
// 1961   msg = inMsg->asdu;
        MOV     A,R6
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
// 1962   aoi = BUILD_UINT16( msg[0], msg[1] );
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R5,#0x0
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R3,#0x0
        CLR     A
        XCH     A,R2
        MOV     R3,A
        MOV     A,R4
        ADD     A,R2
        MOV     ?V0,A
        MOV     A,R5
        ADDC    A,R3
        MOV     ?V1,A
// 1963 
// 1964   if ( aoi == ZDAppNwkAddr.addr.shortAddr )
        MOV     DPTR,#ZDAppNwkAddr
        MOVX    A,@DPTR
        XRL     A,?V0
        JNZ     ??ZDO_ProcessUserDescSet_0
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V1
??ZDO_ProcessUserDescSet_0:
        JZ      $+5
        LJMP    ??ZDO_ProcessUserDescSet_1 & 0xFFFF
// 1965   {
// 1966     userDesc.len = (msg[2] < AF_MAX_USER_DESCRIPTOR_LEN) ? msg[2] : AF_MAX_USER_DESCRIPTOR_LEN;
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x10
        JNC     ??ZDO_ProcessUserDescSet_2
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        SJMP    ??ZDO_ProcessUserDescSet_3
??ZDO_ProcessUserDescSet_2:
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x10
        MOVX    @DPTR,A
// 1967     msg ++;  // increment one for the length field
??ZDO_ProcessUserDescSet_3:
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOV     R0,DPL
        MOV     R1,DPH
// 1968 
// 1969     osal_memcpy( userDesc.desc, &msg[2], userDesc.len );
        ; Setup parameters for call to function osal_memcpy
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     R3,#0x0
        MOV     ?V4,R1
        MOV     ?V5,R2
        MOV     ?V6,R3
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 38)
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R5,#0x0
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 35)
// 1970     osal_nv_write( ZCD_NV_USERDESC, 0, sizeof(UserDescriptorFormat_t), &userDesc );
        ; Setup parameters for call to function osal_nv_write
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V2,R0
        MOV     ?V3,R1
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 37)
        MOV     ?V2,#0x11
        MOV     ?V3,#0x0
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 39)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x7f
        MOV     R3,#0x0
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 35)
        MOV     A,R1
// 1971     if ( userDesc.len != 0 )
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        JZ      ??ZDO_ProcessUserDescSet_4
// 1972     {
// 1973       ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
        MOV     DPTR,#ZDO_Config_Node_Descriptor
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.4
        MOVX    @DPTR,A
        SJMP    ??ZDO_ProcessUserDescSet_5
// 1974     }
// 1975     else
// 1976     {
// 1977       ZDO_Config_Node_Descriptor.UserDescAvail = FALSE;
??ZDO_ProcessUserDescSet_4:
        MOV     DPTR,#ZDO_Config_Node_Descriptor
        MOVX    A,@DPTR
        CLR     0xE0 /* A   */.4
        MOVX    @DPTR,A
// 1978     }
// 1979 
// 1980     status = ZDP_SUCCESS;
??ZDO_ProcessUserDescSet_5:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x0
        MOVX    @DPTR,A
        SJMP    ??ZDO_ProcessUserDescSet_6
// 1981   }
// 1982   else
// 1983   {
// 1984     status =  ZDP_NOT_SUPPORTED;
??ZDO_ProcessUserDescSet_1:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x7c
        MOVX    @DPTR,A
// 1985   }
// 1986 
// 1987   outMsg[0] = status;
// 1988   outMsg[1] = LO_UINT16( aoi );
??ZDO_ProcessUserDescSet_6:
        MOV     A,?V0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1989   outMsg[2] = LO_UINT16( aoi );
        MOV     A,?V0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1990 
// 1991   ZDP_SendData( &(inMsg->TransSeq), &(inMsg->srcAddr), User_Desc_conf, 3, outMsg,
// 1992                inMsg->SecurityUse );
        ; Setup parameters for call to function ZDP_SendData
        MOV     A,R6
        ADD     A,#0xe
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 36)
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 38)
        MOV     ?V0,#0x14
        MOV     ?V1,#-0x80
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 40)
        MOV     R1,#0x3
        MOV     A,R6
        ADD     A,#0x2
        MOV     R4,A
        CLR     A
        ADDC    A,R7
        MOV     R5,A
        MOV     A,R6
        ADD     A,#0xf
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 35)
        MOV     A,R1
// 1993 }
        MOV     A,#0x14
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     R7,#0x7
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
          CFI EndBlock cfiBlock29
// 1994 
// 1995 /*********************************************************************
// 1996  * @fn          ZDO_ProcessDeviceAnnce
// 1997  *
// 1998  * @brief       This function processes a device annouce message.
// 1999  *
// 2000  * @param       inMsg - incoming message
// 2001  *
// 2002  * @return      none
// 2003  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2004 void ZDO_ProcessDeviceAnnce( zdoIncomingMsg_t *inMsg )
ZDO_ProcessDeviceAnnce:
          CFI Block cfiBlock30 Using cfiCommon0
          CFI Function ZDO_ProcessDeviceAnnce
        CODE
// 2005 {
        FUNCALL ZDO_ProcessDeviceAnnce, ZDO_ParseDeviceAnnce
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessDeviceAnnce, NLME_GetExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessDeviceAnnce, sAddrExtCmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessDeviceAnnce, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessDeviceAnnce, nwkNeighborRemoveAllStranded
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessDeviceAnnce, NLME_CheckNewAddrSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessDeviceAnnce, NLME_GetCoordExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessDeviceAnnce, sAddrExtCmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessDeviceAnnce, NLME_GetCoordShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessDeviceAnnce, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessDeviceAnnce, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessDeviceAnnce, AssocGetWithExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessDeviceAnnce, AssocRemove
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessDeviceAnnce, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessDeviceAnnce, AssocChangeNwkAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessDeviceAnnce, ZDApp_NVUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessDeviceAnnce, nwkNeighborUpdateNwkAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessDeviceAnnce, RTG_RemoveRtgEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessDeviceAnnce, AddrMgrEntryLookupNwk
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessDeviceAnnce, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessDeviceAnnce, sAddrExtCmp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessDeviceAnnce, AddrMgrExtAddrSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessDeviceAnnce, AddrMgrEntryUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessDeviceAnnce, AddrMgrExtAddrSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessDeviceAnnce, AddrMgrEntryLookupExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ProcessDeviceAnnce, AddrMgrEntryUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 32
        MOV     A,#-0x20
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 42)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 2006   ZDO_DeviceAnnce_t Annce;
// 2007   AddrMgrEntry_t addrEntry;
// 2008   uint8 parentExt[Z_EXTADDR_LEN];
// 2009 
// 2010   // Parse incoming message
// 2011   ZDO_ParseDeviceAnnce( inMsg, &Annce );
        ; Setup parameters for call to function ZDO_ParseDeviceAnnce
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??ZDO_ParseDeviceAnnce::?relay`; Banked call to: ZDO_ParseDeviceAnnce
// 2012 
// 2013   if ( ZSTACK_END_DEVICE_BUILD )
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??ZDO_ProcessDeviceAnnce_0
// 2014   {
// 2015     // Make sure the message didn't come from myself - end device only
// 2016     if ( osal_ExtAddrEqual( NLME_GetExtAddr(), Annce.extAddr ) && Annce.nwkAddr == NLME_GetShortAddr() )
        ; Setup parameters for call to function NLME_GetExtAddr
        LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R2,?V0
        MOV     R3,?V1
        ; Setup parameters for call to function sAddrExtCmp
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
        MOV     A,R1
        JZ      ??ZDO_ProcessDeviceAnnce_0
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R0,?V0
        MOV     R1,?V1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??ZDO_ProcessDeviceAnnce_1
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??ZDO_ProcessDeviceAnnce_1:
        JNZ     $+5
        LJMP    ??ZDO_ProcessDeviceAnnce_2 & 0xFFFF
// 2017     {
// 2018       return;
// 2019     }
// 2020   }
// 2021 
// 2022 #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
// 2023   // Clean up the neighbor table
// 2024   nwkNeighborRemoveAllStranded();
??ZDO_ProcessDeviceAnnce_0:
        ; Setup parameters for call to function nwkNeighborRemoveAllStranded
        LCALL   `??nwkNeighborRemoveAllStranded::?relay`; Banked call to: nwkNeighborRemoveAllStranded
// 2025 
// 2026   // If address conflict is detected, no need to update the address manager
// 2027   if ( NLME_CheckNewAddrSet( Annce.nwkAddr, Annce.extAddr )== ZFailure )
        ; Setup parameters for call to function NLME_CheckNewAddrSet
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   `??NLME_CheckNewAddrSet::?relay`; Banked call to: NLME_CheckNewAddrSet
        MOV     A,R1
        XRL     A,#0x1
        JNZ     $+5
        LJMP    ??ZDO_ProcessDeviceAnnce_2 & 0xFFFF
// 2028   {
// 2029     return;
// 2030   }
// 2031 #endif
// 2032 
// 2033 #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
// 2034   // Check for parent's address
// 2035   NLME_GetCoordExtAddr( parentExt );
        ; Setup parameters for call to function NLME_GetCoordExtAddr
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??NLME_GetCoordExtAddr::?relay`; Banked call to: NLME_GetCoordExtAddr
// 2036   if ( osal_ExtAddrEqual( parentExt, Annce.extAddr ) )
        ; Setup parameters for call to function sAddrExtCmp
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
        MOV     A,R1
        JZ      ??ZDO_ProcessDeviceAnnce_3
// 2037   {
// 2038     if ( Annce.nwkAddr != NLME_GetCoordShortAddr() )
        ; Setup parameters for call to function NLME_GetCoordShortAddr
        LCALL   `??NLME_GetCoordShortAddr::?relay`; Banked call to: NLME_GetCoordShortAddr
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R0,?V0
        MOV     R1,?V1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??ZDO_ProcessDeviceAnnce_4
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??ZDO_ProcessDeviceAnnce_4:
        JZ      ??ZDO_ProcessDeviceAnnce_3
// 2039     {
// 2040       // Set the Parent's MAC's new short address
// 2041       _NIB.nwkCoordAddress = Annce.nwkAddr;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#_NIB + 23
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 2042       ZMacSetReq( ZMacCoordShortAddress, (byte*)&(_NIB.nwkCoordAddress) );
        ; Setup parameters for call to function ZMacSetReq
        MOV     R2,#(_NIB + 23) & 0xff
        MOV     R3,#((_NIB + 23) >> 8) & 0xff
        MOV     R1,#0x4b
        LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
        MOV     A,R1
// 2043     }
// 2044   }
// 2045 
// 2046   if ( ZSTACK_ROUTER_BUILD )
??ZDO_ProcessDeviceAnnce_3:
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        JZ      ??ZDO_ProcessDeviceAnnce_5
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      $+5
        LJMP    ??ZDO_ProcessDeviceAnnce_6 & 0xFFFF
// 2047   {
// 2048     // If the device annce comes from a end device child that has moved
// 2049     // to another parent, remove it from associated device list
// 2050 
// 2051     // If the dev annce is coming from other device's children,
// 2052     // (The dev annce from its own children shall be unicast to itself,
// 2053     // So check the mac destination address)
// 2054     // Remove it from the associated device list. If it is not
// 2055     // a child, no action will be taken in AssocRemove() anyway.
// 2056     if ( inMsg->macDestAddr != NLME_GetShortAddr() )
??ZDO_ProcessDeviceAnnce_5:
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R0,?V0
        MOV     R1,?V1
        MOV     A,R6
        ADD     A,#0x11
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??ZDO_ProcessDeviceAnnce_7
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??ZDO_ProcessDeviceAnnce_7:
        JZ      ??ZDO_ProcessDeviceAnnce_8
// 2057     {
// 2058       associated_devices_t *dev_ptr;
// 2059 
// 2060       // If it's an end device child
// 2061       dev_ptr = AssocGetWithExt( Annce.extAddr );
        ; Setup parameters for call to function AssocGetWithExt
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??AssocGetWithExt::?relay`; Banked call to: AssocGetWithExt
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R0,?V0
        MOV     R1,?V1
// 2062       if ( dev_ptr )
        MOV     A,R0
        ORL     A,R1
        JZ      ??ZDO_ProcessDeviceAnnce_9
// 2063       {
// 2064         if ( dev_ptr->nodeRelation == CHILD_RFD ||
// 2065              dev_ptr->nodeRelation == CHILD_RFD_RX_IDLE )
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??ZDO_ProcessDeviceAnnce_10
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??ZDO_ProcessDeviceAnnce_9
// 2066         {
// 2067           AssocRemove( Annce.extAddr );
??ZDO_ProcessDeviceAnnce_10:
        ; Setup parameters for call to function AssocRemove
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??AssocRemove::?relay`; Banked call to: AssocRemove
        MOV     A,R1
// 2068         }
// 2069       }
// 2070 
// 2071 #if defined ( ZIGBEE_CHILD_AGING )
// 2072       // Remove the address from the SrcMatch table,
// 2073       // just in case the device was aged out by Child Management Table process
// 2074       if ( ( pNwkNotMyChildListDelete != NULL ) &&
// 2075            ( zgChildAgingEnable == TRUE ) )
??ZDO_ProcessDeviceAnnce_9:
        MOV     DPTR,#pNwkNotMyChildListDelete
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??ZDO_ProcessDeviceAnnce_8
        MOV     DPTR,#zgChildAgingEnable
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDO_ProcessDeviceAnnce_8
// 2076       {
// 2077         pNwkNotMyChildListDelete( Annce.nwkAddr );
        ; Setup parameters for indirect call
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     DPTR,#pNwkNotMyChildListDelete
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
// 2078       }
// 2079 #endif // ZIGBEE_CHILD_AGING
// 2080     }
// 2081 
// 2082     if ( Annce.nwkAddr != NLME_GetShortAddr() )
??ZDO_ProcessDeviceAnnce_8:
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R0,?V0
        MOV     R1,?V1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??ZDO_ProcessDeviceAnnce_11
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??ZDO_ProcessDeviceAnnce_11:
        JZ      ??ZDO_ProcessDeviceAnnce_6
// 2083     {
// 2084       // If an associated device is found with matched extended Address,
// 2085       // update its short address
// 2086       if ( AssocChangeNwkAddr( Annce.nwkAddr, Annce.extAddr ) )
        ; Setup parameters for call to function AssocChangeNwkAddr
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   `??AssocChangeNwkAddr::?relay`; Banked call to: AssocChangeNwkAddr
        MOV     A,R1
        JZ      ??ZDO_ProcessDeviceAnnce_6
// 2087       {
// 2088         // Set event to save NV
// 2089         ZDApp_NVUpdate();
        ; Setup parameters for call to function ZDApp_NVUpdate
        LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
// 2090       }
// 2091     }
// 2092   }
// 2093 
// 2094   // Update the neighbor table
// 2095   nwkNeighborUpdateNwkAddr( Annce.nwkAddr, Annce.extAddr );
??ZDO_ProcessDeviceAnnce_6:
        ; Setup parameters for call to function nwkNeighborUpdateNwkAddr
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   `??nwkNeighborUpdateNwkAddr::?relay`; Banked call to: nwkNeighborUpdateNwkAddr
// 2096 
// 2097   // Assume that the device has moved, remove existing routing entries
// 2098   RTG_RemoveRtgEntry( Annce.nwkAddr, 0 );
        ; Setup parameters for call to function RTG_RemoveRtgEntry
        MOV     R1,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   `??RTG_RemoveRtgEntry::?relay`; Banked call to: RTG_RemoveRtgEntry
        MOV     A,R1
// 2099 
// 2100 #endif // ZIGBEE_STOCHASTIC_ADDRESSING
// 2101 
// 2102   // Fill in the extended address in address manager if we don't have it already.
// 2103   addrEntry.user = ADDRMGR_USER_DEFAULT;
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x0
        MOVX    @DPTR,A
// 2104   addrEntry.nwkAddr = Annce.nwkAddr;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 2105   if ( AddrMgrEntryLookupNwk( &addrEntry ) )
        ; Setup parameters for call to function AddrMgrEntryLookupNwk
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
        MOV     A,R1
        JZ      ??ZDO_ProcessDeviceAnnce_12
// 2106   {
// 2107     osal_memset( parentExt, 0, Z_EXTADDR_LEN );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 2108     if ( osal_ExtAddrEqual( parentExt, addrEntry.extAddr ) )
        ; Setup parameters for call to function sAddrExtCmp
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
        MOV     A,R1
        JZ      ??ZDO_ProcessDeviceAnnce_12
// 2109     {
// 2110       AddrMgrExtAddrSet( addrEntry.extAddr, Annce.extAddr );
        ; Setup parameters for call to function AddrMgrExtAddrSet
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
// 2111       AddrMgrEntryUpdate( &addrEntry );
        ; Setup parameters for call to function AddrMgrEntryUpdate
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
        MOV     A,R1
// 2112     }
// 2113   }
// 2114 
// 2115   // Update the short address in address manager if it's been changed
// 2116   AddrMgrExtAddrSet( addrEntry.extAddr, Annce.extAddr );
??ZDO_ProcessDeviceAnnce_12:
        ; Setup parameters for call to function AddrMgrExtAddrSet
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
// 2117   if ( AddrMgrEntryLookupExt( &addrEntry ) )
        ; Setup parameters for call to function AddrMgrEntryLookupExt
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
        MOV     A,R1
        JZ      ??ZDO_ProcessDeviceAnnce_2
// 2118   {
// 2119     if ( addrEntry.nwkAddr != Annce.nwkAddr )
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??ZDO_ProcessDeviceAnnce_13
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??ZDO_ProcessDeviceAnnce_13:
        JZ      ??ZDO_ProcessDeviceAnnce_2
// 2120     {
// 2121       addrEntry.nwkAddr = Annce.nwkAddr;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 2122       AddrMgrEntryUpdate( &addrEntry );
        ; Setup parameters for call to function AddrMgrEntryUpdate
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
        MOV     A,R1
// 2123     }
// 2124   }
// 2125 }
??ZDO_ProcessDeviceAnnce_2:
        MOV     A,#0x20
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
          CFI EndBlock cfiBlock30
// 2126 
// 2127 /*********************************************************************
// 2128  * @fn          ZDO_BuildSimpleDescBuf
// 2129  *
// 2130  * @brief       Build a byte sequence representation of a Simple Descriptor.
// 2131  *
// 2132  * @param       buf  - pointer to a byte array big enough for data.
// 2133  * @param       desc - SimpleDescriptionFormat_t *
// 2134  *
// 2135  * @return      none
// 2136  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2137 void ZDO_BuildSimpleDescBuf( uint8 *buf, SimpleDescriptionFormat_t *desc )
ZDO_BuildSimpleDescBuf:
          CFI Block cfiBlock31 Using cfiCommon0
          CFI Function ZDO_BuildSimpleDescBuf
        CODE
// 2138 {
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 2139   byte cnt;
// 2140   uint16 *ptr;
// 2141 
// 2142   *buf++ = desc->EndPoint;
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R2
        MOV     DPH,R3
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
// 2143   *buf++ = HI_UINT16( desc->AppProfId );
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        CLR     A
        XCH     A,R1
        MOV     R0,A
        MOV     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R2
        MOV     DPH,R3
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
// 2144   *buf++ = LO_UINT16( desc->AppProfId );
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R2
        MOV     DPH,R3
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
// 2145   *buf++ = HI_UINT16( desc->AppDeviceId );
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        CLR     A
        XCH     A,R1
        MOV     R0,A
        MOV     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R2
        MOV     DPH,R3
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
// 2146   *buf++ = LO_UINT16( desc->AppDeviceId );
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R2
        MOV     DPH,R3
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
// 2147 
// 2148   *buf++ = (byte)(desc->AppDevVer << 4);
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        SWAP    A
        ANL     A,#0xf0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R2
        MOV     DPH,R3
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
// 2149 
// 2150   *buf++ = desc->AppNumInClusters;
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R2
        MOV     DPH,R3
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
// 2151   ptr = desc->pAppInClusterList;
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
// 2152   for ( cnt = 0; cnt < desc->AppNumInClusters; ptr++, cnt++ )
        MOV     R6,#0x0
        SJMP    ??ZDO_BuildSimpleDescBuf_0
// 2153   {
// 2154     *buf++ = HI_UINT16( *ptr );
??ZDO_BuildSimpleDescBuf_1:
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V1,A
        CLR     A
        XCH     A,?V1
        MOV     ?V0,A
        MOV     A,?V0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R2
        MOV     DPH,R3
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
// 2155     *buf++ = LO_UINT16( *ptr );
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V1,A
        MOV     A,?V0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R2
        MOV     DPH,R3
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
// 2156   }
        MOV     A,R0
        ADD     A,#0x2
        MOV     R0,A
        JNC     ??ZDO_BuildSimpleDescBuf_2
        INC     R1
??ZDO_BuildSimpleDescBuf_2:
        INC     R6
??ZDO_BuildSimpleDescBuf_0:
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        MOV     A,R6
        CLR     C
        SUBB    A,R7
        JC      ??ZDO_BuildSimpleDescBuf_1
// 2157 
// 2158   *buf++ = desc->AppNumOutClusters;
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R2
        MOV     DPH,R3
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
// 2159   ptr = desc->pAppOutClusterList;
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
// 2160   for ( cnt = 0; cnt < desc->AppNumOutClusters; ptr++, cnt++ )
        MOV     R6,#0x0
        SJMP    ??ZDO_BuildSimpleDescBuf_3
// 2161   {
// 2162     *buf++ = HI_UINT16( *ptr );
??ZDO_BuildSimpleDescBuf_4:
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V1,A
        CLR     A
        XCH     A,?V1
        MOV     ?V0,A
        MOV     A,?V0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R2
        MOV     DPH,R3
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
// 2163     *buf++ = LO_UINT16( *ptr );
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V1,A
        MOV     A,?V0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R2
        MOV     DPH,R3
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
// 2164   }
        MOV     A,R0
        ADD     A,#0x2
        MOV     R0,A
        JNC     ??ZDO_BuildSimpleDescBuf_5
        INC     R1
??ZDO_BuildSimpleDescBuf_5:
        INC     R6
??ZDO_BuildSimpleDescBuf_3:
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        MOV     A,R6
        CLR     C
        SUBB    A,R7
        JC      ??ZDO_BuildSimpleDescBuf_4
// 2165 }
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
          CFI EndBlock cfiBlock31
// 2166 
// 2167 #if ( ZG_BUILD_COORDINATOR_TYPE )
// 2168 /*********************************************************************
// 2169  * @fn      ZDO_MatchEndDeviceBind()
// 2170  *
// 2171  * @brief
// 2172  *
// 2173  *   Called to match end device binding requests
// 2174  *
// 2175  * @param  bindReq  - binding request information
// 2176  * @param  SecurityUse - Security enable/disable
// 2177  *
// 2178  * @return  none
// 2179  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2180 void ZDO_MatchEndDeviceBind( ZDEndDeviceBind_t *bindReq )
ZDO_MatchEndDeviceBind:
          CFI Block cfiBlock32 Using cfiCommon0
          CFI Function ZDO_MatchEndDeviceBind
        CODE
// 2181 {
        FUNCALL ZDO_MatchEndDeviceBind, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_MatchEndDeviceBind, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_MatchEndDeviceBind, ZDO_CopyMatchInfo
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_MatchEndDeviceBind, APS_SetEndDeviceBindTimeout
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_MatchEndDeviceBind, ZDO_CopyMatchInfo
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_MatchEndDeviceBind, ZDO_CompareClusterLists
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_MatchEndDeviceBind, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_MatchEndDeviceBind, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_MatchEndDeviceBind, ZDO_CompareClusterLists
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_MatchEndDeviceBind, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_MatchEndDeviceBind, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_MatchEndDeviceBind, ZDMatchSendState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_MatchEndDeviceBind, ZDP_SendData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_MatchEndDeviceBind, ZDP_SendData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_MatchEndDeviceBind, ZDO_RemoveMatchMemory
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 2182   zAddrType_t dstAddr;
// 2183   uint8 sendRsp = FALSE;
        MOV     ?V0,#0x0
// 2184   uint8 status;
// 2185 
// 2186   // Is this the first request?
// 2187   if ( matchED == NULL )
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      $+5
        LJMP    ??ZDO_MatchEndDeviceBind_0 & 0xFFFF
// 2188   {
// 2189     // Create match info structure
// 2190     matchED = (ZDMatchEndDeviceBind_t *)osal_mem_alloc( sizeof ( ZDMatchEndDeviceBind_t ) );
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x37
        MOV     R3,#0x0
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     DPTR,#matchED
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
// 2191     if ( matchED )
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??ZDO_MatchEndDeviceBind_1
// 2192     {
// 2193       // Clear the structure
// 2194       osal_memset( (uint8 *)matchED, 0, sizeof ( ZDMatchEndDeviceBind_t ) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x37
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 2195 
// 2196       // Copy the first request's information
// 2197       if ( !ZDO_CopyMatchInfo( &(matchED->ed1), bindReq ) )
        ; Setup parameters for call to function ZDO_CopyMatchInfo
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   `??ZDO_CopyMatchInfo::?relay`; Banked call to: ZDO_CopyMatchInfo
        MOV     A,R1
        JNZ     ??ZDO_MatchEndDeviceBind_2
// 2198       {
// 2199         status = ZDP_NO_ENTRY;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x78
        MOVX    @DPTR,A
// 2200         sendRsp = TRUE;
        MOV     ?V0,#0x1
        SJMP    ??ZDO_MatchEndDeviceBind_2
// 2201       }
// 2202     }
// 2203     else
// 2204     {
// 2205       status = ZDP_NO_ENTRY;
??ZDO_MatchEndDeviceBind_1:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x78
        MOVX    @DPTR,A
// 2206       sendRsp = TRUE;
        MOV     ?V0,#0x1
// 2207     }
// 2208 
// 2209     if ( !sendRsp )
??ZDO_MatchEndDeviceBind_2:
        MOV     A,?V0
        JZ      $+5
        LJMP    ??ZDO_MatchEndDeviceBind_3 & 0xFFFF
// 2210     {
// 2211       // Set into the correct state
// 2212       matchED->state = ZDMATCH_WAIT_REQ;
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x2e
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#0x1
        MOVX    @DPTR,A
// 2213 
// 2214       // Setup the timeout
// 2215       APS_SetEndDeviceBindTimeout( AIB_MaxBindingTime, ZDO_EndDeviceBindMatchTimeoutCB );
        ; Setup parameters for call to function APS_SetEndDeviceBindTimeout
        MOV     R4,#`??ZDO_EndDeviceBindMatchTimeoutCB::?relay` & 0xff
        MOV     R5,#(`??ZDO_EndDeviceBindMatchTimeoutCB::?relay` >> 8) & 0xff
        MOV     DPTR,#AIB_MaxBindingTime
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   `??APS_SetEndDeviceBindTimeout::?relay`; Banked call to: APS_SetEndDeviceBindTimeout
        LJMP    ??ZDO_MatchEndDeviceBind_3 & 0xFFFF
// 2216     }
// 2217   }
// 2218   else
// 2219   {
// 2220       matchED->state = ZDMATCH_SENDING_BINDS;
??ZDO_MatchEndDeviceBind_0:
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x2e
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#0x2
        MOVX    @DPTR,A
// 2221 
// 2222       // Copy the 2nd request's information
// 2223       if ( !ZDO_CopyMatchInfo( &(matchED->ed2), bindReq ) )
        ; Setup parameters for call to function ZDO_CopyMatchInfo
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        ADD     A,#0x17
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   `??ZDO_CopyMatchInfo::?relay`; Banked call to: ZDO_CopyMatchInfo
        MOV     A,R1
        JNZ     ??ZDO_MatchEndDeviceBind_4
// 2224       {
// 2225         status = ZDP_NO_ENTRY;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x78
        MOVX    @DPTR,A
// 2226         sendRsp = TRUE;
        MOV     ?V0,#0x1
// 2227       }
// 2228 
// 2229       // Make a source match for ed1
// 2230       matchED->ed1numMatched = ZDO_CompareClusterLists(
// 2231                   matchED->ed1.numOutClusters, matchED->ed1.outClusters,
// 2232                   matchED->ed2.numInClusters, matchED->ed2.inClusters, ZDOBuildBuf );
??ZDO_MatchEndDeviceBind_4:
        ; Setup parameters for call to function ZDO_CompareClusterLists
        MOV     ?V2,#ZDOBuildBuf & 0xff
        MOV     ?V3,#(ZDOBuildBuf >> 8) & 0xff
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 27)
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x29
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 29)
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x28
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x15
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x14
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??ZDO_CompareClusterLists::?relay`; Banked call to: ZDO_CompareClusterLists
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     A,R1
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x31
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 2233       if ( matchED->ed1numMatched )
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x31
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??ZDO_MatchEndDeviceBind_5 & 0xFFFF
// 2234       {
// 2235         // Save the match list
// 2236         matchED->ed1Matched = osal_mem_alloc( (short)(matchED->ed1numMatched * sizeof ( uint16 )) );
        ; Setup parameters for call to function osal_mem_alloc
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x31
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R3,#0x0
        MOV     A,R2
        MOV     B,#0x2
        MUL     AB
        XCH     A,R2
        MOV     R0,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R0
        MOV     R0,A
        MOV     B,#0x2
        MOV     A,R3
        MUL     AB
        ADD     A,R0
        MOV     R3,A
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V2,R2
        MOV     ?V3,R3
        MOV     R0,?V2
        MOV     R1,?V3
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R2
        ADD     A,#0x32
        MOV     DPL,A
        XCH     A,R2
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 2237         if ( matchED->ed1Matched )
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x32
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??ZDO_MatchEndDeviceBind_6
// 2238         {
// 2239           osal_memcpy( matchED->ed1Matched, ZDOBuildBuf, (matchED->ed1numMatched * sizeof ( uint16 )) );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V4,#ZDOBuildBuf & 0xff
        MOV     ?V5,#(ZDOBuildBuf >> 8) & 0xff
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 28)
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x31
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R5,#0x0
        MOV     A,R4
        MOV     B,#0x2
        MUL     AB
        XCH     A,R4
        MOV     R0,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R0
        MOV     R0,A
        MOV     B,#0x2
        MOV     A,R5
        MUL     AB
        ADD     A,R0
        MOV     R5,A
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x32
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
        SJMP    ??ZDO_MatchEndDeviceBind_5
// 2240         }
// 2241         else
// 2242         {
// 2243           // Allocation error, stop
// 2244           status = ZDP_NO_ENTRY;
??ZDO_MatchEndDeviceBind_6:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x78
        MOVX    @DPTR,A
// 2245           sendRsp = TRUE;
        MOV     ?V0,#0x1
// 2246         }
// 2247       }
// 2248 
// 2249       // Make a source match for ed2
// 2250       matchED->ed2numMatched = ZDO_CompareClusterLists(
// 2251                   matchED->ed2.numOutClusters, matchED->ed2.outClusters,
// 2252                   matchED->ed1.numInClusters, matchED->ed1.inClusters, ZDOBuildBuf );
??ZDO_MatchEndDeviceBind_5:
        ; Setup parameters for call to function ZDO_CompareClusterLists
        MOV     ?V2,#ZDOBuildBuf & 0xff
        MOV     ?V3,#(ZDOBuildBuf >> 8) & 0xff
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 27)
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x12
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 29)
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x11
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x2c
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x2b
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??ZDO_CompareClusterLists::?relay`; Banked call to: ZDO_CompareClusterLists
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     A,R1
        MOV     R0,A
        MOV     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x34
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 2253       if ( matchED->ed2numMatched )
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x34
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??ZDO_MatchEndDeviceBind_7 & 0xFFFF
// 2254       {
// 2255         // Save the match list
// 2256         matchED->ed2Matched = osal_mem_alloc( (short)(matchED->ed2numMatched * sizeof ( uint16 )) );
        ; Setup parameters for call to function osal_mem_alloc
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x34
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R3,#0x0
        MOV     A,R2
        MOV     B,#0x2
        MUL     AB
        XCH     A,R2
        MOV     R0,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R0
        MOV     R0,A
        MOV     B,#0x2
        MOV     A,R3
        MUL     AB
        ADD     A,R0
        MOV     R3,A
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V2,R2
        MOV     ?V3,R3
        MOV     R0,?V2
        MOV     R1,?V3
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R2
        ADD     A,#0x35
        MOV     DPL,A
        XCH     A,R2
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 2257         if ( matchED->ed2Matched )
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x35
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??ZDO_MatchEndDeviceBind_8
// 2258         {
// 2259           osal_memcpy( matchED->ed2Matched, ZDOBuildBuf, (matchED->ed2numMatched * sizeof ( uint16 )) );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V4,#ZDOBuildBuf & 0xff
        MOV     ?V5,#(ZDOBuildBuf >> 8) & 0xff
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 28)
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x34
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R5,#0x0
        MOV     A,R4
        MOV     B,#0x2
        MUL     AB
        XCH     A,R4
        MOV     R0,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R0
        MOV     R0,A
        MOV     B,#0x2
        MOV     A,R5
        MUL     AB
        ADD     A,R0
        MOV     R5,A
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x35
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
        SJMP    ??ZDO_MatchEndDeviceBind_7
// 2260         }
// 2261         else
// 2262         {
// 2263           // Allocation error, stop
// 2264           status = ZDP_NO_ENTRY;
??ZDO_MatchEndDeviceBind_8:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x78
        MOVX    @DPTR,A
// 2265           sendRsp = TRUE;
        MOV     ?V0,#0x1
// 2266         }
// 2267       }
// 2268 
// 2269       if ( (sendRsp == FALSE) && (matchED->ed1numMatched || matchED->ed2numMatched) )
??ZDO_MatchEndDeviceBind_7:
        MOV     A,?V0
        JNZ     ??ZDO_MatchEndDeviceBind_9
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x31
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        JNZ     ??ZDO_MatchEndDeviceBind_10
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x34
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        JZ      ??ZDO_MatchEndDeviceBind_9
// 2270       {
// 2271         // Do the first unbind/bind state
// 2272         ZDMatchSendState( ZDMATCH_REASON_START, ZDP_SUCCESS, 0 );
??ZDO_MatchEndDeviceBind_10:
        ; Setup parameters for call to function ZDMatchSendState
        MOV     R3,#0x0
        MOV     R2,#0x0
        MOV     R1,#0x0
        LCALL   `??ZDMatchSendState::?relay`; Banked call to: ZDMatchSendState
        MOV     A,R1
        SJMP    ??ZDO_MatchEndDeviceBind_3
// 2273       }
// 2274       else
// 2275       {
// 2276         status = ZDP_NO_MATCH;
??ZDO_MatchEndDeviceBind_9:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x7a
        MOVX    @DPTR,A
// 2277         sendRsp = TRUE;
        MOV     ?V0,#0x1
// 2278       }
// 2279   }
// 2280 
// 2281   if ( sendRsp )
??ZDO_MatchEndDeviceBind_3:
        MOV     A,?V0
        JNZ     $+5
        LJMP    ??ZDO_MatchEndDeviceBind_11 & 0xFFFF
// 2282   {
// 2283     // send response to this requester
// 2284     dstAddr.addrMode = Addr16Bit;
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
// 2285     dstAddr.addr.shortAddr = bindReq->srcAddr;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 2286     ZDP_EndDeviceBindRsp( bindReq->TransSeq, &dstAddr, status, bindReq->SecurityUse );
        ; Setup parameters for call to function ZDP_SendData
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 26)
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 28)
        MOV     ?V0,#0x20
        MOV     ?V1,#-0x80
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 30)
        MOV     R1,#0x1
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP102_8
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     A,R1
// 2287 
// 2288     if ( matchED->state == ZDMATCH_SENDING_BINDS )
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x2e
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??ZDO_MatchEndDeviceBind_12
// 2289     {
// 2290       // send response to first requester
// 2291       dstAddr.addrMode = Addr16Bit;
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
// 2292       dstAddr.addr.shortAddr = matchED->ed1.srcAddr;
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 2293       ZDP_EndDeviceBindRsp( matchED->ed1.TransSeq, &dstAddr, status, matchED->ed1.SecurityUse );
        ; Setup parameters for call to function ZDP_SendData
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 26)
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 28)
        MOV     ?V0,#0x20
        MOV     ?V1,#-0x80
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 30)
        MOV     R1,#0x1
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP102_8
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     A,R1
// 2294     }
// 2295 
// 2296     // Process ended - release memory used
// 2297     ZDO_RemoveMatchMemory();
??ZDO_MatchEndDeviceBind_12:
        ; Setup parameters for call to function ZDO_RemoveMatchMemory
        LCALL   `??ZDO_RemoveMatchMemory::?relay`; Banked call to: ZDO_RemoveMatchMemory
// 2298   }
// 2299 }
??ZDO_MatchEndDeviceBind_11:
        MOV     A,#0xa
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     R7,#0x7
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
          CFI EndBlock cfiBlock32
// 2300 
// 2301 /*********************************************************************
// 2302  * @fn      ZDO_RemoveMatchMemory()
// 2303  *
// 2304  * @brief   Called to clear the memory used for the end device bind.
// 2305  *
// 2306  * @param  none
// 2307  *
// 2308  * @return  none
// 2309  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2310 static void ZDO_RemoveMatchMemory( void )
ZDO_RemoveMatchMemory:
          CFI Block cfiBlock33 Using cfiCommon0
          CFI Function ZDO_RemoveMatchMemory
        CODE
// 2311 {
        FUNCALL ZDO_RemoveMatchMemory, osal_mem_free
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_RemoveMatchMemory, osal_mem_free
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_RemoveMatchMemory, osal_mem_free
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_RemoveMatchMemory, osal_mem_free
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_RemoveMatchMemory, osal_mem_free
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_RemoveMatchMemory, osal_mem_free
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_RemoveMatchMemory, osal_mem_free
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2312   if ( matchED != NULL )
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JNZ     $+5
        LJMP    ??ZDO_RemoveMatchMemory_0 & 0xFFFF
// 2313   {
// 2314     if ( matchED->ed2Matched != NULL )
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x35
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??ZDO_RemoveMatchMemory_1
// 2315     {
// 2316       osal_mem_free( matchED->ed2Matched );
        ; Setup parameters for call to function osal_mem_free
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x35
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 2317     }
// 2318     if ( matchED->ed1Matched != NULL )
??ZDO_RemoveMatchMemory_1:
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x32
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??ZDO_RemoveMatchMemory_2
// 2319     {
// 2320       osal_mem_free( matchED->ed1Matched );
        ; Setup parameters for call to function osal_mem_free
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x32
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 2321     }
// 2322     if ( matchED->ed1.inClusters != NULL )
??ZDO_RemoveMatchMemory_2:
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x12
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??ZDO_RemoveMatchMemory_3
// 2323     {
// 2324       osal_mem_free( matchED->ed1.inClusters );
        ; Setup parameters for call to function osal_mem_free
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x12
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 2325     }
// 2326     if ( matchED->ed1.outClusters != NULL )
??ZDO_RemoveMatchMemory_3:
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x15
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??ZDO_RemoveMatchMemory_4
// 2327     {
// 2328       osal_mem_free( matchED->ed1.outClusters );
        ; Setup parameters for call to function osal_mem_free
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x15
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 2329     }
// 2330     if ( matchED->ed2.inClusters != NULL )
??ZDO_RemoveMatchMemory_4:
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x29
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??ZDO_RemoveMatchMemory_5
// 2331     {
// 2332       osal_mem_free( matchED->ed2.inClusters );
        ; Setup parameters for call to function osal_mem_free
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x29
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 2333     }
// 2334     if ( matchED->ed2.outClusters != NULL )
??ZDO_RemoveMatchMemory_5:
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x2c
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??ZDO_RemoveMatchMemory_6
// 2335     {
// 2336       osal_mem_free( matchED->ed2.outClusters );
        ; Setup parameters for call to function osal_mem_free
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x2c
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 2337     }
// 2338 
// 2339     osal_mem_free( matchED );
??ZDO_RemoveMatchMemory_6:
        ; Setup parameters for call to function osal_mem_free
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 2340     matchED = (ZDMatchEndDeviceBind_t *)NULL;
        MOV     DPTR,#matchED
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
// 2341   }
// 2342 }
??ZDO_RemoveMatchMemory_0:
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
          CFI EndBlock cfiBlock33
// 2343 
// 2344 /*********************************************************************
// 2345  * @fn      ZDO_CopyMatchInfo()
// 2346  *
// 2347  * @brief   Called to copy memory used for the end device bind.
// 2348  *
// 2349  * @param  srcReq - source information
// 2350  * @param  dstReq - destination location
// 2351  *
// 2352  * @return  TRUE if copy was successful.
// 2353  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2354 static uint8 ZDO_CopyMatchInfo( ZDEndDeviceBind_t *destReq, ZDEndDeviceBind_t *srcReq )
ZDO_CopyMatchInfo:
          CFI Block cfiBlock34 Using cfiCommon0
          CFI Function ZDO_CopyMatchInfo
        CODE
// 2355 {
        FUNCALL ZDO_CopyMatchInfo, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_CopyMatchInfo, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_CopyMatchInfo, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_CopyMatchInfo, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_CopyMatchInfo, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_CopyMatchInfo, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_CopyMatchInfo, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0,R4
        MOV     ?V1,R5
// 2356   uint8 allOK = TRUE;
        MOV     ?V2,#0x1
// 2357 
// 2358   // Copy bind information into the match info structure
// 2359   osal_memcpy( (uint8 *)destReq, srcReq, sizeof ( ZDEndDeviceBind_t ) );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V4,?V0
        MOV     ?V5,?V1
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R4,#0x17
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
// 2360 
// 2361   // Initialize the destination cluster pointers
// 2362   destReq->inClusters = NULL;
        MOV     A,R6
        ADD     A,#0x12
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
// 2363   destReq->outClusters = NULL;
        MOV     A,R6
        ADD     A,#0x15
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
// 2364 
// 2365   // Copy input cluster IDs
// 2366   if ( srcReq->numInClusters )
        MOV     A,?V0
        ADD     A,#0x11
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??ZDO_CopyMatchInfo_0 & 0xFFFF
// 2367   {
// 2368     destReq->inClusters = osal_mem_alloc( (short)(srcReq->numInClusters * sizeof ( uint16 )) );
        ; Setup parameters for call to function osal_mem_alloc
        MOV     A,?V0
        ADD     A,#0x11
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R3,#0x0
        MOV     A,R2
        MOV     B,#0x2
        MUL     AB
        XCH     A,R2
        MOV     R0,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R0
        MOV     R0,A
        MOV     B,#0x2
        MOV     A,R3
        MUL     AB
        ADD     A,R0
        MOV     R3,A
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     A,R6
        ADD     A,#0x12
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
// 2369     if ( destReq->inClusters )
        MOV     A,R6
        ADD     A,#0x12
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??ZDO_CopyMatchInfo_1
// 2370     {
// 2371       // Copy the clusters
// 2372       osal_memcpy( (uint8*)(destReq->inClusters), (uint8 *)(srcReq->inClusters),
// 2373                       (srcReq->numInClusters * sizeof ( uint16 )) );
        ; Setup parameters for call to function osal_memcpy
        MOV     A,?V0
        ADD     A,#0x12
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V5,A
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     A,?V0
        ADD     A,#0x11
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R5,#0x0
        MOV     A,R4
        MOV     B,#0x2
        MUL     AB
        XCH     A,R4
        MOV     R0,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R0
        MOV     R0,A
        MOV     B,#0x2
        MOV     A,R5
        MUL     AB
        ADD     A,R0
        MOV     R5,A
        MOV     A,R6
        ADD     A,#0x12
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
        SJMP    ??ZDO_CopyMatchInfo_0
// 2374     }
// 2375     else
// 2376     {
// 2377       allOK = FALSE;
??ZDO_CopyMatchInfo_1:
        MOV     ?V2,#0x0
// 2378     }
// 2379   }
// 2380 
// 2381   // Copy output cluster IDs
// 2382   if ( srcReq->numOutClusters )
??ZDO_CopyMatchInfo_0:
        MOV     A,?V0
        ADD     A,#0x14
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??ZDO_CopyMatchInfo_2 & 0xFFFF
// 2383   {
// 2384     destReq->outClusters = osal_mem_alloc( (short)(srcReq->numOutClusters * sizeof ( uint16 )) );
        ; Setup parameters for call to function osal_mem_alloc
        MOV     A,?V0
        ADD     A,#0x14
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R3,#0x0
        MOV     A,R2
        MOV     B,#0x2
        MUL     AB
        XCH     A,R2
        MOV     R0,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R0
        MOV     R0,A
        MOV     B,#0x2
        MOV     A,R3
        MUL     AB
        ADD     A,R0
        MOV     R3,A
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     A,R6
        ADD     A,#0x15
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
// 2385     if ( destReq->outClusters )
        MOV     A,R6
        ADD     A,#0x15
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??ZDO_CopyMatchInfo_3
// 2386     {
// 2387       // Copy the clusters
// 2388       osal_memcpy( (uint8 *)(destReq->outClusters), (uint8 *)(srcReq->outClusters),
// 2389                       (srcReq->numOutClusters * sizeof ( uint16 )) );
        ; Setup parameters for call to function osal_memcpy
        MOV     A,?V0
        ADD     A,#0x15
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V5,A
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     A,?V0
        ADD     A,#0x14
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R5,#0x0
        MOV     A,R4
        MOV     B,#0x2
        MUL     AB
        XCH     A,R4
        MOV     R0,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R0
        MOV     R0,A
        MOV     B,#0x2
        MOV     A,R5
        MUL     AB
        ADD     A,R0
        MOV     R5,A
        MOV     A,R6
        ADD     A,#0x15
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
        SJMP    ??ZDO_CopyMatchInfo_2
// 2390     }
// 2391     else
// 2392     {
// 2393       allOK = FALSE;
??ZDO_CopyMatchInfo_3:
        MOV     ?V2,#0x0
// 2394     }
// 2395   }
// 2396 
// 2397   if ( allOK == FALSE )
??ZDO_CopyMatchInfo_2:
        MOV     A,?V2
        JNZ     ??ZDO_CopyMatchInfo_4
// 2398   {
// 2399     if ( destReq->inClusters != NULL )
        MOV     A,R6
        ADD     A,#0x12
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??ZDO_CopyMatchInfo_5
// 2400     {
// 2401       osal_mem_free( destReq->inClusters );
        ; Setup parameters for call to function osal_mem_free
        MOV     A,R6
        ADD     A,#0x12
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 2402     }
// 2403     if ( destReq->outClusters != NULL )
??ZDO_CopyMatchInfo_5:
        MOV     A,R6
        ADD     A,#0x15
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??ZDO_CopyMatchInfo_4
// 2404     {
// 2405       osal_mem_free( destReq->outClusters );
        ; Setup parameters for call to function osal_mem_free
        MOV     A,R6
        ADD     A,#0x15
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 2406     }
// 2407   }
// 2408 
// 2409   return ( allOK );
??ZDO_CopyMatchInfo_4:
        MOV     R1,?V2
        MOV     R7,#0x7
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
// 2410 }
          CFI EndBlock cfiBlock34
// 2411 
// 2412 /*********************************************************************
// 2413  * @fn      ZDMatchSendState()
// 2414  *
// 2415  * @brief   State machine for the End device match message algorithm.
// 2416  *
// 2417  * @param  reason - state of algoritm
// 2418  * @param  status - initial message status
// 2419  * @param  TransSeq - next transaction sequence number
// 2420  *
// 2421  * @return  FALSE if error and we are not currently matching, TRUE
// 2422  *          if success.
// 2423  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2424 uint8 ZDMatchSendState( uint8 reason, uint8 status, uint8 TransSeq )
ZDMatchSendState:
          CFI Block cfiBlock35 Using cfiCommon0
          CFI Function ZDMatchSendState
        CODE
// 2425 {
        FUNCALL ZDMatchSendState, APS_SetEndDeviceBindTimeout
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDMatchSendState, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDMatchSendState, ZDP_BindUnbindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDMatchSendState, APS_SetEndDeviceBindTimeout
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDMatchSendState, ZDP_SendData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDMatchSendState, ZDP_SendData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDMatchSendState, ZDO_RemoveMatchMemory
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        MOV     A,#-0x12
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 19
        MOV     A,#-0x13
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 37)
        MOV     ?V3,R1
        MOV     ?V6,R2
        MOV     ?V7,R3
// 2426   uint8 *dstIEEEAddr = NULL;
        MOV     ?V4,#0x0
        MOV     ?V5,#0x0
// 2427   uint8 dstEP = 0xFF;
        MOV     ?V2,#-0x1
// 2428   zAddrType_t dstAddr;
// 2429   zAddrType_t destinationAddr;
// 2430   uint16 msgType;
// 2431   uint16 clusterID = 0xFFFF;
        MOV     ?V8,#-0x1
        MOV     ?V9,#-0x1
// 2432   ZDEndDeviceBind_t *ed = NULL;
        MOV     ?V0,#0x0
        MOV     ?V1,#0x0
// 2433   uint8 rspStatus = ZDP_SUCCESS;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x0
        MOVX    @DPTR,A
// 2434 
// 2435   if ( matchED == NULL )
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??ZDMatchSendState_0
// 2436   {
// 2437     return ( FALSE );
        MOV     R1,#0x0
        LJMP    ??ZDMatchSendState_1 & 0xFFFF
// 2438   }
// 2439 
// 2440   // Check sequence number
// 2441   if ( reason == ZDMATCH_REASON_BIND_RSP || reason == ZDMATCH_REASON_UNBIND_RSP )
??ZDMatchSendState_0:
        MOV     A,#0x3
        XRL     A,?V3
        JZ      ??ZDMatchSendState_2
        MOV     A,#0x2
        XRL     A,?V3
        JNZ     ??ZDMatchSendState_3
// 2442   {
// 2443     if ( TransSeq != matchED->transSeq )
??ZDMatchSendState_2:
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x30
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,?V7
        JZ      ??ZDMatchSendState_3
// 2444     {
// 2445       return( FALSE ); // ignore the message
        MOV     R1,#0x0
        LJMP    ??ZDMatchSendState_1 & 0xFFFF
// 2446     }
// 2447   }
// 2448 
// 2449   // turn off timer
// 2450   APS_SetEndDeviceBindTimeout( 0, ZDO_EndDeviceBindMatchTimeoutCB );
??ZDMatchSendState_3:
        ; Setup parameters for call to function APS_SetEndDeviceBindTimeout
        MOV     R4,#`??ZDO_EndDeviceBindMatchTimeoutCB::?relay` & 0xff
        MOV     R5,#(`??ZDO_EndDeviceBindMatchTimeoutCB::?relay` >> 8) & 0xff
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   `??APS_SetEndDeviceBindTimeout::?relay`; Banked call to: APS_SetEndDeviceBindTimeout
// 2451 
// 2452   if ( reason == ZDMATCH_REASON_TIMEOUT )
        MOV     A,#0x1
        XRL     A,?V3
        JNZ     ??ZDMatchSendState_4
// 2453   {
// 2454     rspStatus = ZDP_TIMEOUT;    // The process will stop
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x7b
        MOVX    @DPTR,A
// 2455   }
// 2456 
// 2457   if ( reason == ZDMATCH_REASON_START || reason == ZDMATCH_REASON_BIND_RSP )
??ZDMatchSendState_4:
        MOV     A,?V3
        JZ      ??ZDMatchSendState_5
        MOV     A,#0x3
        XRL     A,?V3
        JNZ     ??ZDMatchSendState_6
// 2458   {
// 2459     matchED->sending = ZDMATCH_SENDING_UNBIND;
??ZDMatchSendState_5:
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x2f
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#0x1
        MOVX    @DPTR,A
// 2460 
// 2461     if ( reason == ZDMATCH_REASON_BIND_RSP && status != ZDP_SUCCESS )
        MOV     A,#0x3
        XRL     A,?V3
        JNZ     ??ZDMatchSendState_7
        MOV     A,?V6
        JZ      ??ZDMatchSendState_7
// 2462     {
// 2463       rspStatus = status;
        MOV     A,?V6
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        SJMP    ??ZDMatchSendState_7
// 2464     }
// 2465   }
// 2466   else if ( reason == ZDMATCH_REASON_UNBIND_RSP )
??ZDMatchSendState_6:
        MOV     A,#0x2
        XRL     A,?V3
        JNZ     ??ZDMatchSendState_7
// 2467   {
// 2468     if ( status == ZDP_SUCCESS )
        MOV     A,?V6
        JNZ     ??ZDMatchSendState_8
// 2469     {
// 2470       matchED->sending = ZDMATCH_SENDING_UNBIND;
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x2f
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#0x1
        MOVX    @DPTR,A
        SJMP    ??ZDMatchSendState_7
// 2471     }
// 2472     else
// 2473     {
// 2474       matchED->sending = ZDMATCH_SENDING_BIND;
??ZDMatchSendState_8:
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x2f
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#0x2
        MOVX    @DPTR,A
// 2475     }
// 2476   }
// 2477 
// 2478   if ( reason != ZDMATCH_REASON_START && matchED->sending == ZDMATCH_SENDING_UNBIND )
??ZDMatchSendState_7:
        MOV     A,?V3
        JZ      ??ZDMatchSendState_9
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x2f
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDMatchSendState_9
// 2479   {
// 2480     // Move to the next cluster ID
// 2481     if ( matchED->ed1numMatched )
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x31
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        JZ      ??ZDMatchSendState_10
// 2482     {
// 2483       matchED->ed1numMatched--;
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x31
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        ADD     A,#-0x1
        MOVX    @DPTR,A
        SJMP    ??ZDMatchSendState_9
// 2484     }
// 2485     else if ( matchED->ed2numMatched )
??ZDMatchSendState_10:
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x34
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        JZ      ??ZDMatchSendState_9
// 2486     {
// 2487       matchED->ed2numMatched--;
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x34
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        ADD     A,#-0x1
        MOVX    @DPTR,A
// 2488     }
// 2489   }
// 2490 
// 2491   // What message do we send now
// 2492   if ( matchED->ed1numMatched )
??ZDMatchSendState_9:
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x31
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??ZDMatchSendState_11 & 0xFFFF
// 2493   {
// 2494     ed = &(matchED->ed1);
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V1,A
// 2495     clusterID = matchED->ed1Matched[matchED->ed1numMatched-1];
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x31
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0x2
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0x2
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R2
        ADD     A,#0x32
        MOV     DPL,A
        XCH     A,R2
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        ADD     A,#-0x2
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V8,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V9,A
// 2496     dstIEEEAddr = matchED->ed2.ieeeAddr;
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        ADD     A,#0x1d
        MOV     ?V4,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     ?V5,A
// 2497     dstEP = matchED->ed2.endpoint;
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x25
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V2,A
        LJMP    ??ZDMatchSendState_12 & 0xFFFF
// 2498   }
// 2499   else if ( matchED->ed2numMatched )
??ZDMatchSendState_11:
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x34
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??ZDMatchSendState_12 & 0xFFFF
// 2500   {
// 2501     ed = &(matchED->ed2);
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        ADD     A,#0x17
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     ?V1,A
// 2502     clusterID = matchED->ed2Matched[matchED->ed2numMatched-1];
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x34
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0x2
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0x2
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R2
        ADD     A,#0x35
        MOV     DPL,A
        XCH     A,R2
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        ADD     A,#-0x2
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V8,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V9,A
// 2503     dstIEEEAddr = matchED->ed1.ieeeAddr;
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        ADD     A,#0x6
        MOV     ?V4,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     ?V5,A
// 2504     dstEP = matchED->ed1.endpoint;
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0xe
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V2,A
// 2505   }
// 2506 
// 2507   dstAddr.addrMode = Addr16Bit;
??ZDMatchSendState_12:
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
// 2508 
// 2509   // Send the next message
// 2510   if ( (rspStatus == ZDP_SUCCESS) && ed )
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??ZDMatchSendState_13 & 0xFFFF
        MOV     A,?V0
        ORL     A,?V1
        JNZ     $+5
        LJMP    ??ZDMatchSendState_13 & 0xFFFF
// 2511   {
// 2512     // Send unbind/bind message to source
// 2513     if ( matchED->sending == ZDMATCH_SENDING_UNBIND )
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x2f
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??ZDMatchSendState_14
// 2514     {
// 2515       msgType = Unbind_req;
        MOV     R6,#0x22
        MOV     R7,#0x0
        SJMP    ??ZDMatchSendState_15
// 2516     }
// 2517     else
// 2518     {
// 2519       msgType = Bind_req;
??ZDMatchSendState_14:
        MOV     R6,#0x21
        MOV     R7,#0x0
// 2520     }
// 2521 
// 2522     dstAddr.addr.shortAddr = ed->srcAddr;
??ZDMatchSendState_15:
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 2523 
// 2524     // Save off the transaction sequence number
// 2525     matchED->transSeq = ZDP_TransID;
        MOV     DPTR,#ZDP_TransID
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x30
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 2526 
// 2527     destinationAddr.addrMode = Addr64Bit;
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x3
        MOVX    @DPTR,A
// 2528     osal_cpyExtAddr( destinationAddr.addr.extAddr, dstIEEEAddr );
        ; Setup parameters for call to function sAddrExtCpy
        MOV     R4,?V4
        MOV     R5,?V5
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
// 2529 
// 2530     ZDP_BindUnbindReq( msgType, &dstAddr, ed->ieeeAddr, ed->endpoint, clusterID,
// 2531         &destinationAddr, dstEP, ed->SecurityUse );
        ; Setup parameters for call to function ZDP_BindUnbindReq
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V4,A
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 38)
        MOV     A,?V2
        MOV     ?V2,A
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 39)
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V4,R0
        MOV     ?V5,R1
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 41)
        MOV     R0,#?V8
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 43)
        MOV     A,?V0
        ADD     A,#0x6
        MOV     ?V4,A
        CLR     A
        ADDC    A,?V1
        MOV     ?V5,A
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 45)
        MOV     A,?V0
        ADD     A,#0xe
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP102_8
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??ZDP_BindUnbindReq::?relay`; Banked call to: ZDP_BindUnbindReq
        MOV     A,#0x8
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 37)
        MOV     A,R1
// 2532 
// 2533     // Set timeout for response
// 2534     APS_SetEndDeviceBindTimeout( AIB_MaxBindingTime, ZDO_EndDeviceBindMatchTimeoutCB );
        ; Setup parameters for call to function APS_SetEndDeviceBindTimeout
        MOV     R4,#`??ZDO_EndDeviceBindMatchTimeoutCB::?relay` & 0xff
        MOV     R5,#(`??ZDO_EndDeviceBindMatchTimeoutCB::?relay` >> 8) & 0xff
        MOV     DPTR,#AIB_MaxBindingTime
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   `??APS_SetEndDeviceBindTimeout::?relay`; Banked call to: APS_SetEndDeviceBindTimeout
        LJMP    ??ZDMatchSendState_16 & 0xFFFF
// 2535   }
// 2536   else
// 2537   {
// 2538     // Send the response messages to requesting devices
// 2539     // send response to first requester
// 2540     dstAddr.addr.shortAddr = matchED->ed1.srcAddr;
??ZDMatchSendState_13:
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 2541     ZDP_EndDeviceBindRsp( matchED->ed1.TransSeq, &dstAddr, rspStatus, matchED->ed1.SecurityUse );
        ; Setup parameters for call to function ZDP_SendData
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 38)
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 40)
        MOV     ?V0,#0x20
        MOV     ?V1,#-0x80
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 42)
        MOV     R1,#0x1
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP102_8
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 37)
        MOV     A,R1
// 2542 
// 2543     // send response to second requester
// 2544     if ( matchED->state == ZDMATCH_SENDING_BINDS )
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x2e
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??ZDMatchSendState_17
// 2545     {
// 2546       dstAddr.addr.shortAddr = matchED->ed2.srcAddr;
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x19
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 2547       ZDP_EndDeviceBindRsp( matchED->ed2.TransSeq, &dstAddr, rspStatus, matchED->ed2.SecurityUse );
        ; Setup parameters for call to function ZDP_SendData
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x18
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 38)
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 40)
        MOV     ?V0,#0x20
        MOV     ?V1,#-0x80
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 42)
        MOV     R1,#0x1
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP102_8
        MOV     DPTR,#matchED
        MOVX    A,@DPTR
        ADD     A,#0x17
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 37)
        MOV     A,R1
// 2548     }
// 2549 
// 2550     // Process ended - release memory used
// 2551     ZDO_RemoveMatchMemory();
??ZDMatchSendState_17:
        ; Setup parameters for call to function ZDO_RemoveMatchMemory
        LCALL   `??ZDO_RemoveMatchMemory::?relay`; Banked call to: ZDO_RemoveMatchMemory
// 2552   }
// 2553 
// 2554   return ( TRUE );
??ZDMatchSendState_16:
        MOV     R1,#0x1
??ZDMatchSendState_1:
        MOV     A,#0x13
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R7,#0xa
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
// 2555 }
          CFI EndBlock cfiBlock35
// 2556 
// 2557 /*********************************************************************
// 2558  * @fn      ZDO_EndDeviceBindMatchTimeoutCB()
// 2559  *
// 2560  * @brief   End device bind timeout.
// 2561  *
// 2562  * @param  none
// 2563  *
// 2564  * @return  none
// 2565  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2566 static void ZDO_EndDeviceBindMatchTimeoutCB( void )
ZDO_EndDeviceBindMatchTimeoutCB:
          CFI Block cfiBlock36 Using cfiCommon0
          CFI Function ZDO_EndDeviceBindMatchTimeoutCB
        CODE
// 2567 {
        FUNCALL ZDO_EndDeviceBindMatchTimeoutCB, ZDMatchSendState
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2568   ZDMatchSendState( ZDMATCH_REASON_TIMEOUT, ZDP_TIMEOUT, 0 );
        ; Setup parameters for call to function ZDMatchSendState
        MOV     R3,#0x0
        MOV     R2,#-0x7b
        MOV     R1,#0x1
        LCALL   `??ZDMatchSendState::?relay`; Banked call to: ZDMatchSendState
        MOV     A,R1
// 2569 }
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
          CFI EndBlock cfiBlock36
// 2570 #endif // ZG_BUILD_COORDINATOR_TYPE
// 2571 
// 2572 /*********************************************************************
// 2573  * ZDO MESSAGE PARSING API FUNCTIONS
// 2574  */
// 2575 
// 2576 /*********************************************************************
// 2577  * @fn          ZDO_ParseEndDeviceBindReq
// 2578  *
// 2579  * @brief       This function parses the End_Device_Bind_req message.
// 2580  *
// 2581  *     NOTE:  The clusters lists in bindReq are allocated in this
// 2582  *            function and must be freed by that calling function.
// 2583  *
// 2584  * @param       inMsg  - incoming message (request)
// 2585  * @param       bindReq - pointer to place to parse message to
// 2586  *
// 2587  * @return      none
// 2588  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2589 void ZDO_ParseEndDeviceBindReq( zdoIncomingMsg_t *inMsg, ZDEndDeviceBind_t *bindReq )
ZDO_ParseEndDeviceBindReq:
          CFI Block cfiBlock37 Using cfiCommon0
          CFI Function ZDO_ParseEndDeviceBindReq
        CODE
// 2590 {
        FUNCALL ZDO_ParseEndDeviceBindReq, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ParseEndDeviceBindReq, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ParseEndDeviceBindReq, ZDO_ConvertOTAClusters
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ParseEndDeviceBindReq, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ParseEndDeviceBindReq, ZDO_ConvertOTAClusters
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0,R4
        MOV     ?V1,R5
// 2591   uint8 *msg;
// 2592 
// 2593   // Parse the message
// 2594   bindReq->TransSeq = inMsg->TransSeq;
        MOV     A,R2
        ADD     A,#0xf
        MOV     DPL,A
        CLR     A
        ADDC    A,R3
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,?V0
        MOV     DPH,?V1
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 2595   bindReq->srcAddr = inMsg->srcAddr.addr.shortAddr;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 2596   bindReq->SecurityUse = inMsg->SecurityUse;
        MOV     A,R2
        ADD     A,#0xe
        MOV     DPL,A
        CLR     A
        ADDC    A,R3
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 2597   msg = inMsg->asdu;
        MOV     A,R2
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,R3
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
// 2598 
// 2599   bindReq->localCoordinator = BUILD_UINT16( msg[0], msg[1] );
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R3,#0x0
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     R0,A
        MOV     A,R3
        ADDC    A,R1
        MOV     R1,A
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 2600   msg += 2;
        MOV     A,R6
        ADD     A,#0x2
        MOV     R6,A
        JNC     ??ZDO_ParseEndDeviceBindReq_0
        INC     R7
// 2601 
// 2602   osal_cpyExtAddr( bindReq->ieeeAddr, msg );
??ZDO_ParseEndDeviceBindReq_0:
        ; Setup parameters for call to function sAddrExtCpy
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     A,?V0
        ADD     A,#0x6
        MOV     R2,A
        CLR     A
        ADDC    A,?V1
        MOV     R3,A
        LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
// 2603   msg += Z_EXTADDR_LEN;
        MOV     A,R6
        ADD     A,#0x8
        MOV     R6,A
        JNC     ??ZDO_ParseEndDeviceBindReq_1
        INC     R7
// 2604 
// 2605   bindReq->endpoint = *msg++;
??ZDO_ParseEndDeviceBindReq_1:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,?V0
        ADD     A,#0xe
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 2606   bindReq->profileID = BUILD_UINT16( msg[0], msg[1] );
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R3,#0x0
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     R0,A
        MOV     A,R3
        ADDC    A,R1
        MOV     R1,A
        MOV     A,?V0
        ADD     A,#0xf
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 2607   msg += 2;
        MOV     A,R6
        ADD     A,#0x2
        MOV     R6,A
        JNC     ??ZDO_ParseEndDeviceBindReq_2
        INC     R7
// 2608 
// 2609   bindReq->inClusters = NULL;
??ZDO_ParseEndDeviceBindReq_2:
        MOV     A,?V0
        ADD     A,#0x12
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
// 2610   bindReq->outClusters = NULL;
        MOV     A,?V0
        ADD     A,#0x15
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
// 2611 
// 2612   if ((bindReq->numInClusters = *msg++) &&
// 2613       (bindReq->inClusters = (uint16*)osal_mem_alloc( (bindReq->numInClusters * sizeof( uint16 )))))
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,?V0
        ADD     A,#0x11
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
        MOV     A,?V0
        ADD     A,#0x11
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        JZ      ??ZDO_ParseEndDeviceBindReq_3
        ; Setup parameters for call to function osal_mem_alloc
        MOV     A,?V0
        ADD     A,#0x11
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R3,#0x0
        MOV     A,R2
        MOV     B,#0x2
        MUL     AB
        XCH     A,R2
        MOV     R0,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R0
        MOV     R0,A
        MOV     B,#0x2
        MOV     A,R3
        MUL     AB
        ADD     A,R0
        MOV     R3,A
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     A,?V0
        ADD     A,#0x12
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        MOV     A,?V0
        ADD     A,#0x12
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??ZDO_ParseEndDeviceBindReq_3
// 2614   {
// 2615     msg = ZDO_ConvertOTAClusters( bindReq->numInClusters, msg, bindReq->inClusters );
        ; Setup parameters for call to function ZDO_ConvertOTAClusters
        MOV     A,?V0
        ADD     A,#0x12
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     A,?V0
        ADD     A,#0x11
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??ZDO_ConvertOTAClusters::?relay`; Banked call to: ZDO_ConvertOTAClusters
        MOV     ?V2,R2
        MOV     ?V3,R3
        MOV     R6,?V2
        MOV     R7,?V3
        SJMP    ??ZDO_ParseEndDeviceBindReq_4
// 2616   }
// 2617   else
// 2618   {
// 2619     bindReq->numInClusters = 0;
??ZDO_ParseEndDeviceBindReq_3:
        MOV     A,?V0
        ADD     A,#0x11
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOV     A,#0x0
        MOVX    @DPTR,A
// 2620   }
// 2621 
// 2622   if ((bindReq->numOutClusters = *msg++) &&
// 2623       (bindReq->outClusters = (uint16*)osal_mem_alloc((bindReq->numOutClusters * sizeof(uint16)))))
??ZDO_ParseEndDeviceBindReq_4:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,?V0
        ADD     A,#0x14
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
        MOV     A,?V0
        ADD     A,#0x14
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        JZ      ??ZDO_ParseEndDeviceBindReq_5
        ; Setup parameters for call to function osal_mem_alloc
        MOV     A,?V0
        ADD     A,#0x14
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R3,#0x0
        MOV     A,R2
        MOV     B,#0x2
        MUL     AB
        XCH     A,R2
        MOV     R0,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R0
        MOV     R0,A
        MOV     B,#0x2
        MOV     A,R3
        MUL     AB
        ADD     A,R0
        MOV     R3,A
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     A,?V0
        ADD     A,#0x15
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        MOV     A,?V0
        ADD     A,#0x15
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??ZDO_ParseEndDeviceBindReq_5
// 2624   {
// 2625     msg = ZDO_ConvertOTAClusters( bindReq->numOutClusters, msg, bindReq->outClusters );
        ; Setup parameters for call to function ZDO_ConvertOTAClusters
        MOV     A,?V0
        ADD     A,#0x15
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     A,?V0
        ADD     A,#0x14
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??ZDO_ConvertOTAClusters::?relay`; Banked call to: ZDO_ConvertOTAClusters
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R6,?V0
        MOV     R7,?V1
        SJMP    ??ZDO_ParseEndDeviceBindReq_6
// 2626   }
// 2627   else
// 2628   {
// 2629     bindReq->numOutClusters = 0;
??ZDO_ParseEndDeviceBindReq_5:
        MOV     A,?V0
        ADD     A,#0x14
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOV     A,#0x0
        MOVX    @DPTR,A
// 2630   }
// 2631 }
??ZDO_ParseEndDeviceBindReq_6:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
          CFI EndBlock cfiBlock37
// 2632 
// 2633 /*********************************************************************
// 2634  * @fn          ZDO_ParseBindUnbindReq
// 2635  *
// 2636  * @brief       This function parses the Bind_req or Unbind_req message.
// 2637  *
// 2638  * @param       inMsg  - incoming message (request)
// 2639  * @param       pReq - place to put parsed information
// 2640  *
// 2641  * @return      none
// 2642  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2643 void ZDO_ParseBindUnbindReq( zdoIncomingMsg_t *inMsg, ZDO_BindUnbindReq_t *pReq )
ZDO_ParseBindUnbindReq:
          CFI Block cfiBlock38 Using cfiCommon0
          CFI Function ZDO_ParseBindUnbindReq
        CODE
// 2644 {
        FUNCALL ZDO_ParseBindUnbindReq, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ParseBindUnbindReq, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     ?V0,R4
        MOV     ?V1,R5
// 2645   uint8 *msg;
// 2646 
// 2647   msg = inMsg->asdu;
        MOV     A,R2
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,R3
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
// 2648   osal_cpyExtAddr( pReq->srcAddress, msg );
        ; Setup parameters for call to function sAddrExtCpy
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
// 2649   msg += Z_EXTADDR_LEN;
        MOV     A,R6
        ADD     A,#0x8
        MOV     R6,A
        JNC     ??ZDO_ParseBindUnbindReq_0
        INC     R7
// 2650   pReq->srcEndpoint = *msg++;
??ZDO_ParseBindUnbindReq_0:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 2651   pReq->clusterID = BUILD_UINT16( msg[0], msg[1] );
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R3,#0x0
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     R0,A
        MOV     A,R3
        ADDC    A,R1
        MOV     R1,A
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 2652   msg += 2;
        MOV     A,R6
        ADD     A,#0x2
        MOV     R6,A
        JNC     ??ZDO_ParseBindUnbindReq_1
        INC     R7
// 2653   pReq->dstAddress.addrMode = *msg++;
??ZDO_ParseBindUnbindReq_1:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,?V0
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 2654   if ( pReq->dstAddress.addrMode == Addr64Bit )
        MOV     A,?V0
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0x3
        JNZ     ??ZDO_ParseBindUnbindReq_2
// 2655   {
// 2656     osal_cpyExtAddr( pReq->dstAddress.addr.extAddr, msg );
        ; Setup parameters for call to function sAddrExtCpy
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     A,?V0
        ADD     A,#0xb
        MOV     R2,A
        CLR     A
        ADDC    A,?V1
        MOV     R3,A
        LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
// 2657     msg += Z_EXTADDR_LEN;
        MOV     A,R6
        ADD     A,#0x8
        MOV     R6,A
        JNC     ??ZDO_ParseBindUnbindReq_3
        INC     R7
// 2658     pReq->dstEndpoint = *msg;
??ZDO_ParseBindUnbindReq_3:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,?V0
        ADD     A,#0x14
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        SJMP    ??ZDO_ParseBindUnbindReq_4
// 2659   }
// 2660   else
// 2661   {
// 2662     // copy group address
// 2663     pReq->dstAddress.addr.shortAddr = BUILD_UINT16( msg[0], msg[1] );
??ZDO_ParseBindUnbindReq_2:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R3,#0x0
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     R0,A
        MOV     A,R3
        ADDC    A,R1
        MOV     R1,A
        MOV     A,?V0
        ADD     A,#0xb
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 2664   }
// 2665 }
??ZDO_ParseBindUnbindReq_4:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
          CFI EndBlock cfiBlock38
// 2666 
// 2667 /*********************************************************************
// 2668  * @fn      ZDO_ParseAddrRsp
// 2669  *
// 2670  * @brief   Turns the inMsg (incoming message) into the out parsed
// 2671  *          structure.
// 2672  *
// 2673  * @param   inMsg - incoming message
// 2674  *
// 2675  * @return  pointer to parsed structures.  This structure was
// 2676  *          allocated using osal_mem_alloc, so it must be freed
// 2677  *          by the calling function [osal_mem_free()].
// 2678  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2679 ZDO_NwkIEEEAddrResp_t *ZDO_ParseAddrRsp( zdoIncomingMsg_t *inMsg )
ZDO_ParseAddrRsp:
          CFI Block cfiBlock39 Using cfiCommon0
          CFI Function ZDO_ParseAddrRsp
        CODE
// 2680 {
        FUNCALL ZDO_ParseAddrRsp, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ParseAddrRsp, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 2681   ZDO_NwkIEEEAddrResp_t *rsp;
// 2682   uint8 *msg;
// 2683   byte cnt = 0;
        MOV     ?V2,#0x0
// 2684 
// 2685   // Calculate the number of items in the list
// 2686   if ( inMsg->asduLen > (1 + Z_EXTADDR_LEN + 2) )
        MOV     A,R6
        ADD     A,#0x10
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0xc
        JC      ??ZDO_ParseAddrRsp_0
// 2687   {
// 2688     cnt = inMsg->asdu[1 + Z_EXTADDR_LEN + 2];
        MOV     A,R6
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0xb
        MOV     DPL,A
        XCH     A,R0
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V2,A
        SJMP    ??ZDO_ParseAddrRsp_1
// 2689   }
// 2690   else
// 2691   {
// 2692     cnt = 0;
??ZDO_ParseAddrRsp_0:
        MOV     ?V2,#0x0
// 2693   }
// 2694 
// 2695   // Make buffer
// 2696   rsp = (ZDO_NwkIEEEAddrResp_t *)osal_mem_alloc( sizeof(ZDO_NwkIEEEAddrResp_t) + (cnt * sizeof ( uint16 )) );
??ZDO_ParseAddrRsp_1:
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R0,?V2
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0x2
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0x2
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0xd
        MOV     R2,A
        CLR     A
        ADDC    A,R1
        MOV     R3,A
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     ?V0,?V4
        MOV     ?V1,?V5
// 2697 
// 2698   if ( rsp )
        MOV     A,?V0
        ORL     A,?V1
        JNZ     $+5
        LJMP    ??ZDO_ParseAddrRsp_2 & 0xFFFF
// 2699   {
// 2700     msg = inMsg->asdu;
        MOV     A,R6
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
// 2701 
// 2702     rsp->status = *msg++;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,?V0
        MOV     DPH,?V1
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 2703     if ( rsp->status == ZDO_SUCCESS )
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??ZDO_ParseAddrRsp_2 & 0xFFFF
// 2704     {
// 2705       osal_cpyExtAddr( rsp->extAddr, msg );
        ; Setup parameters for call to function sAddrExtCpy
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     A,?V0
        ADD     A,#0x3
        MOV     R2,A
        CLR     A
        ADDC    A,?V1
        MOV     R3,A
        LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
// 2706       msg += Z_EXTADDR_LEN;
        MOV     A,R6
        ADD     A,#0x8
        MOV     R6,A
        JNC     ??ZDO_ParseAddrRsp_3
        INC     R7
// 2707       rsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
??ZDO_ParseAddrRsp_3:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R3,#0x0
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     R0,A
        MOV     A,R3
        ADDC    A,R1
        MOV     R1,A
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 2708 
// 2709       msg += 2;
        MOV     A,R6
        ADD     A,#0x2
        MOV     R6,A
        JNC     ??ZDO_ParseAddrRsp_4
        INC     R7
// 2710       rsp->numAssocDevs = 0;
??ZDO_ParseAddrRsp_4:
        MOV     A,?V0
        ADD     A,#0xb
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOV     A,#0x0
        MOVX    @DPTR,A
// 2711 
// 2712       // StartIndex field is only present if NumAssocDev field is non-zero.
// 2713       if ( cnt > 0 )
        MOV     A,?V2
        JNZ     $+5
        LJMP    ??ZDO_ParseAddrRsp_2 & 0xFFFF
// 2714       {
// 2715         uint16 *pList = &(rsp->devList[0]);
        MOV     A,?V0
        ADD     A,#0xd
        MOV     R0,A
        CLR     A
        ADDC    A,?V1
        MOV     R1,A
// 2716         byte n = cnt;
        MOV     ?V3,?V2
// 2717 
// 2718         rsp->numAssocDevs = *msg++;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,?V0
        ADD     A,#0xb
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 2719         rsp->startIndex = *msg++;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,?V0
        ADD     A,#0xc
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
        SJMP    ??ZDO_ParseAddrRsp_5
// 2720 
// 2721         while ( n != 0 )
// 2722         {
// 2723           *pList++ = BUILD_UINT16( msg[0], msg[1] );
??ZDO_ParseAddrRsp_6:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R5,#0x0
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R3,#0x0
        CLR     A
        XCH     A,R2
        MOV     R3,A
        MOV     A,R4
        ADD     A,R2
        MOV     R2,A
        MOV     A,R5
        ADDC    A,R3
        MOV     R3,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        MOV     A,R0
        ADD     A,#0x2
        MOV     R0,A
        JNC     ??ZDO_ParseAddrRsp_7
        INC     R1
// 2724           msg += sizeof( uint16 );
??ZDO_ParseAddrRsp_7:
        MOV     A,R6
        ADD     A,#0x2
        MOV     R6,A
        JNC     ??ZDO_ParseAddrRsp_8
        INC     R7
// 2725           n--;
??ZDO_ParseAddrRsp_8:
        DEC     ?V3
// 2726         }
??ZDO_ParseAddrRsp_5:
        MOV     A,?V3
        JNZ     ??ZDO_ParseAddrRsp_6
// 2727       }
// 2728     }
// 2729   }
// 2730 
// 2731   return ( rsp );
??ZDO_ParseAddrRsp_2:
        MOV     R2,?V0
        MOV     R3,?V1
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
// 2732 }
          CFI EndBlock cfiBlock39
// 2733 
// 2734 /*********************************************************************
// 2735  * @fn          ZDO_ParseNodeDescRsp
// 2736  *
// 2737  * @brief       This function parses the Node_Desc_rsp message.
// 2738  *
// 2739  * @param       inMsg - incoming message
// 2740  * @param       pNDRsp - place to parse the message into
// 2741  *
// 2742  * @return      none
// 2743  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2744 void ZDO_ParseNodeDescRsp( zdoIncomingMsg_t *inMsg, ZDO_NodeDescRsp_t *pNDRsp )
ZDO_ParseNodeDescRsp:
          CFI Block cfiBlock40 Using cfiCommon0
          CFI Function ZDO_ParseNodeDescRsp
        CODE
// 2745 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
// 2746   uint8 *msg;
// 2747 
// 2748   msg = inMsg->asdu;
        MOV     A,R2
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,R3
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
// 2749 
// 2750   pNDRsp->status = *msg++;
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R4
        MOV     DPH,R5
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOV     R0,DPL
        MOV     R1,DPH
// 2751   pNDRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     R6,A
        MOV     R7,#0x0
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R3,#0x0
        CLR     A
        XCH     A,R2
        MOV     R3,A
        MOV     A,R6
        ADD     A,R2
        MOV     R2,A
        MOV     A,R7
        ADDC    A,R3
        MOV     R3,A
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
// 2752 
// 2753   if ( pNDRsp->status == ZDP_SUCCESS )
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??ZDO_ParseNodeDescRsp_0 & 0xFFFF
// 2754   {
// 2755     msg += 2;
        MOV     A,R0
        ADD     A,#0x2
        MOV     R0,A
        JNC     ??ZDO_ParseNodeDescRsp_1
        INC     R1
// 2756     pNDRsp->nodeDesc.LogicalType = *msg & 0x07;
??ZDO_ParseNodeDescRsp_1:
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        ANL     A,#0x7
        MOV     R2,A
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ANL     A,#0xf8
        MOVX    @DPTR,A
        MOV     A,#0x7
        ANL     A,R2
        MOV     R2,A
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ORL     A,R2
        MOVX    @DPTR,A
// 2757 
// 2758     pNDRsp->nodeDesc.ComplexDescAvail = ( *msg & 0x08 ) >> 3;
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.3
        CLR     A
        RLC     A
        MOV     R2,A
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R2
        MOV     C,0xE0 /* A   */.0
        MOVX    A,@DPTR
        MOV     0xE0 /* A   */.3,C
        MOVX    @DPTR,A
// 2759     pNDRsp->nodeDesc.UserDescAvail = ( *msg & 0x10 ) >> 4;
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.4
        CLR     A
        RLC     A
        MOV     R2,A
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R2
        MOV     C,0xE0 /* A   */.0
        MOVX    A,@DPTR
        MOV     0xE0 /* A   */.4,C
        MOVX    @DPTR,A
// 2760 
// 2761     msg++;  // Reserved bits.
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOV     R0,DPL
        MOV     R1,DPH
// 2762     pNDRsp->nodeDesc.FrequencyBand = (*msg >> 3) & 0x1f;
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        RRC     A
        RRC     A
        RRC     A
        ANL     A,#0x1f
        MOV     R2,A
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ANL     A,#0x7
        MOVX    @DPTR,A
        MOV     A,R2
        RLC     A
        RLC     A
        RLC     A
        ANL     A,#0xf8
        MOV     R2,A
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ORL     A,R2
        MOVX    @DPTR,A
// 2763     pNDRsp->nodeDesc.APSFlags = *msg++ & 0x07;
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        ANL     A,#0x7
        MOV     R2,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ANL     A,#0xf8
        MOVX    @DPTR,A
        MOV     A,#0x7
        ANL     A,R2
        MOV     R2,A
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ORL     A,R2
        MOVX    @DPTR,A
// 2764     pNDRsp->nodeDesc.CapabilityFlags = *msg++;
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOV     R0,DPL
        MOV     R1,DPH
// 2765     pNDRsp->nodeDesc.ManufacturerCode[0] = *msg++;
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOV     R0,DPL
        MOV     R1,DPH
// 2766     pNDRsp->nodeDesc.ManufacturerCode[1] = *msg++;
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOV     R0,DPL
        MOV     R1,DPH
// 2767     pNDRsp->nodeDesc.MaxBufferSize = *msg++;
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOV     R0,DPL
        MOV     R1,DPH
// 2768     pNDRsp->nodeDesc.MaxInTransferSize[0] = *msg++;
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOV     R0,DPL
        MOV     R1,DPH
// 2769     pNDRsp->nodeDesc.MaxInTransferSize[1] = *msg++;
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOV     R0,DPL
        MOV     R1,DPH
// 2770     pNDRsp->nodeDesc.ServerMask = BUILD_UINT16( msg[0], msg[1] );
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     R6,A
        MOV     R7,#0x0
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R3,#0x0
        CLR     A
        XCH     A,R2
        MOV     R3,A
        MOV     A,R6
        ADD     A,R2
        MOV     R2,A
        MOV     A,R7
        ADDC    A,R3
        MOV     R3,A
        MOV     A,R4
        ADD     A,#0xb
        MOV     DPL,A
        CLR     A
        ADDC    A,R5
        MOV     DPH,A
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
// 2771     msg += 2;
        MOV     A,R0
        ADD     A,#0x2
        MOV     R0,A
        JNC     ??ZDO_ParseNodeDescRsp_2
        INC     R1
// 2772     pNDRsp->nodeDesc.MaxOutTransferSize[0] = *msg++;
??ZDO_ParseNodeDescRsp_2:
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R4
        ADD     A,#0xd
        MOV     DPL,A
        CLR     A
        ADDC    A,R5
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOV     R0,DPL
        MOV     R1,DPH
// 2773     pNDRsp->nodeDesc.MaxOutTransferSize[1] = *msg++;
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R4
        ADD     A,#0xe
        MOV     DPL,A
        CLR     A
        ADDC    A,R5
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOV     R0,DPL
        MOV     R1,DPH
// 2774     pNDRsp->nodeDesc.DescriptorCapability = *msg;
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R4
        ADD     A,#0xf
        MOV     DPL,A
        CLR     A
        ADDC    A,R5
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 2775   }
// 2776 }
??ZDO_ParseNodeDescRsp_0:
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
          CFI EndBlock cfiBlock40
// 2777 
// 2778 /*********************************************************************
// 2779  * @fn          ZDO_ParsePowerDescRsp
// 2780  *
// 2781  * @brief       This function parses the Power_Desc_rsp message.
// 2782  *
// 2783  * @param       inMsg  - incoming message
// 2784  * @param       pNPRsp - place to parse the message into
// 2785  *
// 2786  * @return      none
// 2787  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2788 void ZDO_ParsePowerDescRsp( zdoIncomingMsg_t *inMsg, ZDO_PowerRsp_t *pNPRsp )
ZDO_ParsePowerDescRsp:
          CFI Block cfiBlock41 Using cfiCommon0
          CFI Function ZDO_ParsePowerDescRsp
        CODE
// 2789 {
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 2790   uint8 *msg;
// 2791 
// 2792   msg = inMsg->asdu;
        MOV     A,R2
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,R3
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
// 2793   pNPRsp->status = *msg++;
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R4
        MOV     DPH,R5
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
// 2794   pNPRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R6,A
        MOV     R7,#0x0
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R6
        ADD     A,R0
        MOV     R0,A
        MOV     A,R7
        ADDC    A,R1
        MOV     R1,A
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 2795 
// 2796   if ( pNPRsp->status == ZDP_SUCCESS )
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??ZDO_ParsePowerDescRsp_0 & 0xFFFF
// 2797   {
// 2798     msg += 2;
        MOV     A,R2
        ADD     A,#0x2
        MOV     R2,A
        JNC     ??ZDO_ParsePowerDescRsp_1
        INC     R3
// 2799     pNPRsp->pwrDesc.AvailablePowerSources = *msg >> 4;
??ZDO_ParsePowerDescRsp_1:
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        SWAP    A
        ANL     A,#0xf
        MOV     ?V0,A
        MOV     ?V1,#0x0
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ANL     A,#0xf
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ANL     A,#0xff
        MOVX    @DPTR,A
        MOV     A,#0x4
        MOV     R0,#?V0
        LCALL   ?S_SHL
        MOV     A,?V0
        ANL     A,#0xf0
        MOV     R0,A
        MOV     A,?V1
        ANL     A,#0x0
        MOV     R1,A
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ORL     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ORL     A,R1
        MOVX    @DPTR,A
// 2800     pNPRsp->pwrDesc.PowerMode = *msg++ & 0x0F;
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        MOV     A,R0
        ANL     A,#0xf
        MOV     R0,A
        MOV     A,R1
        ANL     A,#0x0
        MOV     R1,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ANL     A,#0xf0
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ANL     A,#0xff
        MOVX    @DPTR,A
        MOV     A,R0
        ANL     A,#0xf
        MOV     R0,A
        MOV     A,R1
        ANL     A,#0x0
        MOV     R1,A
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ORL     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ORL     A,R1
        MOVX    @DPTR,A
// 2801     pNPRsp->pwrDesc.CurrentPowerSourceLevel = *msg >> 4;
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        SWAP    A
        ANL     A,#0xf
        MOV     ?V0,A
        MOV     ?V1,#0x0
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ANL     A,#0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ANL     A,#0xf
        MOVX    @DPTR,A
        MOV     A,#0xc
        MOV     R0,#?V0
        LCALL   ?S_SHL
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ORL     A,?V0
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ORL     A,?V1
        MOVX    @DPTR,A
// 2802     pNPRsp->pwrDesc.CurrentPowerSource = *msg++ & 0x0F;
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        MOV     A,R0
        ANL     A,#0xf
        MOV     R0,A
        MOV     A,R1
        ANL     A,#0x0
        MOV     R1,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ANL     A,#0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ANL     A,#0xf0
        MOVX    @DPTR,A
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R0
        ANL     A,#0x0
        MOV     R0,A
        MOV     A,R1
        ANL     A,#0xf
        MOV     R1,A
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ORL     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ORL     A,R1
        MOVX    @DPTR,A
// 2803   }
// 2804 }
??ZDO_ParsePowerDescRsp_0:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
          CFI EndBlock cfiBlock41
// 2805 
// 2806 /*********************************************************************
// 2807  * @fn          ZDO_ParseSimpleDescRsp
// 2808  *
// 2809  * @brief       This function parse the Simple_Desc_rsp message.
// 2810  *
// 2811  *   NOTE: The pAppInClusterList and pAppOutClusterList fields
// 2812  *         in the SimpleDescriptionFormat_t structure are allocated
// 2813  *         and the calling function needs to free [osal_msg_free()]
// 2814  *         these buffers.
// 2815  *
// 2816  * @param       inMsg  - incoming message
// 2817  * @param       pSimpleDescRsp - place to parse the message into
// 2818  *
// 2819  * @return      none
// 2820  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2821 void ZDO_ParseSimpleDescRsp( zdoIncomingMsg_t *inMsg, ZDO_SimpleDescRsp_t *pSimpleDescRsp )
ZDO_ParseSimpleDescRsp:
          CFI Block cfiBlock42 Using cfiCommon0
          CFI Function ZDO_ParseSimpleDescRsp
        CODE
// 2822 {
        FUNCALL ZDO_ParseSimpleDescRsp, ZDO_ParseSimpleDescBuf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
// 2823   uint8 *msg;
// 2824 
// 2825   msg = inMsg->asdu;
        MOV     A,R2
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,R3
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
// 2826   pSimpleDescRsp->status = *msg++;
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R4
        MOV     DPH,R5
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
// 2827   pSimpleDescRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R6,A
        MOV     R7,#0x0
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R6
        ADD     A,R0
        MOV     R0,A
        MOV     A,R7
        ADDC    A,R1
        MOV     R1,A
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 2828   msg += sizeof ( uint16 );
        MOV     A,R2
        ADD     A,#0x2
        MOV     R2,A
        JNC     ??ZDO_ParseSimpleDescRsp_0
        INC     R3
// 2829   msg++; // Skip past the length field.
??ZDO_ParseSimpleDescRsp_0:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
// 2830 
// 2831   if ( pSimpleDescRsp->status == ZDP_SUCCESS )
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        JNZ     ??ZDO_ParseSimpleDescRsp_1
// 2832   {
// 2833     ZDO_ParseSimpleDescBuf( msg, &(pSimpleDescRsp->simpleDesc) );
        ; Setup parameters for call to function ZDO_ParseSimpleDescBuf
        MOV     A,R4
        ADD     A,#0x3
        MOV     R4,A
        JNC     ??ZDO_ParseSimpleDescRsp_2
        INC     R5
??ZDO_ParseSimpleDescRsp_2:
        LCALL   `??ZDO_ParseSimpleDescBuf::?relay`; Banked call to: ZDO_ParseSimpleDescBuf
        MOV     A,R1
// 2834   }
// 2835 }
??ZDO_ParseSimpleDescRsp_1:
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
          CFI EndBlock cfiBlock42
// 2836 
// 2837 /*********************************************************************
// 2838  * @fn          ZDO_ParseEPListRsp
// 2839  *
// 2840  * @brief       This parse the Active_EP_rsp or Match_Desc_rsp message.
// 2841  *
// 2842  * @param       inMsg  - incoming message
// 2843  *
// 2844  * @return      none
// 2845  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2846 ZDO_ActiveEndpointRsp_t *ZDO_ParseEPListRsp( zdoIncomingMsg_t *inMsg )
ZDO_ParseEPListRsp:
          CFI Block cfiBlock43 Using cfiCommon0
          CFI Function ZDO_ParseEPListRsp
        CODE
// 2847 {
        FUNCALL ZDO_ParseEPListRsp, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ParseEPListRsp, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
// 2848   ZDO_ActiveEndpointRsp_t *pRsp;
// 2849   uint8 *msg;
// 2850   uint8 Status;
// 2851   uint8 cnt;
// 2852 
// 2853   msg = inMsg->asdu;
        MOV     A,R2
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,R3
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
// 2854   Status = *msg++;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     ?V3,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 2855   cnt = msg[2];
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V2,A
// 2856 
// 2857   pRsp = (ZDO_ActiveEndpointRsp_t *)osal_mem_alloc( sizeof(  ZDO_ActiveEndpointRsp_t ) + cnt );
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R0,?V2
        MOV     R1,#0x0
        MOV     A,R0
        ADD     A,#0x4
        MOV     R2,A
        CLR     A
        ADDC    A,R1
        MOV     R3,A
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     ?V0,?V4
        MOV     ?V1,?V5
// 2858   if ( pRsp )
        MOV     A,?V0
        ORL     A,?V1
        JZ      ??ZDO_ParseEPListRsp_0
// 2859   {
// 2860     pRsp->status = Status;
        MOV     A,?V3
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,?V0
        MOV     DPH,?V1
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 2861     pRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R3,#0x0
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     R0,A
        MOV     A,R3
        ADDC    A,R1
        MOV     R1,A
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 2862     msg += sizeof( uint16 );
        MOV     A,R6
        ADD     A,#0x2
        MOV     R6,A
        JNC     ??ZDO_ParseEPListRsp_1
        INC     R7
// 2863     pRsp->cnt = cnt;
??ZDO_ParseEPListRsp_1:
        MOV     A,?V2
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 2864     msg++; // pass cnt
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 2865     osal_memcpy( pRsp->epList, msg, cnt );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V4,R6
        MOV     ?V5,R7
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R4,?V2
        MOV     R5,#0x0
        MOV     A,?V0
        ADD     A,#0x4
        MOV     R2,A
        CLR     A
        ADDC    A,?V1
        MOV     R3,A
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
// 2866   }
// 2867 
// 2868   return ( pRsp );
??ZDO_ParseEPListRsp_0:
        MOV     R2,?V0
        MOV     R3,?V1
        MOV     R7,#0x7
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
// 2869 }
          CFI EndBlock cfiBlock43
// 2870 
// 2871 /*********************************************************************
// 2872  * @fn          ZDO_ParseServerDiscRsp
// 2873  *
// 2874  * @brief       Parse the Server_Discovery_rsp message.
// 2875  *
// 2876  * @param       inMsg - incoming message.
// 2877  * @param       pRsp - place to put the parsed information.
// 2878  *
// 2879  * @return      none
// 2880  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2881 void ZDO_ParseServerDiscRsp( zdoIncomingMsg_t *inMsg, ZDO_ServerDiscRsp_t *pRsp )
ZDO_ParseServerDiscRsp:
          CFI Block cfiBlock44 Using cfiCommon0
          CFI Function ZDO_ParseServerDiscRsp
        CODE
// 2882 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
// 2883   pRsp->status = inMsg->asdu[0];
        MOV     A,R2
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,R3
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R4
        MOV     DPH,R5
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 2884   pRsp->serverMask = BUILD_UINT16( inMsg->asdu[1], inMsg->asdu[2] );
        MOV     A,R2
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,R3
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
        MOV     R7,#0x0
        MOV     A,R2
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,R3
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R6
        ADD     A,R0
        MOV     R0,A
        MOV     A,R7
        ADDC    A,R1
        MOV     R1,A
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 2885 }
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
          CFI EndBlock cfiBlock44
// 2886 
// 2887 /*********************************************************************
// 2888  * @fn          ZDO_ParseMgmtLqiRsp
// 2889  *
// 2890  * @brief       This function parses the incoming Management
// 2891  *              LQI response
// 2892  *
// 2893  * @param       inMsg - incoming message
// 2894  *
// 2895  * @return      a pointer to parsed response structure (NULL if not allocated).
// 2896  *          This structure was allocated using osal_mem_alloc, so it must be freed
// 2897  *          by the calling function [osal_mem_free()].
// 2898  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2899 ZDO_MgmtLqiRsp_t *ZDO_ParseMgmtLqiRsp( zdoIncomingMsg_t *inMsg )
ZDO_ParseMgmtLqiRsp:
          CFI Block cfiBlock45 Using cfiCommon0
          CFI Function ZDO_ParseMgmtLqiRsp
        CODE
// 2900 {
        FUNCALL ZDO_ParseMgmtLqiRsp, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ParseMgmtLqiRsp, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ParseMgmtLqiRsp, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
// 2901   ZDO_MgmtLqiRsp_t *pRsp;
// 2902   uint8 status;
// 2903   uint8 startIndex = 0;
        MOV     ?V5,#0x0
// 2904   uint8 neighborLqiCount = 0;
        MOV     ?V4,#0x0
// 2905   uint8 neighborLqiEntries = 0;
        MOV     ?V6,#0x0
// 2906   uint8 *msg;
// 2907 
// 2908   msg = inMsg->asdu;
        MOV     A,R2
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,R3
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
// 2909 
// 2910   status = *msg++;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     ?V7,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 2911   if ( status == ZSuccess )
        MOV     A,?V7
        JNZ     ??ZDO_ParseMgmtLqiRsp_0
// 2912   {
// 2913     neighborLqiEntries = *msg++;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     ?V6,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 2914     startIndex = *msg++;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     ?V5,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 2915     neighborLqiCount = *msg++;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     ?V4,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 2916   }
// 2917 
// 2918   // Allocate a buffer big enough to handle the list.
// 2919   pRsp = (ZDO_MgmtLqiRsp_t *)osal_mem_alloc(
// 2920             sizeof( ZDO_MgmtLqiRsp_t ) + (neighborLqiCount * sizeof( ZDP_MgmtLqiItem_t )) );
??ZDO_ParseMgmtLqiRsp_0:
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R0,?V4
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0x1a
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0x1a
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x4
        MOV     R2,A
        CLR     A
        ADDC    A,R1
        MOV     R3,A
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     ?V2,?V0
        MOV     ?V3,?V1
// 2921   if ( pRsp )
        MOV     A,?V2
        ORL     A,?V3
        JNZ     $+5
        LJMP    ??ZDO_ParseMgmtLqiRsp_1 & 0xFFFF
// 2922   {
// 2923     uint8 x;
// 2924     ZDP_MgmtLqiItem_t *pList = pRsp->list;
        MOV     A,?V2
        ADD     A,#0x4
        MOV     ?V0,A
        CLR     A
        ADDC    A,?V3
        MOV     ?V1,A
// 2925     pRsp->status = status;
        MOV     A,?V7
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,?V2
        MOV     DPH,?V3
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 2926     pRsp->neighborLqiEntries = neighborLqiEntries;
        MOV     A,?V6
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 2927     pRsp->startIndex = startIndex;
        MOV     A,?V5
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        INC     DPTR
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 2928     pRsp->neighborLqiCount = neighborLqiCount;
        MOV     A,?V4
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 2929 
// 2930     for ( x = 0; x < neighborLqiCount; x++ )
        MOV     ?V5,#0x0
        LJMP    ??ZDO_ParseMgmtLqiRsp_2 & 0xFFFF
// 2931     {
// 2932       uint8 tmp;
// 2933 
// 2934       pList->panID = 0; // This isn't in the record, why is it in the structure?
??ZDO_ParseMgmtLqiRsp_3:
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
// 2935       osal_cpyExtAddr(pList->extPanID, msg);   //Copy extended PAN ID
        ; Setup parameters for call to function sAddrExtCpy
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     A,?V0
        ADD     A,#0x2
        MOV     R2,A
        CLR     A
        ADDC    A,?V1
        MOV     R3,A
        LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
// 2936       msg += Z_EXTADDR_LEN;
        MOV     A,R6
        ADD     A,#0x8
        MOV     R6,A
        JNC     ??ZDO_ParseMgmtLqiRsp_4
        INC     R7
// 2937 
// 2938       osal_cpyExtAddr(pList->extAddr, msg);   //Copy extended address
??ZDO_ParseMgmtLqiRsp_4:
        ; Setup parameters for call to function sAddrExtCpy
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     A,?V0
        ADD     A,#0xa
        MOV     R2,A
        CLR     A
        ADDC    A,?V1
        MOV     R3,A
        LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
// 2939       msg += Z_EXTADDR_LEN;
        MOV     A,R6
        ADD     A,#0x8
        MOV     R6,A
        JNC     ??ZDO_ParseMgmtLqiRsp_5
        INC     R7
// 2940 
// 2941       pList->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
??ZDO_ParseMgmtLqiRsp_5:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R3,#0x0
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     R0,A
        MOV     A,R3
        ADDC    A,R1
        MOV     R1,A
        MOV     A,?V0
        ADD     A,#0x12
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 2942       msg += 2;
        MOV     A,R6
        ADD     A,#0x2
        MOV     R6,A
        JNC     ??ZDO_ParseMgmtLqiRsp_6
        INC     R7
// 2943 
// 2944       tmp = *msg++;
??ZDO_ParseMgmtLqiRsp_6:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 2945       pList->devType = tmp & 0x03;
        MOV     A,#0x3
        ANL     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,?V0
        ADD     A,#0x14
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 2946       pList->rxOnIdle = (tmp >> 2) & 0x03;
        MOV     A,R0
        RRC     A
        RRC     A
        ANL     A,#0x3f
        ANL     A,#0x3
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,?V0
        ADD     A,#0x15
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 2947       pList->relation = (tmp >> 4) & 0x07;
        MOV     A,R0
        SWAP    A
        ANL     A,#0xf
        ANL     A,#0x7
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,?V0
        ADD     A,#0x16
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 2948 
// 2949       pList->permit = (*msg++) & 0x03;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        ANL     A,#0x3
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,?V0
        ADD     A,#0x17
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 2950 
// 2951       pList->depth = *msg++;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,?V0
        ADD     A,#0x18
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 2952 
// 2953       pList->lqi = *msg++;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,?V0
        ADD     A,#0x19
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 2954       pList++;
        MOV     A,?V0
        ADD     A,#0x1a
        MOV     ?V0,A
        JNC     ??ZDO_ParseMgmtLqiRsp_7
        INC     ?V1
// 2955     }
??ZDO_ParseMgmtLqiRsp_7:
        INC     ?V5
??ZDO_ParseMgmtLqiRsp_2:
        MOV     A,?V5
        CLR     C
        SUBB    A,?V4
        JNC     $+5
        LJMP    ??ZDO_ParseMgmtLqiRsp_3 & 0xFFFF
// 2956   }
// 2957 
// 2958   return ( pRsp );
??ZDO_ParseMgmtLqiRsp_1:
        MOV     R2,?V2
        MOV     R3,?V3
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
// 2959 }
          CFI EndBlock cfiBlock45
// 2960 
// 2961 /*********************************************************************
// 2962  * @fn          ZDO_ParseMgmNwkDiscRsp
// 2963  *
// 2964  * @brief       This function parses the incoming Management
// 2965  *              Network Discover response.
// 2966  *
// 2967  * @param       inMsg - incoming message
// 2968  *
// 2969  * @return      pointer to parsed response.  This structure was
// 2970  *          allocated using osal_mem_alloc, so it must be freed
// 2971  *          by the calling function [osal_mem_free()].
// 2972  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2973 ZDO_MgmNwkDiscRsp_t *ZDO_ParseMgmNwkDiscRsp( zdoIncomingMsg_t *inMsg )
ZDO_ParseMgmNwkDiscRsp:
          CFI Block cfiBlock46 Using cfiCommon0
          CFI Function ZDO_ParseMgmNwkDiscRsp
        CODE
// 2974 {
        FUNCALL ZDO_ParseMgmNwkDiscRsp, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ParseMgmNwkDiscRsp, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
// 2975   ZDO_MgmNwkDiscRsp_t *pRsp;
// 2976   uint8 status;
// 2977   uint8 networkCount = 0;
        MOV     ?V1,#0x0
// 2978   uint8 startIndex = 0;
        MOV     ?V0,#0x0
// 2979   uint8 networkListCount = 0;
        MOV     ?V4,#0x0
// 2980   uint8 *msg;
// 2981 
// 2982   msg = inMsg->asdu;
        MOV     A,R2
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,R3
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
// 2983   status = *msg++;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     ?V5,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 2984 
// 2985   if ( status == ZSuccess )
        MOV     A,?V5
        JNZ     ??ZDO_ParseMgmNwkDiscRsp_0
// 2986   {
// 2987     networkCount = *msg++;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     ?V1,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 2988     startIndex = *msg++;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     ?V0,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 2989     networkListCount = *msg++;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     ?V4,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 2990   }
// 2991 
// 2992   // Allocate a buffer big enough to handle the list.
// 2993   pRsp = (ZDO_MgmNwkDiscRsp_t *)osal_mem_alloc( sizeof( ZDO_MgmNwkDiscRsp_t )
// 2994                                   + (networkListCount * sizeof( mgmtNwkDiscItem_t )) );
??ZDO_ParseMgmNwkDiscRsp_0:
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R0,?V4
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0x10
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0x10
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x4
        MOV     R2,A
        CLR     A
        ADDC    A,R1
        MOV     R3,A
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V6,R2
        MOV     ?V7,R3
        MOV     ?V2,?V6
        MOV     ?V3,?V7
// 2995   if ( pRsp )
        MOV     A,?V2
        ORL     A,?V3
        JNZ     $+5
        LJMP    ??ZDO_ParseMgmNwkDiscRsp_1 & 0xFFFF
// 2996   {
// 2997     uint8 x;
// 2998     mgmtNwkDiscItem_t *pList;
// 2999 
// 3000     pRsp->status = status;
        MOV     A,?V5
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,?V2
        MOV     DPH,?V3
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 3001     pRsp->networkCount = networkCount;
        MOV     A,?V1
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 3002     pRsp->startIndex = startIndex;
        MOV     A,?V0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        INC     DPTR
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 3003     pRsp->networkListCount = networkListCount;
        MOV     A,?V4
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 3004     pList = pRsp->list;
        MOV     A,?V2
        ADD     A,#0x4
        MOV     ?V0,A
        CLR     A
        ADDC    A,?V3
        MOV     ?V1,A
// 3005 
// 3006     for ( x = 0; x < networkListCount; x++ )
        MOV     ?V5,#0x0
        LJMP    ??ZDO_ParseMgmNwkDiscRsp_2 & 0xFFFF
// 3007     {
// 3008       osal_cpyExtAddr(pList->extendedPANID, msg);   //Copy extended PAN ID
??ZDO_ParseMgmNwkDiscRsp_3:
        ; Setup parameters for call to function sAddrExtCpy
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
// 3009       pList->PANId = BUILD_UINT16( msg[0], msg[1] );
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R3,#0x0
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     R0,A
        MOV     A,R3
        ADDC    A,R1
        MOV     R1,A
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 3010       msg += Z_EXTADDR_LEN;
        MOV     A,R6
        ADD     A,#0x8
        MOV     R6,A
        JNC     ??ZDO_ParseMgmNwkDiscRsp_4
        INC     R7
// 3011 
// 3012       pList->logicalChannel = *msg++;
??ZDO_ParseMgmNwkDiscRsp_4:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 3013       pList->stackProfile = (*msg) & 0x0F;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        ANL     A,#0xf
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,?V0
        ADD     A,#0xb
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 3014       pList->version = (*msg++ >> 4) & 0x0F;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        SWAP    A
        ANL     A,#0xf
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,?V0
        ADD     A,#0xc
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 3015       pList->beaconOrder = (*msg) & 0x0F;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        ANL     A,#0xf
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,?V0
        ADD     A,#0xd
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 3016       pList->superFrameOrder = (*msg++ >> 4) & 0x0F;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        SWAP    A
        ANL     A,#0xf
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,?V0
        ADD     A,#0xe
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 3017       pList->permitJoining = *msg++;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,?V0
        ADD     A,#0xf
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 3018       pList++;
        MOV     A,?V0
        ADD     A,#0x10
        MOV     ?V0,A
        JNC     ??ZDO_ParseMgmNwkDiscRsp_5
        INC     ?V1
// 3019     }
??ZDO_ParseMgmNwkDiscRsp_5:
        INC     ?V5
??ZDO_ParseMgmNwkDiscRsp_2:
        MOV     A,?V5
        CLR     C
        SUBB    A,?V4
        JNC     $+5
        LJMP    ??ZDO_ParseMgmNwkDiscRsp_3 & 0xFFFF
// 3020   }
// 3021 
// 3022   return ( pRsp );
??ZDO_ParseMgmNwkDiscRsp_1:
        MOV     R2,?V2
        MOV     R3,?V3
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
// 3023 }
          CFI EndBlock cfiBlock46
// 3024 
// 3025 /*********************************************************************
// 3026  * @fn          ZDO_ParseMgmtRtgRsp
// 3027  *
// 3028  * @brief       This function parses the incoming Management
// 3029  *              Routing response.
// 3030  *
// 3031  * @param       inMsg - incoming message
// 3032  *
// 3033  * @return      a pointer to parsed response structure (NULL if not allocated).
// 3034  *          This structure was allocated using osal_mem_alloc, so it must be freed
// 3035  *          by the calling function [osal_mem_free()].
// 3036  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3037 ZDO_MgmtRtgRsp_t *ZDO_ParseMgmtRtgRsp( zdoIncomingMsg_t *inMsg )
ZDO_ParseMgmtRtgRsp:
          CFI Block cfiBlock47 Using cfiCommon0
          CFI Function ZDO_ParseMgmtRtgRsp
        CODE
// 3038 {
        FUNCALL ZDO_ParseMgmtRtgRsp, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
// 3039   ZDO_MgmtRtgRsp_t *pRsp;
// 3040   uint8 status;
// 3041   uint8 rtgCount = 0;
        MOV     ?V2,#0x0
// 3042   uint8 startIndex = 0;
        MOV     ?V1,#0x0
// 3043   uint8 rtgListCount = 0;
        MOV     ?V0,#0x0
// 3044   uint8 *msg;
// 3045 
// 3046   msg = inMsg->asdu;
        MOV     A,R2
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,R3
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
// 3047 
// 3048   status = *msg++;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     ?V3,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 3049   if ( status == ZSuccess )
        MOV     A,?V3
        JNZ     ??ZDO_ParseMgmtRtgRsp_0
// 3050   {
// 3051     rtgCount = *msg++;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     ?V2,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 3052     startIndex = *msg++;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     ?V1,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 3053     rtgListCount = *msg++;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     ?V0,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 3054   }
// 3055 
// 3056   // Allocate a buffer big enough to handle the list
// 3057   pRsp = (ZDO_MgmtRtgRsp_t *)osal_mem_alloc(
// 3058           sizeof( ZDO_MgmtRtgRsp_t ) + (rtgListCount * sizeof( rtgItem_t )) );
??ZDO_ParseMgmtRtgRsp_0:
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R0,?V0
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0x7
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0x7
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x4
        MOV     R2,A
        CLR     A
        ADDC    A,R1
        MOV     R3,A
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     R2,?V4
        MOV     R3,?V5
// 3059   if ( pRsp )
        MOV     A,R2
        ORL     A,R3
        JNZ     $+5
        LJMP    ??ZDO_ParseMgmtRtgRsp_1 & 0xFFFF
// 3060   {
// 3061     uint8 x;
// 3062     rtgItem_t *pList = pRsp->list;
        MOV     A,R2
        ADD     A,#0x4
        MOV     R0,A
        CLR     A
        ADDC    A,R3
        MOV     R1,A
// 3063     pRsp->status = status;
        MOV     A,?V3
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R2
        MOV     DPH,R3
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 3064     pRsp->rtgCount = rtgCount;
        MOV     A,?V2
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 3065     pRsp->startIndex = startIndex;
        MOV     A,?V1
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 3066     pRsp->rtgListCount = rtgListCount;
        MOV     A,?V0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 3067 
// 3068     for ( x = 0; x < rtgListCount; x++ )
        MOV     ?V1,#0x0
        LJMP    ??ZDO_ParseMgmtRtgRsp_2 & 0xFFFF
// 3069     {
// 3070       uint8 statOpt;
// 3071 
// 3072       pList->dstAddress = BUILD_UINT16( msg[0], msg[1] );
??ZDO_ParseMgmtRtgRsp_3:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     ?V2,A
        MOV     ?V3,#0x0
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R5,#0x0
        CLR     A
        XCH     A,R4
        MOV     R5,A
        MOV     A,?V2
        ADD     A,R4
        MOV     R4,A
        MOV     A,?V3
        ADDC    A,R5
        MOV     R5,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
// 3073       msg += 2;
        MOV     A,R6
        ADD     A,#0x2
        MOV     R6,A
        JNC     ??ZDO_ParseMgmtRtgRsp_4
        INC     R7
// 3074       statOpt = *msg++;
??ZDO_ParseMgmtRtgRsp_4:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 3075       pList->status = (statOpt & 0x07);
        MOV     A,#0x7
        ANL     A,R4
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 3076       pList->options = ((statOpt >> 3) & 0x07);
        MOV     A,R4
        RRC     A
        RRC     A
        RRC     A
        ANL     A,#0x1f
        ANL     A,#0x7
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 3077       pList->nextHopAddress = BUILD_UINT16( msg[0], msg[1] );
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     ?V2,A
        MOV     ?V3,#0x0
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R5,#0x0
        CLR     A
        XCH     A,R4
        MOV     R5,A
        MOV     A,?V2
        ADD     A,R4
        MOV     R4,A
        MOV     A,?V3
        ADDC    A,R5
        MOV     R5,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
// 3078       msg += 2;
        MOV     A,R6
        ADD     A,#0x2
        MOV     R6,A
        JNC     ??ZDO_ParseMgmtRtgRsp_5
        INC     R7
// 3079       pList++;
??ZDO_ParseMgmtRtgRsp_5:
        MOV     A,R0
        ADD     A,#0x7
        MOV     R0,A
        JNC     ??ZDO_ParseMgmtRtgRsp_6
        INC     R1
// 3080     }
??ZDO_ParseMgmtRtgRsp_6:
        INC     ?V1
??ZDO_ParseMgmtRtgRsp_2:
        MOV     A,?V1
        CLR     C
        SUBB    A,?V0
        JNC     $+5
        LJMP    ??ZDO_ParseMgmtRtgRsp_3 & 0xFFFF
// 3081   }
// 3082 
// 3083   return ( pRsp );
??ZDO_ParseMgmtRtgRsp_1:
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
// 3084 }
          CFI EndBlock cfiBlock47
// 3085 
// 3086 /*********************************************************************
// 3087  * @fn          ZDO_ParseMgmtBindRsp
// 3088  *
// 3089  * @brief       This function parses the incoming Management
// 3090  *              Binding response.
// 3091  *
// 3092  * @param       inMsg - pointer to message to parse
// 3093  *
// 3094  * @return      a pointer to parsed response structure (NULL if not allocated).
// 3095  *          This structure was allocated using osal_mem_alloc, so it must be freed
// 3096  *          by the calling function [osal_mem_free()].
// 3097  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3098 ZDO_MgmtBindRsp_t *ZDO_ParseMgmtBindRsp( zdoIncomingMsg_t *inMsg )
ZDO_ParseMgmtBindRsp:
          CFI Block cfiBlock48 Using cfiCommon0
          CFI Function ZDO_ParseMgmtBindRsp
        CODE
// 3099 {
        FUNCALL ZDO_ParseMgmtBindRsp, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ParseMgmtBindRsp, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ParseMgmtBindRsp, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        MOV     A,#-0x12
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 0
// 3100   ZDO_MgmtBindRsp_t *pRsp;
// 3101   uint8 status;
// 3102   uint8 bindingCount = 0;
        MOV     ?V6,#0x0
// 3103   uint8 startIndex = 0;
        MOV     ?V5,#0x0
// 3104   uint8 bindingListCount = 0;
        MOV     ?V4,#0x0
// 3105   uint8 *msg;
// 3106 
// 3107   msg = inMsg->asdu;
        MOV     A,R2
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,R3
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V3,A
// 3108 
// 3109   status = *msg++;
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOVX    A,@DPTR
        MOV     ?V7,A
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        MOV     ?V2,DPL
        MOV     ?V3,DPH
// 3110   if ( status == ZSuccess )
        MOV     A,?V7
        JNZ     ??ZDO_ParseMgmtBindRsp_0
// 3111   {
// 3112     bindingCount = *msg++;
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOVX    A,@DPTR
        MOV     ?V6,A
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        MOV     ?V2,DPL
        MOV     ?V3,DPH
// 3113     startIndex = *msg++;
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOVX    A,@DPTR
        MOV     ?V5,A
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        MOV     ?V2,DPL
        MOV     ?V3,DPH
// 3114     bindingListCount = *msg++;
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOVX    A,@DPTR
        MOV     ?V4,A
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        MOV     ?V2,DPL
        MOV     ?V3,DPH
// 3115   }
// 3116 
// 3117   // Allocate a buffer big enough to handle the list
// 3118   pRsp = (ZDO_MgmtBindRsp_t *)osal_mem_alloc(
// 3119           (sizeof ( ZDO_MgmtBindRsp_t ) + (bindingListCount * sizeof( apsBindingItem_t ))) );
??ZDO_ParseMgmtBindRsp_0:
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R0,?V4
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0x15
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0x15
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x4
        MOV     R2,A
        CLR     A
        ADDC    A,R1
        MOV     R3,A
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V8,R2
        MOV     ?V9,R3
        MOV     ?V0,?V8
        MOV     ?V1,?V9
// 3120   if ( pRsp )
        MOV     A,?V0
        ORL     A,?V1
        JNZ     $+5
        LJMP    ??ZDO_ParseMgmtBindRsp_1 & 0xFFFF
// 3121   {
// 3122     uint8 x;
// 3123     apsBindingItem_t *pList = pRsp->list;
        MOV     A,?V0
        ADD     A,#0x4
        MOV     R6,A
        CLR     A
        ADDC    A,?V1
        MOV     R7,A
// 3124     pRsp->status = status;
        MOV     A,?V7
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,?V0
        MOV     DPH,?V1
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 3125     pRsp->bindingCount = bindingCount;
        MOV     A,?V6
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 3126     pRsp->startIndex = startIndex;
        MOV     A,?V5
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 3127     pRsp->bindingListCount = bindingListCount;
        MOV     A,?V4
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 3128 
// 3129     for ( x = 0; x < bindingListCount; x++ )
        MOV     ?V5,#0x0
        SJMP    ??ZDO_ParseMgmtBindRsp_2
// 3130     {
// 3131       osal_cpyExtAddr( pList->srcAddr, msg );
// 3132       msg += Z_EXTADDR_LEN;
// 3133       pList->srcEP = *msg++;
// 3134 
// 3135       // Get the Cluster ID
// 3136 
// 3137       pList->clusterID = BUILD_UINT16( msg[0], msg[1] );
// 3138       msg += 2;
// 3139       pList->dstAddr.addrMode = *msg++;
// 3140       if ( pList->dstAddr.addrMode == Addr64Bit )
// 3141       {
// 3142         osal_cpyExtAddr( pList->dstAddr.addr.extAddr, msg );
// 3143         msg += Z_EXTADDR_LEN;
// 3144         pList->dstEP = *msg++;
// 3145       }
// 3146       else
// 3147       {
// 3148         pList->dstAddr.addr.shortAddr = BUILD_UINT16( msg[0], msg[1] );
??ZDO_ParseMgmtBindRsp_3:
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R3,#0x0
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     R0,A
        MOV     A,R3
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R6
        ADD     A,#0xb
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 3149         msg += 2;
        MOV     A,?V2
        ADD     A,#0x2
        MOV     ?V2,A
        JNC     ??ZDO_ParseMgmtBindRsp_4
        INC     ?V3
// 3150       }
// 3151 
// 3152       pList++;
??ZDO_ParseMgmtBindRsp_4:
        MOV     A,R6
        ADD     A,#0x15
        MOV     R6,A
        JNC     ??ZDO_ParseMgmtBindRsp_5
        INC     R7
??ZDO_ParseMgmtBindRsp_5:
        INC     ?V5
??ZDO_ParseMgmtBindRsp_2:
        MOV     A,?V5
        CLR     C
        SUBB    A,?V4
        JC      $+5
        LJMP    ??ZDO_ParseMgmtBindRsp_1 & 0xFFFF
        ; Setup parameters for call to function sAddrExtCpy
        MOV     R4,?V2
        MOV     R5,?V3
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
        MOV     A,?V2
        ADD     A,#0x8
        MOV     ?V2,A
        JNC     ??ZDO_ParseMgmtBindRsp_6
        INC     ?V3
??ZDO_ParseMgmtBindRsp_6:
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        MOV     ?V2,DPL
        MOV     ?V3,DPH
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R3,#0x0
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     R0,A
        MOV     A,R3
        ADDC    A,R1
        MOV     R1,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     A,?V2
        ADD     A,#0x2
        MOV     ?V2,A
        JNC     ??ZDO_ParseMgmtBindRsp_7
        INC     ?V3
??ZDO_ParseMgmtBindRsp_7:
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        MOV     ?V2,DPL
        MOV     ?V3,DPH
        MOV     A,R6
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0x3
        JZ      $+5
        LJMP    ??ZDO_ParseMgmtBindRsp_3 & 0xFFFF
        ; Setup parameters for call to function sAddrExtCpy
        MOV     R4,?V2
        MOV     R5,?V3
        MOV     A,R6
        ADD     A,#0xb
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
        MOV     A,?V2
        ADD     A,#0x8
        MOV     ?V2,A
        JNC     ??ZDO_ParseMgmtBindRsp_8
        INC     ?V3
??ZDO_ParseMgmtBindRsp_8:
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,#0x14
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        MOV     ?V2,DPL
        MOV     ?V3,DPH
        LJMP    ??ZDO_ParseMgmtBindRsp_4 & 0xFFFF
// 3153     }
// 3154   }
// 3155 
// 3156   return ( pRsp );
??ZDO_ParseMgmtBindRsp_1:
        MOV     R2,?V0
        MOV     R3,?V1
        MOV     R7,#0xa
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
// 3157 }
          CFI EndBlock cfiBlock48
// 3158 
// 3159 /*********************************************************************
// 3160  * @fn          ZDO_ParseUserDescRsp
// 3161  *
// 3162  * @brief       This function parses the incoming User
// 3163  *              Descriptor Response.
// 3164  *
// 3165  * @param       inMsg - incoming response message
// 3166  *
// 3167  * @return      a pointer to parsed response structure (NULL if not allocated).
// 3168  *          This structure was allocated using osal_mem_alloc, so it must be freed
// 3169  *          by the calling function [osal_mem_free()].
// 3170  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3171 ZDO_UserDescRsp_t *ZDO_ParseUserDescRsp( zdoIncomingMsg_t *inMsg )
ZDO_ParseUserDescRsp:
          CFI Block cfiBlock49 Using cfiCommon0
          CFI Function ZDO_ParseUserDescRsp
        CODE
// 3172 {
        FUNCALL ZDO_ParseUserDescRsp, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ParseUserDescRsp, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
// 3173   ZDO_UserDescRsp_t *pRsp;
// 3174   uint8 *msg;
// 3175   uint8 descLen = 0;
        MOV     ?V2,#0x0
// 3176 
// 3177   msg = inMsg->asdu;
        MOV     A,R2
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,R3
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     ?V0,R0
        MOV     ?V1,R1
// 3178 
// 3179   if ( msg[0] == ZSuccess )
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        JNZ     ??ZDO_ParseUserDescRsp_0
// 3180   {
// 3181     descLen = msg[3];
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V2,A
// 3182   }
// 3183 
// 3184   pRsp = (ZDO_UserDescRsp_t *)osal_mem_alloc( sizeof ( ZDO_UserDescRsp_t ) + descLen );
??ZDO_ParseUserDescRsp_0:
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R0,?V2
        MOV     R1,#0x0
        MOV     A,R0
        ADD     A,#0x4
        MOV     R2,A
        CLR     A
        ADDC    A,R1
        MOV     R3,A
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     R6,?V4
        MOV     R7,?V5
// 3185   if ( pRsp )
        MOV     A,R6
        ORL     A,R7
        JZ      ??ZDO_ParseUserDescRsp_1
// 3186   {
// 3187     pRsp->status = msg[0];
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 3188     pRsp->nwkAddr = BUILD_UINT16( msg[1], msg[2] );
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R3,#0x0
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     R0,A
        MOV     A,R3
        ADDC    A,R1
        MOV     R1,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 3189     pRsp->length = descLen;
        MOV     A,?V2
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 3190     if ( descLen )
        MOV     A,?V2
        JZ      ??ZDO_ParseUserDescRsp_1
// 3191     {
// 3192       osal_memcpy( pRsp->desc, &msg[4], descLen );
        ; Setup parameters for call to function osal_memcpy
        MOV     A,?V0
        ADD     A,#0x4
        MOV     ?V0,A
        JNC     ??ZDO_ParseUserDescRsp_2
        INC     ?V1
??ZDO_ParseUserDescRsp_2:
        MOV     ?V4,?V0
        MOV     ?V5,?V1
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R4,?V2
        MOV     R5,#0x0
        MOV     A,R6
        ADD     A,#0x4
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
// 3193     }
// 3194   }
// 3195 
// 3196   return ( pRsp );
??ZDO_ParseUserDescRsp_1:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     R7,#0x7
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
// 3197 }
          CFI EndBlock cfiBlock49
// 3198 
// 3199 /*********************************************************************
// 3200  * @fn          ZDO_ParseSimpleDescBuf
// 3201  *
// 3202  * @brief       Parse a byte sequence representation of a Simple Descriptor.
// 3203  *
// 3204  * @param       buf  - pointer to a byte array representing a Simple Desc.
// 3205  * @param       desc - SimpleDescriptionFormat_t *
// 3206  *
// 3207  *              This routine allocates storage for the cluster IDs because
// 3208  *              they are 16-bit and need to be aligned to be properly processed.
// 3209  *              This routine returns non-zero if an allocation fails.
// 3210  *
// 3211  *              NOTE: This means that the caller or user of the input structure
// 3212  *                    is responsible for freeing the memory
// 3213  *
// 3214  * @return      0: success
// 3215  *              1: failure due to malloc failure.
// 3216  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3217 uint8 ZDO_ParseSimpleDescBuf( uint8 *buf, SimpleDescriptionFormat_t *desc )
ZDO_ParseSimpleDescBuf:
          CFI Block cfiBlock50 Using cfiCommon0
          CFI Function ZDO_ParseSimpleDescBuf
        CODE
// 3218 {
        FUNCALL ZDO_ParseSimpleDescBuf, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ParseSimpleDescBuf, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ParseSimpleDescBuf, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0,R4
        MOV     ?V1,R5
// 3219   uint8 num, i;
// 3220 
// 3221   desc->EndPoint = *buf++;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,?V0
        MOV     DPH,?V1
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 3222   desc->AppProfId = BUILD_UINT16( buf[0], buf[1] );
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R3,#0x0
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     R0,A
        MOV     A,R3
        ADDC    A,R1
        MOV     R1,A
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 3223   buf += 2;
        MOV     A,R6
        ADD     A,#0x2
        MOV     R6,A
        JNC     ??ZDO_ParseSimpleDescBuf_0
        INC     R7
// 3224   desc->AppDeviceId = BUILD_UINT16( buf[0], buf[1] );
??ZDO_ParseSimpleDescBuf_0:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R3,#0x0
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     R0,A
        MOV     A,R3
        ADDC    A,R1
        MOV     R1,A
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 3225   buf += 2;
        MOV     A,R6
        ADD     A,#0x2
        MOV     R6,A
        JNC     ??ZDO_ParseSimpleDescBuf_1
        INC     R7
// 3226   desc->AppDevVer = *buf >> 4;
??ZDO_ParseSimpleDescBuf_1:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        SWAP    A
        ANL     A,#0xf
        MOV     R0,A
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ANL     A,#0xf0
        MOVX    @DPTR,A
        MOV     A,#0xf
        ANL     A,R0
        MOV     R0,A
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ORL     A,R0
        MOVX    @DPTR,A
// 3227 
// 3228   desc->Reserved = 0;
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ANL     A,#0xf
        MOVX    @DPTR,A
// 3229   buf++;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 3230 
// 3231   // move in input cluster list (if any). allocate aligned memory.
// 3232   num = desc->AppNumInClusters = *buf++;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
        MOV     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     ?V2,R0
// 3233   if ( num )
        MOV     A,?V2
        JNZ     $+5
        LJMP    ??ZDO_ParseSimpleDescBuf_2 & 0xFFFF
// 3234   {
// 3235     if (!(desc->pAppInClusterList = (uint16 *)osal_mem_alloc(num*sizeof(uint16))))
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,?V2
        MOV     R3,#0x0
        MOV     A,R2
        MOV     B,#0x2
        MUL     AB
        XCH     A,R2
        MOV     R0,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R0
        MOV     R0,A
        MOV     B,#0x2
        MOV     A,R3
        MUL     AB
        ADD     A,R0
        MOV     R3,A
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??ZDO_ParseSimpleDescBuf_3
// 3236     {
// 3237       // malloc failed. we're done.
// 3238       return 1;
        MOV     R1,#0x1
        LJMP    ??ZDO_ParseSimpleDescBuf_4 & 0xFFFF
// 3239     }
// 3240     for (i=0; i<num; ++i)
??ZDO_ParseSimpleDescBuf_3:
        MOV     R2,#0x0
        SJMP    ??ZDO_ParseSimpleDescBuf_5
// 3241     {
// 3242       desc->pAppInClusterList[i] = BUILD_UINT16( buf[0], buf[1] );
??ZDO_ParseSimpleDescBuf_6:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R5,#0x0
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R4
        ADD     A,R0
        MOV     R4,A
        MOV     A,R5
        ADDC    A,R1
        MOV     R5,A
        MOV     A,R2
        MOV     R0,A
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0x2
        MUL     AB
        XCH     A,R0
        MOV     R3,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R3
        MOV     R3,A
        MOV     B,#0x2
        MOV     A,R1
        MUL     AB
        ADD     A,R3
        MOV     R1,A
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R3,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     DPL,R3
        MOV     DPH,A
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
// 3243       buf += 2;
        MOV     A,R6
        ADD     A,#0x2
        MOV     R6,A
        JNC     ??ZDO_ParseSimpleDescBuf_7
        INC     R7
// 3244     }
??ZDO_ParseSimpleDescBuf_7:
        INC     R2
??ZDO_ParseSimpleDescBuf_5:
        MOV     A,R2
        CLR     C
        SUBB    A,?V2
        JC      ??ZDO_ParseSimpleDescBuf_6
// 3245   }
// 3246 
// 3247   // move in output cluster list (if any). allocate aligned memory.
// 3248   num = desc->AppNumOutClusters = *buf++;
??ZDO_ParseSimpleDescBuf_2:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
        MOV     A,R0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     ?V2,R0
// 3249   if (num)
        MOV     A,?V2
        JNZ     $+5
        LJMP    ??ZDO_ParseSimpleDescBuf_8 & 0xFFFF
// 3250   {
// 3251     if (!(desc->pAppOutClusterList = (uint16 *)osal_mem_alloc(num*sizeof(uint16))))
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,?V2
        MOV     R3,#0x0
        MOV     A,R2
        MOV     B,#0x2
        MUL     AB
        XCH     A,R2
        MOV     R0,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R0
        MOV     R0,A
        MOV     B,#0x2
        MOV     A,R3
        MUL     AB
        ADD     A,R0
        MOV     R3,A
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??ZDO_ParseSimpleDescBuf_9
// 3252     {
// 3253       // malloc failed. free input cluster list memory if there is any
// 3254       if ( desc->pAppInClusterList != NULL )
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??ZDO_ParseSimpleDescBuf_10
// 3255       {
// 3256         osal_mem_free(desc->pAppInClusterList);
        ; Setup parameters for call to function osal_mem_free
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 3257 
// 3258         desc->pAppInClusterList = NULL;
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x0
        MOVX    @DPTR,A
// 3259       }
// 3260       return 1;
??ZDO_ParseSimpleDescBuf_10:
        MOV     R1,#0x1
        SJMP    ??ZDO_ParseSimpleDescBuf_4
// 3261     }
// 3262     for (i=0; i<num; ++i)
??ZDO_ParseSimpleDescBuf_9:
        MOV     R2,#0x0
        SJMP    ??ZDO_ParseSimpleDescBuf_11
// 3263     {
// 3264       desc->pAppOutClusterList[i] = BUILD_UINT16( buf[0], buf[1] );
??ZDO_ParseSimpleDescBuf_12:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R5,#0x0
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R4
        ADD     A,R0
        MOV     R4,A
        MOV     A,R5
        ADDC    A,R1
        MOV     R5,A
        MOV     A,R2
        MOV     R0,A
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0x2
        MUL     AB
        XCH     A,R0
        MOV     R3,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R3
        MOV     R3,A
        MOV     B,#0x2
        MOV     A,R1
        MUL     AB
        ADD     A,R3
        MOV     R1,A
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R3,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     DPL,R3
        MOV     DPH,A
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
// 3265       buf += 2;
        MOV     A,R6
        ADD     A,#0x2
        MOV     R6,A
        JNC     ??ZDO_ParseSimpleDescBuf_13
        INC     R7
// 3266     }
??ZDO_ParseSimpleDescBuf_13:
        INC     R2
??ZDO_ParseSimpleDescBuf_11:
        MOV     A,R2
        CLR     C
        SUBB    A,?V2
        JC      ??ZDO_ParseSimpleDescBuf_12
// 3267   }
// 3268   return 0;
??ZDO_ParseSimpleDescBuf_8:
        MOV     R1,#0x0
??ZDO_ParseSimpleDescBuf_4:
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
// 3269 }
          CFI EndBlock cfiBlock50
// 3270 
// 3271 /*********************************************************************
// 3272  * @fn          ZDO_ParseDeviceAnnce
// 3273  *
// 3274  * @brief       Parse a Device Announce message.
// 3275  *
// 3276  * @param       inMsg - Incoming message
// 3277  * @param       pAnnce - place to put the parsed information
// 3278  *
// 3279  * @return      none
// 3280  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3281 void ZDO_ParseDeviceAnnce( zdoIncomingMsg_t *inMsg, ZDO_DeviceAnnce_t *pAnnce )
ZDO_ParseDeviceAnnce:
          CFI Block cfiBlock51 Using cfiCommon0
          CFI Function ZDO_ParseDeviceAnnce
        CODE
// 3282 {
        FUNCALL ZDO_ParseDeviceAnnce, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     ?V0,R4
        MOV     ?V1,R5
// 3283   uint8 *msg;
// 3284 
// 3285   // Parse incoming message
// 3286   msg = inMsg->asdu;
        MOV     A,R2
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,R3
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
// 3287   pAnnce->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R3,#0x0
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     R0,A
        MOV     A,R3
        ADDC    A,R1
        MOV     R1,A
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 3288   msg += 2;
        MOV     A,R6
        ADD     A,#0x2
        MOV     R6,A
        JNC     ??ZDO_ParseDeviceAnnce_0
        INC     R7
// 3289   osal_cpyExtAddr( pAnnce->extAddr, msg );
??ZDO_ParseDeviceAnnce_0:
        ; Setup parameters for call to function sAddrExtCpy
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     A,?V0
        ADD     A,#0x2
        MOV     R2,A
        CLR     A
        ADDC    A,?V1
        MOV     R3,A
        LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
// 3290   msg += Z_EXTADDR_LEN;
        MOV     A,R6
        ADD     A,#0x8
        MOV     R6,A
        JNC     ??ZDO_ParseDeviceAnnce_1
        INC     R7
// 3291   pAnnce->capabilities = *msg;
??ZDO_ParseDeviceAnnce_1:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 3292 }
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
          CFI EndBlock cfiBlock51
// 3293 
// 3294 /*********************************************************************
// 3295  * @fn          ZDO_ParseMgmtNwkUpdateNotify
// 3296  *
// 3297  * @brief       This function handles parsing of the incoming Management
// 3298  *              Network Update notify.
// 3299  *
// 3300  * @param       inMsg - incoming message (request)
// 3301  *
// 3302  * @return      a pointer to parsed response structure (NULL if not allocated).
// 3303  *          This structure was allocated using osal_mem_alloc, so it must be freed
// 3304  *          by the calling function [osal_mem_free()].
// 3305  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3306 ZDO_MgmtNwkUpdateNotify_t *ZDO_ParseMgmtNwkUpdateNotify( zdoIncomingMsg_t *inMsg )
ZDO_ParseMgmtNwkUpdateNotify:
          CFI Block cfiBlock52 Using cfiCommon0
          CFI Function ZDO_ParseMgmtNwkUpdateNotify
        CODE
// 3307 {
        FUNCALL ZDO_ParseMgmtNwkUpdateNotify, osal_build_uint32
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ParseMgmtNwkUpdateNotify, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDO_ParseMgmtNwkUpdateNotify, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V13
        MOV     A,#-0x16
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
        ; Saved register size: 22
        ; Auto size: 0
// 3308   uint8 status;
// 3309   uint32 scannedChannels = 0;
        MOV     ?V4,#0x0
        MOV     ?V5,#0x0
        MOV     ?V6,#0x0
        MOV     ?V7,#0x0
// 3310   uint16 totalTransmissions = 0;
        MOV     ?V0,#0x0
        MOV     ?V1,#0x0
// 3311   uint16 transmissionFailures = 0;
        MOV     ?V2,#0x0
        MOV     ?V3,#0x0
// 3312   uint8 listCount = 0;
        MOV     ?V11,#0x0
// 3313   uint8 *msg = inMsg->asdu;
        MOV     A,R2
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,R3
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
// 3314   ZDO_MgmtNwkUpdateNotify_t *pRsp;
// 3315 
// 3316   status = *msg++;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     ?V10,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 3317   if ( status == ZSuccess )
        MOV     A,?V10
        JNZ     ??ZDO_ParseMgmtNwkUpdateNotify_0
// 3318   {
// 3319     scannedChannels = osal_build_uint32( msg, 4 );
        ; Setup parameters for call to function osal_build_uint32
        MOV     R1,#0x4
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     ?V6,R4
        MOV     ?V7,R5
// 3320     msg += 4;
        MOV     A,R6
        ADD     A,#0x4
        MOV     R6,A
        JNC     ??ZDO_ParseMgmtNwkUpdateNotify_1
        INC     R7
// 3321     totalTransmissions = BUILD_UINT16( msg[0], msg[1] );
??ZDO_ParseMgmtNwkUpdateNotify_1:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R3,#0x0
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     ?V0,A
        MOV     A,R3
        ADDC    A,R1
        MOV     ?V1,A
// 3322     msg += 2;
        MOV     A,R6
        ADD     A,#0x2
        MOV     R6,A
        JNC     ??ZDO_ParseMgmtNwkUpdateNotify_2
        INC     R7
// 3323     transmissionFailures = BUILD_UINT16( msg[0], msg[1] );
??ZDO_ParseMgmtNwkUpdateNotify_2:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R3,#0x0
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     ?V2,A
        MOV     A,R3
        ADDC    A,R1
        MOV     ?V3,A
// 3324     msg += 2;
        MOV     A,R6
        ADD     A,#0x2
        MOV     R6,A
        JNC     ??ZDO_ParseMgmtNwkUpdateNotify_3
        INC     R7
// 3325     listCount = *msg++;
??ZDO_ParseMgmtNwkUpdateNotify_3:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     ?V11,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 3326   }
// 3327 
// 3328   pRsp = (ZDO_MgmtNwkUpdateNotify_t *)osal_mem_alloc( sizeof ( ZDO_MgmtNwkUpdateNotify_t ) + listCount );
??ZDO_ParseMgmtNwkUpdateNotify_0:
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R0,?V11
        MOV     R1,#0x0
        MOV     A,R0
        ADD     A,#0xa
        MOV     R2,A
        CLR     A
        ADDC    A,R1
        MOV     R3,A
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V12,R2
        MOV     ?V13,R3
        MOV     ?V8,?V12
        MOV     ?V9,?V13
// 3329 
// 3330   if ( pRsp )
        MOV     A,?V8
        ORL     A,?V9
        JZ      ??ZDO_ParseMgmtNwkUpdateNotify_4
// 3331   {
// 3332     pRsp->status = status;
        MOV     A,?V10
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,?V8
        MOV     DPH,?V9
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 3333     pRsp->scannedChannels = scannedChannels;
        MOV     DPL,?V8
        MOV     DPH,?V9
        INC     DPTR
        MOV     R0,#?V4
        LCALL   ?L_MOV_TO_X
// 3334     pRsp->totalTransmissions = totalTransmissions;
        MOV     DPL,?V8
        MOV     DPH,?V9
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,?V0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V1
        MOVX    @DPTR,A
// 3335     pRsp->transmissionFailures = transmissionFailures;
        MOV     DPL,?V8
        MOV     DPH,?V9
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,?V2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V3
        MOVX    @DPTR,A
// 3336     pRsp->listCount = listCount;
        MOV     A,?V11
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,?V8
        MOV     DPH,?V9
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 3337 
// 3338     // Allocate a buffer big enough to handle the list.
// 3339     if ( listCount > 0 )
        MOV     A,?V11
        JZ      ??ZDO_ParseMgmtNwkUpdateNotify_4
// 3340     {
// 3341       osal_memcpy( pRsp->energyValues, msg, listCount );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0,R6
        MOV     ?V1,R7
        MOV     ?V2,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     R4,?V11
        MOV     R5,#0x0
        MOV     A,?V8
        ADD     A,#0xa
        MOV     R2,A
        CLR     A
        ADDC    A,?V9
        MOV     R3,A
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
// 3342     }
// 3343   }
// 3344 
// 3345   return ( pRsp );
??ZDO_ParseMgmtNwkUpdateNotify_4:
        MOV     R2,?V8
        MOV     R3,?V9
        MOV     R7,#0xe
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
// 3346 }
          CFI EndBlock cfiBlock52
// 3347 
// 3348 /*********************************************************************
// 3349  * @fn          ZDO_ParseMgmtNwkUpdateReq
// 3350  *
// 3351  * @brief       This function handles parsing the incoming Management
// 3352  *              Network Update request and starts the request (if needed).
// 3353  *
// 3354  * @param       inMsg - incoming message (request)
// 3355  * @param       pReq - pointer to place to parse message to
// 3356  *
// 3357  * @return      none
// 3358  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3359 void ZDO_ParseMgmtNwkUpdateReq( zdoIncomingMsg_t *inMsg, ZDO_MgmtNwkUpdateReq_t *pReq )
ZDO_ParseMgmtNwkUpdateReq:
          CFI Block cfiBlock53 Using cfiCommon0
          CFI Function ZDO_ParseMgmtNwkUpdateReq
        CODE
// 3360 {
        FUNCALL ZDO_ParseMgmtNwkUpdateReq, osal_build_uint32
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     ?V0,R4
        MOV     ?V1,R5
// 3361   uint8 *msg = inMsg->asdu;
        MOV     A,R2
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,R3
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
// 3362 
// 3363   pReq->channelMask = osal_build_uint32( msg, 4 );
        ; Setup parameters for call to function osal_build_uint32
        MOV     R1,#0x4
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     A,R4
        MOV     R2,A
        MOV     A,R5
        MOV     R3,A
        MOV     DPL,?V0
        MOV     DPH,?V1
        LCALL   ?XSTORE_R0123
// 3364   msg += 4;
        MOV     A,R6
        ADD     A,#0x4
        MOV     R6,A
        JNC     ??ZDO_ParseMgmtNwkUpdateReq_0
        INC     R7
// 3365   pReq->scanDuration = *msg++;
??ZDO_ParseMgmtNwkUpdateReq_0:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 3366 
// 3367   if ( pReq->scanDuration <= 0x05 )
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x6
        JNC     ??ZDO_ParseMgmtNwkUpdateReq_1
// 3368   {
// 3369     // Request is to scan over channelMask
// 3370     pReq->scanCount = *msg;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        SJMP    ??ZDO_ParseMgmtNwkUpdateReq_2
// 3371   }
// 3372   else if ( ( pReq->scanDuration == 0xFE ) || ( pReq->scanDuration == 0xFF ) )
??ZDO_ParseMgmtNwkUpdateReq_1:
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0xfe
        JZ      ??ZDO_ParseMgmtNwkUpdateReq_3
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0xff
        JNZ     ??ZDO_ParseMgmtNwkUpdateReq_2
// 3373   {
// 3374     // Request is to change Channel (0xFE) or apsChannelMask and NwkManagerAddr (0xFF)
// 3375     pReq->nwkUpdateId = *msg++;
??ZDO_ParseMgmtNwkUpdateReq_3:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 3376 
// 3377     if ( pReq->scanDuration == 0xFF )
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0xff
        JNZ     ??ZDO_ParseMgmtNwkUpdateReq_2
// 3378     {
// 3379       pReq->nwkManagerAddr = BUILD_UINT16( msg[0], msg[1] );
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R3,#0x0
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     R0,A
        MOV     A,R3
        ADDC    A,R1
        MOV     R1,A
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 3380     }
// 3381   }
// 3382 }
??ZDO_ParseMgmtNwkUpdateReq_2:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
          CFI EndBlock cfiBlock53
// 3383 
// 3384 /*********************************************************************
// 3385  * @fn          ZDO_ParseEndDeviceTimeoutRsp
// 3386  *
// 3387  * @brief       Parse the End_Device_Timeout_rsp message.
// 3388  *
// 3389  * @param       inMsg - incoming message.
// 3390  * @param       pRsp - place to put the parsed information.
// 3391  *
// 3392  * @return      none
// 3393  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3394 void ZDO_ParseEndDeviceTimeoutRsp( zdoIncomingMsg_t *inMsg, uint16 *pRsp )
ZDO_ParseEndDeviceTimeoutRsp:
          CFI Block cfiBlock54 Using cfiCommon0
          CFI Function ZDO_ParseEndDeviceTimeoutRsp
        CODE
// 3395 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 3396   *pRsp = inMsg->asdu[0];
        MOV     A,R2
        ADD     A,#0x13
        MOV     DPL,A
        CLR     A
        ADDC    A,R3
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        MOV     DPL,R4
        MOV     DPH,R5
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 3397 }
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
          CFI EndBlock cfiBlock54

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zdpExternalStateTaskID>`:
        DATA16
        DW -1

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3e8:
        DD 1000

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_Init::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDODeviceSetup::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDODeviceSetup

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_StartDevice::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_StartDevice

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zdoSendStateChangeMsg::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zdoSendStateChangeMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_UpdateNwkStatus::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_UpdateNwkStatus

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_RemoveEndDeviceBind::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_RemoveEndDeviceBind

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_SendEDBindRsp::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_SendEDBindRsp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_CompareClusterLists::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_CompareClusterLists

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_AnyClusterMatches::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_AnyClusterMatches

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_ProcessNodeDescReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_ProcessNodeDescReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_ProcessPowerDescReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_ProcessPowerDescReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_ProcessSimpleDescReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_ProcessSimpleDescReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_ProcessActiveEPReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_ProcessActiveEPReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_ConvertOTAClusters::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_ConvertOTAClusters

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_ProcessMatchDescReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_ProcessMatchDescReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_ProcessBindUnbindReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_ProcessBindUnbindReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_UpdateAddrManager::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_UpdateAddrManager

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_ProcessServerDiscReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_ProcessServerDiscReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_ProcessEndDeviceTimeoutReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_ProcessEndDeviceTimeoutReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_EndDeviceTimeoutCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_EndDeviceTimeoutCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_ProcessMgmtLqiReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_ProcessMgmtLqiReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_ProcessMgmtNwkDiscReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_ProcessMgmtNwkDiscReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_ProcessMgmtRtgReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_ProcessMgmtRtgReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_ProcessMgmtBindReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_ProcessMgmtBindReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_ProcessMgmtDirectJoinReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_ProcessMgmtDirectJoinReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_ProcessMgmtLeaveReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_ProcessMgmtLeaveReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_ProcessMgmtPermitJoinReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_ProcessMgmtPermitJoinReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??NLME_PermitJoiningTimeout::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    NLME_PermitJoiningTimeout

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_ProcessUserDescReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_ProcessUserDescReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_ProcessUserDescSet::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_ProcessUserDescSet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_ProcessDeviceAnnce::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_ProcessDeviceAnnce

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_BuildSimpleDescBuf::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_BuildSimpleDescBuf

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_MatchEndDeviceBind::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_MatchEndDeviceBind

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_RemoveMatchMemory::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_RemoveMatchMemory

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_CopyMatchInfo::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_CopyMatchInfo

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDMatchSendState::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDMatchSendState

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_EndDeviceBindMatchTimeoutCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_EndDeviceBindMatchTimeoutCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_ParseEndDeviceBindReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_ParseEndDeviceBindReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_ParseBindUnbindReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_ParseBindUnbindReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_ParseAddrRsp::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_ParseAddrRsp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_ParseNodeDescRsp::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_ParseNodeDescRsp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_ParsePowerDescRsp::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_ParsePowerDescRsp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_ParseSimpleDescRsp::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_ParseSimpleDescRsp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_ParseEPListRsp::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_ParseEPListRsp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_ParseServerDiscRsp::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_ParseServerDiscRsp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_ParseMgmtLqiRsp::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_ParseMgmtLqiRsp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_ParseMgmNwkDiscRsp::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_ParseMgmNwkDiscRsp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_ParseMgmtRtgRsp::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_ParseMgmtRtgRsp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_ParseMgmtBindRsp::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_ParseMgmtBindRsp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_ParseUserDescRsp::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_ParseUserDescRsp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_ParseSimpleDescBuf::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_ParseSimpleDescBuf

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_ParseDeviceAnnce::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_ParseDeviceAnnce

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_ParseMgmtNwkUpdateNotify::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_ParseMgmtNwkUpdateNotify

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_ParseMgmtNwkUpdateReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_ParseMgmtNwkUpdateReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??ZDO_ParseEndDeviceTimeoutRsp::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDO_ParseEndDeviceTimeoutRsp

        END
// 3398 
// 3399 /*********************************************************************
// 3400 *********************************************************************/
// 
// 18 960 bytes in segment BANKED_CODE
//    330 bytes in segment BANK_RELAYS
//      2 bytes in segment XDATA_I
//      2 bytes in segment XDATA_ID
//      4 bytes in segment XDATA_ROM_C
//     62 bytes in segment XDATA_Z
// 
// 19 292 bytes of CODE  memory
//      0 bytes of CONST memory (+ 4 bytes shared)
//     64 bytes of XDATA memory
//
//Errors: none
//Warnings: none

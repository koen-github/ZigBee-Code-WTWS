###############################################################################
#
# IAR C/C++ Compiler V9.20.1.2476 for 8051                22/Feb/2017  15:31:02
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\koen\ZigBee-Code-WTWS\Components\stack\sapi\sapi.c
#    Command line       =  
#        -f
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00002000 -DZDAPP_CONFIG_PAN_ID=0xABCD
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={'H', 'O', 'G', 'E', 'S',
#        'C', 'H', 'O', 'O', 'L', 'U', 'T', 'R', 'E', 'C', 'H'}"
#        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440
#        C:\Users\koen\ZigBee-Code-WTWS\Components\stack\sapi\sapi.c -D
#        HOLD_AUTO_START -D BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D
#        NV_RESTORE -D HAL_UART=TRUE -lC
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\
#        -lA
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\
#        --diag_suppress Pe001,Pa010,Pe1665 -o
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\Obj\
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\Source\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ol --require_prototypes
#    List file          =  
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\sapi.lst
#    Object file        =  
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\Obj\sapi.r51
#
###############################################################################

C:\Users\koen\ZigBee-Code-WTWS\Components\stack\sapi\sapi.c
      1          /**************************************************************************************************
      2            Filename:       sapi.c
      3            Revised:        $Date: 2010-05-03 17:46:57 -0700 (Mon, 03 May 2010) $
      4            Revision:       $Revision: 22364 $
      5          
      6            Description:    Z-Stack Simple Application Interface.
      7          
      8          
      9            Copyright 2007-2010 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /******************************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "ZComDef.h"
     45          #include "hal_drivers.h"
     46          #include "OSAL.h"
     47          #include "OSAL_Tasks.h"
     48          //#include "OSAL_Custom.h"
     49          
     50          #if defined ( MT_TASK )
     51            #include "MT.h"
     52            #include "MT_TASK.h"
     53          #endif
     54          
     55          #include "nwk.h"
     56          #include "APS.h"
     57          #include "ZDApp.h"
     58          
     59          #include "osal_nv.h"
     60          #include "NLMEDE.h"
     61          #include "AF.h"
     62          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1
     63          #include "nwk_util.h"
     64          #include "ZDProfile.h"
     65          #include "ZDObject.h"
     66          #include "hal_led.h"
     67          #include "hal_key.h"
     68          #include "sapi.h"
     69          #include "MT_SAPI.h"
     70          
     71          extern uint8 zgStartDelay;
     72          extern uint8 zgSapiEndpoint;
     73          
     74          /*********************************************************************
     75           * CONSTANTS
     76           */
     77          
     78          #if !defined OSAL_SAPI
     79          #define OSAL_SAPI  TRUE
     80          #endif
     81          
     82          #if !defined SAPI_CB_FUNC
     83          #define SAPI_CB_FUNC  TRUE
     84          #endif
     85          
     86          // Message ID's for application user messages must be in 0xE0-0xEF range
     87          #define ZB_USER_MSG       0xE0
     88          #define SAPICB_DATA_CNF   0xE0
     89          #define SAPICB_BIND_CNF   0xE1
     90          #define SAPICB_START_CNF  0xE2
     91          
     92          /*********************************************************************
     93           * TYPEDEFS
     94           */
     95          
     96          /*********************************************************************
     97           * GLOBAL VARIABLES
     98           */
     99          
    100          #if OSAL_SAPI
    101          // The order in this table must be identical to the task initialization calls below in osalInitTask.

   \                                 In  segment XDATA_ROM_C, align 1
    102          const pTaskEventHandlerFn tasksArr[] = {
   \                     tasksArr:
   \   000000   ....         DW `??macEventLoop::?relay`
   \   000002   ....         DW `??nwk_event_loop::?relay`
   \   000004   ....         DW `??Hal_ProcessEvent::?relay`
   \   000006   ....         DW `??APS_event_loop::?relay`
   \   000008   ....         DW `??ZDApp_event_loop::?relay`
   \   00000A   ....         DW `??SAPI_ProcessEvent::?relay`
   \   00000C   ....         DW `??USER_event_loop::?relay`
    103            macEventLoop,
    104            nwk_event_loop,
    105            Hal_ProcessEvent,
    106          #if defined( MT_TASK )
    107            MT_ProcessEvent,
    108          #endif
    109            APS_event_loop,
    110            ZDApp_event_loop,
    111            SAPI_ProcessEvent,
    112            USER_event_loop
    113          };
    114          

   \                                 In  segment XDATA_ROM_C, align 1
    115          const uint8 tasksCnt = sizeof( tasksArr ) / sizeof( tasksArr[0] );
   \                     tasksCnt:
   \   000000   07           DB 7

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    116          uint16 * tasksEvents;
   \                     tasksEvents:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    117          #endif
    118          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    119          endPointDesc_t sapi_epDesc;
   \                     sapi_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    120          uint8 sapi_TaskID;
   \                     sapi_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    121          static uint16 sapi_bindInProgress;
   \                     sapi_bindInProgress:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    122          
    123          /*********************************************************************
    124           * LOCAL FUNCTIONS
    125           */
    126          
    127          void SAPI_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg );
    128          static void SAPI_SendCback( uint8 event, uint8 status, uint16 data );
    129          
    130          static void SAPI_StartConfirm( uint8 status );
    131          static void SAPI_SendDataConfirm( uint8 handle, uint8 status );
    132          static void SAPI_BindConfirm( uint16 commandId, uint8 status );
    133          static void SAPI_FindDeviceConfirm( uint8 searchType,
    134                                              uint8 *searchKey, uint8 *result );
    135          static void SAPI_ReceiveDataIndication( uint16 source,
    136                                        uint16 command, uint16 len, uint8 *pData  );
    137          static void SAPI_AllowBindConfirm( uint16 source );
    138          
    139          /******************************************************************************
    140           * @fn          zb_SystemReset
    141           *
    142           * @brief       The zb_SystemReset function reboots the ZigBee device.  The
    143           *              zb_SystemReset function can be called after a call to
    144           *              zb_WriteConfiguration to restart Z-Stack with the updated
    145           *              configuration.
    146           *
    147           * @param       none
    148           *
    149           * @return      none
    150           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    151          void zb_SystemReset ( void )
   \                     zb_SystemReset:
    152          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    153            SystemResetSoft();  // Especially useful for CC2531 to not break comm with USB Host.
   \   000000                ; Setup parameters for call to function Onboard_soft_reset
   \   000000   12....       LCALL   Onboard_soft_reset & 0xFFFF
    154          }
   \   000003   02....       LJMP    ?BRET
    155          
    156          /******************************************************************************
    157           * @fn          zb_StartRequest
    158           *
    159           * @brief       The zb_StartRequest function starts the ZigBee stack.  When the
    160           *              ZigBee stack starts, the device reads configuration parameters
    161           *              from Nonvolatile memory and the device joins its network.  The
    162           *              ZigBee stack calls the zb_StartConrifm callback function when
    163           *              the startup process completes.
    164           *
    165           * @param       none
    166           *
    167           * @return      none
    168           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    169          void zb_StartRequest()
   \                     zb_StartRequest:
    170          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 1
   \   000004   74FF         MOV     A,#-0x1
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    171            uint8 logicalType;
    172          
    173            zb_ReadConfiguration( ZCD_NV_LOGICAL_TYPE, sizeof(uint8), &logicalType );
   \   000009                ; Setup parameters for call to function zb_ReadConfiguration
   \   000009   AC..         MOV     R4,?XSP + 0
   \   00000B   AD..         MOV     R5,?XSP + 1
   \   00000D   7A01         MOV     R2,#0x1
   \   00000F   7987         MOV     R1,#-0x79
   \   000011   12....       LCALL   `??zb_ReadConfiguration::?relay`; Banked call to: zb_ReadConfiguration
   \   000014   E9           MOV     A,R1
    174          
    175            // Check for bad combinations of compile flag definitions and device type setting.
    176            if ((logicalType > ZG_DEVICETYPE_ENDDEVICE)      ||
    177          #if !ZG_BUILD_ENDDEVICE_TYPE   // Only RTR or Coord possible.
    178                (logicalType == ZG_DEVICETYPE_ENDDEVICE)     ||
    179          #endif
    180          #if !ZG_BUILD_RTR_TYPE         // Only End Device possible.
    181                (logicalType == ZG_DEVICETYPE_ROUTER)        ||
    182                (logicalType == ZG_DEVICETYPE_COORDINATOR)   ||
    183          #elif ZG_BUILD_RTRONLY_TYPE    // Only RTR possible.
    184                (logicalType == ZG_DEVICETYPE_COORDINATOR)   ||
    185          #elif !ZG_BUILD_JOINING_TYPE   // Only Coord possible.
    186                (logicalType == ZG_DEVICETYPE_ROUTER)        ||
    187          #endif
    188                (0))
   \   000015   85..82       MOV     DPL,?XSP + 0
   \   000018   85..83       MOV     DPH,?XSP + 1
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   C3           CLR     C
   \   00001D   9403         SUBB    A,#0x3
   \   00001F   401C         JC      ??zb_StartRequest_0
    189            {
    190              logicalType = ZB_INVALID_PARAMETER;
   \   000021   85..82       MOV     DPL,?XSP + 0
   \   000024   85..83       MOV     DPH,?XSP + 1
   \   000027   7402         MOV     A,#0x2
   \   000029   F0           MOVX    @DPTR,A
    191              SAPI_SendCback(SAPICB_START_CNF, logicalType, 0);
   \   00002A                ; Setup parameters for call to function SAPI_SendCback
   \   00002A   7C00         MOV     R4,#0x0
   \   00002C   7D00         MOV     R5,#0x0
   \   00002E   85..82       MOV     DPL,?XSP + 0
   \   000031   85..83       MOV     DPH,?XSP + 1
   \   000034   E0           MOVX    A,@DPTR
   \   000035   FA           MOV     R2,A
   \   000036   79E2         MOV     R1,#-0x1e
   \   000038   12....       LCALL   `??SAPI_SendCback::?relay`; Banked call to: SAPI_SendCback
   \   00003B   8014         SJMP    ??zb_StartRequest_1
    192            }
    193            else
    194            {
    195              logicalType = ZB_SUCCESS;
   \                     ??zb_StartRequest_0:
   \   00003D   85..82       MOV     DPL,?XSP + 0
   \   000040   85..83       MOV     DPH,?XSP + 1
   \   000043   7400         MOV     A,#0x0
   \   000045   F0           MOVX    @DPTR,A
    196              ZDOInitDevice(zgStartDelay);
   \   000046                ; Setup parameters for call to function ZDOInitDevice
   \   000046   90....       MOV     DPTR,#zgStartDelay
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   FA           MOV     R2,A
   \   00004B   7B00         MOV     R3,#0x0
   \   00004D   12....       LCALL   `??ZDOInitDevice::?relay`; Banked call to: ZDOInitDevice
   \   000050   E9           MOV     A,R1
    197            }
    198          
    199            return;
   \                     ??zb_StartRequest_1:
   \   000051   7401         MOV     A,#0x1
   \   000053   12....       LCALL   ?DEALLOC_XSTACK8
   \   000056   D083         POP     DPH
   \   000058   D082         POP     DPL
   \   00005A   02....       LJMP    ?BRET
    200          }
    201          
    202          /******************************************************************************
    203           * @fn          zb_BindDevice
    204           *
    205           * @brief       The zb_BindDevice function establishes or removes a ‘binding’
    206           *              between two devices.  Once bound, an application can send
    207           *              messages to a device by referencing the commandId for the
    208           *              binding.
    209           *
    210           * @param       create - TRUE to create a binding, FALSE to remove a binding
    211           *              commandId - The identifier of the binding
    212           *              pDestination - The 64-bit IEEE address of the device to bind to
    213           *
    214           * @return      The status of the bind operation is returned in the
    215           *              zb_BindConfirm callback.
    216           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    217          void zb_BindDevice ( uint8 create, uint16 commandId, uint8 *pDestination )
   \                     zb_BindDevice:
    218          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV     A,#-0xb
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EA           MOV     A,R2
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   EB           MOV     A,R3
   \   000014   F0           MOVX    @DPTR,A
   \   000015   89..         MOV     ?V1,R1
   \   000017   EC           MOV     A,R4
   \   000018   FE           MOV     R6,A
   \   000019   ED           MOV     A,R5
   \   00001A   FF           MOV     R7,A
    219            zAddrType_t destination;
    220            uint8 ret = ZB_ALREADY_IN_PROGRESS;
   \   00001B   75..20       MOV     ?V0,#0x20
    221          
    222            if ( create )
   \   00001E   E5..         MOV     A,?V1
   \   000020   7003         JNZ     $+5
   \   000022   02....       LJMP    ??zb_BindDevice_0 & 0xFFFF
    223            {
    224              if (sapi_bindInProgress == 0xffff)
   \   000025   90....       MOV     DPTR,#sapi_bindInProgress
   \   000028   E0           MOVX    A,@DPTR
   \   000029   64FF         XRL     A,#0xff
   \   00002B   7004         JNZ     ??zb_BindDevice_1
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   64FF         XRL     A,#0xff
   \                     ??zb_BindDevice_1:
   \   000031   706C         JNZ     ??zb_BindDevice_2
    225              {
    226                if ( pDestination )
   \   000033   EE           MOV     A,R6
   \   000034   4F           ORL     A,R7
   \   000035   607D         JZ      ??zb_BindDevice_3
    227                {
    228                  destination.addrMode = Addr64Bit;
   \   000037   740A         MOV     A,#0xa
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   7403         MOV     A,#0x3
   \   00003E   F0           MOVX    @DPTR,A
    229                  osal_cpyExtAddr( destination.addr.extAddr, pDestination );
   \   00003F                ; Setup parameters for call to function sAddrExtCpy
   \   00003F   EE           MOV     A,R6
   \   000040   FC           MOV     R4,A
   \   000041   EF           MOV     A,R7
   \   000042   FD           MOV     R5,A
   \   000043   7402         MOV     A,#0x2
   \   000045   12....       LCALL   ?XSTACK_DISP101_8
   \   000048   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    230          
    231                  ret = APSME_BindRequest( sapi_epDesc.endPoint, commandId,
    232                                           &destination, sapi_epDesc.endPoint );
   \   00004B                ; Setup parameters for call to function APSME_BindRequest
   \   00004B   90....       MOV     DPTR,#sapi_epDesc
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   F5..         MOV     ?V0,A
   \   000051   78..         MOV     R0,#?V0
   \   000053   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000056   7403         MOV     A,#0x3
   \   000058   12....       LCALL   ?XSTACK_DISP102_8
   \   00005B   7401         MOV     A,#0x1
   \   00005D   12....       LCALL   ?XSTACK_DISP0_8
   \   000060   E0           MOVX    A,@DPTR
   \   000061   FA           MOV     R2,A
   \   000062   A3           INC     DPTR
   \   000063   E0           MOVX    A,@DPTR
   \   000064   FB           MOV     R3,A
   \   000065   90....       MOV     DPTR,#sapi_epDesc
   \   000068   E0           MOVX    A,@DPTR
   \   000069   F9           MOV     R1,A
   \   00006A   12....       LCALL   `??APSME_BindRequest::?relay`; Banked call to: APSME_BindRequest
   \   00006D   7401         MOV     A,#0x1
   \   00006F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000072   E9           MOV     A,R1
   \   000073   F5..         MOV     ?V0,A
    233          
    234                  if ( ret == ZSuccess )
   \   000075   E5..         MOV     A,?V0
   \   000077   7026         JNZ     ??zb_BindDevice_2
    235                  {
    236                    // Find nwk addr
    237                    ZDP_NwkAddrReq(pDestination, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   \   000079                ; Setup parameters for call to function ZDP_NwkAddrReq
   \   000079   7D00         MOV     R5,#0x0
   \   00007B   7C00         MOV     R4,#0x0
   \   00007D   7900         MOV     R1,#0x0
   \   00007F   EE           MOV     A,R6
   \   000080   FA           MOV     R2,A
   \   000081   EF           MOV     A,R7
   \   000082   FB           MOV     R3,A
   \   000083   12....       LCALL   `??ZDP_NwkAddrReq::?relay`; Banked call to: ZDP_NwkAddrReq
   \   000086   E9           MOV     A,R1
    238                    osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, 250 );
   \   000087                ; Setup parameters for call to function osal_start_timerEx
   \   000087   90....       MOV     DPTR,#__Constant_fa
   \   00008A   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00008D   7A00         MOV     R2,#0x0
   \   00008F   7B01         MOV     R3,#0x1
   \   000091   90....       MOV     DPTR,#ZDAppTaskID
   \   000094   E0           MOVX    A,@DPTR
   \   000095   F9           MOV     R1,A
   \   000096   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000099   7404         MOV     A,#0x4
   \   00009B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00009E   E9           MOV     A,R1
    239                  }
    240                }
    241                else
    242                {
    243                  ret = ZB_INVALID_PARAMETER;
    244                  destination.addrMode = Addr16Bit;
    245                  destination.addr.shortAddr = NWK_BROADCAST_SHORTADDR;
    246                  if ( ZDO_AnyClusterMatches( 1, &commandId, sapi_epDesc.simpleDesc->AppNumOutClusters,
    247                                              sapi_epDesc.simpleDesc->pAppOutClusterList ) )
    248                  {
    249                    // Try to match with a device in the allow bind mode
    250                    ret = ZDP_MatchDescReq( &destination, NWK_BROADCAST_SHORTADDR,
    251                        sapi_epDesc.simpleDesc->AppProfId, 1, &commandId, 0, (cId_t *)NULL, 0 );
    252                  }
    253                  else if ( ZDO_AnyClusterMatches( 1, &commandId, sapi_epDesc.simpleDesc->AppNumInClusters,
    254                                                   sapi_epDesc.simpleDesc->pAppInClusterList ) )
    255                  {
    256                    ret = ZDP_MatchDescReq( &destination, NWK_BROADCAST_SHORTADDR,
    257                        sapi_epDesc.simpleDesc->AppProfId, 0, (cId_t *)NULL, 1, &commandId, 0 );
    258                  }
    259          
    260                  if ( ret == ZB_SUCCESS )
    261                  {
    262                    // Set a timer to make sure bind completes
    263          #if ( ZG_BUILD_RTR_TYPE )
    264                    osal_start_timerEx(sapi_TaskID, ZB_BIND_TIMER, AIB_MaxBindingTime);
    265          #else
    266                    // AIB_MaxBindingTime is not defined for an End Device
    267                    osal_start_timerEx(sapi_TaskID, ZB_BIND_TIMER, zgApsDefaultMaxBindingTime);
    268          #endif
    269                    sapi_bindInProgress = commandId;
    270                    return; // dont send cback event
    271                  }
    272                }
    273              }
    274              SAPI_SendCback( SAPICB_BIND_CNF, ret, commandId );
   \                     ??zb_BindDevice_2:
   \   00009F                ; Setup parameters for call to function SAPI_SendCback
   \   00009F   85..82       MOV     DPL,?XSP + 0
   \   0000A2   85..83       MOV     DPH,?XSP + 1
   \   0000A5   E0           MOVX    A,@DPTR
   \   0000A6   FC           MOV     R4,A
   \   0000A7   A3           INC     DPTR
   \   0000A8   E0           MOVX    A,@DPTR
   \   0000A9   FD           MOV     R5,A
   \   0000AA   AA..         MOV     R2,?V0
   \   0000AC   79E1         MOV     R1,#-0x1f
   \   0000AE   12....       LCALL   `??SAPI_SendCback::?relay`; Banked call to: SAPI_SendCback
   \   0000B1   02....       LJMP    ??zb_BindDevice_4 & 0xFFFF
   \                     ??zb_BindDevice_3:
   \   0000B4   75..02       MOV     ?V0,#0x2
   \   0000B7   740A         MOV     A,#0xa
   \   0000B9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BC   7402         MOV     A,#0x2
   \   0000BE   F0           MOVX    @DPTR,A
   \   0000BF   7402         MOV     A,#0x2
   \   0000C1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C4   74FF         MOV     A,#-0x1
   \   0000C6   F0           MOVX    @DPTR,A
   \   0000C7   A3           INC     DPTR
   \   0000C8   74FF         MOV     A,#-0x1
   \   0000CA   F0           MOVX    @DPTR,A
   \   0000CB                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   0000CB   90....       MOV     DPTR,#sapi_epDesc + 3
   \   0000CE   E0           MOVX    A,@DPTR
   \   0000CF   F8           MOV     R0,A
   \   0000D0   A3           INC     DPTR
   \   0000D1   E0           MOVX    A,@DPTR
   \   0000D2   C8           XCH     A,R0
   \   0000D3   240A         ADD     A,#0xa
   \   0000D5   F582         MOV     DPL,A
   \   0000D7   C8           XCH     A,R0
   \   0000D8   3400         ADDC    A,#0x0
   \   0000DA   F583         MOV     DPH,A
   \   0000DC   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000DF   90....       MOV     DPTR,#sapi_epDesc + 3
   \   0000E2   E0           MOVX    A,@DPTR
   \   0000E3   F8           MOV     R0,A
   \   0000E4   A3           INC     DPTR
   \   0000E5   E0           MOVX    A,@DPTR
   \   0000E6   C8           XCH     A,R0
   \   0000E7   2409         ADD     A,#0x9
   \   0000E9   F582         MOV     DPL,A
   \   0000EB   C8           XCH     A,R0
   \   0000EC   3400         ADDC    A,#0x0
   \   0000EE   F583         MOV     DPH,A
   \   0000F0   E0           MOVX    A,@DPTR
   \   0000F1   FC           MOV     R4,A
   \   0000F2   7402         MOV     A,#0x2
   \   0000F4   12....       LCALL   ?XSTACK_DISP101_8
   \   0000F7   7901         MOV     R1,#0x1
   \   0000F9   12....       LCALL   `??ZDO_AnyClusterMatches::?relay`; Banked call to: ZDO_AnyClusterMatches
   \   0000FC   7402         MOV     A,#0x2
   \   0000FE   12....       LCALL   ?DEALLOC_XSTACK8
   \   000101   E9           MOV     A,R1
   \   000102   6050         JZ      ??zb_BindDevice_5
   \   000104                ; Setup parameters for call to function ZDP_MatchDescReq
   \   000104   75..00       MOV     ?V0,#0x0
   \   000107   78..         MOV     R0,#?V0
   \   000109   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00010C   E4           CLR     A
   \   00010D   F5..         MOV     ?V2,A
   \   00010F   F5..         MOV     ?V3,A
   \   000111   78..         MOV     R0,#?V2
   \   000113   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000116   75..00       MOV     ?V0,#0x0
   \   000119   78..         MOV     R0,#?V0
   \   00011B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00011E   7404         MOV     A,#0x4
   \   000120   12....       LCALL   ?XSTACK_DISP100_8
   \   000123   88..         MOV     ?V2,R0
   \   000125   89..         MOV     ?V3,R1
   \   000127   78..         MOV     R0,#?V2
   \   000129   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00012C   90....       MOV     DPTR,#sapi_epDesc + 3
   \   00012F   E0           MOVX    A,@DPTR
   \   000130   F8           MOV     R0,A
   \   000131   A3           INC     DPTR
   \   000132   E0           MOVX    A,@DPTR
   \   000133   F583         MOV     DPH,A
   \   000135   8882         MOV     DPL,R0
   \   000137   A3           INC     DPTR
   \   000138   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00013B   7901         MOV     R1,#0x1
   \   00013D   7CFF         MOV     R4,#-0x1
   \   00013F   7DFF         MOV     R5,#-0x1
   \   000141   740A         MOV     A,#0xa
   \   000143   12....       LCALL   ?XSTACK_DISP101_8
   \   000146   12....       LCALL   `??ZDP_MatchDescReq::?relay`; Banked call to: ZDP_MatchDescReq
   \   000149   7408         MOV     A,#0x8
   \   00014B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00014E   E9           MOV     A,R1
   \   00014F   F5..         MOV     ?V0,A
   \   000151   02....       LJMP    ??zb_BindDevice_6 & 0xFFFF
   \                     ??zb_BindDevice_5:
   \   000154                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   000154   90....       MOV     DPTR,#sapi_epDesc + 3
   \   000157   E0           MOVX    A,@DPTR
   \   000158   F8           MOV     R0,A
   \   000159   A3           INC     DPTR
   \   00015A   E0           MOVX    A,@DPTR
   \   00015B   C8           XCH     A,R0
   \   00015C   2407         ADD     A,#0x7
   \   00015E   F582         MOV     DPL,A
   \   000160   C8           XCH     A,R0
   \   000161   3400         ADDC    A,#0x0
   \   000163   F583         MOV     DPH,A
   \   000165   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000168   90....       MOV     DPTR,#sapi_epDesc + 3
   \   00016B   E0           MOVX    A,@DPTR
   \   00016C   F8           MOV     R0,A
   \   00016D   A3           INC     DPTR
   \   00016E   E0           MOVX    A,@DPTR
   \   00016F   C8           XCH     A,R0
   \   000170   2406         ADD     A,#0x6
   \   000172   F582         MOV     DPL,A
   \   000174   C8           XCH     A,R0
   \   000175   3400         ADDC    A,#0x0
   \   000177   F583         MOV     DPH,A
   \   000179   E0           MOVX    A,@DPTR
   \   00017A   FC           MOV     R4,A
   \   00017B   7402         MOV     A,#0x2
   \   00017D   12....       LCALL   ?XSTACK_DISP101_8
   \   000180   7901         MOV     R1,#0x1
   \   000182   12....       LCALL   `??ZDO_AnyClusterMatches::?relay`; Banked call to: ZDO_AnyClusterMatches
   \   000185   7402         MOV     A,#0x2
   \   000187   12....       LCALL   ?DEALLOC_XSTACK8
   \   00018A   E9           MOV     A,R1
   \   00018B   604D         JZ      ??zb_BindDevice_6
   \   00018D                ; Setup parameters for call to function ZDP_MatchDescReq
   \   00018D   75..00       MOV     ?V0,#0x0
   \   000190   78..         MOV     R0,#?V0
   \   000192   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000195   7401         MOV     A,#0x1
   \   000197   12....       LCALL   ?XSTACK_DISP100_8
   \   00019A   88..         MOV     ?V2,R0
   \   00019C   89..         MOV     ?V3,R1
   \   00019E   78..         MOV     R0,#?V2
   \   0001A0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001A3   75..01       MOV     ?V0,#0x1
   \   0001A6   78..         MOV     R0,#?V0
   \   0001A8   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001AB   E4           CLR     A
   \   0001AC   F5..         MOV     ?V2,A
   \   0001AE   F5..         MOV     ?V3,A
   \   0001B0   78..         MOV     R0,#?V2
   \   0001B2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001B5   90....       MOV     DPTR,#sapi_epDesc + 3
   \   0001B8   E0           MOVX    A,@DPTR
   \   0001B9   F8           MOV     R0,A
   \   0001BA   A3           INC     DPTR
   \   0001BB   E0           MOVX    A,@DPTR
   \   0001BC   F583         MOV     DPH,A
   \   0001BE   8882         MOV     DPL,R0
   \   0001C0   A3           INC     DPTR
   \   0001C1   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0001C4   7900         MOV     R1,#0x0
   \   0001C6   7CFF         MOV     R4,#-0x1
   \   0001C8   7DFF         MOV     R5,#-0x1
   \   0001CA   740A         MOV     A,#0xa
   \   0001CC   12....       LCALL   ?XSTACK_DISP101_8
   \   0001CF   12....       LCALL   `??ZDP_MatchDescReq::?relay`; Banked call to: ZDP_MatchDescReq
   \   0001D2   7408         MOV     A,#0x8
   \   0001D4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001D7   E9           MOV     A,R1
   \   0001D8   F5..         MOV     ?V0,A
   \                     ??zb_BindDevice_6:
   \   0001DA   E5..         MOV     A,?V0
   \   0001DC   6003         JZ      $+5
   \   0001DE   02....       LJMP    ??zb_BindDevice_2 & 0xFFFF
   \   0001E1                ; Setup parameters for call to function osal_start_timerEx
   \   0001E1   90....       MOV     DPTR,#AIB_MaxBindingTime
   \   0001E4   E0           MOVX    A,@DPTR
   \   0001E5   F5..         MOV     ?V4,A
   \   0001E7   A3           INC     DPTR
   \   0001E8   E0           MOVX    A,@DPTR
   \   0001E9   F5..         MOV     ?V5,A
   \   0001EB   E4           CLR     A
   \   0001EC   F5..         MOV     ?V6,A
   \   0001EE   F5..         MOV     ?V7,A
   \   0001F0   78..         MOV     R0,#?V4
   \   0001F2   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   0001F5   7A00         MOV     R2,#0x0
   \   0001F7   7B20         MOV     R3,#0x20
   \   0001F9   90....       MOV     DPTR,#sapi_TaskID
   \   0001FC   E0           MOVX    A,@DPTR
   \   0001FD   F9           MOV     R1,A
   \   0001FE   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000201   7404         MOV     A,#0x4
   \   000203   12....       LCALL   ?DEALLOC_XSTACK8
   \   000206   E9           MOV     A,R1
   \   000207   85..82       MOV     DPL,?XSP + 0
   \   00020A   85..83       MOV     DPH,?XSP + 1
   \   00020D   E0           MOVX    A,@DPTR
   \   00020E   F8           MOV     R0,A
   \   00020F   A3           INC     DPTR
   \   000210   E0           MOVX    A,@DPTR
   \   000211   F9           MOV     R1,A
   \   000212   90....       MOV     DPTR,#sapi_bindInProgress
   \   000215   E8           MOV     A,R0
   \   000216   F0           MOVX    @DPTR,A
   \   000217   A3           INC     DPTR
   \   000218   E9           MOV     A,R1
   \   000219   F0           MOVX    @DPTR,A
   \   00021A   8049         SJMP    ??zb_BindDevice_4
    275            }
    276            else
    277            {
    278              // Remove local bindings for the commandId
    279              BindingEntry_t *pBind;
    280          
    281              // Loop through bindings an remove any that match the cluster
    282              while ( pBind = bindFind( sapi_epDesc.simpleDesc->EndPoint, commandId, 0 ) )
    283              {
    284                bindRemoveEntry(pBind);
   \                     ??zb_BindDevice_7:
   \   00021C                ; Setup parameters for call to function bindRemoveEntry
   \   00021C   12....       LCALL   `??bindRemoveEntry::?relay`; Banked call to: bindRemoveEntry
   \   00021F   E9           MOV     A,R1
    285              }
   \                     ??zb_BindDevice_0:
   \   000220                ; Setup parameters for call to function bindFind
   \   000220   7C00         MOV     R4,#0x0
   \   000222   85..82       MOV     DPL,?XSP + 0
   \   000225   85..83       MOV     DPH,?XSP + 1
   \   000228   E0           MOVX    A,@DPTR
   \   000229   FA           MOV     R2,A
   \   00022A   A3           INC     DPTR
   \   00022B   E0           MOVX    A,@DPTR
   \   00022C   FB           MOV     R3,A
   \   00022D   90....       MOV     DPTR,#sapi_epDesc + 3
   \   000230   E0           MOVX    A,@DPTR
   \   000231   F8           MOV     R0,A
   \   000232   A3           INC     DPTR
   \   000233   E0           MOVX    A,@DPTR
   \   000234   F583         MOV     DPH,A
   \   000236   8882         MOV     DPL,R0
   \   000238   E0           MOVX    A,@DPTR
   \   000239   F9           MOV     R1,A
   \   00023A   12....       LCALL   `??bindFind::?relay` ; Banked call to: bindFind
   \   00023D   8A..         MOV     ?V2,R2
   \   00023F   8B..         MOV     ?V3,R3
   \   000241   A8..         MOV     R0,?V2
   \   000243   A9..         MOV     R1,?V3
   \   000245   E8           MOV     A,R0
   \   000246   FA           MOV     R2,A
   \   000247   E9           MOV     A,R1
   \   000248   FB           MOV     R3,A
   \   000249   E8           MOV     A,R0
   \   00024A   49           ORL     A,R1
   \   00024B   70CF         JNZ     ??zb_BindDevice_7
    286              osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, 250 );
   \   00024D                ; Setup parameters for call to function osal_start_timerEx
   \   00024D   90....       MOV     DPTR,#__Constant_fa
   \   000250   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000253   7A00         MOV     R2,#0x0
   \   000255   7B01         MOV     R3,#0x1
   \   000257   90....       MOV     DPTR,#ZDAppTaskID
   \   00025A   E0           MOVX    A,@DPTR
   \   00025B   F9           MOV     R1,A
   \   00025C   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00025F   7404         MOV     A,#0x4
   \   000261   12....       LCALL   ?DEALLOC_XSTACK8
   \   000264   E9           MOV     A,R1
    287            }
    288            return;
   \                     ??zb_BindDevice_4:
   \   000265   740B         MOV     A,#0xb
   \   000267   12....       LCALL   ?DEALLOC_XSTACK8
   \   00026A   7F08         MOV     R7,#0x8
   \   00026C   02....       LJMP    ?BANKED_LEAVE_XDATA
    289          }
    290          /******************************************************************************
    291           * @fn          zb_PermitJoiningRequest
    292           *
    293           * @brief       The zb_PermitJoiningRequest function is used to control the
    294           *              joining permissions and thus allow or disallow new devices from
    295           *              joining the network.
    296           *
    297           * @param       destination - The destination parameter indicates the address
    298           *                            of the device for which the joining permissions
    299           *                            should be set. This is usually the local device
    300           *                            address or the special broadcast address that denotes
    301           *                            all routers and coordinator ( 0xFFFC ). This way
    302           *                            the joining permissions of a single device or the
    303           *                            whole network can be controlled.
    304           *              timeout -  Indicates the amount of time in seconds for which
    305           *                         the joining permissions should be turned on.
    306           *                         If timeout is set to 0x00, the device will turn off the
    307           *                         joining permissions indefinitely. If it is set to 0xFF,
    308           *                         the joining permissions will be turned on indefinitely.
    309           *
    310           *
    311           * @return      ZB_SUCCESS or a failure code
    312           *
    313           */
    314          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    315          uint8 zb_PermitJoiningRequest ( uint16 destination, uint8 timeout )
   \                     zb_PermitJoiningRequest:
    316          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    317          #if defined( ZDO_MGMT_PERMIT_JOIN_REQUEST )
    318            zAddrType_t dstAddr;
    319          
    320            dstAddr.addrMode = Addr16Bit;
    321            dstAddr.addr.shortAddr = destination;
    322          
    323            return( (uint8) ZDP_MgmtPermitJoinReq( &dstAddr, timeout, 0, 0 ) );
    324          #else
    325            (void)destination;
    326            (void)timeout;
    327            return ZUnsupportedMode;
   \   000000   7912         MOV     R1,#0x12
   \   000002   02....       LJMP    ?BRET
    328          #endif
    329          }
    330          /******************************************************************************
    331           * @fn          zb_AllowBind
    332           *
    333           * @brief       The zb_AllowBind function puts the device into the
    334           *              Allow Binding Mode for a given period of time.  A peer device
    335           *              can establish a binding to a device in the Allow Binding Mode
    336           *              by calling zb_BindDevice with a destination address of NULL
    337           *
    338           * @param       timeout - The number of seconds to remain in the allow binding
    339           *                        mode.  Valid values range from 1 through 65.
    340           *                        If 0, the Allow Bind mode will be set false without TO
    341           *                        If greater than 64, the Allow Bind mode will be true
    342           *
    343           * @return      ZB_SUCCESS if the device entered the allow bind mode, else
    344           *              an error code.
    345           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    346          void zb_AllowBind ( uint8 timeout )
   \                     zb_AllowBind:
    347          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    348          
    349            osal_stop_timerEx(sapi_TaskID, ZB_ALLOW_BIND_TIMER);
   \   000007                ; Setup parameters for call to function osal_stop_timerEx
   \   000007   7A00         MOV     R2,#0x0
   \   000009   7B40         MOV     R3,#0x40
   \   00000B   90....       MOV     DPTR,#sapi_TaskID
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F9           MOV     R1,A
   \   000010   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   000013   E9           MOV     A,R1
    350          
    351            if ( timeout == 0 )
   \   000014   EE           MOV     A,R6
   \   000015   7015         JNZ     ??zb_AllowBind_0
    352            {
    353              afSetMatch(sapi_epDesc.simpleDesc->EndPoint, FALSE);
   \   000017                ; Setup parameters for call to function afSetMatch
   \   000017   7A00         MOV     R2,#0x0
   \   000019   90....       MOV     DPTR,#sapi_epDesc + 3
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F8           MOV     R0,A
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F583         MOV     DPH,A
   \   000022   8882         MOV     DPL,R0
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F9           MOV     R1,A
   \   000026   12....       LCALL   `??afSetMatch::?relay`; Banked call to: afSetMatch
   \   000029   E9           MOV     A,R1
   \   00002A   805C         SJMP    ??zb_AllowBind_1
    354            }
    355            else
    356            {
    357              afSetMatch(sapi_epDesc.simpleDesc->EndPoint, TRUE);
   \                     ??zb_AllowBind_0:
   \   00002C                ; Setup parameters for call to function afSetMatch
   \   00002C   7A01         MOV     R2,#0x1
   \   00002E   90....       MOV     DPTR,#sapi_epDesc + 3
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F8           MOV     R0,A
   \   000033   A3           INC     DPTR
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F583         MOV     DPH,A
   \   000037   8882         MOV     DPL,R0
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   F9           MOV     R1,A
   \   00003B   12....       LCALL   `??afSetMatch::?relay`; Banked call to: afSetMatch
   \   00003E   E9           MOV     A,R1
    358              if ( timeout != 0xFF )
   \   00003F   74FF         MOV     A,#-0x1
   \   000041   6E           XRL     A,R6
   \   000042   6044         JZ      ??zb_AllowBind_1
    359              {
    360                if ( timeout > 64 )
   \   000044   EE           MOV     A,R6
   \   000045   C3           CLR     C
   \   000046   9441         SUBB    A,#0x41
   \   000048   4002         JC      ??zb_AllowBind_2
    361                {
    362                  timeout = 64;
   \   00004A   7E40         MOV     R6,#0x40
    363                }
    364                osal_start_timerEx(sapi_TaskID, ZB_ALLOW_BIND_TIMER, timeout*1000);
   \                     ??zb_AllowBind_2:
   \   00004C                ; Setup parameters for call to function osal_start_timerEx
   \   00004C   EE           MOV     A,R6
   \   00004D   F8           MOV     R0,A
   \   00004E   7900         MOV     R1,#0x0
   \   000050   E8           MOV     A,R0
   \   000051   75F0E8       MOV     B,#-0x18
   \   000054   A4           MUL     AB
   \   000055   C8           XCH     A,R0
   \   000056   AAF0         MOV     R2,B
   \   000058   75F003       MOV     B,#0x3
   \   00005B   A4           MUL     AB
   \   00005C   2A           ADD     A,R2
   \   00005D   FA           MOV     R2,A
   \   00005E   75F0E8       MOV     B,#-0x18
   \   000061   E9           MOV     A,R1
   \   000062   A4           MUL     AB
   \   000063   2A           ADD     A,R2
   \   000064   F9           MOV     R1,A
   \   000065   88..         MOV     ?V0,R0
   \   000067   E9           MOV     A,R1
   \   000068   F5..         MOV     ?V1,A
   \   00006A   33           RLC     A
   \   00006B   95E0         SUBB    A,0xE0 /* A   */
   \   00006D   F5..         MOV     ?V2,A
   \   00006F   F5..         MOV     ?V3,A
   \   000071   78..         MOV     R0,#?V0
   \   000073   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000076   7A00         MOV     R2,#0x0
   \   000078   7B40         MOV     R3,#0x40
   \   00007A   90....       MOV     DPTR,#sapi_TaskID
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   F9           MOV     R1,A
   \   00007F   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000082   7404         MOV     A,#0x4
   \   000084   12....       LCALL   ?DEALLOC_XSTACK8
   \   000087   E9           MOV     A,R1
    365              }
    366            }
    367            return;
   \                     ??zb_AllowBind_1:
   \   000088   7F04         MOV     R7,#0x4
   \   00008A   02....       LJMP    ?BANKED_LEAVE_XDATA
    368          }
    369          /******************************************************************************
    370           * @fn          zb_SendDataRequest
    371           *
    372           * @brief       The zb_SendDataRequest function initiates transmission of data
    373           *              to a peer device
    374           *
    375           * @param       destination - The destination of the data.  The destination can
    376           *                            be one of the following:
    377           *                            - 16-Bit short address of device [0-0xfffD]
    378           *                            - ZB_BROADCAST_ADDR sends the data to all devices
    379           *                              in the network.
    380           *                            - ZB_BINDING_ADDR sends the data to a previously
    381           *                              bound device.
    382           *
    383           *              commandId - The command ID to send with the message.  If the
    384           *                          ZB_BINDING_ADDR destination is used, this parameter
    385           *                          also indicates the binding to use.
    386           *
    387           *              len - The size of the pData buffer in bytes
    388           *              pData - A buffer to hold the data
    389           *              handle - A handle used to identify the send data request.
    390           *              txOptions - TRUE if requesting acknowledgement from the destination.
    391           *              radius - The max number of hops the packet can travel through
    392           *                       before it is dropped.
    393           *
    394           * @return      none
    395           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    396          void zb_SendDataRequest ( uint16 destination, uint16 commandId, uint8 len,
   \                     zb_SendDataRequest:
    397                                    uint8 *pData, uint8 handle, uint8 txOptions, uint8 radius )
    398          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8C..         MOV     ?V0,R4
   \   00000C   8D..         MOV     ?V1,R5
   \   00000E   E9           MOV     A,R1
   \   00000F   FF           MOV     R7,A
   \   000010   741B         MOV     A,#0x1b
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   E0           MOVX    A,@DPTR
   \   000016   FE           MOV     R6,A
    399            afStatus_t status;
    400            afAddrType_t dstAddr;
    401          
    402            txOptions |= AF_DISCV_ROUTE;
    403          
    404            // Set the destination address
    405            if (destination == ZB_BINDING_ADDR)
   \   000017   74FE         MOV     A,#-0x2
   \   000019   6A           XRL     A,R2
   \   00001A   7003         JNZ     ??zb_SendDataRequest_0
   \   00001C   74FF         MOV     A,#-0x1
   \   00001E   6B           XRL     A,R3
   \                     ??zb_SendDataRequest_0:
   \   00001F   700A         JNZ     ??zb_SendDataRequest_1
    406            {
    407              // Binding
    408              dstAddr.addrMode = afAddrNotPresent;
   \   000021   7408         MOV     A,#0x8
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   7400         MOV     A,#0x0
   \   000028   F0           MOVX    @DPTR,A
   \   000029   801E         SJMP    ??zb_SendDataRequest_2
    409            }
    410            else
    411            {
    412              // Use short address
    413              dstAddr.addr.shortAddr = destination;
   \                     ??zb_SendDataRequest_1:
   \   00002B   85..82       MOV     DPL,?XSP + 0
   \   00002E   85..83       MOV     DPH,?XSP + 1
   \   000031   EA           MOV     A,R2
   \   000032   F0           MOVX    @DPTR,A
   \   000033   A3           INC     DPTR
   \   000034   EB           MOV     A,R3
   \   000035   F0           MOVX    @DPTR,A
    414              dstAddr.addrMode = afAddr16Bit;
   \   000036   7408         MOV     A,#0x8
   \   000038   12....       LCALL   ?XSTACK_DISP0_8
   \   00003B   7402         MOV     A,#0x2
   \   00003D   F0           MOVX    @DPTR,A
    415          
    416              if ( ADDR_NOT_BCAST != NLME_IsAddressBroadcast( destination ) )
   \   00003E                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   00003E   12....       LCALL   `??NLME_IsAddressBroadcast::?relay`; Banked call to: NLME_IsAddressBroadcast
   \   000041   E9           MOV     A,R1
   \   000042   6005         JZ      ??zb_SendDataRequest_2
    417              {
    418                txOptions &= ~AF_ACK_REQUEST;
   \   000044   C3           CLR     C
   \   000045   EE           MOV     A,R6
   \   000046   92E4         MOV     0xE0 /* A   */.4,C
   \   000048   FE           MOV     R6,A
    419              }
    420            }
    421          
    422            dstAddr.panId = 0;                                    // Not an inter-pan message.
   \                     ??zb_SendDataRequest_2:
   \   000049   740A         MOV     A,#0xa
   \   00004B   12....       LCALL   ?XSTACK_DISP0_8
   \   00004E   7400         MOV     A,#0x0
   \   000050   F0           MOVX    @DPTR,A
   \   000051   A3           INC     DPTR
   \   000052   7400         MOV     A,#0x0
   \   000054   F0           MOVX    @DPTR,A
    423            dstAddr.endPoint = sapi_epDesc.simpleDesc->EndPoint;  // Set the endpoint.
   \   000055   90....       MOV     DPTR,#sapi_epDesc + 3
   \   000058   E0           MOVX    A,@DPTR
   \   000059   F8           MOV     R0,A
   \   00005A   A3           INC     DPTR
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   F583         MOV     DPH,A
   \   00005E   8882         MOV     DPL,R0
   \   000060   E0           MOVX    A,@DPTR
   \   000061   C0E0         PUSH    A
   \   000063   7409         MOV     A,#0x9
   \   000065   12....       LCALL   ?XSTACK_DISP0_8
   \   000068   D0E0         POP     A
   \   00006A   F0           MOVX    @DPTR,A
    424          
    425            // Send the message
    426            status = AF_DataRequest(&dstAddr, &sapi_epDesc, commandId, len,
    427                                    pData, &handle, txOptions, radius);
   \   00006B                ; Setup parameters for call to function AF_DataRequest
   \   00006B   741C         MOV     A,#0x1c
   \   00006D   12....       LCALL   ?XSTACK_DISP0_8
   \   000070   E0           MOVX    A,@DPTR
   \   000071   F5..         MOV     ?V2,A
   \   000073   78..         MOV     R0,#?V2
   \   000075   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000078   741B         MOV     A,#0x1b
   \   00007A   12....       LCALL   ?XSTACK_DISP100_8
   \   00007D   88..         MOV     ?V2,R0
   \   00007F   89..         MOV     ?V3,R1
   \   000081   78..         MOV     R0,#?V2
   \   000083   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000086   741B         MOV     A,#0x1b
   \   000088   12....       LCALL   ?XSTACK_DISP0_8
   \   00008B   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00008E   8F..         MOV     ?V2,R7
   \   000090   75..00       MOV     ?V3,#0x0
   \   000093   78..         MOV     R0,#?V2
   \   000095   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000098   78..         MOV     R0,#?V0
   \   00009A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009D   EE           MOV     A,R6
   \   00009E   F9           MOV     R1,A
   \   00009F   7C..         MOV     R4,#sapi_epDesc & 0xff
   \   0000A1   7D..         MOV     R5,#(sapi_epDesc >> 8) & 0xff
   \   0000A3   7409         MOV     A,#0x9
   \   0000A5   12....       LCALL   ?XSTACK_DISP101_8
   \   0000A8   12....       LCALL   `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   0000AB   7409         MOV     A,#0x9
   \   0000AD   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B0   E9           MOV     A,R1
   \   0000B1   FA           MOV     R2,A
    428          
    429            if (status != afStatus_SUCCESS)
   \   0000B2   EA           MOV     A,R2
   \   0000B3   600E         JZ      ??zb_SendDataRequest_3
    430            {
    431              SAPI_SendCback( SAPICB_DATA_CNF, status, handle );
   \   0000B5                ; Setup parameters for call to function SAPI_SendCback
   \   0000B5   741A         MOV     A,#0x1a
   \   0000B7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BA   E0           MOVX    A,@DPTR
   \   0000BB   FC           MOV     R4,A
   \   0000BC   7D00         MOV     R5,#0x0
   \   0000BE   79E0         MOV     R1,#-0x20
   \   0000C0   12....       LCALL   `??SAPI_SendCback::?relay`; Banked call to: SAPI_SendCback
    432            }
    433          }
   \                     ??zb_SendDataRequest_3:
   \   0000C3   740C         MOV     A,#0xc
   \   0000C5   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C8   7F04         MOV     R7,#0x4
   \   0000CA   02....       LJMP    ?BANKED_LEAVE_XDATA
    434          
    435          /******************************************************************************
    436           * @fn          zb_ReadConfiguration
    437           *
    438           * @brief       The zb_ReadConfiguration function is used to get a
    439           *              Configuration Protperty from Nonvolatile memory.
    440           *
    441           * @param       configId - The identifier for the configuration property
    442           *              len - The size of the pValue buffer in bytes
    443           *              pValue - A buffer to hold the configuration property
    444           *
    445           * @return      none
    446           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    447          uint8 zb_ReadConfiguration( uint8 configId, uint8 len, void *pValue )
   \                     zb_ReadConfiguration:
    448          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   8C..         MOV     ?V2,R4
   \   00000B   8D..         MOV     ?V3,R5
    449            uint8 size;
    450          
    451            size = (uint8)osal_nv_item_len( configId );
   \   00000D                ; Setup parameters for call to function osal_nv_item_len
   \   00000D   EF           MOV     A,R7
   \   00000E   FA           MOV     R2,A
   \   00000F   7B00         MOV     R3,#0x0
   \   000011   12....       LCALL   `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
   \   000014   EA           MOV     A,R2
   \   000015   F5..         MOV     ?V0,A
    452            if ( size > len )
   \   000017   EE           MOV     A,R6
   \   000018   C3           CLR     C
   \   000019   95..         SUBB    A,?V0
   \   00001B   5004         JNC     ??zb_ReadConfiguration_0
    453            {
    454              return ZFailure;
   \   00001D   7901         MOV     R1,#0x1
   \   00001F   801D         SJMP    ??zb_ReadConfiguration_1
    455            }
    456            else
    457            {
    458              return( osal_nv_read(configId, 0, size, pValue) );
   \                     ??zb_ReadConfiguration_0:
   \   000021                ; Setup parameters for call to function osal_nv_read
   \   000021   78..         MOV     R0,#?V2
   \   000023   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000026   75..00       MOV     ?V1,#0x0
   \   000029   78..         MOV     R0,#?V0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   7C00         MOV     R4,#0x0
   \   000030   7D00         MOV     R5,#0x0
   \   000032   EF           MOV     A,R7
   \   000033   FA           MOV     R2,A
   \   000034   7B00         MOV     R3,#0x0
   \   000036   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000039   7404         MOV     A,#0x4
   \   00003B   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??zb_ReadConfiguration_1:
   \   00003E   7F04         MOV     R7,#0x4
   \   000040   02....       LJMP    ?BANKED_LEAVE_XDATA
    459            }
    460          }
    461          /******************************************************************************
    462           * @fn          zb_WriteConfiguration
    463           *
    464           * @brief       The zb_WriteConfiguration function is used to write a
    465           *              Configuration Property to nonvolatile memory.
    466           *
    467           * @param       configId - The identifier for the configuration property
    468           *              len - The size of the pValue buffer in bytes
    469           *              pValue - A buffer containing the new value of the
    470           *                       configuration property
    471           *
    472           * @return      none
    473           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    474          uint8 zb_WriteConfiguration( uint8 configId, uint8 len, void *pValue )
   \                     zb_WriteConfiguration:
    475          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
    476            return( osal_nv_write(configId, 0, len, pValue) );
   \   000009                ; Setup parameters for call to function osal_nv_write
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
   \   00000D   78..         MOV     R0,#?V0
   \   00000F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000012   8E..         MOV     ?V0,R6
   \   000014   75..00       MOV     ?V1,#0x0
   \   000017   78..         MOV     R0,#?V0
   \   000019   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001C   7C00         MOV     R4,#0x0
   \   00001E   7D00         MOV     R5,#0x0
   \   000020   EF           MOV     A,R7
   \   000021   FA           MOV     R2,A
   \   000022   7B00         MOV     R3,#0x0
   \   000024   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000027   7404         MOV     A,#0x4
   \   000029   12....       LCALL   ?DEALLOC_XSTACK8
   \   00002C   7F02         MOV     R7,#0x2
   \   00002E   02....       LJMP    ?BANKED_LEAVE_XDATA
    477          }
    478          /******************************************************************************
    479           * @fn          zb_GetDeviceInfo
    480           *
    481           * @brief       The zb_GetDeviceInfo function retrieves a Device Information
    482           *              Property.
    483           *
    484           * @param       param - The identifier for the device information
    485           *              pValue - A buffer to hold the device information
    486           *
    487           * @return      none
    488           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    489          void zb_GetDeviceInfo ( uint8 param, void *pValue )
   \                     zb_GetDeviceInfo:
    490          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    491            switch(param)
   \   000007   EE           MOV     A,R6
   \   000008   6024         JZ      ??zb_GetDeviceInfo_0
   \   00000A   14           DEC     A
   \   00000B   603E         JZ      ??zb_GetDeviceInfo_1
   \   00000D   14           DEC     A
   \   00000E   6058         JZ      ??zb_GetDeviceInfo_2
   \   000010   14           DEC     A
   \   000011   6072         JZ      ??zb_GetDeviceInfo_3
   \   000013   14           DEC     A
   \   000014   7003         JNZ     $+5
   \   000016   02....       LJMP    ??zb_GetDeviceInfo_4 & 0xFFFF
   \   000019   14           DEC     A
   \   00001A   7003         JNZ     $+5
   \   00001C   02....       LJMP    ??zb_GetDeviceInfo_5 & 0xFFFF
   \   00001F   14           DEC     A
   \   000020   7003         JNZ     $+5
   \   000022   02....       LJMP    ??zb_GetDeviceInfo_6 & 0xFFFF
   \   000025   14           DEC     A
   \   000026   7003         JNZ     $+5
   \   000028   02....       LJMP    ??zb_GetDeviceInfo_7 & 0xFFFF
   \   00002B   02....       LJMP    ??zb_GetDeviceInfo_8 & 0xFFFF
    492            {
    493              case ZB_INFO_DEV_STATE:
    494                osal_memcpy(pValue, &devState, sizeof(uint8));
   \                     ??zb_GetDeviceInfo_0:
   \   00002E                ; Setup parameters for call to function osal_memcpy
   \   00002E   75....       MOV     ?V0,#devState & 0xff
   \   000031   75....       MOV     ?V1,#(devState >> 8) & 0xff
   \   000034   75..00       MOV     ?V2,#0x0
   \   000037   78..         MOV     R0,#?V0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00003C   7C01         MOV     R4,#0x1
   \   00003E   7D00         MOV     R5,#0x0
   \   000040   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000043   7403         MOV     A,#0x3
   \   000045   12....       LCALL   ?DEALLOC_XSTACK8
    495                break;
   \   000048   02....       LJMP    ??zb_GetDeviceInfo_8 & 0xFFFF
    496              case ZB_INFO_IEEE_ADDR:
    497                osal_memcpy(pValue, &aExtendedAddress, Z_EXTADDR_LEN);
   \                     ??zb_GetDeviceInfo_1:
   \   00004B                ; Setup parameters for call to function osal_memcpy
   \   00004B   75....       MOV     ?V0,#aExtendedAddress & 0xff
   \   00004E   75....       MOV     ?V1,#(aExtendedAddress >> 8) & 0xff
   \   000051   75..00       MOV     ?V2,#0x0
   \   000054   78..         MOV     R0,#?V0
   \   000056   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000059   7C08         MOV     R4,#0x8
   \   00005B   7D00         MOV     R5,#0x0
   \   00005D   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000060   7403         MOV     A,#0x3
   \   000062   12....       LCALL   ?DEALLOC_XSTACK8
    498                break;
   \   000065   02....       LJMP    ??zb_GetDeviceInfo_8 & 0xFFFF
    499              case ZB_INFO_SHORT_ADDR:
    500                osal_memcpy(pValue, &_NIB.nwkDevAddress, sizeof(uint16));
   \                     ??zb_GetDeviceInfo_2:
   \   000068                ; Setup parameters for call to function osal_memcpy
   \   000068   75....       MOV     ?V0,#(_NIB + 20) & 0xff
   \   00006B   75....       MOV     ?V1,#((_NIB + 20) >> 8) & 0xff
   \   00006E   75..00       MOV     ?V2,#0x0
   \   000071   78..         MOV     R0,#?V0
   \   000073   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000076   7C02         MOV     R4,#0x2
   \   000078   7D00         MOV     R5,#0x0
   \   00007A   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00007D   7403         MOV     A,#0x3
   \   00007F   12....       LCALL   ?DEALLOC_XSTACK8
    501                break;
   \   000082   02....       LJMP    ??zb_GetDeviceInfo_8 & 0xFFFF
    502              case ZB_INFO_PARENT_SHORT_ADDR:
    503                osal_memcpy(pValue, &_NIB.nwkCoordAddress, sizeof(uint16));
   \                     ??zb_GetDeviceInfo_3:
   \   000085                ; Setup parameters for call to function osal_memcpy
   \   000085   75....       MOV     ?V0,#(_NIB + 23) & 0xff
   \   000088   75....       MOV     ?V1,#((_NIB + 23) >> 8) & 0xff
   \   00008B   75..00       MOV     ?V2,#0x0
   \   00008E   78..         MOV     R0,#?V0
   \   000090   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000093   7C02         MOV     R4,#0x2
   \   000095   7D00         MOV     R5,#0x0
   \   000097   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00009A   7403         MOV     A,#0x3
   \   00009C   12....       LCALL   ?DEALLOC_XSTACK8
    504                break;
   \   00009F   806E         SJMP    ??zb_GetDeviceInfo_8
    505              case ZB_INFO_PARENT_IEEE_ADDR:
    506                osal_memcpy(pValue, &_NIB.nwkCoordExtAddress, Z_EXTADDR_LEN);
   \                     ??zb_GetDeviceInfo_4:
   \   0000A1                ; Setup parameters for call to function osal_memcpy
   \   0000A1   75....       MOV     ?V0,#(_NIB + 25) & 0xff
   \   0000A4   75....       MOV     ?V1,#((_NIB + 25) >> 8) & 0xff
   \   0000A7   75..00       MOV     ?V2,#0x0
   \   0000AA   78..         MOV     R0,#?V0
   \   0000AC   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000AF   7C08         MOV     R4,#0x8
   \   0000B1   7D00         MOV     R5,#0x0
   \   0000B3   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000B6   7403         MOV     A,#0x3
   \   0000B8   12....       LCALL   ?DEALLOC_XSTACK8
    507                break;
   \   0000BB   8052         SJMP    ??zb_GetDeviceInfo_8
    508              case ZB_INFO_CHANNEL:
    509                osal_memcpy(pValue, &_NIB.nwkLogicalChannel, sizeof(uint8));
   \                     ??zb_GetDeviceInfo_5:
   \   0000BD                ; Setup parameters for call to function osal_memcpy
   \   0000BD   75....       MOV     ?V0,#(_NIB + 22) & 0xff
   \   0000C0   75....       MOV     ?V1,#((_NIB + 22) >> 8) & 0xff
   \   0000C3   75..00       MOV     ?V2,#0x0
   \   0000C6   78..         MOV     R0,#?V0
   \   0000C8   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000CB   7C01         MOV     R4,#0x1
   \   0000CD   7D00         MOV     R5,#0x0
   \   0000CF   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000D2   7403         MOV     A,#0x3
   \   0000D4   12....       LCALL   ?DEALLOC_XSTACK8
    510                break;
   \   0000D7   8036         SJMP    ??zb_GetDeviceInfo_8
    511              case ZB_INFO_PAN_ID:
    512                osal_memcpy(pValue, &_NIB.nwkPanId, sizeof(uint16));
   \                     ??zb_GetDeviceInfo_6:
   \   0000D9                ; Setup parameters for call to function osal_memcpy
   \   0000D9   75....       MOV     ?V0,#(_NIB + 33) & 0xff
   \   0000DC   75....       MOV     ?V1,#((_NIB + 33) >> 8) & 0xff
   \   0000DF   75..00       MOV     ?V2,#0x0
   \   0000E2   78..         MOV     R0,#?V0
   \   0000E4   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000E7   7C02         MOV     R4,#0x2
   \   0000E9   7D00         MOV     R5,#0x0
   \   0000EB   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000EE   7403         MOV     A,#0x3
   \   0000F0   12....       LCALL   ?DEALLOC_XSTACK8
    513                break;
   \   0000F3   801A         SJMP    ??zb_GetDeviceInfo_8
    514              case ZB_INFO_EXT_PAN_ID:
    515                osal_memcpy(pValue, &_NIB.extendedPANID, Z_EXTADDR_LEN);
   \                     ??zb_GetDeviceInfo_7:
   \   0000F5                ; Setup parameters for call to function osal_memcpy
   \   0000F5   75....       MOV     ?V0,#(_NIB + 53) & 0xff
   \   0000F8   75....       MOV     ?V1,#((_NIB + 53) >> 8) & 0xff
   \   0000FB   75..00       MOV     ?V2,#0x0
   \   0000FE   78..         MOV     R0,#?V0
   \   000100   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000103   7C08         MOV     R4,#0x8
   \   000105   7D00         MOV     R5,#0x0
   \   000107   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00010A   7403         MOV     A,#0x3
   \   00010C   12....       LCALL   ?DEALLOC_XSTACK8
    516                break;
    517            }
    518          }
   \                     ??zb_GetDeviceInfo_8:
   \   00010F   7F03         MOV     R7,#0x3
   \   000111   02....       LJMP    ?BANKED_LEAVE_XDATA
    519          
    520          /******************************************************************************
    521           * @fn          zb_FindDeviceRequest
    522           *
    523           * @brief       The zb_FindDeviceRequest function is used to determine the
    524           *              short address for a device in the network.  The device initiating
    525           *              a call to zb_FindDeviceRequest and the device being discovered
    526           *              must both be a member of the same network.  When the search is
    527           *              complete, the zv_FindDeviceConfirm callback function is called.
    528           *
    529           * @param       searchType - The type of search to perform. Can be one of following:
    530           *                           ZB_IEEE_SEARCH - Search for 16-bit addr given IEEE addr.
    531           *              searchKey - Value to search on.
    532           *
    533           * @return      none
    534           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    535          void zb_FindDeviceRequest( uint8 searchType, void *searchKey )
   \                     zb_FindDeviceRequest:
    536          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    537            if (searchType == ZB_IEEE_SEARCH)
   \   000007   7401         MOV     A,#0x1
   \   000009   6E           XRL     A,R6
   \   00000A   700A         JNZ     ??zb_FindDeviceRequest_0
    538            {
    539              ZDP_NwkAddrReq((uint8*) searchKey, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   \   00000C                ; Setup parameters for call to function ZDP_NwkAddrReq
   \   00000C   7D00         MOV     R5,#0x0
   \   00000E   7C00         MOV     R4,#0x0
   \   000010   7900         MOV     R1,#0x0
   \   000012   12....       LCALL   `??ZDP_NwkAddrReq::?relay`; Banked call to: ZDP_NwkAddrReq
   \   000015   E9           MOV     A,R1
    540            }
    541          }
   \                     ??zb_FindDeviceRequest_0:
   \   000016   7F01         MOV     R7,#0x1
   \   000018   02....       LJMP    ?BANKED_LEAVE_XDATA
    542          /******************************************************************************
    543           * @fn          SAPI_StartConfirm
    544           *
    545           * @brief       The SAPI_StartConfirm callback is called by the ZigBee stack
    546           *              after a start request operation completes
    547           *
    548           * @param       status - The status of the start operation.  Status of
    549           *                       ZB_SUCCESS indicates the start operation completed
    550           *                       successfully.  Else the status is an error code.
    551           *
    552           * @return      none
    553           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    554          void SAPI_StartConfirm( uint8 status )
   \                     SAPI_StartConfirm:
    555          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    556          #if defined ( MT_SAPI_CB_FUNC )
    557            /* First check if MT has subscribed for this callback. If so , pass it as
    558            a event to MonitorTest and return control to calling function after that */
    559            if ( SAPICB_CHECK( SPI_CB_SAPI_START_CNF ) )
    560            {
    561              zb_MTCallbackStartConfirm( status );
    562            }
    563            else
    564          #endif  //MT_SAPI_CB_FUNC
    565            {
    566          #if ( SAPI_CB_FUNC )
    567              zb_StartConfirm( status );
   \   000007                ; Setup parameters for call to function zb_StartConfirm
   \   000007   EE           MOV     A,R6
   \   000008   F9           MOV     R1,A
   \   000009   12....       LCALL   `??zb_StartConfirm::?relay`; Banked call to: zb_StartConfirm
    568          #endif
    569            }
    570          }
   \   00000C   7F01         MOV     R7,#0x1
   \   00000E   02....       LJMP    ?BANKED_LEAVE_XDATA
    571          
    572          /******************************************************************************
    573           * @fn          SAPI_SendDataConfirm
    574           *
    575           * @brief       The SAPI_SendDataConfirm callback function is called by the
    576           *              ZigBee after a send data operation completes
    577           *
    578           * @param       handle - The handle identifying the data transmission.
    579           *              status - The status of the operation.
    580           *
    581           * @return      none
    582           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    583          void SAPI_SendDataConfirm( uint8 handle, uint8 status )
   \                     SAPI_SendDataConfirm:
    584          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
    585          #if defined ( MT_SAPI_CB_FUNC )
    586            /* First check if MT has subscribed for this callback. If so , pass it as
    587            a event to MonitorTest and return control to calling function after that */
    588            if ( SAPICB_CHECK( SPI_CB_SAPI_SEND_DATA_CNF ) )
    589            {
    590              zb_MTCallbackSendDataConfirm( handle, status );
    591            }
    592            else
    593          #endif  //MT_SAPI_CB_FUNC
    594            {
    595          #if ( SAPI_CB_FUNC )
    596              zb_SendDataConfirm( handle, status );
   \   000009                ; Setup parameters for call to function zb_SendDataConfirm
   \   000009   EE           MOV     A,R6
   \   00000A   FA           MOV     R2,A
   \   00000B   EF           MOV     A,R7
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   `??zb_SendDataConfirm::?relay`; Banked call to: zb_SendDataConfirm
    597          #endif
    598            }
    599          }
   \   000010   7F01         MOV     R7,#0x1
   \   000012   02....       LJMP    ?BANKED_LEAVE_XDATA
    600          
    601          /******************************************************************************
    602           * @fn          SAPI_BindConfirm
    603           *
    604           * @brief       The SAPI_BindConfirm callback is called by the ZigBee stack
    605           *              after a bind operation completes.
    606           *
    607           * @param       commandId - The command ID of the binding being confirmed.
    608           *              status - The status of the bind operation.
    609           *
    610           * @return      none
    611           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    612          void SAPI_BindConfirm( uint16 commandId, uint8 status )
   \                     SAPI_BindConfirm:
    613          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    614          #if defined ( MT_SAPI_CB_FUNC )
    615            /* First check if MT has subscribed for this callback. If so , pass it as
    616            a event to MonitorTest and return control to calling function after that */
    617            if ( SAPICB_CHECK( SPI_CB_SAPI_BIND_CNF ) )
    618            {
    619              zb_MTCallbackBindConfirm( commandId, status );
    620            }
    621            else
    622          #endif  //MT_SAPI_CB_FUNC
    623            {
    624          #if ( SAPI_CB_FUNC )
    625              zb_BindConfirm( commandId, status );
   \   000007                ; Setup parameters for call to function zb_BindConfirm
   \   000007   EE           MOV     A,R6
   \   000008   F9           MOV     R1,A
   \   000009   12....       LCALL   `??zb_BindConfirm::?relay`; Banked call to: zb_BindConfirm
    626          #endif
    627            }
    628          }
   \   00000C   7F01         MOV     R7,#0x1
   \   00000E   02....       LJMP    ?BANKED_LEAVE_XDATA
    629          
    630          /******************************************************************************
    631           * @fn          SAPI_AllowBindConfirm
    632           *
    633           * @brief       Indicates when another device attempted to bind to this device
    634           *
    635           * @param
    636           *
    637           * @return      none
    638           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    639          void SAPI_AllowBindConfirm( uint16 source )
   \                     SAPI_AllowBindConfirm:
    640          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    641            #if defined ( MT_SAPI_CB_FUNC )
    642            /* First check if MT has subscribed for this callback. If so , pass it as
    643            a event to MonitorTest and return control to calling function after that */
    644            if ( SAPICB_CHECK( SPI_CB_SAPI_ALLOW_BIND_CNF ) )
    645            {
    646              zb_MTCallbackAllowBindConfirm( source );
    647            }
    648            else
    649          #endif  //MT_SAPI_CB_FUNC
    650            {
    651          #if ( SAPI_CB_FUNC )
    652              zb_AllowBindConfirm( source );
   \   000004                ; Setup parameters for call to function zb_AllowBindConfirm
   \   000004   12....       LCALL   `??zb_AllowBindConfirm::?relay`; Banked call to: zb_AllowBindConfirm
    653          #endif
    654            }
    655          }
   \   000007   D083         POP     DPH
   \   000009   D082         POP     DPL
   \   00000B   02....       LJMP    ?BRET
    656          /******************************************************************************
    657           * @fn          SAPI_FindDeviceConfirm
    658           *
    659           * @brief       The SAPI_FindDeviceConfirm callback function is called by the
    660           *              ZigBee stack when a find device operation completes.
    661           *
    662           * @param       searchType - The type of search that was performed.
    663           *              searchKey - Value that the search was executed on.
    664           *              result - The result of the search.
    665           *
    666           * @return      none
    667           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    668          void SAPI_FindDeviceConfirm( uint8 searchType, uint8 *searchKey, uint8 *result )
   \                     SAPI_FindDeviceConfirm:
    669          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    670          #if defined ( MT_SAPI_CB_FUNC )
    671            /* First check if MT has subscribed for this callback. If so , pass it as
    672            a event to MonitorTest and return control to calling function after that */
    673            if ( SAPICB_CHECK( SPI_CB_SAPI_FIND_DEV_CNF ) )
    674            {
    675              zb_MTCallbackFindDeviceConfirm( searchType, searchKey, result );
    676            }
    677            else
    678          #endif  //MT_SAPI_CB_FUNC
    679            {
    680          #if ( SAPI_CB_FUNC )
    681              zb_FindDeviceConfirm( searchType, searchKey, result );
   \   000007                ; Setup parameters for call to function zb_FindDeviceConfirm
   \   000007   EE           MOV     A,R6
   \   000008   F9           MOV     R1,A
   \   000009   12....       LCALL   `??zb_FindDeviceConfirm::?relay`; Banked call to: zb_FindDeviceConfirm
    682          #endif
    683            }
    684          }
   \   00000C   7F01         MOV     R7,#0x1
   \   00000E   02....       LJMP    ?BANKED_LEAVE_XDATA
    685          /******************************************************************************
    686           * @fn          SAPI_ReceiveDataIndication
    687           *
    688           * @brief       The SAPI_ReceiveDataIndication callback function is called
    689           *              asynchronously by the ZigBee stack to notify the application
    690           *              when data is received from a peer device.
    691           *
    692           * @param       source - The short address of the peer device that sent the data
    693           *              command - The commandId associated with the data
    694           *              len - The number of bytes in the pData parameter
    695           *              pData - The data sent by the peer device
    696           *
    697           * @return      none
    698           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    699          void SAPI_ReceiveDataIndication( uint16 source, uint16 command, uint16 len, uint8 *pData  )
   \                     SAPI_ReceiveDataIndication:
    700          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    701          #if defined ( MT_SAPI_CB_FUNC )
    702            /* First check if MT has subscribed for this callback. If so , pass it as
    703            a event to MonitorTest and return control to calling function after that */
    704            if ( SAPICB_CHECK( SPI_CB_SAPI_RCV_DATA_IND ) )
    705            {
    706              zb_MTCallbackReceiveDataIndication( source, command, len, pData  );
    707            }
    708            else
    709          #endif  //MT_SAPI_CB_FUNC
    710            {
    711          #if ( SAPI_CB_FUNC )
    712              zb_ReceiveDataIndication( source, command, len, pData  );
   \   000004                ; Setup parameters for call to function zb_ReceiveDataIndication
   \   000004   7402         MOV     A,#0x2
   \   000006   12....       LCALL   ?XSTACK_DISP0_8
   \   000009   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00000C   7402         MOV     A,#0x2
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000014   12....       LCALL   `??zb_ReceiveDataIndication::?relay`; Banked call to: zb_ReceiveDataIndication
   \   000017   7404         MOV     A,#0x4
   \   000019   12....       LCALL   ?DEALLOC_XSTACK8
    713          #endif
    714            }
    715          }
   \   00001C   D083         POP     DPH
   \   00001E   D082         POP     DPL
   \   000020   02....       LJMP    ?BRET
    716          
    717          /*********************************************************************
    718          * Custom User Events, created by KAS ( 22-2017);
    719          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    720          UINT16 USER_event_loop( byte task_id, UINT16 events )
   \                     USER_event_loop:
    721          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    722            int doorValue = MCU_IO_GET(0,4);
   \   000009   E580         MOV     A,0x80
   \   00000B   F8           MOV     R0,A
   \   00000C   7900         MOV     R1,#0x0
   \   00000E   E8           MOV     A,R0
   \   00000F   5410         ANL     A,#0x10
   \   000011   F8           MOV     R0,A
   \   000012   E9           MOV     A,R1
   \   000013   5400         ANL     A,#0x0
   \   000015   F9           MOV     R1,A
    723            static bool doorIsClosed;
    724            if(doorValue == 0 && !doorIsClosed){
   \   000016   E8           MOV     A,R0
   \   000017   49           ORL     A,R1
   \   000018   701D         JNZ     ??USER_event_loop_0
   \   00001A   90....       MOV     DPTR,#??doorIsClosed
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   7017         JNZ     ??USER_event_loop_0
    725              doorIsClosed = true;
   \   000020   90....       MOV     DPTR,#??doorIsClosed
   \   000023   7401         MOV     A,#0x1
   \   000025   F0           MOVX    @DPTR,A
    726              zb_HandleOsalEvent( DOOR_CLOSED_EVENT );
   \   000026                ; Setup parameters for call to function zb_HandleOsalEvent
   \   000026   7A00         MOV     R2,#0x0
   \   000028   7B50         MOV     R3,#0x50
   \   00002A   12....       LCALL   `??zb_HandleOsalEvent::?relay`; Banked call to: zb_HandleOsalEvent
    727              return (events ^ DOOR_CLOSED_EVENT);
   \   00002D   EE           MOV     A,R6
   \   00002E   6400         XRL     A,#0x0
   \   000030   FA           MOV     R2,A
   \   000031   EF           MOV     A,R7
   \   000032   6450         XRL     A,#0x50
   \   000034   FB           MOV     R3,A
   \   000035   8015         SJMP    ??USER_event_loop_1
    728            }
    729            else{
    730              doorIsClosed = false;
   \                     ??USER_event_loop_0:
   \   000037   90....       MOV     DPTR,#??doorIsClosed
   \   00003A   7400         MOV     A,#0x0
   \   00003C   F0           MOVX    @DPTR,A
    731              zb_HandleOsalEvent( DOOR_OPEN_EVENT );
   \   00003D                ; Setup parameters for call to function zb_HandleOsalEvent
   \   00003D   7A00         MOV     R2,#0x0
   \   00003F   7B60         MOV     R3,#0x60
   \   000041   12....       LCALL   `??zb_HandleOsalEvent::?relay`; Banked call to: zb_HandleOsalEvent
    732              return (events ^ DOOR_OPEN_EVENT);
   \   000044   EE           MOV     A,R6
   \   000045   6400         XRL     A,#0x0
   \   000047   FA           MOV     R2,A
   \   000048   EF           MOV     A,R7
   \   000049   6460         XRL     A,#0x60
   \   00004B   FB           MOV     R3,A
   \                     ??USER_event_loop_1:
   \   00004C   7F01         MOV     R7,#0x1
   \   00004E   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000051                REQUIRE _A_P0
    733            }
    734           
    735          }

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??doorIsClosed:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    736          
    737          /*********************************************************************
    738           * @fn      SAPI_ProcessEvent
    739           *
    740           * @brief   Simple API Task event processor.  This function
    741           *          is called to process all events for the task.  Events
    742           *          include timers, messages and any other user defined events.
    743           *
    744           * @param   task_id  - The OSAL assigned task ID.
    745           * @param   events - events to process.  This is a bit map and can
    746           *                   contain more than one event.
    747           *
    748           * @return  none
    749           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    750          UINT16 SAPI_ProcessEvent( byte task_id, UINT16 events )
   \                     SAPI_ProcessEvent:
    751          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V2,R1
   \   00000C   EA           MOV     A,R2
   \   00000D   FE           MOV     R6,A
   \   00000E   EB           MOV     A,R3
   \   00000F   FF           MOV     R7,A
    752            osal_event_hdr_t *pMsg;
    753            afIncomingMSGPacket_t *pMSGpkt;
    754            afDataConfirm_t *pDataConfirm;
    755          
    756            if ( events & SYS_EVENT_MSG )
   \   000010   EE           MOV     A,R6
   \   000011   5400         ANL     A,#0x0
   \   000013   F8           MOV     R0,A
   \   000014   EF           MOV     A,R7
   \   000015   5480         ANL     A,#0x80
   \   000017   F9           MOV     R1,A
   \   000018   E8           MOV     A,R0
   \   000019   49           ORL     A,R1
   \   00001A   7003         JNZ     $+5
   \   00001C   02....       LJMP    ??SAPI_ProcessEvent_0 & 0xFFFF
    757            {
    758              pMsg = (osal_event_hdr_t *) osal_msg_receive( task_id );
   \   00001F                ; Setup parameters for call to function osal_msg_receive
   \   00001F   A9..         MOV     R1,?V2
   \   000021   12....       LCALL   `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   000024   8A..         MOV     ?V4,R2
   \   000026   8B..         MOV     ?V5,R3
   \   000028   85....       MOV     ?V0,?V4
   \   00002B   85....       MOV     ?V1,?V5
   \   00002E   8017         SJMP    ??SAPI_ProcessEvent_1
    759              while ( pMsg )
    760              {
    761                switch ( pMsg->event )
    762                {
    763                  case ZDO_CB_MSG:
    764                    SAPI_ProcessZDOMsgs( (zdoIncomingMsg_t *)pMsg );
    765                    break;
    766          
    767                  case AF_DATA_CONFIRM_CMD:
    768                    // This message is received as a confirmation of a data packet sent.
    769                    // The status is of ZStatus_t type [defined in ZComDef.h]
    770                    // The message fields are defined in AF.h
    771                    pDataConfirm = (afDataConfirm_t *) pMsg;
    772                    SAPI_SendDataConfirm( pDataConfirm->transID, pDataConfirm->hdr.status );
    773                    break;
    774          
    775                  case AF_INCOMING_MSG_CMD:
    776                    pMSGpkt = (afIncomingMSGPacket_t *) pMsg;
    777                    SAPI_ReceiveDataIndication( pMSGpkt->srcAddr.addr.shortAddr, pMSGpkt->clusterId,
    778                                                pMSGpkt->cmd.DataLength, pMSGpkt->cmd.Data);
    779                    break;
    780          
    781                  case ZDO_STATE_CHANGE:
    782                    // If the device has started up, notify the application
    783                    if (pMsg->status == DEV_END_DEVICE ||
    784                        pMsg->status == DEV_ROUTER ||
    785                        pMsg->status == DEV_ZB_COORD )
    786                    {
    787                      SAPI_StartConfirm( ZB_SUCCESS );
    788                    }
    789                    else if (pMsg->status == DEV_HOLD ||
    790                             pMsg->status == DEV_INIT)
    791                    {
    792                      SAPI_StartConfirm( ZB_INIT );
    793                    }
    794                    break;
    795          
    796                  case ZDO_MATCH_DESC_RSP_SENT:
    797                    SAPI_AllowBindConfirm( ((ZDO_MatchDescRspSent_t *)pMsg)->nwkAddr );
    798                    break;
    799          
    800                  case KEY_CHANGE:
    801          #if ( SAPI_CB_FUNC )
    802                    zb_HandleKeys( ((keyChange_t *)pMsg)->state, ((keyChange_t *)pMsg)->keys );
    803          #endif
    804                    break;
    805          
    806                  case SAPICB_DATA_CNF:
    807                    SAPI_SendDataConfirm( (uint8)((sapi_CbackEvent_t *)pMsg)->data,
    808                                                 ((sapi_CbackEvent_t *)pMsg)->hdr.status );
    809                    break;
    810          
    811                  case SAPICB_BIND_CNF:
    812                    SAPI_BindConfirm( ((sapi_CbackEvent_t *)pMsg)->data,
    813                                      ((sapi_CbackEvent_t *)pMsg)->hdr.status );
    814                    break;
    815          
    816                  case SAPICB_START_CNF:
    817                    SAPI_StartConfirm( ((sapi_CbackEvent_t *)pMsg)->hdr.status );
    818                    break;
    819          
    820                  default:
    821                    // User messages should be handled by user or passed to the application
    822                    if ( pMsg->event >= ZB_USER_MSG )
    823                    {
    824          
    825                    }
    826                    break;
    827                }
    828          
    829                // Release the memory
    830                osal_msg_deallocate( (uint8 *) pMsg );
   \                     ??SAPI_ProcessEvent_2:
   \   000030                ; Setup parameters for call to function osal_msg_deallocate
   \   000030   AA..         MOV     R2,?V0
   \   000032   AB..         MOV     R3,?V1
   \   000034   12....       LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \   000037   E9           MOV     A,R1
    831          
    832                // Next
    833                pMsg = (osal_event_hdr_t *) osal_msg_receive( task_id );
   \   000038                ; Setup parameters for call to function osal_msg_receive
   \   000038   A9..         MOV     R1,?V2
   \   00003A   12....       LCALL   `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   00003D   8A..         MOV     ?V4,R2
   \   00003F   8B..         MOV     ?V5,R3
   \   000041   85....       MOV     ?V0,?V4
   \   000044   85....       MOV     ?V1,?V5
   \                     ??SAPI_ProcessEvent_1:
   \   000047   E5..         MOV     A,?V0
   \   000049   45..         ORL     A,?V1
   \   00004B   7003         JNZ     $+5
   \   00004D   02....       LJMP    ??SAPI_ProcessEvent_3 & 0xFFFF
   \   000050   85..82       MOV     DPL,?V0
   \   000053   85..83       MOV     DPH,?V1
   \   000056   E0           MOVX    A,@DPTR
   \   000057   24E6         ADD     A,#-0x1a
   \   000059   6052         JZ      ??SAPI_ProcessEvent_4
   \   00005B   245A         ADD     A,#0x5a
   \   00005D   7003         JNZ     $+5
   \   00005F   02....       LJMP    ??SAPI_ProcessEvent_5 & 0xFFFF
   \   000062   24EF         ADD     A,#-0x11
   \   000064   7003         JNZ     $+5
   \   000066   02....       LJMP    ??SAPI_ProcessEvent_6 & 0xFFFF
   \   000069   14           DEC     A
   \   00006A   7003         JNZ     $+5
   \   00006C   02....       LJMP    ??SAPI_ProcessEvent_7 & 0xFFFF
   \   00006F   14           DEC     A
   \   000070   6019         JZ      ??SAPI_ProcessEvent_8
   \   000072   24F3         ADD     A,#-0xd
   \   000074   7003         JNZ     $+5
   \   000076   02....       LJMP    ??SAPI_ProcessEvent_9 & 0xFFFF
   \   000079   14           DEC     A
   \   00007A   7003         JNZ     $+5
   \   00007C   02....       LJMP    ??SAPI_ProcessEvent_10 & 0xFFFF
   \   00007F   14           DEC     A
   \   000080   7003         JNZ     $+5
   \   000082   02....       LJMP    ??SAPI_ProcessEvent_11 & 0xFFFF
   \   000085   24E5         ADD     A,#-0x1b
   \   000087   600B         JZ      ??SAPI_ProcessEvent_12
   \   000089   80A5         SJMP    ??SAPI_ProcessEvent_2
   \                     ??SAPI_ProcessEvent_8:
   \   00008B                ; Setup parameters for call to function SAPI_ProcessZDOMsgs
   \   00008B   AA..         MOV     R2,?V0
   \   00008D   AB..         MOV     R3,?V1
   \   00008F   12....       LCALL   `??SAPI_ProcessZDOMsgs::?relay`; Banked call to: SAPI_ProcessZDOMsgs
   \   000092   809C         SJMP    ??SAPI_ProcessEvent_2
   \                     ??SAPI_ProcessEvent_12:
   \   000094   A8..         MOV     R0,?V0
   \   000096   A9..         MOV     R1,?V1
   \   000098                ; Setup parameters for call to function SAPI_SendDataConfirm
   \   000098   8882         MOV     DPL,R0
   \   00009A   8983         MOV     DPH,R1
   \   00009C   A3           INC     DPTR
   \   00009D   E0           MOVX    A,@DPTR
   \   00009E   FA           MOV     R2,A
   \   00009F   8882         MOV     DPL,R0
   \   0000A1   8983         MOV     DPH,R1
   \   0000A3   A3           INC     DPTR
   \   0000A4   A3           INC     DPTR
   \   0000A5   A3           INC     DPTR
   \   0000A6   E0           MOVX    A,@DPTR
   \   0000A7   F9           MOV     R1,A
   \   0000A8   12....       LCALL   `??SAPI_SendDataConfirm::?relay`; Banked call to: SAPI_SendDataConfirm
   \   0000AB   8083         SJMP    ??SAPI_ProcessEvent_2
   \                     ??SAPI_ProcessEvent_4:
   \   0000AD   A8..         MOV     R0,?V0
   \   0000AF   A9..         MOV     R1,?V1
   \   0000B1                ; Setup parameters for call to function SAPI_ReceiveDataIndication
   \   0000B1   E8           MOV     A,R0
   \   0000B2   2422         ADD     A,#0x22
   \   0000B4   F582         MOV     DPL,A
   \   0000B6   E4           CLR     A
   \   0000B7   39           ADDC    A,R1
   \   0000B8   F583         MOV     DPH,A
   \   0000BA   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000BD   E8           MOV     A,R0
   \   0000BE   2420         ADD     A,#0x20
   \   0000C0   F582         MOV     DPL,A
   \   0000C2   E4           CLR     A
   \   0000C3   39           ADDC    A,R1
   \   0000C4   F583         MOV     DPH,A
   \   0000C6   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000C9   8882         MOV     DPL,R0
   \   0000CB   8983         MOV     DPH,R1
   \   0000CD   A3           INC     DPTR
   \   0000CE   A3           INC     DPTR
   \   0000CF   A3           INC     DPTR
   \   0000D0   A3           INC     DPTR
   \   0000D1   E0           MOVX    A,@DPTR
   \   0000D2   FC           MOV     R4,A
   \   0000D3   A3           INC     DPTR
   \   0000D4   E0           MOVX    A,@DPTR
   \   0000D5   FD           MOV     R5,A
   \   0000D6   8882         MOV     DPL,R0
   \   0000D8   8983         MOV     DPH,R1
   \   0000DA   A3           INC     DPTR
   \   0000DB   A3           INC     DPTR
   \   0000DC   A3           INC     DPTR
   \   0000DD   A3           INC     DPTR
   \   0000DE   A3           INC     DPTR
   \   0000DF   A3           INC     DPTR
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   FA           MOV     R2,A
   \   0000E2   A3           INC     DPTR
   \   0000E3   E0           MOVX    A,@DPTR
   \   0000E4   FB           MOV     R3,A
   \   0000E5   12....       LCALL   `??SAPI_ReceiveDataIndication::?relay`; Banked call to: SAPI_ReceiveDataIndication
   \   0000E8   7404         MOV     A,#0x4
   \   0000EA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000ED   02....       LJMP    ??SAPI_ProcessEvent_2 & 0xFFFF
   \                     ??SAPI_ProcessEvent_6:
   \   0000F0   85..82       MOV     DPL,?V0
   \   0000F3   85..83       MOV     DPH,?V1
   \   0000F6   A3           INC     DPTR
   \   0000F7   E0           MOVX    A,@DPTR
   \   0000F8   6406         XRL     A,#0x6
   \   0000FA   6018         JZ      ??SAPI_ProcessEvent_13
   \   0000FC   85..82       MOV     DPL,?V0
   \   0000FF   85..83       MOV     DPH,?V1
   \   000102   A3           INC     DPTR
   \   000103   E0           MOVX    A,@DPTR
   \   000104   6407         XRL     A,#0x7
   \   000106   600C         JZ      ??SAPI_ProcessEvent_13
   \   000108   85..82       MOV     DPL,?V0
   \   00010B   85..83       MOV     DPH,?V1
   \   00010E   A3           INC     DPTR
   \   00010F   E0           MOVX    A,@DPTR
   \   000110   6409         XRL     A,#0x9
   \   000112   7007         JNZ     ??SAPI_ProcessEvent_14
   \                     ??SAPI_ProcessEvent_13:
   \   000114                ; Setup parameters for call to function SAPI_StartConfirm
   \   000114   7900         MOV     R1,#0x0
   \   000116   12....       LCALL   `??SAPI_StartConfirm::?relay`; Banked call to: SAPI_StartConfirm
   \   000119   801B         SJMP    ??SAPI_ProcessEvent_15
   \                     ??SAPI_ProcessEvent_14:
   \   00011B   85..82       MOV     DPL,?V0
   \   00011E   85..83       MOV     DPH,?V1
   \   000121   A3           INC     DPTR
   \   000122   E0           MOVX    A,@DPTR
   \   000123   600C         JZ      ??SAPI_ProcessEvent_16
   \   000125   85..82       MOV     DPL,?V0
   \   000128   85..83       MOV     DPH,?V1
   \   00012B   A3           INC     DPTR
   \   00012C   E0           MOVX    A,@DPTR
   \   00012D   6401         XRL     A,#0x1
   \   00012F   7005         JNZ     ??SAPI_ProcessEvent_15
   \                     ??SAPI_ProcessEvent_16:
   \   000131                ; Setup parameters for call to function SAPI_StartConfirm
   \   000131   7922         MOV     R1,#0x22
   \   000133   12....       LCALL   `??SAPI_StartConfirm::?relay`; Banked call to: SAPI_StartConfirm
   \                     ??SAPI_ProcessEvent_15:
   \   000136   02....       LJMP    ??SAPI_ProcessEvent_2 & 0xFFFF
   \                     ??SAPI_ProcessEvent_7:
   \   000139                ; Setup parameters for call to function SAPI_AllowBindConfirm
   \   000139   85..82       MOV     DPL,?V0
   \   00013C   85..83       MOV     DPH,?V1
   \   00013F   A3           INC     DPTR
   \   000140   A3           INC     DPTR
   \   000141   E0           MOVX    A,@DPTR
   \   000142   FA           MOV     R2,A
   \   000143   A3           INC     DPTR
   \   000144   E0           MOVX    A,@DPTR
   \   000145   FB           MOV     R3,A
   \   000146   12....       LCALL   `??SAPI_AllowBindConfirm::?relay`; Banked call to: SAPI_AllowBindConfirm
   \   000149   02....       LJMP    ??SAPI_ProcessEvent_2 & 0xFFFF
   \                     ??SAPI_ProcessEvent_5:
   \   00014C                ; Setup parameters for call to function zb_HandleKeys
   \   00014C   85..82       MOV     DPL,?V0
   \   00014F   85..83       MOV     DPH,?V1
   \   000152   A3           INC     DPTR
   \   000153   A3           INC     DPTR
   \   000154   A3           INC     DPTR
   \   000155   E0           MOVX    A,@DPTR
   \   000156   FA           MOV     R2,A
   \   000157   85..82       MOV     DPL,?V0
   \   00015A   85..83       MOV     DPH,?V1
   \   00015D   A3           INC     DPTR
   \   00015E   A3           INC     DPTR
   \   00015F   E0           MOVX    A,@DPTR
   \   000160   F9           MOV     R1,A
   \   000161   12....       LCALL   `??zb_HandleKeys::?relay`; Banked call to: zb_HandleKeys
   \   000164   02....       LJMP    ??SAPI_ProcessEvent_2 & 0xFFFF
   \                     ??SAPI_ProcessEvent_9:
   \   000167                ; Setup parameters for call to function SAPI_SendDataConfirm
   \   000167   85..82       MOV     DPL,?V0
   \   00016A   85..83       MOV     DPH,?V1
   \   00016D   A3           INC     DPTR
   \   00016E   E0           MOVX    A,@DPTR
   \   00016F   FA           MOV     R2,A
   \   000170   85..82       MOV     DPL,?V0
   \   000173   85..83       MOV     DPH,?V1
   \   000176   A3           INC     DPTR
   \   000177   A3           INC     DPTR
   \   000178   E0           MOVX    A,@DPTR
   \   000179   F8           MOV     R0,A
   \   00017A   A3           INC     DPTR
   \   00017B   E0           MOVX    A,@DPTR
   \   00017C   F9           MOV     R1,A
   \   00017D   E8           MOV     A,R0
   \   00017E   F9           MOV     R1,A
   \   00017F   12....       LCALL   `??SAPI_SendDataConfirm::?relay`; Banked call to: SAPI_SendDataConfirm
   \   000182   02....       LJMP    ??SAPI_ProcessEvent_2 & 0xFFFF
   \                     ??SAPI_ProcessEvent_10:
   \   000185                ; Setup parameters for call to function SAPI_BindConfirm
   \   000185   85..82       MOV     DPL,?V0
   \   000188   85..83       MOV     DPH,?V1
   \   00018B   A3           INC     DPTR
   \   00018C   E0           MOVX    A,@DPTR
   \   00018D   F9           MOV     R1,A
   \   00018E   85..82       MOV     DPL,?V0
   \   000191   85..83       MOV     DPH,?V1
   \   000194   A3           INC     DPTR
   \   000195   A3           INC     DPTR
   \   000196   E0           MOVX    A,@DPTR
   \   000197   FA           MOV     R2,A
   \   000198   A3           INC     DPTR
   \   000199   E0           MOVX    A,@DPTR
   \   00019A   FB           MOV     R3,A
   \   00019B   12....       LCALL   `??SAPI_BindConfirm::?relay`; Banked call to: SAPI_BindConfirm
   \   00019E   02....       LJMP    ??SAPI_ProcessEvent_2 & 0xFFFF
   \                     ??SAPI_ProcessEvent_11:
   \   0001A1                ; Setup parameters for call to function SAPI_StartConfirm
   \   0001A1   85..82       MOV     DPL,?V0
   \   0001A4   85..83       MOV     DPH,?V1
   \   0001A7   A3           INC     DPTR
   \   0001A8   E0           MOVX    A,@DPTR
   \   0001A9   F9           MOV     R1,A
   \   0001AA   12....       LCALL   `??SAPI_StartConfirm::?relay`; Banked call to: SAPI_StartConfirm
   \   0001AD   02....       LJMP    ??SAPI_ProcessEvent_2 & 0xFFFF
    834              }
    835          
    836              // Return unprocessed events
    837              return (events ^ SYS_EVENT_MSG);
   \                     ??SAPI_ProcessEvent_3:
   \   0001B0   EE           MOV     A,R6
   \   0001B1   6400         XRL     A,#0x0
   \   0001B3   FA           MOV     R2,A
   \   0001B4   EF           MOV     A,R7
   \   0001B5   6480         XRL     A,#0x80
   \   0001B7   FB           MOV     R3,A
   \   0001B8   02....       LJMP    ??SAPI_ProcessEvent_17 & 0xFFFF
    838            }
    839          
    840            if ( events & ZB_ALLOW_BIND_TIMER )
   \                     ??SAPI_ProcessEvent_0:
   \   0001BB   EE           MOV     A,R6
   \   0001BC   5400         ANL     A,#0x0
   \   0001BE   F8           MOV     R0,A
   \   0001BF   EF           MOV     A,R7
   \   0001C0   5440         ANL     A,#0x40
   \   0001C2   F9           MOV     R1,A
   \   0001C3   E8           MOV     A,R0
   \   0001C4   49           ORL     A,R1
   \   0001C5   601E         JZ      ??SAPI_ProcessEvent_18
    841            {
    842              afSetMatch(sapi_epDesc.simpleDesc->EndPoint, FALSE);
   \   0001C7                ; Setup parameters for call to function afSetMatch
   \   0001C7   7A00         MOV     R2,#0x0
   \   0001C9   90....       MOV     DPTR,#sapi_epDesc + 3
   \   0001CC   E0           MOVX    A,@DPTR
   \   0001CD   F8           MOV     R0,A
   \   0001CE   A3           INC     DPTR
   \   0001CF   E0           MOVX    A,@DPTR
   \   0001D0   F583         MOV     DPH,A
   \   0001D2   8882         MOV     DPL,R0
   \   0001D4   E0           MOVX    A,@DPTR
   \   0001D5   F9           MOV     R1,A
   \   0001D6   12....       LCALL   `??afSetMatch::?relay`; Banked call to: afSetMatch
   \   0001D9   E9           MOV     A,R1
    843              return (events ^ ZB_ALLOW_BIND_TIMER);
   \   0001DA   EE           MOV     A,R6
   \   0001DB   6400         XRL     A,#0x0
   \   0001DD   FA           MOV     R2,A
   \   0001DE   EF           MOV     A,R7
   \   0001DF   6440         XRL     A,#0x40
   \   0001E1   FB           MOV     R3,A
   \   0001E2   02....       LJMP    ??SAPI_ProcessEvent_17 & 0xFFFF
    844            }
    845          
    846            if ( events & ZB_BIND_TIMER )
   \                     ??SAPI_ProcessEvent_18:
   \   0001E5   EE           MOV     A,R6
   \   0001E6   5400         ANL     A,#0x0
   \   0001E8   F8           MOV     R0,A
   \   0001E9   EF           MOV     A,R7
   \   0001EA   5420         ANL     A,#0x20
   \   0001EC   F9           MOV     R1,A
   \   0001ED   E8           MOV     A,R0
   \   0001EE   49           ORL     A,R1
   \   0001EF   6021         JZ      ??SAPI_ProcessEvent_19
    847            {
    848              // Send bind confirm callback to application
    849              SAPI_BindConfirm( sapi_bindInProgress, ZB_TIMEOUT );
   \   0001F1                ; Setup parameters for call to function SAPI_BindConfirm
   \   0001F1   7921         MOV     R1,#0x21
   \   0001F3   90....       MOV     DPTR,#sapi_bindInProgress
   \   0001F6   E0           MOVX    A,@DPTR
   \   0001F7   FA           MOV     R2,A
   \   0001F8   A3           INC     DPTR
   \   0001F9   E0           MOVX    A,@DPTR
   \   0001FA   FB           MOV     R3,A
   \   0001FB   12....       LCALL   `??SAPI_BindConfirm::?relay`; Banked call to: SAPI_BindConfirm
    850              sapi_bindInProgress = 0xffff;
   \   0001FE   90....       MOV     DPTR,#sapi_bindInProgress
   \   000201   74FF         MOV     A,#-0x1
   \   000203   F0           MOVX    @DPTR,A
   \   000204   A3           INC     DPTR
   \   000205   74FF         MOV     A,#-0x1
   \   000207   F0           MOVX    @DPTR,A
    851          
    852              return (events ^ ZB_BIND_TIMER);
   \   000208   EE           MOV     A,R6
   \   000209   6400         XRL     A,#0x0
   \   00020B   FA           MOV     R2,A
   \   00020C   EF           MOV     A,R7
   \   00020D   6420         XRL     A,#0x20
   \   00020F   FB           MOV     R3,A
   \   000210   805E         SJMP    ??SAPI_ProcessEvent_17
    853            }
    854          
    855            if ( events & ZB_ENTRY_EVENT )
   \                     ??SAPI_ProcessEvent_19:
   \   000212   EE           MOV     A,R6
   \   000213   5400         ANL     A,#0x0
   \   000215   F8           MOV     R0,A
   \   000216   EF           MOV     A,R7
   \   000217   5410         ANL     A,#0x10
   \   000219   F9           MOV     R1,A
   \   00021A   E8           MOV     A,R0
   \   00021B   49           ORL     A,R1
   \   00021C   6042         JZ      ??SAPI_ProcessEvent_20
    856            {
    857              uint8 startOptions;
    858          
    859              // Give indication to application of device startup
    860          #if ( SAPI_CB_FUNC )
    861              zb_HandleOsalEvent( ZB_ENTRY_EVENT );
   \   00021E                ; Setup parameters for call to function zb_HandleOsalEvent
   \   00021E   7A00         MOV     R2,#0x0
   \   000220   7B10         MOV     R3,#0x10
   \   000222   12....       LCALL   `??zb_HandleOsalEvent::?relay`; Banked call to: zb_HandleOsalEvent
    862          #endif
    863          
    864              // LED off cancels HOLD_AUTO_START blink set in the stack
    865              HalLedSet (HAL_LED_4, HAL_LED_MODE_OFF);
   \   000225                ; Setup parameters for call to function HalLedSet
   \   000225   7A00         MOV     R2,#0x0
   \   000227   7908         MOV     R1,#0x8
   \   000229   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   00022C   E9           MOV     A,R1
    866          
    867              zb_ReadConfiguration( ZCD_NV_STARTUP_OPTION, sizeof(uint8), &startOptions );
   \   00022D                ; Setup parameters for call to function zb_ReadConfiguration
   \   00022D   AC..         MOV     R4,?XSP + 0
   \   00022F   AD..         MOV     R5,?XSP + 1
   \   000231   7A01         MOV     R2,#0x1
   \   000233   7903         MOV     R1,#0x3
   \   000235   12....       LCALL   `??zb_ReadConfiguration::?relay`; Banked call to: zb_ReadConfiguration
   \   000238   E9           MOV     A,R1
    868              if ( startOptions & ZCD_STARTOPT_AUTO_START )
   \   000239   85..82       MOV     DPL,?XSP + 0
   \   00023C   85..83       MOV     DPH,?XSP + 1
   \   00023F   E0           MOVX    A,@DPTR
   \   000240   A2E2         MOV     C,0xE0 /* A   */.2
   \   000242   5005         JNC     ??SAPI_ProcessEvent_21
    869              {
    870                zb_StartRequest();
   \   000244                ; Setup parameters for call to function zb_StartRequest
   \   000244   12....       LCALL   `??zb_StartRequest::?relay`; Banked call to: zb_StartRequest
   \   000247   800D         SJMP    ??SAPI_ProcessEvent_22
    871              }
    872              else
    873              {
    874                // blink leds and wait for external input to config and restart
    875                HalLedBlink(HAL_LED_2, 0, 50, 500);
   \                     ??SAPI_ProcessEvent_21:
   \   000249                ; Setup parameters for call to function HalLedBlink
   \   000249   7CF4         MOV     R4,#-0xc
   \   00024B   7D01         MOV     R5,#0x1
   \   00024D   7B32         MOV     R3,#0x32
   \   00024F   7A00         MOV     R2,#0x0
   \   000251   7902         MOV     R1,#0x2
   \   000253   12....       LCALL   `??HalLedBlink::?relay`; Banked call to: HalLedBlink
    876              }
    877          
    878              return (events ^ ZB_ENTRY_EVENT );
   \                     ??SAPI_ProcessEvent_22:
   \   000256   EE           MOV     A,R6
   \   000257   6400         XRL     A,#0x0
   \   000259   FA           MOV     R2,A
   \   00025A   EF           MOV     A,R7
   \   00025B   6410         XRL     A,#0x10
   \   00025D   FB           MOV     R3,A
   \   00025E   8010         SJMP    ??SAPI_ProcessEvent_17
    879            }
    880          
    881            // This must be the last event to be processed
    882            if ( events & ( ZB_USER_EVENTS ) )
   \                     ??SAPI_ProcessEvent_20:
   \   000260   EE           MOV     A,R6
   \   000261   54FF         ANL     A,#0xff
   \   000263   6007         JZ      ??SAPI_ProcessEvent_23
    883            {
    884              // User events are passed to the application
    885          #if ( SAPI_CB_FUNC )
    886              zb_HandleOsalEvent( events );
   \   000265                ; Setup parameters for call to function zb_HandleOsalEvent
   \   000265   EE           MOV     A,R6
   \   000266   FA           MOV     R2,A
   \   000267   EF           MOV     A,R7
   \   000268   FB           MOV     R3,A
   \   000269   12....       LCALL   `??zb_HandleOsalEvent::?relay`; Banked call to: zb_HandleOsalEvent
    887          #endif
    888          
    889              // Do not return here, return 0 later
    890            }
    891          
    892            // Discard unknown events
    893            return 0;
   \                     ??SAPI_ProcessEvent_23:
   \   00026C   7A00         MOV     R2,#0x0
   \   00026E   7B00         MOV     R3,#0x0
   \                     ??SAPI_ProcessEvent_17:
   \   000270   7401         MOV     A,#0x1
   \   000272   12....       LCALL   ?DEALLOC_XSTACK8
   \   000275   7F06         MOV     R7,#0x6
   \   000277   02....       LJMP    ?BANKED_LEAVE_XDATA
    894          }
    895          
    896          /*********************************************************************
    897           * @fn      SAPI_ProcessZDOMsgs()
    898           *
    899           * @brief   Process response messages
    900           *
    901           * @param   none
    902           *
    903           * @return  none
    904           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    905          void SAPI_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg )
   \                     SAPI_ProcessZDOMsgs:
    906          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    907            switch ( inMsg->clusterID )
   \   00000A   EA           MOV     A,R2
   \   00000B   240C         ADD     A,#0xc
   \   00000D   F582         MOV     DPL,A
   \   00000F   E4           CLR     A
   \   000010   3B           ADDC    A,R3
   \   000011   F583         MOV     DPH,A
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F5..         MOV     ?V0,A
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F5..         MOV     ?V1,A
   \   00001A   78..         MOV     R0,#?V0
   \   00001C   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for SAPI_ProcessZDOMsgs>_0`:
   \   00001F   0000         DW        0
   \   000021   0200         DW        2
   \   000023   0080         DW        32768
   \   000025   ....         DW        ??SAPI_ProcessZDOMsgs_0
   \   000027   0680         DW        32774
   \   000029   ....         DW        ??SAPI_ProcessZDOMsgs_1
   \   00002B   ....         DW        ??SAPI_ProcessZDOMsgs_2
    908            {
    909              case NWK_addr_rsp:
    910                {
    911                  // Send find device callback to application
    912                  ZDO_NwkIEEEAddrResp_t *pNwkAddrRsp = ZDO_ParseAddrRsp( inMsg );
   \                     ??SAPI_ProcessZDOMsgs_0:
   \   00002D                ; Setup parameters for call to function ZDO_ParseAddrRsp
   \   00002D   12....       LCALL   `??ZDO_ParseAddrRsp::?relay`; Banked call to: ZDO_ParseAddrRsp
   \   000030   8A..         MOV     ?V0,R2
   \   000032   8B..         MOV     ?V1,R3
   \   000034   85..82       MOV     DPL,?V0
   \   000037   85..83       MOV     DPH,?V1
    913                  SAPI_FindDeviceConfirm( ZB_IEEE_SEARCH, (uint8*)&pNwkAddrRsp->nwkAddr, pNwkAddrRsp->extAddr );
   \   00003A                ; Setup parameters for call to function SAPI_FindDeviceConfirm
   \   00003A   E582         MOV     A,DPL
   \   00003C   2403         ADD     A,#0x3
   \   00003E   FC           MOV     R4,A
   \   00003F   E4           CLR     A
   \   000040   3583         ADDC    A,DPH
   \   000042   FD           MOV     R5,A
   \   000043   A3           INC     DPTR
   \   000044   AA82         MOV     R2,DPL
   \   000046   AB83         MOV     R3,DPH
   \   000048   7901         MOV     R1,#0x1
   \   00004A   12....       LCALL   `??SAPI_FindDeviceConfirm::?relay`; Banked call to: SAPI_FindDeviceConfirm
    914                }
    915                break;
   \   00004D   02....       LJMP    ??SAPI_ProcessZDOMsgs_2 & 0xFFFF
    916          
    917              case Match_Desc_rsp:
    918                {
    919                  zAddrType_t dstAddr;
    920                  ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( inMsg );
   \                     ??SAPI_ProcessZDOMsgs_1:
   \   000050                ; Setup parameters for call to function ZDO_ParseEPListRsp
   \   000050   12....       LCALL   `??ZDO_ParseEPListRsp::?relay`; Banked call to: ZDO_ParseEPListRsp
   \   000053   8A..         MOV     ?V0,R2
   \   000055   8B..         MOV     ?V1,R3
   \   000057   AE..         MOV     R6,?V0
   \   000059   AF..         MOV     R7,?V1
    921          
    922                  if ( sapi_bindInProgress != 0xffff )
   \   00005B   90....       MOV     DPTR,#sapi_bindInProgress
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   64FF         XRL     A,#0xff
   \   000061   7004         JNZ     ??SAPI_ProcessZDOMsgs_3
   \   000063   A3           INC     DPTR
   \   000064   E0           MOVX    A,@DPTR
   \   000065   64FF         XRL     A,#0xff
   \                     ??SAPI_ProcessZDOMsgs_3:
   \   000067   7003         JNZ     $+5
   \   000069   02....       LJMP    ??SAPI_ProcessZDOMsgs_2 & 0xFFFF
    923                  {
    924                    // Create a binding table entry
    925                    dstAddr.addrMode = Addr16Bit;
   \   00006C   7408         MOV     A,#0x8
   \   00006E   12....       LCALL   ?XSTACK_DISP0_8
   \   000071   7402         MOV     A,#0x2
   \   000073   F0           MOVX    @DPTR,A
    926                    dstAddr.addr.shortAddr = pRsp->nwkAddr;
   \   000074   8E82         MOV     DPL,R6
   \   000076   8F83         MOV     DPH,R7
   \   000078   A3           INC     DPTR
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   F8           MOV     R0,A
   \   00007B   A3           INC     DPTR
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   F9           MOV     R1,A
   \   00007E   85..82       MOV     DPL,?XSP + 0
   \   000081   85..83       MOV     DPH,?XSP + 1
   \   000084   E8           MOV     A,R0
   \   000085   F0           MOVX    @DPTR,A
   \   000086   A3           INC     DPTR
   \   000087   E9           MOV     A,R1
   \   000088   F0           MOVX    @DPTR,A
    927          
    928                    if ( APSME_BindRequest( sapi_epDesc.simpleDesc->EndPoint,
    929                                            sapi_bindInProgress, &dstAddr,
    930                                            pRsp->epList[0] ) == ZSuccess )
   \   000089                ; Setup parameters for call to function APSME_BindRequest
   \   000089   8E82         MOV     DPL,R6
   \   00008B   8F83         MOV     DPH,R7
   \   00008D   A3           INC     DPTR
   \   00008E   A3           INC     DPTR
   \   00008F   A3           INC     DPTR
   \   000090   A3           INC     DPTR
   \   000091   E0           MOVX    A,@DPTR
   \   000092   F5..         MOV     ?V0,A
   \   000094   78..         MOV     R0,#?V0
   \   000096   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000099   7401         MOV     A,#0x1
   \   00009B   12....       LCALL   ?XSTACK_DISP102_8
   \   00009E   90....       MOV     DPTR,#sapi_bindInProgress
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   FA           MOV     R2,A
   \   0000A3   A3           INC     DPTR
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   FB           MOV     R3,A
   \   0000A6   90....       MOV     DPTR,#sapi_epDesc + 3
   \   0000A9   E0           MOVX    A,@DPTR
   \   0000AA   F8           MOV     R0,A
   \   0000AB   A3           INC     DPTR
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   F583         MOV     DPH,A
   \   0000AF   8882         MOV     DPL,R0
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   F9           MOV     R1,A
   \   0000B3   12....       LCALL   `??APSME_BindRequest::?relay`; Banked call to: APSME_BindRequest
   \   0000B6   7401         MOV     A,#0x1
   \   0000B8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000BB   E9           MOV     A,R1
   \   0000BC   7050         JNZ     ??SAPI_ProcessZDOMsgs_2
    931                    {
    932                      osal_stop_timerEx(sapi_TaskID,  ZB_BIND_TIMER);
   \   0000BE                ; Setup parameters for call to function osal_stop_timerEx
   \   0000BE   7A00         MOV     R2,#0x0
   \   0000C0   7B20         MOV     R3,#0x20
   \   0000C2   90....       MOV     DPTR,#sapi_TaskID
   \   0000C5   E0           MOVX    A,@DPTR
   \   0000C6   F9           MOV     R1,A
   \   0000C7   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   0000CA   E9           MOV     A,R1
    933                      osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, 250 );
   \   0000CB                ; Setup parameters for call to function osal_start_timerEx
   \   0000CB   90....       MOV     DPTR,#__Constant_fa
   \   0000CE   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0000D1   7A00         MOV     R2,#0x0
   \   0000D3   7B01         MOV     R3,#0x1
   \   0000D5   90....       MOV     DPTR,#ZDAppTaskID
   \   0000D8   E0           MOVX    A,@DPTR
   \   0000D9   F9           MOV     R1,A
   \   0000DA   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0000DD   7404         MOV     A,#0x4
   \   0000DF   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E2   E9           MOV     A,R1
    934          
    935                      // Find IEEE addr
    936                      ZDP_IEEEAddrReq( pRsp->nwkAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   \   0000E3                ; Setup parameters for call to function ZDP_IEEEAddrReq
   \   0000E3   7D00         MOV     R5,#0x0
   \   0000E5   7C00         MOV     R4,#0x0
   \   0000E7   7900         MOV     R1,#0x0
   \   0000E9   8E82         MOV     DPL,R6
   \   0000EB   8F83         MOV     DPH,R7
   \   0000ED   A3           INC     DPTR
   \   0000EE   E0           MOVX    A,@DPTR
   \   0000EF   FA           MOV     R2,A
   \   0000F0   A3           INC     DPTR
   \   0000F1   E0           MOVX    A,@DPTR
   \   0000F2   FB           MOV     R3,A
   \   0000F3   12....       LCALL   `??ZDP_IEEEAddrReq::?relay`; Banked call to: ZDP_IEEEAddrReq
   \   0000F6   E9           MOV     A,R1
    937          #if defined ( MT_SAPI_CB_FUNC )
    938                      zb_MTCallbackBindConfirm( sapi_bindInProgress, ZB_SUCCESS );
    939          #endif
    940                      // Send bind confirm callback to application
    941          #if ( SAPI_CB_FUNC )
    942                      zb_BindConfirm( sapi_bindInProgress, ZB_SUCCESS );
   \   0000F7                ; Setup parameters for call to function zb_BindConfirm
   \   0000F7   7900         MOV     R1,#0x0
   \   0000F9   90....       MOV     DPTR,#sapi_bindInProgress
   \   0000FC   E0           MOVX    A,@DPTR
   \   0000FD   FA           MOV     R2,A
   \   0000FE   A3           INC     DPTR
   \   0000FF   E0           MOVX    A,@DPTR
   \   000100   FB           MOV     R3,A
   \   000101   12....       LCALL   `??zb_BindConfirm::?relay`; Banked call to: zb_BindConfirm
    943          #endif
    944                      sapi_bindInProgress = 0xffff;
   \   000104   90....       MOV     DPTR,#sapi_bindInProgress
   \   000107   74FF         MOV     A,#-0x1
   \   000109   F0           MOVX    @DPTR,A
   \   00010A   A3           INC     DPTR
   \   00010B   74FF         MOV     A,#-0x1
   \   00010D   F0           MOVX    @DPTR,A
    945                    }
    946                  }
    947                }
    948                break;
    949            }
    950          }
   \                     ??SAPI_ProcessZDOMsgs_2:
   \   00010E   7409         MOV     A,#0x9
   \   000110   12....       LCALL   ?DEALLOC_XSTACK8
   \   000113   7F02         MOV     R7,#0x2
   \   000115   02....       LJMP    ?BANKED_LEAVE_XDATA
    951          
    952          /*********************************************************************
    953           * @fn      SAPI_Init
    954           *
    955           * @brief   Initialization function for the Simple API Task.
    956           *          This is called during initialization and should contain
    957           *          any application specific initialization (ie. hardware
    958           *          initialization/setup, table initialization, power up
    959           *          notification ... ).
    960           *
    961           * @param   task_id - the ID assigned by OSAL.  This ID should be
    962           *                    used to send messages and set timers.
    963           *
    964           * @return  none
    965           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    966          void SAPI_Init( byte task_id )
   \                     SAPI_Init:
    967          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    968            sapi_TaskID = task_id;
   \   00000C   EE           MOV     A,R6
   \   00000D   90....       MOV     DPTR,#sapi_TaskID
   \   000010   F0           MOVX    @DPTR,A
    969            sapi_bindInProgress = 0xffff;
   \   000011   90....       MOV     DPTR,#sapi_bindInProgress
   \   000014   74FF         MOV     A,#-0x1
   \   000016   F0           MOVX    @DPTR,A
   \   000017   A3           INC     DPTR
   \   000018   74FF         MOV     A,#-0x1
   \   00001A   F0           MOVX    @DPTR,A
    970          
    971            sapi_epDesc.task_id = &sapi_TaskID;
   \   00001B   90....       MOV     DPTR,#sapi_epDesc + 1
   \   00001E   74..         MOV     A,#sapi_TaskID & 0xff
   \   000020   F0           MOVX    @DPTR,A
   \   000021   A3           INC     DPTR
   \   000022   74..         MOV     A,#(sapi_TaskID >> 8) & 0xff
   \   000024   F0           MOVX    @DPTR,A
    972            sapi_epDesc.endPoint = 0;
   \   000025   90....       MOV     DPTR,#sapi_epDesc
   \   000028   7400         MOV     A,#0x0
   \   00002A   F0           MOVX    @DPTR,A
    973          
    974          #if ( SAPI_CB_FUNC )
    975            sapi_epDesc.endPoint = zb_SimpleDesc.EndPoint;
   \   00002B   90....       MOV     DPTR,#zb_SimpleDesc
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   90....       MOV     DPTR,#sapi_epDesc
   \   000032   F0           MOVX    @DPTR,A
    976            sapi_epDesc.task_id = &sapi_TaskID;
   \   000033   90....       MOV     DPTR,#sapi_epDesc + 1
   \   000036   74..         MOV     A,#sapi_TaskID & 0xff
   \   000038   F0           MOVX    @DPTR,A
   \   000039   A3           INC     DPTR
   \   00003A   74..         MOV     A,#(sapi_TaskID >> 8) & 0xff
   \   00003C   F0           MOVX    @DPTR,A
    977            sapi_epDesc.simpleDesc = (SimpleDescriptionFormat_t *)&zb_SimpleDesc;
   \   00003D   90....       MOV     DPTR,#sapi_epDesc + 3
   \   000040   74..         MOV     A,#zb_SimpleDesc & 0xff
   \   000042   F0           MOVX    @DPTR,A
   \   000043   A3           INC     DPTR
   \   000044   74..         MOV     A,#(zb_SimpleDesc >> 8) & 0xff
   \   000046   F0           MOVX    @DPTR,A
    978            sapi_epDesc.latencyReq = noLatencyReqs;
   \   000047   90....       MOV     DPTR,#sapi_epDesc + 5
   \   00004A   7400         MOV     A,#0x0
   \   00004C   F0           MOVX    @DPTR,A
    979          
    980            // Register the endpoint/interface description with the AF
    981            afRegister( &sapi_epDesc );
   \   00004D                ; Setup parameters for call to function afRegister
   \   00004D   7A..         MOV     R2,#sapi_epDesc & 0xff
   \   00004F   7B..         MOV     R3,#(sapi_epDesc >> 8) & 0xff
   \   000051   12....       LCALL   `??afRegister::?relay`; Banked call to: afRegister
   \   000054   E9           MOV     A,R1
    982          #endif
    983          
    984            // Turn off match descriptor response by default
    985            afSetMatch(sapi_epDesc.simpleDesc->EndPoint, FALSE);
   \   000055                ; Setup parameters for call to function afSetMatch
   \   000055   7A00         MOV     R2,#0x0
   \   000057   90....       MOV     DPTR,#sapi_epDesc + 3
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   F8           MOV     R0,A
   \   00005C   A3           INC     DPTR
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   F583         MOV     DPH,A
   \   000060   8882         MOV     DPL,R0
   \   000062   E0           MOVX    A,@DPTR
   \   000063   F9           MOV     R1,A
   \   000064   12....       LCALL   `??afSetMatch::?relay`; Banked call to: afSetMatch
   \   000067   E9           MOV     A,R1
    986          
    987            // Register callback evetns from the ZDApp
    988            ZDO_RegisterForZDOMsg( sapi_TaskID, NWK_addr_rsp );
   \   000068                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000068   7A00         MOV     R2,#0x0
   \   00006A   7B80         MOV     R3,#-0x80
   \   00006C   90....       MOV     DPTR,#sapi_TaskID
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   F9           MOV     R1,A
   \   000071   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   \   000074   E9           MOV     A,R1
    989            ZDO_RegisterForZDOMsg( sapi_TaskID, Match_Desc_rsp );
   \   000075                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000075   7A06         MOV     R2,#0x6
   \   000077   7B80         MOV     R3,#-0x80
   \   000079   90....       MOV     DPTR,#sapi_TaskID
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   F9           MOV     R1,A
   \   00007E   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   \   000081   E9           MOV     A,R1
    990          
    991          #if ( SAPI_CB_FUNC )
    992          #if (defined HAL_KEY) && (HAL_KEY == TRUE)
    993            // Register for HAL events
    994            RegisterForKeys( sapi_TaskID );
   \   000082                ; Setup parameters for call to function RegisterForKeys
   \   000082   90....       MOV     DPTR,#sapi_TaskID
   \   000085   E0           MOVX    A,@DPTR
   \   000086   F9           MOV     R1,A
   \   000087   12....       LCALL   `??RegisterForKeys::?relay`; Banked call to: RegisterForKeys
   \   00008A   E9           MOV     A,R1
    995          
    996            if ( HalKeyRead () == HAL_KEY_SW_2)
   \   00008B                ; Setup parameters for call to function HalKeyRead
   \   00008B   12....       LCALL   `??HalKeyRead::?relay`; Banked call to: HalKeyRead
   \   00008E   E9           MOV     A,R1
   \   00008F   6402         XRL     A,#0x2
   \   000091   7018         JNZ     ??SAPI_Init_0
    997            {
    998              // If SW2 is pressed and held while powerup, force auto-start and nv-restore off and reset
    999              uint8 startOptions = ZCD_STARTOPT_CLEAR_STATE | ZCD_STARTOPT_CLEAR_CONFIG;
   \   000093   85..82       MOV     DPL,?XSP + 0
   \   000096   85..83       MOV     DPH,?XSP + 1
   \   000099   7403         MOV     A,#0x3
   \   00009B   F0           MOVX    @DPTR,A
   1000              zb_WriteConfiguration( ZCD_NV_STARTUP_OPTION, sizeof(uint8), &startOptions );
   \   00009C                ; Setup parameters for call to function zb_WriteConfiguration
   \   00009C   AC..         MOV     R4,?XSP + 0
   \   00009E   AD..         MOV     R5,?XSP + 1
   \   0000A0   7A01         MOV     R2,#0x1
   \   0000A2   7903         MOV     R1,#0x3
   \   0000A4   12....       LCALL   `??zb_WriteConfiguration::?relay`; Banked call to: zb_WriteConfiguration
   \   0000A7   E9           MOV     A,R1
   1001              zb_SystemReset();
   \   0000A8                ; Setup parameters for call to function zb_SystemReset
   \   0000A8   12....       LCALL   `??zb_SystemReset::?relay`; Banked call to: zb_SystemReset
   1002            }
   1003          #endif // HAL_KEY
   1004          
   1005            // Set an event to start the application
   1006            osal_set_event(task_id, ZB_ENTRY_EVENT);
   \                     ??SAPI_Init_0:
   \   0000AB                ; Setup parameters for call to function osal_set_event
   \   0000AB   7A00         MOV     R2,#0x0
   \   0000AD   7B10         MOV     R3,#0x10
   \   0000AF   EE           MOV     A,R6
   \   0000B0   F9           MOV     R1,A
   \   0000B1   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   0000B4   E9           MOV     A,R1
   1007          #endif
   1008          }
   \   0000B5   7401         MOV     A,#0x1
   \   0000B7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000BA   7F01         MOV     R7,#0x1
   \   0000BC   02....       LJMP    ?BANKED_LEAVE_XDATA
   1009          
   1010          /*********************************************************************
   1011           * @fn      SAPI_SendCback
   1012           *
   1013           * @brief   Sends a message to the sapi task ( itself ) so that a
   1014           *          callback can be generated later.
   1015           *
   1016           * @return  none
   1017           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1018          void SAPI_SendCback( uint8 event, uint8 status, uint16 data )
   \                     SAPI_SendCback:
   1019          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
   \   000007   8A..         MOV     ?V1,R2
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   1020            sapi_CbackEvent_t *pMsg;
   1021          
   1022            pMsg = (sapi_CbackEvent_t *)osal_msg_allocate( sizeof(sapi_CbackEvent_t) );
   \   00000D                ; Setup parameters for call to function osal_msg_allocate
   \   00000D   7A04         MOV     R2,#0x4
   \   00000F   7B00         MOV     R3,#0x0
   \   000011   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000014   8A..         MOV     ?V2,R2
   \   000016   8B..         MOV     ?V3,R3
   \   000018   AA..         MOV     R2,?V2
   \   00001A   AB..         MOV     R3,?V3
   1023            if( pMsg )
   \   00001C   EA           MOV     A,R2
   \   00001D   4B           ORL     A,R3
   \   00001E   602B         JZ      ??SAPI_SendCback_0
   1024            {
   1025              pMsg->hdr.event = event;
   \   000020   E5..         MOV     A,?V0
   \   000022   C0E0         PUSH    A
   \   000024   8A82         MOV     DPL,R2
   \   000026   8B83         MOV     DPH,R3
   \   000028   D0E0         POP     A
   \   00002A   F0           MOVX    @DPTR,A
   1026              pMsg->hdr.status = status;
   \   00002B   E5..         MOV     A,?V1
   \   00002D   C0E0         PUSH    A
   \   00002F   8A82         MOV     DPL,R2
   \   000031   8B83         MOV     DPH,R3
   \   000033   A3           INC     DPTR
   \   000034   D0E0         POP     A
   \   000036   F0           MOVX    @DPTR,A
   1027              pMsg->data = data;
   \   000037   8A82         MOV     DPL,R2
   \   000039   8B83         MOV     DPH,R3
   \   00003B   A3           INC     DPTR
   \   00003C   A3           INC     DPTR
   \   00003D   EE           MOV     A,R6
   \   00003E   F0           MOVX    @DPTR,A
   \   00003F   A3           INC     DPTR
   \   000040   EF           MOV     A,R7
   \   000041   F0           MOVX    @DPTR,A
   1028          
   1029              osal_msg_send( sapi_TaskID, (uint8 *)pMsg );
   \   000042                ; Setup parameters for call to function osal_msg_send
   \   000042   90....       MOV     DPTR,#sapi_TaskID
   \   000045   E0           MOVX    A,@DPTR
   \   000046   F9           MOV     R1,A
   \   000047   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   00004A   E9           MOV     A,R1
   1030            }
   1031          
   1032          }
   \                     ??SAPI_SendCback_0:
   \   00004B   7F04         MOV     R7,#0x4
   \   00004D   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_fa:
   \   000000   FA000000     DD 250

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_SystemReset::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_SystemReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_StartRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_StartRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_BindDevice::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_BindDevice

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_PermitJoiningRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_PermitJoiningRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_AllowBind::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_AllowBind

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_SendDataRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_SendDataRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_ReadConfiguration::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_ReadConfiguration

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_WriteConfiguration::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_WriteConfiguration

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_GetDeviceInfo::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_GetDeviceInfo

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_FindDeviceRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_FindDeviceRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SAPI_StartConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SAPI_StartConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SAPI_SendDataConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SAPI_SendDataConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SAPI_BindConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SAPI_BindConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SAPI_AllowBindConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SAPI_AllowBindConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SAPI_FindDeviceConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SAPI_FindDeviceConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SAPI_ReceiveDataIndication::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SAPI_ReceiveDataIndication

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??USER_event_loop::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    USER_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SAPI_ProcessEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SAPI_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SAPI_ProcessZDOMsgs::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SAPI_ProcessZDOMsgs

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SAPI_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SAPI_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SAPI_SendCback::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SAPI_SendCback
   1033          
   1034          /*********************************************************************
   1035          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2     15   SAPI_AllowBindConfirm
        2      0   -> zb_AllowBindConfirm
      0     24   SAPI_BindConfirm
        0      9   -> zb_BindConfirm
      0     28   SAPI_FindDeviceConfirm
        0      9   -> zb_FindDeviceConfirm
      0     10   SAPI_Init
        0     10   -> HalKeyRead
        0     10   -> RegisterForKeys
        0     10   -> ZDO_RegisterForZDOMsg
        0     10   -> afRegister
        0     10   -> afSetMatch
        0     10   -> osal_set_event
        0     10   -> zb_SystemReset
        0     10   -> zb_WriteConfiguration
      0     19   SAPI_ProcessEvent
        0     15   -> HalLedBlink
        0     15   -> HalLedSet
        0     15   -> SAPI_AllowBindConfirm
        0     15   -> SAPI_BindConfirm
        0     15   -> SAPI_ProcessZDOMsgs
        0     19   -> SAPI_ReceiveDataIndication
        0     15   -> SAPI_SendDataConfirm
        0     15   -> SAPI_StartConfirm
        0     15   -> afSetMatch
        0     15   -> osal_msg_deallocate
        0     15   -> osal_msg_receive
        0     15   -> zb_HandleKeys
        0     15   -> zb_HandleOsalEvent
        0     15   -> zb_ReadConfiguration
        0     15   -> zb_StartRequest
      0     38   SAPI_ProcessZDOMsgs
        0     20   -> APSME_BindRequest
        0     19   -> SAPI_FindDeviceConfirm
        0     19   -> ZDO_ParseAddrRsp
        0     19   -> ZDO_ParseEPListRsp
        0     19   -> ZDP_IEEEAddrReq
        0     23   -> osal_start_timerEx
        0     19   -> osal_stop_timerEx
        0     19   -> zb_BindConfirm
      2     23   SAPI_ReceiveDataIndication
        2      4   -> zb_ReceiveDataIndication
      1     39   SAPI_SendCback
        0     12   -> osal_msg_allocate
        0     12   -> osal_msg_send
      0     24   SAPI_SendDataConfirm
        0      9   -> zb_SendDataConfirm
      0     24   SAPI_StartConfirm
        0      9   -> zb_StartConfirm
      0      9   USER_event_loop
        0      9   -> zb_HandleOsalEvent
      0     16   zb_AllowBind
        0     12   -> afSetMatch
        0     16   -> osal_start_timerEx
        0     12   -> osal_stop_timerEx
      0     35   zb_BindDevice
        0     28   -> APSME_BindRequest
        0     27   -> SAPI_SendCback
        0     29   -> ZDO_AnyClusterMatches
        0     35   -> ZDP_MatchDescReq
        0     27   -> ZDP_NwkAddrReq
        0     27   -> bindFind
        0     27   -> bindRemoveEntry
        0     31   -> osal_start_timerEx
        0     27   -> sAddrExtCpy
      0      9   zb_FindDeviceRequest
        0      9   -> ZDP_NwkAddrReq
      0     14   zb_GetDeviceInfo
        0     14   -> osal_memcpy
      0      0   zb_PermitJoiningRequest
      0     31   zb_ReadConfiguration
        0     12   -> osal_nv_item_len
        0     16   -> osal_nv_read
      1     38   zb_SendDataRequest
        0     33   -> AF_DataRequest
        0     24   -> NLME_IsAddressBroadcast
        0     24   -> SAPI_SendCback
      2     16   zb_StartRequest
        2      1   -> SAPI_SendCback
        2      1   -> ZDOInitDevice
        2      1   -> zb_ReadConfiguration
      0     10   zb_SystemReset
        0      0   -> Onboard_soft_reset
      0     24   zb_WriteConfiguration
        0     14   -> osal_nv_write


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      14  SAPI_AllowBindConfirm
       6  SAPI_AllowBindConfirm::?relay
      17  SAPI_BindConfirm
       6  SAPI_BindConfirm::?relay
      17  SAPI_FindDeviceConfirm
       6  SAPI_FindDeviceConfirm::?relay
     191  SAPI_Init
       6  SAPI_Init::?relay
     634  SAPI_ProcessEvent
       6  SAPI_ProcessEvent::?relay
     280  SAPI_ProcessZDOMsgs
       6  SAPI_ProcessZDOMsgs::?relay
      35  SAPI_ReceiveDataIndication
       6  SAPI_ReceiveDataIndication::?relay
      80  SAPI_SendCback
       6  SAPI_SendCback::?relay
      21  SAPI_SendDataConfirm
       6  SAPI_SendDataConfirm::?relay
      17  SAPI_StartConfirm
       6  SAPI_StartConfirm::?relay
      81  USER_event_loop
       6  USER_event_loop::?relay
       1  _A_P0
       4  __Constant_fa
       1  doorIsClosed
       1  sapi_TaskID
       2  sapi_bindInProgress
       6  sapi_epDesc
      14  tasksArr
       1  tasksCnt
       2  tasksEvents
     141  zb_AllowBind
       6  zb_AllowBind::?relay
     623  zb_BindDevice
       6  zb_BindDevice::?relay
      27  zb_FindDeviceRequest
       6  zb_FindDeviceRequest::?relay
     276  zb_GetDeviceInfo
       6  zb_GetDeviceInfo::?relay
       5  zb_PermitJoiningRequest
       6  zb_PermitJoiningRequest::?relay
      67  zb_ReadConfiguration
       6  zb_ReadConfiguration::?relay
     205  zb_SendDataRequest
       6  zb_SendDataRequest::?relay
      93  zb_StartRequest
       6  zb_StartRequest::?relay
       6  zb_SystemReset
       6  zb_SystemReset::?relay
      49  zb_WriteConfiguration
       6  zb_WriteConfiguration::?relay

 
 2 879 bytes in segment BANKED_CODE
   126 bytes in segment BANK_RELAYS
     1 byte  in segment SFR_AN
    19 bytes in segment XDATA_ROM_C
    12 bytes in segment XDATA_Z
 
 3 005 bytes of CODE  memory
    15 bytes of CONST memory (+ 4 bytes shared)
     0 bytes of DATA  memory (+ 1 byte  shared)
    12 bytes of XDATA memory

Errors: none
Warnings: none

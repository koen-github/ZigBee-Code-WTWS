###############################################################################
#
# IAR C/C++ Compiler V9.20.1.2476 for 8051                22/Feb/2017  14:31:46
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\ZMain\TI2530DB\ZMain.c
#    Command line       =  
#        -f
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00002000 -DZDAPP_CONFIG_PAN_ID=0xABCD
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={'H', 'O', 'G', 'E', 'S',
#        'C', 'H', 'O', 'O', 'L', 'U', 'T', 'R', 'E', 'C', 'H'}"
#        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\ZMain\TI2530DB\ZMain.c
#        -D HOLD_AUTO_START -D BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D
#        NV_RESTORE -D HAL_UART=TRUE -lC
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\
#        -lA
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\
#        --diag_suppress Pe001,Pa010,Pe1665 -o
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\Obj\
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\Source\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ol --require_prototypes
#    List file          =  
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\ZMain.lst
#    Object file        =  
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\Obj\ZMain.r51
#
###############################################################################

C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\ZMain\TI2530DB\ZMain.c
      1          /**************************************************************************************************
      2            Filename:       ZMain.c
      3            Revised:        $Date: 2010-09-17 16:25:30 -0700 (Fri, 17 Sep 2010) $
      4            Revision:       $Revision: 23835 $
      5          
      6            Description:    Startup and shutdown code for ZStack
      7            Notes:          This version targets the Chipcon CC2530
      8          
      9          
     10            Copyright 2005-2010 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License").  You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product.  Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          **************************************************************************************************/
     40          
     41          /*********************************************************************
     42           * INCLUDES
     43           */
     44          #ifndef NONWK
     45          #include "AF.h"
     46          #endif
     47          #include "hal_adc.h"

   \                                 In  segment SFR_AN, at 0x8f
   \   unsigned char volatile __sfr P0INP
   \                     P0INP:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9d
   \   unsigned char volatile __sfr SLEEPSTA
   \                     SLEEPSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9e
   \   unsigned char volatile __sfr CLKCONSTA
   \                     CLKCONSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbe
   \   unsigned char volatile __sfr SLEEPCMD
   \                     SLEEPCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc6
   \   unsigned char volatile __sfr CLKCONCMD
   \                     CLKCONCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
     48          #include "hal_flash.h"
     49          #include "hal_lcd.h"
     50          #include "hal_led.h"
     51          #include "hal_drivers.h"
     52          #include "OnBoard.h"
     53          #include "OSAL.h"
     54          #include "OSAL_Nv.h"
     55          #include "ZComDef.h"
     56          #include "ZMAC.h"
     57          
     58          /*********************************************************************
     59           * LOCAL FUNCTIONS
     60           */
     61          static void zmain_ext_addr( void );
     62          #if defined ZCL_KEY_ESTABLISH
     63          static void zmain_cert_init( void );
     64          #endif
     65          static void zmain_dev_info( void );
     66          static void zmain_vdd_check( void );
     67          
     68          #ifdef LCD_SUPPORTED
     69          static void zmain_lcd_init( void );
     70          #endif
     71          
     72          /*********************************************************************
     73           * @fn      main
     74           * @brief   First function called after startup.
     75           * @return  don't care
     76           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     77          int main( void )
   \                     main:
     78          {
   \   000000                ; Auto size: 0
     79            // Turn off interrupts
     80            osal_int_disable( INTS_ALL );
   \   000000                ; Setup parameters for call to function osal_int_disable
   \   000000   79FF         MOV     R1,#-0x1
   \   000002   12....       LCALL   `??osal_int_disable::?relay`; Banked call to: osal_int_disable
   \   000005   E9           MOV     A,R1
     81          
     82            // Initialization for board related stuff such as LEDs
     83            HAL_BOARD_INIT();
   \   000006   53BEFB       ANL     0xbe,#0xfb
   \                     ??main_0:
   \   000009   E59D         MOV     A,0x9d
   \   00000B   A2E6         MOV     C,0xE0 /* A   */.6
   \   00000D   50FA         JNC     ??main_0
   \   00000F   00           NOP
   \   000010   7800         MOV     R0,#0x0
   \   000012   7900         MOV     R1,#0x0
   \   000014   8006         SJMP    ??main_1
   \                     ??main_2:
   \   000016   00           NOP
   \   000017   08           INC     R0
   \   000018   E8           MOV     A,R0
   \   000019   7001         JNZ     ??main_1
   \   00001B   09           INC     R1
   \                     ??main_1:
   \   00001C   C3           CLR     C
   \   00001D   E8           MOV     A,R0
   \   00001E   94F8         SUBB    A,#-0x8
   \   000020   E9           MOV     A,R1
   \   000021   9401         SUBB    A,#0x1
   \   000023   40F1         JC      ??main_2
   \   000025   75C600       MOV     0xc6,#0x0
   \                     ??main_3:
   \   000028   E59E         MOV     A,0x9e
   \   00002A   70FC         JNZ     ??main_3
   \   00002C   43BE04       ORL     0xbe,#0x4
   \   00002F   906270       MOV     DPTR,#0x6270
   \   000032   7408         MOV     A,#0x8
   \   000034   F0           MOVX    @DPTR,A
   \   000035   43FE01       ORL     0xfe,#0x1
   \   000038   C290         CLR     0x90.0
   \   00003A   43FE02       ORL     0xfe,#0x2
   \   00003D   C291         CLR     0x90.1
   \   00003F   43FE10       ORL     0xfe,#0x10
   \   000042   C294         CLR     0x90.4
   \   000044   438F01       ORL     0x8f,#0x1
     84          
     85            // Make sure supply voltage is high enough to run
     86            zmain_vdd_check();
   \   000047                ; Setup parameters for call to function zmain_vdd_check
   \   000047   12....       LCALL   `??zmain_vdd_check::?relay`; Banked call to: zmain_vdd_check
     87          
     88            // Initialize board I/O
     89            InitBoard( OB_COLD );
   \   00004A                ; Setup parameters for call to function InitBoard
   \   00004A   7900         MOV     R1,#0x0
   \   00004C   12....       LCALL   `??InitBoard::?relay`; Banked call to: InitBoard
     90          
     91            // Initialze HAL drivers
     92            HalDriverInit();
   \   00004F                ; Setup parameters for call to function HalDriverInit
   \   00004F   12....       LCALL   `??HalDriverInit::?relay`; Banked call to: HalDriverInit
     93          
     94            // Initialize NV System
     95            osal_nv_init( NULL );
   \   000052                ; Setup parameters for call to function osal_nv_init
   \   000052   7A00         MOV     R2,#0x0
   \   000054   7B00         MOV     R3,#0x0
   \   000056   12....       LCALL   `??osal_nv_init::?relay`; Banked call to: osal_nv_init
     96          
     97            // Initialize the MAC
     98            ZMacInit();
   \   000059                ; Setup parameters for call to function ZMacInit
   \   000059   12....       LCALL   `??ZMacInit::?relay` ; Banked call to: ZMacInit
   \   00005C   E9           MOV     A,R1
     99          
    100            // Determine the extended address
    101            zmain_ext_addr();
   \   00005D                ; Setup parameters for call to function zmain_ext_addr
   \   00005D   12....       LCALL   `??zmain_ext_addr::?relay`; Banked call to: zmain_ext_addr
    102          
    103          #if defined ZCL_KEY_ESTABLISH
    104            // Initialize the Certicom certificate information.
    105            zmain_cert_init();
    106          #endif
    107          
    108            // Initialize basic NV items
    109            zgInit();
   \   000060                ; Setup parameters for call to function zgInit
   \   000060   12....       LCALL   `??zgInit::?relay`   ; Banked call to: zgInit
   \   000063   E9           MOV     A,R1
    110          
    111          #ifndef NONWK
    112            // Since the AF isn't a task, call it's initialization routine
    113            afInit();
    114          #endif
    115          
    116            // Initialize the operating system
    117            osal_init_system();
   \   000064                ; Setup parameters for call to function osal_init_system
   \   000064   12....       LCALL   `??osal_init_system::?relay`; Banked call to: osal_init_system
   \   000067   E9           MOV     A,R1
    118          
    119            // Allow interrupts
    120            osal_int_enable( INTS_ALL );
   \   000068                ; Setup parameters for call to function osal_int_enable
   \   000068   79FF         MOV     R1,#-0x1
   \   00006A   12....       LCALL   `??osal_int_enable::?relay`; Banked call to: osal_int_enable
   \   00006D   E9           MOV     A,R1
    121          
    122            // Final board initialization
    123            InitBoard( OB_READY );
   \   00006E                ; Setup parameters for call to function InitBoard
   \   00006E   7902         MOV     R1,#0x2
   \   000070   12....       LCALL   `??InitBoard::?relay`; Banked call to: InitBoard
    124          
    125            // Display information about this device
    126            zmain_dev_info();
   \   000073                ; Setup parameters for call to function zmain_dev_info
   \   000073   12....       LCALL   `??zmain_dev_info::?relay`; Banked call to: zmain_dev_info
    127          
    128            /* Display the device info on the LCD */
    129          #ifdef LCD_SUPPORTED
    130            zmain_lcd_init();
    131          #endif
    132          
    133          #ifdef WDT_IN_PM1
    134            /* If WDT is used, this is a good place to enable it. */
    135            WatchDogEnable( WDTIMX );
    136          #endif
    137          
    138            osal_start_system(); // No Return from here
   \   000076                ; Setup parameters for call to function osal_start_system
   \   000076   12....       LCALL   `??osal_start_system::?relay`; Banked call to: osal_start_system
    139          
    140            return 0;  // Shouldn't get here.
   \   000079   7A00         MOV     R2,#0x0
   \   00007B   7B00         MOV     R3,#0x0
   \   00007D   02....       LJMP    ?BRET
   \   000080                REQUIRE SLEEPCMD
   \   000080                REQUIRE SLEEPSTA
   \   000080                REQUIRE CLKCONCMD
   \   000080                REQUIRE CLKCONSTA
   \   000080                REQUIRE P1DIR
   \   000080                REQUIRE _A_P1
   \   000080                REQUIRE P0INP
    141          } // main()
    142          
    143          /*********************************************************************
    144           * @fn      zmain_vdd_check
    145           * @brief   Check if the Vdd is OK to run the processor.
    146           * @return  None
    147           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    148          static void zmain_vdd_check( void )
   \                     zmain_vdd_check:
    149          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    150            uint8 cnt = 16;
   \   000005   7E10         MOV     R6,#0x10
    151            
    152            do {
    153              while (!HalAdcCheckVdd(VDD_MIN_RUN));
   \                     ??zmain_vdd_check_0:
   \   000007                ; Setup parameters for call to function HalAdcCheckVdd
   \   000007   794A         MOV     R1,#0x4a
   \   000009   12....       LCALL   `??HalAdcCheckVdd::?relay`; Banked call to: HalAdcCheckVdd
   \   00000C   E9           MOV     A,R1
   \   00000D   60F8         JZ      ??zmain_vdd_check_0
    154            } while (--cnt);
   \   00000F   1E           DEC     R6
   \   000010   EE           MOV     A,R6
   \   000011   70F4         JNZ     ??zmain_vdd_check_0
    155          }
   \   000013   7F01         MOV     R7,#0x1
   \   000015   02....       LJMP    ?BANKED_LEAVE_XDATA
    156          
    157          /**************************************************************************************************
    158           * @fn          zmain_ext_addr
    159           *
    160           * @brief       Execute a prioritized search for a valid extended address and write the results
    161           *              into the OSAL NV system for use by the system. Temporary address not saved to NV.
    162           *
    163           * input parameters
    164           *
    165           * None.
    166           *
    167           * output parameters
    168           *
    169           * None.
    170           *
    171           * @return      None.
    172           **************************************************************************************************
    173           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    174          static void zmain_ext_addr(void)
   \                     zmain_ext_addr:
    175          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    176            uint8 nullAddr[Z_EXTADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
   \   00000A   90....       MOV     DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,`
   \   00000D   AC..         MOV     R4,?XSP + 0
   \   00000F   AD..         MOV     R5,?XSP + 1
   \   000011   7408         MOV     A,#0x8
   \   000013   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    177            uint8 writeNV = TRUE;
   \   000016   7E01         MOV     R6,#0x1
    178          
    179            // First check whether a non-erased extended address exists in the OSAL NV.
    180            if ((SUCCESS != osal_nv_item_init(ZCD_NV_EXTADDR, Z_EXTADDR_LEN, NULL))  ||
    181                (SUCCESS != osal_nv_read(ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, aExtendedAddress)) ||
    182                (osal_memcmp(aExtendedAddress, nullAddr, Z_EXTADDR_LEN)))
   \   000018                ; Setup parameters for call to function osal_nv_item_init
   \   000018   E4           CLR     A
   \   000019   F5..         MOV     ?V0,A
   \   00001B   F5..         MOV     ?V1,A
   \   00001D   78..         MOV     R0,#?V0
   \   00001F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000022   7C08         MOV     R4,#0x8
   \   000024   7D00         MOV     R5,#0x0
   \   000026   7A01         MOV     R2,#0x1
   \   000028   7B00         MOV     R3,#0x0
   \   00002A   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00002D   7402         MOV     A,#0x2
   \   00002F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000032   E9           MOV     A,R1
   \   000033   7051         JNZ     ??zmain_ext_addr_0
   \   000035                ; Setup parameters for call to function osal_nv_read
   \   000035   75....       MOV     ?V0,#aExtendedAddress & 0xff
   \   000038   75....       MOV     ?V1,#(aExtendedAddress >> 8) & 0xff
   \   00003B   78..         MOV     R0,#?V0
   \   00003D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000040   75..08       MOV     ?V0,#0x8
   \   000043   75..00       MOV     ?V1,#0x0
   \   000046   78..         MOV     R0,#?V0
   \   000048   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004B   7C00         MOV     R4,#0x0
   \   00004D   7D00         MOV     R5,#0x0
   \   00004F   7A01         MOV     R2,#0x1
   \   000051   7B00         MOV     R3,#0x0
   \   000053   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000056   7404         MOV     A,#0x4
   \   000058   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005B   E9           MOV     A,R1
   \   00005C   7028         JNZ     ??zmain_ext_addr_0
   \   00005E                ; Setup parameters for call to function osal_memcmp
   \   00005E   A8..         MOV     R0,?XSP + 0
   \   000060   A9..         MOV     R1,?XSP + 1
   \   000062   88..         MOV     ?V0,R0
   \   000064   89..         MOV     ?V1,R1
   \   000066   75..00       MOV     ?V2,#0x0
   \   000069   78..         MOV     R0,#?V0
   \   00006B   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00006E   7C08         MOV     R4,#0x8
   \   000070   7D00         MOV     R5,#0x0
   \   000072   79..         MOV     R1,#aExtendedAddress & 0xff
   \   000074   7A..         MOV     R2,#(aExtendedAddress >> 8) & 0xff
   \   000076   7B00         MOV     R3,#0x0
   \   000078   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   00007B   7403         MOV     A,#0x3
   \   00007D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000080   E9           MOV     A,R1
   \   000081   7003         JNZ     $+5
   \   000083   02....       LJMP    ??zmain_ext_addr_1 & 0xFFFF
    183            {
    184              // Attempt to read the extended address from the location on the lock bits page
    185              // where the programming tools know to reserve it.
    186              HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_IEEE_OSET, aExtendedAddress, Z_EXTADDR_LEN);
   \                     ??zmain_ext_addr_0:
   \   000086                ; Setup parameters for call to function HalFlashRead
   \   000086   75..08       MOV     ?V0,#0x8
   \   000089   75..00       MOV     ?V1,#0x0
   \   00008C   78..         MOV     R0,#?V0
   \   00008E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000091   7C..         MOV     R4,#aExtendedAddress & 0xff
   \   000093   7D..         MOV     R5,#(aExtendedAddress >> 8) & 0xff
   \   000095   7AE8         MOV     R2,#-0x18
   \   000097   7B07         MOV     R3,#0x7
   \   000099   797F         MOV     R1,#0x7f
   \   00009B   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   00009E   7402         MOV     A,#0x2
   \   0000A0   12....       LCALL   ?DEALLOC_XSTACK8
    187          
    188              if (osal_memcmp(aExtendedAddress, nullAddr, Z_EXTADDR_LEN))
   \   0000A3                ; Setup parameters for call to function osal_memcmp
   \   0000A3   A8..         MOV     R0,?XSP + 0
   \   0000A5   A9..         MOV     R1,?XSP + 1
   \   0000A7   88..         MOV     ?V0,R0
   \   0000A9   89..         MOV     ?V1,R1
   \   0000AB   75..00       MOV     ?V2,#0x0
   \   0000AE   78..         MOV     R0,#?V0
   \   0000B0   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000B3   7C08         MOV     R4,#0x8
   \   0000B5   7D00         MOV     R5,#0x0
   \   0000B7   79..         MOV     R1,#aExtendedAddress & 0xff
   \   0000B9   7A..         MOV     R2,#(aExtendedAddress >> 8) & 0xff
   \   0000BB   7B00         MOV     R3,#0x0
   \   0000BD   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0000C0   7403         MOV     A,#0x3
   \   0000C2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C5   E9           MOV     A,R1
   \   0000C6   7003         JNZ     $+5
   \   0000C8   02....       LJMP    ??zmain_ext_addr_2 & 0xFFFF
    189              {
    190                // Attempt to read the extended address from the designated location in the Info Page.
    191                if (!osal_memcmp((uint8 *)(P_INFOPAGE+HAL_INFOP_IEEE_OSET), nullAddr, Z_EXTADDR_LEN))
   \   0000CB                ; Setup parameters for call to function osal_memcmp
   \   0000CB   A8..         MOV     R0,?XSP + 0
   \   0000CD   A9..         MOV     R1,?XSP + 1
   \   0000CF   88..         MOV     ?V0,R0
   \   0000D1   89..         MOV     ?V1,R1
   \   0000D3   75..00       MOV     ?V2,#0x0
   \   0000D6   78..         MOV     R0,#?V0
   \   0000D8   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000DB   7C08         MOV     R4,#0x8
   \   0000DD   7D00         MOV     R5,#0x0
   \   0000DF   790C         MOV     R1,#0xc
   \   0000E1   7A78         MOV     R2,#0x78
   \   0000E3   7B00         MOV     R3,#0x0
   \   0000E5   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0000E8   7403         MOV     A,#0x3
   \   0000EA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000ED   E9           MOV     A,R1
   \   0000EE   7020         JNZ     ??zmain_ext_addr_3
    192                {
    193                  osal_memcpy(aExtendedAddress, (uint8 *)(P_INFOPAGE+HAL_INFOP_IEEE_OSET), Z_EXTADDR_LEN);
   \   0000F0                ; Setup parameters for call to function osal_memcpy
   \   0000F0   75..0C       MOV     ?V0,#0xc
   \   0000F3   75..78       MOV     ?V1,#0x78
   \   0000F6   75..00       MOV     ?V2,#0x0
   \   0000F9   78..         MOV     R0,#?V0
   \   0000FB   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000FE   7C08         MOV     R4,#0x8
   \   000100   7D00         MOV     R5,#0x0
   \   000102   7A..         MOV     R2,#aExtendedAddress & 0xff
   \   000104   7B..         MOV     R3,#(aExtendedAddress >> 8) & 0xff
   \   000106   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000109   7403         MOV     A,#0x3
   \   00010B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00010E   8065         SJMP    ??zmain_ext_addr_2
    194                }
    195                else  // No valid extended address was found.
    196                {
    197                  uint8 idx;
    198                  
    199          #if !defined ( NV_RESTORE )
    200                  writeNV = FALSE;  // Make this a temporary IEEE address
    201          #endif
    202          
    203                  /* Attempt to create a sufficiently random extended address for expediency.
    204                   * Note: this is only valid/legal in a test environment and
    205                   *       must never be used for a commercial product.
    206                   */
    207                  for (idx = 0; idx < (Z_EXTADDR_LEN - 2);)
   \                     ??zmain_ext_addr_3:
   \   000110   7F00         MOV     R7,#0x0
   \   000112   8038         SJMP    ??zmain_ext_addr_4
    208                  {
    209                    uint16 randy = osal_rand();
   \                     ??zmain_ext_addr_5:
   \   000114                ; Setup parameters for call to function osal_rand
   \   000114   12....       LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
   \   000117   8A..         MOV     ?V0,R2
   \   000119   8B..         MOV     ?V1,R3
   \   00011B   A8..         MOV     R0,?V0
   \   00011D   A9..         MOV     R1,?V1
    210                    aExtendedAddress[idx++] = LO_UINT16(randy);
   \   00011F   E8           MOV     A,R0
   \   000120   C0E0         PUSH    A
   \   000122   EF           MOV     A,R7
   \   000123   FA           MOV     R2,A
   \   000124   7B00         MOV     R3,#0x0
   \   000126   74..         MOV     A,#aExtendedAddress & 0xff
   \   000128   2A           ADD     A,R2
   \   000129   F582         MOV     DPL,A
   \   00012B   74..         MOV     A,#(aExtendedAddress >> 8) & 0xff
   \   00012D   3B           ADDC    A,R3
   \   00012E   F583         MOV     DPH,A
   \   000130   D0E0         POP     A
   \   000132   F0           MOVX    @DPTR,A
   \   000133   0F           INC     R7
    211                    aExtendedAddress[idx++] = HI_UINT16(randy);
   \   000134   E4           CLR     A
   \   000135   C9           XCH     A,R1
   \   000136   F8           MOV     R0,A
   \   000137   E8           MOV     A,R0
   \   000138   C0E0         PUSH    A
   \   00013A   EF           MOV     A,R7
   \   00013B   F8           MOV     R0,A
   \   00013C   7900         MOV     R1,#0x0
   \   00013E   74..         MOV     A,#aExtendedAddress & 0xff
   \   000140   28           ADD     A,R0
   \   000141   F582         MOV     DPL,A
   \   000143   74..         MOV     A,#(aExtendedAddress >> 8) & 0xff
   \   000145   39           ADDC    A,R1
   \   000146   F583         MOV     DPH,A
   \   000148   D0E0         POP     A
   \   00014A   F0           MOVX    @DPTR,A
   \   00014B   0F           INC     R7
    212                  }
   \                     ??zmain_ext_addr_4:
   \   00014C   EF           MOV     A,R7
   \   00014D   C3           CLR     C
   \   00014E   9406         SUBB    A,#0x6
   \   000150   40C2         JC      ??zmain_ext_addr_5
    213                  // Next-to-MSB identifies ZigBee devicetype.
    214          #if ZG_BUILD_COORDINATOR_TYPE && !ZG_BUILD_JOINING_TYPE
    215                  aExtendedAddress[idx++] = 0x10;
    216          #elif ZG_BUILD_RTRONLY_TYPE
    217                  aExtendedAddress[idx++] = 0x20;
    218          #else
    219                  aExtendedAddress[idx++] = 0x30;
   \   000152   EF           MOV     A,R7
   \   000153   F8           MOV     R0,A
   \   000154   7900         MOV     R1,#0x0
   \   000156   74..         MOV     A,#aExtendedAddress & 0xff
   \   000158   28           ADD     A,R0
   \   000159   F582         MOV     DPL,A
   \   00015B   74..         MOV     A,#(aExtendedAddress >> 8) & 0xff
   \   00015D   39           ADDC    A,R1
   \   00015E   F583         MOV     DPH,A
   \   000160   7430         MOV     A,#0x30
   \   000162   F0           MOVX    @DPTR,A
   \   000163   0F           INC     R7
    220          #endif
    221                  // MSB has historical signficance.
    222                  aExtendedAddress[idx] = 0xF8;
   \   000164   EF           MOV     A,R7
   \   000165   F8           MOV     R0,A
   \   000166   7900         MOV     R1,#0x0
   \   000168   74..         MOV     A,#aExtendedAddress & 0xff
   \   00016A   28           ADD     A,R0
   \   00016B   F582         MOV     DPL,A
   \   00016D   74..         MOV     A,#(aExtendedAddress >> 8) & 0xff
   \   00016F   39           ADDC    A,R1
   \   000170   F583         MOV     DPH,A
   \   000172   74F8         MOV     A,#-0x8
   \   000174   F0           MOVX    @DPTR,A
    223                }
    224              }
    225          
    226              if (writeNV)
   \                     ??zmain_ext_addr_2:
   \   000175   EE           MOV     A,R6
   \   000176   6027         JZ      ??zmain_ext_addr_1
    227              {
    228                (void)osal_nv_write(ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, aExtendedAddress);
   \   000178                ; Setup parameters for call to function osal_nv_write
   \   000178   75....       MOV     ?V0,#aExtendedAddress & 0xff
   \   00017B   75....       MOV     ?V1,#(aExtendedAddress >> 8) & 0xff
   \   00017E   78..         MOV     R0,#?V0
   \   000180   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000183   75..08       MOV     ?V0,#0x8
   \   000186   75..00       MOV     ?V1,#0x0
   \   000189   78..         MOV     R0,#?V0
   \   00018B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00018E   7C00         MOV     R4,#0x0
   \   000190   7D00         MOV     R5,#0x0
   \   000192   7A01         MOV     R2,#0x1
   \   000194   7B00         MOV     R3,#0x0
   \   000196   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000199   7404         MOV     A,#0x4
   \   00019B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00019E   E9           MOV     A,R1
    229              }
    230            }
    231          
    232            // Set the MAC PIB extended address according to results from above.
    233            (void)ZMacSetReq(MAC_EXTENDED_ADDRESS, aExtendedAddress);
   \                     ??zmain_ext_addr_1:
   \   00019F                ; Setup parameters for call to function ZMacSetReq
   \   00019F   7A..         MOV     R2,#aExtendedAddress & 0xff
   \   0001A1   7B..         MOV     R3,#(aExtendedAddress >> 8) & 0xff
   \   0001A3   79E2         MOV     R1,#-0x1e
   \   0001A5   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   \   0001A8   E9           MOV     A,R1
   \   0001A9   F8           MOV     R0,A
    234          }
   \   0001AA   7408         MOV     A,#0x8
   \   0001AC   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001AF   7F03         MOV     R7,#0x3
   \   0001B1   02....       LJMP    ?BANKED_LEAVE_XDATA
    235          
    236          #if defined ZCL_KEY_ESTABLISH
    237          /**************************************************************************************************
    238           * @fn          zmain_cert_init
    239           *
    240           * @brief       Initialize the Certicom certificate information.
    241           *
    242           * input parameters
    243           *
    244           * None.
    245           *
    246           * output parameters
    247           *
    248           * None.
    249           *
    250           * @return      None.
    251           **************************************************************************************************
    252           */
    253          static void zmain_cert_init(void)
    254          {
    255            uint8 certData[ZCL_KE_IMPLICIT_CERTIFICATE_LEN];
    256            uint8 nullData[ZCL_KE_IMPLICIT_CERTIFICATE_LEN] = {
    257              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    258              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    259              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    260              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    261              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    262              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
    263            };
    264          
    265            (void)osal_nv_item_init(ZCD_NV_IMPLICIT_CERTIFICATE, ZCL_KE_IMPLICIT_CERTIFICATE_LEN, NULL);
    266            (void)osal_nv_item_init(ZCD_NV_DEVICE_PRIVATE_KEY, ZCL_KE_DEVICE_PRIVATE_KEY_LEN, NULL);
    267          
    268            // First check whether non-null certificate data exists in the OSAL NV. To save on code space,
    269            // just use the ZCD_NV_CA_PUBLIC_KEY as the bellwether for all three.
    270            if ((SUCCESS != osal_nv_item_init(ZCD_NV_CA_PUBLIC_KEY, ZCL_KE_CA_PUBLIC_KEY_LEN, NULL))    ||
    271                (SUCCESS != osal_nv_read(ZCD_NV_CA_PUBLIC_KEY, 0, ZCL_KE_CA_PUBLIC_KEY_LEN, certData))  ||
    272                (osal_memcmp(certData, nullData, ZCL_KE_CA_PUBLIC_KEY_LEN)))
    273            {
    274              // Attempt to read the certificate data from its corresponding location on the lock bits page.
    275              HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_CA_PUBLIC_KEY_OSET, certData,
    276                                                   ZCL_KE_CA_PUBLIC_KEY_LEN);
    277              // If the certificate data is not NULL, use it to update the corresponding NV items.
    278              if (!osal_memcmp(certData, nullData, ZCL_KE_CA_PUBLIC_KEY_LEN))
    279              {
    280                (void)osal_nv_write(ZCD_NV_CA_PUBLIC_KEY, 0, ZCL_KE_CA_PUBLIC_KEY_LEN, certData);
    281                HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_IMPLICIT_CERT_OSET, certData,
    282                                                     ZCL_KE_IMPLICIT_CERTIFICATE_LEN);
    283                (void)osal_nv_write(ZCD_NV_IMPLICIT_CERTIFICATE, 0,
    284                                    ZCL_KE_IMPLICIT_CERTIFICATE_LEN, certData);
    285                HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_DEV_PRIVATE_KEY_OSET, certData,
    286                                                  ZCL_KE_DEVICE_PRIVATE_KEY_LEN);
    287                (void)osal_nv_write(ZCD_NV_DEVICE_PRIVATE_KEY, 0, ZCL_KE_DEVICE_PRIVATE_KEY_LEN, certData);
    288              }
    289            }
    290          }
    291          #endif
    292          
    293          /**************************************************************************************************
    294           * @fn          zmain_dev_info
    295           *
    296           * @brief       This displays the IEEE (MSB to LSB) on the LCD.
    297           *
    298           * input parameters
    299           *
    300           * None.
    301           *
    302           * output parameters
    303           *
    304           * None.
    305           *
    306           * @return      None.
    307           **************************************************************************************************
    308           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    309          static void zmain_dev_info(void)
   \                     zmain_dev_info:
    310          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    311          #ifdef LCD_SUPPORTED
    312            uint8 i;
    313            uint8 *xad;
    314            uint8 lcd_buf[Z_EXTADDR_LEN*2+1];
    315          
    316            // Display the extended address.
    317            xad = aExtendedAddress + Z_EXTADDR_LEN - 1;
    318          
    319            for (i = 0; i < Z_EXTADDR_LEN*2; xad--)
    320            {
    321              uint8 ch;
    322              ch = (*xad >> 4) & 0x0F;
    323              lcd_buf[i++] = ch + (( ch < 10 ) ? '0' : '7');
    324              ch = *xad & 0x0F;
    325              lcd_buf[i++] = ch + (( ch < 10 ) ? '0' : '7');
    326            }
    327            lcd_buf[Z_EXTADDR_LEN*2] = '\0';
    328            HalLcdWriteString( "IEEE: ", HAL_LCD_LINE_1 );
    329            HalLcdWriteString( (char*)lcd_buf, HAL_LCD_LINE_2 );
    330          #endif
    331          }
   \   000000   02....       LJMP    ?BRET

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??main::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    main

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zmain_vdd_check::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zmain_vdd_check

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zmain_ext_addr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zmain_ext_addr

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zmain_dev_info::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zmain_dev_info

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
    332          
    333          #ifdef LCD_SUPPORTED
    334          /*********************************************************************
    335           * @fn      zmain_lcd_init
    336           * @brief   Initialize LCD at start up.
    337           * @return  none
    338           *********************************************************************/
    339          static void zmain_lcd_init ( void )
    340          {
    341          #ifdef SERIAL_DEBUG_SUPPORTED
    342            {
    343              HalLcdWriteString( "TexasInstruments", HAL_LCD_LINE_1 );
    344          
    345          #if defined( MT_MAC_FUNC )
    346          #if defined( ZDO_COORDINATOR )
    347                HalLcdWriteString( "MAC-MT Coord", HAL_LCD_LINE_2 );
    348          #else
    349                HalLcdWriteString( "MAC-MT Device", HAL_LCD_LINE_2 );
    350          #endif // ZDO
    351          #elif defined( MT_NWK_FUNC )
    352          #if defined( ZDO_COORDINATOR )
    353                HalLcdWriteString( "NWK Coordinator", HAL_LCD_LINE_2 );
    354          #else
    355                HalLcdWriteString( "NWK Device", HAL_LCD_LINE_2 );
    356          #endif // ZDO
    357          #endif // MT_FUNC
    358            }
    359          #endif // SERIAL_DEBUG_SUPPORTED
    360          }
    361          #endif
    362          
    363          /*********************************************************************
    364          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   main
        0      0   -> HalDriverInit
        0      0   -> InitBoard
        0      0   -> ZMacInit
        0      0   -> osal_init_system
        0      0   -> osal_int_disable
        0      0   -> osal_int_enable
        0      0   -> osal_nv_init
        0      0   -> osal_start_system
        0      0   -> zgInit
        0      0   -> zmain_dev_info
        0      0   -> zmain_ext_addr
        0      0   -> zmain_vdd_check
      0      0   zmain_dev_info
      1     23   zmain_ext_addr
        0     21   -> HalFlashRead
        0     19   -> ZMacSetReq
        0     22   -> osal_memcmp
        0     22   -> osal_memcpy
        0     21   -> osal_nv_item_init
        0     23   -> osal_nv_read
        0     23   -> osal_nv_write
        0     19   -> osal_rand
      0      9   zmain_vdd_check
        0      9   -> HalAdcCheckVdd


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Constant {255, 255, 255, 255, 255, 255, 255,
       1  CLKCONCMD
       1  CLKCONSTA
       1  P0INP
       1  P1DIR
       1  SLEEPCMD
       1  SLEEPSTA
       1  _A_P1
     128  main
       6  main::?relay
       3  zmain_dev_info
       6  zmain_dev_info::?relay
     436  zmain_ext_addr
       6  zmain_ext_addr::?relay
      24  zmain_vdd_check
       6  zmain_vdd_check::?relay

 
 591 bytes in segment BANKED_CODE
  24 bytes in segment BANK_RELAYS
   7 bytes in segment SFR_AN
   8 bytes in segment XDATA_ROM_C
 
 615 bytes of CODE  memory
   8 bytes of CONST memory
   0 bytes of DATA  memory (+ 7 bytes shared)

Errors: none
Warnings: none

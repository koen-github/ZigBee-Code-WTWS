###############################################################################
#
# IAR C/C++ Compiler V9.20.1.2476 for 8051                22/Feb/2017  14:31:39
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\koen\ZigBee-Code-WTWS\Components\hal\target\CC2530EB\hal_flash.c
#    Command line       =  
#        -f
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00002000 -DZDAPP_CONFIG_PAN_ID=0xABCD
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={'H', 'O', 'G', 'E', 'S',
#        'C', 'H', 'O', 'O', 'L', 'U', 'T', 'R', 'E', 'C', 'H'}"
#        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440
#        C:\Users\koen\ZigBee-Code-WTWS\Components\hal\target\CC2530EB\hal_flash.c
#        -D HOLD_AUTO_START -D BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D
#        NV_RESTORE -D HAL_UART=TRUE -lC
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\
#        -lA
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\
#        --diag_suppress Pe001,Pa010,Pe1665 -o
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\Obj\
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\Source\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ol --require_prototypes
#    List file          =  
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\hal_flash.lst
#    Object file        =  
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\Obj\hal_flash.r51
#
###############################################################################

C:\Users\koen\ZigBee-Code-WTWS\Components\hal\target\CC2530EB\hal_flash.c
      1          /**************************************************************************************************
      2            Filename:       hal_flash.c
      3            Revised:        $Date: 2010-10-07 02:19:52 -0700 (Thu, 07 Oct 2010) $
      4            Revision:       $Revision: 24049 $
      5          
      6            Description: This file contains the interface to the H/W Flash driver.
      7          
      8          
      9            Copyright 2006-2010 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /* ------------------------------------------------------------------------------------------------
     41           *                                          Includes
     42           * ------------------------------------------------------------------------------------------------
     43           */
     44          
     45          #include "hal_board_cfg.h"

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc7
   \   unsigned char volatile __sfr MEMCTR
   \                     MEMCTR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xd1
   \   unsigned char volatile __sfr DMAIRQ
   \                     DMAIRQ:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xd6
   \   unsigned char volatile __sfr DMAARM
   \                     DMAARM:
   \   000000                DS 1
     46          #include "hal_dma.h"
     47          #include "hal_flash.h"
     48          #include "hal_mcu.h"
     49          #include "hal_types.h"
     50          
     51          /**************************************************************************************************
     52           * @fn          HalFlashRead
     53           *
     54           * @brief       This function reads 'cnt' bytes from the internal flash.
     55           *
     56           * input parameters
     57           *
     58           * @param       pg - A valid flash page number.
     59           * @param       offset - A valid offset into the page.
     60           * @param       buf - A valid buffer space at least as big as the 'cnt' parameter.
     61           * @param       cnt - A valid number of bytes to read.
     62           *
     63           * output parameters
     64           *
     65           * None.
     66           *
     67           * @return      None.
     68           **************************************************************************************************
     69           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     70          void HalFlashRead(uint8 pg, uint16 offset, uint8 *buf, uint16 cnt)
   \                     HalFlashRead:
     71          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
     72            // Calculate the offset into the containing flash bank as it gets mapped into XDATA.
     73            uint8 *pData = (uint8 *)(offset + HAL_FLASH_PAGE_MAP) +
     74                           ((pg % HAL_FLASH_PAGE_PER_BANK) * HAL_FLASH_PAGE_SIZE);
   \   000007   E5..         MOV     A,?V0
   \   000009   75F010       MOV     B,#0x10
   \   00000C   84           DIV     AB
   \   00000D   A8F0         MOV     R0,B
   \   00000F   7900         MOV     R1,#0x0
   \   000011   E8           MOV     A,R0
   \   000012   75F000       MOV     B,#0x0
   \   000015   A4           MUL     AB
   \   000016   C8           XCH     A,R0
   \   000017   AEF0         MOV     R6,B
   \   000019   75F008       MOV     B,#0x8
   \   00001C   A4           MUL     AB
   \   00001D   2E           ADD     A,R6
   \   00001E   FE           MOV     R6,A
   \   00001F   75F000       MOV     B,#0x0
   \   000022   E9           MOV     A,R1
   \   000023   A4           MUL     AB
   \   000024   2E           ADD     A,R6
   \   000025   F9           MOV     R1,A
   \   000026   EA           MOV     A,R2
   \   000027   2400         ADD     A,#0x0
   \   000029   FA           MOV     R2,A
   \   00002A   EB           MOV     A,R3
   \   00002B   3480         ADDC    A,#-0x80
   \   00002D   FB           MOV     R3,A
   \   00002E   EA           MOV     A,R2
   \   00002F   28           ADD     A,R0
   \   000030   F8           MOV     R0,A
   \   000031   EB           MOV     A,R3
   \   000032   39           ADDC    A,R1
   \   000033   F9           MOV     R1,A
     75            uint8 memctr = MEMCTR;  // Save to restore.
   \   000034   85C7..       MOV     ?V2,0xc7+0x0
     76          
     77          #if (!defined HAL_OAD_BOOT_CODE) && (!defined HAL_OTA_BOOT_CODE)
     78            halIntState_t is;
     79          #endif
     80          
     81            pg /= HAL_FLASH_PAGE_PER_BANK;  // Calculate the flash bank from the flash page.
   \   000037   75F010       MOV     B,#0x10
   \   00003A   E5..         MOV     A,?V0
   \   00003C   84           DIV     AB
   \   00003D   F5..         MOV     ?V0,A
     82          
     83          #if (!defined HAL_OAD_BOOT_CODE) && (!defined HAL_OTA_BOOT_CODE)
     84            HAL_ENTER_CRITICAL_SECTION(is);
   \   00003F   A2AF         MOV     C,0xa8.7
   \   000041   E4           CLR     A
   \   000042   33           RLC     A
   \   000043   F5..         MOV     ?V1,A
   \   000045   C2AF         CLR     0xa8.7
     85          #endif
     86          
     87            // Calculate and map the containing flash bank into XDATA.
     88            MEMCTR = (MEMCTR & 0xF8) | pg;
   \   000047   E5C7         MOV     A,0xc7
   \   000049   54F8         ANL     A,#0xf8
   \   00004B   45..         ORL     A,?V0
   \   00004D   F5C7         MOV     0xc7,A
   \   00004F   740B         MOV     A,#0xb
   \   000051   12....       LCALL   ?XSTACK_DISP0_8
   \   000054   E0           MOVX    A,@DPTR
   \   000055   FA           MOV     R2,A
   \   000056   A3           INC     DPTR
   \   000057   E0           MOVX    A,@DPTR
   \   000058   FB           MOV     R3,A
   \   000059   8020         SJMP    ??HalFlashRead_0
     89          
     90            while (cnt--)
     91            {
     92              *buf++ = *pData++;
   \                     ??HalFlashRead_1:
   \   00005B   8882         MOV     DPL,R0
   \   00005D   8983         MOV     DPH,R1
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   C0E0         PUSH    A
   \   000062   8C82         MOV     DPL,R4
   \   000064   8D83         MOV     DPH,R5
   \   000066   D0E0         POP     A
   \   000068   F0           MOVX    @DPTR,A
   \   000069   8882         MOV     DPL,R0
   \   00006B   8983         MOV     DPH,R1
   \   00006D   A3           INC     DPTR
   \   00006E   A882         MOV     R0,DPL
   \   000070   A983         MOV     R1,DPH
   \   000072   8C82         MOV     DPL,R4
   \   000074   8D83         MOV     DPH,R5
   \   000076   A3           INC     DPTR
   \   000077   AC82         MOV     R4,DPL
   \   000079   AD83         MOV     R5,DPH
     93            }
   \                     ??HalFlashRead_0:
   \   00007B   EA           MOV     A,R2
   \   00007C   FE           MOV     R6,A
   \   00007D   EB           MOV     A,R3
   \   00007E   FF           MOV     R7,A
   \   00007F   EE           MOV     A,R6
   \   000080   24FF         ADD     A,#-0x1
   \   000082   FA           MOV     R2,A
   \   000083   EF           MOV     A,R7
   \   000084   34FF         ADDC    A,#-0x1
   \   000086   FB           MOV     R3,A
   \   000087   EE           MOV     A,R6
   \   000088   4F           ORL     A,R7
   \   000089   70D0         JNZ     ??HalFlashRead_1
     94          
     95            MEMCTR = memctr;
   \   00008B   85..C7       MOV     0xc7,?V2
     96          
     97          #if (!defined HAL_OAD_BOOT_CODE) && (!defined HAL_OTA_BOOT_CODE)
     98            HAL_EXIT_CRITICAL_SECTION(is);
   \   00008E   A8..         MOV     R0,?V1
   \   000090   E5..         MOV     A,?V1
   \   000092   A2E0         MOV     C,0xE0 /* A   */.0
   \   000094   92AF         MOV     0xa8.7,C
     99          #endif
    100          }
   \   000096   7F03         MOV     R7,#0x3
   \   000098   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   00009B                REQUIRE MEMCTR
   \   00009B                REQUIRE _A_IEN0
    101          
    102          /**************************************************************************************************
    103           * @fn          HalFlashWrite
    104           *
    105           * @brief       This function writes 'cnt' bytes to the internal flash.
    106           *
    107           * input parameters
    108           *
    109           * @param       addr - Valid HAL flash write address: actual addr / 4 and quad-aligned.
    110           * @param       buf - Valid buffer space at least as big as 'cnt' X 4.
    111           * @param       cnt - Number of 4-byte blocks to write.
    112           *
    113           * output parameters
    114           *
    115           * None.
    116           *
    117           * @return      None.
    118           **************************************************************************************************
    119           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    120          void HalFlashWrite(uint16 addr, uint8 *buf, uint16 cnt)
   \                     HalFlashWrite:
    121          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    122          #if (defined HAL_DMA) && (HAL_DMA == TRUE)
    123            halDMADesc_t *ch = HAL_NV_DMA_GET_DESC();
   \   000005   7E..         MOV     R6,#dmaCh0 & 0xff
   \   000007   7F..         MOV     R7,#(dmaCh0 >> 8) & 0xff
    124          
    125            HAL_DMA_SET_SOURCE(ch, buf);
   \   000009   EC           MOV     A,R4
   \   00000A   F8           MOV     R0,A
   \   00000B   ED           MOV     A,R5
   \   00000C   F9           MOV     R1,A
   \   00000D   E4           CLR     A
   \   00000E   C9           XCH     A,R1
   \   00000F   F8           MOV     R0,A
   \   000010   E8           MOV     A,R0
   \   000011   C0E0         PUSH    A
   \   000013   8E82         MOV     DPL,R6
   \   000015   8F83         MOV     DPH,R7
   \   000017   D0E0         POP     A
   \   000019   F0           MOVX    @DPTR,A
   \   00001A   EC           MOV     A,R4
   \   00001B   C0E0         PUSH    A
   \   00001D   8E82         MOV     DPL,R6
   \   00001F   8F83         MOV     DPH,R7
   \   000021   A3           INC     DPTR
   \   000022   D0E0         POP     A
   \   000024   F0           MOVX    @DPTR,A
    126            HAL_DMA_SET_DEST(ch, &FWDATA);
   \   000025   8E82         MOV     DPL,R6
   \   000027   8F83         MOV     DPH,R7
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   7462         MOV     A,#0x62
   \   00002D   F0           MOVX    @DPTR,A
   \   00002E   8E82         MOV     DPL,R6
   \   000030   8F83         MOV     DPH,R7
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   7473         MOV     A,#0x73
   \   000037   F0           MOVX    @DPTR,A
    127            HAL_DMA_SET_VLEN(ch, HAL_DMA_VLEN_USE_LEN);
   \   000038   8E82         MOV     DPL,R6
   \   00003A   8F83         MOV     DPH,R7
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   E0           MOVX    A,@DPTR
   \   000041   541F         ANL     A,#0x1f
   \   000043   F0           MOVX    @DPTR,A
   \   000044   8E82         MOV     DPL,R6
   \   000046   8F83         MOV     DPH,R7
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   C0E0         PUSH    A
   \   00004F   8E82         MOV     DPL,R6
   \   000051   8F83         MOV     DPH,R7
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   A3           INC     DPTR
   \   000056   A3           INC     DPTR
   \   000057   D0E0         POP     A
   \   000059   F0           MOVX    @DPTR,A
   \   00005A   7409         MOV     A,#0x9
   \   00005C   12....       LCALL   ?XSTACK_DISP0_8
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   F8           MOV     R0,A
   \   000061   A3           INC     DPTR
   \   000062   E0           MOVX    A,@DPTR
   \   000063   F9           MOV     R1,A
    128            HAL_DMA_SET_LEN(ch, (cnt * HAL_FLASH_WORD_SIZE));
   \   000064   75F004       MOV     B,#0x4
   \   000067   E8           MOV     A,R0
   \   000068   A4           MUL     AB
   \   000069   C0E0         PUSH    A
   \   00006B   8E82         MOV     DPL,R6
   \   00006D   8F83         MOV     DPH,R7
   \   00006F   A3           INC     DPTR
   \   000070   A3           INC     DPTR
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   D0E0         POP     A
   \   000076   F0           MOVX    @DPTR,A
   \   000077   8E82         MOV     DPL,R6
   \   000079   8F83         MOV     DPH,R7
   \   00007B   A3           INC     DPTR
   \   00007C   A3           INC     DPTR
   \   00007D   A3           INC     DPTR
   \   00007E   A3           INC     DPTR
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   54E0         ANL     A,#0xe0
   \   000082   F0           MOVX    @DPTR,A
   \   000083   E8           MOV     A,R0
   \   000084   75F004       MOV     B,#0x4
   \   000087   A4           MUL     AB
   \   000088   C8           XCH     A,R0
   \   000089   ACF0         MOV     R4,B
   \   00008B   75F000       MOV     B,#0x0
   \   00008E   A4           MUL     AB
   \   00008F   2C           ADD     A,R4
   \   000090   FC           MOV     R4,A
   \   000091   75F004       MOV     B,#0x4
   \   000094   E9           MOV     A,R1
   \   000095   A4           MUL     AB
   \   000096   2C           ADD     A,R4
   \   000097   F9           MOV     R1,A
   \   000098   E4           CLR     A
   \   000099   C9           XCH     A,R1
   \   00009A   F8           MOV     R0,A
   \   00009B   8E82         MOV     DPL,R6
   \   00009D   8F83         MOV     DPH,R7
   \   00009F   A3           INC     DPTR
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   A3           INC     DPTR
   \   0000A3   E0           MOVX    A,@DPTR
   \   0000A4   48           ORL     A,R0
   \   0000A5   F0           MOVX    @DPTR,A
    129            HAL_DMA_SET_WORD_SIZE(ch, HAL_DMA_WORDSIZE_BYTE);
   \   0000A6   8E82         MOV     DPL,R6
   \   0000A8   8F83         MOV     DPH,R7
   \   0000AA   A3           INC     DPTR
   \   0000AB   A3           INC     DPTR
   \   0000AC   A3           INC     DPTR
   \   0000AD   A3           INC     DPTR
   \   0000AE   A3           INC     DPTR
   \   0000AF   A3           INC     DPTR
   \   0000B0   E0           MOVX    A,@DPTR
   \   0000B1   C2E7         CLR     0xE0 /* A   */.7
   \   0000B3   F0           MOVX    @DPTR,A
   \   0000B4   8E82         MOV     DPL,R6
   \   0000B6   8F83         MOV     DPH,R7
   \   0000B8   A3           INC     DPTR
   \   0000B9   A3           INC     DPTR
   \   0000BA   A3           INC     DPTR
   \   0000BB   A3           INC     DPTR
   \   0000BC   A3           INC     DPTR
   \   0000BD   A3           INC     DPTR
   \   0000BE   E0           MOVX    A,@DPTR
   \   0000BF   C0E0         PUSH    A
   \   0000C1   8E82         MOV     DPL,R6
   \   0000C3   8F83         MOV     DPH,R7
   \   0000C5   A3           INC     DPTR
   \   0000C6   A3           INC     DPTR
   \   0000C7   A3           INC     DPTR
   \   0000C8   A3           INC     DPTR
   \   0000C9   A3           INC     DPTR
   \   0000CA   A3           INC     DPTR
   \   0000CB   D0E0         POP     A
   \   0000CD   F0           MOVX    @DPTR,A
    130            HAL_DMA_SET_TRIG_MODE(ch, HAL_DMA_TMODE_SINGLE);
   \   0000CE   8E82         MOV     DPL,R6
   \   0000D0   8F83         MOV     DPH,R7
   \   0000D2   A3           INC     DPTR
   \   0000D3   A3           INC     DPTR
   \   0000D4   A3           INC     DPTR
   \   0000D5   A3           INC     DPTR
   \   0000D6   A3           INC     DPTR
   \   0000D7   A3           INC     DPTR
   \   0000D8   E0           MOVX    A,@DPTR
   \   0000D9   549F         ANL     A,#0x9f
   \   0000DB   F0           MOVX    @DPTR,A
   \   0000DC   8E82         MOV     DPL,R6
   \   0000DE   8F83         MOV     DPH,R7
   \   0000E0   A3           INC     DPTR
   \   0000E1   A3           INC     DPTR
   \   0000E2   A3           INC     DPTR
   \   0000E3   A3           INC     DPTR
   \   0000E4   A3           INC     DPTR
   \   0000E5   A3           INC     DPTR
   \   0000E6   E0           MOVX    A,@DPTR
   \   0000E7   C0E0         PUSH    A
   \   0000E9   8E82         MOV     DPL,R6
   \   0000EB   8F83         MOV     DPH,R7
   \   0000ED   A3           INC     DPTR
   \   0000EE   A3           INC     DPTR
   \   0000EF   A3           INC     DPTR
   \   0000F0   A3           INC     DPTR
   \   0000F1   A3           INC     DPTR
   \   0000F2   A3           INC     DPTR
   \   0000F3   D0E0         POP     A
   \   0000F5   F0           MOVX    @DPTR,A
    131            HAL_DMA_SET_TRIG_SRC(ch, HAL_DMA_TRIG_FLASH);
   \   0000F6   8E82         MOV     DPL,R6
   \   0000F8   8F83         MOV     DPH,R7
   \   0000FA   A3           INC     DPTR
   \   0000FB   A3           INC     DPTR
   \   0000FC   A3           INC     DPTR
   \   0000FD   A3           INC     DPTR
   \   0000FE   A3           INC     DPTR
   \   0000FF   A3           INC     DPTR
   \   000100   E0           MOVX    A,@DPTR
   \   000101   54E0         ANL     A,#0xe0
   \   000103   F0           MOVX    @DPTR,A
   \   000104   8E82         MOV     DPL,R6
   \   000106   8F83         MOV     DPH,R7
   \   000108   A3           INC     DPTR
   \   000109   A3           INC     DPTR
   \   00010A   A3           INC     DPTR
   \   00010B   A3           INC     DPTR
   \   00010C   A3           INC     DPTR
   \   00010D   A3           INC     DPTR
   \   00010E   E0           MOVX    A,@DPTR
   \   00010F   4412         ORL     A,#0x12
   \   000111   F0           MOVX    @DPTR,A
    132            HAL_DMA_SET_SRC_INC(ch, HAL_DMA_SRCINC_1);
   \   000112   8E82         MOV     DPL,R6
   \   000114   8F83         MOV     DPH,R7
   \   000116   A3           INC     DPTR
   \   000117   A3           INC     DPTR
   \   000118   A3           INC     DPTR
   \   000119   A3           INC     DPTR
   \   00011A   A3           INC     DPTR
   \   00011B   A3           INC     DPTR
   \   00011C   A3           INC     DPTR
   \   00011D   E0           MOVX    A,@DPTR
   \   00011E   543F         ANL     A,#0x3f
   \   000120   F0           MOVX    @DPTR,A
   \   000121   8E82         MOV     DPL,R6
   \   000123   8F83         MOV     DPH,R7
   \   000125   A3           INC     DPTR
   \   000126   A3           INC     DPTR
   \   000127   A3           INC     DPTR
   \   000128   A3           INC     DPTR
   \   000129   A3           INC     DPTR
   \   00012A   A3           INC     DPTR
   \   00012B   A3           INC     DPTR
   \   00012C   E0           MOVX    A,@DPTR
   \   00012D   D2E6         SETB    0xE0 /* A   */.6
   \   00012F   F0           MOVX    @DPTR,A
    133            HAL_DMA_SET_DST_INC(ch, HAL_DMA_DSTINC_0);
   \   000130   8E82         MOV     DPL,R6
   \   000132   8F83         MOV     DPH,R7
   \   000134   A3           INC     DPTR
   \   000135   A3           INC     DPTR
   \   000136   A3           INC     DPTR
   \   000137   A3           INC     DPTR
   \   000138   A3           INC     DPTR
   \   000139   A3           INC     DPTR
   \   00013A   A3           INC     DPTR
   \   00013B   E0           MOVX    A,@DPTR
   \   00013C   54CF         ANL     A,#0xcf
   \   00013E   F0           MOVX    @DPTR,A
   \   00013F   8E82         MOV     DPL,R6
   \   000141   8F83         MOV     DPH,R7
   \   000143   A3           INC     DPTR
   \   000144   A3           INC     DPTR
   \   000145   A3           INC     DPTR
   \   000146   A3           INC     DPTR
   \   000147   A3           INC     DPTR
   \   000148   A3           INC     DPTR
   \   000149   A3           INC     DPTR
   \   00014A   E0           MOVX    A,@DPTR
   \   00014B   C0E0         PUSH    A
   \   00014D   8E82         MOV     DPL,R6
   \   00014F   8F83         MOV     DPH,R7
   \   000151   A3           INC     DPTR
   \   000152   A3           INC     DPTR
   \   000153   A3           INC     DPTR
   \   000154   A3           INC     DPTR
   \   000155   A3           INC     DPTR
   \   000156   A3           INC     DPTR
   \   000157   A3           INC     DPTR
   \   000158   D0E0         POP     A
   \   00015A   F0           MOVX    @DPTR,A
    134            // The DMA is to be polled and shall not issue an IRQ upon completion.
    135            HAL_DMA_SET_IRQ(ch, HAL_DMA_IRQMASK_DISABLE);
   \   00015B   8E82         MOV     DPL,R6
   \   00015D   8F83         MOV     DPH,R7
   \   00015F   A3           INC     DPTR
   \   000160   A3           INC     DPTR
   \   000161   A3           INC     DPTR
   \   000162   A3           INC     DPTR
   \   000163   A3           INC     DPTR
   \   000164   A3           INC     DPTR
   \   000165   A3           INC     DPTR
   \   000166   E0           MOVX    A,@DPTR
   \   000167   C2E3         CLR     0xE0 /* A   */.3
   \   000169   F0           MOVX    @DPTR,A
   \   00016A   8E82         MOV     DPL,R6
   \   00016C   8F83         MOV     DPH,R7
   \   00016E   A3           INC     DPTR
   \   00016F   A3           INC     DPTR
   \   000170   A3           INC     DPTR
   \   000171   A3           INC     DPTR
   \   000172   A3           INC     DPTR
   \   000173   A3           INC     DPTR
   \   000174   A3           INC     DPTR
   \   000175   E0           MOVX    A,@DPTR
   \   000176   C0E0         PUSH    A
   \   000178   8E82         MOV     DPL,R6
   \   00017A   8F83         MOV     DPH,R7
   \   00017C   A3           INC     DPTR
   \   00017D   A3           INC     DPTR
   \   00017E   A3           INC     DPTR
   \   00017F   A3           INC     DPTR
   \   000180   A3           INC     DPTR
   \   000181   A3           INC     DPTR
   \   000182   A3           INC     DPTR
   \   000183   D0E0         POP     A
   \   000185   F0           MOVX    @DPTR,A
    136            HAL_DMA_SET_M8( ch, HAL_DMA_M8_USE_8_BITS);
   \   000186   8E82         MOV     DPL,R6
   \   000188   8F83         MOV     DPH,R7
   \   00018A   A3           INC     DPTR
   \   00018B   A3           INC     DPTR
   \   00018C   A3           INC     DPTR
   \   00018D   A3           INC     DPTR
   \   00018E   A3           INC     DPTR
   \   00018F   A3           INC     DPTR
   \   000190   A3           INC     DPTR
   \   000191   E0           MOVX    A,@DPTR
   \   000192   C2E2         CLR     0xE0 /* A   */.2
   \   000194   F0           MOVX    @DPTR,A
   \   000195   8E82         MOV     DPL,R6
   \   000197   8F83         MOV     DPH,R7
   \   000199   A3           INC     DPTR
   \   00019A   A3           INC     DPTR
   \   00019B   A3           INC     DPTR
   \   00019C   A3           INC     DPTR
   \   00019D   A3           INC     DPTR
   \   00019E   A3           INC     DPTR
   \   00019F   A3           INC     DPTR
   \   0001A0   E0           MOVX    A,@DPTR
   \   0001A1   C0E0         PUSH    A
   \   0001A3   8E82         MOV     DPL,R6
   \   0001A5   8F83         MOV     DPH,R7
   \   0001A7   A3           INC     DPTR
   \   0001A8   A3           INC     DPTR
   \   0001A9   A3           INC     DPTR
   \   0001AA   A3           INC     DPTR
   \   0001AB   A3           INC     DPTR
   \   0001AC   A3           INC     DPTR
   \   0001AD   A3           INC     DPTR
   \   0001AE   D0E0         POP     A
   \   0001B0   F0           MOVX    @DPTR,A
    137            HAL_DMA_SET_PRIORITY(ch, HAL_DMA_PRI_HIGH);
   \   0001B1   8E82         MOV     DPL,R6
   \   0001B3   8F83         MOV     DPH,R7
   \   0001B5   A3           INC     DPTR
   \   0001B6   A3           INC     DPTR
   \   0001B7   A3           INC     DPTR
   \   0001B8   A3           INC     DPTR
   \   0001B9   A3           INC     DPTR
   \   0001BA   A3           INC     DPTR
   \   0001BB   A3           INC     DPTR
   \   0001BC   E0           MOVX    A,@DPTR
   \   0001BD   54FC         ANL     A,#0xfc
   \   0001BF   F0           MOVX    @DPTR,A
   \   0001C0   8E82         MOV     DPL,R6
   \   0001C2   8F83         MOV     DPH,R7
   \   0001C4   A3           INC     DPTR
   \   0001C5   A3           INC     DPTR
   \   0001C6   A3           INC     DPTR
   \   0001C7   A3           INC     DPTR
   \   0001C8   A3           INC     DPTR
   \   0001C9   A3           INC     DPTR
   \   0001CA   A3           INC     DPTR
   \   0001CB   E0           MOVX    A,@DPTR
   \   0001CC   D2E1         SETB    0xE0 /* A   */.1
   \   0001CE   F0           MOVX    @DPTR,A
    138            HAL_DMA_CLEAR_IRQ(HAL_NV_DMA_CH);
   \   0001CF   75D1FE       MOV     0xd1,#-0x2
    139            HAL_DMA_ARM_CH(HAL_NV_DMA_CH);
   \   0001D2   75D601       MOV     0xd6,#0x1
    140          
    141            FADDRL = (uint8)addr;
   \   0001D5   EA           MOV     A,R2
   \   0001D6   906271       MOV     DPTR,#0x6271
   \   0001D9   F0           MOVX    @DPTR,A
    142            FADDRH = (uint8)(addr >> 8);
   \   0001DA   E4           CLR     A
   \   0001DB   CB           XCH     A,R3
   \   0001DC   FA           MOV     R2,A
   \   0001DD   EA           MOV     A,R2
   \   0001DE   906272       MOV     DPTR,#0x6272
   \   0001E1   F0           MOVX    @DPTR,A
    143            FCTL |= 0x02;         // Trigger the DMA writes.
   \   0001E2   906270       MOV     DPTR,#0x6270
   \   0001E5   E0           MOVX    A,@DPTR
   \   0001E6   D2E1         SETB    0xE0 /* A   */.1
   \   0001E8   F0           MOVX    @DPTR,A
    144            while (FCTL & 0x80);  // Wait until writing is done.
   \                     ??HalFlashWrite_0:
   \   0001E9   906270       MOV     DPTR,#0x6270
   \   0001EC   E0           MOVX    A,@DPTR
   \   0001ED   A2E7         MOV     C,0xE0 /* A   */.7
   \   0001EF   40F8         JC      ??HalFlashWrite_0
    145          #endif
    146          }
   \   0001F1   7F01         MOV     R7,#0x1
   \   0001F3   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0001F6                REQUIRE DMAIRQ
   \   0001F6                REQUIRE DMAARM
    147          
    148          /**************************************************************************************************
    149           * @fn          HalFlashErase
    150           *
    151           * @brief       This function erases the specified page of the internal flash.
    152           *
    153           * input parameters
    154           *
    155           * @param       pg - A valid flash page number to erase.
    156           *
    157           * output parameters
    158           *
    159           * None.
    160           *
    161           * @return      None.
    162           **************************************************************************************************
    163           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    164          void HalFlashErase(uint8 pg)
   \                     HalFlashErase:
    165          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    166            FADDRH = pg * (HAL_FLASH_PAGE_SIZE / HAL_FLASH_WORD_SIZE / 256);
   \   000004   75F002       MOV     B,#0x2
   \   000007   E9           MOV     A,R1
   \   000008   A4           MUL     AB
   \   000009   906272       MOV     DPTR,#0x6272
   \   00000C   F0           MOVX    @DPTR,A
    167            FCTL |= 0x01;
   \   00000D   906270       MOV     DPTR,#0x6270
   \   000010   E0           MOVX    A,@DPTR
   \   000011   D2E0         SETB    0xE0 /* A   */.0
   \   000013   F0           MOVX    @DPTR,A
    168          }
   \   000014   D083         POP     DPH
   \   000016   D082         POP     DPL
   \   000018   02....       LJMP    ?BRET

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalFlashRead::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalFlashRead

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalFlashWrite::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalFlashWrite

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalFlashErase::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalFlashErase
    169          
    170          /**************************************************************************************************
    171          */

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2      0   HalFlashErase
      1     13   HalFlashRead
      1     11   HalFlashWrite


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  DMAARM
       1  DMAIRQ
      27  HalFlashErase
       6  HalFlashErase::?relay
     155  HalFlashRead
       6  HalFlashRead::?relay
     502  HalFlashWrite
       6  HalFlashWrite::?relay
       1  MEMCTR
       1  _A_IEN0

 
 684 bytes in segment BANKED_CODE
  18 bytes in segment BANK_RELAYS
   4 bytes in segment SFR_AN
 
 702 bytes of CODE memory
   0 bytes of DATA memory (+ 4 bytes shared)

Errors: none
Warnings: none

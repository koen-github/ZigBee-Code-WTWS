###############################################################################
#
# IAR C/C++ Compiler V9.20.1.2476 for 8051                22/Feb/2017  14:31:46
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\koen\ZigBee-Code-WTWS\Components\stack\sys\ZGlobals.c
#    Command line       =  
#        -f
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00002000 -DZDAPP_CONFIG_PAN_ID=0xABCD
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={'H', 'O', 'G', 'E', 'S',
#        'C', 'H', 'O', 'O', 'L', 'U', 'T', 'R', 'E', 'C', 'H'}"
#        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440
#        C:\Users\koen\ZigBee-Code-WTWS\Components\stack\sys\ZGlobals.c -D
#        HOLD_AUTO_START -D BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D
#        NV_RESTORE -D HAL_UART=TRUE -lC
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\
#        -lA
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\
#        --diag_suppress Pe001,Pa010,Pe1665 -o
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\Obj\
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\Source\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ol --require_prototypes
#    List file          =  
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\ZGlobals.lst
#    Object file        =  
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\Obj\ZGlobals.r51
#
###############################################################################

C:\Users\koen\ZigBee-Code-WTWS\Components\stack\sys\ZGlobals.c
      1          /**************************************************************************************************
      2            Filename:       ZGlobals.c
      3            Revised:        $Date: 2014-03-13 10:55:58 -0700 (Thu, 13 Mar 2014) $
      4            Revision:       $Revision: 37665 $
      5          
      6            Description:    User definable Z-Stack parameters.
      7          
      8          
      9            Copyright 2007-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "ZComDef.h"
     45          #include "OSAL_Nv.h"
     46          #include "ZDObject.h"
     47          #include "ZGlobals.h"
     48          #include "ZDNwkMgr.h"
     49          #include "OnBoard.h"
     50          #include "ZDSecMgr.h"
     51          
     52          /*********************************************************************
     53           * MACROS
     54           */
     55          
     56          /*********************************************************************
     57           * CONSTANTS
     58           */
     59          
     60          /*********************************************************************
     61           * TYPEDEFS
     62           */
     63          
     64          typedef struct zgItem
     65          {
     66            uint16 id;
     67            uint16 len;
     68            void *buf;
     69          } zgItem_t;
     70          
     71          /*********************************************************************
     72           * NWK GLOBAL VARIABLES
     73           */
     74          
     75          // Polling values

   \                                 In  segment XDATA_I, align 1, keep-with-next
     76          uint16 zgPollRate = POLL_RATE;
   \                     zgPollRate:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgPollRate>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     77          uint16 zgQueuedPollRate = QUEUED_POLL_RATE;
   \                     zgQueuedPollRate:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgQueuedPollRate>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     78          uint16 zgResponsePollRate = RESPONSE_POLL_RATE;
   \                     zgResponsePollRate:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgResponsePollRate>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     79          uint16 zgRejoinPollRate = REJOIN_POLL_RATE;
   \                     zgRejoinPollRate:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgRejoinPollRate>`
   \   000002                REQUIRE __INIT_XDATA_I
     80          
     81          // Transmission retries numbers

   \                                 In  segment XDATA_I, align 1, keep-with-next
     82          uint8 zgMaxDataRetries = NWK_MAX_DATA_RETRIES;
   \                     zgMaxDataRetries:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgMaxDataRetries>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
     83          uint8 zgMaxPollFailureRetries = MAX_POLL_FAILURE_RETRIES;
   \                     zgMaxPollFailureRetries:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgMaxPollFailureRetries>`
   \   000001                REQUIRE __INIT_XDATA_I
     84          
     85          // Default channel list

   \                                 In  segment XDATA_I, align 1, keep-with-next
     86          uint32 zgDefaultChannelList = DEFAULT_CHANLIST;
   \                     zgDefaultChannelList:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for zgDefaultChannelList>`
   \   000004                REQUIRE __INIT_XDATA_I
     87          
     88          // Default starting scan duration

   \                                 In  segment XDATA_I, align 1, keep-with-next
     89          uint8 zgDefaultStartingScanDuration = STARTING_SCAN_DURATION;
   \                     zgDefaultStartingScanDuration:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgDefaultStartingScanDuratio`
   \   000001                REQUIRE __INIT_XDATA_I
     90          
     91          // Stack profile Id

   \                                 In  segment XDATA_I, align 1, keep-with-next
     92          uint8 zgStackProfile = STACK_PROFILE_ID;
   \                     zgStackProfile:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgStackProfile>`
   \   000001                REQUIRE __INIT_XDATA_I
     93          
     94          // Default indirect message holding timeout

   \                                 In  segment XDATA_I, align 1, keep-with-next
     95          uint8 zgIndirectMsgTimeout = NWK_INDIRECT_MSG_TIMEOUT;
   \                     zgIndirectMsgTimeout:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgIndirectMsgTimeout>`
   \   000001                REQUIRE __INIT_XDATA_I
     96          
     97          // Security mode

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     98          uint8 zgSecurityMode = ZG_SECURITY_MODE;
   \                     zgSecurityMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     99          
    100          // Secure permit join

   \                                 In  segment XDATA_I, align 1, keep-with-next
    101          uint8 zgSecurePermitJoin = TRUE;
   \                     zgSecurePermitJoin:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgSecurePermitJoin>`
   \   000001                REQUIRE __INIT_XDATA_I
    102          
    103          // Trust center address

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    104          uint8 zgApsTrustCenterAddr[Z_EXTADDR_LEN] = { 0 };
   \                     zgApsTrustCenterAddr:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
    105          
    106          // Route Discovery Time - amount of time that a route request lasts

   \                                 In  segment XDATA_I, align 1, keep-with-next
    107          uint8 zgRouteDiscoveryTime = ROUTE_DISCOVERY_TIME;
   \                     zgRouteDiscoveryTime:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgRouteDiscoveryTime>`
   \   000001                REQUIRE __INIT_XDATA_I
    108          
    109          // Route expiry

   \                                 In  segment XDATA_I, align 1, keep-with-next
    110          uint8 zgRouteExpiryTime = ROUTE_EXPIRY_TIME;
   \                     zgRouteExpiryTime:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgRouteExpiryTime>`
   \   000001                REQUIRE __INIT_XDATA_I
    111          
    112          // Extended PAN Id

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    113          uint8 zgExtendedPANID[Z_EXTADDR_LEN];
   \                     zgExtendedPANID:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
    114          
    115          // Broadcast parameters

   \                                 In  segment XDATA_I, align 1, keep-with-next
    116          uint8 zgMaxBcastRetires   = MAX_BCAST_RETRIES;
   \                     zgMaxBcastRetires:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgMaxBcastRetires>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    117          uint8 zgPassiveAckTimeout = PASSIVE_ACK_TIMEOUT;
   \                     zgPassiveAckTimeout:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgPassiveAckTimeout>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    118          uint8 zgBcastDeliveryTime = BCAST_DELIVERY_TIME;
   \                     zgBcastDeliveryTime:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgBcastDeliveryTime>`
   \   000001                REQUIRE __INIT_XDATA_I
    119          
    120          // Network mode

   \                                 In  segment XDATA_I, align 1, keep-with-next
    121          uint8 zgNwkMode = NWK_MODE;
   \                     zgNwkMode:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgNwkMode>`
   \   000001                REQUIRE __INIT_XDATA_I
    122          
    123          // Many-to-one values

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    124          uint8 zgConcentratorEnable = CONCENTRATOR_ENABLE;
   \                     zgConcentratorEnable:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    125          uint8 zgConcentratorDiscoveryTime = CONCENTRATOR_DISCOVERY_TIME;
   \                     zgConcentratorDiscoveryTime:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    126          uint8 zgConcentratorRadius = CONCENTRATOR_RADIUS;
   \                     zgConcentratorRadius:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgConcentratorRadius>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    127          uint8 zgConcentratorRC = CONCENTRATOR_ROUTE_CACHE;   // concentrator with route cache (no memory constraints)
   \                     zgConcentratorRC:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    128          uint8 zgNwkSrcRtgExpiryTime = SRC_RTG_EXPIRY_TIME;
   \                     zgNwkSrcRtgExpiryTime:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgNwkSrcRtgExpiryTime>`
   \   000001                REQUIRE __INIT_XDATA_I
    129          
    130          // Cleanup Child Table according to routing traffic

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    131          uint8 zgRouterOffAssocCleanup = FALSE;
   \                     zgRouterOffAssocCleanup:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    132          
    133          // Determines whether or not a remote NWK leave request command frame received
    134          // by the local device is accepted .

   \                                 In  segment XDATA_I, align 1, keep-with-next
    135          uint8 zgNwkLeaveRequestAllowed = TRUE;
   \                     zgNwkLeaveRequestAllowed:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgNwkLeaveRequestAllowed>`
   \   000001                REQUIRE __INIT_XDATA_I
    136          
    137          // Determines if the Child Aging Table Management process is active or not.
    138          // This feature is optional and it is disabled by default.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    139          uint8 zgChildAgingEnable = FALSE;
   \                     zgChildAgingEnable:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    140          
    141          /*********************************************************************
    142           * APS GLOBAL VARIABLES
    143           */
    144          
    145          // The maximum number of retries allowed after a transmission failure

   \                                 In  segment XDATA_I, align 1, keep-with-next
    146          uint8 zgApscMaxFrameRetries = APSC_MAX_FRAME_RETRIES;
   \                     zgApscMaxFrameRetries:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgApscMaxFrameRetries>`
   \   000001                REQUIRE __INIT_XDATA_I
    147          
    148          // The maximum number of seconds (milliseconds) to wait for an
    149          // acknowledgement to a transmitted frame.
    150          
    151          // This number is used by polled devices.

   \                                 In  segment XDATA_I, align 1, keep-with-next
    152          uint16 zgApscAckWaitDurationPolled = APSC_ACK_WAIT_DURATION_POLLED;
   \                     zgApscAckWaitDurationPolled:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgApscAckWaitDurationPolled>`
   \   000002                REQUIRE __INIT_XDATA_I
    153          
    154          // This number is used by non-polled devices in the following formula:
    155          //   (100 mSec) * (_NIB.MaxDepth * zgApsAckWaitMultiplier)

   \                                 In  segment XDATA_I, align 1, keep-with-next
    156          uint8 zgApsAckWaitMultiplier = 2;
   \                     zgApsAckWaitMultiplier:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgApsAckWaitMultiplier>`
   \   000001                REQUIRE __INIT_XDATA_I
    157          
    158          // The maximum number of milliseconds for the end device binding

   \                                 In  segment XDATA_I, align 1, keep-with-next
    159          uint16 zgApsDefaultMaxBindingTime = APS_DEFAULT_MAXBINDING_TIME;
   \                     zgApsDefaultMaxBindingTime:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgApsDefaultMaxBindingTime>`
   \   000002                REQUIRE __INIT_XDATA_I
    160          
    161          // The 64-big identifier of the network to join or form.
    162          // Default set to all zeros

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    163          uint8 zgApsUseExtendedPANID[Z_EXTADDR_LEN] = {00,00,00,00,00,00,00,00};
   \                     zgApsUseExtendedPANID:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
    164          
    165          // A boolean flag that indicates whether it is OK to use insecure join
    166          // on startup. Default set to TRUE

   \                                 In  segment XDATA_I, align 1, keep-with-next
    167          uint8 zgApsUseInsecureJoin = TRUE;
   \                     zgApsUseInsecureJoin:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgApsUseInsecureJoin>`
   \   000001                REQUIRE __INIT_XDATA_I
    168          
    169          // The radius of broadcast multicast transmissions

   \                                 In  segment XDATA_I, align 1, keep-with-next
    170          uint8 zgApsNonMemberRadius = APS_DEFAULT_NONMEMBER_RADIUS;
   \                     zgApsNonMemberRadius:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgApsNonMemberRadius>`
   \   000001                REQUIRE __INIT_XDATA_I
    171          
    172          // Commissioned Network Address

   \                                 In  segment XDATA_I, align 1, keep-with-next
    173          uint16 zgNwkCommissionedNwkAddr = INVALID_NODE_ADDR;
   \                     zgNwkCommissionedNwkAddr:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgNwkCommissionedNwkAddr>`
   \   000002                REQUIRE __INIT_XDATA_I
    174          
    175          // APS Duplication Rejection table variables

   \                                 In  segment XDATA_I, align 1, keep-with-next
    176          uint16 zgApscDupRejTimeoutInc = DEFAULT_APS_DUP_REJ_TIMEOUT_INCREMENT;
   \                     zgApscDupRejTimeoutInc:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgApscDupRejTimeoutInc>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    177          uint8  zgApscDupRejTimeoutCount = DEFAULT_APS_DUP_REJ_TIMEOUT;
   \                     zgApscDupRejTimeoutCount:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgApscDupRejTimeoutCount>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    178          uint16 zgApsMinDupRejTableSize = APS_DUP_REJ_ENTRIES;
   \                     zgApsMinDupRejTableSize:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgApsMinDupRejTableSize>`
   \   000002                REQUIRE __INIT_XDATA_I
    179          
    180          /*********************************************************************
    181           * SECURITY GLOBAL VARIABLES
    182           */
    183          
    184          // If TRUE, preConfigKey should be configured on all devices on the network
    185          // If false, it is configured only on the coordinator and sent to other
    186          // devices upon joining.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    187          uint8 zgPreConfigKeys = FALSE;
   \                     zgPreConfigKeys:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    188          
    189          // The type of link key in use.  This will determine the security
    190          // policies associated with sending and receiving APS messages.
    191          // If ZG_GLOBAL_LINK_KEY APS TCLK security may be used for specific APS commands
    192          // If ZG_UNIQUE_LINK_KEY APS TCLK security is required for specific APS commands

   \                                 In  segment XDATA_I, align 1, keep-with-next
    193          uint8 zgApsLinkKeyType = ZG_GLOBAL_LINK_KEY;
   \                     zgApsLinkKeyType:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgApsLinkKeyType>`
   \   000001                REQUIRE __INIT_XDATA_I
    194          
    195          // With changes introduced in R20 of the ZigBee specification,
    196          // boolean value of zgUseDefaultTCLK is set depending on zgApsLinkKeyType value.
    197          //
    198          // For zgApsLinkKeyType = ZG_GLOBAL_LINK_KEY, zgUseDefaultTCLK = TRUE
    199          // For zgApsLinkKeyType = ZG_UNIQUE_LINK_KEY, different devices have
    200          // different value:
    201          //      ZC should have             zgUseDefaultTCLK = FALSE
    202          //      Other devices should have  zgUseDefaultTCLK = TRUE
    203          // This is initialized in zgInitItems()
    204          // If ZG_UNIQUE_LINK_KEY, individual trust center link key between each device
    205          // and the trust center should be manually configured via MT_SYS_OSAL_NV_WRITE

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    206          uint8 zgUseDefaultTCLK;
   \                     zgUseDefaultTCLK:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    207          
    208          #if defined ( APP_TP2_TEST_MODE )
    209          uint8 guTxApsSecON = FALSE;
    210          uint8 guEnforceRxApsSec = TP_GU_ALL;
    211          #endif
    212          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    213          uint8 zgApsAllowR19Sec = FALSE;
   \                     zgApsAllowR19Sec:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    214          
    215          /*********************************************************************
    216           * ZDO GLOBAL VARIABLES
    217           */
    218          
    219          // Configured PAN ID

   \                                 In  segment XDATA_I, align 1, keep-with-next
    220          uint16 zgConfigPANID = ZDAPP_CONFIG_PAN_ID;
   \                     zgConfigPANID:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zgConfigPANID>`
   \   000002                REQUIRE __INIT_XDATA_I
    221          
    222          // Device Logical Type

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    223          uint8 zgDeviceLogicalType = DEVICE_LOGICAL_TYPE;
   \                     zgDeviceLogicalType:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    224          
    225          // Startup Delay

   \                                 In  segment XDATA_I, align 1, keep-with-next
    226          uint8 zgStartDelay = START_DELAY;
   \                     zgStartDelay:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgStartDelay>`
   \   000001                REQUIRE __INIT_XDATA_I
    227          
    228          #if !defined MT_TASK
    229          // Flag to use verbose (i.e. "cc2480-style") direct MT callbacks in ZDProfile.c, ZDP_IncomingData().

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    230          uint8 zgZdoDirectCB = FALSE;
   \                     zgZdoDirectCB:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    231          #endif
    232          
    233          // Min number of attempted transmissions for Channel Interference detection

   \                                 In  segment XDATA_I, align 1, keep-with-next
    234          uint8 zgNwkMgrMinTransmissions = ZDNWKMGR_MIN_TRANSMISSIONS;
   \                     zgNwkMgrMinTransmissions:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgNwkMgrMinTransmissions>`
   \   000001                REQUIRE __INIT_XDATA_I
    235          
    236          /*********************************************************************
    237           * APPLICATION GLOBAL VARIABLES
    238           */
    239          
    240          // Network Manager Mode

   \                                 In  segment XDATA_I, align 1, keep-with-next
    241          uint8 zgNwkMgrMode = ZDNWKMGR_ENABLE;
   \                     zgNwkMgrMode:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgNwkMgrMode>`
   \   000001                REQUIRE __INIT_XDATA_I
    242          
    243          /*********************************************************************
    244           * NON-STANDARD GLOBAL VARIABLES
    245           */
    246          
    247          // Simple API Endpoint

   \                                 In  segment XDATA_I, align 1, keep-with-next
    248          uint8 zgSapiEndpoint = SAPI_ENDPOINT;
   \                     zgSapiEndpoint:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zgSapiEndpoint>`
   \   000001                REQUIRE __INIT_XDATA_I
    249          
    250          /*********************************************************************
    251           * LOCAL VARIABLES
    252           */
    253          
    254          /*********************************************************************
    255           * ZGlobal Item Table
    256           */

   \                                 In  segment CODE_C, align 1
    257          static CONST zgItem_t zgItemTable[] =
   \                     zgItemTable:
   \   000000   8F00         DW 143
   \   000002   0100         DW 1
   \   000004   ....         DW zgZdoDirectCB
   \   000006   8700         DW 135
   \   000008   0100         DW 1
   \   00000A   ....         DW zgDeviceLogicalType
   \   00000C   2400         DW 36
   \   00000E   0200         DW 2
   \   000010   ....         DW zgPollRate
   \   000012   2500         DW 37
   \   000014   0200         DW 2
   \   000016   ....         DW zgQueuedPollRate
   \   000018   2600         DW 38
   \   00001A   0200         DW 2
   \   00001C   ....         DW zgResponsePollRate
   \   00001E   2700         DW 39
   \   000020   0200         DW 2
   \   000022   ....         DW zgRejoinPollRate
   \   000024   2800         DW 40
   \   000026   0100         DW 1
   \   000028   ....         DW zgMaxDataRetries
   \   00002A   2900         DW 41
   \   00002C   0100         DW 1
   \   00002E   ....         DW zgMaxPollFailureRetries
   \   000030   8400         DW 132
   \   000032   0400         DW 4
   \   000034   ....         DW zgDefaultChannelList
   \   000036   8600         DW 134
   \   000038   0100         DW 1
   \   00003A   ....         DW zgDefaultStartingScanDuration
   \   00003C   2A00         DW 42
   \   00003E   0100         DW 1
   \   000040   ....         DW zgStackProfile
   \   000042   2B00         DW 43
   \   000044   0100         DW 1
   \   000046   ....         DW zgIndirectMsgTimeout
   \   000048   2C00         DW 44
   \   00004A   0100         DW 1
   \   00004C   ....         DW zgRouteExpiryTime
   \   00004E   2D00         DW 45
   \   000050   0800         DW 8
   \   000052   ....         DW zgExtendedPANID
   \   000054   2E00         DW 46
   \   000056   0100         DW 1
   \   000058   ....         DW zgMaxBcastRetires
   \   00005A   2F00         DW 47
   \   00005C   0100         DW 1
   \   00005E   ....         DW zgPassiveAckTimeout
   \   000060   3000         DW 48
   \   000062   0100         DW 1
   \   000064   ....         DW zgBcastDeliveryTime
   \   000066   3100         DW 49
   \   000068   0100         DW 1
   \   00006A   ....         DW zgNwkMode
   \   00006C   3200         DW 50
   \   00006E   0100         DW 1
   \   000070   ....         DW zgConcentratorEnable
   \   000072   3300         DW 51
   \   000074   0100         DW 1
   \   000076   ....         DW zgConcentratorDiscoveryTime
   \   000078   3400         DW 52
   \   00007A   0100         DW 1
   \   00007C   ....         DW zgConcentratorRadius
   \   00007E   3600         DW 54
   \   000080   0100         DW 1
   \   000082   ....         DW zgConcentratorRC
   \   000084   3800         DW 56
   \   000086   0100         DW 1
   \   000088   ....         DW zgNwkSrcRtgExpiryTime
   \   00008A   3900         DW 57
   \   00008C   0100         DW 1
   \   00008E   ....         DW zgRouteDiscoveryTime
   \   000090   8300         DW 131
   \   000092   0200         DW 2
   \   000094   ....         DW zgConfigPANID
   \   000096   6300         DW 99
   \   000098   0100         DW 1
   \   00009A   ....         DW zgPreConfigKeys
   \   00009C   6400         DW 100
   \   00009E   0100         DW 1
   \   0000A0   ....         DW zgSecurityMode
   \   0000A2   6500         DW 101
   \   0000A4   0100         DW 1
   \   0000A6   ....         DW zgSecurePermitJoin
   \   0000A8   6D00         DW 109
   \   0000AA   0100         DW 1
   \   0000AC   ....         DW zgUseDefaultTCLK
   \   0000AE   7100         DW 113
   \   0000B0   0800         DW 8
   \   0000B2   ....         DW zgApsTrustCenterAddr
   \   0000B4   6600         DW 102
   \   0000B6   0100         DW 1
   \   0000B8   ....         DW zgApsLinkKeyType
   \   0000BA   4300         DW 67
   \   0000BC   0100         DW 1
   \   0000BE   ....         DW zgApscMaxFrameRetries
   \   0000C0   4400         DW 68
   \   0000C2   0200         DW 2
   \   0000C4   ....         DW zgApscAckWaitDurationPolled
   \   0000C6   4500         DW 69
   \   0000C8   0100         DW 1
   \   0000CA   ....         DW zgApsAckWaitMultiplier
   \   0000CC   4600         DW 70
   \   0000CE   0200         DW 2
   \   0000D0   ....         DW zgApsDefaultMaxBindingTime
   \   0000D2   4700         DW 71
   \   0000D4   0800         DW 8
   \   0000D6   ....         DW zgApsUseExtendedPANID
   \   0000D8   4800         DW 72
   \   0000DA   0100         DW 1
   \   0000DC   ....         DW zgApsUseInsecureJoin
   \   0000DE   4B00         DW 75
   \   0000E0   0100         DW 1
   \   0000E2   ....         DW zgApsNonMemberRadius
   \   0000E4   0400         DW 4
   \   0000E6   0100         DW 1
   \   0000E8   ....         DW zgStartDelay
   \   0000EA   A100         DW 161
   \   0000EC   0100         DW 1
   \   0000EE   ....         DW zgSapiEndpoint
   \   0000F0   3700         DW 55
   \   0000F2   0100         DW 1
   \   0000F4   ....         DW zgNwkMgrMode
   \   0000F6   8800         DW 136
   \   0000F8   0100         DW 1
   \   0000FA   ....         DW zgNwkMgrMinTransmissions
   \   0000FC   3C00         DW 60
   \   0000FE   0100         DW 1
   \   000100   ....         DW zgRouterOffAssocCleanup
   \   000102   3D00         DW 61
   \   000104   0100         DW 1
   \   000106   ....         DW zgNwkLeaveRequestAllowed
   \   000108   4900         DW 73
   \   00010A   0200         DW 2
   \   00010C   ....         DW zgNwkCommissionedNwkAddr
   \   00010E   6700         DW 103
   \   000110   0100         DW 1
   \   000112   ....         DW zgApsAllowR19Sec
   \   000114   4D00         DW 77
   \   000116   0200         DW 2
   \   000118   ....         DW zgApscDupRejTimeoutInc
   \   00011A   4E00         DW 78
   \   00011C   0100         DW 1
   \   00011E   ....         DW zgApscDupRejTimeoutCount
   \   000120   4F00         DW 79
   \   000122   0200         DW 2
   \   000124   ....         DW zgApsMinDupRejTableSize
   \   000126   3E00         DW 62
   \   000128   0100         DW 1
   \   00012A   ....         DW zgChildAgingEnable
   \   00012C   0000         DW 0
   \   00012E   0000         DW 0
   \   000130   0000         DW 0H
    258          {
    259          #if defined ( NV_INIT )
    260          #if !defined MT_TASK
    261            {
    262              ZCD_NV_ZDO_DIRECT_CB, sizeof(zgZdoDirectCB), &zgZdoDirectCB
    263            },
    264          #endif
    265            {
    266              ZCD_NV_LOGICAL_TYPE, sizeof(zgDeviceLogicalType), &zgDeviceLogicalType
    267            },
    268            {
    269              ZCD_NV_POLL_RATE, sizeof(zgPollRate), &zgPollRate
    270            },
    271            {
    272              ZCD_NV_QUEUED_POLL_RATE, sizeof(zgQueuedPollRate), &zgQueuedPollRate
    273            },
    274            {
    275              ZCD_NV_RESPONSE_POLL_RATE, sizeof(zgResponsePollRate), &zgResponsePollRate
    276            },
    277            {
    278              ZCD_NV_REJOIN_POLL_RATE, sizeof(zgRejoinPollRate), &zgRejoinPollRate
    279            },
    280            {
    281              ZCD_NV_DATA_RETRIES, sizeof(zgMaxDataRetries), &zgMaxDataRetries
    282            },
    283            {
    284              ZCD_NV_POLL_FAILURE_RETRIES, sizeof(zgMaxPollFailureRetries), &zgMaxPollFailureRetries
    285            },
    286            {
    287              ZCD_NV_CHANLIST, sizeof(zgDefaultChannelList), &zgDefaultChannelList
    288            },
    289            {
    290              ZCD_NV_SCAN_DURATION, sizeof(zgDefaultStartingScanDuration), &zgDefaultStartingScanDuration
    291            },
    292            {
    293              ZCD_NV_STACK_PROFILE, sizeof(zgStackProfile), &zgStackProfile
    294            },
    295            {
    296              ZCD_NV_INDIRECT_MSG_TIMEOUT, sizeof(zgIndirectMsgTimeout), &zgIndirectMsgTimeout
    297            },
    298            {
    299              ZCD_NV_ROUTE_EXPIRY_TIME, sizeof(zgRouteExpiryTime), &zgRouteExpiryTime
    300            },
    301            {
    302              ZCD_NV_EXTENDED_PAN_ID, Z_EXTADDR_LEN, zgExtendedPANID
    303            },
    304            {
    305              ZCD_NV_BCAST_RETRIES, sizeof(zgMaxBcastRetires), &zgMaxBcastRetires
    306            },
    307            {
    308              ZCD_NV_PASSIVE_ACK_TIMEOUT, sizeof(zgPassiveAckTimeout), &zgPassiveAckTimeout
    309            },
    310            {
    311              ZCD_NV_BCAST_DELIVERY_TIME, sizeof(zgBcastDeliveryTime), &zgBcastDeliveryTime
    312            },
    313            {
    314              ZCD_NV_NWK_MODE, sizeof(zgNwkMode), &zgNwkMode
    315            },
    316            {
    317              ZCD_NV_CONCENTRATOR_ENABLE, sizeof(zgConcentratorEnable), &zgConcentratorEnable
    318            },
    319            {
    320              ZCD_NV_CONCENTRATOR_DISCOVERY, sizeof(zgConcentratorDiscoveryTime), &zgConcentratorDiscoveryTime
    321            },
    322            {
    323              ZCD_NV_CONCENTRATOR_RADIUS, sizeof(zgConcentratorRadius), &zgConcentratorRadius
    324            },
    325            {
    326              ZCD_NV_CONCENTRATOR_RC, sizeof(zgConcentratorRC), &zgConcentratorRC
    327            },
    328            {
    329              ZCD_NV_SRC_RTG_EXPIRY_TIME, sizeof(zgNwkSrcRtgExpiryTime), &zgNwkSrcRtgExpiryTime
    330            },
    331            {
    332              ZCD_NV_ROUTE_DISCOVERY_TIME, sizeof(zgRouteDiscoveryTime), &zgRouteDiscoveryTime
    333            },
    334          #ifndef NONWK
    335            {
    336              ZCD_NV_PANID, sizeof(zgConfigPANID), &zgConfigPANID
    337            },
    338            {
    339              ZCD_NV_PRECFGKEYS_ENABLE, sizeof(zgPreConfigKeys), &zgPreConfigKeys
    340            },
    341            {
    342              ZCD_NV_SECURITY_MODE, sizeof(zgSecurityMode), &zgSecurityMode
    343            },
    344            {
    345              ZCD_NV_SECURE_PERMIT_JOIN, sizeof(zgSecurePermitJoin), &zgSecurePermitJoin
    346            },
    347            {
    348              ZCD_NV_USE_DEFAULT_TCLK, sizeof(zgUseDefaultTCLK), &zgUseDefaultTCLK
    349            },
    350            {
    351              ZCD_NV_TRUSTCENTER_ADDR, Z_EXTADDR_LEN, zgApsTrustCenterAddr
    352            },
    353            {
    354              ZCD_NV_APS_LINK_KEY_TYPE, sizeof(zgApsLinkKeyType), &zgApsLinkKeyType
    355            },
    356          #endif // NONWK
    357            {
    358              ZCD_NV_APS_FRAME_RETRIES, sizeof(zgApscMaxFrameRetries), &zgApscMaxFrameRetries
    359            },
    360            {
    361              ZCD_NV_APS_ACK_WAIT_DURATION, sizeof(zgApscAckWaitDurationPolled), &zgApscAckWaitDurationPolled
    362            },
    363            {
    364              ZCD_NV_APS_ACK_WAIT_MULTIPLIER, sizeof(zgApsAckWaitMultiplier), &zgApsAckWaitMultiplier
    365            },
    366            {
    367              ZCD_NV_BINDING_TIME, sizeof(zgApsDefaultMaxBindingTime), &zgApsDefaultMaxBindingTime
    368            },
    369            {
    370              ZCD_NV_APS_USE_EXT_PANID, Z_EXTADDR_LEN, zgApsUseExtendedPANID
    371            },
    372            {
    373              ZCD_NV_APS_USE_INSECURE_JOIN, sizeof(zgApsUseInsecureJoin), &zgApsUseInsecureJoin
    374            },
    375            {
    376              ZCD_NV_APS_NONMEMBER_RADIUS, sizeof(zgApsNonMemberRadius), &zgApsNonMemberRadius
    377            },
    378            {
    379              ZCD_NV_START_DELAY, sizeof(zgStartDelay), &zgStartDelay
    380            },
    381            {
    382              ZCD_NV_SAPI_ENDPOINT, sizeof(zgSapiEndpoint), &zgSapiEndpoint
    383            },
    384            {
    385              ZCD_NV_NWK_MGR_MODE, sizeof(zgNwkMgrMode), &zgNwkMgrMode
    386            },
    387            {
    388              ZCD_NV_NWKMGR_MIN_TX, sizeof(zgNwkMgrMinTransmissions), &zgNwkMgrMinTransmissions
    389            },
    390            {
    391              ZCD_NV_ROUTER_OFF_ASSOC_CLEANUP, sizeof(zgRouterOffAssocCleanup), &zgRouterOffAssocCleanup
    392            },
    393            {
    394              ZCD_NV_NWK_LEAVE_REQ_ALLOWED, sizeof(zgNwkLeaveRequestAllowed), &zgNwkLeaveRequestAllowed
    395            },
    396            {
    397              ZCD_NV_COMMISSIONED_NWK_ADDR, sizeof(zgNwkCommissionedNwkAddr), &zgNwkCommissionedNwkAddr
    398            },
    399            {
    400              ZCD_NV_APS_ALLOW_R19_SECURITY, sizeof(zgApsAllowR19Sec), &zgApsAllowR19Sec
    401            },
    402            {
    403              ZCD_NV_APS_DUPREJ_TIMEOUT_INC, sizeof(zgApscDupRejTimeoutInc), &zgApscDupRejTimeoutInc
    404            },
    405            {
    406              ZCD_NV_APS_DUPREJ_TIMEOUT_COUNT, sizeof(zgApscDupRejTimeoutCount), &zgApscDupRejTimeoutCount
    407            },
    408            {
    409              ZCD_NV_APS_DUPREJ_TABLE_SIZE, sizeof(zgApsMinDupRejTableSize), &zgApsMinDupRejTableSize
    410            },
    411          #if defined ( ZIGBEE_CHILD_AGING )
    412            {
    413              ZCD_NV_NWK_CHILD_AGE_ENABLE, sizeof(zgChildAgingEnable), &zgChildAgingEnable
    414            },
    415          #endif // ZIGBEE_CHILD_AGING
    416          #endif // NV_INIT
    417            // Last item -- DO NOT MOVE IT!
    418            {
    419              0x00, 0, NULL
    420            }
    421          };
    422          
    423          /*********************************************************************
    424           * LOCAL FUNCTIONS
    425           */
    426          
    427          static uint8 zgItemInit( uint16 id, uint16 len, void *buf, uint8 setDefault );
    428          
    429          #ifndef NONWK
    430          static uint8 zgPreconfigKeyInit( uint8 setDefault );
    431          #endif
    432          
    433          /*********************************************************************
    434           * @fn       zgItemInit()
    435           *
    436           * @brief
    437           *
    438           *   Initialize a global item. If the item doesn't exist in NV memory,
    439           *   write the system default (value passed in) into NV memory. But if
    440           *   it exists, set the item to the value stored in NV memory.
    441           *
    442           *   Also, if setDefault is TRUE and the item exists, we will write
    443           *   the default value to NV space.
    444           *
    445           * @param   id - item id
    446           * @param   len - item len
    447           * @param   buf - pointer to the item
    448           * @param   setDefault - TRUE to set default, not read
    449           *
    450           * @return  ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
    451           *          exist in NV, NV_OPER_FAILED if failure.
    452           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    453          static uint8 zgItemInit( uint16 id, uint16 len, void *buf, uint8 setDefault )
   \                     zgItemInit:
    454          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V2,R4
   \   00000B   8D..         MOV     ?V3,R5
   \   00000D   89..         MOV     ?V4,R1
   \   00000F   740D         MOV     A,#0xd
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V0,A
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F5..         MOV     ?V1,A
    455            uint8 status;
    456          
    457            // If the item doesn't exist in NV memory, create and initialize
    458            // it with the value passed in.
    459            status = osal_nv_item_init( id, len, buf );
   \   00001B                ; Setup parameters for call to function osal_nv_item_init
   \   00001B   78..         MOV     R0,#?V0
   \   00001D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000020   AC..         MOV     R4,?V2
   \   000022   AD..         MOV     R5,?V3
   \   000024   EE           MOV     A,R6
   \   000025   FA           MOV     R2,A
   \   000026   EF           MOV     A,R7
   \   000027   FB           MOV     R3,A
   \   000028   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00002B   7402         MOV     A,#0x2
   \   00002D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000030   E9           MOV     A,R1
   \   000031   F9           MOV     R1,A
    460            if ( status == ZSUCCESS )
   \   000032   E9           MOV     A,R1
   \   000033   703E         JNZ     ??zgItemInit_0
    461            {
    462              if ( setDefault )
   \   000035   E5..         MOV     A,?V4
   \   000037   601E         JZ      ??zgItemInit_1
    463              {
    464                // Write the default value back to NV
    465                status = osal_nv_write( id, 0, len, buf );
   \   000039                ; Setup parameters for call to function osal_nv_write
   \   000039   78..         MOV     R0,#?V0
   \   00003B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003E   78..         MOV     R0,#?V2
   \   000040   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000043   7C00         MOV     R4,#0x0
   \   000045   7D00         MOV     R5,#0x0
   \   000047   EE           MOV     A,R6
   \   000048   FA           MOV     R2,A
   \   000049   EF           MOV     A,R7
   \   00004A   FB           MOV     R3,A
   \   00004B   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00004E   7404         MOV     A,#0x4
   \   000050   12....       LCALL   ?DEALLOC_XSTACK8
   \   000053   E9           MOV     A,R1
   \   000054   F9           MOV     R1,A
   \   000055   801C         SJMP    ??zgItemInit_0
    466              }
    467              else
    468              {
    469                // The item exists in NV memory, read it from NV memory
    470                status = osal_nv_read( id, 0, len, buf );
   \                     ??zgItemInit_1:
   \   000057                ; Setup parameters for call to function osal_nv_read
   \   000057   78..         MOV     R0,#?V0
   \   000059   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005C   78..         MOV     R0,#?V2
   \   00005E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000061   7C00         MOV     R4,#0x0
   \   000063   7D00         MOV     R5,#0x0
   \   000065   EE           MOV     A,R6
   \   000066   FA           MOV     R2,A
   \   000067   EF           MOV     A,R7
   \   000068   FB           MOV     R3,A
   \   000069   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00006C   7404         MOV     A,#0x4
   \   00006E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000071   E9           MOV     A,R1
   \   000072   F9           MOV     R1,A
    471              }
    472            }
    473          
    474            return (status);
   \                     ??zgItemInit_0:
   \   000073   7F05         MOV     R7,#0x5
   \   000075   02....       LJMP    ?BANKED_LEAVE_XDATA
    475          }
    476          
    477          /*********************************************************************
    478           * API FUNCTIONS
    479           */
    480          
    481          /*********************************************************************
    482           * @fn          zgInit
    483           *
    484           * @brief
    485           *
    486           *   Initialize the Z-Stack Globals. If an item doesn't exist in
    487           *   NV memory, write the system default into NV memory. But if
    488           *   it exists, set the item to the value stored in NV memory.
    489           *
    490           * NOTE: The Startup Options (ZCD_NV_STARTUP_OPTION) indicate
    491           *       that the Config state items (zgItemTable) need to be
    492           *       set to defaults (ZCD_STARTOPT_DEFAULT_CONFIG_STATE). The
    493           *
    494           * @param       none
    495           *
    496           * @return      ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
    497           *              exist in NV, NV_OPER_FAILED if failure.
    498           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    499          uint8 zgInit( void )
   \                     zgInit:
    500          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    501            uint8  setDefault = FALSE;
   \   000005   7E00         MOV     R6,#0x0
    502          
    503            // Do we want to default the Config state values
    504            if ( zgReadStartupOptions() & ZCD_STARTOPT_DEFAULT_CONFIG_STATE )
   \   000007                ; Setup parameters for call to function zgReadStartupOptions
   \   000007   12....       LCALL   `??zgReadStartupOptions::?relay`; Banked call to: zgReadStartupOptions
   \   00000A   E9           MOV     A,R1
   \   00000B   F8           MOV     R0,A
   \   00000C   E8           MOV     A,R0
   \   00000D   A2E0         MOV     C,0xE0 /* A   */.0
   \   00000F   5002         JNC     ??zgInit_0
    505            {
    506              setDefault = TRUE;
   \   000011   7E01         MOV     R6,#0x1
    507            }
    508          
    509          #if defined ( FEATURE_SYSTEM_STATS )
    510            // This sections tracks the number of resets
    511            uint16 bootCnt = 0;
    512          
    513            // Update the Boot Counter
    514            if ( osal_nv_item_init( ZCD_NV_BOOTCOUNTER, sizeof(bootCnt), &bootCnt ) == ZSUCCESS )
    515            {
    516              // Get the old value from NV memory
    517              osal_nv_read( ZCD_NV_BOOTCOUNTER, 0, sizeof(bootCnt), &bootCnt );
    518            }
    519          
    520            // Increment the Boot Counter and store it into NV memory
    521            if ( setDefault )
    522            {
    523              bootCnt = 0;
    524            }
    525            else
    526            {
    527              bootCnt++;
    528            }
    529          
    530            osal_nv_write( ZCD_NV_BOOTCOUNTER, 0, sizeof(bootCnt), &bootCnt );
    531          #endif  // FEATURE_SYSTEM_STATS
    532          
    533            // Initialize the Extended PAN ID as my own extended address
    534            ZMacGetReq( ZMacExtAddr, zgExtendedPANID );
   \                     ??zgInit_0:
   \   000013                ; Setup parameters for call to function ZMacGetReq
   \   000013   7A..         MOV     R2,#zgExtendedPANID & 0xff
   \   000015   7B..         MOV     R3,#(zgExtendedPANID >> 8) & 0xff
   \   000017   79E2         MOV     R1,#-0x1e
   \   000019   12....       LCALL   `??ZMacGetReq::?relay`; Banked call to: ZMacGetReq
   \   00001C   E9           MOV     A,R1
    535          
    536            // Initialize the items table
    537            zgInitItems( setDefault );
   \   00001D                ; Setup parameters for call to function zgInitItems
   \   00001D   EE           MOV     A,R6
   \   00001E   F9           MOV     R1,A
   \   00001F   12....       LCALL   `??zgInitItems::?relay`; Banked call to: zgInitItems
    538          
    539          #ifndef NONWK
    540            if ( ZG_SECURE_ENABLED )
    541            {
    542              // Initialize the Pre-Configured Key to the default key
    543              zgPreconfigKeyInit( setDefault );
    544          
    545              // Initialize NV items for all Keys: NWK, APS, TCLK and Master
    546              ZDSecMgrInitNVKeyTables( setDefault );
    547            }
    548          #endif // NONWK
    549          
    550            // Clear the Config State default
    551            if ( setDefault )
   \   000022   EE           MOV     A,R6
   \   000023   6008         JZ      ??zgInit_1
    552            {
    553              zgWriteStartupOptions( ZG_STARTUP_CLEAR, ZCD_STARTOPT_DEFAULT_CONFIG_STATE );
   \   000025                ; Setup parameters for call to function zgWriteStartupOptions
   \   000025   7A01         MOV     R2,#0x1
   \   000027   7900         MOV     R1,#0x0
   \   000029   12....       LCALL   `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
   \   00002C   E9           MOV     A,R1
    554            }
    555          
    556            return ( ZSUCCESS );
   \                     ??zgInit_1:
   \   00002D   7900         MOV     R1,#0x0
   \   00002F   7F01         MOV     R7,#0x1
   \   000031   02....       LJMP    ?BANKED_LEAVE_XDATA
    557          }
    558          
    559          /*********************************************************************
    560           * @fn          zgInitItems
    561           *
    562           * @brief       Initializes RAM variables from NV.  If NV items don't
    563           *              exist, then the NV is initialize with what is in RAM
    564           *              variables.
    565           *
    566           * @param       none
    567           *
    568           * @return      none
    569           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    570          void zgInitItems( uint8 setDefault )
   \                     zgInitItems:
    571          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    572            uint8  i = 0;
   \   000007   7F00         MOV     R7,#0x0
    573          
    574            if ( ZG_BUILD_COORDINATOR_TYPE && ( zgApsLinkKeyType == ZG_UNIQUE_LINK_KEY ) )
   \   000009   90....       MOV     DPTR,#zgApsLinkKeyType
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   7009         JNZ     ??zgInitItems_0
    575            {
    576              zgUseDefaultTCLK = FALSE;
   \   00000F   90....       MOV     DPTR,#zgUseDefaultTCLK
   \   000012   7400         MOV     A,#0x0
   \   000014   F0           MOVX    @DPTR,A
   \   000015   02....       LJMP    ??zgInitItems_1 & 0xFFFF
    577            }
    578            else
    579            {
    580              // Most of the time default TCLK will be used
    581              zgUseDefaultTCLK = TRUE;
   \                     ??zgInitItems_0:
   \   000018   90....       MOV     DPTR,#zgUseDefaultTCLK
   \   00001B   7401         MOV     A,#0x1
   \   00001D   F0           MOVX    @DPTR,A
   \   00001E   02....       LJMP    ??zgInitItems_1 & 0xFFFF
    582            }
    583          
    584            while ( zgItemTable[i].id != 0x00 )
    585            {
    586              // Initialize the item
    587              zgItemInit( zgItemTable[i].id, zgItemTable[i].len, zgItemTable[i].buf, setDefault  );
   \                     ??zgInitItems_2:
   \   000021                ; Setup parameters for call to function zgItemInit
   \   000021   EF           MOV     A,R7
   \   000022   F8           MOV     R0,A
   \   000023   7900         MOV     R1,#0x0
   \   000025   E8           MOV     A,R0
   \   000026   75F006       MOV     B,#0x6
   \   000029   A4           MUL     AB
   \   00002A   C8           XCH     A,R0
   \   00002B   AAF0         MOV     R2,B
   \   00002D   75F000       MOV     B,#0x0
   \   000030   A4           MUL     AB
   \   000031   2A           ADD     A,R2
   \   000032   FA           MOV     R2,A
   \   000033   75F006       MOV     B,#0x6
   \   000036   E9           MOV     A,R1
   \   000037   A4           MUL     AB
   \   000038   2A           ADD     A,R2
   \   000039   F9           MOV     R1,A
   \   00003A   74..         MOV     A,#(zgItemTable + 4) & 0xff
   \   00003C   28           ADD     A,R0
   \   00003D   F582         MOV     DPL,A
   \   00003F   74..         MOV     A,#((zgItemTable + 4) >> 8) & 0xff
   \   000041   39           ADDC    A,R1
   \   000042   F583         MOV     DPH,A
   \   000044   12....       LCALL   ?PUSH_XSTACK8_C_TWO
   \   000047   EE           MOV     A,R6
   \   000048   F9           MOV     R1,A
   \   000049   EF           MOV     A,R7
   \   00004A   FA           MOV     R2,A
   \   00004B   7B00         MOV     R3,#0x0
   \   00004D   EA           MOV     A,R2
   \   00004E   75F006       MOV     B,#0x6
   \   000051   A4           MUL     AB
   \   000052   CA           XCH     A,R2
   \   000053   A8F0         MOV     R0,B
   \   000055   75F000       MOV     B,#0x0
   \   000058   A4           MUL     AB
   \   000059   28           ADD     A,R0
   \   00005A   F8           MOV     R0,A
   \   00005B   75F006       MOV     B,#0x6
   \   00005E   EB           MOV     A,R3
   \   00005F   A4           MUL     AB
   \   000060   28           ADD     A,R0
   \   000061   FB           MOV     R3,A
   \   000062   74..         MOV     A,#(zgItemTable + 2) & 0xff
   \   000064   2A           ADD     A,R2
   \   000065   F582         MOV     DPL,A
   \   000067   74..         MOV     A,#((zgItemTable + 2) >> 8) & 0xff
   \   000069   3B           ADDC    A,R3
   \   00006A   F583         MOV     DPH,A
   \   00006C   E4           CLR     A
   \   00006D   93           MOVC    A,@A+DPTR
   \   00006E   FC           MOV     R4,A
   \   00006F   7401         MOV     A,#0x1
   \   000071   93           MOVC    A,@A+DPTR
   \   000072   FD           MOV     R5,A
   \   000073   C9           XCH     A,R1
   \   000074   FE           MOV     R6,A
   \   000075   C9           XCH     A,R1
   \   000076   EF           MOV     A,R7
   \   000077   F8           MOV     R0,A
   \   000078   7900         MOV     R1,#0x0
   \   00007A   E8           MOV     A,R0
   \   00007B   75F006       MOV     B,#0x6
   \   00007E   A4           MUL     AB
   \   00007F   C8           XCH     A,R0
   \   000080   AAF0         MOV     R2,B
   \   000082   75F000       MOV     B,#0x0
   \   000085   A4           MUL     AB
   \   000086   2A           ADD     A,R2
   \   000087   FA           MOV     R2,A
   \   000088   75F006       MOV     B,#0x6
   \   00008B   E9           MOV     A,R1
   \   00008C   A4           MUL     AB
   \   00008D   2A           ADD     A,R2
   \   00008E   F9           MOV     R1,A
   \   00008F   74..         MOV     A,#zgItemTable & 0xff
   \   000091   28           ADD     A,R0
   \   000092   F582         MOV     DPL,A
   \   000094   74..         MOV     A,#(zgItemTable >> 8) & 0xff
   \   000096   39           ADDC    A,R1
   \   000097   F583         MOV     DPH,A
   \   000099   E4           CLR     A
   \   00009A   93           MOVC    A,@A+DPTR
   \   00009B   FA           MOV     R2,A
   \   00009C   7401         MOV     A,#0x1
   \   00009E   93           MOVC    A,@A+DPTR
   \   00009F   FB           MOV     R3,A
   \   0000A0   CE           XCH     A,R6
   \   0000A1   F9           MOV     R1,A
   \   0000A2   CE           XCH     A,R6
   \   0000A3   12....       LCALL   `??zgItemInit::?relay`; Banked call to: zgItemInit
   \   0000A6   7402         MOV     A,#0x2
   \   0000A8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AB   E9           MOV     A,R1
    588          
    589              // Move on to the next item
    590              i++;
   \   0000AC   0F           INC     R7
    591            }
   \                     ??zgInitItems_1:
   \   0000AD   EF           MOV     A,R7
   \   0000AE   F8           MOV     R0,A
   \   0000AF   7900         MOV     R1,#0x0
   \   0000B1   E8           MOV     A,R0
   \   0000B2   75F006       MOV     B,#0x6
   \   0000B5   A4           MUL     AB
   \   0000B6   C8           XCH     A,R0
   \   0000B7   AAF0         MOV     R2,B
   \   0000B9   75F000       MOV     B,#0x0
   \   0000BC   A4           MUL     AB
   \   0000BD   2A           ADD     A,R2
   \   0000BE   FA           MOV     R2,A
   \   0000BF   75F006       MOV     B,#0x6
   \   0000C2   E9           MOV     A,R1
   \   0000C3   A4           MUL     AB
   \   0000C4   2A           ADD     A,R2
   \   0000C5   F9           MOV     R1,A
   \   0000C6   74..         MOV     A,#zgItemTable & 0xff
   \   0000C8   28           ADD     A,R0
   \   0000C9   F582         MOV     DPL,A
   \   0000CB   74..         MOV     A,#(zgItemTable >> 8) & 0xff
   \   0000CD   39           ADDC    A,R1
   \   0000CE   F583         MOV     DPH,A
   \   0000D0   E4           CLR     A
   \   0000D1   93           MOVC    A,@A+DPTR
   \   0000D2   F8           MOV     R0,A
   \   0000D3   7401         MOV     A,#0x1
   \   0000D5   93           MOVC    A,@A+DPTR
   \   0000D6   F9           MOV     R1,A
   \   0000D7   E8           MOV     A,R0
   \   0000D8   49           ORL     A,R1
   \   0000D9   6003         JZ      $+5
   \   0000DB   02....       LJMP    ??zgInitItems_2 & 0xFFFF
    592          }
   \   0000DE   7F01         MOV     R7,#0x1
   \   0000E0   02....       LJMP    ?BANKED_LEAVE_XDATA
    593          
    594          /*********************************************************************
    595           * @fn          zgReadStartupOptions
    596           *
    597           * @brief       Reads the ZCD_NV_STARTUP_OPTION NV Item.
    598           *
    599           * @param       none
    600           *
    601           * @return      the ZCD_NV_STARTUP_OPTION NV item
    602           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    603          uint8 zgReadStartupOptions( void )
   \                     zgReadStartupOptions:
    604          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    605            // Default to Use Config State and Use Network State
    606            uint8 startupOption = 0;
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   7400         MOV     A,#0x0
   \   000012   F0           MOVX    @DPTR,A
    607          
    608            // This should have been done in ZMain.c, but just in case.
    609            if ( osal_nv_item_init( ZCD_NV_STARTUP_OPTION,
    610                                    sizeof(startupOption),
    611                                    &startupOption ) == ZSUCCESS )
   \   000013                ; Setup parameters for call to function osal_nv_item_init
   \   000013   A8..         MOV     R0,?XSP + 0
   \   000015   A9..         MOV     R1,?XSP + 1
   \   000017   88..         MOV     ?V0,R0
   \   000019   89..         MOV     ?V1,R1
   \   00001B   78..         MOV     R0,#?V0
   \   00001D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000020   7C01         MOV     R4,#0x1
   \   000022   7D00         MOV     R5,#0x0
   \   000024   7A03         MOV     R2,#0x3
   \   000026   7B00         MOV     R3,#0x0
   \   000028   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00002B   7402         MOV     A,#0x2
   \   00002D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000030   E9           MOV     A,R1
   \   000031   7029         JNZ     ??zgReadStartupOptions_0
    612            {
    613              // Read saved startup control
    614              osal_nv_read( ZCD_NV_STARTUP_OPTION,
    615                            0,
    616                            sizeof( startupOption ),
    617                            &startupOption);
   \   000033                ; Setup parameters for call to function osal_nv_read
   \   000033   A8..         MOV     R0,?XSP + 0
   \   000035   A9..         MOV     R1,?XSP + 1
   \   000037   88..         MOV     ?V0,R0
   \   000039   89..         MOV     ?V1,R1
   \   00003B   78..         MOV     R0,#?V0
   \   00003D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000040   75..01       MOV     ?V0,#0x1
   \   000043   75..00       MOV     ?V1,#0x0
   \   000046   78..         MOV     R0,#?V0
   \   000048   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004B   7C00         MOV     R4,#0x0
   \   00004D   7D00         MOV     R5,#0x0
   \   00004F   7A03         MOV     R2,#0x3
   \   000051   7B00         MOV     R3,#0x0
   \   000053   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000056   7404         MOV     A,#0x4
   \   000058   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005B   E9           MOV     A,R1
    618            }
    619            return ( startupOption );
   \                     ??zgReadStartupOptions_0:
   \   00005C   85..82       MOV     DPL,?XSP + 0
   \   00005F   85..83       MOV     DPH,?XSP + 1
   \   000062   E0           MOVX    A,@DPTR
   \   000063   F9           MOV     R1,A
   \   000064   7401         MOV     A,#0x1
   \   000066   12....       LCALL   ?DEALLOC_XSTACK8
   \   000069   7F02         MOV     R7,#0x2
   \   00006B   02....       LJMP    ?BANKED_LEAVE_XDATA
    620          }
    621          
    622          /*********************************************************************
    623           * @fn          zgWriteStartupOptions
    624           *
    625           * @brief       Writes bits into the ZCD_NV_STARTUP_OPTION NV Item.
    626           *
    627           * @param       action - ZG_STARTUP_SET set bit, ZG_STARTUP_CLEAR to
    628           *               clear bit. The set bit is an OR operation, and the
    629           *               clear bit is an AND ~(bitOptions) operation.
    630           *
    631           * @param       bitOptions - which bits to perform action on:
    632           *                      ZCD_STARTOPT_DEFAULT_CONFIG_STATE
    633           *                      ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    634           *
    635           * @return      ZSUCCESS if successful
    636           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    637          uint8 zgWriteStartupOptions( uint8 action, uint8 bitOptions )
   \                     zgWriteStartupOptions:
    638          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EA           MOV     A,R2
   \   00000D   FF           MOV     R7,A
    639            uint8 status;
    640            uint8 startupOptions = 0;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   7400         MOV     A,#0x0
   \   000016   F0           MOVX    @DPTR,A
    641          
    642            status = osal_nv_read( ZCD_NV_STARTUP_OPTION,
    643                                   0,
    644                                   sizeof( startupOptions ),
    645                                   &startupOptions );
   \   000017                ; Setup parameters for call to function osal_nv_read
   \   000017   A8..         MOV     R0,?XSP + 0
   \   000019   A9..         MOV     R1,?XSP + 1
   \   00001B   88..         MOV     ?V0,R0
   \   00001D   89..         MOV     ?V1,R1
   \   00001F   78..         MOV     R0,#?V0
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000024   75..01       MOV     ?V0,#0x1
   \   000027   75..00       MOV     ?V1,#0x0
   \   00002A   78..         MOV     R0,#?V0
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002F   7C00         MOV     R4,#0x0
   \   000031   7D00         MOV     R5,#0x0
   \   000033   7A03         MOV     R2,#0x3
   \   000035   7B00         MOV     R3,#0x0
   \   000037   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00003A   7404         MOV     A,#0x4
   \   00003C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00003F   E9           MOV     A,R1
   \   000040   F9           MOV     R1,A
    646          
    647            if ( status == ZSUCCESS )
   \   000041   E9           MOV     A,R1
   \   000042   7047         JNZ     ??zgWriteStartupOptions_0
    648            {
    649              if ( action == ZG_STARTUP_SET )
   \   000044   74FF         MOV     A,#-0x1
   \   000046   6E           XRL     A,R6
   \   000047   700B         JNZ     ??zgWriteStartupOptions_1
    650              {
    651                // Set bits
    652                startupOptions |= bitOptions;
   \   000049   85..82       MOV     DPL,?XSP + 0
   \   00004C   85..83       MOV     DPH,?XSP + 1
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   4F           ORL     A,R7
   \   000051   F0           MOVX    @DPTR,A
   \   000052   800D         SJMP    ??zgWriteStartupOptions_2
    653              }
    654              else
    655              {
    656                // Clear bits
    657                startupOptions &= (bitOptions ^ 0xFF);
   \                     ??zgWriteStartupOptions_1:
   \   000054   74FF         MOV     A,#-0x1
   \   000056   6F           XRL     A,R7
   \   000057   F8           MOV     R0,A
   \   000058   85..82       MOV     DPL,?XSP + 0
   \   00005B   85..83       MOV     DPH,?XSP + 1
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   58           ANL     A,R0
   \   000060   F0           MOVX    @DPTR,A
    658              }
    659          
    660              // Changed?
    661              status = osal_nv_write( ZCD_NV_STARTUP_OPTION,
    662                                      0,
    663                                      sizeof( startupOptions ),
    664                                      &startupOptions );
   \                     ??zgWriteStartupOptions_2:
   \   000061                ; Setup parameters for call to function osal_nv_write
   \   000061   A8..         MOV     R0,?XSP + 0
   \   000063   A9..         MOV     R1,?XSP + 1
   \   000065   88..         MOV     ?V0,R0
   \   000067   89..         MOV     ?V1,R1
   \   000069   78..         MOV     R0,#?V0
   \   00006B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006E   75..01       MOV     ?V0,#0x1
   \   000071   75..00       MOV     ?V1,#0x0
   \   000074   78..         MOV     R0,#?V0
   \   000076   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000079   7C00         MOV     R4,#0x0
   \   00007B   7D00         MOV     R5,#0x0
   \   00007D   7A03         MOV     R2,#0x3
   \   00007F   7B00         MOV     R3,#0x0
   \   000081   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000084   7404         MOV     A,#0x4
   \   000086   12....       LCALL   ?DEALLOC_XSTACK8
   \   000089   E9           MOV     A,R1
   \   00008A   F9           MOV     R1,A
    665            }
    666          
    667            return ( status );
   \                     ??zgWriteStartupOptions_0:
   \   00008B   7401         MOV     A,#0x1
   \   00008D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000090   7F02         MOV     R7,#0x2
   \   000092   02....       LJMP    ?BANKED_LEAVE_XDATA
    668          }
    669          
    670          /*********************************************************************
    671           * @fn          zgSetItem
    672           *
    673           * @brief       Set RAM variables from set-NV, if it exist in the zgItemTable
    674           *
    675           * @param       id - NV ID
    676           *              len - NV item length
    677           *              buf - pointer to the input buffer
    678           *
    679           * @return      none
    680           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    681          void zgSetItem( uint16 id, uint16 len, void *buf )
   \                     zgSetItem:
    682          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
    683          
    684            uint8  i = 0;
   \   000005   7E00         MOV     R6,#0x0
   \   000007   8001         SJMP    ??zgSetItem_0
    685          
    686            // Look up the NV item table
    687            while ( zgItemTable[i].id != 0x00 )
    688            {
    689              if( zgItemTable[i].id == id )
    690              {
    691                if ( zgItemTable[i].len == len )
    692                {
    693                  osal_memcpy( zgItemTable[i].buf, buf, len );
    694                }
    695                break;
    696              }
    697              // Move on to the next item
    698              i++;
   \                     ??zgSetItem_1:
   \   000009   0E           INC     R6
   \                     ??zgSetItem_0:
   \   00000A   EE           MOV     A,R6
   \   00000B   F8           MOV     R0,A
   \   00000C   7900         MOV     R1,#0x0
   \   00000E   E8           MOV     A,R0
   \   00000F   75F006       MOV     B,#0x6
   \   000012   A4           MUL     AB
   \   000013   C8           XCH     A,R0
   \   000014   AFF0         MOV     R7,B
   \   000016   75F000       MOV     B,#0x0
   \   000019   A4           MUL     AB
   \   00001A   2F           ADD     A,R7
   \   00001B   FF           MOV     R7,A
   \   00001C   75F006       MOV     B,#0x6
   \   00001F   E9           MOV     A,R1
   \   000020   A4           MUL     AB
   \   000021   2F           ADD     A,R7
   \   000022   F9           MOV     R1,A
   \   000023   74..         MOV     A,#zgItemTable & 0xff
   \   000025   28           ADD     A,R0
   \   000026   F582         MOV     DPL,A
   \   000028   74..         MOV     A,#(zgItemTable >> 8) & 0xff
   \   00002A   39           ADDC    A,R1
   \   00002B   F583         MOV     DPH,A
   \   00002D   E4           CLR     A
   \   00002E   93           MOVC    A,@A+DPTR
   \   00002F   F8           MOV     R0,A
   \   000030   7401         MOV     A,#0x1
   \   000032   93           MOVC    A,@A+DPTR
   \   000033   F9           MOV     R1,A
   \   000034   E8           MOV     A,R0
   \   000035   49           ORL     A,R1
   \   000036   7003         JNZ     $+5
   \   000038   02....       LJMP    ??zgSetItem_2 & 0xFFFF
   \   00003B   EE           MOV     A,R6
   \   00003C   F8           MOV     R0,A
   \   00003D   7900         MOV     R1,#0x0
   \   00003F   E8           MOV     A,R0
   \   000040   75F006       MOV     B,#0x6
   \   000043   A4           MUL     AB
   \   000044   C8           XCH     A,R0
   \   000045   AFF0         MOV     R7,B
   \   000047   75F000       MOV     B,#0x0
   \   00004A   A4           MUL     AB
   \   00004B   2F           ADD     A,R7
   \   00004C   FF           MOV     R7,A
   \   00004D   75F006       MOV     B,#0x6
   \   000050   E9           MOV     A,R1
   \   000051   A4           MUL     AB
   \   000052   2F           ADD     A,R7
   \   000053   F9           MOV     R1,A
   \   000054   74..         MOV     A,#zgItemTable & 0xff
   \   000056   28           ADD     A,R0
   \   000057   F582         MOV     DPL,A
   \   000059   74..         MOV     A,#(zgItemTable >> 8) & 0xff
   \   00005B   39           ADDC    A,R1
   \   00005C   F583         MOV     DPH,A
   \   00005E   E4           CLR     A
   \   00005F   93           MOVC    A,@A+DPTR
   \   000060   F8           MOV     R0,A
   \   000061   7401         MOV     A,#0x1
   \   000063   93           MOVC    A,@A+DPTR
   \   000064   F9           MOV     R1,A
   \   000065   EA           MOV     A,R2
   \   000066   68           XRL     A,R0
   \   000067   7002         JNZ     ??zgSetItem_3
   \   000069   EB           MOV     A,R3
   \   00006A   69           XRL     A,R1
   \                     ??zgSetItem_3:
   \   00006B   709C         JNZ     ??zgSetItem_1
   \   00006D   EE           MOV     A,R6
   \   00006E   F8           MOV     R0,A
   \   00006F   7900         MOV     R1,#0x0
   \   000071   E8           MOV     A,R0
   \   000072   75F006       MOV     B,#0x6
   \   000075   A4           MUL     AB
   \   000076   C8           XCH     A,R0
   \   000077   AAF0         MOV     R2,B
   \   000079   75F000       MOV     B,#0x0
   \   00007C   A4           MUL     AB
   \   00007D   2A           ADD     A,R2
   \   00007E   FA           MOV     R2,A
   \   00007F   75F006       MOV     B,#0x6
   \   000082   E9           MOV     A,R1
   \   000083   A4           MUL     AB
   \   000084   2A           ADD     A,R2
   \   000085   F9           MOV     R1,A
   \   000086   74..         MOV     A,#(zgItemTable + 2) & 0xff
   \   000088   28           ADD     A,R0
   \   000089   F582         MOV     DPL,A
   \   00008B   74..         MOV     A,#((zgItemTable + 2) >> 8) & 0xff
   \   00008D   39           ADDC    A,R1
   \   00008E   F583         MOV     DPH,A
   \   000090   E4           CLR     A
   \   000091   93           MOVC    A,@A+DPTR
   \   000092   F8           MOV     R0,A
   \   000093   7401         MOV     A,#0x1
   \   000095   93           MOVC    A,@A+DPTR
   \   000096   F9           MOV     R1,A
   \   000097   EC           MOV     A,R4
   \   000098   68           XRL     A,R0
   \   000099   7002         JNZ     ??zgSetItem_4
   \   00009B   ED           MOV     A,R5
   \   00009C   69           XRL     A,R1
   \                     ??zgSetItem_4:
   \   00009D   7046         JNZ     ??zgSetItem_2
   \   00009F                ; Setup parameters for call to function osal_memcpy
   \   00009F   740B         MOV     A,#0xb
   \   0000A1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   F5..         MOV     ?V0,A
   \   0000A7   A3           INC     DPTR
   \   0000A8   E0           MOVX    A,@DPTR
   \   0000A9   F5..         MOV     ?V1,A
   \   0000AB   75..00       MOV     ?V2,#0x0
   \   0000AE   78..         MOV     R0,#?V0
   \   0000B0   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000B3   EE           MOV     A,R6
   \   0000B4   F8           MOV     R0,A
   \   0000B5   7900         MOV     R1,#0x0
   \   0000B7   E8           MOV     A,R0
   \   0000B8   75F006       MOV     B,#0x6
   \   0000BB   A4           MUL     AB
   \   0000BC   C8           XCH     A,R0
   \   0000BD   AAF0         MOV     R2,B
   \   0000BF   75F000       MOV     B,#0x0
   \   0000C2   A4           MUL     AB
   \   0000C3   2A           ADD     A,R2
   \   0000C4   FA           MOV     R2,A
   \   0000C5   75F006       MOV     B,#0x6
   \   0000C8   E9           MOV     A,R1
   \   0000C9   A4           MUL     AB
   \   0000CA   2A           ADD     A,R2
   \   0000CB   F9           MOV     R1,A
   \   0000CC   74..         MOV     A,#(zgItemTable + 4) & 0xff
   \   0000CE   28           ADD     A,R0
   \   0000CF   F582         MOV     DPL,A
   \   0000D1   74..         MOV     A,#((zgItemTable + 4) >> 8) & 0xff
   \   0000D3   39           ADDC    A,R1
   \   0000D4   F583         MOV     DPH,A
   \   0000D6   E4           CLR     A
   \   0000D7   93           MOVC    A,@A+DPTR
   \   0000D8   FA           MOV     R2,A
   \   0000D9   7401         MOV     A,#0x1
   \   0000DB   93           MOVC    A,@A+DPTR
   \   0000DC   FB           MOV     R3,A
   \   0000DD   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000E0   7403         MOV     A,#0x3
   \   0000E2   12....       LCALL   ?DEALLOC_XSTACK8
    699            }
    700          }
   \                     ??zgSetItem_2:
   \   0000E5   7F03         MOV     R7,#0x3
   \   0000E7   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgPollRate>`:
   \   000000   E803         DW 1000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgQueuedPollRate>`:
   \   000000   6400         DW 100

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgResponsePollRate>`:
   \   000000   6400         DW 100

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgRejoinPollRate>`:
   \   000000   B801         DW 440

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgMaxDataRetries>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgMaxPollFailureRetries>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgDefaultChannelList>`:
   \   000000   00200000     DD 8192

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgDefaultStartingScanDuratio`:
   \   000000   05           DB 5

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgStackProfile>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgIndirectMsgTimeout>`:
   \   000000   07           DB 7

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgSecurePermitJoin>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgRouteDiscoveryTime>`:
   \   000000   05           DB 5

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgRouteExpiryTime>`:
   \   000000   1E           DB 30

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgMaxBcastRetires>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgPassiveAckTimeout>`:
   \   000000   05           DB 5

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgBcastDeliveryTime>`:
   \   000000   1E           DB 30

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgNwkMode>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgConcentratorRadius>`:
   \   000000   0A           DB 10

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgNwkSrcRtgExpiryTime>`:
   \   000000   0A           DB 10

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgNwkLeaveRequestAllowed>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApscMaxFrameRetries>`:
   \   000000   03           DB 3

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApscAckWaitDurationPolled>`:
   \   000000   B80B         DW 3000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApsAckWaitMultiplier>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApsDefaultMaxBindingTime>`:
   \   000000   803E         DW 16000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApsUseInsecureJoin>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApsNonMemberRadius>`:
   \   000000   02           DB 2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgNwkCommissionedNwkAddr>`:
   \   000000   FEFF         DW 65534

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApscDupRejTimeoutInc>`:
   \   000000   E803         DW 1000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApscDupRejTimeoutCount>`:
   \   000000   0A           DB 10

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApsMinDupRejTableSize>`:
   \   000000   0500         DW 5

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgApsLinkKeyType>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgConfigPANID>`:
   \   000000   CDAB         DW 43981

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgStartDelay>`:
   \   000000   0A           DB 10

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgNwkMgrMinTransmissions>`:
   \   000000   14           DB 20

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgNwkMgrMode>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zgSapiEndpoint>`:
   \   000000   E0           DB 224

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zgItemInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zgItemInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zgInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zgInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zgInitItems::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zgInitItems

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zgReadStartupOptions::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zgReadStartupOptions

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zgWriteStartupOptions::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zgWriteStartupOptions

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zgSetItem::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zgSetItem
    701          
    702          #ifndef NONWK
    703          /*********************************************************************
    704           * @fn       zgPreconfigKeyInit()
    705           *
    706           * @brief
    707           *
    708           *   Initialize ZCD_NV_PRECFGKEY NV item. If the item doesn't exist in NV memory,
    709           *   write the system default (value passed in) into NV memory. But if
    710           *   it exists do not overwrite it.
    711           *
    712           *   Also, if setDefault is TRUE and the item exists, we will write
    713           *   the default value to NV space.
    714           *
    715           * @param   setDefault - TRUE to set default
    716           *
    717           * @return  ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
    718           *          exist in NV, NV_OPER_FAILED if failure.
    719           */
    720          static uint8 zgPreconfigKeyInit( uint8 setDefault )
    721          {
    722            uint8 zgPreConfigKey[SEC_KEY_LEN];
    723            uint8 status;
    724          
    725            // Initialize the Pre-Configured Key to the default key
    726            osal_memcpy( zgPreConfigKey, defaultKey, SEC_KEY_LEN );
    727          
    728            // If the item doesn't exist in NV memory, create and initialize it
    729            status = osal_nv_item_init( ZCD_NV_PRECFGKEY, SEC_KEY_LEN, zgPreConfigKey );
    730            if ( status == ZSUCCESS )
    731            {
    732              if ( setDefault )
    733              {
    734                // Write the default value back to NV
    735                status =  osal_nv_write( ZCD_NV_PRECFGKEY, 0, SEC_KEY_LEN, zgPreConfigKey );
    736              }
    737            }
    738          
    739            // clear local copy of default key
    740            osal_memset(zgPreConfigKey, 0x00, SEC_KEY_LEN);
    741          
    742            return (status);
    743          }
    744          #endif
    745          
    746          /*********************************************************************
    747          *********************************************************************/

   Maximum stack usage in bytes:

   XSTACK Function
   ------ --------
      9   zgInit
        9   -> ZMacGetReq
        9   -> zgInitItems
        9   -> zgReadStartupOptions
        9   -> zgWriteStartupOptions
     20   zgInitItems
       11   -> zgItemInit
     28   zgItemInit
       15   -> osal_nv_item_init
       17   -> osal_nv_read
       17   -> osal_nv_write
     24   zgReadStartupOptions
       13   -> osal_nv_item_init
       15   -> osal_nv_read
     16   zgSetItem
       14   -> osal_memcpy
     24   zgWriteStartupOptions
       15   -> osal_nv_read
       15   -> osal_nv_write


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for zgApsAckWaitMultiplier>
       2  ?<Initializer for zgApsDefaultMaxBindingTime>
       1  ?<Initializer for zgApsLinkKeyType>
       2  ?<Initializer for zgApsMinDupRejTableSize>
       1  ?<Initializer for zgApsNonMemberRadius>
       1  ?<Initializer for zgApsUseInsecureJoin>
       2  ?<Initializer for zgApscAckWaitDurationPolled>
       1  ?<Initializer for zgApscDupRejTimeoutCount>
       2  ?<Initializer for zgApscDupRejTimeoutInc>
       1  ?<Initializer for zgApscMaxFrameRetries>
       1  ?<Initializer for zgBcastDeliveryTime>
       1  ?<Initializer for zgConcentratorRadius>
       2  ?<Initializer for zgConfigPANID>
       4  ?<Initializer for zgDefaultChannelList>
       1  ?<Initializer for zgDefaultStartingScanDuratio
       1  ?<Initializer for zgIndirectMsgTimeout>
       1  ?<Initializer for zgMaxBcastRetires>
       1  ?<Initializer for zgMaxDataRetries>
       1  ?<Initializer for zgMaxPollFailureRetries>
       2  ?<Initializer for zgNwkCommissionedNwkAddr>
       1  ?<Initializer for zgNwkLeaveRequestAllowed>
       1  ?<Initializer for zgNwkMgrMinTransmissions>
       1  ?<Initializer for zgNwkMgrMode>
       1  ?<Initializer for zgNwkMode>
       1  ?<Initializer for zgNwkSrcRtgExpiryTime>
       1  ?<Initializer for zgPassiveAckTimeout>
       2  ?<Initializer for zgPollRate>
       2  ?<Initializer for zgQueuedPollRate>
       2  ?<Initializer for zgRejoinPollRate>
       2  ?<Initializer for zgResponsePollRate>
       1  ?<Initializer for zgRouteDiscoveryTime>
       1  ?<Initializer for zgRouteExpiryTime>
       1  ?<Initializer for zgSapiEndpoint>
       1  ?<Initializer for zgSecurePermitJoin>
       1  ?<Initializer for zgStackProfile>
       1  ?<Initializer for zgStartDelay>
       1  zgApsAckWaitMultiplier
       1  zgApsAllowR19Sec
       2  zgApsDefaultMaxBindingTime
       1  zgApsLinkKeyType
       2  zgApsMinDupRejTableSize
       1  zgApsNonMemberRadius
       8  zgApsTrustCenterAddr
       8  zgApsUseExtendedPANID
       1  zgApsUseInsecureJoin
       2  zgApscAckWaitDurationPolled
       1  zgApscDupRejTimeoutCount
       2  zgApscDupRejTimeoutInc
       1  zgApscMaxFrameRetries
       1  zgBcastDeliveryTime
       1  zgChildAgingEnable
       1  zgConcentratorDiscoveryTime
       1  zgConcentratorEnable
       1  zgConcentratorRC
       1  zgConcentratorRadius
       2  zgConfigPANID
       4  zgDefaultChannelList
       1  zgDefaultStartingScanDuration
       1  zgDeviceLogicalType
       8  zgExtendedPANID
       1  zgIndirectMsgTimeout
      52  zgInit
       6  zgInit::?relay
     227  zgInitItems
       6  zgInitItems::?relay
     120  zgItemInit
       6  zgItemInit::?relay
     306  zgItemTable
       1  zgMaxBcastRetires
       1  zgMaxDataRetries
       1  zgMaxPollFailureRetries
       2  zgNwkCommissionedNwkAddr
       1  zgNwkLeaveRequestAllowed
       1  zgNwkMgrMinTransmissions
       1  zgNwkMgrMode
       1  zgNwkMode
       1  zgNwkSrcRtgExpiryTime
       1  zgPassiveAckTimeout
       2  zgPollRate
       1  zgPreConfigKeys
       2  zgQueuedPollRate
     110  zgReadStartupOptions
       6  zgReadStartupOptions::?relay
       2  zgRejoinPollRate
       2  zgResponsePollRate
       1  zgRouteDiscoveryTime
       1  zgRouteExpiryTime
       1  zgRouterOffAssocCleanup
       1  zgSapiEndpoint
       1  zgSecurePermitJoin
       1  zgSecurityMode
     234  zgSetItem
       6  zgSetItem::?relay
       1  zgStackProfile
       1  zgStartDelay
       1  zgUseDefaultTCLK
     149  zgWriteStartupOptions
       6  zgWriteStartupOptions::?relay
       1  zgZdoDirectCB

 
 892 bytes in segment BANKED_CODE
  36 bytes in segment BANK_RELAYS
 306 bytes in segment CODE_C
  49 bytes in segment XDATA_I
  49 bytes in segment XDATA_ID
  35 bytes in segment XDATA_Z
 
 1 283 bytes of CODE  memory
    84 bytes of XDATA memory

Errors: none
Warnings: none

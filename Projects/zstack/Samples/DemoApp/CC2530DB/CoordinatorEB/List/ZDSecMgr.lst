###############################################################################
#
# IAR C/C++ Compiler V9.20.1.2476 for 8051                22/Feb/2017  14:31:46
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\koen\ZigBee-Code-WTWS\Components\stack\zdo\ZDSecMgr.c
#    Command line       =  
#        -f
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00002000 -DZDAPP_CONFIG_PAN_ID=0xABCD
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={'H', 'O', 'G', 'E', 'S',
#        'C', 'H', 'O', 'O', 'L', 'U', 'T', 'R', 'E', 'C', 'H'}"
#        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440
#        C:\Users\koen\ZigBee-Code-WTWS\Components\stack\zdo\ZDSecMgr.c -D
#        HOLD_AUTO_START -D BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D
#        NV_RESTORE -D HAL_UART=TRUE -lC
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\
#        -lA
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\
#        --diag_suppress Pe001,Pa010,Pe1665 -o
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\Obj\
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\Source\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ol --require_prototypes
#    List file          =  
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\ZDSecMgr.lst
#    Object file        =  
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\Obj\ZDSecMgr.r51
#
###############################################################################

C:\Users\koen\ZigBee-Code-WTWS\Components\stack\zdo\ZDSecMgr.c
      1          /******************************************************************************
      2            Filename:       ZDSecMgr.c
      3            Revised:        $Date: 2014-06-05 11:25:00 -0700 (Thu, 05 Jun 2014) $
      4            Revision:       $Revision: 38833 $
      5          
      6            Description:    The ZigBee Device Security Manager.
      7          
      8          
      9            Copyright 2005-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          ******************************************************************************/
     39          
     40          #ifdef __cplusplus
     41          extern "C"
     42          {
     43          #endif
     44          
     45          /******************************************************************************
     46           * INCLUDES
     47           */
     48          #include "ZComDef.h"
     49          #include "OSAL.h"
     50          #include "OSAL_Nv.h"
     51          #include "ZGlobals.h"
     52          #include "ssp.h"
     53          #include "nwk_globals.h"
     54          #include "nwk.h"
     55          #include "NLMEDE.h"
     56          #include "AddrMgr.h"
     57          #include "AssocList.h"
     58          #include "APSMEDE.h"
     59          #include "ZDConfig.h"
     60          #include "ZDSecMgr.h"
     61          
     62          /******************************************************************************
     63           * CONSTANTS
     64           */
     65          // maximum number of devices managed by this Security Manager
     66          #if !defined ( ZDSECMGR_DEVICE_MAX )
     67            #define ZDSECMGR_DEVICE_MAX 3
     68          #endif
     69          
     70          // maximum number of LINK keys this device may store
     71          #define ZDSECMGR_ENTRY_MAX ZDSECMGR_DEVICE_MAX
     72          
     73          // total number of stored devices
     74          #if !defined ( ZDSECMGR_STORED_DEVICES )
     75            #define ZDSECMGR_STORED_DEVICES 3
     76          #endif
     77          
     78          // Total number of preconfigured trust center link key
     79          #if !defined ( ZDSECMGR_TC_DEVICE_MAX )
     80            #define ZDSECMGR_TC_DEVICE_MAX 1
     81          #endif
     82          
     83          #if ( ZDSECMGR_TC_DEVICE_MAX < 1 ) || ( ZDSECMGR_TC_DEVICE_MAX > 255 )
     84            #error "ZDSECMGR_TC_DEVICE_MAX shall be between 1 and 255 !"
     85          #endif
     86          
     87          // APSME Stub Implementations
     88          #define ZDSecMgrLinkKeySet     APSME_LinkKeySet
     89          #define ZDSecMgrLinkKeyNVIdGet APSME_LinkKeyNVIdGet
     90          #define ZDSecMgrKeyFwdToChild  APSME_KeyFwdToChild
     91          #define ZDSecMgrIsLinkKeyValid APSME_IsLinkKeyValid
     92          
     93          /******************************************************************************
     94           * TYPEDEFS
     95           */
     96          typedef struct
     97          {
     98            uint16            ami;
     99            uint16            keyNvId;   // index to the Link Key table in NV
    100            ZDSecMgr_Authentication_Option authenticateOption;
    101          } ZDSecMgrEntry_t;
    102          
    103          typedef struct
    104          {
    105            uint16          nwkAddr;
    106            uint8*          extAddr;
    107            uint16          parentAddr;
    108            uint8           secure;
    109            uint8           devStatus;
    110          } ZDSecMgrDevice_t;
    111          
    112          /******************************************************************************
    113           * EXTERNAL VARIABLES
    114           */
    115          extern pfnZdoCb zdoCBFunc[MAX_ZDO_CB_FUNC];
    116          
    117          /******************************************************************************
    118           * LOCAL VARIABLES
    119           */
    120          #if 0 // Taken out because the following functionality is only used for test
    121                // purpose. A more efficient (above) way is used. It can be put
    122                // back in if customers request for a white/black list feature.
    123          uint8 ZDSecMgrStoredDeviceList[ZDSECMGR_STORED_DEVICES][Z_EXTADDR_LEN] =
    124          {
    125            { 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    126            { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 },
    127            { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    128          };
    129          #endif
    130          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    131          uint8 ZDSecMgrTCExtAddr[Z_EXTADDR_LEN]=
   \                     ZDSecMgrTCExtAddr:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
    132            { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
    133          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    134          uint8 ZDSecMgrTCAuthenticated = FALSE;
   \                     ZDSecMgrTCAuthenticated:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    135          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    136          ZDSecMgrEntry_t* ZDSecMgrEntries  = NULL;
   \                     ZDSecMgrEntries:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    137          
    138          void ZDSecMgrAddrMgrCB( uint8 update, AddrMgrEntry_t* newEntry, AddrMgrEntry_t* oldEntry );
    139          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    140          uint8 ZDSecMgrPermitJoiningEnabled;
   \                     ZDSecMgrPermitJoiningEnabled:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    141          uint8 ZDSecMgrPermitJoiningTimed;
   \                     ZDSecMgrPermitJoiningTimed:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    142          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    143          APSME_TCLinkKey_t TrustCenterLinkKey;
   \                     TrustCenterLinkKey:
   \   000000                DS 32
   \   000020                REQUIRE __INIT_XDATA_Z
    144          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    145          APSME_ApsLinkKeyFrmCntr_t ApsLinkKeyFrmCntr[ZDSECMGR_ENTRY_MAX];
   \                     ApsLinkKeyFrmCntr:
   \   000000                DS 27
   \   00001B                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    146          APSME_TCLinkKeyFrmCntr_t TCLinkKeyFrmCntr[ZDSECMGR_TC_DEVICE_MAX];
   \                     TCLinkKeyFrmCntr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z
    147          
    148          /******************************************************************************
    149           * PRIVATE FUNCTIONS
    150           *
    151           *   ZDSecMgrAddrStore
    152           *   ZDSecMgrExtAddrStore
    153           *   ZDSecMgrExtAddrLookup
    154           *   ZDSecMgrEntryInit
    155           *   ZDSecMgrEntryLookup
    156           *   ZDSecMgrEntryLookupAMI
    157           *   ZDSecMgrEntryLookupExt
    158           *   ZDSecMgrEntryLookupExtGetIndex
    159           *   ZDSecMgrEntryFree
    160           *   ZDSecMgrEntryNew
    161           *   ZDSecMgrAppKeyGet
    162           *   ZDSecMgrAppKeyReq
    163           *   ZDSecMgrSendNwkKey
    164           *   ZDSecMgrDeviceRemove
    165           *   ZDSecMgrDeviceValidateRM
    166           *   ZDSecMgrDeviceValidate
    167           *   ZDSecMgrDeviceJoin
    168           *   ZDSecMgrDeviceJoinDirect
    169           *   ZDSecMgrDeviceJoinFwd
    170           *   ZDSecMgrDeviceNew
    171           *   ZDSecMgrAssocDeviceAuth
    172           *   ZDSecMgrAuthNwkKey
    173           *   APSME_TCLinkKeyInit
    174           *   APSME_IsDefaultTCLK
    175           */
    176          
    177          //-----------------------------------------------------------------------------
    178          // address management
    179          //-----------------------------------------------------------------------------
    180          ZStatus_t ZDSecMgrAddrStore( uint16 nwkAddr, uint8* extAddr, uint16* ami );
    181          ZStatus_t ZDSecMgrExtAddrStore( uint16 nwkAddr, uint8* extAddr, uint16* ami );
    182          ZStatus_t ZDSecMgrExtAddrLookup( uint8* extAddr, uint16* ami );
    183          
    184          //-----------------------------------------------------------------------------
    185          // Trust Center management
    186          //-----------------------------------------------------------------------------
    187          uint8 ZDSecMgrTCExtAddrCheck( uint8* extAddr );
    188          void ZDSecMgrTCDataLoad( uint8* extAddr );
    189          
    190          //-----------------------------------------------------------------------------
    191          // entry data
    192          //-----------------------------------------------------------------------------
    193          void ZDSecMgrEntryInit(uint8 state);
    194          ZStatus_t ZDSecMgrEntryLookup( uint16 nwkAddr, ZDSecMgrEntry_t** entry );
    195          ZStatus_t ZDSecMgrEntryLookupAMI( uint16 ami, ZDSecMgrEntry_t** entry );
    196          ZStatus_t ZDSecMgrEntryLookupExt( uint8* extAddr, ZDSecMgrEntry_t** entry );
    197          ZStatus_t ZDSecMgrEntryLookupExtGetIndex( uint8* extAddr, ZDSecMgrEntry_t** entry, uint16* entryIndex );
    198          ZStatus_t ZDSecMgrEntryLookupAMIGetIndex( uint16 ami, uint16* entryIndex );
    199          void ZDSecMgrEntryFree( ZDSecMgrEntry_t* entry );
    200          ZStatus_t ZDSecMgrEntryNew( ZDSecMgrEntry_t** entry );
    201          ZStatus_t ZDSecMgrAuthenticationSet( uint8* extAddr, ZDSecMgr_Authentication_Option option );
    202          void ZDSecMgrApsLinkKeyInit(void);
    203          #if defined ( NV_RESTORE )
    204          static void ZDSecMgrWriteNV(void);
    205          static void ZDSecMgrRestoreFromNV(void);
    206          static void ZDSecMgrUpdateNV( uint16 index );
    207          #endif
    208          
    209          //-----------------------------------------------------------------------------
    210          // key support
    211          //-----------------------------------------------------------------------------
    212          ZStatus_t ZDSecMgrAppKeyGet( uint16  initNwkAddr,
    213                                       uint8*  initExtAddr,
    214                                       uint16  partNwkAddr,
    215                                       uint8*  partExtAddr,
    216                                       uint8** key,
    217                                       uint8*  keyType );
    218          void ZDSecMgrAppKeyReq( ZDO_RequestKeyInd_t* ind );
    219          ZStatus_t ZDSecMgrSendNwkKey( ZDSecMgrDevice_t* device );
    220          void ZDSecMgrNwkKeyInit(uint8 setDefault);
    221          
    222          //-----------------------------------------------------------------------------
    223          // device management
    224          //-----------------------------------------------------------------------------
    225          void ZDSecMgrDeviceRemove( ZDSecMgrDevice_t* device );
    226          ZStatus_t ZDSecMgrDeviceValidateRM( ZDSecMgrDevice_t* device );
    227          ZStatus_t ZDSecMgrDeviceValidate( ZDSecMgrDevice_t* device );
    228          ZStatus_t ZDSecMgrDeviceJoin( ZDSecMgrDevice_t* device );
    229          ZStatus_t ZDSecMgrDeviceJoinDirect( ZDSecMgrDevice_t* device );
    230          ZStatus_t ZDSecMgrDeviceJoinFwd( ZDSecMgrDevice_t* device );
    231          ZStatus_t ZDSecMgrDeviceNew( ZDSecMgrDevice_t* device );
    232          
    233          //-----------------------------------------------------------------------------
    234          // association management
    235          //-----------------------------------------------------------------------------
    236          void ZDSecMgrAssocDeviceAuth( associated_devices_t* assoc );
    237          
    238          //-----------------------------------------------------------------------------
    239          // authentication management
    240          //-----------------------------------------------------------------------------
    241          void ZDSecMgrAuthNwkKey( void );
    242          
    243          //-----------------------------------------------------------------------------
    244          // APSME function
    245          //-----------------------------------------------------------------------------
    246          void APSME_TCLinkKeyInit( uint8 setDefault );
    247          uint8 APSME_IsDefaultTCLK( uint8 *extAddr );
    248          
    249          /******************************************************************************
    250           * @fn          ZDSecMgrAddrStore
    251           *
    252           * @brief       Store device addresses.
    253           *
    254           * @param       nwkAddr - [in] NWK address
    255           * @param       extAddr - [in] EXT address
    256           * @param       ami     - [out] Address Manager index
    257           *
    258           * @return      ZStatus_t
    259           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    260          ZStatus_t ZDSecMgrAddrStore( uint16 nwkAddr, uint8* extAddr, uint16* ami )
   \                     ZDSecMgrAddrStore:
    261          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    262            ZStatus_t      status;
    263            AddrMgrEntry_t entry;
    264          
    265          
    266            // add entry
    267            entry.user    = ADDRMGR_USER_SECURITY;
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   7402         MOV     A,#0x2
   \   000012   F0           MOVX    @DPTR,A
    268            entry.nwkAddr = nwkAddr;
   \   000013   7401         MOV     A,#0x1
   \   000015   12....       LCALL   ?XSTACK_DISP0_8
   \   000018   EA           MOV     A,R2
   \   000019   F0           MOVX    @DPTR,A
   \   00001A   A3           INC     DPTR
   \   00001B   EB           MOV     A,R3
   \   00001C   F0           MOVX    @DPTR,A
    269            AddrMgrExtAddrSet( entry.extAddr, extAddr );
   \   00001D                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   00001D   7403         MOV     A,#0x3
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   AA82         MOV     R2,DPL
   \   000024   AB83         MOV     R3,DPH
   \   000026   12....       LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   \   000029   7416         MOV     A,#0x16
   \   00002B   12....       LCALL   ?XSTACK_DISP0_8
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F8           MOV     R0,A
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F9           MOV     R1,A
   \   000033   E8           MOV     A,R0
   \   000034   FE           MOV     R6,A
   \   000035   E9           MOV     A,R1
   \   000036   FF           MOV     R7,A
    270          
    271            if ( AddrMgrEntryUpdate( &entry ) == TRUE )
   \   000037                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000037   AA..         MOV     R2,?XSP + 0
   \   000039   AB..         MOV     R3,?XSP + 1
   \   00003B   12....       LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   \   00003E   E9           MOV     A,R1
   \   00003F   6401         XRL     A,#0x1
   \   000041   7017         JNZ     ??ZDSecMgrAddrStore_0
    272            {
    273              // return successful results
    274              *ami   = entry.index;
   \   000043   740B         MOV     A,#0xb
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   E0           MOVX    A,@DPTR
   \   000049   F8           MOV     R0,A
   \   00004A   A3           INC     DPTR
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   F9           MOV     R1,A
   \   00004D   8E82         MOV     DPL,R6
   \   00004F   8F83         MOV     DPH,R7
   \   000051   E8           MOV     A,R0
   \   000052   F0           MOVX    @DPTR,A
   \   000053   A3           INC     DPTR
   \   000054   E9           MOV     A,R1
   \   000055   F0           MOVX    @DPTR,A
    275              status = ZSuccess;
   \   000056   7900         MOV     R1,#0x0
   \   000058   8015         SJMP    ??ZDSecMgrAddrStore_1
    276            }
    277            else
    278            {
    279              // return failed results
    280              *ami   = entry.index;
   \                     ??ZDSecMgrAddrStore_0:
   \   00005A   740B         MOV     A,#0xb
   \   00005C   12....       LCALL   ?XSTACK_DISP0_8
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   F8           MOV     R0,A
   \   000061   A3           INC     DPTR
   \   000062   E0           MOVX    A,@DPTR
   \   000063   F9           MOV     R1,A
   \   000064   8E82         MOV     DPL,R6
   \   000066   8F83         MOV     DPH,R7
   \   000068   E8           MOV     A,R0
   \   000069   F0           MOVX    @DPTR,A
   \   00006A   A3           INC     DPTR
   \   00006B   E9           MOV     A,R1
   \   00006C   F0           MOVX    @DPTR,A
    281              status = ZNwkUnknownDevice;
   \   00006D   79C8         MOV     R1,#-0x38
    282            }
    283          
    284            return status;
   \                     ??ZDSecMgrAddrStore_1:
   \   00006F   740D         MOV     A,#0xd
   \   000071   12....       LCALL   ?DEALLOC_XSTACK8
   \   000074   7F01         MOV     R7,#0x1
   \   000076   02....       LJMP    ?BANKED_LEAVE_XDATA
    285          }
    286          
    287          /******************************************************************************
    288           * @fn          ZDSecMgrExtAddrStore
    289           *
    290           * @brief       Store EXT address.
    291           *
    292           * @param       extAddr - [in] EXT address
    293           * @param       ami     - [out] Address Manager index
    294           *
    295           * @return      ZStatus_t
    296           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    297          ZStatus_t ZDSecMgrExtAddrStore( uint16 nwkAddr, uint8* extAddr, uint16* ami )
   \                     ZDSecMgrExtAddrStore:
    298          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    299            ZStatus_t      status;
    300            AddrMgrEntry_t entry;
    301          
    302          
    303            // add entry
    304            entry.user    = ADDRMGR_USER_SECURITY;
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   7402         MOV     A,#0x2
   \   000012   F0           MOVX    @DPTR,A
    305            entry.nwkAddr = nwkAddr;
   \   000013   7401         MOV     A,#0x1
   \   000015   12....       LCALL   ?XSTACK_DISP0_8
   \   000018   EA           MOV     A,R2
   \   000019   F0           MOVX    @DPTR,A
   \   00001A   A3           INC     DPTR
   \   00001B   EB           MOV     A,R3
   \   00001C   F0           MOVX    @DPTR,A
    306            AddrMgrExtAddrSet( entry.extAddr, extAddr );
   \   00001D                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   00001D   7403         MOV     A,#0x3
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   AA82         MOV     R2,DPL
   \   000024   AB83         MOV     R3,DPH
   \   000026   12....       LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   \   000029   7416         MOV     A,#0x16
   \   00002B   12....       LCALL   ?XSTACK_DISP0_8
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F8           MOV     R0,A
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F9           MOV     R1,A
   \   000033   E8           MOV     A,R0
   \   000034   FE           MOV     R6,A
   \   000035   E9           MOV     A,R1
   \   000036   FF           MOV     R7,A
    307          
    308            if ( AddrMgrEntryUpdate( &entry ) == TRUE )
   \   000037                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000037   AA..         MOV     R2,?XSP + 0
   \   000039   AB..         MOV     R3,?XSP + 1
   \   00003B   12....       LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   \   00003E   E9           MOV     A,R1
   \   00003F   6401         XRL     A,#0x1
   \   000041   7017         JNZ     ??ZDSecMgrExtAddrStore_0
    309            {
    310              // return successful results
    311              *ami   = entry.index;
   \   000043   740B         MOV     A,#0xb
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   E0           MOVX    A,@DPTR
   \   000049   F8           MOV     R0,A
   \   00004A   A3           INC     DPTR
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   F9           MOV     R1,A
   \   00004D   8E82         MOV     DPL,R6
   \   00004F   8F83         MOV     DPH,R7
   \   000051   E8           MOV     A,R0
   \   000052   F0           MOVX    @DPTR,A
   \   000053   A3           INC     DPTR
   \   000054   E9           MOV     A,R1
   \   000055   F0           MOVX    @DPTR,A
    312              status = ZSuccess;
   \   000056   7900         MOV     R1,#0x0
   \   000058   8015         SJMP    ??ZDSecMgrExtAddrStore_1
    313            }
    314            else
    315            {
    316              // return failed results
    317              *ami   = entry.index;
   \                     ??ZDSecMgrExtAddrStore_0:
   \   00005A   740B         MOV     A,#0xb
   \   00005C   12....       LCALL   ?XSTACK_DISP0_8
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   F8           MOV     R0,A
   \   000061   A3           INC     DPTR
   \   000062   E0           MOVX    A,@DPTR
   \   000063   F9           MOV     R1,A
   \   000064   8E82         MOV     DPL,R6
   \   000066   8F83         MOV     DPH,R7
   \   000068   E8           MOV     A,R0
   \   000069   F0           MOVX    @DPTR,A
   \   00006A   A3           INC     DPTR
   \   00006B   E9           MOV     A,R1
   \   00006C   F0           MOVX    @DPTR,A
    318              status = ZNwkUnknownDevice;
   \   00006D   79C8         MOV     R1,#-0x38
    319            }
    320          
    321            return status;
   \                     ??ZDSecMgrExtAddrStore_1:
   \   00006F   740D         MOV     A,#0xd
   \   000071   12....       LCALL   ?DEALLOC_XSTACK8
   \   000074   7F01         MOV     R7,#0x1
   \   000076   02....       LJMP    ?BANKED_LEAVE_XDATA
    322          }
    323          
    324          /******************************************************************************
    325           * @fn          ZDSecMgrExtAddrLookup
    326           *
    327           * @brief       Lookup index for specified EXT address.
    328           *
    329           * @param       extAddr - [in] EXT address
    330           * @param       ami     - [out] Address Manager index
    331           *
    332           * @return      ZStatus_t
    333           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    334          ZStatus_t ZDSecMgrExtAddrLookup( uint8* extAddr, uint16* ami )
   \                     ZDSecMgrExtAddrLookup:
    335          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EC           MOV     A,R4
   \   00000B   FE           MOV     R6,A
   \   00000C   ED           MOV     A,R5
   \   00000D   FF           MOV     R7,A
    336            ZStatus_t      status;
    337            AddrMgrEntry_t entry;
    338          
    339          
    340            // lookup entry
    341            entry.user = ADDRMGR_USER_SECURITY;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   7402         MOV     A,#0x2
   \   000016   F0           MOVX    @DPTR,A
    342            AddrMgrExtAddrSet( entry.extAddr, extAddr );
   \   000017                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000017   EA           MOV     A,R2
   \   000018   FC           MOV     R4,A
   \   000019   EB           MOV     A,R3
   \   00001A   FD           MOV     R5,A
   \   00001B   7403         MOV     A,#0x3
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   AA82         MOV     R2,DPL
   \   000022   AB83         MOV     R3,DPH
   \   000024   12....       LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
    343          
    344            if ( AddrMgrEntryLookupExt( &entry ) == TRUE )
   \   000027                ; Setup parameters for call to function AddrMgrEntryLookupExt
   \   000027   AA..         MOV     R2,?XSP + 0
   \   000029   AB..         MOV     R3,?XSP + 1
   \   00002B   12....       LCALL   `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
   \   00002E   E9           MOV     A,R1
   \   00002F   6401         XRL     A,#0x1
   \   000031   7017         JNZ     ??ZDSecMgrExtAddrLookup_0
    345            {
    346              // return successful results
    347              *ami   = entry.index;
   \   000033   740B         MOV     A,#0xb
   \   000035   12....       LCALL   ?XSTACK_DISP0_8
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F8           MOV     R0,A
   \   00003A   A3           INC     DPTR
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   F9           MOV     R1,A
   \   00003D   8E82         MOV     DPL,R6
   \   00003F   8F83         MOV     DPH,R7
   \   000041   E8           MOV     A,R0
   \   000042   F0           MOVX    @DPTR,A
   \   000043   A3           INC     DPTR
   \   000044   E9           MOV     A,R1
   \   000045   F0           MOVX    @DPTR,A
    348              status = ZSuccess;
   \   000046   7900         MOV     R1,#0x0
   \   000048   8015         SJMP    ??ZDSecMgrExtAddrLookup_1
    349            }
    350            else
    351            {
    352              // return failed results
    353              *ami   = entry.index;
   \                     ??ZDSecMgrExtAddrLookup_0:
   \   00004A   740B         MOV     A,#0xb
   \   00004C   12....       LCALL   ?XSTACK_DISP0_8
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   F8           MOV     R0,A
   \   000051   A3           INC     DPTR
   \   000052   E0           MOVX    A,@DPTR
   \   000053   F9           MOV     R1,A
   \   000054   8E82         MOV     DPL,R6
   \   000056   8F83         MOV     DPH,R7
   \   000058   E8           MOV     A,R0
   \   000059   F0           MOVX    @DPTR,A
   \   00005A   A3           INC     DPTR
   \   00005B   E9           MOV     A,R1
   \   00005C   F0           MOVX    @DPTR,A
    354              status = ZNwkUnknownDevice;
   \   00005D   79C8         MOV     R1,#-0x38
    355            }
    356          
    357            return status;
   \                     ??ZDSecMgrExtAddrLookup_1:
   \   00005F   740D         MOV     A,#0xd
   \   000061   12....       LCALL   ?DEALLOC_XSTACK8
   \   000064   7F01         MOV     R7,#0x1
   \   000066   02....       LJMP    ?BANKED_LEAVE_XDATA
    358          }
    359          
    360          /******************************************************************************
    361           * @fn          ZDSecMgrAddrClear
    362           *
    363           * @brief       Clear security bit from Address Manager for specific device.
    364           *
    365           * @param       extAddr - [in] EXT address
    366           *
    367           * @return      ZStatus_t
    368           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    369          ZStatus_t ZDSecMgrAddrClear( uint8* extAddr )
   \                     ZDSecMgrAddrClear:
    370          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 15
   \   000005   74F1         MOV     A,#-0xf
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    371            ZStatus_t status;
    372            uint16 entryAmi;
    373          
    374            // get Address Manager Index
    375            status = ZDSecMgrExtAddrLookup( extAddr, &entryAmi );
   \   00000A                ; Setup parameters for call to function ZDSecMgrExtAddrLookup
   \   00000A   AC..         MOV     R4,?XSP + 0
   \   00000C   AD..         MOV     R5,?XSP + 1
   \   00000E   12....       LCALL   `??ZDSecMgrExtAddrLookup::?relay`; Banked call to: ZDSecMgrExtAddrLookup
   \   000011   E9           MOV     A,R1
   \   000012   FE           MOV     R6,A
    376          
    377            if ( status == ZSuccess )
   \   000013   EE           MOV     A,R6
   \   000014   702C         JNZ     ??ZDSecMgrAddrClear_0
    378            {
    379              AddrMgrEntry_t addrEntry;
    380          
    381              // Clear SECURITY User bit from the address manager
    382              addrEntry.user = ADDRMGR_USER_SECURITY;
   \   000016   7402         MOV     A,#0x2
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   7402         MOV     A,#0x2
   \   00001D   F0           MOVX    @DPTR,A
    383              addrEntry.index = entryAmi;
   \   00001E   85..82       MOV     DPL,?XSP + 0
   \   000021   85..83       MOV     DPH,?XSP + 1
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F8           MOV     R0,A
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F9           MOV     R1,A
   \   000029   740D         MOV     A,#0xd
   \   00002B   12....       LCALL   ?XSTACK_DISP0_8
   \   00002E   E8           MOV     A,R0
   \   00002F   F0           MOVX    @DPTR,A
   \   000030   A3           INC     DPTR
   \   000031   E9           MOV     A,R1
   \   000032   F0           MOVX    @DPTR,A
    384          
    385              if ( AddrMgrEntryRelease( &addrEntry ) != TRUE )
   \   000033                ; Setup parameters for call to function AddrMgrEntryRelease
   \   000033   7402         MOV     A,#0x2
   \   000035   12....       LCALL   ?XSTACK_DISP101_8
   \   000038   12....       LCALL   `??AddrMgrEntryRelease::?relay`; Banked call to: AddrMgrEntryRelease
   \   00003B   E9           MOV     A,R1
   \   00003C   6401         XRL     A,#0x1
   \   00003E   6002         JZ      ??ZDSecMgrAddrClear_0
    386              {
    387                // return failure results
    388                status = ZFailure;
   \   000040   7E01         MOV     R6,#0x1
    389              }
    390            }
    391          
    392            return status;
   \                     ??ZDSecMgrAddrClear_0:
   \   000042   EE           MOV     A,R6
   \   000043   F9           MOV     R1,A
   \   000044   740F         MOV     A,#0xf
   \   000046   12....       LCALL   ?DEALLOC_XSTACK8
   \   000049   7F01         MOV     R7,#0x1
   \   00004B   02....       LJMP    ?BANKED_LEAVE_XDATA
    393          }
    394          
    395          /******************************************************************************
    396           * @fn          ZDSecMgrEntryInit
    397           *
    398           * @brief       Initialize entry sub module
    399           *
    400           * @param       state - device initialization state
    401           *
    402           * @return      none
    403           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    404          void ZDSecMgrEntryInit(uint8 state)
   \                     ZDSecMgrEntryInit:
    405          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    406            if (ZDSecMgrEntries == NULL)
   \   000007   90....       MOV     DPTR,#ZDSecMgrEntries
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F8           MOV     R0,A
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F9           MOV     R1,A
   \   00000F   E8           MOV     A,R0
   \   000010   49           ORL     A,R1
   \   000011   6003         JZ      $+5
   \   000013   02....       LJMP    ??ZDSecMgrEntryInit_0 & 0xFFFF
    407            {
    408              uint16 index;
    409          
    410              if ((ZDSecMgrEntries = osal_mem_alloc(sizeof(ZDSecMgrEntry_t) * ZDSECMGR_ENTRY_MAX)) == NULL)
   \   000016                ; Setup parameters for call to function osal_mem_alloc
   \   000016   7A0F         MOV     R2,#0xf
   \   000018   7B00         MOV     R3,#0x0
   \   00001A   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00001D   90....       MOV     DPTR,#ZDSecMgrEntries
   \   000020   EA           MOV     A,R2
   \   000021   F0           MOVX    @DPTR,A
   \   000022   A3           INC     DPTR
   \   000023   EB           MOV     A,R3
   \   000024   F0           MOVX    @DPTR,A
   \   000025   90....       MOV     DPTR,#ZDSecMgrEntries
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F8           MOV     R0,A
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F9           MOV     R1,A
   \   00002D   E8           MOV     A,R0
   \   00002E   49           ORL     A,R1
   \   00002F   6076         JZ      ??ZDSecMgrEntryInit_1
    411              {
    412                return;
    413              }
    414          
    415              for (index = 0; index < ZDSECMGR_ENTRY_MAX; index++)
   \   000031   7800         MOV     R0,#0x0
   \   000033   7900         MOV     R1,#0x0
   \   000035   8061         SJMP    ??ZDSecMgrEntryInit_2
    416              {
    417                ZDSecMgrEntries[index].ami = INVALID_NODE_ADDR;
   \                     ??ZDSecMgrEntryInit_3:
   \   000037   E8           MOV     A,R0
   \   000038   FA           MOV     R2,A
   \   000039   E9           MOV     A,R1
   \   00003A   FB           MOV     R3,A
   \   00003B   EA           MOV     A,R2
   \   00003C   75F005       MOV     B,#0x5
   \   00003F   A4           MUL     AB
   \   000040   CA           XCH     A,R2
   \   000041   ACF0         MOV     R4,B
   \   000043   75F000       MOV     B,#0x0
   \   000046   A4           MUL     AB
   \   000047   2C           ADD     A,R4
   \   000048   FC           MOV     R4,A
   \   000049   75F005       MOV     B,#0x5
   \   00004C   EB           MOV     A,R3
   \   00004D   A4           MUL     AB
   \   00004E   2C           ADD     A,R4
   \   00004F   FB           MOV     R3,A
   \   000050   90....       MOV     DPTR,#ZDSecMgrEntries
   \   000053   E0           MOVX    A,@DPTR
   \   000054   2A           ADD     A,R2
   \   000055   FC           MOV     R4,A
   \   000056   A3           INC     DPTR
   \   000057   E0           MOVX    A,@DPTR
   \   000058   3B           ADDC    A,R3
   \   000059   8C82         MOV     DPL,R4
   \   00005B   F583         MOV     DPH,A
   \   00005D   74FE         MOV     A,#-0x2
   \   00005F   F0           MOVX    @DPTR,A
   \   000060   A3           INC     DPTR
   \   000061   74FF         MOV     A,#-0x1
   \   000063   F0           MOVX    @DPTR,A
    418          
    419                ZDSecMgrEntries[index].keyNvId = SEC_NO_KEY_NV_ID;
   \   000064   E8           MOV     A,R0
   \   000065   FA           MOV     R2,A
   \   000066   E9           MOV     A,R1
   \   000067   FB           MOV     R3,A
   \   000068   EA           MOV     A,R2
   \   000069   75F005       MOV     B,#0x5
   \   00006C   A4           MUL     AB
   \   00006D   CA           XCH     A,R2
   \   00006E   ACF0         MOV     R4,B
   \   000070   75F000       MOV     B,#0x0
   \   000073   A4           MUL     AB
   \   000074   2C           ADD     A,R4
   \   000075   FC           MOV     R4,A
   \   000076   75F005       MOV     B,#0x5
   \   000079   EB           MOV     A,R3
   \   00007A   A4           MUL     AB
   \   00007B   2C           ADD     A,R4
   \   00007C   FB           MOV     R3,A
   \   00007D   90....       MOV     DPTR,#ZDSecMgrEntries
   \   000080   E0           MOVX    A,@DPTR
   \   000081   2A           ADD     A,R2
   \   000082   FC           MOV     R4,A
   \   000083   A3           INC     DPTR
   \   000084   E0           MOVX    A,@DPTR
   \   000085   3B           ADDC    A,R3
   \   000086   8C82         MOV     DPL,R4
   \   000088   F583         MOV     DPH,A
   \   00008A   A3           INC     DPTR
   \   00008B   A3           INC     DPTR
   \   00008C   7400         MOV     A,#0x0
   \   00008E   F0           MOVX    @DPTR,A
   \   00008F   A3           INC     DPTR
   \   000090   7400         MOV     A,#0x0
   \   000092   F0           MOVX    @DPTR,A
    420              }
   \   000093   08           INC     R0
   \   000094   E8           MOV     A,R0
   \   000095   7001         JNZ     ??ZDSecMgrEntryInit_2
   \   000097   09           INC     R1
   \                     ??ZDSecMgrEntryInit_2:
   \   000098   C3           CLR     C
   \   000099   E8           MOV     A,R0
   \   00009A   9403         SUBB    A,#0x3
   \   00009C   E9           MOV     A,R1
   \   00009D   9400         SUBB    A,#0x0
   \   00009F   4096         JC      ??ZDSecMgrEntryInit_3
    421            }
    422          
    423          #if defined NV_RESTORE
    424            if (state == ZDO_INITDEV_RESTORED_NETWORK_STATE)
   \                     ??ZDSecMgrEntryInit_0:
   \   0000A1   EE           MOV     A,R6
   \   0000A2   7003         JNZ     ??ZDSecMgrEntryInit_1
    425            {
    426              ZDSecMgrRestoreFromNV();
   \   0000A4                ; Setup parameters for call to function ZDSecMgrRestoreFromNV
   \   0000A4   12....       LCALL   `??ZDSecMgrRestoreFromNV::?relay`; Banked call to: ZDSecMgrRestoreFromNV
    427            }
    428          #else
    429            (void)state;
    430          #endif
    431          }
   \                     ??ZDSecMgrEntryInit_1:
   \   0000A7   7F01         MOV     R7,#0x1
   \   0000A9   02....       LJMP    ?BANKED_LEAVE_XDATA
    432          
    433          /******************************************************************************
    434           * @fn          ZDSecMgrEntryLookup
    435           *
    436           * @brief       Lookup entry index using specified NWK address.
    437           *
    438           * @param       nwkAddr - [in] NWK address
    439           * @param       entry   - [out] valid entry
    440           *
    441           * @return      ZStatus_t
    442           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    443          ZStatus_t ZDSecMgrEntryLookup( uint16 nwkAddr, ZDSecMgrEntry_t** entry )
   \                     ZDSecMgrEntryLookup:
    444          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EC           MOV     A,R4
   \   00000B   FE           MOV     R6,A
   \   00000C   ED           MOV     A,R5
   \   00000D   FF           MOV     R7,A
    445            uint16         index;
    446            AddrMgrEntry_t addrMgrEntry;
    447          
    448            // initialize results
    449            *entry = NULL;
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   7400         MOV     A,#0x0
   \   000014   F0           MOVX    @DPTR,A
   \   000015   A3           INC     DPTR
   \   000016   7400         MOV     A,#0x0
   \   000018   F0           MOVX    @DPTR,A
    450          
    451            // verify data is available
    452            if ( ZDSecMgrEntries != NULL )
   \   000019   90....       MOV     DPTR,#ZDSecMgrEntries
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F8           MOV     R0,A
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F9           MOV     R1,A
   \   000021   E8           MOV     A,R0
   \   000022   49           ORL     A,R1
   \   000023   7003         JNZ     $+5
   \   000025   02....       LJMP    ??ZDSecMgrEntryLookup_0 & 0xFFFF
    453            {
    454              addrMgrEntry.user    = ADDRMGR_USER_SECURITY;
   \   000028   85..82       MOV     DPL,?XSP + 0
   \   00002B   85..83       MOV     DPH,?XSP + 1
   \   00002E   7402         MOV     A,#0x2
   \   000030   F0           MOVX    @DPTR,A
    455              addrMgrEntry.nwkAddr = nwkAddr;
   \   000031   7401         MOV     A,#0x1
   \   000033   12....       LCALL   ?XSTACK_DISP0_8
   \   000036   EA           MOV     A,R2
   \   000037   F0           MOVX    @DPTR,A
   \   000038   A3           INC     DPTR
   \   000039   EB           MOV     A,R3
   \   00003A   F0           MOVX    @DPTR,A
    456          
    457              if ( AddrMgrEntryLookupNwk( &addrMgrEntry ) == TRUE )
   \   00003B                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   00003B   AA..         MOV     R2,?XSP + 0
   \   00003D   AB..         MOV     R3,?XSP + 1
   \   00003F   12....       LCALL   `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
   \   000042   E9           MOV     A,R1
   \   000043   6401         XRL     A,#0x1
   \   000045   707F         JNZ     ??ZDSecMgrEntryLookup_0
    458              {
    459                for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
   \   000047   7800         MOV     R0,#0x0
   \   000049   7900         MOV     R1,#0x0
   \   00004B   8005         SJMP    ??ZDSecMgrEntryLookup_1
   \                     ??ZDSecMgrEntryLookup_2:
   \   00004D   08           INC     R0
   \   00004E   E8           MOV     A,R0
   \   00004F   7001         JNZ     ??ZDSecMgrEntryLookup_1
   \   000051   09           INC     R1
   \                     ??ZDSecMgrEntryLookup_1:
   \   000052   C3           CLR     C
   \   000053   E8           MOV     A,R0
   \   000054   9403         SUBB    A,#0x3
   \   000056   E9           MOV     A,R1
   \   000057   9400         SUBB    A,#0x0
   \   000059   506B         JNC     ??ZDSecMgrEntryLookup_0
    460                {
    461                  if ( addrMgrEntry.index == ZDSecMgrEntries[index].ami )
   \   00005B   740B         MOV     A,#0xb
   \   00005D   12....       LCALL   ?XSTACK_DISP0_8
   \   000060   E0           MOVX    A,@DPTR
   \   000061   FC           MOV     R4,A
   \   000062   A3           INC     DPTR
   \   000063   E0           MOVX    A,@DPTR
   \   000064   FD           MOV     R5,A
   \   000065   E8           MOV     A,R0
   \   000066   FA           MOV     R2,A
   \   000067   E9           MOV     A,R1
   \   000068   FB           MOV     R3,A
   \   000069   EA           MOV     A,R2
   \   00006A   75F005       MOV     B,#0x5
   \   00006D   A4           MUL     AB
   \   00006E   CA           XCH     A,R2
   \   00006F   85F0..       MOV     ?V0,B
   \   000072   75F000       MOV     B,#0x0
   \   000075   A4           MUL     AB
   \   000076   25..         ADD     A,?V0
   \   000078   F5..         MOV     ?V0,A
   \   00007A   75F005       MOV     B,#0x5
   \   00007D   EB           MOV     A,R3
   \   00007E   A4           MUL     AB
   \   00007F   25..         ADD     A,?V0
   \   000081   FB           MOV     R3,A
   \   000082   90....       MOV     DPTR,#ZDSecMgrEntries
   \   000085   E0           MOVX    A,@DPTR
   \   000086   2A           ADD     A,R2
   \   000087   F5..         MOV     ?V0,A
   \   000089   A3           INC     DPTR
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   3B           ADDC    A,R3
   \   00008C   85..82       MOV     DPL,?V0
   \   00008F   F583         MOV     DPH,A
   \   000091   E0           MOVX    A,@DPTR
   \   000092   6C           XRL     A,R4
   \   000093   7003         JNZ     ??ZDSecMgrEntryLookup_3
   \   000095   A3           INC     DPTR
   \   000096   E0           MOVX    A,@DPTR
   \   000097   6D           XRL     A,R5
   \                     ??ZDSecMgrEntryLookup_3:
   \   000098   70B3         JNZ     ??ZDSecMgrEntryLookup_2
    462                  {
    463                    // return successful results
    464                    *entry = &ZDSecMgrEntries[index];
   \   00009A   E8           MOV     A,R0
   \   00009B   75F005       MOV     B,#0x5
   \   00009E   A4           MUL     AB
   \   00009F   C8           XCH     A,R0
   \   0000A0   AAF0         MOV     R2,B
   \   0000A2   75F000       MOV     B,#0x0
   \   0000A5   A4           MUL     AB
   \   0000A6   2A           ADD     A,R2
   \   0000A7   FA           MOV     R2,A
   \   0000A8   75F005       MOV     B,#0x5
   \   0000AB   E9           MOV     A,R1
   \   0000AC   A4           MUL     AB
   \   0000AD   2A           ADD     A,R2
   \   0000AE   F9           MOV     R1,A
   \   0000AF   90....       MOV     DPTR,#ZDSecMgrEntries
   \   0000B2   E0           MOVX    A,@DPTR
   \   0000B3   28           ADD     A,R0
   \   0000B4   F8           MOV     R0,A
   \   0000B5   A3           INC     DPTR
   \   0000B6   E0           MOVX    A,@DPTR
   \   0000B7   39           ADDC    A,R1
   \   0000B8   F9           MOV     R1,A
   \   0000B9   8E82         MOV     DPL,R6
   \   0000BB   8F83         MOV     DPH,R7
   \   0000BD   E8           MOV     A,R0
   \   0000BE   F0           MOVX    @DPTR,A
   \   0000BF   A3           INC     DPTR
   \   0000C0   E9           MOV     A,R1
   \   0000C1   F0           MOVX    @DPTR,A
    465          
    466                    // break from loop
    467                    return ZSuccess;
   \   0000C2   7900         MOV     R1,#0x0
   \   0000C4   8002         SJMP    ??ZDSecMgrEntryLookup_4
    468                  }
    469                }
    470              }
    471            }
    472          
    473            return ZNwkUnknownDevice;
   \                     ??ZDSecMgrEntryLookup_0:
   \   0000C6   79C8         MOV     R1,#-0x38
   \                     ??ZDSecMgrEntryLookup_4:
   \   0000C8   740D         MOV     A,#0xd
   \   0000CA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000CD   7F01         MOV     R7,#0x1
   \   0000CF   02....       LJMP    ?BANKED_LEAVE_XDATA
    474          }
    475          
    476          /******************************************************************************
    477           * @fn          ZDSecMgrEntryLookupAMI
    478           *
    479           * @brief       Lookup entry using specified address index
    480           *
    481           * @param       ami   - [in] Address Manager index
    482           * @param       entry - [out] valid entry
    483           *
    484           * @return      ZStatus_t
    485           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    486          ZStatus_t ZDSecMgrEntryLookupAMI( uint16 ami, ZDSecMgrEntry_t** entry )
   \                     ZDSecMgrEntryLookupAMI:
    487          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    488            uint16 index;
    489          
    490            // initialize results
    491            *entry = NULL;
   \   000005   8C82         MOV     DPL,R4
   \   000007   8D83         MOV     DPH,R5
   \   000009   7400         MOV     A,#0x0
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   A3           INC     DPTR
   \   00000D   7400         MOV     A,#0x0
   \   00000F   F0           MOVX    @DPTR,A
    492          
    493            // verify data is available
    494            if ( ZDSecMgrEntries != NULL )
   \   000010   90....       MOV     DPTR,#ZDSecMgrEntries
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F8           MOV     R0,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F9           MOV     R1,A
   \   000018   E8           MOV     A,R0
   \   000019   49           ORL     A,R1
   \   00001A   6075         JZ      ??ZDSecMgrEntryLookupAMI_0
    495            {
    496              for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
   \   00001C   7800         MOV     R0,#0x0
   \   00001E   7900         MOV     R1,#0x0
   \   000020   8005         SJMP    ??ZDSecMgrEntryLookupAMI_1
   \                     ??ZDSecMgrEntryLookupAMI_2:
   \   000022   08           INC     R0
   \   000023   E8           MOV     A,R0
   \   000024   7001         JNZ     ??ZDSecMgrEntryLookupAMI_1
   \   000026   09           INC     R1
   \                     ??ZDSecMgrEntryLookupAMI_1:
   \   000027   C3           CLR     C
   \   000028   E8           MOV     A,R0
   \   000029   9403         SUBB    A,#0x3
   \   00002B   E9           MOV     A,R1
   \   00002C   9400         SUBB    A,#0x0
   \   00002E   5061         JNC     ??ZDSecMgrEntryLookupAMI_0
    497              {
    498                if ( ZDSecMgrEntries[index].ami == ami )
   \   000030   E8           MOV     A,R0
   \   000031   FE           MOV     R6,A
   \   000032   E9           MOV     A,R1
   \   000033   FF           MOV     R7,A
   \   000034   EE           MOV     A,R6
   \   000035   75F005       MOV     B,#0x5
   \   000038   A4           MUL     AB
   \   000039   CE           XCH     A,R6
   \   00003A   85F0..       MOV     ?V0,B
   \   00003D   75F000       MOV     B,#0x0
   \   000040   A4           MUL     AB
   \   000041   25..         ADD     A,?V0
   \   000043   F5..         MOV     ?V0,A
   \   000045   75F005       MOV     B,#0x5
   \   000048   EF           MOV     A,R7
   \   000049   A4           MUL     AB
   \   00004A   25..         ADD     A,?V0
   \   00004C   FF           MOV     R7,A
   \   00004D   90....       MOV     DPTR,#ZDSecMgrEntries
   \   000050   E0           MOVX    A,@DPTR
   \   000051   2E           ADD     A,R6
   \   000052   F5..         MOV     ?V0,A
   \   000054   A3           INC     DPTR
   \   000055   E0           MOVX    A,@DPTR
   \   000056   3F           ADDC    A,R7
   \   000057   85..82       MOV     DPL,?V0
   \   00005A   F583         MOV     DPH,A
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   6A           XRL     A,R2
   \   00005E   7003         JNZ     ??ZDSecMgrEntryLookupAMI_3
   \   000060   A3           INC     DPTR
   \   000061   E0           MOVX    A,@DPTR
   \   000062   6B           XRL     A,R3
   \                     ??ZDSecMgrEntryLookupAMI_3:
   \   000063   70BD         JNZ     ??ZDSecMgrEntryLookupAMI_2
    499                {
    500                  // return successful results
    501                  *entry = &ZDSecMgrEntries[index];
   \   000065   E8           MOV     A,R0
   \   000066   75F005       MOV     B,#0x5
   \   000069   A4           MUL     AB
   \   00006A   C8           XCH     A,R0
   \   00006B   AAF0         MOV     R2,B
   \   00006D   75F000       MOV     B,#0x0
   \   000070   A4           MUL     AB
   \   000071   2A           ADD     A,R2
   \   000072   FA           MOV     R2,A
   \   000073   75F005       MOV     B,#0x5
   \   000076   E9           MOV     A,R1
   \   000077   A4           MUL     AB
   \   000078   2A           ADD     A,R2
   \   000079   F9           MOV     R1,A
   \   00007A   90....       MOV     DPTR,#ZDSecMgrEntries
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   28           ADD     A,R0
   \   00007F   F8           MOV     R0,A
   \   000080   A3           INC     DPTR
   \   000081   E0           MOVX    A,@DPTR
   \   000082   39           ADDC    A,R1
   \   000083   F9           MOV     R1,A
   \   000084   8C82         MOV     DPL,R4
   \   000086   8D83         MOV     DPH,R5
   \   000088   E8           MOV     A,R0
   \   000089   F0           MOVX    @DPTR,A
   \   00008A   A3           INC     DPTR
   \   00008B   E9           MOV     A,R1
   \   00008C   F0           MOVX    @DPTR,A
    502          
    503                  // break from loop
    504                  return ZSuccess;
   \   00008D   7900         MOV     R1,#0x0
   \   00008F   8002         SJMP    ??ZDSecMgrEntryLookupAMI_4
    505                }
    506              }
    507            }
    508          
    509            return ZNwkUnknownDevice;
   \                     ??ZDSecMgrEntryLookupAMI_0:
   \   000091   79C8         MOV     R1,#-0x38
   \                     ??ZDSecMgrEntryLookupAMI_4:
   \   000093   7F01         MOV     R7,#0x1
   \   000095   02....       LJMP    ?BANKED_LEAVE_XDATA
    510          }
    511          
    512          /******************************************************************************
    513           * @fn          ZDSecMgrEntryLookupExt
    514           *
    515           * @brief       Lookup entry index using specified EXT address.
    516           *
    517           * @param       extAddr - [in] EXT address
    518           * @param       entry   - [out] valid entry
    519           *
    520           * @return      ZStatus_t
    521           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    522          ZStatus_t ZDSecMgrEntryLookupExt( uint8* extAddr, ZDSecMgrEntry_t** entry )
   \                     ZDSecMgrEntryLookupExt:
    523          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EC           MOV     A,R4
   \   00000B   FE           MOV     R6,A
   \   00000C   ED           MOV     A,R5
   \   00000D   FF           MOV     R7,A
    524            ZStatus_t status;
    525            uint16    ami;
    526          
    527            // initialize results
    528            *entry = NULL;
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   7400         MOV     A,#0x0
   \   000014   F0           MOVX    @DPTR,A
   \   000015   A3           INC     DPTR
   \   000016   7400         MOV     A,#0x0
   \   000018   F0           MOVX    @DPTR,A
    529            status = ZNwkUnknownDevice;
   \   000019   75..C8       MOV     ?V0,#-0x38
    530          
    531            // lookup address index
    532            if ( ZDSecMgrExtAddrLookup( extAddr, &ami ) == ZSuccess )
   \   00001C                ; Setup parameters for call to function ZDSecMgrExtAddrLookup
   \   00001C   AC..         MOV     R4,?XSP + 0
   \   00001E   AD..         MOV     R5,?XSP + 1
   \   000020   12....       LCALL   `??ZDSecMgrExtAddrLookup::?relay`; Banked call to: ZDSecMgrExtAddrLookup
   \   000023   E9           MOV     A,R1
   \   000024   7015         JNZ     ??ZDSecMgrEntryLookupExt_0
    533            {
    534              status = ZDSecMgrEntryLookupAMI( ami, entry );
   \   000026                ; Setup parameters for call to function ZDSecMgrEntryLookupAMI
   \   000026   EE           MOV     A,R6
   \   000027   FC           MOV     R4,A
   \   000028   EF           MOV     A,R7
   \   000029   FD           MOV     R5,A
   \   00002A   85..82       MOV     DPL,?XSP + 0
   \   00002D   85..83       MOV     DPH,?XSP + 1
   \   000030   E0           MOVX    A,@DPTR
   \   000031   FA           MOV     R2,A
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   FB           MOV     R3,A
   \   000035   12....       LCALL   `??ZDSecMgrEntryLookupAMI::?relay`; Banked call to: ZDSecMgrEntryLookupAMI
   \   000038   E9           MOV     A,R1
   \   000039   F5..         MOV     ?V0,A
    535            }
    536          
    537            return status;
   \                     ??ZDSecMgrEntryLookupExt_0:
   \   00003B   A9..         MOV     R1,?V0
   \   00003D   7402         MOV     A,#0x2
   \   00003F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000042   7F01         MOV     R7,#0x1
   \   000044   02....       LJMP    ?BANKED_LEAVE_XDATA
    538          }
    539          
    540          /******************************************************************************
    541           * @fn          ZDSecMgrEntryLookupExtGetIndex
    542           *
    543           * @brief       Lookup entry index using specified EXT address.
    544           *
    545           * @param       extAddr - [in] EXT address
    546           * @param       entryIndex - [out] valid index to the entry table
    547           *
    548           * @return      ZStatus_t
    549           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    550          ZStatus_t ZDSecMgrEntryLookupExtGetIndex( uint8* extAddr, ZDSecMgrEntry_t** entry, uint16* entryIndex )
   \                     ZDSecMgrEntryLookupExtGetIndex:
    551          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EC           MOV     A,R4
   \   00000B   FE           MOV     R6,A
   \   00000C   ED           MOV     A,R5
   \   00000D   FF           MOV     R7,A
    552            uint16 ami;
    553            uint16 index;
    554          
    555            // lookup address index
    556            if ( ZDSecMgrExtAddrLookup( extAddr, &ami ) == ZSuccess )
   \   00000E                ; Setup parameters for call to function ZDSecMgrExtAddrLookup
   \   00000E   AC..         MOV     R4,?XSP + 0
   \   000010   AD..         MOV     R5,?XSP + 1
   \   000012   12....       LCALL   `??ZDSecMgrExtAddrLookup::?relay`; Banked call to: ZDSecMgrExtAddrLookup
   \   000015   E9           MOV     A,R1
   \   000016   6003         JZ      $+5
   \   000018   02....       LJMP    ??ZDSecMgrEntryLookupExtGetIndex_0 & 0xFFFF
    557            {
    558              // verify data is available
    559              if ( ZDSecMgrEntries != NULL )
   \   00001B   90....       MOV     DPTR,#ZDSecMgrEntries
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F8           MOV     R0,A
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   F9           MOV     R1,A
   \   000023   E8           MOV     A,R0
   \   000024   49           ORL     A,R1
   \   000025   7003         JNZ     $+5
   \   000027   02....       LJMP    ??ZDSecMgrEntryLookupExtGetIndex_0 & 0xFFFF
    560              {
    561                for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
   \   00002A   7800         MOV     R0,#0x0
   \   00002C   7900         MOV     R1,#0x0
   \   00002E   8005         SJMP    ??ZDSecMgrEntryLookupExtGetIndex_1
   \                     ??ZDSecMgrEntryLookupExtGetIndex_2:
   \   000030   08           INC     R0
   \   000031   E8           MOV     A,R0
   \   000032   7001         JNZ     ??ZDSecMgrEntryLookupExtGetIndex_1
   \   000034   09           INC     R1
   \                     ??ZDSecMgrEntryLookupExtGetIndex_1:
   \   000035   C3           CLR     C
   \   000036   E8           MOV     A,R0
   \   000037   9403         SUBB    A,#0x3
   \   000039   E9           MOV     A,R1
   \   00003A   9400         SUBB    A,#0x0
   \   00003C   507C         JNC     ??ZDSecMgrEntryLookupExtGetIndex_0
    562                {
    563                  if ( ZDSecMgrEntries[index].ami == ami )
   \   00003E   E8           MOV     A,R0
   \   00003F   FA           MOV     R2,A
   \   000040   E9           MOV     A,R1
   \   000041   FB           MOV     R3,A
   \   000042   EA           MOV     A,R2
   \   000043   75F005       MOV     B,#0x5
   \   000046   A4           MUL     AB
   \   000047   CA           XCH     A,R2
   \   000048   ACF0         MOV     R4,B
   \   00004A   75F000       MOV     B,#0x0
   \   00004D   A4           MUL     AB
   \   00004E   2C           ADD     A,R4
   \   00004F   FC           MOV     R4,A
   \   000050   75F005       MOV     B,#0x5
   \   000053   EB           MOV     A,R3
   \   000054   A4           MUL     AB
   \   000055   2C           ADD     A,R4
   \   000056   FB           MOV     R3,A
   \   000057   90....       MOV     DPTR,#ZDSecMgrEntries
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   2A           ADD     A,R2
   \   00005C   FC           MOV     R4,A
   \   00005D   A3           INC     DPTR
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   3B           ADDC    A,R3
   \   000060   8C82         MOV     DPL,R4
   \   000062   F583         MOV     DPH,A
   \   000064   E0           MOVX    A,@DPTR
   \   000065   FA           MOV     R2,A
   \   000066   A3           INC     DPTR
   \   000067   E0           MOVX    A,@DPTR
   \   000068   FB           MOV     R3,A
   \   000069   85..82       MOV     DPL,?XSP + 0
   \   00006C   85..83       MOV     DPH,?XSP + 1
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   6A           XRL     A,R2
   \   000071   7003         JNZ     ??ZDSecMgrEntryLookupExtGetIndex_3
   \   000073   A3           INC     DPTR
   \   000074   E0           MOVX    A,@DPTR
   \   000075   6B           XRL     A,R3
   \                     ??ZDSecMgrEntryLookupExtGetIndex_3:
   \   000076   70B8         JNZ     ??ZDSecMgrEntryLookupExtGetIndex_2
    564                  {
    565                    // return successful results
    566                    *entry = &ZDSecMgrEntries[index];
   \   000078   E8           MOV     A,R0
   \   000079   FA           MOV     R2,A
   \   00007A   E9           MOV     A,R1
   \   00007B   FB           MOV     R3,A
   \   00007C   EA           MOV     A,R2
   \   00007D   75F005       MOV     B,#0x5
   \   000080   A4           MUL     AB
   \   000081   CA           XCH     A,R2
   \   000082   ACF0         MOV     R4,B
   \   000084   75F000       MOV     B,#0x0
   \   000087   A4           MUL     AB
   \   000088   2C           ADD     A,R4
   \   000089   FC           MOV     R4,A
   \   00008A   75F005       MOV     B,#0x5
   \   00008D   EB           MOV     A,R3
   \   00008E   A4           MUL     AB
   \   00008F   2C           ADD     A,R4
   \   000090   FB           MOV     R3,A
   \   000091   90....       MOV     DPTR,#ZDSecMgrEntries
   \   000094   E0           MOVX    A,@DPTR
   \   000095   2A           ADD     A,R2
   \   000096   FA           MOV     R2,A
   \   000097   A3           INC     DPTR
   \   000098   E0           MOVX    A,@DPTR
   \   000099   3B           ADDC    A,R3
   \   00009A   FB           MOV     R3,A
   \   00009B   8E82         MOV     DPL,R6
   \   00009D   8F83         MOV     DPH,R7
   \   00009F   EA           MOV     A,R2
   \   0000A0   F0           MOVX    @DPTR,A
   \   0000A1   A3           INC     DPTR
   \   0000A2   EB           MOV     A,R3
   \   0000A3   F0           MOVX    @DPTR,A
    567                    *entryIndex = index;
   \   0000A4   740B         MOV     A,#0xb
   \   0000A6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A9   E0           MOVX    A,@DPTR
   \   0000AA   FA           MOV     R2,A
   \   0000AB   A3           INC     DPTR
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   F583         MOV     DPH,A
   \   0000AF   8A82         MOV     DPL,R2
   \   0000B1   E8           MOV     A,R0
   \   0000B2   F0           MOVX    @DPTR,A
   \   0000B3   A3           INC     DPTR
   \   0000B4   E9           MOV     A,R1
   \   0000B5   F0           MOVX    @DPTR,A
    568          
    569                    // break from loop
    570                    return ZSuccess;
   \   0000B6   7900         MOV     R1,#0x0
   \   0000B8   8002         SJMP    ??ZDSecMgrEntryLookupExtGetIndex_4
    571                  }
    572                }
    573              }
    574            }
    575          
    576            return ZNwkUnknownDevice;
   \                     ??ZDSecMgrEntryLookupExtGetIndex_0:
   \   0000BA   79C8         MOV     R1,#-0x38
   \                     ??ZDSecMgrEntryLookupExtGetIndex_4:
   \   0000BC   7402         MOV     A,#0x2
   \   0000BE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C1   7F01         MOV     R7,#0x1
   \   0000C3   02....       LJMP    ?BANKED_LEAVE_XDATA
    577          }
    578          
    579          /******************************************************************************
    580           * @fn          ZDSecMgrEntryLookupAMIGetIndex
    581           *
    582           * @brief       Lookup entry using specified address index
    583           *
    584           * @param       ami   - [in] Address Manager index
    585           * @param       entryIndex - [out] valid index to the entry table
    586           *
    587           * @return      ZStatus_t
    588           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    589          ZStatus_t ZDSecMgrEntryLookupAMIGetIndex( uint16 ami, uint16* entryIndex )
   \                     ZDSecMgrEntryLookupAMIGetIndex:
    590          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    591            uint16 index;
    592          
    593            // verify data is available
    594            if ( ZDSecMgrEntries != NULL )
   \   000005   90....       MOV     DPTR,#ZDSecMgrEntries
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F8           MOV     R0,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   E8           MOV     A,R0
   \   00000E   49           ORL     A,R1
   \   00000F   6056         JZ      ??ZDSecMgrEntryLookupAMIGetIndex_0
    595            {
    596              for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
   \   000011   7800         MOV     R0,#0x0
   \   000013   7900         MOV     R1,#0x0
   \   000015   8005         SJMP    ??ZDSecMgrEntryLookupAMIGetIndex_1
   \                     ??ZDSecMgrEntryLookupAMIGetIndex_2:
   \   000017   08           INC     R0
   \   000018   E8           MOV     A,R0
   \   000019   7001         JNZ     ??ZDSecMgrEntryLookupAMIGetIndex_1
   \   00001B   09           INC     R1
   \                     ??ZDSecMgrEntryLookupAMIGetIndex_1:
   \   00001C   C3           CLR     C
   \   00001D   E8           MOV     A,R0
   \   00001E   9403         SUBB    A,#0x3
   \   000020   E9           MOV     A,R1
   \   000021   9400         SUBB    A,#0x0
   \   000023   5042         JNC     ??ZDSecMgrEntryLookupAMIGetIndex_0
    597              {
    598                if ( ZDSecMgrEntries[index].ami == ami )
   \   000025   E8           MOV     A,R0
   \   000026   FE           MOV     R6,A
   \   000027   E9           MOV     A,R1
   \   000028   FF           MOV     R7,A
   \   000029   EE           MOV     A,R6
   \   00002A   75F005       MOV     B,#0x5
   \   00002D   A4           MUL     AB
   \   00002E   CE           XCH     A,R6
   \   00002F   85F0..       MOV     ?V0,B
   \   000032   75F000       MOV     B,#0x0
   \   000035   A4           MUL     AB
   \   000036   25..         ADD     A,?V0
   \   000038   F5..         MOV     ?V0,A
   \   00003A   75F005       MOV     B,#0x5
   \   00003D   EF           MOV     A,R7
   \   00003E   A4           MUL     AB
   \   00003F   25..         ADD     A,?V0
   \   000041   FF           MOV     R7,A
   \   000042   90....       MOV     DPTR,#ZDSecMgrEntries
   \   000045   E0           MOVX    A,@DPTR
   \   000046   2E           ADD     A,R6
   \   000047   F5..         MOV     ?V0,A
   \   000049   A3           INC     DPTR
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   3F           ADDC    A,R7
   \   00004C   85..82       MOV     DPL,?V0
   \   00004F   F583         MOV     DPH,A
   \   000051   E0           MOVX    A,@DPTR
   \   000052   6A           XRL     A,R2
   \   000053   7003         JNZ     ??ZDSecMgrEntryLookupAMIGetIndex_3
   \   000055   A3           INC     DPTR
   \   000056   E0           MOVX    A,@DPTR
   \   000057   6B           XRL     A,R3
   \                     ??ZDSecMgrEntryLookupAMIGetIndex_3:
   \   000058   70BD         JNZ     ??ZDSecMgrEntryLookupAMIGetIndex_2
    599                {
    600                  // return successful results
    601                  *entryIndex = index;
   \   00005A   8C82         MOV     DPL,R4
   \   00005C   8D83         MOV     DPH,R5
   \   00005E   E8           MOV     A,R0
   \   00005F   F0           MOVX    @DPTR,A
   \   000060   A3           INC     DPTR
   \   000061   E9           MOV     A,R1
   \   000062   F0           MOVX    @DPTR,A
    602          
    603                  // break from loop
    604                  return ZSuccess;
   \   000063   7900         MOV     R1,#0x0
   \   000065   8002         SJMP    ??ZDSecMgrEntryLookupAMIGetIndex_4
    605                }
    606              }
    607            }
    608          
    609            return ZNwkUnknownDevice;
   \                     ??ZDSecMgrEntryLookupAMIGetIndex_0:
   \   000067   79C8         MOV     R1,#-0x38
   \                     ??ZDSecMgrEntryLookupAMIGetIndex_4:
   \   000069   7F01         MOV     R7,#0x1
   \   00006B   02....       LJMP    ?BANKED_LEAVE_XDATA
    610          }
    611          
    612          /******************************************************************************
    613           * @fn          ZDSecMgrEntryFree
    614           *
    615           * @brief       Free entry.
    616           *
    617           * @param       entry - [in] valid entry
    618           *
    619           * @return      ZStatus_t
    620           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    621          void ZDSecMgrEntryFree( ZDSecMgrEntry_t* entry )
   \                     ZDSecMgrEntryFree:
    622          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    623            APSME_LinkKeyData_t   *pApsLinkKey = NULL;
   \   00000E   75..00       MOV     ?V2,#0x0
   \   000011   75..00       MOV     ?V3,#0x0
    624          
    625          #if defined ( NV_RESTORE )
    626            ZStatus_t status;
    627            uint16 entryIndex;
    628          
    629            status = ZDSecMgrEntryLookupAMIGetIndex( entry->ami, &entryIndex );
   \   000014                ; Setup parameters for call to function ZDSecMgrEntryLookupAMIGetIndex
   \   000014   AC..         MOV     R4,?XSP + 0
   \   000016   AD..         MOV     R5,?XSP + 1
   \   000018   8E82         MOV     DPL,R6
   \   00001A   8F83         MOV     DPH,R7
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   FA           MOV     R2,A
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   FB           MOV     R3,A
   \   000021   12....       LCALL   `??ZDSecMgrEntryLookupAMIGetIndex::?relay`; Banked call to: ZDSecMgrEntryLookupAMIGetIndex
   \   000024   E9           MOV     A,R1
   \   000025   F5..         MOV     ?V0,A
    630          #endif
    631          
    632            pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
   \   000027                ; Setup parameters for call to function osal_mem_alloc
   \   000027   7A18         MOV     R2,#0x18
   \   000029   7B00         MOV     R3,#0x0
   \   00002B   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00002E   8A..         MOV     ?V4,R2
   \   000030   8B..         MOV     ?V5,R3
   \   000032   85....       MOV     ?V2,?V4
   \   000035   85....       MOV     ?V3,?V5
    633          
    634            if (pApsLinkKey != NULL)
   \   000038   E5..         MOV     A,?V2
   \   00003A   45..         ORL     A,?V3
   \   00003C   6049         JZ      ??ZDSecMgrEntryFree_0
    635            {
    636              osal_memset( pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t) );
   \   00003E                ; Setup parameters for call to function osal_memset
   \   00003E   7C18         MOV     R4,#0x18
   \   000040   7D00         MOV     R5,#0x0
   \   000042   7900         MOV     R1,#0x0
   \   000044   AA..         MOV     R2,?V2
   \   000046   AB..         MOV     R3,?V3
   \   000048   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    637          
    638              // Clear the APS Link key in NV
    639              osal_nv_write( entry->keyNvId, 0,
    640                                  sizeof(APSME_LinkKeyData_t), pApsLinkKey);
   \   00004B                ; Setup parameters for call to function osal_nv_write
   \   00004B   78..         MOV     R0,#?V2
   \   00004D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000050   75..18       MOV     ?V4,#0x18
   \   000053   75..00       MOV     ?V5,#0x0
   \   000056   78..         MOV     R0,#?V4
   \   000058   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005B   7C00         MOV     R4,#0x0
   \   00005D   7D00         MOV     R5,#0x0
   \   00005F   8E82         MOV     DPL,R6
   \   000061   8F83         MOV     DPH,R7
   \   000063   A3           INC     DPTR
   \   000064   A3           INC     DPTR
   \   000065   E0           MOVX    A,@DPTR
   \   000066   FA           MOV     R2,A
   \   000067   A3           INC     DPTR
   \   000068   E0           MOVX    A,@DPTR
   \   000069   FB           MOV     R3,A
   \   00006A   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00006D   7404         MOV     A,#0x4
   \   00006F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000072   E9           MOV     A,R1
    641          
    642              // set entry to invalid Key
    643              entry->keyNvId = SEC_NO_KEY_NV_ID;
   \   000073   8E82         MOV     DPL,R6
   \   000075   8F83         MOV     DPH,R7
   \   000077   A3           INC     DPTR
   \   000078   A3           INC     DPTR
   \   000079   7400         MOV     A,#0x0
   \   00007B   F0           MOVX    @DPTR,A
   \   00007C   A3           INC     DPTR
   \   00007D   7400         MOV     A,#0x0
   \   00007F   F0           MOVX    @DPTR,A
    644          
    645              osal_mem_free(pApsLinkKey);
   \   000080                ; Setup parameters for call to function osal_mem_free
   \   000080   AA..         MOV     R2,?V2
   \   000082   AB..         MOV     R3,?V3
   \   000084   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    646            }
    647          
    648            // marking the entry as INVALID_NODE_ADDR
    649            entry->ami = INVALID_NODE_ADDR;
   \                     ??ZDSecMgrEntryFree_0:
   \   000087   8E82         MOV     DPL,R6
   \   000089   8F83         MOV     DPH,R7
   \   00008B   74FE         MOV     A,#-0x2
   \   00008D   F0           MOVX    @DPTR,A
   \   00008E   A3           INC     DPTR
   \   00008F   74FF         MOV     A,#-0x1
   \   000091   F0           MOVX    @DPTR,A
    650          
    651            // set to default value
    652            entry->authenticateOption = ZDSecMgr_Not_Authenticated;
   \   000092   8E82         MOV     DPL,R6
   \   000094   8F83         MOV     DPH,R7
   \   000096   A3           INC     DPTR
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   A3           INC     DPTR
   \   00009A   7400         MOV     A,#0x0
   \   00009C   F0           MOVX    @DPTR,A
    653          
    654          #if defined ( NV_RESTORE )
    655            if ( status == ZSuccess )
   \   00009D   E5..         MOV     A,?V0
   \   00009F   700E         JNZ     ??ZDSecMgrEntryFree_1
    656            {
    657              ZDSecMgrUpdateNV(entryIndex);
   \   0000A1                ; Setup parameters for call to function ZDSecMgrUpdateNV
   \   0000A1   85..82       MOV     DPL,?XSP + 0
   \   0000A4   85..83       MOV     DPH,?XSP + 1
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   FA           MOV     R2,A
   \   0000A9   A3           INC     DPTR
   \   0000AA   E0           MOVX    A,@DPTR
   \   0000AB   FB           MOV     R3,A
   \   0000AC   12....       LCALL   `??ZDSecMgrUpdateNV::?relay`; Banked call to: ZDSecMgrUpdateNV
    658            }
    659          #endif
    660          }
   \                     ??ZDSecMgrEntryFree_1:
   \   0000AF   7402         MOV     A,#0x2
   \   0000B1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B4   7F06         MOV     R7,#0x6
   \   0000B6   02....       LJMP    ?BANKED_LEAVE_XDATA
    661          
    662          /******************************************************************************
    663           * @fn          ZDSecMgrEntryNew
    664           *
    665           * @brief       Get a new entry.
    666           *
    667           * @param       entry - [out] valid entry
    668           *
    669           * @return      ZStatus_t
    670           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    671          ZStatus_t ZDSecMgrEntryNew( ZDSecMgrEntry_t** entry )
   \                     ZDSecMgrEntryNew:
    672          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    673            uint16 index;
    674          
    675            // initialize results
    676            *entry = NULL;
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   7400         MOV     A,#0x0
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   A3           INC     DPTR
   \   00000D   7400         MOV     A,#0x0
   \   00000F   F0           MOVX    @DPTR,A
    677          
    678            // verify data is available
    679            if ( ZDSecMgrEntries != NULL )
   \   000010   90....       MOV     DPTR,#ZDSecMgrEntries
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F8           MOV     R0,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F9           MOV     R1,A
   \   000018   E8           MOV     A,R0
   \   000019   49           ORL     A,R1
   \   00001A   7003         JNZ     $+5
   \   00001C   02....       LJMP    ??ZDSecMgrEntryNew_0 & 0xFFFF
    680            {
    681              // find available entry
    682              for ( index = 0; index < ZDSECMGR_ENTRY_MAX ; index++ )
   \   00001F   7800         MOV     R0,#0x0
   \   000021   7900         MOV     R1,#0x0
   \   000023   8005         SJMP    ??ZDSecMgrEntryNew_1
   \                     ??ZDSecMgrEntryNew_2:
   \   000025   08           INC     R0
   \   000026   E8           MOV     A,R0
   \   000027   7001         JNZ     ??ZDSecMgrEntryNew_1
   \   000029   09           INC     R1
   \                     ??ZDSecMgrEntryNew_1:
   \   00002A   C3           CLR     C
   \   00002B   E8           MOV     A,R0
   \   00002C   9403         SUBB    A,#0x3
   \   00002E   E9           MOV     A,R1
   \   00002F   9400         SUBB    A,#0x0
   \   000031   4003         JC      $+5
   \   000033   02....       LJMP    ??ZDSecMgrEntryNew_0 & 0xFFFF
    683              {
    684                if ( ZDSecMgrEntries[index].ami == INVALID_NODE_ADDR )
   \   000036   E8           MOV     A,R0
   \   000037   FC           MOV     R4,A
   \   000038   E9           MOV     A,R1
   \   000039   FD           MOV     R5,A
   \   00003A   EC           MOV     A,R4
   \   00003B   75F005       MOV     B,#0x5
   \   00003E   A4           MUL     AB
   \   00003F   CC           XCH     A,R4
   \   000040   AEF0         MOV     R6,B
   \   000042   75F000       MOV     B,#0x0
   \   000045   A4           MUL     AB
   \   000046   2E           ADD     A,R6
   \   000047   FE           MOV     R6,A
   \   000048   75F005       MOV     B,#0x5
   \   00004B   ED           MOV     A,R5
   \   00004C   A4           MUL     AB
   \   00004D   2E           ADD     A,R6
   \   00004E   FD           MOV     R5,A
   \   00004F   90....       MOV     DPTR,#ZDSecMgrEntries
   \   000052   E0           MOVX    A,@DPTR
   \   000053   2C           ADD     A,R4
   \   000054   FE           MOV     R6,A
   \   000055   A3           INC     DPTR
   \   000056   E0           MOVX    A,@DPTR
   \   000057   3D           ADDC    A,R5
   \   000058   8E82         MOV     DPL,R6
   \   00005A   F583         MOV     DPH,A
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   64FE         XRL     A,#0xfe
   \   00005F   7004         JNZ     ??ZDSecMgrEntryNew_3
   \   000061   A3           INC     DPTR
   \   000062   E0           MOVX    A,@DPTR
   \   000063   64FF         XRL     A,#0xff
   \                     ??ZDSecMgrEntryNew_3:
   \   000065   70BE         JNZ     ??ZDSecMgrEntryNew_2
    685                {
    686                  // return successful result
    687                  *entry = &ZDSecMgrEntries[index];
   \   000067   E8           MOV     A,R0
   \   000068   FC           MOV     R4,A
   \   000069   E9           MOV     A,R1
   \   00006A   FD           MOV     R5,A
   \   00006B   EC           MOV     A,R4
   \   00006C   75F005       MOV     B,#0x5
   \   00006F   A4           MUL     AB
   \   000070   CC           XCH     A,R4
   \   000071   AEF0         MOV     R6,B
   \   000073   75F000       MOV     B,#0x0
   \   000076   A4           MUL     AB
   \   000077   2E           ADD     A,R6
   \   000078   FE           MOV     R6,A
   \   000079   75F005       MOV     B,#0x5
   \   00007C   ED           MOV     A,R5
   \   00007D   A4           MUL     AB
   \   00007E   2E           ADD     A,R6
   \   00007F   FD           MOV     R5,A
   \   000080   90....       MOV     DPTR,#ZDSecMgrEntries
   \   000083   E0           MOVX    A,@DPTR
   \   000084   2C           ADD     A,R4
   \   000085   FC           MOV     R4,A
   \   000086   A3           INC     DPTR
   \   000087   E0           MOVX    A,@DPTR
   \   000088   3D           ADDC    A,R5
   \   000089   FD           MOV     R5,A
   \   00008A   8A82         MOV     DPL,R2
   \   00008C   8B83         MOV     DPH,R3
   \   00008E   EC           MOV     A,R4
   \   00008F   F0           MOVX    @DPTR,A
   \   000090   A3           INC     DPTR
   \   000091   ED           MOV     A,R5
   \   000092   F0           MOVX    @DPTR,A
    688          
    689                  // Set the authentication option to default
    690                  ZDSecMgrEntries[index].authenticateOption = ZDSecMgr_Not_Authenticated;
   \   000093   E8           MOV     A,R0
   \   000094   75F005       MOV     B,#0x5
   \   000097   A4           MUL     AB
   \   000098   C8           XCH     A,R0
   \   000099   AAF0         MOV     R2,B
   \   00009B   75F000       MOV     B,#0x0
   \   00009E   A4           MUL     AB
   \   00009F   2A           ADD     A,R2
   \   0000A0   FA           MOV     R2,A
   \   0000A1   75F005       MOV     B,#0x5
   \   0000A4   E9           MOV     A,R1
   \   0000A5   A4           MUL     AB
   \   0000A6   2A           ADD     A,R2
   \   0000A7   F9           MOV     R1,A
   \   0000A8   90....       MOV     DPTR,#ZDSecMgrEntries
   \   0000AB   E0           MOVX    A,@DPTR
   \   0000AC   28           ADD     A,R0
   \   0000AD   FA           MOV     R2,A
   \   0000AE   A3           INC     DPTR
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   39           ADDC    A,R1
   \   0000B1   8A82         MOV     DPL,R2
   \   0000B3   F583         MOV     DPH,A
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   A3           INC     DPTR
   \   0000B8   A3           INC     DPTR
   \   0000B9   7400         MOV     A,#0x0
   \   0000BB   F0           MOVX    @DPTR,A
    691          
    692                  // break from loop
    693                  return ZSuccess;
   \   0000BC   7900         MOV     R1,#0x0
   \   0000BE   8002         SJMP    ??ZDSecMgrEntryNew_4
    694                }
    695              }
    696            }
    697          
    698            return ZNwkUnknownDevice;
   \                     ??ZDSecMgrEntryNew_0:
   \   0000C0   79C8         MOV     R1,#-0x38
   \                     ??ZDSecMgrEntryNew_4:
   \   0000C2   7F01         MOV     R7,#0x1
   \   0000C4   02....       LJMP    ?BANKED_LEAVE_XDATA
    699          }
    700          
    701          /******************************************************************************
    702           * @fn          ZDSecMgrAppKeyGet
    703           *
    704           * @brief       get an APP key - option APP(MASTER or LINK) key
    705           *
    706           * @param       initNwkAddr - [in] NWK address of initiator device
    707           * @param       initExtAddr - [in] EXT address of initiator device
    708           * @param       partNwkAddr - [in] NWK address of partner device
    709           * @param       partExtAddr - [in] EXT address of partner device
    710           * @param       key         - [out] APP(MASTER or LINK) key
    711           * @param       keyType     - [out] APP(MASTER or LINK) key type
    712           *
    713           * @return      ZStatus_t
    714           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    715          uint8 ZDSecMgrAppKeyType = KEY_TYPE_APP_LINK;    // Set the default key type
   \                     ZDSecMgrAppKeyType:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for ZDSecMgrAppKeyType>`
   \   000001                REQUIRE __INIT_XDATA_I
    716                                                           // to KEY_TYPE_APP_LINK since
    717                                                           // only specific requirement
    718                                                           // right now comes from SE profile
    719          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    720          ZStatus_t ZDSecMgrAppKeyGet( uint16  initNwkAddr,
   \                     ZDSecMgrAppKeyGet:
    721                                       uint8*  initExtAddr,
    722                                       uint16  partNwkAddr,
    723                                       uint8*  partExtAddr,
    724                                       uint8** key,
    725                                       uint8*  keyType )
    726          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    727            // Intentionally unreferenced parameters
    728            (void)initNwkAddr;
    729            (void)initExtAddr;
    730            (void)partNwkAddr;
    731            (void)partExtAddr;
    732          
    733            //---------------------------------------------------------------------------
    734            // note:
    735            // should use a robust mechanism to generate keys, for example
    736            // combine EXT addresses and call a hash function
    737            //---------------------------------------------------------------------------
    738            SSP_GetTrueRand( SEC_KEY_LEN, *key );
   \   000004                ; Setup parameters for call to function SSP_GetTrueRand
   \   000004   7404         MOV     A,#0x4
   \   000006   12....       LCALL   ?XSTACK_DISP0_8
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   F8           MOV     R0,A
   \   00000B   A3           INC     DPTR
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F583         MOV     DPH,A
   \   00000F   8882         MOV     DPL,R0
   \   000011   E0           MOVX    A,@DPTR
   \   000012   FA           MOV     R2,A
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   FB           MOV     R3,A
   \   000016   7910         MOV     R1,#0x10
   \   000018   12....       LCALL   `??SSP_GetTrueRand::?relay`; Banked call to: SSP_GetTrueRand
    739          
    740            *keyType = ZDSecMgrAppKeyType;
   \   00001B   90....       MOV     DPTR,#ZDSecMgrAppKeyType
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   C0E0         PUSH    A
   \   000021   7406         MOV     A,#0x6
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F8           MOV     R0,A
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F583         MOV     DPH,A
   \   00002C   8882         MOV     DPL,R0
   \   00002E   D0E0         POP     A
   \   000030   F0           MOVX    @DPTR,A
    741          
    742            return ZSuccess;
   \   000031   7900         MOV     R1,#0x0
   \   000033   D083         POP     DPH
   \   000035   D082         POP     DPL
   \   000037   02....       LJMP    ?BRET
    743          }
    744          
    745          /******************************************************************************
    746           * @fn          ZDSecMgrAppKeyReq
    747           *
    748           * @brief       Process request for APP key between two devices.
    749           *
    750           * @param       device - [in] ZDO_RequestKeyInd_t, request info
    751           *
    752           * @return      none
    753           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    754          void ZDSecMgrAppKeyReq( ZDO_RequestKeyInd_t* ind )
   \                     ZDSecMgrAppKeyReq:
    755          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 39
   \   000005   74D9         MOV     A,#-0x27
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    756            APSME_TransportKeyReq_t req;
    757            uint8                   initExtAddr[Z_EXTADDR_LEN];
    758            uint16                  partNwkAddr;
    759            uint8                   key[SEC_KEY_LEN];
    760          
    761          
    762            // validate initiator and partner
    763            if ( ( APSME_LookupNwkAddr( ind->partExtAddr, &partNwkAddr ) == TRUE ) &&
    764                 ( APSME_LookupExtAddr( ind->srcAddr, initExtAddr ) == TRUE      )   )
   \   00000E                ; Setup parameters for call to function APSME_LookupNwkAddr
   \   00000E   AC..         MOV     R4,?XSP + 0
   \   000010   AD..         MOV     R5,?XSP + 1
   \   000012   EE           MOV     A,R6
   \   000013   2405         ADD     A,#0x5
   \   000015   FA           MOV     R2,A
   \   000016   E4           CLR     A
   \   000017   3F           ADDC    A,R7
   \   000018   FB           MOV     R3,A
   \   000019   12....       LCALL   `??APSME_LookupNwkAddr::?relay`; Banked call to: APSME_LookupNwkAddr
   \   00001C   E9           MOV     A,R1
   \   00001D   6401         XRL     A,#0x1
   \   00001F   6003         JZ      $+5
   \   000021   02....       LJMP    ??ZDSecMgrAppKeyReq_0 & 0xFFFF
   \   000024                ; Setup parameters for call to function APSME_LookupExtAddr
   \   000024   740F         MOV     A,#0xf
   \   000026   12....       LCALL   ?XSTACK_DISP102_8
   \   000029   8E82         MOV     DPL,R6
   \   00002B   8F83         MOV     DPH,R7
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   FA           MOV     R2,A
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   FB           MOV     R3,A
   \   000034   12....       LCALL   `??APSME_LookupExtAddr::?relay`; Banked call to: APSME_LookupExtAddr
   \   000037   E9           MOV     A,R1
   \   000038   6401         XRL     A,#0x1
   \   00003A   6003         JZ      $+5
   \   00003C   02....       LJMP    ??ZDSecMgrAppKeyReq_0 & 0xFFFF
    765            {
    766              // point the key to some memory
    767              req.key = key;
   \   00003F   7417         MOV     A,#0x17
   \   000041   12....       LCALL   ?XSTACK_DISP100_8
   \   000044   7406         MOV     A,#0x6
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   E8           MOV     A,R0
   \   00004A   F0           MOVX    @DPTR,A
   \   00004B   A3           INC     DPTR
   \   00004C   E9           MOV     A,R1
   \   00004D   F0           MOVX    @DPTR,A
    768          
    769              // get an APP key - option APP (MASTER or LINK) key
    770              if ( ZDSecMgrAppKeyGet( ind->srcAddr,
    771                                      initExtAddr,
    772                                      partNwkAddr,
    773                                      ind->partExtAddr,
    774                                      &req.key,
    775                                      &req.keyType ) == ZSuccess )
   \   00004E                ; Setup parameters for call to function ZDSecMgrAppKeyGet
   \   00004E   7404         MOV     A,#0x4
   \   000050   12....       LCALL   ?XSTACK_DISP0_8
   \   000053   8582..       MOV     ?V0,DPL
   \   000056   8583..       MOV     ?V1,DPH
   \   000059   78..         MOV     R0,#?V0
   \   00005B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005E   7408         MOV     A,#0x8
   \   000060   12....       LCALL   ?XSTACK_DISP0_8
   \   000063   8582..       MOV     ?V0,DPL
   \   000066   8583..       MOV     ?V1,DPH
   \   000069   78..         MOV     R0,#?V0
   \   00006B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006E   EE           MOV     A,R6
   \   00006F   2405         ADD     A,#0x5
   \   000071   F5..         MOV     ?V0,A
   \   000073   E4           CLR     A
   \   000074   3F           ADDC    A,R7
   \   000075   F5..         MOV     ?V1,A
   \   000077   78..         MOV     R0,#?V0
   \   000079   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007C   7406         MOV     A,#0x6
   \   00007E   12....       LCALL   ?XSTACK_DISP0_8
   \   000081   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000084   7417         MOV     A,#0x17
   \   000086   12....       LCALL   ?XSTACK_DISP102_8
   \   000089   8E82         MOV     DPL,R6
   \   00008B   8F83         MOV     DPH,R7
   \   00008D   A3           INC     DPTR
   \   00008E   A3           INC     DPTR
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   FA           MOV     R2,A
   \   000091   A3           INC     DPTR
   \   000092   E0           MOVX    A,@DPTR
   \   000093   FB           MOV     R3,A
   \   000094   12....       LCALL   `??ZDSecMgrAppKeyGet::?relay`; Banked call to: ZDSecMgrAppKeyGet
   \   000097   7408         MOV     A,#0x8
   \   000099   12....       LCALL   ?DEALLOC_XSTACK8
   \   00009C   E9           MOV     A,R1
   \   00009D   6003         JZ      $+5
   \   00009F   02....       LJMP    ??ZDSecMgrAppKeyReq_0 & 0xFFFF
    776              {
    777                // always secure
    778                req.nwkSecure = TRUE;
   \   0000A2   740C         MOV     A,#0xc
   \   0000A4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A7   7401         MOV     A,#0x1
   \   0000A9   F0           MOVX    @DPTR,A
    779                req.apsSecure = TRUE;
   \   0000AA   740B         MOV     A,#0xb
   \   0000AC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AF   7401         MOV     A,#0x1
   \   0000B1   F0           MOVX    @DPTR,A
    780                req.tunnel    = NULL;
   \   0000B2   740D         MOV     A,#0xd
   \   0000B4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B7   7400         MOV     A,#0x0
   \   0000B9   F0           MOVX    @DPTR,A
   \   0000BA   A3           INC     DPTR
   \   0000BB   7400         MOV     A,#0x0
   \   0000BD   F0           MOVX    @DPTR,A
    781          
    782                // send key to initiator device
    783                req.dstAddr   = ind->srcAddr;
   \   0000BE   8E82         MOV     DPL,R6
   \   0000C0   8F83         MOV     DPH,R7
   \   0000C2   A3           INC     DPTR
   \   0000C3   A3           INC     DPTR
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   F8           MOV     R0,A
   \   0000C6   A3           INC     DPTR
   \   0000C7   E0           MOVX    A,@DPTR
   \   0000C8   F9           MOV     R1,A
   \   0000C9   7402         MOV     A,#0x2
   \   0000CB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CE   E8           MOV     A,R0
   \   0000CF   F0           MOVX    @DPTR,A
   \   0000D0   A3           INC     DPTR
   \   0000D1   E9           MOV     A,R1
   \   0000D2   F0           MOVX    @DPTR,A
    784                req.extAddr   = ind->partExtAddr;
   \   0000D3   EE           MOV     A,R6
   \   0000D4   2405         ADD     A,#0x5
   \   0000D6   F8           MOV     R0,A
   \   0000D7   E4           CLR     A
   \   0000D8   3F           ADDC    A,R7
   \   0000D9   F9           MOV     R1,A
   \   0000DA   7408         MOV     A,#0x8
   \   0000DC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DF   E8           MOV     A,R0
   \   0000E0   F0           MOVX    @DPTR,A
   \   0000E1   A3           INC     DPTR
   \   0000E2   E9           MOV     A,R1
   \   0000E3   F0           MOVX    @DPTR,A
    785                req.initiator = TRUE;
   \   0000E4   740A         MOV     A,#0xa
   \   0000E6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E9   7401         MOV     A,#0x1
   \   0000EB   F0           MOVX    @DPTR,A
    786                APSME_TransportKeyReq( &req );
   \   0000EC                ; Setup parameters for call to function APSME_TransportKeyReq
   \   0000EC   7402         MOV     A,#0x2
   \   0000EE   12....       LCALL   ?XSTACK_DISP101_8
   \   0000F1   12....       LCALL   `??APSME_TransportKeyReq::?relay`; Banked call to: APSME_TransportKeyReq
   \   0000F4   E9           MOV     A,R1
    787          
    788                // send key to partner device
    789                req.dstAddr   = partNwkAddr;
   \   0000F5   85..82       MOV     DPL,?XSP + 0
   \   0000F8   85..83       MOV     DPH,?XSP + 1
   \   0000FB   E0           MOVX    A,@DPTR
   \   0000FC   F8           MOV     R0,A
   \   0000FD   A3           INC     DPTR
   \   0000FE   E0           MOVX    A,@DPTR
   \   0000FF   F9           MOV     R1,A
   \   000100   7402         MOV     A,#0x2
   \   000102   12....       LCALL   ?XSTACK_DISP0_8
   \   000105   E8           MOV     A,R0
   \   000106   F0           MOVX    @DPTR,A
   \   000107   A3           INC     DPTR
   \   000108   E9           MOV     A,R1
   \   000109   F0           MOVX    @DPTR,A
    790                req.extAddr   = initExtAddr;
   \   00010A   740F         MOV     A,#0xf
   \   00010C   12....       LCALL   ?XSTACK_DISP100_8
   \   00010F   7408         MOV     A,#0x8
   \   000111   12....       LCALL   ?XSTACK_DISP0_8
   \   000114   E8           MOV     A,R0
   \   000115   F0           MOVX    @DPTR,A
   \   000116   A3           INC     DPTR
   \   000117   E9           MOV     A,R1
   \   000118   F0           MOVX    @DPTR,A
    791                req.initiator = FALSE;
   \   000119   740A         MOV     A,#0xa
   \   00011B   12....       LCALL   ?XSTACK_DISP0_8
   \   00011E   7400         MOV     A,#0x0
   \   000120   F0           MOVX    @DPTR,A
    792          
    793                APSME_TransportKeyReq( &req );
   \   000121                ; Setup parameters for call to function APSME_TransportKeyReq
   \   000121   7402         MOV     A,#0x2
   \   000123   12....       LCALL   ?XSTACK_DISP101_8
   \   000126   12....       LCALL   `??APSME_TransportKeyReq::?relay`; Banked call to: APSME_TransportKeyReq
   \   000129   E9           MOV     A,R1
    794          
    795                // clear copy of key in RAM
    796                osal_memset( key, 0x00, SEC_KEY_LEN);
   \   00012A                ; Setup parameters for call to function osal_memset
   \   00012A   7C10         MOV     R4,#0x10
   \   00012C   7D00         MOV     R5,#0x0
   \   00012E   7900         MOV     R1,#0x0
   \   000130   7417         MOV     A,#0x17
   \   000132   12....       LCALL   ?XSTACK_DISP101_8
   \   000135   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    797          
    798              }
    799            }
    800          }
   \                     ??ZDSecMgrAppKeyReq_0:
   \   000138   7427         MOV     A,#0x27
   \   00013A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00013D   7F02         MOV     R7,#0x2
   \   00013F   02....       LJMP    ?BANKED_LEAVE_XDATA
    801          
    802          /******************************************************************************
    803           * @fn          ZDSecMgrSendNwkKey
    804           *
    805           * @brief       Send NWK key to device joining network.
    806           *
    807           * @param       device - [in] ZDSecMgrDevice_t, device info
    808           *
    809           * @return      ZStatus_t
    810           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    811          ZStatus_t ZDSecMgrSendNwkKey( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrSendNwkKey:
    812          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 30
   \   000005   74E2         MOV     A,#-0x1e
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    813            ZStatus_t status;
    814            APSME_TransportKeyReq_t req;
    815            APSDE_FrameTunnel_t tunnel;
    816            nwkKeyDesc tmpKey;
    817          
    818            req.dstAddr   = device->nwkAddr;
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F8           MOV     R0,A
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F9           MOV     R1,A
   \   000017   85..82       MOV     DPL,?XSP + 0
   \   00001A   85..83       MOV     DPH,?XSP + 1
   \   00001D   E8           MOV     A,R0
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   A3           INC     DPTR
   \   000020   E9           MOV     A,R1
   \   000021   F0           MOVX    @DPTR,A
    819            req.extAddr   = device->extAddr;
   \   000022   8E82         MOV     DPL,R6
   \   000024   8F83         MOV     DPH,R7
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F8           MOV     R0,A
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F9           MOV     R1,A
   \   00002D   7406         MOV     A,#0x6
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   E8           MOV     A,R0
   \   000033   F0           MOVX    @DPTR,A
   \   000034   A3           INC     DPTR
   \   000035   E9           MOV     A,R1
   \   000036   F0           MOVX    @DPTR,A
    820          
    821            req.keyType   = KEY_TYPE_NWK;
   \   000037   7402         MOV     A,#0x2
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   7401         MOV     A,#0x1
   \   00003E   F0           MOVX    @DPTR,A
    822          
    823            // get the Active Key into a local variable
    824            if ( NLME_ReadNwkKeyInfo( 0, sizeof(tmpKey), &tmpKey,
    825                                      ZCD_NV_NWK_ACTIVE_KEY_INFO ) != SUCCESS )
   \   00003F                ; Setup parameters for call to function NLME_ReadNwkKeyInfo
   \   00003F   75..3A       MOV     ?V0,#0x3a
   \   000042   75..00       MOV     ?V1,#0x0
   \   000045   78..         MOV     R0,#?V0
   \   000047   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004A   740F         MOV     A,#0xf
   \   00004C   12....       LCALL   ?XSTACK_DISP100_8
   \   00004F   88..         MOV     ?V0,R0
   \   000051   89..         MOV     ?V1,R1
   \   000053   78..         MOV     R0,#?V0
   \   000055   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000058   7C11         MOV     R4,#0x11
   \   00005A   7D00         MOV     R5,#0x0
   \   00005C   7A00         MOV     R2,#0x0
   \   00005E   7B00         MOV     R3,#0x0
   \   000060   12....       LCALL   `??NLME_ReadNwkKeyInfo::?relay`; Banked call to: NLME_ReadNwkKeyInfo
   \   000063   7404         MOV     A,#0x4
   \   000065   12....       LCALL   ?DEALLOC_XSTACK8
   \   000068   E9           MOV     A,R1
   \   000069   600E         JZ      ??ZDSecMgrSendNwkKey_0
    826            {
    827              // set key data to all 0s if NV read fails
    828              osal_memset(&tmpKey, 0x00, sizeof(tmpKey));
   \   00006B                ; Setup parameters for call to function osal_memset
   \   00006B   7C11         MOV     R4,#0x11
   \   00006D   7D00         MOV     R5,#0x0
   \   00006F   7900         MOV     R1,#0x0
   \   000071   740D         MOV     A,#0xd
   \   000073   12....       LCALL   ?XSTACK_DISP101_8
   \   000076   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    829            }
    830          
    831            if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
    832            {
    833              // set values
    834              req.keySeqNum = tmpKey.keySeqNum;
    835              req.key       = tmpKey.key;
    836          
    837              //devtag.pro.security.todo - make sure that if there is no link key the NWK
    838              //key isn't used to secure the frame at the APS layer -- since the receiving
    839              //device may not have a NWK key yet
    840              req.apsSecure = TRUE;
    841          
    842              // check if using secure hop to parent
    843              if ( device->parentAddr == NLME_GetShortAddr() )
    844              {
    845                req.nwkSecure = FALSE;
    846                req.tunnel    = NULL;
    847              }
    848              else
    849              {
    850                req.nwkSecure   = TRUE;
    851                req.tunnel      = &tunnel;
    852                req.tunnel->tna = device->parentAddr;
    853                req.tunnel->dea = device->extAddr;
    854              }
    855            }
    856            else
    857            {
    858              // default values
    859              // devtag.0604.verify
    860              req.nwkSecure = TRUE;
   \                     ??ZDSecMgrSendNwkKey_0:
   \   000079   740A         MOV     A,#0xa
   \   00007B   12....       LCALL   ?XSTACK_DISP0_8
   \   00007E   7401         MOV     A,#0x1
   \   000080   F0           MOVX    @DPTR,A
    861              req.apsSecure = FALSE;
   \   000081   7409         MOV     A,#0x9
   \   000083   12....       LCALL   ?XSTACK_DISP0_8
   \   000086   7400         MOV     A,#0x0
   \   000088   F0           MOVX    @DPTR,A
    862              req.tunnel    = NULL;
   \   000089   740B         MOV     A,#0xb
   \   00008B   12....       LCALL   ?XSTACK_DISP0_8
   \   00008E   7400         MOV     A,#0x0
   \   000090   F0           MOVX    @DPTR,A
   \   000091   A3           INC     DPTR
   \   000092   7400         MOV     A,#0x0
   \   000094   F0           MOVX    @DPTR,A
    863          
    864              if ( device->parentAddr != NLME_GetShortAddr() )
   \   000095                ; Setup parameters for call to function NLME_GetShortAddr
   \   000095   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000098   8A..         MOV     ?V0,R2
   \   00009A   8B..         MOV     ?V1,R3
   \   00009C   A8..         MOV     R0,?V0
   \   00009E   A9..         MOV     R1,?V1
   \   0000A0   8E82         MOV     DPL,R6
   \   0000A2   8F83         MOV     DPH,R7
   \   0000A4   A3           INC     DPTR
   \   0000A5   A3           INC     DPTR
   \   0000A6   A3           INC     DPTR
   \   0000A7   A3           INC     DPTR
   \   0000A8   E0           MOVX    A,@DPTR
   \   0000A9   68           XRL     A,R0
   \   0000AA   7003         JNZ     ??ZDSecMgrSendNwkKey_1
   \   0000AC   A3           INC     DPTR
   \   0000AD   E0           MOVX    A,@DPTR
   \   0000AE   69           XRL     A,R1
   \                     ??ZDSecMgrSendNwkKey_1:
   \   0000AF   6018         JZ      ??ZDSecMgrSendNwkKey_2
    865              {
    866                req.dstAddr = device->parentAddr;
   \   0000B1   8E82         MOV     DPL,R6
   \   0000B3   8F83         MOV     DPH,R7
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   A3           INC     DPTR
   \   0000B8   A3           INC     DPTR
   \   0000B9   E0           MOVX    A,@DPTR
   \   0000BA   F8           MOV     R0,A
   \   0000BB   A3           INC     DPTR
   \   0000BC   E0           MOVX    A,@DPTR
   \   0000BD   F9           MOV     R1,A
   \   0000BE   85..82       MOV     DPL,?XSP + 0
   \   0000C1   85..83       MOV     DPH,?XSP + 1
   \   0000C4   E8           MOV     A,R0
   \   0000C5   F0           MOVX    @DPTR,A
   \   0000C6   A3           INC     DPTR
   \   0000C7   E9           MOV     A,R1
   \   0000C8   F0           MOVX    @DPTR,A
    867              }
    868          
    869              // send the real key
    870              if ( zgPreConfigKeys == FALSE )
   \                     ??ZDSecMgrSendNwkKey_2:
   \   0000C9   90....       MOV     DPTR,#zgPreConfigKeys
   \   0000CC   E0           MOVX    A,@DPTR
   \   0000CD   7049         JNZ     ??ZDSecMgrSendNwkKey_3
    871              {
    872                req.keySeqNum = tmpKey.keySeqNum;
   \   0000CF   740D         MOV     A,#0xd
   \   0000D1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D4   E0           MOVX    A,@DPTR
   \   0000D5   C0E0         PUSH    A
   \   0000D7   7403         MOV     A,#0x3
   \   0000D9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DC   D0E0         POP     A
   \   0000DE   F0           MOVX    @DPTR,A
    873                req.key       = tmpKey.key;
   \   0000DF   740E         MOV     A,#0xe
   \   0000E1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E4   A882         MOV     R0,DPL
   \   0000E6   A983         MOV     R1,DPH
   \   0000E8   7404         MOV     A,#0x4
   \   0000EA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000ED   E8           MOV     A,R0
   \   0000EE   F0           MOVX    @DPTR,A
   \   0000EF   A3           INC     DPTR
   \   0000F0   E9           MOV     A,R1
   \   0000F1   F0           MOVX    @DPTR,A
    874          
    875                // check if using secure hop to to parent
    876                if ( device->parentAddr == NLME_GetShortAddr() )
   \   0000F2                ; Setup parameters for call to function NLME_GetShortAddr
   \   0000F2   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   0000F5   8A..         MOV     ?V0,R2
   \   0000F7   8B..         MOV     ?V1,R3
   \   0000F9   A8..         MOV     R0,?V0
   \   0000FB   A9..         MOV     R1,?V1
   \   0000FD   8E82         MOV     DPL,R6
   \   0000FF   8F83         MOV     DPH,R7
   \   000101   A3           INC     DPTR
   \   000102   A3           INC     DPTR
   \   000103   A3           INC     DPTR
   \   000104   A3           INC     DPTR
   \   000105   E0           MOVX    A,@DPTR
   \   000106   68           XRL     A,R0
   \   000107   7003         JNZ     ??ZDSecMgrSendNwkKey_4
   \   000109   A3           INC     DPTR
   \   00010A   E0           MOVX    A,@DPTR
   \   00010B   69           XRL     A,R1
   \                     ??ZDSecMgrSendNwkKey_4:
   \   00010C   701E         JNZ     ??ZDSecMgrSendNwkKey_5
    877                {
    878                  req.nwkSecure = FALSE;
   \   00010E   740A         MOV     A,#0xa
   \   000110   12....       LCALL   ?XSTACK_DISP0_8
   \   000113   7400         MOV     A,#0x0
   \   000115   F0           MOVX    @DPTR,A
   \   000116   8014         SJMP    ??ZDSecMgrSendNwkKey_5
    879                }
    880              }
    881              else
    882              {
    883                // this is to send the all zero key when the NWK key has been preconfigured
    884                req.key       = NULL;
   \                     ??ZDSecMgrSendNwkKey_3:
   \   000118   7404         MOV     A,#0x4
   \   00011A   12....       LCALL   ?XSTACK_DISP0_8
   \   00011D   7400         MOV     A,#0x0
   \   00011F   F0           MOVX    @DPTR,A
   \   000120   A3           INC     DPTR
   \   000121   7400         MOV     A,#0x0
   \   000123   F0           MOVX    @DPTR,A
    885                req.keySeqNum = 0;
   \   000124   7403         MOV     A,#0x3
   \   000126   12....       LCALL   ?XSTACK_DISP0_8
   \   000129   7400         MOV     A,#0x0
   \   00012B   F0           MOVX    @DPTR,A
    886              }
    887            }
    888          
    889            status = APSME_TransportKeyReq( &req );
   \                     ??ZDSecMgrSendNwkKey_5:
   \   00012C                ; Setup parameters for call to function APSME_TransportKeyReq
   \   00012C   AA..         MOV     R2,?XSP + 0
   \   00012E   AB..         MOV     R3,?XSP + 1
   \   000130   12....       LCALL   `??APSME_TransportKeyReq::?relay`; Banked call to: APSME_TransportKeyReq
   \   000133   E9           MOV     A,R1
   \   000134   FE           MOV     R6,A
    890          
    891            // clear copy of key in RAM before return
    892            osal_memset( &tmpKey, 0x00, sizeof(nwkKeyDesc) );
   \   000135                ; Setup parameters for call to function osal_memset
   \   000135   7C11         MOV     R4,#0x11
   \   000137   7D00         MOV     R5,#0x0
   \   000139   7900         MOV     R1,#0x0
   \   00013B   740D         MOV     A,#0xd
   \   00013D   12....       LCALL   ?XSTACK_DISP101_8
   \   000140   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    893          
    894            return status;
   \   000143   EE           MOV     A,R6
   \   000144   F9           MOV     R1,A
   \   000145   741E         MOV     A,#0x1e
   \   000147   12....       LCALL   ?DEALLOC_XSTACK8
   \   00014A   7F02         MOV     R7,#0x2
   \   00014C   02....       LJMP    ?BANKED_LEAVE_XDATA
    895          }
    896          
    897          /******************************************************************************
    898           * @fn          ZDSecMgrDeviceRemoveByExtAddr
    899           *
    900           * @brief       Remove device entry by its ext address.
    901           *
    902           * @param       pAddr - pointer to the extended address
    903           *
    904           * @return      ZStatus_t
    905           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    906          ZStatus_t ZDSecMgrDeviceRemoveByExtAddr( uint8 *pAddr )
   \                     ZDSecMgrDeviceRemoveByExtAddr:
    907          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    908            ZDSecMgrEntry_t *pEntry;
    909            uint8           retValue;
    910          
    911            retValue = (uint8)ZDSecMgrEntryLookupExt( pAddr, &pEntry );
   \   00000A                ; Setup parameters for call to function ZDSecMgrEntryLookupExt
   \   00000A   AC..         MOV     R4,?XSP + 0
   \   00000C   AD..         MOV     R5,?XSP + 1
   \   00000E   12....       LCALL   `??ZDSecMgrEntryLookupExt::?relay`; Banked call to: ZDSecMgrEntryLookupExt
   \   000011   E9           MOV     A,R1
   \   000012   FE           MOV     R6,A
    912          
    913            if( retValue == ZSuccess )
   \   000013   EE           MOV     A,R6
   \   000014   700E         JNZ     ??ZDSecMgrDeviceRemoveByExtAddr_0
    914            {
    915              // remove device from entry data
    916              ZDSecMgrEntryFree( pEntry );
   \   000016                ; Setup parameters for call to function ZDSecMgrEntryFree
   \   000016   85..82       MOV     DPL,?XSP + 0
   \   000019   85..83       MOV     DPH,?XSP + 1
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   FA           MOV     R2,A
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   FB           MOV     R3,A
   \   000021   12....       LCALL   `??ZDSecMgrEntryFree::?relay`; Banked call to: ZDSecMgrEntryFree
    917            }
    918          
    919            return retValue;
   \                     ??ZDSecMgrDeviceRemoveByExtAddr_0:
   \   000024   EE           MOV     A,R6
   \   000025   F9           MOV     R1,A
   \   000026   7402         MOV     A,#0x2
   \   000028   12....       LCALL   ?DEALLOC_XSTACK8
   \   00002B   7F01         MOV     R7,#0x1
   \   00002D   02....       LJMP    ?BANKED_LEAVE_XDATA
    920          }
    921          
    922          /******************************************************************************
    923           * @fn          ZDSecMgrDeviceRemove
    924           *
    925           * @brief       Remove device from network.
    926           *
    927           * @param       device - [in] ZDSecMgrDevice_t, device info
    928           *
    929           * @return      none
    930           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    931          void ZDSecMgrDeviceRemove( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrDeviceRemove:
    932          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    933            APSME_RemoveDeviceReq_t remDevReq;
    934            NLME_LeaveReq_t         leaveReq;
    935            associated_devices_t*   assoc;
    936          
    937            // check if parent, remove the device
    938            if ( device->parentAddr == NLME_GetShortAddr() )
   \   00000E                ; Setup parameters for call to function NLME_GetShortAddr
   \   00000E   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000011   8A..         MOV     ?V0,R2
   \   000013   8B..         MOV     ?V1,R3
   \   000015   A8..         MOV     R0,?V0
   \   000017   A9..         MOV     R1,?V1
   \   000019   8E82         MOV     DPL,R6
   \   00001B   8F83         MOV     DPH,R7
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   68           XRL     A,R0
   \   000023   7003         JNZ     ??ZDSecMgrDeviceRemove_0
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   69           XRL     A,R1
   \                     ??ZDSecMgrDeviceRemove_0:
   \   000028   6003         JZ      $+5
   \   00002A   02....       LJMP    ??ZDSecMgrDeviceRemove_1 & 0xFFFF
    939            {
    940              // this is the parent of the device
    941              leaveReq.extAddr        = device->extAddr;
   \   00002D   8E82         MOV     DPL,R6
   \   00002F   8F83         MOV     DPH,R7
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F8           MOV     R0,A
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F9           MOV     R1,A
   \   000038   85..82       MOV     DPL,?XSP + 0
   \   00003B   85..83       MOV     DPH,?XSP + 1
   \   00003E   E8           MOV     A,R0
   \   00003F   F0           MOVX    @DPTR,A
   \   000040   A3           INC     DPTR
   \   000041   E9           MOV     A,R1
   \   000042   F0           MOVX    @DPTR,A
    942              leaveReq.removeChildren = FALSE;
   \   000043   7402         MOV     A,#0x2
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   7400         MOV     A,#0x0
   \   00004A   F0           MOVX    @DPTR,A
    943              leaveReq.rejoin         = FALSE;
   \   00004B   7403         MOV     A,#0x3
   \   00004D   12....       LCALL   ?XSTACK_DISP0_8
   \   000050   7400         MOV     A,#0x0
   \   000052   F0           MOVX    @DPTR,A
    944          
    945              // find child association
    946              assoc = AssocGetWithExt( device->extAddr );
   \   000053                ; Setup parameters for call to function AssocGetWithExt
   \   000053   8E82         MOV     DPL,R6
   \   000055   8F83         MOV     DPH,R7
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   FA           MOV     R2,A
   \   00005B   A3           INC     DPTR
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   FB           MOV     R3,A
   \   00005E   12....       LCALL   `??AssocGetWithExt::?relay`; Banked call to: AssocGetWithExt
   \   000061   8A..         MOV     ?V0,R2
   \   000063   8B..         MOV     ?V1,R3
   \   000065   A8..         MOV     R0,?V0
   \   000067   A9..         MOV     R1,?V1
    947          
    948              if ( ( assoc != NULL                            ) &&
    949                   ( assoc->nodeRelation >= CHILD_RFD         ) &&
    950                   ( assoc->nodeRelation <= CHILD_FFD_RX_IDLE )    )
   \   000069   E8           MOV     A,R0
   \   00006A   49           ORL     A,R1
   \   00006B   6043         JZ      ??ZDSecMgrDeviceRemove_2
   \   00006D   8882         MOV     DPL,R0
   \   00006F   8983         MOV     DPH,R1
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   A3           INC     DPTR
   \   000075   E0           MOVX    A,@DPTR
   \   000076   6038         JZ      ??ZDSecMgrDeviceRemove_2
   \   000078   8882         MOV     DPL,R0
   \   00007A   8983         MOV     DPH,R1
   \   00007C   A3           INC     DPTR
   \   00007D   A3           INC     DPTR
   \   00007E   A3           INC     DPTR
   \   00007F   A3           INC     DPTR
   \   000080   E0           MOVX    A,@DPTR
   \   000081   C3           CLR     C
   \   000082   9405         SUBB    A,#0x5
   \   000084   502A         JNC     ??ZDSecMgrDeviceRemove_2
    951              {
    952                // check if associated device is authenticated
    953                if ( assoc->devStatus & DEV_SEC_AUTH_STATUS )
   \   000086   8882         MOV     DPL,R0
   \   000088   8983         MOV     DPH,R1
   \   00008A   A3           INC     DPTR
   \   00008B   A3           INC     DPTR
   \   00008C   A3           INC     DPTR
   \   00008D   A3           INC     DPTR
   \   00008E   A3           INC     DPTR
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   A2E3         MOV     C,0xE0 /* A   */.3
   \   000092   500A         JNC     ??ZDSecMgrDeviceRemove_3
    954                {
    955                  leaveReq.silent = FALSE;
   \   000094   7404         MOV     A,#0x4
   \   000096   12....       LCALL   ?XSTACK_DISP0_8
   \   000099   7400         MOV     A,#0x0
   \   00009B   F0           MOVX    @DPTR,A
   \   00009C   8008         SJMP    ??ZDSecMgrDeviceRemove_4
    956                }
    957                else
    958                {
    959                  leaveReq.silent = TRUE;
   \                     ??ZDSecMgrDeviceRemove_3:
   \   00009E   7404         MOV     A,#0x4
   \   0000A0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A3   7401         MOV     A,#0x1
   \   0000A5   F0           MOVX    @DPTR,A
    960                }
    961          
    962                NLME_LeaveReq( &leaveReq );
   \                     ??ZDSecMgrDeviceRemove_4:
   \   0000A6                ; Setup parameters for call to function NLME_LeaveReq
   \   0000A6   AA..         MOV     R2,?XSP + 0
   \   0000A8   AB..         MOV     R3,?XSP + 1
   \   0000AA   12....       LCALL   `??NLME_LeaveReq::?relay`; Banked call to: NLME_LeaveReq
   \   0000AD   E9           MOV     A,R1
   \   0000AE   8074         SJMP    ??ZDSecMgrDeviceRemove_5
    963              }
    964              else if ( device->nwkAddr == NLME_GetShortAddr() )
   \                     ??ZDSecMgrDeviceRemove_2:
   \   0000B0                ; Setup parameters for call to function NLME_GetShortAddr
   \   0000B0   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   0000B3   8A..         MOV     ?V0,R2
   \   0000B5   8B..         MOV     ?V1,R3
   \   0000B7   A8..         MOV     R0,?V0
   \   0000B9   A9..         MOV     R1,?V1
   \   0000BB   8E82         MOV     DPL,R6
   \   0000BD   8F83         MOV     DPH,R7
   \   0000BF   E0           MOVX    A,@DPTR
   \   0000C0   68           XRL     A,R0
   \   0000C1   7003         JNZ     ??ZDSecMgrDeviceRemove_6
   \   0000C3   A3           INC     DPTR
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   69           XRL     A,R1
   \                     ??ZDSecMgrDeviceRemove_6:
   \   0000C6   705C         JNZ     ??ZDSecMgrDeviceRemove_5
    965              {
    966                // this is when ZC wants that ZR removes itself from the network
    967                leaveReq.extAddr = NULL;
   \   0000C8   85..82       MOV     DPL,?XSP + 0
   \   0000CB   85..83       MOV     DPH,?XSP + 1
   \   0000CE   7400         MOV     A,#0x0
   \   0000D0   F0           MOVX    @DPTR,A
   \   0000D1   A3           INC     DPTR
   \   0000D2   7400         MOV     A,#0x0
   \   0000D4   F0           MOVX    @DPTR,A
    968                leaveReq.silent = FALSE;
   \   0000D5   7404         MOV     A,#0x4
   \   0000D7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DA   7400         MOV     A,#0x0
   \   0000DC   F0           MOVX    @DPTR,A
    969          
    970                NLME_LeaveReq( &leaveReq );
   \   0000DD                ; Setup parameters for call to function NLME_LeaveReq
   \   0000DD   AA..         MOV     R2,?XSP + 0
   \   0000DF   AB..         MOV     R3,?XSP + 1
   \   0000E1   12....       LCALL   `??NLME_LeaveReq::?relay`; Banked call to: NLME_LeaveReq
   \   0000E4   E9           MOV     A,R1
   \   0000E5   803D         SJMP    ??ZDSecMgrDeviceRemove_5
    971              }
    972            }
    973            else
    974            {
    975              // this is not the parent of the device
    976              remDevReq.parentAddr   = device->parentAddr;
   \                     ??ZDSecMgrDeviceRemove_1:
   \   0000E7   8E82         MOV     DPL,R6
   \   0000E9   8F83         MOV     DPH,R7
   \   0000EB   A3           INC     DPTR
   \   0000EC   A3           INC     DPTR
   \   0000ED   A3           INC     DPTR
   \   0000EE   A3           INC     DPTR
   \   0000EF   E0           MOVX    A,@DPTR
   \   0000F0   F8           MOV     R0,A
   \   0000F1   A3           INC     DPTR
   \   0000F2   E0           MOVX    A,@DPTR
   \   0000F3   F9           MOV     R1,A
   \   0000F4   7405         MOV     A,#0x5
   \   0000F6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F9   E8           MOV     A,R0
   \   0000FA   F0           MOVX    @DPTR,A
   \   0000FB   A3           INC     DPTR
   \   0000FC   E9           MOV     A,R1
   \   0000FD   F0           MOVX    @DPTR,A
    977              remDevReq.childExtAddr = device->extAddr;
   \   0000FE   8E82         MOV     DPL,R6
   \   000100   8F83         MOV     DPH,R7
   \   000102   A3           INC     DPTR
   \   000103   A3           INC     DPTR
   \   000104   E0           MOVX    A,@DPTR
   \   000105   F8           MOV     R0,A
   \   000106   A3           INC     DPTR
   \   000107   E0           MOVX    A,@DPTR
   \   000108   F9           MOV     R1,A
   \   000109   7407         MOV     A,#0x7
   \   00010B   12....       LCALL   ?XSTACK_DISP0_8
   \   00010E   E8           MOV     A,R0
   \   00010F   F0           MOVX    @DPTR,A
   \   000110   A3           INC     DPTR
   \   000111   E9           MOV     A,R1
   \   000112   F0           MOVX    @DPTR,A
    978          
    979          #if defined ( APP_TP2_TEST_MODE )
    980              if ( guTxApsSecON == TRUE )
    981              {
    982                remDevReq.apsSecure = TRUE;
    983              }
    984              else
    985              {
    986                remDevReq.apsSecure = FALSE;
    987              }
    988          
    989              APSME_RemoveDeviceReq( &remDevReq );
    990          
    991          #else
    992              if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
    993              {
    994                // For ZG_GLOBAL_LINK_KEY the message has to be sent twice, one
    995                // APS un-encrypted and one APS encrypted, to make sure that it can interoperate
    996                // with legacy Coordinator devices which can only handle one or the other.
    997                if ( zgApsLinkKeyType == ZG_GLOBAL_LINK_KEY )
    998                {
    999                  remDevReq.apsSecure = FALSE;
   1000          
   1001                  APSME_RemoveDeviceReq( &remDevReq );
   1002                }
   1003          
   1004                remDevReq.apsSecure = TRUE;
   1005          
   1006                APSME_RemoveDeviceReq( &remDevReq );
   1007              }
   1008              else
   1009              {
   1010                remDevReq.apsSecure = FALSE;
   \   000113   7409         MOV     A,#0x9
   \   000115   12....       LCALL   ?XSTACK_DISP0_8
   \   000118   7400         MOV     A,#0x0
   \   00011A   F0           MOVX    @DPTR,A
   1011          
   1012                APSME_RemoveDeviceReq( &remDevReq );
   \   00011B                ; Setup parameters for call to function APSME_RemoveDeviceReq
   \   00011B   7405         MOV     A,#0x5
   \   00011D   12....       LCALL   ?XSTACK_DISP101_8
   \   000120   12....       LCALL   `??APSME_RemoveDeviceReq::?relay`; Banked call to: APSME_RemoveDeviceReq
   \   000123   E9           MOV     A,R1
   1013              }
   1014          #endif
   1015            }
   1016          }
   \                     ??ZDSecMgrDeviceRemove_5:
   \   000124   740A         MOV     A,#0xa
   \   000126   12....       LCALL   ?DEALLOC_XSTACK8
   \   000129   7F02         MOV     R7,#0x2
   \   00012B   02....       LJMP    ?BANKED_LEAVE_XDATA
   1017          
   1018          /******************************************************************************
   1019           * @fn          ZDSecMgrDeviceValidateRM (RESIDENTIAL MODE)
   1020           *
   1021           * @brief       Decide whether device is allowed.
   1022           *
   1023           * @param       device - [in] ZDSecMgrDevice_t, device info
   1024           *
   1025           * @return      ZStatus_t
   1026           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1027          ZStatus_t ZDSecMgrDeviceValidateRM( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrDeviceValidateRM:
   1028          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1029            ZStatus_t status;
   1030          
   1031            status = ZSuccess;
   \   000004   7900         MOV     R1,#0x0
   1032          
   1033            (void)device;  // Intentionally unreferenced parameter
   1034          
   1035            // For test purpose, turning off the zgSecurePermitJoin flag will force
   1036            // the trust center to reject any newly joining devices by sending
   1037            // Remove-device to the parents.
   1038            if ( zgSecurePermitJoin == FALSE )
   \   000006   90....       MOV     DPTR,#zgSecurePermitJoin
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   7002         JNZ     ??ZDSecMgrDeviceValidateRM_0
   1039            {
   1040              status = ZNwkUnknownDevice;
   \   00000C   79C8         MOV     R1,#-0x38
   1041            }
   1042          
   1043          
   1044          
   1045          #if 0  // Taken out because the following functionality is only used for test
   1046                 // purpose. A more efficient (above) way is used. It can be put
   1047                 // back in if customers request for a white/black list feature.
   1048                 // ZDSecMgrStoredDeviceList[] is defined in ZDSecMgr.c
   1049          
   1050            // The following code processes the device black list (stored device list)
   1051            // If the joining device is not part of the forbidden device list
   1052            // Return ZSuccess. Otherwise, return ZNwkUnknownDevice. The trust center
   1053            // will send Remove-device and ban the device from joining.
   1054          
   1055            uint8     index;
   1056            uint8*    restricted;
   1057          
   1058            // Look through the stored device list - used for restricted devices
   1059            for ( index = 0; index < ZDSECMGR_STORED_DEVICES; index++ )
   1060            {
   1061              restricted = ZDSecMgrStoredDeviceList[index];
   1062          
   1063              if ( AddrMgrExtAddrEqual( restricted, device->extAddr )  == TRUE )
   1064              {
   1065                // return as unknown device in regards to validation
   1066                status = ZNwkUnknownDevice;
   1067          
   1068                // break from loop
   1069                index = ZDSECMGR_STORED_DEVICES;
   1070              }
   1071            }
   1072          
   1073          #endif
   1074          
   1075            return status;
   \                     ??ZDSecMgrDeviceValidateRM_0:
   \   00000E   D083         POP     DPH
   \   000010   D082         POP     DPL
   \   000012   02....       LJMP    ?BRET
   1076          }
   1077          
   1078          /******************************************************************************
   1079           * @fn          ZDSecMgrDeviceValidate
   1080           *
   1081           * @brief       Decide whether device is allowed.
   1082           *
   1083           * @param       device - [in] ZDSecMgrDevice_t, device info
   1084           *
   1085           * @return      ZStatus_t
   1086           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1087          ZStatus_t ZDSecMgrDeviceValidate( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrDeviceValidate:
   1088          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1089            ZStatus_t status;
   1090          
   1091            if ( ZDSecMgrPermitJoiningEnabled == TRUE )
   \   000004   90....       MOV     DPTR,#ZDSecMgrPermitJoiningEnabled
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   7007         JNZ     ??ZDSecMgrDeviceValidate_0
   1092            {
   1093              status = ZDSecMgrDeviceValidateRM( device );
   \   00000C                ; Setup parameters for call to function ZDSecMgrDeviceValidateRM
   \   00000C   12....       LCALL   `??ZDSecMgrDeviceValidateRM::?relay`; Banked call to: ZDSecMgrDeviceValidateRM
   \   00000F   E9           MOV     A,R1
   \   000010   F9           MOV     R1,A
   \   000011   8002         SJMP    ??ZDSecMgrDeviceValidate_1
   1094            }
   1095            else
   1096            {
   1097              status = ZNwkUnknownDevice;
   \                     ??ZDSecMgrDeviceValidate_0:
   \   000013   79C8         MOV     R1,#-0x38
   1098            }
   1099          
   1100            return status;
   \                     ??ZDSecMgrDeviceValidate_1:
   \   000015   D083         POP     DPH
   \   000017   D082         POP     DPL
   \   000019   02....       LJMP    ?BRET
   1101          }
   1102          
   1103          /******************************************************************************
   1104           * @fn          ZDSecMgrDeviceJoin
   1105           *
   1106           * @brief       Try to join this device.
   1107           *
   1108           * @param       device - [in] ZDSecMgrDevice_t, device info
   1109           *
   1110           * @return      ZStatus_t
   1111           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1112          ZStatus_t ZDSecMgrDeviceJoin( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrDeviceJoin:
   1113          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV     A,#-0xe
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1114            ZStatus_t status = ZSuccess;
   \   00000E   75..00       MOV     ?V0,#0x0
   1115            uint16    ami;
   1116          
   1117            // attempt to validate device that joined/rejoined without security
   1118            if ( device->secure == FALSE )
   \   000011   8E82         MOV     DPL,R6
   \   000013   8F83         MOV     DPH,R7
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   700A         JNZ     ??ZDSecMgrDeviceJoin_0
   1119            {
   1120              status = ZDSecMgrDeviceValidate( device );
   \   00001E                ; Setup parameters for call to function ZDSecMgrDeviceValidate
   \   00001E   EE           MOV     A,R6
   \   00001F   FA           MOV     R2,A
   \   000020   EF           MOV     A,R7
   \   000021   FB           MOV     R3,A
   \   000022   12....       LCALL   `??ZDSecMgrDeviceValidate::?relay`; Banked call to: ZDSecMgrDeviceValidate
   \   000025   E9           MOV     A,R1
   \   000026   F5..         MOV     ?V0,A
   1121            }
   1122          
   1123            if ( status == ZSuccess )
   \                     ??ZDSecMgrDeviceJoin_0:
   \   000028   E5..         MOV     A,?V0
   \   00002A   7064         JNZ     ??ZDSecMgrDeviceJoin_1
   1124            {
   1125              // Add the device to the address manager
   1126              ZDSecMgrAddrStore( device->nwkAddr, device->extAddr, &ami );
   \   00002C                ; Setup parameters for call to function ZDSecMgrAddrStore
   \   00002C   A8..         MOV     R0,?XSP + 0
   \   00002E   A9..         MOV     R1,?XSP + 1
   \   000030   88..         MOV     ?V2,R0
   \   000032   89..         MOV     ?V3,R1
   \   000034   78..         MOV     R0,#?V2
   \   000036   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000039   8E82         MOV     DPL,R6
   \   00003B   8F83         MOV     DPH,R7
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   FC           MOV     R4,A
   \   000041   A3           INC     DPTR
   \   000042   E0           MOVX    A,@DPTR
   \   000043   FD           MOV     R5,A
   \   000044   8E82         MOV     DPL,R6
   \   000046   8F83         MOV     DPH,R7
   \   000048   E0           MOVX    A,@DPTR
   \   000049   FA           MOV     R2,A
   \   00004A   A3           INC     DPTR
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   FB           MOV     R3,A
   \   00004D   12....       LCALL   `??ZDSecMgrAddrStore::?relay`; Banked call to: ZDSecMgrAddrStore
   \   000050   7402         MOV     A,#0x2
   \   000052   12....       LCALL   ?DEALLOC_XSTACK8
   \   000055   E9           MOV     A,R1
   1127          
   1128              // Only send the key to devices that have not been authenticated
   1129              if ( ( device->devStatus & DEV_SEC_INIT_STATUS ) &&
   1130                   ( device->secure == FALSE ) )
   \   000056   8E82         MOV     DPL,R6
   \   000058   8F83         MOV     DPH,R7
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   E0           MOVX    A,@DPTR
   \   000062   A2E2         MOV     C,0xE0 /* A   */.2
   \   000064   5017         JNC     ??ZDSecMgrDeviceJoin_2
   \   000066   8E82         MOV     DPL,R6
   \   000068   8F83         MOV     DPH,R7
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   A3           INC     DPTR
   \   000070   E0           MOVX    A,@DPTR
   \   000071   700A         JNZ     ??ZDSecMgrDeviceJoin_2
   1131              {
   1132                //send the nwk key data to the joining device
   1133                status = ZDSecMgrSendNwkKey( device );
   \   000073                ; Setup parameters for call to function ZDSecMgrSendNwkKey
   \   000073   EE           MOV     A,R6
   \   000074   FA           MOV     R2,A
   \   000075   EF           MOV     A,R7
   \   000076   FB           MOV     R3,A
   \   000077   12....       LCALL   `??ZDSecMgrSendNwkKey::?relay`; Banked call to: ZDSecMgrSendNwkKey
   \   00007A   E9           MOV     A,R1
   \   00007B   F5..         MOV     ?V0,A
   1134              }
   1135          
   1136              if ( status != ZSuccess )
   \                     ??ZDSecMgrDeviceJoin_2:
   \   00007D   E5..         MOV     A,?V0
   \   00007F   600F         JZ      ??ZDSecMgrDeviceJoin_1
   1137              {
   1138                ZDSecMgrAddrClear( device->extAddr );
   \   000081                ; Setup parameters for call to function ZDSecMgrAddrClear
   \   000081   8E82         MOV     DPL,R6
   \   000083   8F83         MOV     DPH,R7
   \   000085   A3           INC     DPTR
   \   000086   A3           INC     DPTR
   \   000087   E0           MOVX    A,@DPTR
   \   000088   FA           MOV     R2,A
   \   000089   A3           INC     DPTR
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   FB           MOV     R3,A
   \   00008C   12....       LCALL   `??ZDSecMgrAddrClear::?relay`; Banked call to: ZDSecMgrAddrClear
   \   00008F   E9           MOV     A,R1
   1139              }
   1140            }
   1141          
   1142            if ( status != ZSuccess )
   \                     ??ZDSecMgrDeviceJoin_1:
   \   000090   E5..         MOV     A,?V0
   \   000092   6009         JZ      ??ZDSecMgrDeviceJoin_3
   1143            {
   1144              // not allowed or transport key failed, remove the device
   1145              ZDSecMgrDeviceRemove( device );
   \   000094                ; Setup parameters for call to function ZDSecMgrDeviceRemove
   \   000094   EE           MOV     A,R6
   \   000095   FA           MOV     R2,A
   \   000096   EF           MOV     A,R7
   \   000097   FB           MOV     R3,A
   \   000098   12....       LCALL   `??ZDSecMgrDeviceRemove::?relay`; Banked call to: ZDSecMgrDeviceRemove
   \   00009B   8073         SJMP    ??ZDSecMgrDeviceJoin_4
   1146            }
   1147            else
   1148            {
   1149              // Pass the Trust Center Device Indication to higher layer if callback registered
   1150              if (zdoCBFunc[ZDO_TC_DEVICE_CBID] != NULL )
   \                     ??ZDSecMgrDeviceJoin_3:
   \   00009D   90....       MOV     DPTR,#zdoCBFunc + 16
   \   0000A0   E0           MOVX    A,@DPTR
   \   0000A1   F8           MOV     R0,A
   \   0000A2   A3           INC     DPTR
   \   0000A3   E0           MOVX    A,@DPTR
   \   0000A4   F9           MOV     R1,A
   \   0000A5   E8           MOV     A,R0
   \   0000A6   49           ORL     A,R1
   \   0000A7   6067         JZ      ??ZDSecMgrDeviceJoin_4
   1151              {
   1152                ZDO_TC_Device_t dev;
   1153          
   1154                dev.nwkAddr = device->nwkAddr;
   \   0000A9   8E82         MOV     DPL,R6
   \   0000AB   8F83         MOV     DPH,R7
   \   0000AD   E0           MOVX    A,@DPTR
   \   0000AE   F8           MOV     R0,A
   \   0000AF   A3           INC     DPTR
   \   0000B0   E0           MOVX    A,@DPTR
   \   0000B1   F9           MOV     R1,A
   \   0000B2   7402         MOV     A,#0x2
   \   0000B4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B7   E8           MOV     A,R0
   \   0000B8   F0           MOVX    @DPTR,A
   \   0000B9   A3           INC     DPTR
   \   0000BA   E9           MOV     A,R1
   \   0000BB   F0           MOVX    @DPTR,A
   1155                osal_memcpy( dev.extAddr, device->extAddr, Z_EXTADDR_LEN );
   \   0000BC                ; Setup parameters for call to function osal_memcpy
   \   0000BC   8E82         MOV     DPL,R6
   \   0000BE   8F83         MOV     DPH,R7
   \   0000C0   A3           INC     DPTR
   \   0000C1   A3           INC     DPTR
   \   0000C2   E0           MOVX    A,@DPTR
   \   0000C3   F5..         MOV     ?V4,A
   \   0000C5   A3           INC     DPTR
   \   0000C6   E0           MOVX    A,@DPTR
   \   0000C7   F5..         MOV     ?V5,A
   \   0000C9   75..00       MOV     ?V6,#0x0
   \   0000CC   78..         MOV     R0,#?V4
   \   0000CE   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000D1   7C08         MOV     R4,#0x8
   \   0000D3   7D00         MOV     R5,#0x0
   \   0000D5   7407         MOV     A,#0x7
   \   0000D7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DA   AA82         MOV     R2,DPL
   \   0000DC   AB83         MOV     R3,DPH
   \   0000DE   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000E1   7403         MOV     A,#0x3
   \   0000E3   12....       LCALL   ?DEALLOC_XSTACK8
   1156                dev.parentAddr = device->parentAddr;
   \   0000E6   8E82         MOV     DPL,R6
   \   0000E8   8F83         MOV     DPH,R7
   \   0000EA   A3           INC     DPTR
   \   0000EB   A3           INC     DPTR
   \   0000EC   A3           INC     DPTR
   \   0000ED   A3           INC     DPTR
   \   0000EE   E0           MOVX    A,@DPTR
   \   0000EF   F8           MOV     R0,A
   \   0000F0   A3           INC     DPTR
   \   0000F1   E0           MOVX    A,@DPTR
   \   0000F2   F9           MOV     R1,A
   \   0000F3   740C         MOV     A,#0xc
   \   0000F5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F8   E8           MOV     A,R0
   \   0000F9   F0           MOVX    @DPTR,A
   \   0000FA   A3           INC     DPTR
   \   0000FB   E9           MOV     A,R1
   \   0000FC   F0           MOVX    @DPTR,A
   1157          
   1158                zdoCBFunc[ZDO_TC_DEVICE_CBID]( (void*)&dev );
   \   0000FD                ; Setup parameters for indirect call
   \   0000FD   7402         MOV     A,#0x2
   \   0000FF   12....       LCALL   ?XSTACK_DISP101_8
   \   000102   90....       MOV     DPTR,#zdoCBFunc + 16
   \   000105   E0           MOVX    A,@DPTR
   \   000106   F8           MOV     R0,A
   \   000107   A3           INC     DPTR
   \   000108   E0           MOVX    A,@DPTR
   \   000109   F583         MOV     DPH,A
   \   00010B   8882         MOV     DPL,R0
   \   00010D   12....       LCALL   ?CALL_IND
   1159              }
   1160            }
   1161          
   1162            return status;
   \                     ??ZDSecMgrDeviceJoin_4:
   \   000110   A9..         MOV     R1,?V0
   \   000112   740E         MOV     A,#0xe
   \   000114   12....       LCALL   ?DEALLOC_XSTACK8
   \   000117   7F07         MOV     R7,#0x7
   \   000119   02....       LJMP    ?BANKED_LEAVE_XDATA
   1163          }
   1164          
   1165          /******************************************************************************
   1166           * @fn          ZDSecMgrDeviceJoinDirect
   1167           *
   1168           * @brief       Try to join this device as a direct child.
   1169           *
   1170           * @param       device - [in] ZDSecMgrDevice_t, device info
   1171           *
   1172           * @return      ZStatus_t
   1173           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1174          ZStatus_t ZDSecMgrDeviceJoinDirect( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrDeviceJoinDirect:
   1175          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   1176            ZStatus_t status;
   1177          
   1178            status = ZDSecMgrDeviceJoin( device );
   \   000009                ; Setup parameters for call to function ZDSecMgrDeviceJoin
   \   000009   EE           MOV     A,R6
   \   00000A   FA           MOV     R2,A
   \   00000B   EF           MOV     A,R7
   \   00000C   FB           MOV     R3,A
   \   00000D   12....       LCALL   `??ZDSecMgrDeviceJoin::?relay`; Banked call to: ZDSecMgrDeviceJoin
   \   000010   E9           MOV     A,R1
   \   000011   F5..         MOV     ?V0,A
   1179          
   1180            if ( status == ZSuccess )
   \   000013   E5..         MOV     A,?V0
   \   000015   700F         JNZ     ??ZDSecMgrDeviceJoinDirect_0
   1181            {
   1182              // set association status to authenticated
   1183              ZDSecMgrAssocDeviceAuth( AssocGetWithShort( device->nwkAddr ) );
   \   000017                ; Setup parameters for call to function ZDSecMgrAssocDeviceAuth
   \   000017                ; Setup parameters for call to function AssocGetWithShort
   \   000017   8E82         MOV     DPL,R6
   \   000019   8F83         MOV     DPH,R7
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   FA           MOV     R2,A
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   FB           MOV     R3,A
   \   000020   12....       LCALL   `??AssocGetWithShort::?relay`; Banked call to: AssocGetWithShort
   \   000023   12....       LCALL   `??ZDSecMgrAssocDeviceAuth::?relay`; Banked call to: ZDSecMgrAssocDeviceAuth
   1184            }
   1185          
   1186            return status;
   \                     ??ZDSecMgrDeviceJoinDirect_0:
   \   000026   A9..         MOV     R1,?V0
   \   000028   7F01         MOV     R7,#0x1
   \   00002A   02....       LJMP    ?BANKED_LEAVE_XDATA
   1187          }
   1188          
   1189          /******************************************************************************
   1190           * @fn          ZDSecMgrDeviceJoinFwd
   1191           *
   1192           * @brief       Forward join to Trust Center.
   1193           *
   1194           * @param       device - [in] ZDSecMgrDevice_t, device info
   1195           *
   1196           * @return      ZStatus_t
   1197           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1198          ZStatus_t ZDSecMgrDeviceJoinFwd( ZDSecMgrDevice_t* device )
   \                     ZDSecMgrDeviceJoinFwd:
   1199          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1200            ZStatus_t               status;
   1201            APSME_UpdateDeviceReq_t req;
   1202          
   1203            // forward any joining device to the Trust Center -- the Trust Center will
   1204            // decide if the device is allowed to join
   1205            status = ZSuccess;
   \   00000A   7900         MOV     R1,#0x0
   1206          
   1207            // forward authorization to the Trust Center
   1208            req.dstAddr    = APSME_TRUSTCENTER_NWKADDR;
   \   00000C   85..82       MOV     DPL,?XSP + 0
   \   00000F   85..83       MOV     DPH,?XSP + 1
   \   000012   7400         MOV     A,#0x0
   \   000014   F0           MOVX    @DPTR,A
   \   000015   A3           INC     DPTR
   \   000016   7400         MOV     A,#0x0
   \   000018   F0           MOVX    @DPTR,A
   1209            req.devAddr    = device->nwkAddr;
   \   000019   8A82         MOV     DPL,R2
   \   00001B   8B83         MOV     DPH,R3
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   FC           MOV     R4,A
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \   000021   FD           MOV     R5,A
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   EC           MOV     A,R4
   \   000028   F0           MOVX    @DPTR,A
   \   000029   A3           INC     DPTR
   \   00002A   ED           MOV     A,R5
   \   00002B   F0           MOVX    @DPTR,A
   1210            req.devExtAddr = device->extAddr;
   \   00002C   8A82         MOV     DPL,R2
   \   00002E   8B83         MOV     DPH,R3
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   FC           MOV     R4,A
   \   000034   A3           INC     DPTR
   \   000035   E0           MOVX    A,@DPTR
   \   000036   FD           MOV     R5,A
   \   000037   7404         MOV     A,#0x4
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   EC           MOV     A,R4
   \   00003D   F0           MOVX    @DPTR,A
   \   00003E   A3           INC     DPTR
   \   00003F   ED           MOV     A,R5
   \   000040   F0           MOVX    @DPTR,A
   1211          
   1212            // set security status, option for router to reject if policy set
   1213            if ( (device->devStatus & DEV_HIGH_SEC_STATUS) )
   \   000041   8A82         MOV     DPL,R2
   \   000043   8B83         MOV     DPH,R3
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   A2E7         MOV     C,0xE0 /* A   */.7
   \   00004F   503D         JNC     ??ZDSecMgrDeviceJoinFwd_0
   1214            {
   1215              if ( device->devStatus & DEV_REJOIN_STATUS )
   \   000051   8A82         MOV     DPL,R2
   \   000053   8B83         MOV     DPH,R3
   \   000055   A3           INC     DPTR
   \   000056   A3           INC     DPTR
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   A2E6         MOV     C,0xE0 /* A   */.6
   \   00005F   5023         JNC     ??ZDSecMgrDeviceJoinFwd_1
   1216              {
   1217                if ( device->secure == TRUE )
   \   000061   8A82         MOV     DPL,R2
   \   000063   8B83         MOV     DPH,R3
   \   000065   A3           INC     DPTR
   \   000066   A3           INC     DPTR
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   6401         XRL     A,#0x1
   \   00006E   700A         JNZ     ??ZDSecMgrDeviceJoinFwd_2
   1218                {
   1219                  req.status = APSME_UD_HIGH_SECURED_REJOIN;
   \   000070   7406         MOV     A,#0x6
   \   000072   12....       LCALL   ?XSTACK_DISP0_8
   \   000075   7404         MOV     A,#0x4
   \   000077   F0           MOVX    @DPTR,A
   \   000078   804F         SJMP    ??ZDSecMgrDeviceJoinFwd_3
   1220                }
   1221                else
   1222                {
   1223                  req.status = APSME_UD_HIGH_UNSECURED_REJOIN;
   \                     ??ZDSecMgrDeviceJoinFwd_2:
   \   00007A   7406         MOV     A,#0x6
   \   00007C   12....       LCALL   ?XSTACK_DISP0_8
   \   00007F   7407         MOV     A,#0x7
   \   000081   F0           MOVX    @DPTR,A
   \   000082   8045         SJMP    ??ZDSecMgrDeviceJoinFwd_3
   1224                }
   1225              }
   1226              else
   1227              {
   1228                req.status = APSME_UD_HIGH_UNSECURED_JOIN;
   \                     ??ZDSecMgrDeviceJoinFwd_1:
   \   000084   7406         MOV     A,#0x6
   \   000086   12....       LCALL   ?XSTACK_DISP0_8
   \   000089   7405         MOV     A,#0x5
   \   00008B   F0           MOVX    @DPTR,A
   \   00008C   803B         SJMP    ??ZDSecMgrDeviceJoinFwd_3
   1229              }
   1230            }
   1231            else
   1232            {
   1233              if ( device->devStatus & DEV_REJOIN_STATUS )
   \                     ??ZDSecMgrDeviceJoinFwd_0:
   \   00008E   8A82         MOV     DPL,R2
   \   000090   8B83         MOV     DPH,R3
   \   000092   A3           INC     DPTR
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   A2E6         MOV     C,0xE0 /* A   */.6
   \   00009C   5023         JNC     ??ZDSecMgrDeviceJoinFwd_4
   1234              {
   1235                if ( device->secure == TRUE )
   \   00009E   8A82         MOV     DPL,R2
   \   0000A0   8B83         MOV     DPH,R3
   \   0000A2   A3           INC     DPTR
   \   0000A3   A3           INC     DPTR
   \   0000A4   A3           INC     DPTR
   \   0000A5   A3           INC     DPTR
   \   0000A6   A3           INC     DPTR
   \   0000A7   A3           INC     DPTR
   \   0000A8   E0           MOVX    A,@DPTR
   \   0000A9   6401         XRL     A,#0x1
   \   0000AB   700A         JNZ     ??ZDSecMgrDeviceJoinFwd_5
   1236                {
   1237                  req.status = APSME_UD_STANDARD_SECURED_REJOIN;
   \   0000AD   7406         MOV     A,#0x6
   \   0000AF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B2   7400         MOV     A,#0x0
   \   0000B4   F0           MOVX    @DPTR,A
   \   0000B5   8012         SJMP    ??ZDSecMgrDeviceJoinFwd_3
   1238                }
   1239                else
   1240                {
   1241                  req.status = APSME_UD_STANDARD_TRUST_CENTER_REJOIN;
   \                     ??ZDSecMgrDeviceJoinFwd_5:
   \   0000B7   7406         MOV     A,#0x6
   \   0000B9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BC   7403         MOV     A,#0x3
   \   0000BE   F0           MOVX    @DPTR,A
   \   0000BF   8008         SJMP    ??ZDSecMgrDeviceJoinFwd_3
   1242                }
   1243              }
   1244              else
   1245              {
   1246                req.status = APSME_UD_STANDARD_UNSECURED_JOIN;
   \                     ??ZDSecMgrDeviceJoinFwd_4:
   \   0000C1   7406         MOV     A,#0x6
   \   0000C3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C6   7401         MOV     A,#0x1
   \   0000C8   F0           MOVX    @DPTR,A
   1247              }
   1248            }
   1249          
   1250            // set association status to authenticated
   1251            ZDSecMgrAssocDeviceAuth( AssocGetWithShort( device->nwkAddr ) );
   \                     ??ZDSecMgrDeviceJoinFwd_3:
   \   0000C9                ; Setup parameters for call to function AssocGetWithShort
   \   0000C9   8A82         MOV     DPL,R2
   \   0000CB   8B83         MOV     DPH,R3
   \   0000CD   E0           MOVX    A,@DPTR
   \   0000CE   FA           MOV     R2,A
   \   0000CF   A3           INC     DPTR
   \   0000D0   E0           MOVX    A,@DPTR
   \   0000D1   FB           MOV     R3,A
   \   0000D2   12....       LCALL   `??AssocGetWithShort::?relay`; Banked call to: AssocGetWithShort
   \   0000D5   8A..         MOV     ?V0,R2
   \   0000D7   8B..         MOV     ?V1,R3
   \   0000D9   AA..         MOV     R2,?V0
   \   0000DB   AB..         MOV     R3,?V1
   \   0000DD                ; Setup parameters for call to function ZDSecMgrAssocDeviceAuth
   \   0000DD   12....       LCALL   `??ZDSecMgrAssocDeviceAuth::?relay`; Banked call to: ZDSecMgrAssocDeviceAuth
   1252          
   1253          #if defined ( APP_TP2_TEST_MODE )
   1254            if ( guTxApsSecON == TRUE )
   1255            {
   1256              req.apsSecure = TRUE;
   1257            }
   1258            else
   1259            {
   1260              req.apsSecure = FALSE;
   1261            }
   1262          
   1263            // send and APSME_UPDATE_DEVICE request to the trust center
   1264            status = APSME_UpdateDeviceReq( &req );
   1265          
   1266          #else
   1267            if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
   1268            {
   1269              // For ZG_GLOBAL_LINK_KEY the message has to be sent twice one
   1270              // un-encrypted and one APS encrypted, to make sure that it can interoperate
   1271              // with legacy Coordinator devices which can only handle one or the other.
   1272              if ( zgApsLinkKeyType == ZG_GLOBAL_LINK_KEY )
   1273              {
   1274                req.apsSecure = FALSE;
   1275          
   1276                // send and APSME_UPDATE_DEVICE request to the trust center
   1277                status = APSME_UpdateDeviceReq( &req );
   1278              }
   1279          
   1280              // send the message APS encrypted
   1281              req.apsSecure = TRUE;
   1282          
   1283              // send and APSME_UPDATE_DEVICE request to the trust center
   1284              status = APSME_UpdateDeviceReq( &req );
   1285            }
   1286            else
   1287            {
   1288              req.apsSecure = FALSE;
   \   0000E0   7407         MOV     A,#0x7
   \   0000E2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E5   7400         MOV     A,#0x0
   \   0000E7   F0           MOVX    @DPTR,A
   1289          
   1290              // send and APSME_UPDATE_DEVICE request to the trust center
   1291              status = APSME_UpdateDeviceReq( &req );
   \   0000E8                ; Setup parameters for call to function APSME_UpdateDeviceReq
   \   0000E8   AA..         MOV     R2,?XSP + 0
   \   0000EA   AB..         MOV     R3,?XSP + 1
   \   0000EC   12....       LCALL   `??APSME_UpdateDeviceReq::?relay`; Banked call to: APSME_UpdateDeviceReq
   \   0000EF   E9           MOV     A,R1
   \   0000F0   F9           MOV     R1,A
   1292            }
   1293          #endif
   1294          
   1295            return status;
   \   0000F1   7408         MOV     A,#0x8
   \   0000F3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000F6   7F02         MOV     R7,#0x2
   \   0000F8   02....       LJMP    ?BANKED_LEAVE_XDATA
   1296          }
   1297          
   1298          /******************************************************************************
   1299           * @fn          ZDSecMgrDeviceNew
   1300           *
   1301           * @brief       Process a new device.
   1302           *
   1303           * @param       device - [in] ZDSecMgrDevice_t, device info
   1304           *
   1305           * @return      ZStatus_t
   1306           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1307          ZStatus_t ZDSecMgrDeviceNew( ZDSecMgrDevice_t* joiner )
   \                     ZDSecMgrDeviceNew:
   1308          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   1309            ZStatus_t status;
   1310          
   1311            if ( ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
   1312                || ( ( ZG_BUILD_RTR_TYPE ) && APSME_IsDistributedSecurity() ) )
   \   000009   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6006         JZ      ??ZDSecMgrDeviceNew_0
   \   00000F                ; Setup parameters for call to function APSME_IsDistributedSecurity
   \   00000F   12....       LCALL   `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
   \   000012   E9           MOV     A,R1
   \   000013   600B         JZ      ??ZDSecMgrDeviceNew_1
   1313            {
   1314              // try to join this device
   1315              status = ZDSecMgrDeviceJoinDirect( joiner );
   \                     ??ZDSecMgrDeviceNew_0:
   \   000015                ; Setup parameters for call to function ZDSecMgrDeviceJoinDirect
   \   000015   EE           MOV     A,R6
   \   000016   FA           MOV     R2,A
   \   000017   EF           MOV     A,R7
   \   000018   FB           MOV     R3,A
   \   000019   12....       LCALL   `??ZDSecMgrDeviceJoinDirect::?relay`; Banked call to: ZDSecMgrDeviceJoinDirect
   \   00001C   E9           MOV     A,R1
   \   00001D   F9           MOV     R1,A
   \   00001E   8009         SJMP    ??ZDSecMgrDeviceNew_2
   1316            }
   1317            else
   1318            {
   1319              status = ZDSecMgrDeviceJoinFwd( joiner );
   \                     ??ZDSecMgrDeviceNew_1:
   \   000020                ; Setup parameters for call to function ZDSecMgrDeviceJoinFwd
   \   000020   EE           MOV     A,R6
   \   000021   FA           MOV     R2,A
   \   000022   EF           MOV     A,R7
   \   000023   FB           MOV     R3,A
   \   000024   12....       LCALL   `??ZDSecMgrDeviceJoinFwd::?relay`; Banked call to: ZDSecMgrDeviceJoinFwd
   \   000027   E9           MOV     A,R1
   \   000028   F9           MOV     R1,A
   1320            }
   1321          
   1322            return status;
   \                     ??ZDSecMgrDeviceNew_2:
   \   000029   7F01         MOV     R7,#0x1
   \   00002B   02....       LJMP    ?BANKED_LEAVE_XDATA
   1323          }
   1324          
   1325          /******************************************************************************
   1326           * @fn          ZDSecMgrAssocDeviceAuth
   1327           *
   1328           * @brief       Set associated device status to authenticated
   1329           *
   1330           * @param       assoc - [in, out] associated_devices_t
   1331           *
   1332           * @return      none
   1333           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1334          void ZDSecMgrAssocDeviceAuth( associated_devices_t* assoc )
   \                     ZDSecMgrAssocDeviceAuth:
   1335          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1336            if ( assoc != NULL )
   \   000004   EA           MOV     A,R2
   \   000005   4B           ORL     A,R3
   \   000006   600D         JZ      ??ZDSecMgrAssocDeviceAuth_0
   1337            {
   1338              assoc->devStatus |= DEV_SEC_AUTH_STATUS;
   \   000008   8A82         MOV     DPL,R2
   \   00000A   8B83         MOV     DPH,R3
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   D2E3         SETB    0xE0 /* A   */.3
   \   000014   F0           MOVX    @DPTR,A
   1339            }
   1340          }
   \                     ??ZDSecMgrAssocDeviceAuth_0:
   \   000015   D083         POP     DPH
   \   000017   D082         POP     DPL
   \   000019   02....       LJMP    ?BRET
   1341          
   1342          /******************************************************************************
   1343           * @fn          ZDSecMgrAuthNwkKey
   1344           *
   1345           * @brief       Handle next step in authentication process
   1346           *
   1347           * @param       none
   1348           *
   1349           * @return      none
   1350           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1351          void ZDSecMgrAuthNwkKey()
   \                     ZDSecMgrAuthNwkKey:
   1352          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1353            if ( devState == DEV_END_DEVICE_UNAUTH )
   \   000004   90....       MOV     DPTR,#devState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6405         XRL     A,#0x5
   \   00000A   700D         JNZ     ??ZDSecMgrAuthNwkKey_0
   1354            {
   1355              // inform ZDO that device has been authenticated
   1356              osal_set_event ( ZDAppTaskID, ZDO_DEVICE_AUTH );
   \   00000C                ; Setup parameters for call to function osal_set_event
   \   00000C   7A80         MOV     R2,#-0x80
   \   00000E   7B00         MOV     R3,#0x0
   \   000010   90....       MOV     DPTR,#ZDAppTaskID
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F9           MOV     R1,A
   \   000015   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000018   E9           MOV     A,R1
   1357            }
   1358          }
   \                     ??ZDSecMgrAuthNwkKey_0:
   \   000019   D083         POP     DPH
   \   00001B   D082         POP     DPL
   \   00001D   02....       LJMP    ?BRET
   1359          
   1360          /******************************************************************************
   1361           * PUBLIC FUNCTIONS
   1362           */
   1363          /******************************************************************************
   1364           * @fn          ZDSecMgrInit
   1365           *
   1366           * @brief       Initialize ZigBee Device Security Manager.
   1367           *
   1368           * @param       state - device initialization state
   1369           *
   1370           * @return      none
   1371           */
   1372          #if ( ADDRMGR_CALLBACK_ENABLED == 1 )
   1373          void ZDSecMgrAddrMgrCB( uint8 update, AddrMgrEntry_t* newEntry, AddrMgrEntry_t* oldEntry );
   1374          void ZDSecMgrAddrMgrCB( uint8           update,
   1375                                  AddrMgrEntry_t* newEntry,
   1376                                  AddrMgrEntry_t* oldEntry )
   1377          {
   1378            (void)update;
   1379            (void)newEntry;
   1380            (void)oldEntry;
   1381          }
   1382          #endif // ( ADDRMGR_CALLBACK_ENABLED == 1 )
   1383          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1384          void ZDSecMgrInit(uint8 state)
   \                     ZDSecMgrInit:
   1385          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1386            if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
   1387            {
   1388              // initialize sub modules
   1389              ZDSecMgrEntryInit(state);
   1390          
   1391              if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
   1392              {
   1393                APSME_SetRequest( apsTrustCenterAddress, 0, NLME_GetExtAddr() );
   1394              }
   1395          
   1396              // register with Address Manager
   1397          #if ( ADDRMGR_CALLBACK_ENABLED == 1 )
   1398              AddrMgrRegister( ADDRMGR_REG_SECURITY, ZDSecMgrAddrMgrCB );
   1399          #endif
   1400            }
   1401          
   1402            if ( ZG_SECURE_ENABLED )
   1403            {
   1404              if ( ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
   1405                   || ( ( ZG_BUILD_RTR_TYPE ) && APSME_IsDistributedSecurity() ) )
   1406              {
   1407                // setup joining permissions
   1408                ZDSecMgrPermitJoiningEnabled = TRUE;
   1409                ZDSecMgrPermitJoiningTimed   = FALSE;
   1410              }
   1411            }
   1412          
   1413            // configure security based on security mode and type of device
   1414            ZDSecMgrConfig();
   \   000004                ; Setup parameters for call to function ZDSecMgrConfig
   \   000004   12....       LCALL   `??ZDSecMgrConfig::?relay`; Banked call to: ZDSecMgrConfig
   1415          }
   \   000007   D083         POP     DPH
   \   000009   D082         POP     DPL
   \   00000B   02....       LJMP    ?BRET
   1416          
   1417          /******************************************************************************
   1418           * @fn          ZDSecMgrConfig
   1419           *
   1420           * @brief       Configure ZigBee Device Security Manager.
   1421           *
   1422           * @param       none
   1423           *
   1424           * @return      none
   1425           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1426          void ZDSecMgrConfig( void )
   \                     ZDSecMgrConfig:
   1427          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1428            if ( ZG_SECURE_ENABLED )
   1429            {
   1430              SSP_Init();
   1431          
   1432              if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
   1433              {
   1434                if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
   1435                {
   1436                  // COMMERCIAL MODE - COORDINATOR DEVICE
   1437                  APSME_SecurityCM_CD();
   1438                }
   1439                else if ( ZSTACK_ROUTER_BUILD )
   1440                {
   1441                  // COMMERCIAL MODE - ROUTER DEVICE
   1442                  APSME_SecurityCM_RD();
   1443                }
   1444                else
   1445                {
   1446                  // COMMERCIAL MODE - END DEVICE
   1447                  APSME_SecurityCM_ED();
   1448                }
   1449              }
   1450              else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
   1451              {
   1452                if ( ( ZG_BUILD_COORDINATOR_TYPE ) && ( ZG_DEVICE_COORDINATOR_TYPE ) )
   1453                {
   1454                  // RESIDENTIAL MODE - COORDINATOR DEVICE
   1455                  APSME_SecurityRM_CD();
   1456                }
   1457                else if ( ZSTACK_ROUTER_BUILD )
   1458                {
   1459                  // RESIDENTIAL MODE - ROUTER DEVICE
   1460                  APSME_SecurityRM_RD();
   1461                }
   1462                else
   1463                {
   1464                  // RESIDENTIAL MODE - END DEVICE
   1465                  APSME_SecurityRM_ED();
   1466                }
   1467              }
   1468            }
   1469            else
   1470            {
   1471              // NO SECURITY
   1472              APSME_SecurityNM();
   \   000004                ; Setup parameters for call to function APSME_SecurityNM
   \   000004   12....       LCALL   `??APSME_SecurityNM::?relay`; Banked call to: APSME_SecurityNM
   1473            }
   1474          }
   \   000007   D083         POP     DPH
   \   000009   D082         POP     DPL
   \   00000B   02....       LJMP    ?BRET
   1475          
   1476          /******************************************************************************
   1477           * @fn          ZDSecMgrPermitJoining
   1478           *
   1479           * @brief       Process request to change joining permissions.
   1480           *
   1481           * @param       duration - [in] timed duration for join in seconds
   1482           *                         - 0x00 not allowed
   1483           *                         - 0xFF allowed without timeout
   1484           *
   1485           * @return      uint8 - success(TRUE:FALSE)
   1486           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1487          uint8 ZDSecMgrPermitJoining( uint8 duration )
   \                     ZDSecMgrPermitJoining:
   1488          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   F8           MOV     R0,A
   1489            uint8 accept;
   1490          
   1491            ZDSecMgrPermitJoiningTimed = FALSE;
   \   000006   90....       MOV     DPTR,#ZDSecMgrPermitJoiningTimed
   \   000009   7400         MOV     A,#0x0
   \   00000B   F0           MOVX    @DPTR,A
   1492          
   1493            if ( duration > 0 )
   \   00000C   E8           MOV     A,R0
   \   00000D   6013         JZ      ??ZDSecMgrPermitJoining_0
   1494            {
   1495              ZDSecMgrPermitJoiningEnabled = TRUE;
   \   00000F   90....       MOV     DPTR,#ZDSecMgrPermitJoiningEnabled
   \   000012   7401         MOV     A,#0x1
   \   000014   F0           MOVX    @DPTR,A
   1496          
   1497              if ( duration != 0xFF )
   \   000015   74FF         MOV     A,#-0x1
   \   000017   68           XRL     A,R0
   \   000018   600E         JZ      ??ZDSecMgrPermitJoining_1
   1498              {
   1499                ZDSecMgrPermitJoiningTimed = TRUE;
   \   00001A   90....       MOV     DPTR,#ZDSecMgrPermitJoiningTimed
   \   00001D   7401         MOV     A,#0x1
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   8006         SJMP    ??ZDSecMgrPermitJoining_1
   1500              }
   1501            }
   1502            else
   1503            {
   1504              ZDSecMgrPermitJoiningEnabled = FALSE;
   \                     ??ZDSecMgrPermitJoining_0:
   \   000022   90....       MOV     DPTR,#ZDSecMgrPermitJoiningEnabled
   \   000025   7400         MOV     A,#0x0
   \   000027   F0           MOVX    @DPTR,A
   1505            }
   1506          
   1507            accept = TRUE;
   \                     ??ZDSecMgrPermitJoining_1:
   \   000028   7901         MOV     R1,#0x1
   1508          
   1509            return accept;
   \   00002A   D083         POP     DPH
   \   00002C   D082         POP     DPL
   \   00002E   02....       LJMP    ?BRET
   1510          }
   1511          
   1512          /******************************************************************************
   1513           * @fn          ZDSecMgrPermitJoiningTimeout
   1514           *
   1515           * @brief       Process permit joining timeout
   1516           *
   1517           * @param       none
   1518           *
   1519           * @return      none
   1520           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1521          void ZDSecMgrPermitJoiningTimeout( void )
   \                     ZDSecMgrPermitJoiningTimeout:
   1522          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1523            if ( ZDSecMgrPermitJoiningTimed == TRUE )
   \   000004   90....       MOV     DPTR,#ZDSecMgrPermitJoiningTimed
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   700C         JNZ     ??ZDSecMgrPermitJoiningTimeout_0
   1524            {
   1525              ZDSecMgrPermitJoiningEnabled = FALSE;
   \   00000C   90....       MOV     DPTR,#ZDSecMgrPermitJoiningEnabled
   \   00000F   7400         MOV     A,#0x0
   \   000011   F0           MOVX    @DPTR,A
   1526              ZDSecMgrPermitJoiningTimed   = FALSE;
   \   000012   90....       MOV     DPTR,#ZDSecMgrPermitJoiningTimed
   \   000015   7400         MOV     A,#0x0
   \   000017   F0           MOVX    @DPTR,A
   1527            }
   1528          }
   \                     ??ZDSecMgrPermitJoiningTimeout_0:
   \   000018   D083         POP     DPH
   \   00001A   D082         POP     DPL
   \   00001C   02....       LJMP    ?BRET
   1529          
   1530          /******************************************************************************
   1531           * @fn          ZDSecMgrNewDeviceEvent
   1532           *
   1533           * @brief       Process a the new device event, if found reset new device
   1534           *              event/timer.
   1535           *
   1536           * @param       ShortAddr - of New Device to process
   1537           *
   1538           * @return      uint8 - found(TRUE:FALSE)
   1539           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1540          uint8 ZDSecMgrNewDeviceEvent( uint16 ShortAddr )
   \                     ZDSecMgrNewDeviceEvent:
   1541          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1542            uint8                 found;
   1543            ZDSecMgrDevice_t      device;
   1544            AddrMgrEntry_t        addrEntry;
   1545            associated_devices_t* assoc;
   1546            ZStatus_t             status;
   1547          
   1548            // initialize return results
   1549            found = FALSE;
   \   00000A   75..00       MOV     ?V0,#0x0
   1550          
   1551            assoc = AssocGetWithShort( ShortAddr );
   \   00000D                ; Setup parameters for call to function AssocGetWithShort
   \   00000D   12....       LCALL   `??AssocGetWithShort::?relay`; Banked call to: AssocGetWithShort
   \   000010   8A..         MOV     ?V2,R2
   \   000012   8B..         MOV     ?V3,R3
   \   000014   AE..         MOV     R6,?V2
   \   000016   AF..         MOV     R7,?V3
   1552          
   1553            if ( assoc != NULL )
   \   000018   EE           MOV     A,R6
   \   000019   4F           ORL     A,R7
   \   00001A   7003         JNZ     $+5
   \   00001C   02....       LJMP    ??ZDSecMgrNewDeviceEvent_0 & 0xFFFF
   1554            {
   1555              // device found
   1556              found = TRUE;
   \   00001F   75..01       MOV     ?V0,#0x1
   1557          
   1558              // check for preconfigured security
   1559              if ( zgPreConfigKeys == TRUE )
   \   000022   90....       MOV     DPTR,#zgPreConfigKeys
   \   000025   E0           MOVX    A,@DPTR
   \   000026   6401         XRL     A,#0x1
   \   000028   7007         JNZ     ??ZDSecMgrNewDeviceEvent_1
   1560              {
   1561                // set association status to authenticated
   1562                ZDSecMgrAssocDeviceAuth( assoc );
   \   00002A                ; Setup parameters for call to function ZDSecMgrAssocDeviceAuth
   \   00002A   EE           MOV     A,R6
   \   00002B   FA           MOV     R2,A
   \   00002C   EF           MOV     A,R7
   \   00002D   FB           MOV     R3,A
   \   00002E   12....       LCALL   `??ZDSecMgrAssocDeviceAuth::?relay`; Banked call to: ZDSecMgrAssocDeviceAuth
   1563              }
   1564          
   1565              // set up device info
   1566              addrEntry.user  = ADDRMGR_USER_DEFAULT;
   \                     ??ZDSecMgrNewDeviceEvent_1:
   \   000031   7408         MOV     A,#0x8
   \   000033   12....       LCALL   ?XSTACK_DISP0_8
   \   000036   7400         MOV     A,#0x0
   \   000038   F0           MOVX    @DPTR,A
   1567              addrEntry.index = assoc->addrIdx;
   \   000039   8E82         MOV     DPL,R6
   \   00003B   8F83         MOV     DPH,R7
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   F8           MOV     R0,A
   \   000041   A3           INC     DPTR
   \   000042   E0           MOVX    A,@DPTR
   \   000043   F9           MOV     R1,A
   \   000044   7413         MOV     A,#0x13
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   E8           MOV     A,R0
   \   00004A   F0           MOVX    @DPTR,A
   \   00004B   A3           INC     DPTR
   \   00004C   E9           MOV     A,R1
   \   00004D   F0           MOVX    @DPTR,A
   1568              AddrMgrEntryGet( &addrEntry );
   \   00004E                ; Setup parameters for call to function AddrMgrEntryGet
   \   00004E   7408         MOV     A,#0x8
   \   000050   12....       LCALL   ?XSTACK_DISP101_8
   \   000053   12....       LCALL   `??AddrMgrEntryGet::?relay`; Banked call to: AddrMgrEntryGet
   \   000056   E9           MOV     A,R1
   1569          
   1570              device.nwkAddr    = assoc->shortAddr;
   \   000057   8E82         MOV     DPL,R6
   \   000059   8F83         MOV     DPH,R7
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   F8           MOV     R0,A
   \   00005D   A3           INC     DPTR
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   F9           MOV     R1,A
   \   000060   85..82       MOV     DPL,?XSP + 0
   \   000063   85..83       MOV     DPH,?XSP + 1
   \   000066   E8           MOV     A,R0
   \   000067   F0           MOVX    @DPTR,A
   \   000068   A3           INC     DPTR
   \   000069   E9           MOV     A,R1
   \   00006A   F0           MOVX    @DPTR,A
   1571              device.extAddr    = addrEntry.extAddr;
   \   00006B   740B         MOV     A,#0xb
   \   00006D   12....       LCALL   ?XSTACK_DISP0_8
   \   000070   A882         MOV     R0,DPL
   \   000072   A983         MOV     R1,DPH
   \   000074   7402         MOV     A,#0x2
   \   000076   12....       LCALL   ?XSTACK_DISP0_8
   \   000079   E8           MOV     A,R0
   \   00007A   F0           MOVX    @DPTR,A
   \   00007B   A3           INC     DPTR
   \   00007C   E9           MOV     A,R1
   \   00007D   F0           MOVX    @DPTR,A
   1572              device.parentAddr = NLME_GetShortAddr();
   \   00007E                ; Setup parameters for call to function NLME_GetShortAddr
   \   00007E   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000081   7404         MOV     A,#0x4
   \   000083   12....       LCALL   ?XSTACK_DISP0_8
   \   000086   EA           MOV     A,R2
   \   000087   F0           MOVX    @DPTR,A
   \   000088   A3           INC     DPTR
   \   000089   EB           MOV     A,R3
   \   00008A   F0           MOVX    @DPTR,A
   1573          
   1574              // the new device performed Secured Rejoin
   1575              if ( ( assoc->devStatus & DEV_SECURED_JOIN ) &&
   1576                   ( assoc->devStatus & DEV_REJOIN_STATUS ) )
   \   00008B   8E82         MOV     DPL,R6
   \   00008D   8F83         MOV     DPH,R7
   \   00008F   A3           INC     DPTR
   \   000090   A3           INC     DPTR
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   A3           INC     DPTR
   \   000094   E0           MOVX    A,@DPTR
   \   000095   5460         ANL     A,#0x60
   \   000097   6460         XRL     A,#0x60
   \   000099   700A         JNZ     ??ZDSecMgrNewDeviceEvent_2
   1577              {
   1578                device.secure     = TRUE;
   \   00009B   7406         MOV     A,#0x6
   \   00009D   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A0   7401         MOV     A,#0x1
   \   0000A2   F0           MOVX    @DPTR,A
   \   0000A3   8008         SJMP    ??ZDSecMgrNewDeviceEvent_3
   1579              }
   1580              else
   1581              {
   1582                device.secure     = FALSE;
   \                     ??ZDSecMgrNewDeviceEvent_2:
   \   0000A5   7406         MOV     A,#0x6
   \   0000A7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AA   7400         MOV     A,#0x0
   \   0000AC   F0           MOVX    @DPTR,A
   1583              }
   1584              device.devStatus  = assoc->devStatus;
   \                     ??ZDSecMgrNewDeviceEvent_3:
   \   0000AD   8E82         MOV     DPL,R6
   \   0000AF   8F83         MOV     DPH,R7
   \   0000B1   A3           INC     DPTR
   \   0000B2   A3           INC     DPTR
   \   0000B3   A3           INC     DPTR
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   E0           MOVX    A,@DPTR
   \   0000B7   C0E0         PUSH    A
   \   0000B9   7407         MOV     A,#0x7
   \   0000BB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BE   D0E0         POP     A
   \   0000C0   F0           MOVX    @DPTR,A
   1585          
   1586              // process new device
   1587              status = ZDSecMgrDeviceNew( &device );
   \   0000C1                ; Setup parameters for call to function ZDSecMgrDeviceNew
   \   0000C1   AA..         MOV     R2,?XSP + 0
   \   0000C3   AB..         MOV     R3,?XSP + 1
   \   0000C5   12....       LCALL   `??ZDSecMgrDeviceNew::?relay`; Banked call to: ZDSecMgrDeviceNew
   \   0000C8   E9           MOV     A,R1
   1588          
   1589              if ( status == ZSuccess )
   \   0000C9   700F         JNZ     ??ZDSecMgrNewDeviceEvent_4
   1590              {
   1591                assoc->devStatus &= ~DEV_SEC_INIT_STATUS;
   \   0000CB   8E82         MOV     DPL,R6
   \   0000CD   8F83         MOV     DPH,R7
   \   0000CF   A3           INC     DPTR
   \   0000D0   A3           INC     DPTR
   \   0000D1   A3           INC     DPTR
   \   0000D2   A3           INC     DPTR
   \   0000D3   A3           INC     DPTR
   \   0000D4   E0           MOVX    A,@DPTR
   \   0000D5   C2E2         CLR     0xE0 /* A   */.2
   \   0000D7   F0           MOVX    @DPTR,A
   \   0000D8   801A         SJMP    ??ZDSecMgrNewDeviceEvent_0
   1592              }
   1593              else
   1594              {
   1595                // Clear SECURITY bit from Address Manager
   1596                ZDSecMgrAddrClear( addrEntry.extAddr );
   \                     ??ZDSecMgrNewDeviceEvent_4:
   \   0000DA                ; Setup parameters for call to function ZDSecMgrAddrClear
   \   0000DA   740B         MOV     A,#0xb
   \   0000DC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DF   AA82         MOV     R2,DPL
   \   0000E1   AB83         MOV     R3,DPH
   \   0000E3   12....       LCALL   `??ZDSecMgrAddrClear::?relay`; Banked call to: ZDSecMgrAddrClear
   \   0000E6   E9           MOV     A,R1
   1597          
   1598                // Remove the Association completely
   1599                AssocRemove( addrEntry.extAddr );
   \   0000E7                ; Setup parameters for call to function AssocRemove
   \   0000E7   740B         MOV     A,#0xb
   \   0000E9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EC   AA82         MOV     R2,DPL
   \   0000EE   AB83         MOV     R3,DPH
   \   0000F0   12....       LCALL   `??AssocRemove::?relay`; Banked call to: AssocRemove
   \   0000F3   E9           MOV     A,R1
   1600              }
   1601            }
   1602          
   1603            return found;
   \                     ??ZDSecMgrNewDeviceEvent_0:
   \   0000F4   A9..         MOV     R1,?V0
   \   0000F6   7415         MOV     A,#0x15
   \   0000F8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000FB   7F04         MOV     R7,#0x4
   \   0000FD   02....       LJMP    ?BANKED_LEAVE_XDATA
   1604          }
   1605          
   1606          /******************************************************************************
   1607           * @fn          ZDSecMgrTCExtAddrCheck
   1608           *
   1609           * @brief       Verifies if received ext. address matches TC ext. address.
   1610           *
   1611           * @param       extAddr - Extended address to be verified.
   1612           *
   1613           * @return      TRUE - extended address matches
   1614           *              FALSE - otherwise
   1615           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1616          uint8 ZDSecMgrTCExtAddrCheck( uint8* extAddr )
   \                     ZDSecMgrTCExtAddrCheck:
   1617          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1618            uint8  lookup[Z_EXTADDR_LEN];
   1619            APSME_GetRequest( apsTrustCenterAddress, 0, lookup );
   \   00000E                ; Setup parameters for call to function APSME_GetRequest
   \   00000E   AC..         MOV     R4,?XSP + 0
   \   000010   AD..         MOV     R5,?XSP + 1
   \   000012   7A00         MOV     R2,#0x0
   \   000014   7B00         MOV     R3,#0x0
   \   000016   79AB         MOV     R1,#-0x55
   \   000018   12....       LCALL   `??APSME_GetRequest::?relay`; Banked call to: APSME_GetRequest
   \   00001B   E9           MOV     A,R1
   1620            return osal_ExtAddrEqual( extAddr, lookup );
   \   00001C                ; Setup parameters for call to function sAddrExtCmp
   \   00001C   AC..         MOV     R4,?XSP + 0
   \   00001E   AD..         MOV     R5,?XSP + 1
   \   000020   EE           MOV     A,R6
   \   000021   FA           MOV     R2,A
   \   000022   EF           MOV     A,R7
   \   000023   FB           MOV     R3,A
   \   000024   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000027   7408         MOV     A,#0x8
   \   000029   12....       LCALL   ?DEALLOC_XSTACK8
   \   00002C   7F01         MOV     R7,#0x1
   \   00002E   02....       LJMP    ?BANKED_LEAVE_XDATA
   1621          }
   1622          
   1623          /******************************************************************************
   1624           * @fn          ZDSecMgrTCDataLoad
   1625           *
   1626           * @brief       Stores the address of TC into address manager.
   1627           *
   1628           * @param       extAddr - Extended address to be verified.
   1629           *
   1630           * @return      none
   1631           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1632          void ZDSecMgrTCDataLoad( uint8* extAddr )
   \                     ZDSecMgrTCDataLoad:
   1633          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 15
   \   000005   74F1         MOV     A,#-0xf
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1634            uint16 ami;
   1635            AddrMgrEntry_t entry;
   1636          
   1637            // lookup using TC short address
   1638            entry.user    = ADDRMGR_USER_DEFAULT;
   \   00000E   7402         MOV     A,#0x2
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   7400         MOV     A,#0x0
   \   000015   F0           MOVX    @DPTR,A
   1639            osal_cpyExtAddr( entry.extAddr, extAddr );
   \   000016                ; Setup parameters for call to function sAddrExtCpy
   \   000016   EE           MOV     A,R6
   \   000017   FC           MOV     R4,A
   \   000018   EF           MOV     A,R7
   \   000019   FD           MOV     R5,A
   \   00001A   7405         MOV     A,#0x5
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   AA82         MOV     R2,DPL
   \   000021   AB83         MOV     R3,DPH
   \   000023   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1640          
   1641            // Verify if TC address has been added to Address Manager
   1642            if ( !APSME_IsDistributedSecurity() && ( AddrMgrEntryLookupExt( &entry ) != TRUE ) )
   \   000026                ; Setup parameters for call to function APSME_IsDistributedSecurity
   \   000026   12....       LCALL   `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
   \   000029   E9           MOV     A,R1
   \   00002A   702B         JNZ     ??ZDSecMgrTCDataLoad_0
   \   00002C                ; Setup parameters for call to function AddrMgrEntryLookupExt
   \   00002C   7402         MOV     A,#0x2
   \   00002E   12....       LCALL   ?XSTACK_DISP101_8
   \   000031   12....       LCALL   `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
   \   000034   E9           MOV     A,R1
   \   000035   6401         XRL     A,#0x1
   \   000037   601E         JZ      ??ZDSecMgrTCDataLoad_0
   1643            {
   1644              ZDSecMgrAddrStore( APSME_TRUSTCENTER_NWKADDR, extAddr, &ami );
   \   000039                ; Setup parameters for call to function ZDSecMgrAddrStore
   \   000039   A8..         MOV     R0,?XSP + 0
   \   00003B   A9..         MOV     R1,?XSP + 1
   \   00003D   88..         MOV     ?V0,R0
   \   00003F   89..         MOV     ?V1,R1
   \   000041   78..         MOV     R0,#?V0
   \   000043   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000046   EE           MOV     A,R6
   \   000047   FC           MOV     R4,A
   \   000048   EF           MOV     A,R7
   \   000049   FD           MOV     R5,A
   \   00004A   7A00         MOV     R2,#0x0
   \   00004C   7B00         MOV     R3,#0x0
   \   00004E   12....       LCALL   `??ZDSecMgrAddrStore::?relay`; Banked call to: ZDSecMgrAddrStore
   \   000051   7402         MOV     A,#0x2
   \   000053   12....       LCALL   ?DEALLOC_XSTACK8
   \   000056   E9           MOV     A,R1
   1645            }
   1646          }
   \                     ??ZDSecMgrTCDataLoad_0:
   \   000057   740F         MOV     A,#0xf
   \   000059   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005C   7F02         MOV     R7,#0x2
   \   00005E   02....       LJMP    ?BANKED_LEAVE_XDATA
   1647          
   1648          /******************************************************************************
   1649           * @fn          ZDSecMgrTransportKeyInd
   1650           *
   1651           * @brief       Process the ZDO_TransportKeyInd_t message.
   1652           *
   1653           * @param       ind - [in] ZDO_TransportKeyInd_t indication
   1654           *
   1655           * @return      none
   1656           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1657          void ZDSecMgrTransportKeyInd( ZDO_TransportKeyInd_t* ind )
   \                     ZDSecMgrTransportKeyInd:
   1658          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV     A,#-0x10
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1659            uint8 index;
   1660            uint8 zgPreConfigKey[SEC_KEY_LEN];
   1661          
   1662            ZDSecMgrUpdateTCAddress( ind->srcExtAddr );
   \   00000E                ; Setup parameters for call to function ZDSecMgrUpdateTCAddress
   \   00000E   EE           MOV     A,R6
   \   00000F   2416         ADD     A,#0x16
   \   000011   FA           MOV     R2,A
   \   000012   E4           CLR     A
   \   000013   3F           ADDC    A,R7
   \   000014   FB           MOV     R3,A
   \   000015   12....       LCALL   `??ZDSecMgrUpdateTCAddress::?relay`; Banked call to: ZDSecMgrUpdateTCAddress
   1663            // check for distributed security
   1664            if ( ( ZG_BUILD_RTR_TYPE ) && osal_isbufset( ind->srcExtAddr, 0xFF, Z_EXTADDR_LEN ) )
   \   000018                ; Setup parameters for call to function osal_isbufset
   \   000018   7C08         MOV     R4,#0x8
   \   00001A   79FF         MOV     R1,#-0x1
   \   00001C   EE           MOV     A,R6
   \   00001D   2416         ADD     A,#0x16
   \   00001F   FA           MOV     R2,A
   \   000020   E4           CLR     A
   \   000021   3F           ADDC    A,R7
   \   000022   FB           MOV     R3,A
   \   000023   12....       LCALL   `??osal_isbufset::?relay`; Banked call to: osal_isbufset
   \   000026   E9           MOV     A,R1
   \   000027   6006         JZ      ??ZDSecMgrTransportKeyInd_0
   1665            {
   1666              ZDSecMgrPermitJoiningEnabled = TRUE;
   \   000029   90....       MOV     DPTR,#ZDSecMgrPermitJoiningEnabled
   \   00002C   7401         MOV     A,#0x1
   \   00002E   F0           MOVX    @DPTR,A
   1667            }
   1668          
   1669            // load Trust Center data if needed
   1670            ZDSecMgrTCDataLoad( ind->srcExtAddr );
   \                     ??ZDSecMgrTransportKeyInd_0:
   \   00002F                ; Setup parameters for call to function ZDSecMgrTCDataLoad
   \   00002F   EE           MOV     A,R6
   \   000030   2416         ADD     A,#0x16
   \   000032   FA           MOV     R2,A
   \   000033   E4           CLR     A
   \   000034   3F           ADDC    A,R7
   \   000035   FB           MOV     R3,A
   \   000036   12....       LCALL   `??ZDSecMgrTCDataLoad::?relay`; Banked call to: ZDSecMgrTCDataLoad
   1671          
   1672            if ( ( ind->keyType == KEY_TYPE_NWK ) ||
   1673                 ( ind->keyType == 6            ) )
   \   000039   8E82         MOV     DPL,R6
   \   00003B   8F83         MOV     DPH,R7
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   E0           MOVX    A,@DPTR
   \   000042   6401         XRL     A,#0x1
   \   000044   6010         JZ      ??ZDSecMgrTransportKeyInd_1
   \   000046   8E82         MOV     DPL,R6
   \   000048   8F83         MOV     DPH,R7
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   6406         XRL     A,#0x6
   \   000051   6003         JZ      $+5
   \   000053   02....       LJMP    ??ZDSecMgrTransportKeyInd_2 & 0xFFFF
   1674            {
   1675              // check for dummy NWK key (all zeros)
   1676              for ( index = 0;
   \                     ??ZDSecMgrTransportKeyInd_1:
   \   000056   7A00         MOV     R2,#0x0
   \   000058   8001         SJMP    ??ZDSecMgrTransportKeyInd_3
   1677                    ( (index < SEC_KEY_LEN) && (ind->key[index] == 0) );
   1678                    index++ );
   \                     ??ZDSecMgrTransportKeyInd_4:
   \   00005A   0A           INC     R2
   \                     ??ZDSecMgrTransportKeyInd_3:
   \   00005B   EA           MOV     A,R2
   \   00005C   C3           CLR     C
   \   00005D   9410         SUBB    A,#0x10
   \   00005F   5015         JNC     ??ZDSecMgrTransportKeyInd_5
   \   000061   EA           MOV     A,R2
   \   000062   F8           MOV     R0,A
   \   000063   7900         MOV     R1,#0x0
   \   000065   EE           MOV     A,R6
   \   000066   28           ADD     A,R0
   \   000067   F582         MOV     DPL,A
   \   000069   EF           MOV     A,R7
   \   00006A   39           ADDC    A,R1
   \   00006B   F583         MOV     DPH,A
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   A3           INC     DPTR
   \   000070   A3           INC     DPTR
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   E0           MOVX    A,@DPTR
   \   000074   60E4         JZ      ??ZDSecMgrTransportKeyInd_4
   1679          
   1680              if ( index == SEC_KEY_LEN )
   \                     ??ZDSecMgrTransportKeyInd_5:
   \   000076   7410         MOV     A,#0x10
   \   000078   6A           XRL     A,R2
   \   000079   702F         JNZ     ??ZDSecMgrTransportKeyInd_6
   1681              {
   1682                // load preconfigured key - once!!
   1683                if ( !_NIB.nwkKeyLoaded )
   \   00007B   90....       MOV     DPTR,#_NIB + 61
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   7052         JNZ     ??ZDSecMgrTransportKeyInd_7
   1684                {
   1685                  ZDSecMgrReadKeyFromNv(ZCD_NV_PRECFGKEY, zgPreConfigKey);
   \   000081                ; Setup parameters for call to function ZDSecMgrReadKeyFromNv
   \   000081   AC..         MOV     R4,?XSP + 0
   \   000083   AD..         MOV     R5,?XSP + 1
   \   000085   7A62         MOV     R2,#0x62
   \   000087   7B00         MOV     R3,#0x0
   \   000089   12....       LCALL   `??ZDSecMgrReadKeyFromNv::?relay`; Banked call to: ZDSecMgrReadKeyFromNv
   \   00008C   E9           MOV     A,R1
   1686                  SSP_UpdateNwkKey( zgPreConfigKey, 0 );
   \   00008D                ; Setup parameters for call to function SSP_UpdateNwkKey
   \   00008D   7900         MOV     R1,#0x0
   \   00008F   AA..         MOV     R2,?XSP + 0
   \   000091   AB..         MOV     R3,?XSP + 1
   \   000093   12....       LCALL   `??SSP_UpdateNwkKey::?relay`; Banked call to: SSP_UpdateNwkKey
   1687                  SSP_SwitchNwkKey( 0 );
   \   000096                ; Setup parameters for call to function SSP_SwitchNwkKey
   \   000096   7900         MOV     R1,#0x0
   \   000098   12....       LCALL   `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
   1688          
   1689                  // clear local copy of key
   1690                  osal_memset(zgPreConfigKey, 0x00, SEC_KEY_LEN);
   \   00009B                ; Setup parameters for call to function osal_memset
   \   00009B   7C10         MOV     R4,#0x10
   \   00009D   7D00         MOV     R5,#0x0
   \   00009F   7900         MOV     R1,#0x0
   \   0000A1   AA..         MOV     R2,?XSP + 0
   \   0000A3   AB..         MOV     R3,?XSP + 1
   \   0000A5   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   \   0000A8   8029         SJMP    ??ZDSecMgrTransportKeyInd_7
   1691                }
   1692              }
   1693              else
   1694              {
   1695                SSP_UpdateNwkKey( ind->key, ind->keySeqNum );
   \                     ??ZDSecMgrTransportKeyInd_6:
   \   0000AA                ; Setup parameters for call to function SSP_UpdateNwkKey
   \   0000AA   8E82         MOV     DPL,R6
   \   0000AC   8F83         MOV     DPH,R7
   \   0000AE   A3           INC     DPTR
   \   0000AF   A3           INC     DPTR
   \   0000B0   A3           INC     DPTR
   \   0000B1   A3           INC     DPTR
   \   0000B2   A3           INC     DPTR
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   F9           MOV     R1,A
   \   0000B5   EE           MOV     A,R6
   \   0000B6   2406         ADD     A,#0x6
   \   0000B8   FA           MOV     R2,A
   \   0000B9   E4           CLR     A
   \   0000BA   3F           ADDC    A,R7
   \   0000BB   FB           MOV     R3,A
   \   0000BC   12....       LCALL   `??SSP_UpdateNwkKey::?relay`; Banked call to: SSP_UpdateNwkKey
   1696                if ( !_NIB.nwkKeyLoaded )
   \   0000BF   90....       MOV     DPTR,#_NIB + 61
   \   0000C2   E0           MOVX    A,@DPTR
   \   0000C3   700E         JNZ     ??ZDSecMgrTransportKeyInd_7
   1697                {
   1698                  SSP_SwitchNwkKey( ind->keySeqNum );
   \   0000C5                ; Setup parameters for call to function SSP_SwitchNwkKey
   \   0000C5   8E82         MOV     DPL,R6
   \   0000C7   8F83         MOV     DPH,R7
   \   0000C9   A3           INC     DPTR
   \   0000CA   A3           INC     DPTR
   \   0000CB   A3           INC     DPTR
   \   0000CC   A3           INC     DPTR
   \   0000CD   A3           INC     DPTR
   \   0000CE   E0           MOVX    A,@DPTR
   \   0000CF   F9           MOV     R1,A
   \   0000D0   12....       LCALL   `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
   1699                }
   1700              }
   1701          
   1702              // handle next step in authentication process
   1703              ZDSecMgrAuthNwkKey();
   \                     ??ZDSecMgrTransportKeyInd_7:
   \   0000D3                ; Setup parameters for call to function ZDSecMgrAuthNwkKey
   \   0000D3   12....       LCALL   `??ZDSecMgrAuthNwkKey::?relay`; Banked call to: ZDSecMgrAuthNwkKey
   \   0000D6   8018         SJMP    ??ZDSecMgrTransportKeyInd_8
   1704            }
   1705            else if ( ind->keyType == KEY_TYPE_TC_LINK )
   \                     ??ZDSecMgrTransportKeyInd_2:
   \   0000D8   8E82         MOV     DPL,R6
   \   0000DA   8F83         MOV     DPH,R7
   \   0000DC   A3           INC     DPTR
   \   0000DD   A3           INC     DPTR
   \   0000DE   A3           INC     DPTR
   \   0000DF   A3           INC     DPTR
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   6404         XRL     A,#0x4
   \   0000E3   600B         JZ      ??ZDSecMgrTransportKeyInd_8
   1706            {
   1707              // This should not happen because TCLK should not be Tx
   1708            }
   1709            else if ( ind->keyType == KEY_TYPE_APP_LINK )
   \   0000E5   8E82         MOV     DPL,R6
   \   0000E7   8F83         MOV     DPH,R7
   \   0000E9   A3           INC     DPTR
   \   0000EA   A3           INC     DPTR
   \   0000EB   A3           INC     DPTR
   \   0000EC   A3           INC     DPTR
   \   0000ED   E0           MOVX    A,@DPTR
   \   0000EE   6403         XRL     A,#0x3
   1710            {
   1711              if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
   1712              {
   1713                uint16           ami;
   1714                ZDSecMgrEntry_t* entry;
   1715          
   1716                // get the address index
   1717                if ( ZDSecMgrExtAddrLookup( ind->srcExtAddr, &ami ) != ZSuccess )
   1718                {
   1719                  // store new EXT address
   1720                  ZDSecMgrAddrStore( INVALID_NODE_ADDR, ind->srcExtAddr, &ami );
   1721                  ZDP_NwkAddrReq( ind->srcExtAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   1722                }
   1723          
   1724                ZDSecMgrEntryLookupAMI( ami, &entry );
   1725          
   1726                if ( entry == NULL )
   1727                {
   1728                  // get new entry
   1729                  if ( ZDSecMgrEntryNew( &entry ) == ZSuccess )
   1730                  {
   1731                    // finish setting up entry
   1732                    entry->ami = ami;
   1733                  }
   1734                }
   1735          
   1736                ZDSecMgrLinkKeySet( ind->srcExtAddr, ind->key );
   1737          
   1738          #if defined NV_RESTORE
   1739                ZDSecMgrWriteNV();  // Write the control record for the new established link key to NV.
   1740          #endif
   1741              }
   1742            }
   1743          }
   \                     ??ZDSecMgrTransportKeyInd_8:
   \   0000F0   7410         MOV     A,#0x10
   \   0000F2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000F5   7F01         MOV     R7,#0x1
   \   0000F7   02....       LJMP    ?BANKED_LEAVE_XDATA
   1744          
   1745          /******************************************************************************
   1746           * @fn          ZDSecMgrUpdateDeviceInd
   1747           *
   1748           * @brief       Process the ZDO_UpdateDeviceInd_t message.
   1749           *
   1750           * @param       ind - [in] ZDO_UpdateDeviceInd_t indication
   1751           *
   1752           * @return      none
   1753           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1754          void ZDSecMgrUpdateDeviceInd( ZDO_UpdateDeviceInd_t* ind )
   \                     ZDSecMgrUpdateDeviceInd:
   1755          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 8
   \   000004   74F8         MOV     A,#-0x8
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   1756            ZDSecMgrDevice_t device;
   1757          
   1758            device.nwkAddr    = ind->devAddr;
   \   000009   EA           MOV     A,R2
   \   00000A   240C         ADD     A,#0xc
   \   00000C   F582         MOV     DPL,A
   \   00000E   E4           CLR     A
   \   00000F   3B           ADDC    A,R3
   \   000010   F583         MOV     DPH,A
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F8           MOV     R0,A
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F9           MOV     R1,A
   \   000017   85..82       MOV     DPL,?XSP + 0
   \   00001A   85..83       MOV     DPH,?XSP + 1
   \   00001D   E8           MOV     A,R0
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   A3           INC     DPTR
   \   000020   E9           MOV     A,R1
   \   000021   F0           MOVX    @DPTR,A
   1759            device.extAddr    = ind->devExtAddr;
   \   000022   EA           MOV     A,R2
   \   000023   2404         ADD     A,#0x4
   \   000025   F8           MOV     R0,A
   \   000026   E4           CLR     A
   \   000027   3B           ADDC    A,R3
   \   000028   F9           MOV     R1,A
   \   000029   7402         MOV     A,#0x2
   \   00002B   12....       LCALL   ?XSTACK_DISP0_8
   \   00002E   E8           MOV     A,R0
   \   00002F   F0           MOVX    @DPTR,A
   \   000030   A3           INC     DPTR
   \   000031   E9           MOV     A,R1
   \   000032   F0           MOVX    @DPTR,A
   1760            device.parentAddr = ind->srcAddr;
   \   000033   8A82         MOV     DPL,R2
   \   000035   8B83         MOV     DPH,R3
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   F8           MOV     R0,A
   \   00003B   A3           INC     DPTR
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   F9           MOV     R1,A
   \   00003E   7404         MOV     A,#0x4
   \   000040   12....       LCALL   ?XSTACK_DISP0_8
   \   000043   E8           MOV     A,R0
   \   000044   F0           MOVX    @DPTR,A
   \   000045   A3           INC     DPTR
   \   000046   E9           MOV     A,R1
   \   000047   F0           MOVX    @DPTR,A
   1761            device.devStatus  = DEV_SEC_INIT_STATUS;
   \   000048   7407         MOV     A,#0x7
   \   00004A   12....       LCALL   ?XSTACK_DISP0_8
   \   00004D   7404         MOV     A,#0x4
   \   00004F   F0           MOVX    @DPTR,A
   1762            device.secure     = FALSE;
   \   000050   7406         MOV     A,#0x6
   \   000052   12....       LCALL   ?XSTACK_DISP0_8
   \   000055   7400         MOV     A,#0x0
   \   000057   F0           MOVX    @DPTR,A
   1763          
   1764            // Trust Center should identify the type of JOIN/REJOIN and
   1765            // Transport the NWK key accordingly, it will only be transported for:
   1766            //              APSME_UD_STANDARD_UNSECURED_JOIN
   1767            //   OR         APSME_UD_STANDARD_TRUST_CENTER_REJOIN
   1768            if ( ind->status != APSME_UD_DEVICE_LEFT )
   \   000058   EA           MOV     A,R2
   \   000059   240E         ADD     A,#0xe
   \   00005B   F582         MOV     DPL,A
   \   00005D   E4           CLR     A
   \   00005E   3B           ADDC    A,R3
   \   00005F   F583         MOV     DPH,A
   \   000061   E0           MOVX    A,@DPTR
   \   000062   6402         XRL     A,#0x2
   \   000064   602E         JZ      ??ZDSecMgrUpdateDeviceInd_0
   1769            {
   1770              if ( ind->status == APSME_UD_STANDARD_SECURED_REJOIN )
   \   000066   EA           MOV     A,R2
   \   000067   240E         ADD     A,#0xe
   \   000069   F582         MOV     DPL,A
   \   00006B   E4           CLR     A
   \   00006C   3B           ADDC    A,R3
   \   00006D   F583         MOV     DPH,A
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   701A         JNZ     ??ZDSecMgrUpdateDeviceInd_1
   1771              {
   1772                device.devStatus &= ~DEV_SEC_INIT_STATUS;
   \   000072   7407         MOV     A,#0x7
   \   000074   12....       LCALL   ?XSTACK_DISP0_8
   \   000077   E0           MOVX    A,@DPTR
   \   000078   C2E2         CLR     0xE0 /* A   */.2
   \   00007A   F0           MOVX    @DPTR,A
   1773                device.devStatus |=  DEV_SEC_AUTH_STATUS;
   \   00007B   7407         MOV     A,#0x7
   \   00007D   12....       LCALL   ?XSTACK_DISP0_8
   \   000080   E0           MOVX    A,@DPTR
   \   000081   D2E3         SETB    0xE0 /* A   */.3
   \   000083   F0           MOVX    @DPTR,A
   1774                device.secure = TRUE;
   \   000084   7406         MOV     A,#0x6
   \   000086   12....       LCALL   ?XSTACK_DISP0_8
   \   000089   7401         MOV     A,#0x1
   \   00008B   F0           MOVX    @DPTR,A
   1775              }
   1776          
   1777              ZDSecMgrDeviceJoin( &device );
   \                     ??ZDSecMgrUpdateDeviceInd_1:
   \   00008C                ; Setup parameters for call to function ZDSecMgrDeviceJoin
   \   00008C   AA..         MOV     R2,?XSP + 0
   \   00008E   AB..         MOV     R3,?XSP + 1
   \   000090   12....       LCALL   `??ZDSecMgrDeviceJoin::?relay`; Banked call to: ZDSecMgrDeviceJoin
   \   000093   E9           MOV     A,R1
   1778            }
   1779          }
   \                     ??ZDSecMgrUpdateDeviceInd_0:
   \   000094   7408         MOV     A,#0x8
   \   000096   12....       LCALL   ?DEALLOC_XSTACK8
   \   000099   D083         POP     DPH
   \   00009B   D082         POP     DPL
   \   00009D   02....       LJMP    ?BRET
   1780          
   1781          /******************************************************************************
   1782           * @fn          ZDSecMgrRemoveDeviceInd
   1783           *
   1784           * @brief       Process the ZDO_RemoveDeviceInd_t message.
   1785           *
   1786           * @param       ind - [in] ZDO_RemoveDeviceInd_t indication
   1787           *
   1788           * @return      none
   1789           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1790          void ZDSecMgrRemoveDeviceInd( ZDO_RemoveDeviceInd_t* ind )
   \                     ZDSecMgrRemoveDeviceInd:
   1791          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1792            ZDSecMgrDevice_t device;
   1793          
   1794            // only accept from Trust Center
   1795            if ( ind->srcAddr == APSME_TRUSTCENTER_NWKADDR )
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F8           MOV     R0,A
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F9           MOV     R1,A
   \   000019   E8           MOV     A,R0
   \   00001A   49           ORL     A,R1
   \   00001B   7038         JNZ     ??ZDSecMgrRemoveDeviceInd_0
   1796            {
   1797              // look up NWK address
   1798              if ( APSME_LookupNwkAddr( ind->childExtAddr, &device.nwkAddr ) == TRUE )
   \   00001D                ; Setup parameters for call to function APSME_LookupNwkAddr
   \   00001D   AC..         MOV     R4,?XSP + 0
   \   00001F   AD..         MOV     R5,?XSP + 1
   \   000021   EE           MOV     A,R6
   \   000022   2404         ADD     A,#0x4
   \   000024   FA           MOV     R2,A
   \   000025   E4           CLR     A
   \   000026   3F           ADDC    A,R7
   \   000027   FB           MOV     R3,A
   \   000028   12....       LCALL   `??APSME_LookupNwkAddr::?relay`; Banked call to: APSME_LookupNwkAddr
   \   00002B   E9           MOV     A,R1
   \   00002C   6401         XRL     A,#0x1
   \   00002E   7025         JNZ     ??ZDSecMgrRemoveDeviceInd_0
   1799              {
   1800                device.parentAddr = NLME_GetShortAddr();
   \   000030                ; Setup parameters for call to function NLME_GetShortAddr
   \   000030   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000033   7404         MOV     A,#0x4
   \   000035   12....       LCALL   ?XSTACK_DISP0_8
   \   000038   EA           MOV     A,R2
   \   000039   F0           MOVX    @DPTR,A
   \   00003A   A3           INC     DPTR
   \   00003B   EB           MOV     A,R3
   \   00003C   F0           MOVX    @DPTR,A
   1801                device.extAddr    = ind->childExtAddr;
   \   00003D   EE           MOV     A,R6
   \   00003E   2404         ADD     A,#0x4
   \   000040   F8           MOV     R0,A
   \   000041   E4           CLR     A
   \   000042   3F           ADDC    A,R7
   \   000043   F9           MOV     R1,A
   \   000044   7402         MOV     A,#0x2
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   E8           MOV     A,R0
   \   00004A   F0           MOVX    @DPTR,A
   \   00004B   A3           INC     DPTR
   \   00004C   E9           MOV     A,R1
   \   00004D   F0           MOVX    @DPTR,A
   1802          
   1803                // remove device
   1804                ZDSecMgrDeviceRemove( &device );
   \   00004E                ; Setup parameters for call to function ZDSecMgrDeviceRemove
   \   00004E   AA..         MOV     R2,?XSP + 0
   \   000050   AB..         MOV     R3,?XSP + 1
   \   000052   12....       LCALL   `??ZDSecMgrDeviceRemove::?relay`; Banked call to: ZDSecMgrDeviceRemove
   1805              }
   1806            }
   1807          }
   \                     ??ZDSecMgrRemoveDeviceInd_0:
   \   000055   7408         MOV     A,#0x8
   \   000057   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005A   7F01         MOV     R7,#0x1
   \   00005C   02....       LJMP    ?BANKED_LEAVE_XDATA
   1808          
   1809          /******************************************************************************
   1810           * @fn          ZDSecMgrRequestKeyInd
   1811           *
   1812           * @brief       Process the ZDO_RequestKeyInd_t message.
   1813           *
   1814           * @param       ind - [in] ZDO_RequestKeyInd_t indication
   1815           *
   1816           * @return      none
   1817           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1818          void ZDSecMgrRequestKeyInd( ZDO_RequestKeyInd_t* ind )
   \                     ZDSecMgrRequestKeyInd:
   1819          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1820            if ( ind->keyType == KEY_TYPE_NWK )
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6401         XRL     A,#0x1
   \   00000F   6010         JZ      ??ZDSecMgrRequestKeyInd_0
   1821            {
   1822            }
   1823            else if ( ind->keyType == KEY_TYPE_APP_MASTER )
   \   000011   8A82         MOV     DPL,R2
   \   000013   8B83         MOV     DPH,R3
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   6402         XRL     A,#0x2
   \   00001C   7003         JNZ     ??ZDSecMgrRequestKeyInd_0
   1824            {
   1825              ZDSecMgrAppKeyReq( ind );
   \   00001E                ; Setup parameters for call to function ZDSecMgrAppKeyReq
   \   00001E   12....       LCALL   `??ZDSecMgrAppKeyReq::?relay`; Banked call to: ZDSecMgrAppKeyReq
   1826            }
   1827            else if ( ind->keyType == KEY_TYPE_TC_LINK )
   1828            {
   1829            }
   1830            //else ignore
   1831          }
   \                     ??ZDSecMgrRequestKeyInd_0:
   \   000021   D083         POP     DPH
   \   000023   D082         POP     DPL
   \   000025   02....       LJMP    ?BRET
   1832          
   1833          /******************************************************************************
   1834           * @fn          ZDSecMgrSwitchKeyInd
   1835           *
   1836           * @brief       Process the ZDO_SwitchKeyInd_t message.
   1837           *
   1838           * @param       ind - [in] ZDO_SwitchKeyInd_t indication
   1839           *
   1840           * @return      none
   1841           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1842          void ZDSecMgrSwitchKeyInd( ZDO_SwitchKeyInd_t* ind )
   \                     ZDSecMgrSwitchKeyInd:
   1843          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1844            SSP_SwitchNwkKey( ind->keySeqNum );
   \   000004                ; Setup parameters for call to function SSP_SwitchNwkKey
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F9           MOV     R1,A
   \   00000E   12....       LCALL   `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
   1845          
   1846            // Save if nv
   1847            ZDApp_NVUpdate();
   \   000011                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000011   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   1848          }
   \   000014   D083         POP     DPH
   \   000016   D082         POP     DPL
   \   000018   02....       LJMP    ?BRET
   1849          
   1850          #if ( ZG_BUILD_COORDINATOR_TYPE )
   1851          /******************************************************************************
   1852           * @fn          ZDSecMgrUpdateNwkKey
   1853           *
   1854           * @brief       Load a new NWK key and trigger a network update to the dstAddr.
   1855           *
   1856           * @param       key       - [in] new NWK key
   1857           * @param       keySeqNum - [in] new NWK key sequence number
   1858           *
   1859           * @return      ZStatus_t
   1860           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1861          ZStatus_t ZDSecMgrUpdateNwkKey( uint8* key, uint8 keySeqNum, uint16 dstAddr )
   \                     ZDSecMgrUpdateNwkKey:
   1862          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   89..         MOV     ?V1,R1
   1863            ZStatus_t               status;
   1864            APSME_TransportKeyReq_t req;
   1865          
   1866            // initialize common elements of local variables
   1867            req.keyType   = KEY_TYPE_NWK;
   \   000010   7402         MOV     A,#0x2
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   7401         MOV     A,#0x1
   \   000017   F0           MOVX    @DPTR,A
   1868          
   1869            req.dstAddr   = dstAddr;
   \   000018   85..82       MOV     DPL,?XSP + 0
   \   00001B   85..83       MOV     DPH,?XSP + 1
   \   00001E   EC           MOV     A,R4
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   A3           INC     DPTR
   \   000021   ED           MOV     A,R5
   \   000022   F0           MOVX    @DPTR,A
   1870            req.keySeqNum = keySeqNum;
   \   000023   E5..         MOV     A,?V1
   \   000025   C0E0         PUSH    A
   \   000027   7403         MOV     A,#0x3
   \   000029   12....       LCALL   ?XSTACK_DISP0_8
   \   00002C   D0E0         POP     A
   \   00002E   F0           MOVX    @DPTR,A
   1871            req.key       = key;
   \   00002F   7404         MOV     A,#0x4
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   EE           MOV     A,R6
   \   000035   F0           MOVX    @DPTR,A
   \   000036   A3           INC     DPTR
   \   000037   EF           MOV     A,R7
   \   000038   F0           MOVX    @DPTR,A
   1872            req.extAddr   = NULL;
   \   000039   7406         MOV     A,#0x6
   \   00003B   12....       LCALL   ?XSTACK_DISP0_8
   \   00003E   7400         MOV     A,#0x0
   \   000040   F0           MOVX    @DPTR,A
   \   000041   A3           INC     DPTR
   \   000042   7400         MOV     A,#0x0
   \   000044   F0           MOVX    @DPTR,A
   1873            req.nwkSecure = TRUE;
   \   000045   740A         MOV     A,#0xa
   \   000047   12....       LCALL   ?XSTACK_DISP0_8
   \   00004A   7401         MOV     A,#0x1
   \   00004C   F0           MOVX    @DPTR,A
   1874            req.tunnel    = NULL;
   \   00004D   740B         MOV     A,#0xb
   \   00004F   12....       LCALL   ?XSTACK_DISP0_8
   \   000052   7400         MOV     A,#0x0
   \   000054   F0           MOVX    @DPTR,A
   \   000055   A3           INC     DPTR
   \   000056   7400         MOV     A,#0x0
   \   000058   F0           MOVX    @DPTR,A
   1875          
   1876            if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
   1877            {
   1878              // Broadcast transport NWK key
   1879              if (( dstAddr == NWK_BROADCAST_SHORTADDR_DEVALL ) ||
   1880                  ( dstAddr == NWK_BROADCAST_SHORTADDR_DEVZCZR) ||
   1881                  ( dstAddr == NWK_BROADCAST_SHORTADDR_DEVRXON))
   1882              {
   1883                req.apsSecure = FALSE;
   1884                status = APSME_TransportKeyReq( &req );
   1885              }
   1886              else
   1887              {
   1888                AddrMgrEntry_t          addrEntry;
   1889          
   1890                addrEntry.user = ADDRMGR_USER_SECURITY;
   1891                addrEntry.nwkAddr = dstAddr;
   1892          
   1893                status = ZFailure;
   1894          
   1895                if ( AddrMgrEntryLookupNwk( &addrEntry ) == TRUE )
   1896                {
   1897                  req.extAddr = addrEntry.extAddr;
   1898                  req.apsSecure = TRUE;
   1899                  status = APSME_TransportKeyReq( &req );
   1900                }
   1901              }
   1902            }
   1903            else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
   1904            {
   1905              req.apsSecure = FALSE;
   \   000059   7409         MOV     A,#0x9
   \   00005B   12....       LCALL   ?XSTACK_DISP0_8
   \   00005E   7400         MOV     A,#0x0
   \   000060   F0           MOVX    @DPTR,A
   1906              status = APSME_TransportKeyReq( &req );
   \   000061                ; Setup parameters for call to function APSME_TransportKeyReq
   \   000061   AA..         MOV     R2,?XSP + 0
   \   000063   AB..         MOV     R3,?XSP + 1
   \   000065   12....       LCALL   `??APSME_TransportKeyReq::?relay`; Banked call to: APSME_TransportKeyReq
   \   000068   E9           MOV     A,R1
   \   000069   F5..         MOV     ?V0,A
   1907            }
   1908          
   1909            SSP_UpdateNwkKey( key, keySeqNum );
   \   00006B                ; Setup parameters for call to function SSP_UpdateNwkKey
   \   00006B   A9..         MOV     R1,?V1
   \   00006D   EE           MOV     A,R6
   \   00006E   FA           MOV     R2,A
   \   00006F   EF           MOV     A,R7
   \   000070   FB           MOV     R3,A
   \   000071   12....       LCALL   `??SSP_UpdateNwkKey::?relay`; Banked call to: SSP_UpdateNwkKey
   1910          
   1911            // Save if nv
   1912            ZDApp_NVUpdate();
   \   000074                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000074   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   1913          
   1914            return status;
   \   000077   A9..         MOV     R1,?V0
   \   000079   740D         MOV     A,#0xd
   \   00007B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007E   7F02         MOV     R7,#0x2
   \   000080   02....       LJMP    ?BANKED_LEAVE_XDATA
   1915          }
   1916          #endif // ( ZG_BUILD_COORDINATOR_TYPE )
   1917          
   1918          #if ( ZG_BUILD_COORDINATOR_TYPE )
   1919          /******************************************************************************
   1920           * @fn          ZDSecMgrSwitchNwkKey
   1921           *
   1922           * @brief       Causes the NWK key to switch via a network command to the dstAddr.
   1923           *
   1924           * @param       keySeqNum - [in] new NWK key sequence number
   1925           *
   1926           * @return      ZStatus_t
   1927           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1928          ZStatus_t ZDSecMgrSwitchNwkKey( uint8 keySeqNum, uint16 dstAddr )
   \                     ZDSecMgrSwitchNwkKey:
   1929          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FF           MOV     R7,A
   1930            ZStatus_t            status;
   1931            APSME_SwitchKeyReq_t req;
   1932          
   1933            // initialize common elements of local variables
   1934            req.dstAddr = dstAddr;
   \   00000C   85..82       MOV     DPL,?XSP + 0
   \   00000F   85..83       MOV     DPH,?XSP + 1
   \   000012   EA           MOV     A,R2
   \   000013   F0           MOVX    @DPTR,A
   \   000014   A3           INC     DPTR
   \   000015   EB           MOV     A,R3
   \   000016   F0           MOVX    @DPTR,A
   1935            req.keySeqNum = keySeqNum;
   \   000017   EF           MOV     A,R7
   \   000018   C0E0         PUSH    A
   \   00001A   7402         MOV     A,#0x2
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   D0E0         POP     A
   \   000021   F0           MOVX    @DPTR,A
   1936          
   1937            if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
   1938            {
   1939              // Broadcast switch NWK key
   1940              if (( dstAddr == NWK_BROADCAST_SHORTADDR_DEVALL ) ||
   1941                  ( dstAddr == NWK_BROADCAST_SHORTADDR_DEVZCZR) ||
   1942                  ( dstAddr == NWK_BROADCAST_SHORTADDR_DEVRXON))
   1943              {
   1944                req.apsSecure = FALSE;
   1945                status = APSME_SwitchKeyReq( &req );
   1946              }
   1947              else
   1948              {
   1949                AddrMgrEntry_t          addrEntry;
   1950          
   1951                addrEntry.user = ADDRMGR_USER_SECURITY;
   1952                addrEntry.nwkAddr = dstAddr;
   1953          
   1954                status = ZFailure;
   1955          
   1956                if ( AddrMgrEntryLookupNwk( &addrEntry ) == TRUE )
   1957                {
   1958                  req.dstAddr = addrEntry.nwkAddr;
   1959                  req.apsSecure = TRUE;
   1960                  status = APSME_SwitchKeyReq( &req );
   1961                }
   1962              }
   1963            }
   1964            else // ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_RESIDENTIAL )
   1965            {
   1966              req.apsSecure = FALSE;
   \   000022   7403         MOV     A,#0x3
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   7400         MOV     A,#0x0
   \   000029   F0           MOVX    @DPTR,A
   1967              status = APSME_SwitchKeyReq( &req );
   \   00002A                ; Setup parameters for call to function APSME_SwitchKeyReq
   \   00002A   AA..         MOV     R2,?XSP + 0
   \   00002C   AB..         MOV     R3,?XSP + 1
   \   00002E   12....       LCALL   `??APSME_SwitchKeyReq::?relay`; Banked call to: APSME_SwitchKeyReq
   \   000031   E9           MOV     A,R1
   \   000032   FE           MOV     R6,A
   1968            }
   1969          
   1970            SSP_SwitchNwkKey( keySeqNum );
   \   000033                ; Setup parameters for call to function SSP_SwitchNwkKey
   \   000033   EF           MOV     A,R7
   \   000034   F9           MOV     R1,A
   \   000035   12....       LCALL   `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
   1971          
   1972            // Save if nv
   1973            ZDApp_NVUpdate();
   \   000038                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000038   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   1974          
   1975            return status;
   \   00003B   EE           MOV     A,R6
   \   00003C   F9           MOV     R1,A
   \   00003D   7404         MOV     A,#0x4
   \   00003F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000042   7F01         MOV     R7,#0x1
   \   000044   02....       LJMP    ?BANKED_LEAVE_XDATA
   1976          }
   1977          #endif // ( ZG_BUILD_COORDINATOR_TYPE )
   1978          
   1979          /******************************************************************************
   1980           * @fn          ZDSecMgrRequestAppKey
   1981           *
   1982           * @brief       Request an application key with partner.
   1983           *
   1984           * @param       partExtAddr - [in] partner extended address
   1985           *
   1986           * @return      ZStatus_t
   1987           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1988          ZStatus_t ZDSecMgrRequestAppKey( uint8 *partExtAddr )
   \                     ZDSecMgrRequestAppKey:
   1989          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 4
   \   000004   74FC         MOV     A,#-0x4
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   1990            ZStatus_t status;
   1991            APSME_RequestKeyReq_t req;
   1992          
   1993            req.dstAddr = 0;
   \   000009   85..82       MOV     DPL,?XSP + 0
   \   00000C   85..83       MOV     DPH,?XSP + 1
   \   00000F   7400         MOV     A,#0x0
   \   000011   F0           MOVX    @DPTR,A
   1994            req.keyType = KEY_TYPE_APP_MASTER;
   \   000012   7401         MOV     A,#0x1
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   7402         MOV     A,#0x2
   \   000019   F0           MOVX    @DPTR,A
   1995          
   1996            req.partExtAddr = partExtAddr;
   \   00001A   7402         MOV     A,#0x2
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   EA           MOV     A,R2
   \   000020   F0           MOVX    @DPTR,A
   \   000021   A3           INC     DPTR
   \   000022   EB           MOV     A,R3
   \   000023   F0           MOVX    @DPTR,A
   1997            status = APSME_RequestKeyReq( &req );
   \   000024                ; Setup parameters for call to function APSME_RequestKeyReq
   \   000024   AA..         MOV     R2,?XSP + 0
   \   000026   AB..         MOV     R3,?XSP + 1
   \   000028   12....       LCALL   `??APSME_RequestKeyReq::?relay`; Banked call to: APSME_RequestKeyReq
   \   00002B   E9           MOV     A,R1
   \   00002C   F9           MOV     R1,A
   1998          
   1999            return status;
   \   00002D   7404         MOV     A,#0x4
   \   00002F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000032   D083         POP     DPH
   \   000034   D082         POP     DPL
   \   000036   02....       LJMP    ?BRET
   2000          }
   2001          
   2002          #if ( ZG_BUILD_JOINING_TYPE )
   2003          /******************************************************************************
   2004           * @fn          ZDSecMgrSetupPartner
   2005           *
   2006           * @brief       Setup for application key partner.
   2007           *
   2008           * @param       partNwkAddr - [in] partner network address
   2009           *
   2010           * @return      ZStatus_t
   2011           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2012          ZStatus_t ZDSecMgrSetupPartner( uint16 partNwkAddr, uint8* partExtAddr )
   \                     ZDSecMgrSetupPartner:
   2013          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V2,R2
   \   00000C   8B..         MOV     ?V3,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   2014            AddrMgrEntry_t entry;
   2015            ZStatus_t      status;
   2016          
   2017            status = ZFailure;
   \   000012   75..01       MOV     ?V0,#0x1
   2018          
   2019            // update the address manager
   2020            entry.user    = ADDRMGR_USER_SECURITY;
   \   000015   85..82       MOV     DPL,?XSP + 0
   \   000018   85..83       MOV     DPH,?XSP + 1
   \   00001B   7402         MOV     A,#0x2
   \   00001D   F0           MOVX    @DPTR,A
   2021            entry.nwkAddr = partNwkAddr;
   \   00001E   7401         MOV     A,#0x1
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   E5..         MOV     A,?V2
   \   000025   F0           MOVX    @DPTR,A
   \   000026   A3           INC     DPTR
   \   000027   E5..         MOV     A,?V3
   \   000029   F0           MOVX    @DPTR,A
   2022            AddrMgrExtAddrSet( entry.extAddr, partExtAddr );
   \   00002A                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   00002A   EE           MOV     A,R6
   \   00002B   FC           MOV     R4,A
   \   00002C   EF           MOV     A,R7
   \   00002D   FD           MOV     R5,A
   \   00002E   7403         MOV     A,#0x3
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   AA82         MOV     R2,DPL
   \   000035   AB83         MOV     R3,DPH
   \   000037   12....       LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   2023          
   2024            if ( AddrMgrEntryUpdate( &entry ) == TRUE )
   \   00003A                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   00003A   AA..         MOV     R2,?XSP + 0
   \   00003C   AB..         MOV     R3,?XSP + 1
   \   00003E   12....       LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   \   000041   E9           MOV     A,R1
   \   000042   6401         XRL     A,#0x1
   \   000044   703B         JNZ     ??ZDSecMgrSetupPartner_0
   2025            {
   2026              status = ZSuccess;
   \   000046   75..00       MOV     ?V0,#0x0
   2027          
   2028              // check for address discovery
   2029              if ( partNwkAddr == INVALID_NODE_ADDR )
   \   000049   74FE         MOV     A,#-0x2
   \   00004B   65..         XRL     A,?V2
   \   00004D   7004         JNZ     ??ZDSecMgrSetupPartner_1
   \   00004F   74FF         MOV     A,#-0x1
   \   000051   65..         XRL     A,?V3
   \                     ??ZDSecMgrSetupPartner_1:
   \   000053   7012         JNZ     ??ZDSecMgrSetupPartner_2
   2030              {
   2031                status = ZDP_NwkAddrReq( partExtAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   \   000055                ; Setup parameters for call to function ZDP_NwkAddrReq
   \   000055   7D00         MOV     R5,#0x0
   \   000057   7C00         MOV     R4,#0x0
   \   000059   7900         MOV     R1,#0x0
   \   00005B   EE           MOV     A,R6
   \   00005C   FA           MOV     R2,A
   \   00005D   EF           MOV     A,R7
   \   00005E   FB           MOV     R3,A
   \   00005F   12....       LCALL   `??ZDP_NwkAddrReq::?relay`; Banked call to: ZDP_NwkAddrReq
   \   000062   E9           MOV     A,R1
   \   000063   F5..         MOV     ?V0,A
   \   000065   801A         SJMP    ??ZDSecMgrSetupPartner_0
   2032              }
   2033              else if ( !AddrMgrExtAddrValid( partExtAddr ) )
   \                     ??ZDSecMgrSetupPartner_2:
   \   000067                ; Setup parameters for call to function AddrMgrExtAddrValid
   \   000067   EE           MOV     A,R6
   \   000068   FA           MOV     R2,A
   \   000069   EF           MOV     A,R7
   \   00006A   FB           MOV     R3,A
   \   00006B   12....       LCALL   `??AddrMgrExtAddrValid::?relay`; Banked call to: AddrMgrExtAddrValid
   \   00006E   E9           MOV     A,R1
   \   00006F   7010         JNZ     ??ZDSecMgrSetupPartner_0
   2034              {
   2035                status = ZDP_IEEEAddrReq( partNwkAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   \   000071                ; Setup parameters for call to function ZDP_IEEEAddrReq
   \   000071   7D00         MOV     R5,#0x0
   \   000073   7C00         MOV     R4,#0x0
   \   000075   7900         MOV     R1,#0x0
   \   000077   AA..         MOV     R2,?V2
   \   000079   AB..         MOV     R3,?V3
   \   00007B   12....       LCALL   `??ZDP_IEEEAddrReq::?relay`; Banked call to: ZDP_IEEEAddrReq
   \   00007E   E9           MOV     A,R1
   \   00007F   F5..         MOV     ?V0,A
   2036              }
   2037            }
   2038          
   2039            return status;
   \                     ??ZDSecMgrSetupPartner_0:
   \   000081   A9..         MOV     R1,?V0
   \   000083   740D         MOV     A,#0xd
   \   000085   12....       LCALL   ?DEALLOC_XSTACK8
   \   000088   7F04         MOV     R7,#0x4
   \   00008A   02....       LJMP    ?BANKED_LEAVE_XDATA
   2040          }
   2041          #endif // ( ZG_BUILD_JOINING_TYPE )
   2042          
   2043          #if ( ZG_BUILD_COORDINATOR_TYPE )
   2044          /******************************************************************************
   2045           * @fn          ZDSecMgrAppKeyTypeSet
   2046           *
   2047           * @brief       Set application key type.
   2048           *
   2049           * @param       keyType - [in] application key type (KEY_TYPE_APP_MASTER@2 or
   2050           *                                                   KEY_TYPE_APP_LINK@3
   2051           *
   2052           * @return      ZStatus_t
   2053           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2054          ZStatus_t ZDSecMgrAppKeyTypeSet( uint8 keyType )
   \                     ZDSecMgrAppKeyTypeSet:
   2055          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   F8           MOV     R0,A
   2056            if ( keyType == KEY_TYPE_APP_LINK )
   \   000006   7403         MOV     A,#0x3
   \   000008   68           XRL     A,R0
   \   000009   7008         JNZ     ??ZDSecMgrAppKeyTypeSet_0
   2057            {
   2058              ZDSecMgrAppKeyType = KEY_TYPE_APP_LINK;
   \   00000B   90....       MOV     DPTR,#ZDSecMgrAppKeyType
   \   00000E   7403         MOV     A,#0x3
   \   000010   F0           MOVX    @DPTR,A
   \   000011   8006         SJMP    ??ZDSecMgrAppKeyTypeSet_1
   2059            }
   2060            else
   2061            {
   2062              ZDSecMgrAppKeyType = KEY_TYPE_APP_MASTER;
   \                     ??ZDSecMgrAppKeyTypeSet_0:
   \   000013   90....       MOV     DPTR,#ZDSecMgrAppKeyType
   \   000016   7402         MOV     A,#0x2
   \   000018   F0           MOVX    @DPTR,A
   2063            }
   2064          
   2065            return ZSuccess;
   \                     ??ZDSecMgrAppKeyTypeSet_1:
   \   000019   7900         MOV     R1,#0x0
   \   00001B   D083         POP     DPH
   \   00001D   D082         POP     DPL
   \   00001F   02....       LJMP    ?BRET
   2066          }
   2067          #endif
   2068          
   2069          /******************************************************************************
   2070           * ZigBee Device Security Manager - Stub Implementations
   2071           */
   2072          
   2073          
   2074          /******************************************************************************
   2075           * @fn          ZDSecMgrLinkKeySet (stubs APSME_LinkKeySet)
   2076           *
   2077           * @brief       Set <APSME_LinkKeyData_t> for specified NWK address.
   2078           *
   2079           * @param       extAddr - [in] EXT address
   2080           * @param       data    - [in] APSME_LinkKeyData_t
   2081           *
   2082           * @return      ZStatus_t
   2083           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2084          ZStatus_t ZDSecMgrLinkKeySet( uint8* extAddr, uint8* key )
   \                     APSME_LinkKeySet:
   2085          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EC           MOV     A,R4
   \   00000B   FE           MOV     R6,A
   \   00000C   ED           MOV     A,R5
   \   00000D   FF           MOV     R7,A
   2086            ZStatus_t status;
   2087            ZDSecMgrEntry_t* entry;
   2088            APSME_LinkKeyData_t *pApsLinkKey = NULL;
   \   00000E   75..00       MOV     ?V4,#0x0
   \   000011   75..00       MOV     ?V5,#0x0
   2089            uint16 Index;
   2090          
   2091            // lookup entry index for specified EXT address
   2092            status = ZDSecMgrEntryLookupExtGetIndex( extAddr, &entry, &Index );
   \   000014                ; Setup parameters for call to function ZDSecMgrEntryLookupExtGetIndex
   \   000014   7402         MOV     A,#0x2
   \   000016   12....       LCALL   ?XSTACK_DISP100_8
   \   000019   88..         MOV     ?V0,R0
   \   00001B   89..         MOV     ?V1,R1
   \   00001D   78..         MOV     R0,#?V0
   \   00001F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP102_8
   \   000027   12....       LCALL   `??ZDSecMgrEntryLookupExtGetIndex::?relay`; Banked call to: ZDSecMgrEntryLookupExtGetIndex
   \   00002A   7402         MOV     A,#0x2
   \   00002C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00002F   E9           MOV     A,R1
   \   000030   F5..         MOV     ?V3,A
   2093          
   2094            if ( status == ZSuccess )
   \   000032   E5..         MOV     A,?V3
   \   000034   6003         JZ      $+5
   \   000036   02....       LJMP    ??APSME_LinkKeySet_0 & 0xFFFF
   2095            {
   2096              // point to NV item
   2097              entry->keyNvId = ZCD_NV_APS_LINK_KEY_DATA_START + Index;
   \   000039   7402         MOV     A,#0x2
   \   00003B   12....       LCALL   ?XSTACK_DISP0_8
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   2401         ADD     A,#0x1
   \   000041   F8           MOV     R0,A
   \   000042   A3           INC     DPTR
   \   000043   E0           MOVX    A,@DPTR
   \   000044   3402         ADDC    A,#0x2
   \   000046   F9           MOV     R1,A
   \   000047   85..82       MOV     DPL,?XSP + 0
   \   00004A   85..83       MOV     DPH,?XSP + 1
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   FA           MOV     R2,A
   \   00004F   A3           INC     DPTR
   \   000050   E0           MOVX    A,@DPTR
   \   000051   F583         MOV     DPH,A
   \   000053   8A82         MOV     DPL,R2
   \   000055   A3           INC     DPTR
   \   000056   A3           INC     DPTR
   \   000057   E8           MOV     A,R0
   \   000058   F0           MOVX    @DPTR,A
   \   000059   A3           INC     DPTR
   \   00005A   E9           MOV     A,R1
   \   00005B   F0           MOVX    @DPTR,A
   2098          
   2099              pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
   \   00005C                ; Setup parameters for call to function osal_mem_alloc
   \   00005C   7A18         MOV     R2,#0x18
   \   00005E   7B00         MOV     R3,#0x0
   \   000060   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000063   8A..         MOV     ?V0,R2
   \   000065   8B..         MOV     ?V1,R3
   \   000067   85....       MOV     ?V4,?V0
   \   00006A   85....       MOV     ?V5,?V1
   2100          
   2101              if (pApsLinkKey != NULL)
   \   00006D   E5..         MOV     A,?V4
   \   00006F   45..         ORL     A,?V5
   \   000071   7003         JNZ     $+5
   \   000073   02....       LJMP    ??APSME_LinkKeySet_0 & 0xFFFF
   2102              {
   2103                // read the key form NV, keyNvId must be ZCD_NV_APS_LINK_KEY_DATA_START based
   2104                osal_nv_read( entry->keyNvId, 0,
   2105                             sizeof(APSME_LinkKeyData_t), pApsLinkKey );
   \   000076                ; Setup parameters for call to function osal_nv_read
   \   000076   78..         MOV     R0,#?V4
   \   000078   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007B   75..18       MOV     ?V0,#0x18
   \   00007E   75..00       MOV     ?V1,#0x0
   \   000081   78..         MOV     R0,#?V0
   \   000083   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000086   7C00         MOV     R4,#0x0
   \   000088   7D00         MOV     R5,#0x0
   \   00008A   7404         MOV     A,#0x4
   \   00008C   12....       LCALL   ?XSTACK_DISP0_8
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   F8           MOV     R0,A
   \   000091   A3           INC     DPTR
   \   000092   E0           MOVX    A,@DPTR
   \   000093   F583         MOV     DPH,A
   \   000095   8882         MOV     DPL,R0
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   FA           MOV     R2,A
   \   00009B   A3           INC     DPTR
   \   00009C   E0           MOVX    A,@DPTR
   \   00009D   FB           MOV     R3,A
   \   00009E   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   0000A1   7404         MOV     A,#0x4
   \   0000A3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A6   E9           MOV     A,R1
   2106          
   2107                // set new values of the key
   2108                osal_memcpy( pApsLinkKey->key, key, SEC_KEY_LEN );
   \   0000A7                ; Setup parameters for call to function osal_memcpy
   \   0000A7   8E..         MOV     ?V0,R6
   \   0000A9   8F..         MOV     ?V1,R7
   \   0000AB   75..00       MOV     ?V2,#0x0
   \   0000AE   78..         MOV     R0,#?V0
   \   0000B0   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000B3   7C10         MOV     R4,#0x10
   \   0000B5   7D00         MOV     R5,#0x0
   \   0000B7   AA..         MOV     R2,?V4
   \   0000B9   AB..         MOV     R3,?V5
   \   0000BB   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000BE   7403         MOV     A,#0x3
   \   0000C0   12....       LCALL   ?DEALLOC_XSTACK8
   2109                pApsLinkKey->rxFrmCntr = 0;
   \   0000C3   7C00         MOV     R4,#0x0
   \   0000C5   7D00         MOV     R5,#0x0
   \   0000C7   7E00         MOV     R6,#0x0
   \   0000C9   7F00         MOV     R7,#0x0
   \   0000CB   E5..         MOV     A,?V4
   \   0000CD   2414         ADD     A,#0x14
   \   0000CF   F582         MOV     DPL,A
   \   0000D1   E4           CLR     A
   \   0000D2   35..         ADDC    A,?V5
   \   0000D4   F583         MOV     DPH,A
   \   0000D6   EC           MOV     A,R4
   \   0000D7   F0           MOVX    @DPTR,A
   \   0000D8   A3           INC     DPTR
   \   0000D9   ED           MOV     A,R5
   \   0000DA   F0           MOVX    @DPTR,A
   \   0000DB   A3           INC     DPTR
   \   0000DC   EE           MOV     A,R6
   \   0000DD   F0           MOVX    @DPTR,A
   \   0000DE   A3           INC     DPTR
   \   0000DF   EF           MOV     A,R7
   \   0000E0   F0           MOVX    @DPTR,A
   2110                pApsLinkKey->txFrmCntr = 0;
   \   0000E1   7C00         MOV     R4,#0x0
   \   0000E3   7D00         MOV     R5,#0x0
   \   0000E5   7E00         MOV     R6,#0x0
   \   0000E7   7F00         MOV     R7,#0x0
   \   0000E9   E5..         MOV     A,?V4
   \   0000EB   2410         ADD     A,#0x10
   \   0000ED   F582         MOV     DPL,A
   \   0000EF   E4           CLR     A
   \   0000F0   35..         ADDC    A,?V5
   \   0000F2   F583         MOV     DPH,A
   \   0000F4   EC           MOV     A,R4
   \   0000F5   F0           MOVX    @DPTR,A
   \   0000F6   A3           INC     DPTR
   \   0000F7   ED           MOV     A,R5
   \   0000F8   F0           MOVX    @DPTR,A
   \   0000F9   A3           INC     DPTR
   \   0000FA   EE           MOV     A,R6
   \   0000FB   F0           MOVX    @DPTR,A
   \   0000FC   A3           INC     DPTR
   \   0000FD   EF           MOV     A,R7
   \   0000FE   F0           MOVX    @DPTR,A
   2111          
   2112                osal_nv_write( entry->keyNvId, 0,
   2113                              sizeof(APSME_LinkKeyData_t), pApsLinkKey );
   \   0000FF                ; Setup parameters for call to function osal_nv_write
   \   0000FF   78..         MOV     R0,#?V4
   \   000101   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000104   75..18       MOV     ?V0,#0x18
   \   000107   75..00       MOV     ?V1,#0x0
   \   00010A   78..         MOV     R0,#?V0
   \   00010C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00010F   7C00         MOV     R4,#0x0
   \   000111   7D00         MOV     R5,#0x0
   \   000113   7404         MOV     A,#0x4
   \   000115   12....       LCALL   ?XSTACK_DISP0_8
   \   000118   E0           MOVX    A,@DPTR
   \   000119   F8           MOV     R0,A
   \   00011A   A3           INC     DPTR
   \   00011B   E0           MOVX    A,@DPTR
   \   00011C   F583         MOV     DPH,A
   \   00011E   8882         MOV     DPL,R0
   \   000120   A3           INC     DPTR
   \   000121   A3           INC     DPTR
   \   000122   E0           MOVX    A,@DPTR
   \   000123   FA           MOV     R2,A
   \   000124   A3           INC     DPTR
   \   000125   E0           MOVX    A,@DPTR
   \   000126   FB           MOV     R3,A
   \   000127   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00012A   7404         MOV     A,#0x4
   \   00012C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00012F   E9           MOV     A,R1
   2114          
   2115                // clear copy of key in RAM
   2116                osal_memset(pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t));
   \   000130                ; Setup parameters for call to function osal_memset
   \   000130   7C18         MOV     R4,#0x18
   \   000132   7D00         MOV     R5,#0x0
   \   000134   7900         MOV     R1,#0x0
   \   000136   AA..         MOV     R2,?V4
   \   000138   AB..         MOV     R3,?V5
   \   00013A   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2117          
   2118                osal_mem_free(pApsLinkKey);
   \   00013D                ; Setup parameters for call to function osal_mem_free
   \   00013D   AA..         MOV     R2,?V4
   \   00013F   AB..         MOV     R3,?V5
   \   000141   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2119          
   2120                // set initial values for counters in RAM
   2121                ApsLinkKeyFrmCntr[entry->keyNvId - ZCD_NV_APS_LINK_KEY_DATA_START].txFrmCntr = 0;
   \   000144   7C00         MOV     R4,#0x0
   \   000146   7D00         MOV     R5,#0x0
   \   000148   7E00         MOV     R6,#0x0
   \   00014A   7F00         MOV     R7,#0x0
   \   00014C   85..82       MOV     DPL,?XSP + 0
   \   00014F   85..83       MOV     DPH,?XSP + 1
   \   000152   E0           MOVX    A,@DPTR
   \   000153   F8           MOV     R0,A
   \   000154   A3           INC     DPTR
   \   000155   E0           MOVX    A,@DPTR
   \   000156   F583         MOV     DPH,A
   \   000158   8882         MOV     DPL,R0
   \   00015A   A3           INC     DPTR
   \   00015B   A3           INC     DPTR
   \   00015C   E0           MOVX    A,@DPTR
   \   00015D   F8           MOV     R0,A
   \   00015E   A3           INC     DPTR
   \   00015F   E0           MOVX    A,@DPTR
   \   000160   F9           MOV     R1,A
   \   000161   E8           MOV     A,R0
   \   000162   75F009       MOV     B,#0x9
   \   000165   A4           MUL     AB
   \   000166   C8           XCH     A,R0
   \   000167   AAF0         MOV     R2,B
   \   000169   75F000       MOV     B,#0x0
   \   00016C   A4           MUL     AB
   \   00016D   2A           ADD     A,R2
   \   00016E   FA           MOV     R2,A
   \   00016F   75F009       MOV     B,#0x9
   \   000172   E9           MOV     A,R1
   \   000173   A4           MUL     AB
   \   000174   2A           ADD     A,R2
   \   000175   F9           MOV     R1,A
   \   000176   74..         MOV     A,#(ApsLinkKeyFrmCntr + 247) & 0xff
   \   000178   28           ADD     A,R0
   \   000179   F582         MOV     DPL,A
   \   00017B   74..         MOV     A,#((ApsLinkKeyFrmCntr - 4617) >> 8) & 0xff
   \   00017D   39           ADDC    A,R1
   \   00017E   F583         MOV     DPH,A
   \   000180   EC           MOV     A,R4
   \   000181   F0           MOVX    @DPTR,A
   \   000182   A3           INC     DPTR
   \   000183   ED           MOV     A,R5
   \   000184   F0           MOVX    @DPTR,A
   \   000185   A3           INC     DPTR
   \   000186   EE           MOV     A,R6
   \   000187   F0           MOVX    @DPTR,A
   \   000188   A3           INC     DPTR
   \   000189   EF           MOV     A,R7
   \   00018A   F0           MOVX    @DPTR,A
   2122                ApsLinkKeyFrmCntr[entry->keyNvId - ZCD_NV_APS_LINK_KEY_DATA_START].rxFrmCntr = 0;
   \   00018B   7C00         MOV     R4,#0x0
   \   00018D   7D00         MOV     R5,#0x0
   \   00018F   7E00         MOV     R6,#0x0
   \   000191   7F00         MOV     R7,#0x0
   \   000193   85..82       MOV     DPL,?XSP + 0
   \   000196   85..83       MOV     DPH,?XSP + 1
   \   000199   E0           MOVX    A,@DPTR
   \   00019A   F8           MOV     R0,A
   \   00019B   A3           INC     DPTR
   \   00019C   E0           MOVX    A,@DPTR
   \   00019D   F583         MOV     DPH,A
   \   00019F   8882         MOV     DPL,R0
   \   0001A1   A3           INC     DPTR
   \   0001A2   A3           INC     DPTR
   \   0001A3   E0           MOVX    A,@DPTR
   \   0001A4   F8           MOV     R0,A
   \   0001A5   A3           INC     DPTR
   \   0001A6   E0           MOVX    A,@DPTR
   \   0001A7   F9           MOV     R1,A
   \   0001A8   E8           MOV     A,R0
   \   0001A9   75F009       MOV     B,#0x9
   \   0001AC   A4           MUL     AB
   \   0001AD   C8           XCH     A,R0
   \   0001AE   AAF0         MOV     R2,B
   \   0001B0   75F000       MOV     B,#0x0
   \   0001B3   A4           MUL     AB
   \   0001B4   2A           ADD     A,R2
   \   0001B5   FA           MOV     R2,A
   \   0001B6   75F009       MOV     B,#0x9
   \   0001B9   E9           MOV     A,R1
   \   0001BA   A4           MUL     AB
   \   0001BB   2A           ADD     A,R2
   \   0001BC   F9           MOV     R1,A
   \   0001BD   74..         MOV     A,#(ApsLinkKeyFrmCntr + 251) & 0xff
   \   0001BF   28           ADD     A,R0
   \   0001C0   F582         MOV     DPL,A
   \   0001C2   74..         MOV     A,#((ApsLinkKeyFrmCntr - 4613) >> 8) & 0xff
   \   0001C4   39           ADDC    A,R1
   \   0001C5   F583         MOV     DPH,A
   \   0001C7   EC           MOV     A,R4
   \   0001C8   F0           MOVX    @DPTR,A
   \   0001C9   A3           INC     DPTR
   \   0001CA   ED           MOV     A,R5
   \   0001CB   F0           MOVX    @DPTR,A
   \   0001CC   A3           INC     DPTR
   \   0001CD   EE           MOV     A,R6
   \   0001CE   F0           MOVX    @DPTR,A
   \   0001CF   A3           INC     DPTR
   \   0001D0   EF           MOV     A,R7
   \   0001D1   F0           MOVX    @DPTR,A
   2123              }
   2124            }
   2125          
   2126            return status;
   \                     ??APSME_LinkKeySet_0:
   \   0001D2   A9..         MOV     R1,?V3
   \   0001D4   7404         MOV     A,#0x4
   \   0001D6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001D9   7F06         MOV     R7,#0x6
   \   0001DB   02....       LJMP    ?BANKED_LEAVE_XDATA
   2127          }
   2128          
   2129          /******************************************************************************
   2130           * @fn          ZDSecMgrAuthenticationSet
   2131           *
   2132           * @brief       Mark the specific device as authenticated or not
   2133           *
   2134           * @param       extAddr - [in] EXT address
   2135           * @param       option  - [in] authenticated or not
   2136           *
   2137           * @return      ZStatus_t
   2138           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2139          ZStatus_t ZDSecMgrAuthenticationSet( uint8* extAddr, ZDSecMgr_Authentication_Option option )
   \                     ZDSecMgrAuthenticationSet:
   2140          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   2141            ZStatus_t        status;
   2142            ZDSecMgrEntry_t* entry;
   2143          
   2144          
   2145            // lookup entry index for specified EXT address
   2146            status = ZDSecMgrEntryLookupExt( extAddr, &entry );
   \   00000C                ; Setup parameters for call to function ZDSecMgrEntryLookupExt
   \   00000C   AC..         MOV     R4,?XSP + 0
   \   00000E   AD..         MOV     R5,?XSP + 1
   \   000010   12....       LCALL   `??ZDSecMgrEntryLookupExt::?relay`; Banked call to: ZDSecMgrEntryLookupExt
   \   000013   E9           MOV     A,R1
   \   000014   F9           MOV     R1,A
   2147          
   2148            if ( status == ZSuccess )
   \   000015   E9           MOV     A,R1
   \   000016   7018         JNZ     ??ZDSecMgrAuthenticationSet_0
   2149            {
   2150              entry->authenticateOption = option;
   \   000018   EE           MOV     A,R6
   \   000019   C0E0         PUSH    A
   \   00001B   85..82       MOV     DPL,?XSP + 0
   \   00001E   85..83       MOV     DPH,?XSP + 1
   \   000021   E0           MOVX    A,@DPTR
   \   000022   F8           MOV     R0,A
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F583         MOV     DPH,A
   \   000027   8882         MOV     DPL,R0
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   D0E0         POP     A
   \   00002F   F0           MOVX    @DPTR,A
   2151            }
   2152          
   2153            return status;
   \                     ??ZDSecMgrAuthenticationSet_0:
   \   000030   7402         MOV     A,#0x2
   \   000032   12....       LCALL   ?DEALLOC_XSTACK8
   \   000035   7F01         MOV     R7,#0x1
   \   000037   02....       LJMP    ?BANKED_LEAVE_XDATA
   2154          }
   2155          
   2156          /******************************************************************************
   2157           * @fn          ZDSecMgrAuthenticationCheck
   2158           *
   2159           * @brief       Check if the specific device has been authenticated or not
   2160           *              For non-trust center device, always return TRUE
   2161           *
   2162           * @param       shortAddr - [in] short address
   2163           *
   2164           * @return      TRUE @ authenticated with CBKE
   2165           *              FALSE @ not authenticated
   2166           */
   2167          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2168          uint8 ZDSecMgrAuthenticationCheck( uint16 shortAddr )
   \                     ZDSecMgrAuthenticationCheck:
   2169          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2170          #if defined (TC_LINKKEY_JOIN)
   2171          
   2172            ZDSecMgrEntry_t* entry;
   2173            uint8 extAddr[Z_EXTADDR_LEN];
   2174          
   2175            // If the local device is not the trust center, always return TRUE
   2176            APSME_GetRequest( apsTrustCenterAddress, 0, extAddr );
   2177            if ( ! osal_ExtAddrEqual( extAddr , NLME_GetExtAddr() ) )
   2178            {
   2179              return TRUE;
   2180            }
   2181            // Otherwise, check the authentication option
   2182            else if ( AddrMgrExtAddrLookup( shortAddr, extAddr ) )
   2183            {
   2184              // lookup entry index for specified EXT address
   2185              if ( ZDSecMgrEntryLookupExt( extAddr, &entry ) == ZSuccess )
   2186              {
   2187                if ( entry->authenticateOption != ZDSecMgr_Not_Authenticated )
   2188                {
   2189                  return TRUE;
   2190                }
   2191                else
   2192                {
   2193                  return FALSE;
   2194                }
   2195              }
   2196              else
   2197              {
   2198                // it may have been secured with TCLK only
   2199                uint16    ami;
   2200          
   2201                // lookup address index in address manager
   2202                if ( ZDSecMgrExtAddrLookup( extAddr, &ami ) == ZSuccess )
   2203                {
   2204                  return TRUE;
   2205                }
   2206              }
   2207            }
   2208            return FALSE;
   2209          
   2210          #else
   2211            (void)shortAddr;  // Intentionally unreferenced parameter
   2212          
   2213            // For non AMI/SE Profile, perform no check and always return TRUE.
   2214            return TRUE;
   \   000000   7901         MOV     R1,#0x1
   \   000002   02....       LJMP    ?BRET
   2215          
   2216          #endif // TC_LINKKEY_JOIN
   2217          }
   2218          
   2219          /******************************************************************************
   2220           * @fn          ZDSecMgrLinkKeyNVIdGet (stubs APSME_LinkKeyNVIdGet)
   2221           *
   2222           * @brief       Get Key NV ID for specified NWK address.
   2223           *
   2224           * @param       extAddr - [in] EXT address
   2225           * @param       keyNvId - [out] NV ID
   2226           *
   2227           * @return      ZStatus_t
   2228           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2229          ZStatus_t ZDSecMgrLinkKeyNVIdGet(uint8* extAddr, uint16 *pKeyNvId)
   \                     APSME_LinkKeyNVIdGet:
   2230          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EC           MOV     A,R4
   \   00000B   FE           MOV     R6,A
   \   00000C   ED           MOV     A,R5
   \   00000D   FF           MOV     R7,A
   2231            ZStatus_t status;
   2232            ZDSecMgrEntry_t* entry;
   2233          
   2234            // lookup entry index for specified NWK address
   2235            status = ZDSecMgrEntryLookupExt( extAddr, &entry );
   \   00000E                ; Setup parameters for call to function ZDSecMgrEntryLookupExt
   \   00000E   AC..         MOV     R4,?XSP + 0
   \   000010   AD..         MOV     R5,?XSP + 1
   \   000012   12....       LCALL   `??ZDSecMgrEntryLookupExt::?relay`; Banked call to: ZDSecMgrEntryLookupExt
   \   000015   E9           MOV     A,R1
   \   000016   F9           MOV     R1,A
   2236          
   2237            if ( status == ZSuccess )
   \   000017   E9           MOV     A,R1
   \   000018   7020         JNZ     ??APSME_LinkKeyNVIdGet_0
   2238            {
   2239              // return the index to the NV table
   2240              *pKeyNvId = entry->keyNvId;
   \   00001A   85..82       MOV     DPL,?XSP + 0
   \   00001D   85..83       MOV     DPH,?XSP + 1
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F8           MOV     R0,A
   \   000022   A3           INC     DPTR
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F583         MOV     DPH,A
   \   000026   8882         MOV     DPL,R0
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   FA           MOV     R2,A
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   FB           MOV     R3,A
   \   00002F   8E82         MOV     DPL,R6
   \   000031   8F83         MOV     DPH,R7
   \   000033   EA           MOV     A,R2
   \   000034   F0           MOVX    @DPTR,A
   \   000035   A3           INC     DPTR
   \   000036   EB           MOV     A,R3
   \   000037   F0           MOVX    @DPTR,A
   \   000038   800B         SJMP    ??APSME_LinkKeyNVIdGet_1
   2241            }
   2242            else
   2243            {
   2244              *pKeyNvId = SEC_NO_KEY_NV_ID;
   \                     ??APSME_LinkKeyNVIdGet_0:
   \   00003A   8E82         MOV     DPL,R6
   \   00003C   8F83         MOV     DPH,R7
   \   00003E   7400         MOV     A,#0x0
   \   000040   F0           MOVX    @DPTR,A
   \   000041   A3           INC     DPTR
   \   000042   7400         MOV     A,#0x0
   \   000044   F0           MOVX    @DPTR,A
   2245            }
   2246          
   2247            return status;
   \                     ??APSME_LinkKeyNVIdGet_1:
   \   000045   7402         MOV     A,#0x2
   \   000047   12....       LCALL   ?DEALLOC_XSTACK8
   \   00004A   7F01         MOV     R7,#0x1
   \   00004C   02....       LJMP    ?BANKED_LEAVE_XDATA
   2248          }
   2249          
   2250          /******************************************************************************
   2251           * @fn          ZDSecMgrIsLinkKeyValid (stubs APSME_IsLinkKeyValid)
   2252           *
   2253           * @brief       Verifies if Link Key in NV has been set.
   2254           *
   2255           * @param       extAddr - [in] EXT address
   2256           *
   2257           * @return      TRUE - Link Key has been established
   2258           *              FALSE - Link Key in NV has default value.
   2259           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2260          uint8 ZDSecMgrIsLinkKeyValid(uint8* extAddr)
   \                     APSME_IsLinkKeyValid:
   2261          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 18
   \   000005   74EE         MOV     A,#-0x12
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   2262            APSME_LinkKeyData_t *pKeyData;
   2263            uint16 apsLinkKeyNvId;
   2264            uint8 nullKey[SEC_KEY_LEN];
   2265            uint8 status = FALSE;
   \   00000E   75..00       MOV     ?V0,#0x0
   2266          
   2267            // initialize default vealue to compare to
   2268            osal_memset(nullKey, 0x00, SEC_KEY_LEN);
   \   000011                ; Setup parameters for call to function osal_memset
   \   000011   7C10         MOV     R4,#0x10
   \   000013   7D00         MOV     R5,#0x0
   \   000015   7900         MOV     R1,#0x0
   \   000017   7402         MOV     A,#0x2
   \   000019   12....       LCALL   ?XSTACK_DISP101_8
   \   00001C   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2269          
   2270            // check for APS link NV ID
   2271            APSME_LinkKeyNVIdGet( extAddr, &apsLinkKeyNvId );
   \   00001F                ; Setup parameters for call to function APSME_LinkKeyNVIdGet
   \   00001F   AC..         MOV     R4,?XSP + 0
   \   000021   AD..         MOV     R5,?XSP + 1
   \   000023   EE           MOV     A,R6
   \   000024   FA           MOV     R2,A
   \   000025   EF           MOV     A,R7
   \   000026   FB           MOV     R3,A
   \   000027   12....       LCALL   `??APSME_LinkKeyNVIdGet::?relay`; Banked call to: APSME_LinkKeyNVIdGet
   \   00002A   E9           MOV     A,R1
   2272          
   2273            if (apsLinkKeyNvId != SEC_NO_KEY_NV_ID )
   \   00002B   85..82       MOV     DPL,?XSP + 0
   \   00002E   85..83       MOV     DPH,?XSP + 1
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F8           MOV     R0,A
   \   000033   A3           INC     DPTR
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F9           MOV     R1,A
   \   000036   E8           MOV     A,R0
   \   000037   49           ORL     A,R1
   \   000038   7003         JNZ     $+5
   \   00003A   02....       LJMP    ??APSME_IsLinkKeyValid_0 & 0xFFFF
   2274            {
   2275              pKeyData = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
   \   00003D                ; Setup parameters for call to function osal_mem_alloc
   \   00003D   7A18         MOV     R2,#0x18
   \   00003F   7B00         MOV     R3,#0x0
   \   000041   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000044   8A..         MOV     ?V4,R2
   \   000046   8B..         MOV     ?V5,R3
   \   000048   85....       MOV     ?V2,?V4
   \   00004B   85....       MOV     ?V3,?V5
   2276          
   2277              if (pKeyData != NULL)
   \   00004E   E5..         MOV     A,?V2
   \   000050   45..         ORL     A,?V3
   \   000052   606C         JZ      ??APSME_IsLinkKeyValid_0
   2278              {
   2279                // retrieve key from NV
   2280                if ( osal_nv_read( apsLinkKeyNvId, 0,
   2281                                  sizeof(APSME_LinkKeyData_t), pKeyData) == ZSUCCESS)
   \   000054                ; Setup parameters for call to function osal_nv_read
   \   000054   78..         MOV     R0,#?V2
   \   000056   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000059   75..18       MOV     ?V4,#0x18
   \   00005C   75..00       MOV     ?V5,#0x0
   \   00005F   78..         MOV     R0,#?V4
   \   000061   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000064   7C00         MOV     R4,#0x0
   \   000066   7D00         MOV     R5,#0x0
   \   000068   7404         MOV     A,#0x4
   \   00006A   12....       LCALL   ?XSTACK_DISP0_8
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   FA           MOV     R2,A
   \   00006F   A3           INC     DPTR
   \   000070   E0           MOVX    A,@DPTR
   \   000071   FB           MOV     R3,A
   \   000072   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000075   7404         MOV     A,#0x4
   \   000077   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007A   E9           MOV     A,R1
   \   00007B   702F         JNZ     ??APSME_IsLinkKeyValid_1
   2282                {
   2283                  // if stored key is different than default value, then a key has been established
   2284                  if (!osal_memcmp(pKeyData, nullKey, SEC_KEY_LEN))
   \   00007D                ; Setup parameters for call to function osal_memcmp
   \   00007D   7402         MOV     A,#0x2
   \   00007F   12....       LCALL   ?XSTACK_DISP100_8
   \   000082   88..         MOV     ?V4,R0
   \   000084   89..         MOV     ?V5,R1
   \   000086   75..00       MOV     ?V6,#0x0
   \   000089   78..         MOV     R0,#?V4
   \   00008B   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00008E   7C10         MOV     R4,#0x10
   \   000090   7D00         MOV     R5,#0x0
   \   000092   85..82       MOV     DPL,?V2
   \   000095   85..83       MOV     DPH,?V3
   \   000098   A982         MOV     R1,DPL
   \   00009A   AA83         MOV     R2,DPH
   \   00009C   7B00         MOV     R3,#0x0
   \   00009E   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0000A1   7403         MOV     A,#0x3
   \   0000A3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A6   E9           MOV     A,R1
   \   0000A7   7003         JNZ     ??APSME_IsLinkKeyValid_1
   2285                  {
   2286                    status = TRUE;
   \   0000A9   75..01       MOV     ?V0,#0x1
   2287                  }
   2288                }
   2289          
   2290                // clear copy of key in RAM
   2291                osal_memset(pKeyData, 0x00, sizeof(APSME_LinkKeyData_t));
   \                     ??APSME_IsLinkKeyValid_1:
   \   0000AC                ; Setup parameters for call to function osal_memset
   \   0000AC   7C18         MOV     R4,#0x18
   \   0000AE   7D00         MOV     R5,#0x0
   \   0000B0   7900         MOV     R1,#0x0
   \   0000B2   AA..         MOV     R2,?V2
   \   0000B4   AB..         MOV     R3,?V3
   \   0000B6   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2292          
   2293                osal_mem_free(pKeyData);
   \   0000B9                ; Setup parameters for call to function osal_mem_free
   \   0000B9   AA..         MOV     R2,?V2
   \   0000BB   AB..         MOV     R3,?V3
   \   0000BD   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2294              }
   2295            }
   2296          
   2297            return status;
   \                     ??APSME_IsLinkKeyValid_0:
   \   0000C0   A9..         MOV     R1,?V0
   \   0000C2   7412         MOV     A,#0x12
   \   0000C4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C7   7F07         MOV     R7,#0x7
   \   0000C9   02....       LJMP    ?BANKED_LEAVE_XDATA
   2298          }
   2299          
   2300          /******************************************************************************
   2301           * @fn          ZDSecMgrKeyFwdToChild (stubs APSME_KeyFwdToChild)
   2302           *
   2303           * @brief       Verify and process key transportation to child.
   2304           *
   2305           * @param       ind - [in] APSME_TransportKeyInd_t
   2306           *
   2307           * @return      uint8 - success(TRUE:FALSE)
   2308           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2309          uint8 ZDSecMgrKeyFwdToChild( APSME_TransportKeyInd_t* ind )
   \                     APSME_KeyFwdToChild:
   2310          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2311            // verify from Trust Center
   2312            if ( ind->srcAddr == APSME_TRUSTCENTER_NWKADDR )
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F8           MOV     R0,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   E8           MOV     A,R0
   \   00000E   49           ORL     A,R1
   \   00000F   702F         JNZ     ??APSME_KeyFwdToChild_0
   2313            {
   2314              // check for initial NWK key
   2315              if ( ( ind->keyType == KEY_TYPE_NWK ) ||
   2316                   ( ind->keyType == 6            ) )
   \   000011   8A82         MOV     DPL,R2
   \   000013   8B83         MOV     DPH,R3
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   6401         XRL     A,#0x1
   \   00001A   600B         JZ      ??APSME_KeyFwdToChild_1
   \   00001C   8A82         MOV     DPL,R2
   \   00001E   8B83         MOV     DPH,R3
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   6406         XRL     A,#0x6
   \   000025   7015         JNZ     ??APSME_KeyFwdToChild_2
   2317              {
   2318                // set association status to authenticated
   2319                ZDSecMgrAssocDeviceAuth( AssocGetWithExt( ind->dstExtAddr ) );
   \                     ??APSME_KeyFwdToChild_1:
   \   000027                ; Setup parameters for call to function ZDSecMgrAssocDeviceAuth
   \   000027                ; Setup parameters for call to function AssocGetWithExt
   \   000027   8A82         MOV     DPL,R2
   \   000029   8B83         MOV     DPH,R3
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   FA           MOV     R2,A
   \   000033   A3           INC     DPTR
   \   000034   E0           MOVX    A,@DPTR
   \   000035   FB           MOV     R3,A
   \   000036   12....       LCALL   `??AssocGetWithExt::?relay`; Banked call to: AssocGetWithExt
   \   000039   12....       LCALL   `??ZDSecMgrAssocDeviceAuth::?relay`; Banked call to: ZDSecMgrAssocDeviceAuth
   2320              }
   2321          
   2322              return TRUE;
   \                     ??APSME_KeyFwdToChild_2:
   \   00003C   7901         MOV     R1,#0x1
   \   00003E   8002         SJMP    ??APSME_KeyFwdToChild_3
   2323            }
   2324          
   2325            return FALSE;
   \                     ??APSME_KeyFwdToChild_0:
   \   000040   7900         MOV     R1,#0x0
   \                     ??APSME_KeyFwdToChild_3:
   \   000042   D083         POP     DPH
   \   000044   D082         POP     DPL
   \   000046   02....       LJMP    ?BRET
   2326          }
   2327          
   2328          /******************************************************************************
   2329           * @fn          ZDSecMgrAddLinkKey
   2330           *
   2331           * @brief       Add the application link key to ZDSecMgr. Also mark the device
   2332           *              as authenticated in the authenticateOption. Note that this function
   2333           *              is hardwared to CBKE right now.
   2334           *
   2335           * @param       shortAddr - short address of the partner device
   2336           * @param       extAddr - extended address of the partner device
   2337           * @param       key - link key
   2338           *
   2339           * @return      ZStatus_t
   2340           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2341          ZStatus_t ZDSecMgrAddLinkKey( uint16 shortAddr, uint8 *extAddr, uint8 *key)
   \                     ZDSecMgrAddLinkKey:
   2342          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EC           MOV     A,R4
   \   00000B   FE           MOV     R6,A
   \   00000C   ED           MOV     A,R5
   \   00000D   FF           MOV     R7,A
   2343            uint16           ami;
   2344            ZDSecMgrEntry_t* entry;
   2345          
   2346            /* Store the device address in the addr manager */
   2347            if( ZDSecMgrAddrStore( shortAddr, extAddr, &ami ) != ZSuccess )
   \   00000E                ; Setup parameters for call to function ZDSecMgrAddrStore
   \   00000E   7402         MOV     A,#0x2
   \   000010   12....       LCALL   ?XSTACK_DISP100_8
   \   000013   88..         MOV     ?V0,R0
   \   000015   89..         MOV     ?V1,R1
   \   000017   78..         MOV     R0,#?V0
   \   000019   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001C   EE           MOV     A,R6
   \   00001D   FC           MOV     R4,A
   \   00001E   EF           MOV     A,R7
   \   00001F   FD           MOV     R5,A
   \   000020   12....       LCALL   `??ZDSecMgrAddrStore::?relay`; Banked call to: ZDSecMgrAddrStore
   \   000023   7402         MOV     A,#0x2
   \   000025   12....       LCALL   ?DEALLOC_XSTACK8
   \   000028   E9           MOV     A,R1
   \   000029   6004         JZ      ??ZDSecMgrAddLinkKey_0
   2348            {
   2349              /* Adding to Addr Manager fails */
   2350              return ZFailure;
   \   00002B   7901         MOV     R1,#0x1
   \   00002D   805F         SJMP    ??ZDSecMgrAddLinkKey_1
   2351            }
   2352          
   2353            /* Lookup entry using specified address index */
   2354            ZDSecMgrEntryLookupAMI( ami, &entry );
   \                     ??ZDSecMgrAddLinkKey_0:
   \   00002F                ; Setup parameters for call to function ZDSecMgrEntryLookupAMI
   \   00002F   AC..         MOV     R4,?XSP + 0
   \   000031   AD..         MOV     R5,?XSP + 1
   \   000033   7402         MOV     A,#0x2
   \   000035   12....       LCALL   ?XSTACK_DISP0_8
   \   000038   E0           MOVX    A,@DPTR
   \   000039   FA           MOV     R2,A
   \   00003A   A3           INC     DPTR
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   FB           MOV     R3,A
   \   00003D   12....       LCALL   `??ZDSecMgrEntryLookupAMI::?relay`; Banked call to: ZDSecMgrEntryLookupAMI
   \   000040   E9           MOV     A,R1
   2355          
   2356            // If no existing entry, create one
   2357            if ( entry == NULL )
   \   000041   85..82       MOV     DPL,?XSP + 0
   \   000044   85..83       MOV     DPH,?XSP + 1
   \   000047   E0           MOVX    A,@DPTR
   \   000048   F8           MOV     R0,A
   \   000049   A3           INC     DPTR
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F9           MOV     R1,A
   \   00004C   E8           MOV     A,R0
   \   00004D   49           ORL     A,R1
   \   00004E   7027         JNZ     ??ZDSecMgrAddLinkKey_2
   2358            {
   2359              if ( ZDSecMgrEntryNew( &entry ) == ZSuccess )
   \   000050                ; Setup parameters for call to function ZDSecMgrEntryNew
   \   000050   AA..         MOV     R2,?XSP + 0
   \   000052   AB..         MOV     R3,?XSP + 1
   \   000054   12....       LCALL   `??ZDSecMgrEntryNew::?relay`; Banked call to: ZDSecMgrEntryNew
   \   000057   E9           MOV     A,R1
   \   000058   703E         JNZ     ??ZDSecMgrAddLinkKey_3
   2360              {
   2361                entry->ami = ami;
   \   00005A   7402         MOV     A,#0x2
   \   00005C   12....       LCALL   ?XSTACK_DISP0_8
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   F8           MOV     R0,A
   \   000061   A3           INC     DPTR
   \   000062   E0           MOVX    A,@DPTR
   \   000063   F9           MOV     R1,A
   \   000064   85..82       MOV     DPL,?XSP + 0
   \   000067   85..83       MOV     DPH,?XSP + 1
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   FA           MOV     R2,A
   \   00006C   A3           INC     DPTR
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   F583         MOV     DPH,A
   \   000070   8A82         MOV     DPL,R2
   \   000072   E8           MOV     A,R0
   \   000073   F0           MOVX    @DPTR,A
   \   000074   A3           INC     DPTR
   \   000075   E9           MOV     A,R1
   \   000076   F0           MOVX    @DPTR,A
   2362              }
   2363              else
   2364              {
   2365                /* Security Manager full */
   2366                return ZBufferFull;
   2367              }
   2368            }
   2369            // Write the link key
   2370            APSME_LinkKeySet( extAddr, key );
   \                     ??ZDSecMgrAddLinkKey_2:
   \   000077                ; Setup parameters for call to function APSME_LinkKeySet
   \   000077   740E         MOV     A,#0xe
   \   000079   12....       LCALL   ?XSTACK_DISP0_8
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   FC           MOV     R4,A
   \   00007E   A3           INC     DPTR
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   FD           MOV     R5,A
   \   000081   EE           MOV     A,R6
   \   000082   FA           MOV     R2,A
   \   000083   EF           MOV     A,R7
   \   000084   FB           MOV     R3,A
   \   000085   12....       LCALL   `??APSME_LinkKeySet::?relay`; Banked call to: APSME_LinkKeySet
   \   000088   E9           MOV     A,R1
   2371          
   2372          #if defined (TC_LINKKEY_JOIN)
   2373            // Mark the device as authenticated.
   2374            ZDSecMgrAuthenticationSet( extAddr, ZDSecMgr_Authenticated_CBCK );
   2375          #endif
   2376          
   2377          #if defined NV_RESTORE
   2378            ZDSecMgrWriteNV();  // Write the new established link key to NV.
   \   000089                ; Setup parameters for call to function ZDSecMgrWriteNV
   \   000089   12....       LCALL   `??ZDSecMgrWriteNV::?relay`; Banked call to: ZDSecMgrWriteNV
   2379          #endif
   2380          
   2381            return ZSuccess;
   \   00008C   7900         MOV     R1,#0x0
   \                     ??ZDSecMgrAddLinkKey_1:
   \   00008E   7404         MOV     A,#0x4
   \   000090   12....       LCALL   ?DEALLOC_XSTACK8
   \   000093   7F02         MOV     R7,#0x2
   \   000095   02....       LJMP    ?BANKED_LEAVE_XDATA
   \                     ??ZDSecMgrAddLinkKey_3:
   \   000098   7911         MOV     R1,#0x11
   \   00009A   80F2         SJMP    ??ZDSecMgrAddLinkKey_1
   2382          }
   2383          
   2384          /******************************************************************************
   2385           * @fn          ZDSecMgrInitNV
   2386           *
   2387           * @brief       Initialize the SecMgr entry data in NV with all values set to 0
   2388           *
   2389           * @param       none
   2390           *
   2391           * @return      uint8 - <osal_nv_item_init> return codes
   2392           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2393          uint8 ZDSecMgrInitNV(void)
   \                     ZDSecMgrInitNV:
   2394          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   2395          
   2396            uint8 rtrn = osal_nv_item_init(ZCD_NV_APS_LINK_KEY_TABLE,
   2397                          (sizeof(nvDeviceListHdr_t) + (sizeof(ZDSecMgrEntry_t) * ZDSECMGR_ENTRY_MAX)), NULL);
   \   00000A                ; Setup parameters for call to function osal_nv_item_init
   \   00000A   E4           CLR     A
   \   00000B   F5..         MOV     ?V0,A
   \   00000D   F5..         MOV     ?V1,A
   \   00000F   78..         MOV     R0,#?V0
   \   000011   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000014   7C11         MOV     R4,#0x11
   \   000016   7D00         MOV     R5,#0x0
   \   000018   7A4C         MOV     R2,#0x4c
   \   00001A   7B00         MOV     R3,#0x0
   \   00001C   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00001F   7402         MOV     A,#0x2
   \   000021   12....       LCALL   ?DEALLOC_XSTACK8
   \   000024   E9           MOV     A,R1
   \   000025   FE           MOV     R6,A
   2398          
   2399            // If the item does not already exist, set all values to 0
   2400            if (rtrn != SUCCESS)
   \   000026   EE           MOV     A,R6
   \   000027   6036         JZ      ??ZDSecMgrInitNV_0
   2401            {
   2402              nvDeviceListHdr_t hdr;
   2403              hdr.numRecs = 0;
   \   000029   85..82       MOV     DPL,?XSP + 0
   \   00002C   85..83       MOV     DPH,?XSP + 1
   \   00002F   7400         MOV     A,#0x0
   \   000031   F0           MOVX    @DPTR,A
   \   000032   A3           INC     DPTR
   \   000033   7400         MOV     A,#0x0
   \   000035   F0           MOVX    @DPTR,A
   2404              osal_nv_write(ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof(nvDeviceListHdr_t), &hdr);
   \   000036                ; Setup parameters for call to function osal_nv_write
   \   000036   A8..         MOV     R0,?XSP + 0
   \   000038   A9..         MOV     R1,?XSP + 1
   \   00003A   88..         MOV     ?V0,R0
   \   00003C   89..         MOV     ?V1,R1
   \   00003E   78..         MOV     R0,#?V0
   \   000040   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000043   75..02       MOV     ?V0,#0x2
   \   000046   75..00       MOV     ?V1,#0x0
   \   000049   78..         MOV     R0,#?V0
   \   00004B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004E   7C00         MOV     R4,#0x0
   \   000050   7D00         MOV     R5,#0x0
   \   000052   7A4C         MOV     R2,#0x4c
   \   000054   7B00         MOV     R3,#0x0
   \   000056   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000059   7404         MOV     A,#0x4
   \   00005B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005E   E9           MOV     A,R1
   2405            }
   2406          
   2407            rtrn |= osal_nv_item_init( ZCD_NV_TRUSTCENTER_ADDR, Z_EXTADDR_LEN,
   2408                                       zgApsTrustCenterAddr );
   \                     ??ZDSecMgrInitNV_0:
   \   00005F                ; Setup parameters for call to function osal_nv_item_init
   \   00005F   75....       MOV     ?V0,#zgApsTrustCenterAddr & 0xff
   \   000062   75....       MOV     ?V1,#(zgApsTrustCenterAddr >> 8) & 0xff
   \   000065   78..         MOV     R0,#?V0
   \   000067   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006A   7C08         MOV     R4,#0x8
   \   00006C   7D00         MOV     R5,#0x0
   \   00006E   7A71         MOV     R2,#0x71
   \   000070   7B00         MOV     R3,#0x0
   \   000072   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000075   7402         MOV     A,#0x2
   \   000077   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007A   E9           MOV     A,R1
   \   00007B   CE           XCH     A,R6
   \   00007C   4E           ORL     A,R6
   \   00007D   CE           XCH     A,R6
   2409          
   2410            return rtrn;
   \   00007E   EE           MOV     A,R6
   \   00007F   F9           MOV     R1,A
   \   000080   7402         MOV     A,#0x2
   \   000082   12....       LCALL   ?DEALLOC_XSTACK8
   \   000085   7F02         MOV     R7,#0x2
   \   000087   02....       LJMP    ?BANKED_LEAVE_XDATA
   2411          }
   2412          
   2413          #if defined ( NV_RESTORE )
   2414          /*********************************************************************
   2415           * @fn      ZDSecMgrWriteNV()
   2416           *
   2417           * @brief   Save off the APS link key list to NV
   2418           *
   2419           * @param   none
   2420           *
   2421           * @return  none
   2422           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2423          static void ZDSecMgrWriteNV( void )
   \                     ZDSecMgrWriteNV:
   2424          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   2425            uint16 i;
   2426            nvDeviceListHdr_t hdr;
   2427          
   2428            hdr.numRecs = 0;
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   7400         MOV     A,#0x0
   \   000012   F0           MOVX    @DPTR,A
   \   000013   A3           INC     DPTR
   \   000014   7400         MOV     A,#0x0
   \   000016   F0           MOVX    @DPTR,A
   2429          
   2430            if (ZDSecMgrEntries != NULL)
   \   000017   90....       MOV     DPTR,#ZDSecMgrEntries
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F8           MOV     R0,A
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F9           MOV     R1,A
   \   00001F   E8           MOV     A,R0
   \   000020   49           ORL     A,R1
   \   000021   7003         JNZ     $+5
   \   000023   02....       LJMP    ??ZDSecMgrWriteNV_0 & 0xFFFF
   2431            {
   2432              for ( i = 0; i < ZDSECMGR_ENTRY_MAX; i++ )
   \   000026   7E00         MOV     R6,#0x0
   \   000028   7F00         MOV     R7,#0x0
   \   00002A   02....       LJMP    ??ZDSecMgrWriteNV_1 & 0xFFFF
   2433              {
   2434                // Save off the record
   2435                osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE,
   2436                              (uint16)((sizeof(nvDeviceListHdr_t)) + (i * sizeof(ZDSecMgrEntry_t))),
   2437                              sizeof(ZDSecMgrEntry_t), &ZDSecMgrEntries[i] );
   \                     ??ZDSecMgrWriteNV_2:
   \   00002D                ; Setup parameters for call to function osal_nv_write
   \   00002D   EE           MOV     A,R6
   \   00002E   F8           MOV     R0,A
   \   00002F   EF           MOV     A,R7
   \   000030   F9           MOV     R1,A
   \   000031   E8           MOV     A,R0
   \   000032   75F005       MOV     B,#0x5
   \   000035   A4           MUL     AB
   \   000036   C8           XCH     A,R0
   \   000037   AAF0         MOV     R2,B
   \   000039   75F000       MOV     B,#0x0
   \   00003C   A4           MUL     AB
   \   00003D   2A           ADD     A,R2
   \   00003E   FA           MOV     R2,A
   \   00003F   75F005       MOV     B,#0x5
   \   000042   E9           MOV     A,R1
   \   000043   A4           MUL     AB
   \   000044   2A           ADD     A,R2
   \   000045   F9           MOV     R1,A
   \   000046   90....       MOV     DPTR,#ZDSecMgrEntries
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   28           ADD     A,R0
   \   00004B   F5..         MOV     ?V0,A
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   39           ADDC    A,R1
   \   000050   F5..         MOV     ?V1,A
   \   000052   78..         MOV     R0,#?V0
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000057   75..05       MOV     ?V0,#0x5
   \   00005A   75..00       MOV     ?V1,#0x0
   \   00005D   78..         MOV     R0,#?V0
   \   00005F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000062   EE           MOV     A,R6
   \   000063   F8           MOV     R0,A
   \   000064   EF           MOV     A,R7
   \   000065   F9           MOV     R1,A
   \   000066   E8           MOV     A,R0
   \   000067   75F005       MOV     B,#0x5
   \   00006A   A4           MUL     AB
   \   00006B   C8           XCH     A,R0
   \   00006C   AAF0         MOV     R2,B
   \   00006E   75F000       MOV     B,#0x0
   \   000071   A4           MUL     AB
   \   000072   2A           ADD     A,R2
   \   000073   FA           MOV     R2,A
   \   000074   75F005       MOV     B,#0x5
   \   000077   E9           MOV     A,R1
   \   000078   A4           MUL     AB
   \   000079   2A           ADD     A,R2
   \   00007A   F9           MOV     R1,A
   \   00007B   E8           MOV     A,R0
   \   00007C   2402         ADD     A,#0x2
   \   00007E   FC           MOV     R4,A
   \   00007F   E4           CLR     A
   \   000080   39           ADDC    A,R1
   \   000081   FD           MOV     R5,A
   \   000082   7A4C         MOV     R2,#0x4c
   \   000084   7B00         MOV     R3,#0x0
   \   000086   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000089   7404         MOV     A,#0x4
   \   00008B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008E   E9           MOV     A,R1
   2438          
   2439                if ( ZDSecMgrEntries[i].ami != INVALID_NODE_ADDR )
   \   00008F   EE           MOV     A,R6
   \   000090   F8           MOV     R0,A
   \   000091   EF           MOV     A,R7
   \   000092   F9           MOV     R1,A
   \   000093   E8           MOV     A,R0
   \   000094   75F005       MOV     B,#0x5
   \   000097   A4           MUL     AB
   \   000098   C8           XCH     A,R0
   \   000099   AAF0         MOV     R2,B
   \   00009B   75F000       MOV     B,#0x0
   \   00009E   A4           MUL     AB
   \   00009F   2A           ADD     A,R2
   \   0000A0   FA           MOV     R2,A
   \   0000A1   75F005       MOV     B,#0x5
   \   0000A4   E9           MOV     A,R1
   \   0000A5   A4           MUL     AB
   \   0000A6   2A           ADD     A,R2
   \   0000A7   F9           MOV     R1,A
   \   0000A8   90....       MOV     DPTR,#ZDSecMgrEntries
   \   0000AB   E0           MOVX    A,@DPTR
   \   0000AC   28           ADD     A,R0
   \   0000AD   FA           MOV     R2,A
   \   0000AE   A3           INC     DPTR
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   39           ADDC    A,R1
   \   0000B1   8A82         MOV     DPL,R2
   \   0000B3   F583         MOV     DPH,A
   \   0000B5   E0           MOVX    A,@DPTR
   \   0000B6   64FE         XRL     A,#0xfe
   \   0000B8   7004         JNZ     ??ZDSecMgrWriteNV_3
   \   0000BA   A3           INC     DPTR
   \   0000BB   E0           MOVX    A,@DPTR
   \   0000BC   64FF         XRL     A,#0xff
   \                     ??ZDSecMgrWriteNV_3:
   \   0000BE   600F         JZ      ??ZDSecMgrWriteNV_4
   2440                {
   2441                  hdr.numRecs++;
   \   0000C0   85..82       MOV     DPL,?XSP + 0
   \   0000C3   85..83       MOV     DPH,?XSP + 1
   \   0000C6   E0           MOVX    A,@DPTR
   \   0000C7   2401         ADD     A,#0x1
   \   0000C9   F0           MOVX    @DPTR,A
   \   0000CA   A3           INC     DPTR
   \   0000CB   E0           MOVX    A,@DPTR
   \   0000CC   3400         ADDC    A,#0x0
   \   0000CE   F0           MOVX    @DPTR,A
   2442                }
   2443              }
   \                     ??ZDSecMgrWriteNV_4:
   \   0000CF   0E           INC     R6
   \   0000D0   EE           MOV     A,R6
   \   0000D1   7001         JNZ     ??ZDSecMgrWriteNV_1
   \   0000D3   0F           INC     R7
   \                     ??ZDSecMgrWriteNV_1:
   \   0000D4   C3           CLR     C
   \   0000D5   EE           MOV     A,R6
   \   0000D6   9403         SUBB    A,#0x3
   \   0000D8   EF           MOV     A,R7
   \   0000D9   9400         SUBB    A,#0x0
   \   0000DB   5003         JNC     $+5
   \   0000DD   02....       LJMP    ??ZDSecMgrWriteNV_2 & 0xFFFF
   2444            }
   2445          
   2446            // Save off the header
   2447            osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof( nvDeviceListHdr_t ), &hdr );
   \                     ??ZDSecMgrWriteNV_0:
   \   0000E0                ; Setup parameters for call to function osal_nv_write
   \   0000E0   A8..         MOV     R0,?XSP + 0
   \   0000E2   A9..         MOV     R1,?XSP + 1
   \   0000E4   88..         MOV     ?V0,R0
   \   0000E6   89..         MOV     ?V1,R1
   \   0000E8   78..         MOV     R0,#?V0
   \   0000EA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000ED   75..02       MOV     ?V0,#0x2
   \   0000F0   75..00       MOV     ?V1,#0x0
   \   0000F3   78..         MOV     R0,#?V0
   \   0000F5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F8   7C00         MOV     R4,#0x0
   \   0000FA   7D00         MOV     R5,#0x0
   \   0000FC   7A4C         MOV     R2,#0x4c
   \   0000FE   7B00         MOV     R3,#0x0
   \   000100   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000103   7404         MOV     A,#0x4
   \   000105   12....       LCALL   ?DEALLOC_XSTACK8
   \   000108   E9           MOV     A,R1
   2448          }
   \   000109   7402         MOV     A,#0x2
   \   00010B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00010E   7F02         MOV     R7,#0x2
   \   000110   02....       LJMP    ?BANKED_LEAVE_XDATA
   2449          #endif // NV_RESTORE
   2450          
   2451          #if defined ( NV_RESTORE )
   2452          /******************************************************************************
   2453           * @fn          ZDSecMgrRestoreFromNV
   2454           *
   2455           * @brief       Restore the APS Link Key entry data from NV. It does not restore
   2456           *              the key data itself as they remain in NV until they are used.
   2457           *              Only list data is restored.
   2458           *              Restore zgTrustCenterAdress from NV.
   2459           *
   2460           * @param       none
   2461           *
   2462           * @return      None.
   2463           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2464          static void ZDSecMgrRestoreFromNV( void )
   \                     ZDSecMgrRestoreFromNV:
   2465          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   2466            nvDeviceListHdr_t hdr;
   2467            APSME_LinkKeyData_t *pApsLinkKey = NULL;
   \   00000A   75..00       MOV     ?V0,#0x0
   \   00000D   75..00       MOV     ?V1,#0x0
   2468          
   2469            if ((osal_nv_read(ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof(nvDeviceListHdr_t), &hdr) == ZSUCCESS) &&
   2470                ((hdr.numRecs > 0) && (hdr.numRecs <= ZDSECMGR_ENTRY_MAX)))
   \   000010                ; Setup parameters for call to function osal_nv_read
   \   000010   A8..         MOV     R0,?XSP + 0
   \   000012   A9..         MOV     R1,?XSP + 1
   \   000014   88..         MOV     ?V2,R0
   \   000016   89..         MOV     ?V3,R1
   \   000018   78..         MOV     R0,#?V2
   \   00001A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001D   75..02       MOV     ?V2,#0x2
   \   000020   75..00       MOV     ?V3,#0x0
   \   000023   78..         MOV     R0,#?V2
   \   000025   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000028   7C00         MOV     R4,#0x0
   \   00002A   7D00         MOV     R5,#0x0
   \   00002C   7A4C         MOV     R2,#0x4c
   \   00002E   7B00         MOV     R3,#0x0
   \   000030   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000033   7404         MOV     A,#0x4
   \   000035   12....       LCALL   ?DEALLOC_XSTACK8
   \   000038   E9           MOV     A,R1
   \   000039   6003         JZ      $+5
   \   00003B   02....       LJMP    ??ZDSecMgrRestoreFromNV_0 & 0xFFFF
   \   00003E   85..82       MOV     DPL,?XSP + 0
   \   000041   85..83       MOV     DPH,?XSP + 1
   \   000044   E0           MOVX    A,@DPTR
   \   000045   F8           MOV     R0,A
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   F9           MOV     R1,A
   \   000049   E8           MOV     A,R0
   \   00004A   49           ORL     A,R1
   \   00004B   7003         JNZ     $+5
   \   00004D   02....       LJMP    ??ZDSecMgrRestoreFromNV_0 & 0xFFFF
   \   000050   85..82       MOV     DPL,?XSP + 0
   \   000053   85..83       MOV     DPH,?XSP + 1
   \   000056   C3           CLR     C
   \   000057   E0           MOVX    A,@DPTR
   \   000058   9404         SUBB    A,#0x4
   \   00005A   A3           INC     DPTR
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   9400         SUBB    A,#0x0
   \   00005E   4003         JC      $+5
   \   000060   02....       LJMP    ??ZDSecMgrRestoreFromNV_0 & 0xFFFF
   2471            {
   2472              uint8 x;
   2473          
   2474              pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
   \   000063                ; Setup parameters for call to function osal_mem_alloc
   \   000063   7A18         MOV     R2,#0x18
   \   000065   7B00         MOV     R3,#0x0
   \   000067   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00006A   8A..         MOV     ?V2,R2
   \   00006C   8B..         MOV     ?V3,R3
   \   00006E   85....       MOV     ?V0,?V2
   \   000071   85....       MOV     ?V1,?V3
   2475          
   2476              for (x = 0; x < ZDSECMGR_ENTRY_MAX; x++)
   \   000074   7E00         MOV     R6,#0x0
   \   000076   02....       LJMP    ??ZDSecMgrRestoreFromNV_1 & 0xFFFF
   2477              {
   2478                if ( osal_nv_read( ZCD_NV_APS_LINK_KEY_TABLE,
   2479                                  (uint16)(sizeof(nvDeviceListHdr_t) + (x * sizeof(ZDSecMgrEntry_t))),
   2480                                  sizeof(ZDSecMgrEntry_t), &ZDSecMgrEntries[x] ) == SUCCESS )
   \                     ??ZDSecMgrRestoreFromNV_2:
   \   000079                ; Setup parameters for call to function osal_nv_read
   \   000079   EE           MOV     A,R6
   \   00007A   F8           MOV     R0,A
   \   00007B   7900         MOV     R1,#0x0
   \   00007D   E8           MOV     A,R0
   \   00007E   75F005       MOV     B,#0x5
   \   000081   A4           MUL     AB
   \   000082   C8           XCH     A,R0
   \   000083   AAF0         MOV     R2,B
   \   000085   75F000       MOV     B,#0x0
   \   000088   A4           MUL     AB
   \   000089   2A           ADD     A,R2
   \   00008A   FA           MOV     R2,A
   \   00008B   75F005       MOV     B,#0x5
   \   00008E   E9           MOV     A,R1
   \   00008F   A4           MUL     AB
   \   000090   2A           ADD     A,R2
   \   000091   F9           MOV     R1,A
   \   000092   90....       MOV     DPTR,#ZDSecMgrEntries
   \   000095   E0           MOVX    A,@DPTR
   \   000096   28           ADD     A,R0
   \   000097   F5..         MOV     ?V2,A
   \   000099   A3           INC     DPTR
   \   00009A   E0           MOVX    A,@DPTR
   \   00009B   39           ADDC    A,R1
   \   00009C   F5..         MOV     ?V3,A
   \   00009E   78..         MOV     R0,#?V2
   \   0000A0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A3   75..05       MOV     ?V2,#0x5
   \   0000A6   75..00       MOV     ?V3,#0x0
   \   0000A9   78..         MOV     R0,#?V2
   \   0000AB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AE   EE           MOV     A,R6
   \   0000AF   F8           MOV     R0,A
   \   0000B0   7900         MOV     R1,#0x0
   \   0000B2   E8           MOV     A,R0
   \   0000B3   75F005       MOV     B,#0x5
   \   0000B6   A4           MUL     AB
   \   0000B7   C8           XCH     A,R0
   \   0000B8   AAF0         MOV     R2,B
   \   0000BA   75F000       MOV     B,#0x0
   \   0000BD   A4           MUL     AB
   \   0000BE   2A           ADD     A,R2
   \   0000BF   FA           MOV     R2,A
   \   0000C0   75F005       MOV     B,#0x5
   \   0000C3   E9           MOV     A,R1
   \   0000C4   A4           MUL     AB
   \   0000C5   2A           ADD     A,R2
   \   0000C6   F9           MOV     R1,A
   \   0000C7   E8           MOV     A,R0
   \   0000C8   2402         ADD     A,#0x2
   \   0000CA   FC           MOV     R4,A
   \   0000CB   E4           CLR     A
   \   0000CC   39           ADDC    A,R1
   \   0000CD   FD           MOV     R5,A
   \   0000CE   7A4C         MOV     R2,#0x4c
   \   0000D0   7B00         MOV     R3,#0x0
   \   0000D2   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   0000D5   7404         MOV     A,#0x4
   \   0000D7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000DA   E9           MOV     A,R1
   \   0000DB   6003         JZ      $+5
   \   0000DD   02....       LJMP    ??ZDSecMgrRestoreFromNV_3 & 0xFFFF
   2481                {
   2482                  // update data only for valid entries
   2483                  if ( ZDSecMgrEntries[x].ami != INVALID_NODE_ADDR )
   \   0000E0   EE           MOV     A,R6
   \   0000E1   F8           MOV     R0,A
   \   0000E2   7900         MOV     R1,#0x0
   \   0000E4   E8           MOV     A,R0
   \   0000E5   75F005       MOV     B,#0x5
   \   0000E8   A4           MUL     AB
   \   0000E9   C8           XCH     A,R0
   \   0000EA   AAF0         MOV     R2,B
   \   0000EC   75F000       MOV     B,#0x0
   \   0000EF   A4           MUL     AB
   \   0000F0   2A           ADD     A,R2
   \   0000F1   FA           MOV     R2,A
   \   0000F2   75F005       MOV     B,#0x5
   \   0000F5   E9           MOV     A,R1
   \   0000F6   A4           MUL     AB
   \   0000F7   2A           ADD     A,R2
   \   0000F8   F9           MOV     R1,A
   \   0000F9   90....       MOV     DPTR,#ZDSecMgrEntries
   \   0000FC   E0           MOVX    A,@DPTR
   \   0000FD   28           ADD     A,R0
   \   0000FE   FA           MOV     R2,A
   \   0000FF   A3           INC     DPTR
   \   000100   E0           MOVX    A,@DPTR
   \   000101   39           ADDC    A,R1
   \   000102   8A82         MOV     DPL,R2
   \   000104   F583         MOV     DPH,A
   \   000106   E0           MOVX    A,@DPTR
   \   000107   64FE         XRL     A,#0xfe
   \   000109   7004         JNZ     ??ZDSecMgrRestoreFromNV_4
   \   00010B   A3           INC     DPTR
   \   00010C   E0           MOVX    A,@DPTR
   \   00010D   64FF         XRL     A,#0xff
   \                     ??ZDSecMgrRestoreFromNV_4:
   \   00010F   7003         JNZ     $+5
   \   000111   02....       LJMP    ??ZDSecMgrRestoreFromNV_3 & 0xFFFF
   2484                  {
   2485                    if (pApsLinkKey != NULL)
   \   000114   E5..         MOV     A,?V0
   \   000116   45..         ORL     A,?V1
   \   000118   7003         JNZ     $+5
   \   00011A   02....       LJMP    ??ZDSecMgrRestoreFromNV_3 & 0xFFFF
   2486                    {
   2487                      // read the key form NV, keyNvId must be ZCD_NV_APS_LINK_KEY_DATA_START based
   2488                      osal_nv_read( ZDSecMgrEntries[x].keyNvId, 0,
   2489                                   sizeof(APSME_LinkKeyData_t), pApsLinkKey );
   \   00011D                ; Setup parameters for call to function osal_nv_read
   \   00011D   78..         MOV     R0,#?V0
   \   00011F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000122   75..18       MOV     ?V2,#0x18
   \   000125   75..00       MOV     ?V3,#0x0
   \   000128   78..         MOV     R0,#?V2
   \   00012A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00012D   7C00         MOV     R4,#0x0
   \   00012F   7D00         MOV     R5,#0x0
   \   000131   EE           MOV     A,R6
   \   000132   F8           MOV     R0,A
   \   000133   7900         MOV     R1,#0x0
   \   000135   E8           MOV     A,R0
   \   000136   75F005       MOV     B,#0x5
   \   000139   A4           MUL     AB
   \   00013A   C8           XCH     A,R0
   \   00013B   AAF0         MOV     R2,B
   \   00013D   75F000       MOV     B,#0x0
   \   000140   A4           MUL     AB
   \   000141   2A           ADD     A,R2
   \   000142   FA           MOV     R2,A
   \   000143   75F005       MOV     B,#0x5
   \   000146   E9           MOV     A,R1
   \   000147   A4           MUL     AB
   \   000148   2A           ADD     A,R2
   \   000149   F9           MOV     R1,A
   \   00014A   90....       MOV     DPTR,#ZDSecMgrEntries
   \   00014D   E0           MOVX    A,@DPTR
   \   00014E   28           ADD     A,R0
   \   00014F   FA           MOV     R2,A
   \   000150   A3           INC     DPTR
   \   000151   E0           MOVX    A,@DPTR
   \   000152   39           ADDC    A,R1
   \   000153   8A82         MOV     DPL,R2
   \   000155   F583         MOV     DPH,A
   \   000157   A3           INC     DPTR
   \   000158   A3           INC     DPTR
   \   000159   E0           MOVX    A,@DPTR
   \   00015A   FA           MOV     R2,A
   \   00015B   A3           INC     DPTR
   \   00015C   E0           MOVX    A,@DPTR
   \   00015D   FB           MOV     R3,A
   \   00015E   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000161   7404         MOV     A,#0x4
   \   000163   12....       LCALL   ?DEALLOC_XSTACK8
   \   000166   E9           MOV     A,R1
   2490          
   2491                      // set new values for the counter
   2492                      pApsLinkKey->txFrmCntr += ( MAX_APS_FRAMECOUNTER_CHANGES + 1 );
   \   000167   90....       MOV     DPTR,#__Constant_3e9
   \   00016A   78..         MOV     R0,#?V4
   \   00016C   12....       LCALL   ?L_MOV_X
   \   00016F   E5..         MOV     A,?V0
   \   000171   2410         ADD     A,#0x10
   \   000173   F582         MOV     DPL,A
   \   000175   E4           CLR     A
   \   000176   35..         ADDC    A,?V1
   \   000178   F583         MOV     DPH,A
   \   00017A   78..         MOV     R0,#?V4
   \   00017C   12....       LCALL   ?L_ADD_TO_X
   2493          
   2494                      // restore values for counters in RAM
   2495                      ApsLinkKeyFrmCntr[ZDSecMgrEntries[x].keyNvId - ZCD_NV_APS_LINK_KEY_DATA_START].txFrmCntr =
   2496                                                      pApsLinkKey->txFrmCntr;
   \   00017F   E5..         MOV     A,?V0
   \   000181   2410         ADD     A,#0x10
   \   000183   F582         MOV     DPL,A
   \   000185   E4           CLR     A
   \   000186   35..         ADDC    A,?V1
   \   000188   F583         MOV     DPH,A
   \   00018A   12....       LCALL   ?XLOAD_R0123
   \   00018D   EE           MOV     A,R6
   \   00018E   FC           MOV     R4,A
   \   00018F   7D00         MOV     R5,#0x0
   \   000191   EC           MOV     A,R4
   \   000192   75F005       MOV     B,#0x5
   \   000195   A4           MUL     AB
   \   000196   CC           XCH     A,R4
   \   000197   AFF0         MOV     R7,B
   \   000199   75F000       MOV     B,#0x0
   \   00019C   A4           MUL     AB
   \   00019D   2F           ADD     A,R7
   \   00019E   FF           MOV     R7,A
   \   00019F   75F005       MOV     B,#0x5
   \   0001A2   ED           MOV     A,R5
   \   0001A3   A4           MUL     AB
   \   0001A4   2F           ADD     A,R7
   \   0001A5   FD           MOV     R5,A
   \   0001A6   90....       MOV     DPTR,#ZDSecMgrEntries
   \   0001A9   E0           MOVX    A,@DPTR
   \   0001AA   2C           ADD     A,R4
   \   0001AB   FF           MOV     R7,A
   \   0001AC   A3           INC     DPTR
   \   0001AD   E0           MOVX    A,@DPTR
   \   0001AE   3D           ADDC    A,R5
   \   0001AF   8F82         MOV     DPL,R7
   \   0001B1   F583         MOV     DPH,A
   \   0001B3   A3           INC     DPTR
   \   0001B4   A3           INC     DPTR
   \   0001B5   E0           MOVX    A,@DPTR
   \   0001B6   FC           MOV     R4,A
   \   0001B7   A3           INC     DPTR
   \   0001B8   E0           MOVX    A,@DPTR
   \   0001B9   FD           MOV     R5,A
   \   0001BA   EC           MOV     A,R4
   \   0001BB   75F009       MOV     B,#0x9
   \   0001BE   A4           MUL     AB
   \   0001BF   CC           XCH     A,R4
   \   0001C0   AFF0         MOV     R7,B
   \   0001C2   75F000       MOV     B,#0x0
   \   0001C5   A4           MUL     AB
   \   0001C6   2F           ADD     A,R7
   \   0001C7   FF           MOV     R7,A
   \   0001C8   75F009       MOV     B,#0x9
   \   0001CB   ED           MOV     A,R5
   \   0001CC   A4           MUL     AB
   \   0001CD   2F           ADD     A,R7
   \   0001CE   FD           MOV     R5,A
   \   0001CF   74..         MOV     A,#(ApsLinkKeyFrmCntr + 247) & 0xff
   \   0001D1   2C           ADD     A,R4
   \   0001D2   F582         MOV     DPL,A
   \   0001D4   74..         MOV     A,#((ApsLinkKeyFrmCntr - 4617) >> 8) & 0xff
   \   0001D6   3D           ADDC    A,R5
   \   0001D7   F583         MOV     DPH,A
   \   0001D9   12....       LCALL   ?XSTORE_R0123
   2497          
   2498                      ApsLinkKeyFrmCntr[ZDSecMgrEntries[x].keyNvId - ZCD_NV_APS_LINK_KEY_DATA_START].rxFrmCntr =
   2499                                                      pApsLinkKey->rxFrmCntr;
   \   0001DC   E5..         MOV     A,?V0
   \   0001DE   2414         ADD     A,#0x14
   \   0001E0   F582         MOV     DPL,A
   \   0001E2   E4           CLR     A
   \   0001E3   35..         ADDC    A,?V1
   \   0001E5   F583         MOV     DPH,A
   \   0001E7   12....       LCALL   ?XLOAD_R0123
   \   0001EA   EE           MOV     A,R6
   \   0001EB   FC           MOV     R4,A
   \   0001EC   7D00         MOV     R5,#0x0
   \   0001EE   EC           MOV     A,R4
   \   0001EF   75F005       MOV     B,#0x5
   \   0001F2   A4           MUL     AB
   \   0001F3   CC           XCH     A,R4
   \   0001F4   AFF0         MOV     R7,B
   \   0001F6   75F000       MOV     B,#0x0
   \   0001F9   A4           MUL     AB
   \   0001FA   2F           ADD     A,R7
   \   0001FB   FF           MOV     R7,A
   \   0001FC   75F005       MOV     B,#0x5
   \   0001FF   ED           MOV     A,R5
   \   000200   A4           MUL     AB
   \   000201   2F           ADD     A,R7
   \   000202   FD           MOV     R5,A
   \   000203   90....       MOV     DPTR,#ZDSecMgrEntries
   \   000206   E0           MOVX    A,@DPTR
   \   000207   2C           ADD     A,R4
   \   000208   FF           MOV     R7,A
   \   000209   A3           INC     DPTR
   \   00020A   E0           MOVX    A,@DPTR
   \   00020B   3D           ADDC    A,R5
   \   00020C   8F82         MOV     DPL,R7
   \   00020E   F583         MOV     DPH,A
   \   000210   A3           INC     DPTR
   \   000211   A3           INC     DPTR
   \   000212   E0           MOVX    A,@DPTR
   \   000213   FC           MOV     R4,A
   \   000214   A3           INC     DPTR
   \   000215   E0           MOVX    A,@DPTR
   \   000216   FD           MOV     R5,A
   \   000217   EC           MOV     A,R4
   \   000218   75F009       MOV     B,#0x9
   \   00021B   A4           MUL     AB
   \   00021C   CC           XCH     A,R4
   \   00021D   AFF0         MOV     R7,B
   \   00021F   75F000       MOV     B,#0x0
   \   000222   A4           MUL     AB
   \   000223   2F           ADD     A,R7
   \   000224   FF           MOV     R7,A
   \   000225   75F009       MOV     B,#0x9
   \   000228   ED           MOV     A,R5
   \   000229   A4           MUL     AB
   \   00022A   2F           ADD     A,R7
   \   00022B   FD           MOV     R5,A
   \   00022C   74..         MOV     A,#(ApsLinkKeyFrmCntr + 251) & 0xff
   \   00022E   2C           ADD     A,R4
   \   00022F   F582         MOV     DPL,A
   \   000231   74..         MOV     A,#((ApsLinkKeyFrmCntr - 4613) >> 8) & 0xff
   \   000233   3D           ADDC    A,R5
   \   000234   F583         MOV     DPH,A
   \   000236   12....       LCALL   ?XSTORE_R0123
   2500          
   2501                      osal_nv_write( ZDSecMgrEntries[x].keyNvId, 0,
   2502                                    sizeof(APSME_LinkKeyData_t), pApsLinkKey );
   \   000239                ; Setup parameters for call to function osal_nv_write
   \   000239   78..         MOV     R0,#?V0
   \   00023B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00023E   75..18       MOV     ?V2,#0x18
   \   000241   75..00       MOV     ?V3,#0x0
   \   000244   78..         MOV     R0,#?V2
   \   000246   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000249   7C00         MOV     R4,#0x0
   \   00024B   7D00         MOV     R5,#0x0
   \   00024D   EE           MOV     A,R6
   \   00024E   F8           MOV     R0,A
   \   00024F   7900         MOV     R1,#0x0
   \   000251   E8           MOV     A,R0
   \   000252   75F005       MOV     B,#0x5
   \   000255   A4           MUL     AB
   \   000256   C8           XCH     A,R0
   \   000257   AAF0         MOV     R2,B
   \   000259   75F000       MOV     B,#0x0
   \   00025C   A4           MUL     AB
   \   00025D   2A           ADD     A,R2
   \   00025E   FA           MOV     R2,A
   \   00025F   75F005       MOV     B,#0x5
   \   000262   E9           MOV     A,R1
   \   000263   A4           MUL     AB
   \   000264   2A           ADD     A,R2
   \   000265   F9           MOV     R1,A
   \   000266   90....       MOV     DPTR,#ZDSecMgrEntries
   \   000269   E0           MOVX    A,@DPTR
   \   00026A   28           ADD     A,R0
   \   00026B   FA           MOV     R2,A
   \   00026C   A3           INC     DPTR
   \   00026D   E0           MOVX    A,@DPTR
   \   00026E   39           ADDC    A,R1
   \   00026F   8A82         MOV     DPL,R2
   \   000271   F583         MOV     DPH,A
   \   000273   A3           INC     DPTR
   \   000274   A3           INC     DPTR
   \   000275   E0           MOVX    A,@DPTR
   \   000276   FA           MOV     R2,A
   \   000277   A3           INC     DPTR
   \   000278   E0           MOVX    A,@DPTR
   \   000279   FB           MOV     R3,A
   \   00027A   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00027D   7404         MOV     A,#0x4
   \   00027F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000282   E9           MOV     A,R1
   2503          
   2504                      // clear copy of key in RAM
   2505                      osal_memset(pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t));
   \   000283                ; Setup parameters for call to function osal_memset
   \   000283   7C18         MOV     R4,#0x18
   \   000285   7D00         MOV     R5,#0x0
   \   000287   7900         MOV     R1,#0x0
   \   000289   AA..         MOV     R2,?V0
   \   00028B   AB..         MOV     R3,?V1
   \   00028D   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2506                    }
   2507                  }
   2508                }
   2509              }
   \                     ??ZDSecMgrRestoreFromNV_3:
   \   000290   0E           INC     R6
   \                     ??ZDSecMgrRestoreFromNV_1:
   \   000291   EE           MOV     A,R6
   \   000292   C3           CLR     C
   \   000293   9403         SUBB    A,#0x3
   \   000295   5003         JNC     $+5
   \   000297   02....       LJMP    ??ZDSecMgrRestoreFromNV_2 & 0xFFFF
   2510          
   2511              if (pApsLinkKey != NULL)
   \   00029A   E5..         MOV     A,?V0
   \   00029C   45..         ORL     A,?V1
   \   00029E   6007         JZ      ??ZDSecMgrRestoreFromNV_0
   2512              {
   2513                osal_mem_free(pApsLinkKey);
   \   0002A0                ; Setup parameters for call to function osal_mem_free
   \   0002A0   AA..         MOV     R2,?V0
   \   0002A2   AB..         MOV     R3,?V1
   \   0002A4   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2514              }
   2515            }
   2516          
   2517            osal_nv_read( ZCD_NV_TRUSTCENTER_ADDR, 0, Z_EXTADDR_LEN, zgApsTrustCenterAddr );
   \                     ??ZDSecMgrRestoreFromNV_0:
   \   0002A7                ; Setup parameters for call to function osal_nv_read
   \   0002A7   75....       MOV     ?V0,#zgApsTrustCenterAddr & 0xff
   \   0002AA   75....       MOV     ?V1,#(zgApsTrustCenterAddr >> 8) & 0xff
   \   0002AD   78..         MOV     R0,#?V0
   \   0002AF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002B2   75..08       MOV     ?V0,#0x8
   \   0002B5   75..00       MOV     ?V1,#0x0
   \   0002B8   78..         MOV     R0,#?V0
   \   0002BA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002BD   7C00         MOV     R4,#0x0
   \   0002BF   7D00         MOV     R5,#0x0
   \   0002C1   7A71         MOV     R2,#0x71
   \   0002C3   7B00         MOV     R3,#0x0
   \   0002C5   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   0002C8   7404         MOV     A,#0x4
   \   0002CA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002CD   E9           MOV     A,R1
   2518          }
   \   0002CE   7402         MOV     A,#0x2
   \   0002D0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002D3   7F08         MOV     R7,#0x8
   \   0002D5   02....       LJMP    ?BANKED_LEAVE_XDATA
   2519          #endif // NV_RESTORE
   2520          
   2521          /*********************************************************************
   2522           * @fn          ZDSecMgrSetDefaultNV
   2523           *
   2524           * @brief       Write the defaults to NV for Entry table and for APS key data table
   2525           *
   2526           * @param       none
   2527           *
   2528           * @return      none
   2529           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2530          void ZDSecMgrSetDefaultNV( void )
   \                     ZDSecMgrSetDefaultNV:
   2531          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV     A,#-0x7
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   2532            uint16 i;
   2533            nvDeviceListHdr_t hdr;
   2534            ZDSecMgrEntry_t secMgrEntry;
   2535            APSME_LinkKeyData_t *pApsLinkKey = NULL;
   \   00000A   75..00       MOV     ?V0,#0x0
   \   00000D   75..00       MOV     ?V1,#0x0
   2536          
   2537            // Initialize the header
   2538            hdr.numRecs = 0;
   \   000010   85..82       MOV     DPL,?XSP + 0
   \   000013   85..83       MOV     DPH,?XSP + 1
   \   000016   7400         MOV     A,#0x0
   \   000018   F0           MOVX    @DPTR,A
   \   000019   A3           INC     DPTR
   \   00001A   7400         MOV     A,#0x0
   \   00001C   F0           MOVX    @DPTR,A
   2539          
   2540            // clear the header
   2541            osal_nv_write(ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof(nvDeviceListHdr_t), &hdr);
   \   00001D                ; Setup parameters for call to function osal_nv_write
   \   00001D   A8..         MOV     R0,?XSP + 0
   \   00001F   A9..         MOV     R1,?XSP + 1
   \   000021   88..         MOV     ?V2,R0
   \   000023   89..         MOV     ?V3,R1
   \   000025   78..         MOV     R0,#?V2
   \   000027   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002A   75..02       MOV     ?V2,#0x2
   \   00002D   75..00       MOV     ?V3,#0x0
   \   000030   78..         MOV     R0,#?V2
   \   000032   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000035   7C00         MOV     R4,#0x0
   \   000037   7D00         MOV     R5,#0x0
   \   000039   7A4C         MOV     R2,#0x4c
   \   00003B   7B00         MOV     R3,#0x0
   \   00003D   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000040   7404         MOV     A,#0x4
   \   000042   12....       LCALL   ?DEALLOC_XSTACK8
   \   000045   E9           MOV     A,R1
   2542          
   2543            osal_memset( &secMgrEntry, 0x00, sizeof(ZDSecMgrEntry_t) );
   \   000046                ; Setup parameters for call to function osal_memset
   \   000046   7C05         MOV     R4,#0x5
   \   000048   7D00         MOV     R5,#0x0
   \   00004A   7900         MOV     R1,#0x0
   \   00004C   7402         MOV     A,#0x2
   \   00004E   12....       LCALL   ?XSTACK_DISP101_8
   \   000051   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2544          
   2545            for ( i = 0; i < ZDSECMGR_ENTRY_MAX; i++ )
   \   000054   7E00         MOV     R6,#0x0
   \   000056   7F00         MOV     R7,#0x0
   \   000058   804B         SJMP    ??ZDSecMgrSetDefaultNV_0
   2546            {
   2547              // Clear the record
   2548              osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE,
   2549                          (uint16)((sizeof(nvDeviceListHdr_t)) + (i * sizeof(ZDSecMgrEntry_t))),
   2550                                  sizeof(ZDSecMgrEntry_t), &secMgrEntry );
   \                     ??ZDSecMgrSetDefaultNV_1:
   \   00005A                ; Setup parameters for call to function osal_nv_write
   \   00005A   7402         MOV     A,#0x2
   \   00005C   12....       LCALL   ?XSTACK_DISP100_8
   \   00005F   88..         MOV     ?V0,R0
   \   000061   89..         MOV     ?V1,R1
   \   000063   78..         MOV     R0,#?V0
   \   000065   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000068   75..05       MOV     ?V0,#0x5
   \   00006B   75..00       MOV     ?V1,#0x0
   \   00006E   78..         MOV     R0,#?V0
   \   000070   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000073   EE           MOV     A,R6
   \   000074   F8           MOV     R0,A
   \   000075   EF           MOV     A,R7
   \   000076   F9           MOV     R1,A
   \   000077   E8           MOV     A,R0
   \   000078   75F005       MOV     B,#0x5
   \   00007B   A4           MUL     AB
   \   00007C   C8           XCH     A,R0
   \   00007D   AAF0         MOV     R2,B
   \   00007F   75F000       MOV     B,#0x0
   \   000082   A4           MUL     AB
   \   000083   2A           ADD     A,R2
   \   000084   FA           MOV     R2,A
   \   000085   75F005       MOV     B,#0x5
   \   000088   E9           MOV     A,R1
   \   000089   A4           MUL     AB
   \   00008A   2A           ADD     A,R2
   \   00008B   F9           MOV     R1,A
   \   00008C   E8           MOV     A,R0
   \   00008D   2402         ADD     A,#0x2
   \   00008F   FC           MOV     R4,A
   \   000090   E4           CLR     A
   \   000091   39           ADDC    A,R1
   \   000092   FD           MOV     R5,A
   \   000093   7A4C         MOV     R2,#0x4c
   \   000095   7B00         MOV     R3,#0x0
   \   000097   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00009A   7404         MOV     A,#0x4
   \   00009C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00009F   E9           MOV     A,R1
   2551            }
   \   0000A0   0E           INC     R6
   \   0000A1   EE           MOV     A,R6
   \   0000A2   7001         JNZ     ??ZDSecMgrSetDefaultNV_0
   \   0000A4   0F           INC     R7
   \                     ??ZDSecMgrSetDefaultNV_0:
   \   0000A5   C3           CLR     C
   \   0000A6   EE           MOV     A,R6
   \   0000A7   9403         SUBB    A,#0x3
   \   0000A9   EF           MOV     A,R7
   \   0000AA   9400         SUBB    A,#0x0
   \   0000AC   40AC         JC      ??ZDSecMgrSetDefaultNV_1
   2552          
   2553            pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
   \   0000AE                ; Setup parameters for call to function osal_mem_alloc
   \   0000AE   7A18         MOV     R2,#0x18
   \   0000B0   7B00         MOV     R3,#0x0
   \   0000B2   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000B5   8A..         MOV     ?V2,R2
   \   0000B7   8B..         MOV     ?V3,R3
   \   0000B9   85....       MOV     ?V0,?V2
   \   0000BC   85....       MOV     ?V1,?V3
   2554          
   2555            if (pApsLinkKey != NULL)
   \   0000BF   E5..         MOV     A,?V0
   \   0000C1   45..         ORL     A,?V1
   \   0000C3   604D         JZ      ??ZDSecMgrSetDefaultNV_2
   2556            {
   2557              osal_memset( pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t) );
   \   0000C5                ; Setup parameters for call to function osal_memset
   \   0000C5   7C18         MOV     R4,#0x18
   \   0000C7   7D00         MOV     R5,#0x0
   \   0000C9   7900         MOV     R1,#0x0
   \   0000CB   AA..         MOV     R2,?V0
   \   0000CD   AB..         MOV     R3,?V1
   \   0000CF   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2558          
   2559              for ( i = 0; i < ZDSECMGR_ENTRY_MAX; i++ )
   \   0000D2   7E00         MOV     R6,#0x0
   \   0000D4   7F00         MOV     R7,#0x0
   \   0000D6   802A         SJMP    ??ZDSecMgrSetDefaultNV_3
   2560              {
   2561                // Clear the record
   2562                osal_nv_write( (ZCD_NV_APS_LINK_KEY_DATA_START + i), 0,
   2563                              sizeof(APSME_LinkKeyData_t), pApsLinkKey);
   \                     ??ZDSecMgrSetDefaultNV_4:
   \   0000D8                ; Setup parameters for call to function osal_nv_write
   \   0000D8   78..         MOV     R0,#?V0
   \   0000DA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000DD   75..18       MOV     ?V2,#0x18
   \   0000E0   75..00       MOV     ?V3,#0x0
   \   0000E3   78..         MOV     R0,#?V2
   \   0000E5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E8   7C00         MOV     R4,#0x0
   \   0000EA   7D00         MOV     R5,#0x0
   \   0000EC   EE           MOV     A,R6
   \   0000ED   2401         ADD     A,#0x1
   \   0000EF   FA           MOV     R2,A
   \   0000F0   EF           MOV     A,R7
   \   0000F1   3402         ADDC    A,#0x2
   \   0000F3   FB           MOV     R3,A
   \   0000F4   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000F7   7404         MOV     A,#0x4
   \   0000F9   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000FC   E9           MOV     A,R1
   2564              }
   \   0000FD   0E           INC     R6
   \   0000FE   EE           MOV     A,R6
   \   0000FF   7001         JNZ     ??ZDSecMgrSetDefaultNV_3
   \   000101   0F           INC     R7
   \                     ??ZDSecMgrSetDefaultNV_3:
   \   000102   C3           CLR     C
   \   000103   EE           MOV     A,R6
   \   000104   9403         SUBB    A,#0x3
   \   000106   EF           MOV     A,R7
   \   000107   9400         SUBB    A,#0x0
   \   000109   40CD         JC      ??ZDSecMgrSetDefaultNV_4
   2565          
   2566              osal_mem_free(pApsLinkKey);
   \   00010B                ; Setup parameters for call to function osal_mem_free
   \   00010B   AA..         MOV     R2,?V0
   \   00010D   AB..         MOV     R3,?V1
   \   00010F   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2567            }
   2568          }
   \                     ??ZDSecMgrSetDefaultNV_2:
   \   000112   7407         MOV     A,#0x7
   \   000114   12....       LCALL   ?DEALLOC_XSTACK8
   \   000117   7F04         MOV     R7,#0x4
   \   000119   02....       LJMP    ?BANKED_LEAVE_XDATA
   2569          
   2570          #if defined ( NV_RESTORE )
   2571          /*********************************************************************
   2572           * @fn      ZDSecMgrUpdateNV()
   2573           *
   2574           * @brief   Updates one entry of the APS link key table to NV
   2575           *
   2576           * @param   index - to the entry in security manager table
   2577           *
   2578           * @return  none
   2579           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2580          static void ZDSecMgrUpdateNV( uint16 index )
   \                     ZDSecMgrUpdateNV:
   2581          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   2582            nvDeviceListHdr_t hdr;
   2583          
   2584            if (ZDSecMgrEntries != NULL)
   \   00000E   90....       MOV     DPTR,#ZDSecMgrEntries
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F8           MOV     R0,A
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F9           MOV     R1,A
   \   000016   E8           MOV     A,R0
   \   000017   49           ORL     A,R1
   \   000018   6062         JZ      ??ZDSecMgrUpdateNV_0
   2585            {
   2586              // Save off the record
   2587              osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE,
   2588                             (uint16)((sizeof(nvDeviceListHdr_t)) + (index * sizeof(ZDSecMgrEntry_t))),
   2589                             sizeof(ZDSecMgrEntry_t), &ZDSecMgrEntries[index] );
   \   00001A                ; Setup parameters for call to function osal_nv_write
   \   00001A   EE           MOV     A,R6
   \   00001B   F8           MOV     R0,A
   \   00001C   EF           MOV     A,R7
   \   00001D   F9           MOV     R1,A
   \   00001E   E8           MOV     A,R0
   \   00001F   75F005       MOV     B,#0x5
   \   000022   A4           MUL     AB
   \   000023   C8           XCH     A,R0
   \   000024   AAF0         MOV     R2,B
   \   000026   75F000       MOV     B,#0x0
   \   000029   A4           MUL     AB
   \   00002A   2A           ADD     A,R2
   \   00002B   FA           MOV     R2,A
   \   00002C   75F005       MOV     B,#0x5
   \   00002F   E9           MOV     A,R1
   \   000030   A4           MUL     AB
   \   000031   2A           ADD     A,R2
   \   000032   F9           MOV     R1,A
   \   000033   90....       MOV     DPTR,#ZDSecMgrEntries
   \   000036   E0           MOVX    A,@DPTR
   \   000037   28           ADD     A,R0
   \   000038   F5..         MOV     ?V0,A
   \   00003A   A3           INC     DPTR
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   39           ADDC    A,R1
   \   00003D   F5..         MOV     ?V1,A
   \   00003F   78..         MOV     R0,#?V0
   \   000041   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000044   75..05       MOV     ?V0,#0x5
   \   000047   75..00       MOV     ?V1,#0x0
   \   00004A   78..         MOV     R0,#?V0
   \   00004C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004F   EE           MOV     A,R6
   \   000050   F8           MOV     R0,A
   \   000051   EF           MOV     A,R7
   \   000052   F9           MOV     R1,A
   \   000053   E8           MOV     A,R0
   \   000054   75F005       MOV     B,#0x5
   \   000057   A4           MUL     AB
   \   000058   C8           XCH     A,R0
   \   000059   AAF0         MOV     R2,B
   \   00005B   75F000       MOV     B,#0x0
   \   00005E   A4           MUL     AB
   \   00005F   2A           ADD     A,R2
   \   000060   FA           MOV     R2,A
   \   000061   75F005       MOV     B,#0x5
   \   000064   E9           MOV     A,R1
   \   000065   A4           MUL     AB
   \   000066   2A           ADD     A,R2
   \   000067   F9           MOV     R1,A
   \   000068   E8           MOV     A,R0
   \   000069   2402         ADD     A,#0x2
   \   00006B   FC           MOV     R4,A
   \   00006C   E4           CLR     A
   \   00006D   39           ADDC    A,R1
   \   00006E   FD           MOV     R5,A
   \   00006F   7A4C         MOV     R2,#0x4c
   \   000071   7B00         MOV     R3,#0x0
   \   000073   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000076   7404         MOV     A,#0x4
   \   000078   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007B   E9           MOV     A,R1
   2590            }
   2591          
   2592            if (osal_nv_read(ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof(nvDeviceListHdr_t), &hdr) == ZSUCCESS)
   \                     ??ZDSecMgrUpdateNV_0:
   \   00007C                ; Setup parameters for call to function osal_nv_read
   \   00007C   A8..         MOV     R0,?XSP + 0
   \   00007E   A9..         MOV     R1,?XSP + 1
   \   000080   88..         MOV     ?V0,R0
   \   000082   89..         MOV     ?V1,R1
   \   000084   78..         MOV     R0,#?V0
   \   000086   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000089   75..02       MOV     ?V0,#0x2
   \   00008C   75..00       MOV     ?V1,#0x0
   \   00008F   78..         MOV     R0,#?V0
   \   000091   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000094   7C00         MOV     R4,#0x0
   \   000096   7D00         MOV     R5,#0x0
   \   000098   7A4C         MOV     R2,#0x4c
   \   00009A   7B00         MOV     R3,#0x0
   \   00009C   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00009F   7404         MOV     A,#0x4
   \   0000A1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A4   E9           MOV     A,R1
   \   0000A5   6003         JZ      $+5
   \   0000A7   02....       LJMP    ??ZDSecMgrUpdateNV_1 & 0xFFFF
   2593            {
   2594              if ( ZDSecMgrEntries[index].ami == INVALID_NODE_ADDR )
   \   0000AA   EE           MOV     A,R6
   \   0000AB   75F005       MOV     B,#0x5
   \   0000AE   A4           MUL     AB
   \   0000AF   CE           XCH     A,R6
   \   0000B0   A8F0         MOV     R0,B
   \   0000B2   75F000       MOV     B,#0x0
   \   0000B5   A4           MUL     AB
   \   0000B6   28           ADD     A,R0
   \   0000B7   F8           MOV     R0,A
   \   0000B8   75F005       MOV     B,#0x5
   \   0000BB   EF           MOV     A,R7
   \   0000BC   A4           MUL     AB
   \   0000BD   28           ADD     A,R0
   \   0000BE   FF           MOV     R7,A
   \   0000BF   90....       MOV     DPTR,#ZDSecMgrEntries
   \   0000C2   E0           MOVX    A,@DPTR
   \   0000C3   2E           ADD     A,R6
   \   0000C4   F8           MOV     R0,A
   \   0000C5   A3           INC     DPTR
   \   0000C6   E0           MOVX    A,@DPTR
   \   0000C7   3F           ADDC    A,R7
   \   0000C8   8882         MOV     DPL,R0
   \   0000CA   F583         MOV     DPH,A
   \   0000CC   E0           MOVX    A,@DPTR
   \   0000CD   64FE         XRL     A,#0xfe
   \   0000CF   7004         JNZ     ??ZDSecMgrUpdateNV_2
   \   0000D1   A3           INC     DPTR
   \   0000D2   E0           MOVX    A,@DPTR
   \   0000D3   64FF         XRL     A,#0xff
   \                     ??ZDSecMgrUpdateNV_2:
   \   0000D5   7020         JNZ     ??ZDSecMgrUpdateNV_3
   2595              {
   2596                if (hdr.numRecs > 0)
   \   0000D7   85..82       MOV     DPL,?XSP + 0
   \   0000DA   85..83       MOV     DPH,?XSP + 1
   \   0000DD   E0           MOVX    A,@DPTR
   \   0000DE   F8           MOV     R0,A
   \   0000DF   A3           INC     DPTR
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   F9           MOV     R1,A
   \   0000E2   E8           MOV     A,R0
   \   0000E3   49           ORL     A,R1
   \   0000E4   6020         JZ      ??ZDSecMgrUpdateNV_4
   2597                {
   2598                  hdr.numRecs--;
   \   0000E6   85..82       MOV     DPL,?XSP + 0
   \   0000E9   85..83       MOV     DPH,?XSP + 1
   \   0000EC   E0           MOVX    A,@DPTR
   \   0000ED   24FF         ADD     A,#-0x1
   \   0000EF   F0           MOVX    @DPTR,A
   \   0000F0   A3           INC     DPTR
   \   0000F1   E0           MOVX    A,@DPTR
   \   0000F2   34FF         ADDC    A,#-0x1
   \   0000F4   F0           MOVX    @DPTR,A
   \   0000F5   800F         SJMP    ??ZDSecMgrUpdateNV_4
   2599                }
   2600              }
   2601              else
   2602              {
   2603                hdr.numRecs++;
   \                     ??ZDSecMgrUpdateNV_3:
   \   0000F7   85..82       MOV     DPL,?XSP + 0
   \   0000FA   85..83       MOV     DPH,?XSP + 1
   \   0000FD   E0           MOVX    A,@DPTR
   \   0000FE   2401         ADD     A,#0x1
   \   000100   F0           MOVX    @DPTR,A
   \   000101   A3           INC     DPTR
   \   000102   E0           MOVX    A,@DPTR
   \   000103   3400         ADDC    A,#0x0
   \   000105   F0           MOVX    @DPTR,A
   2604              }
   2605          
   2606              // Save off the header
   2607              osal_nv_write( ZCD_NV_APS_LINK_KEY_TABLE, 0, sizeof( nvDeviceListHdr_t ), &hdr );
   \                     ??ZDSecMgrUpdateNV_4:
   \   000106                ; Setup parameters for call to function osal_nv_write
   \   000106   A8..         MOV     R0,?XSP + 0
   \   000108   A9..         MOV     R1,?XSP + 1
   \   00010A   88..         MOV     ?V0,R0
   \   00010C   89..         MOV     ?V1,R1
   \   00010E   78..         MOV     R0,#?V0
   \   000110   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000113   75..02       MOV     ?V0,#0x2
   \   000116   75..00       MOV     ?V1,#0x0
   \   000119   78..         MOV     R0,#?V0
   \   00011B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00011E   7C00         MOV     R4,#0x0
   \   000120   7D00         MOV     R5,#0x0
   \   000122   7A4C         MOV     R2,#0x4c
   \   000124   7B00         MOV     R3,#0x0
   \   000126   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000129   7404         MOV     A,#0x4
   \   00012B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00012E   E9           MOV     A,R1
   2608            }
   2609          }
   \                     ??ZDSecMgrUpdateNV_1:
   \   00012F   7402         MOV     A,#0x2
   \   000131   12....       LCALL   ?DEALLOC_XSTACK8
   \   000134   7F02         MOV     R7,#0x2
   \   000136   02....       LJMP    ?BANKED_LEAVE_XDATA
   2610          #endif // NV_RESTORE
   2611          
   2612          /******************************************************************************
   2613           * @fn          ZDSecMgrAPSRemove
   2614           *
   2615           * @brief       Remove device from network.
   2616           *
   2617           * @param       nwkAddr - device's NWK address
   2618           * @param       extAddr - device's Extended address
   2619           * @param       parentAddr - parent's NWK address
   2620           *
   2621           * @return      ZStatus_t
   2622           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2623          ZStatus_t ZDSecMgrAPSRemove( uint16 nwkAddr, uint8 *extAddr, uint16 parentAddr )
   \                     ZDSecMgrAPSRemove:
   2624          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 8
   \   000004   74F8         MOV     A,#-0x8
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   2625            ZDSecMgrDevice_t device;
   2626          
   2627            if ( ( nwkAddr == INVALID_NODE_ADDR ) ||
   2628                 ( extAddr == NULL )              ||
   2629                 ( parentAddr == INVALID_NODE_ADDR ) )
   \   000009   74FE         MOV     A,#-0x2
   \   00000B   6A           XRL     A,R2
   \   00000C   7003         JNZ     ??ZDSecMgrAPSRemove_0
   \   00000E   74FF         MOV     A,#-0x1
   \   000010   6B           XRL     A,R3
   \                     ??ZDSecMgrAPSRemove_0:
   \   000011   6018         JZ      ??ZDSecMgrAPSRemove_1
   \   000013   EC           MOV     A,R4
   \   000014   4D           ORL     A,R5
   \   000015   6014         JZ      ??ZDSecMgrAPSRemove_1
   \   000017   7408         MOV     A,#0x8
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F8           MOV     R0,A
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F9           MOV     R1,A
   \   000021   74FE         MOV     A,#-0x2
   \   000023   68           XRL     A,R0
   \   000024   7003         JNZ     ??ZDSecMgrAPSRemove_2
   \   000026   74FF         MOV     A,#-0x1
   \   000028   69           XRL     A,R1
   \                     ??ZDSecMgrAPSRemove_2:
   \   000029   7004         JNZ     ??ZDSecMgrAPSRemove_3
   2630            {
   2631              return ( ZFailure );
   \                     ??ZDSecMgrAPSRemove_1:
   \   00002B   7901         MOV     R1,#0x1
   \   00002D   8028         SJMP    ??ZDSecMgrAPSRemove_4
   2632            }
   2633          
   2634            device.nwkAddr = nwkAddr;
   \                     ??ZDSecMgrAPSRemove_3:
   \   00002F   85..82       MOV     DPL,?XSP + 0
   \   000032   85..83       MOV     DPH,?XSP + 1
   \   000035   EA           MOV     A,R2
   \   000036   F0           MOVX    @DPTR,A
   \   000037   A3           INC     DPTR
   \   000038   EB           MOV     A,R3
   \   000039   F0           MOVX    @DPTR,A
   2635            device.extAddr = extAddr;
   \   00003A   7402         MOV     A,#0x2
   \   00003C   12....       LCALL   ?XSTACK_DISP0_8
   \   00003F   EC           MOV     A,R4
   \   000040   F0           MOVX    @DPTR,A
   \   000041   A3           INC     DPTR
   \   000042   ED           MOV     A,R5
   \   000043   F0           MOVX    @DPTR,A
   2636            device.parentAddr = parentAddr;
   \   000044   7404         MOV     A,#0x4
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   E8           MOV     A,R0
   \   00004A   F0           MOVX    @DPTR,A
   \   00004B   A3           INC     DPTR
   \   00004C   E9           MOV     A,R1
   \   00004D   F0           MOVX    @DPTR,A
   2637          
   2638            // remove device
   2639            ZDSecMgrDeviceRemove( &device );
   \   00004E                ; Setup parameters for call to function ZDSecMgrDeviceRemove
   \   00004E   AA..         MOV     R2,?XSP + 0
   \   000050   AB..         MOV     R3,?XSP + 1
   \   000052   12....       LCALL   `??ZDSecMgrDeviceRemove::?relay`; Banked call to: ZDSecMgrDeviceRemove
   2640          
   2641            return ( ZSuccess );
   \   000055   7900         MOV     R1,#0x0
   \                     ??ZDSecMgrAPSRemove_4:
   \   000057   7408         MOV     A,#0x8
   \   000059   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005C   D083         POP     DPH
   \   00005E   D082         POP     DPL
   \   000060   02....       LJMP    ?BRET
   2642          }
   2643          
   2644          /******************************************************************************
   2645           * @fn          APSME_TCLinkKeyInit
   2646           *
   2647           * @brief       Initialize the NV table for preconfigured TC link key
   2648           *
   2649           *              When zgUseDefaultTCL is set to TRUE, the default preconfig
   2650           *              Trust Center Link Key is written to NV. A single tclk is used
   2651           *              by all devices joining the network.
   2652           *
   2653           * @param       setDefault - TRUE to set default values
   2654           *
   2655           * @return      none
   2656           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2657          void APSME_TCLinkKeyInit(uint8 setDefault)
   \                     APSME_TCLinkKeyInit:
   2658          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 32
   \   000005   74E0         MOV     A,#-0x20
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FF           MOV     R7,A
   2659            uint8             i;
   2660            APSME_TCLinkKey_t tcLinkKey;
   2661            uint8             rtrn;
   2662          
   2663            // Initialize all NV items for preconfigured TCLK
   2664            for( i = 0; i < ZDSECMGR_TC_DEVICE_MAX; i++ )
   \   00000C   7E00         MOV     R6,#0x0
   \   00000E   02....       LJMP    ??APSME_TCLinkKeyInit_0 & 0xFFFF
   2665            {
   2666              // Making sure data is cleared for every key all the time
   2667              osal_memset( &tcLinkKey, 0x00, sizeof(APSME_TCLinkKey_t) );
   2668          
   2669              // Initialize first element of the table with the default TCLK
   2670              if((i == 0) && ( zgUseDefaultTCLK == TRUE ))
   2671              {
   2672                osal_memset( tcLinkKey.extAddr, 0xFF, Z_EXTADDR_LEN );
   2673                osal_memcpy( tcLinkKey.key, defaultTCLinkKey, SEC_KEY_LEN);
   2674              }
   2675          
   2676              // If the item doesn't exist in NV memory, create and initialize
   2677              // it with the default value passed in, either defaultTCLK or 0
   2678              rtrn = osal_nv_item_init( (ZCD_NV_TCLK_TABLE_START + i),
   2679                                         sizeof(APSME_TCLinkKey_t), &tcLinkKey);
   2680          
   2681              if (rtrn == SUCCESS)
   2682              {
   2683                // set the Frame counters to 0 to existing keys in NV
   2684                osal_nv_read( ( ZCD_NV_TCLK_TABLE_START + i), 0,
   2685                               sizeof(APSME_TCLinkKey_t), &tcLinkKey );
   2686          
   2687          #if defined ( NV_RESTORE )
   2688                if (setDefault == TRUE)
   2689                {
   2690                  // clear the value stored in NV
   2691                  tcLinkKey.txFrmCntr = 0;
   2692                }
   2693                else
   2694                {
   2695                  // increase the value stored in NV
   2696                  tcLinkKey.txFrmCntr += ( MAX_TCLK_FRAMECOUNTER_CHANGES + 1 );
   \                     ??APSME_TCLinkKeyInit_1:
   \   000011   90....       MOV     DPTR,#__Constant_b
   \   000014   78..         MOV     R0,#?V0
   \   000016   12....       LCALL   ?L_MOV_X
   \   000019   7418         MOV     A,#0x18
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   78..         MOV     R0,#?V0
   \   000020   12....       LCALL   ?L_ADD_TO_X
   2697                }
   2698          #else
   2699                // Clear the counters if NV_RESTORE is not enabled and this NV item
   2700                // already existed in the NV memory
   2701                tcLinkKey.txFrmCntr = 0;
   2702                tcLinkKey.rxFrmCntr = 0;
   2703          #endif  // NV_RESTORE
   2704          
   2705                osal_nv_write( ( ZCD_NV_TCLK_TABLE_START + i), 0,
   2706                                sizeof(APSME_TCLinkKey_t), &tcLinkKey );
   \                     ??APSME_TCLinkKeyInit_2:
   \   000023                ; Setup parameters for call to function osal_nv_write
   \   000023   A8..         MOV     R0,?XSP + 0
   \   000025   A9..         MOV     R1,?XSP + 1
   \   000027   88..         MOV     ?V0,R0
   \   000029   89..         MOV     ?V1,R1
   \   00002B   78..         MOV     R0,#?V0
   \   00002D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000030   75..20       MOV     ?V0,#0x20
   \   000033   75..00       MOV     ?V1,#0x0
   \   000036   78..         MOV     R0,#?V0
   \   000038   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003B   7C00         MOV     R4,#0x0
   \   00003D   7D00         MOV     R5,#0x0
   \   00003F   EE           MOV     A,R6
   \   000040   F8           MOV     R0,A
   \   000041   7900         MOV     R1,#0x0
   \   000043   E8           MOV     A,R0
   \   000044   2401         ADD     A,#0x1
   \   000046   FA           MOV     R2,A
   \   000047   E9           MOV     A,R1
   \   000048   3401         ADDC    A,#0x1
   \   00004A   FB           MOV     R3,A
   \   00004B   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00004E   7404         MOV     A,#0x4
   \   000050   12....       LCALL   ?DEALLOC_XSTACK8
   \   000053   E9           MOV     A,R1
   2707          
   2708                // set initial values for counters in RAM
   2709                TCLinkKeyFrmCntr[i].txFrmCntr = tcLinkKey.txFrmCntr;
   \   000054   7418         MOV     A,#0x18
   \   000056   12....       LCALL   ?XSTACK_DISP0_8
   \   000059   12....       LCALL   ?XLOAD_R0123
   \   00005C   EE           MOV     A,R6
   \   00005D   FC           MOV     R4,A
   \   00005E   7D00         MOV     R5,#0x0
   \   000060   EC           MOV     A,R4
   \   000061   75F009       MOV     B,#0x9
   \   000064   A4           MUL     AB
   \   000065   CC           XCH     A,R4
   \   000066   85F0..       MOV     ?V0,B
   \   000069   75F000       MOV     B,#0x0
   \   00006C   A4           MUL     AB
   \   00006D   25..         ADD     A,?V0
   \   00006F   F5..         MOV     ?V0,A
   \   000071   75F009       MOV     B,#0x9
   \   000074   ED           MOV     A,R5
   \   000075   A4           MUL     AB
   \   000076   25..         ADD     A,?V0
   \   000078   FD           MOV     R5,A
   \   000079   74..         MOV     A,#TCLinkKeyFrmCntr & 0xff
   \   00007B   2C           ADD     A,R4
   \   00007C   F582         MOV     DPL,A
   \   00007E   74..         MOV     A,#(TCLinkKeyFrmCntr >> 8) & 0xff
   \   000080   3D           ADDC    A,R5
   \   000081   F583         MOV     DPH,A
   \   000083   12....       LCALL   ?XSTORE_R0123
   2710                TCLinkKeyFrmCntr[i].rxFrmCntr = tcLinkKey.rxFrmCntr;
   \   000086   741C         MOV     A,#0x1c
   \   000088   12....       LCALL   ?XSTACK_DISP0_8
   \   00008B   12....       LCALL   ?XLOAD_R0123
   \   00008E   EE           MOV     A,R6
   \   00008F   FC           MOV     R4,A
   \   000090   7D00         MOV     R5,#0x0
   \   000092   EC           MOV     A,R4
   \   000093   75F009       MOV     B,#0x9
   \   000096   A4           MUL     AB
   \   000097   CC           XCH     A,R4
   \   000098   85F0..       MOV     ?V0,B
   \   00009B   75F000       MOV     B,#0x0
   \   00009E   A4           MUL     AB
   \   00009F   25..         ADD     A,?V0
   \   0000A1   F5..         MOV     ?V0,A
   \   0000A3   75F009       MOV     B,#0x9
   \   0000A6   ED           MOV     A,R5
   \   0000A7   A4           MUL     AB
   \   0000A8   25..         ADD     A,?V0
   \   0000AA   FD           MOV     R5,A
   \   0000AB   74..         MOV     A,#(TCLinkKeyFrmCntr + 4) & 0xff
   \   0000AD   2C           ADD     A,R4
   \   0000AE   F582         MOV     DPL,A
   \   0000B0   74..         MOV     A,#((TCLinkKeyFrmCntr + 4) >> 8) & 0xff
   \   0000B2   3D           ADDC    A,R5
   \   0000B3   F583         MOV     DPH,A
   \   0000B5   12....       LCALL   ?XSTORE_R0123
   \                     ??APSME_TCLinkKeyInit_3:
   \   0000B8   0E           INC     R6
   \                     ??APSME_TCLinkKeyInit_0:
   \   0000B9   EE           MOV     A,R6
   \   0000BA   6003         JZ      $+5
   \   0000BC   02....       LJMP    ??APSME_TCLinkKeyInit_4 & 0xFFFF
   \   0000BF                ; Setup parameters for call to function osal_memset
   \   0000BF   7C20         MOV     R4,#0x20
   \   0000C1   7D00         MOV     R5,#0x0
   \   0000C3   7900         MOV     R1,#0x0
   \   0000C5   AA..         MOV     R2,?XSP + 0
   \   0000C7   AB..         MOV     R3,?XSP + 1
   \   0000C9   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   \   0000CC   EE           MOV     A,R6
   \   0000CD   7038         JNZ     ??APSME_TCLinkKeyInit_5
   \   0000CF   90....       MOV     DPTR,#zgUseDefaultTCLK
   \   0000D2   E0           MOVX    A,@DPTR
   \   0000D3   6401         XRL     A,#0x1
   \   0000D5   7030         JNZ     ??APSME_TCLinkKeyInit_5
   \   0000D7                ; Setup parameters for call to function osal_memset
   \   0000D7   7C08         MOV     R4,#0x8
   \   0000D9   7D00         MOV     R5,#0x0
   \   0000DB   79FF         MOV     R1,#-0x1
   \   0000DD   AA..         MOV     R2,?XSP + 0
   \   0000DF   AB..         MOV     R3,?XSP + 1
   \   0000E1   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   \   0000E4                ; Setup parameters for call to function osal_memcpy
   \   0000E4   75....       MOV     ?V0,#defaultTCLinkKey & 0xff
   \   0000E7   75....       MOV     ?V1,#(defaultTCLinkKey >> 8) & 0xff
   \   0000EA   75..80       MOV     ?V2,#-0x80
   \   0000ED   78..         MOV     R0,#?V0
   \   0000EF   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000F2   7C10         MOV     R4,#0x10
   \   0000F4   7D00         MOV     R5,#0x0
   \   0000F6   740B         MOV     A,#0xb
   \   0000F8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FB   AA82         MOV     R2,DPL
   \   0000FD   AB83         MOV     R3,DPH
   \   0000FF   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000102   7403         MOV     A,#0x3
   \   000104   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??APSME_TCLinkKeyInit_5:
   \   000107                ; Setup parameters for call to function osal_nv_item_init
   \   000107   A8..         MOV     R0,?XSP + 0
   \   000109   A9..         MOV     R1,?XSP + 1
   \   00010B   88..         MOV     ?V0,R0
   \   00010D   89..         MOV     ?V1,R1
   \   00010F   78..         MOV     R0,#?V0
   \   000111   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000114   7C20         MOV     R4,#0x20
   \   000116   7D00         MOV     R5,#0x0
   \   000118   EE           MOV     A,R6
   \   000119   F8           MOV     R0,A
   \   00011A   7900         MOV     R1,#0x0
   \   00011C   E8           MOV     A,R0
   \   00011D   2401         ADD     A,#0x1
   \   00011F   FA           MOV     R2,A
   \   000120   E9           MOV     A,R1
   \   000121   3401         ADDC    A,#0x1
   \   000123   FB           MOV     R3,A
   \   000124   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000127   7402         MOV     A,#0x2
   \   000129   12....       LCALL   ?DEALLOC_XSTACK8
   \   00012C   E9           MOV     A,R1
   \   00012D   7089         JNZ     ??APSME_TCLinkKeyInit_3
   \   00012F                ; Setup parameters for call to function osal_nv_read
   \   00012F   A8..         MOV     R0,?XSP + 0
   \   000131   A9..         MOV     R1,?XSP + 1
   \   000133   88..         MOV     ?V0,R0
   \   000135   89..         MOV     ?V1,R1
   \   000137   78..         MOV     R0,#?V0
   \   000139   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00013C   75..20       MOV     ?V0,#0x20
   \   00013F   75..00       MOV     ?V1,#0x0
   \   000142   78..         MOV     R0,#?V0
   \   000144   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000147   7C00         MOV     R4,#0x0
   \   000149   7D00         MOV     R5,#0x0
   \   00014B   EE           MOV     A,R6
   \   00014C   F8           MOV     R0,A
   \   00014D   7900         MOV     R1,#0x0
   \   00014F   E8           MOV     A,R0
   \   000150   2401         ADD     A,#0x1
   \   000152   FA           MOV     R2,A
   \   000153   E9           MOV     A,R1
   \   000154   3401         ADDC    A,#0x1
   \   000156   FB           MOV     R3,A
   \   000157   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00015A   7404         MOV     A,#0x4
   \   00015C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00015F   E9           MOV     A,R1
   \   000160   7401         MOV     A,#0x1
   \   000162   6F           XRL     A,R7
   \   000163   6003         JZ      $+5
   \   000165   02....       LJMP    ??APSME_TCLinkKeyInit_1 & 0xFFFF
   \   000168   7A00         MOV     R2,#0x0
   \   00016A   7B00         MOV     R3,#0x0
   \   00016C   7C00         MOV     R4,#0x0
   \   00016E   7D00         MOV     R5,#0x0
   \   000170   7418         MOV     A,#0x18
   \   000172   12....       LCALL   ?XSTACK_DISP0_8
   \   000175   EA           MOV     A,R2
   \   000176   F0           MOVX    @DPTR,A
   \   000177   A3           INC     DPTR
   \   000178   EB           MOV     A,R3
   \   000179   F0           MOVX    @DPTR,A
   \   00017A   A3           INC     DPTR
   \   00017B   EC           MOV     A,R4
   \   00017C   F0           MOVX    @DPTR,A
   \   00017D   A3           INC     DPTR
   \   00017E   ED           MOV     A,R5
   \   00017F   F0           MOVX    @DPTR,A
   \   000180   02....       LJMP    ??APSME_TCLinkKeyInit_2 & 0xFFFF
   2711              }
   2712            }
   2713          
   2714            // clear copy of key in RAM
   2715            osal_memset( &tcLinkKey, 0x00, sizeof(APSME_TCLinkKey_t) );
   \                     ??APSME_TCLinkKeyInit_4:
   \   000183                ; Setup parameters for call to function osal_memset
   \   000183   7C20         MOV     R4,#0x20
   \   000185   7D00         MOV     R5,#0x0
   \   000187   7900         MOV     R1,#0x0
   \   000189   AA..         MOV     R2,?XSP + 0
   \   00018B   AB..         MOV     R3,?XSP + 1
   \   00018D   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2716          
   2717          }
   \   000190   7420         MOV     A,#0x20
   \   000192   12....       LCALL   ?DEALLOC_XSTACK8
   \   000195   7F04         MOV     R7,#0x4
   \   000197   02....       LJMP    ?BANKED_LEAVE_XDATA
   2718          
   2719          /******************************************************************************
   2720           * @fn          APSME_TCLinkKeySync
   2721           *
   2722           * @brief       Sync Trust Center LINK key data.
   2723           *
   2724           * @param       srcAddr - [in] srcAddr
   2725           * @param       si      - [in, out] SSP_Info_t
   2726           *
   2727           * @return      ZStatus_t
   2728           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2729          ZStatus_t APSME_TCLinkKeySync( uint16 srcAddr, SSP_Info_t* si )
   \                     APSME_TCLinkKeySync:
   2730          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 32
   \   000005   74E0         MOV     A,#-0x20
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V4,R2
   \   00000C   8B..         MOV     ?V5,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   2731            uint8 i, selectedId = ZDSECMGR_TC_DEVICE_MAX;
   \   000012   75..01       MOV     ?V1,#0x1
   2732            ZStatus_t status = ZSecNoKey;
   \   000015   75..A1       MOV     ?V0,#-0x5f
   2733            APSME_TCLinkKey_t tcLinkKey;
   2734            uint32 *tclkRxFrmCntr;
   2735            uint16 originatorAddr = APSME_TRUSTCENTER_NWKADDR;
   \   000018   75..00       MOV     ?V2,#0x0
   \   00001B   75..00       MOV     ?V3,#0x0
   2736          
   2737            // Look up the IEEE address of the trust center if it's available
   2738            if ( AddrMgrExtAddrValid( si->extAddr ) == FALSE )
   \   00001E                ; Setup parameters for call to function AddrMgrExtAddrValid
   \   00001E   EE           MOV     A,R6
   \   00001F   2406         ADD     A,#0x6
   \   000021   FA           MOV     R2,A
   \   000022   E4           CLR     A
   \   000023   3F           ADDC    A,R7
   \   000024   FB           MOV     R3,A
   \   000025   12....       LCALL   `??AddrMgrExtAddrValid::?relay`; Banked call to: AddrMgrExtAddrValid
   \   000028   E9           MOV     A,R1
   \   000029   7011         JNZ     ??APSME_TCLinkKeySync_0
   2739            {
   2740              APSME_LookupExtAddr( srcAddr, si->extAddr );
   \   00002B                ; Setup parameters for call to function APSME_LookupExtAddr
   \   00002B   EE           MOV     A,R6
   \   00002C   2406         ADD     A,#0x6
   \   00002E   FC           MOV     R4,A
   \   00002F   E4           CLR     A
   \   000030   3F           ADDC    A,R7
   \   000031   FD           MOV     R5,A
   \   000032   AA..         MOV     R2,?V4
   \   000034   AB..         MOV     R3,?V5
   \   000036   12....       LCALL   `??APSME_LookupExtAddr::?relay`; Banked call to: APSME_LookupExtAddr
   \   000039   E9           MOV     A,R1
   \   00003A   801B         SJMP    ??APSME_TCLinkKeySync_1
   2741            }
   2742            else if ( osal_ExtAddrEqual( si->extAddr, _NIB.nwkCoordExtAddress ) )
   \                     ??APSME_TCLinkKeySync_0:
   \   00003C                ; Setup parameters for call to function sAddrExtCmp
   \   00003C   7C..         MOV     R4,#(_NIB + 25) & 0xff
   \   00003E   7D..         MOV     R5,#((_NIB + 25) >> 8) & 0xff
   \   000040   EE           MOV     A,R6
   \   000041   2406         ADD     A,#0x6
   \   000043   FA           MOV     R2,A
   \   000044   E4           CLR     A
   \   000045   3F           ADDC    A,R7
   \   000046   FB           MOV     R3,A
   \   000047   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   00004A   E9           MOV     A,R1
   \   00004B   600A         JZ      ??APSME_TCLinkKeySync_1
   2743            {
   2744              originatorAddr = _NIB.nwkCoordAddress;
   \   00004D   90....       MOV     DPTR,#_NIB + 23
   \   000050   E0           MOVX    A,@DPTR
   \   000051   F5..         MOV     ?V2,A
   \   000053   A3           INC     DPTR
   \   000054   E0           MOVX    A,@DPTR
   \   000055   F5..         MOV     ?V3,A
   2745              // in case originated not from our parent, use the default TC address
   2746            }
   2747          
   2748            // Look up the TC link key associated with the device
   2749            // or the default TC link key (extAddr is all FFs), whichever is found
   2750            for ( i = 0; i < ZDSECMGR_TC_DEVICE_MAX; i++ )
   \                     ??APSME_TCLinkKeySync_1:
   \   000057   75..00       MOV     ?V4,#0x0
   \   00005A   800B         SJMP    ??APSME_TCLinkKeySync_2
   2751            {
   2752              // Read entry i of the TC link key table from NV
   2753              osal_nv_read( (ZCD_NV_TCLK_TABLE_START + i), 0,
   2754                           sizeof(APSME_TCLinkKey_t), &tcLinkKey );
   2755          
   2756              // prefer exact match over default
   2757              if ( AddrMgrExtAddrEqual(si->extAddr, tcLinkKey.extAddr) )
   2758              {
   2759                selectedId = i;
   2760                // break from the loop
   2761                break;
   2762              }
   2763              else if ( APSME_IsDefaultTCLK(tcLinkKey.extAddr) )
   2764              {
   2765                if ( ( originatorAddr != APSME_TRUSTCENTER_NWKADDR ) && ( si->keyID == SEC_KEYID_TRANSPORT )
   2766                     && (i == 0) && ( zgUseDefaultTCLK == TRUE ) )
   2767                {
   2768                  //if a Key is received directly from an unusual TC,
   2769                  // don't use the first element of the table initialized with the default TCLK
   2770                  continue;
   2771                }
   2772                if ( selectedId == ZDSECMGR_TC_DEVICE_MAX )
   \                     ??APSME_TCLinkKeySync_3:
   \   00005C   7401         MOV     A,#0x1
   \   00005E   65..         XRL     A,?V1
   \   000060   7003         JNZ     ??APSME_TCLinkKeySync_4
   2773                {
   2774                  selectedId = i;
   \   000062   85....       MOV     ?V1,?V4
   2775                }
   \                     ??APSME_TCLinkKeySync_4:
   \   000065   05..         INC     ?V4
   \                     ??APSME_TCLinkKeySync_2:
   \   000067   E5..         MOV     A,?V4
   \   000069   7048         JNZ     ??APSME_TCLinkKeySync_5
   \   00006B                ; Setup parameters for call to function osal_nv_read
   \   00006B   A8..         MOV     R0,?XSP + 0
   \   00006D   A9..         MOV     R1,?XSP + 1
   \   00006F   88..         MOV     ?V6,R0
   \   000071   89..         MOV     ?V7,R1
   \   000073   78..         MOV     R0,#?V6
   \   000075   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000078   75..20       MOV     ?V6,#0x20
   \   00007B   75..00       MOV     ?V7,#0x0
   \   00007E   78..         MOV     R0,#?V6
   \   000080   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000083   7C00         MOV     R4,#0x0
   \   000085   7D00         MOV     R5,#0x0
   \   000087   A8..         MOV     R0,?V4
   \   000089   7900         MOV     R1,#0x0
   \   00008B   E8           MOV     A,R0
   \   00008C   2401         ADD     A,#0x1
   \   00008E   FA           MOV     R2,A
   \   00008F   E9           MOV     A,R1
   \   000090   3401         ADDC    A,#0x1
   \   000092   FB           MOV     R3,A
   \   000093   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000096   7404         MOV     A,#0x4
   \   000098   12....       LCALL   ?DEALLOC_XSTACK8
   \   00009B   E9           MOV     A,R1
   \   00009C                ; Setup parameters for call to function AddrMgrExtAddrEqual
   \   00009C   AC..         MOV     R4,?XSP + 0
   \   00009E   AD..         MOV     R5,?XSP + 1
   \   0000A0   EE           MOV     A,R6
   \   0000A1   2406         ADD     A,#0x6
   \   0000A3   FA           MOV     R2,A
   \   0000A4   E4           CLR     A
   \   0000A5   3F           ADDC    A,R7
   \   0000A6   FB           MOV     R3,A
   \   0000A7   12....       LCALL   `??AddrMgrExtAddrEqual::?relay`; Banked call to: AddrMgrExtAddrEqual
   \   0000AA   E9           MOV     A,R1
   \   0000AB   7003         JNZ     $+5
   \   0000AD   02....       LJMP    ??APSME_TCLinkKeySync_6 & 0xFFFF
   \   0000B0   85....       MOV     ?V1,?V4
   2776              }
   2777            }
   2778          
   2779            if ( selectedId < ZDSECMGR_TC_DEVICE_MAX )
   \                     ??APSME_TCLinkKeySync_5:
   \   0000B3   E5..         MOV     A,?V1
   \   0000B5   6003         JZ      $+5
   \   0000B7   02....       LJMP    ??APSME_TCLinkKeySync_7 & 0xFFFF
   2780            {
   2781               // Only for UNIQUE keys, verify that the incoming frame counter is valid
   2782              if ( zgApsLinkKeyType == ZG_UNIQUE_LINK_KEY )
   \   0000BA   90....       MOV     DPTR,#zgApsLinkKeyType
   \   0000BD   E0           MOVX    A,@DPTR
   \   0000BE   6003         JZ      $+5
   \   0000C0   02....       LJMP    ??APSME_TCLinkKeySync_8 & 0xFFFF
   2783              {
   2784                tclkRxFrmCntr = &TCLinkKeyFrmCntr[selectedId].rxFrmCntr;
   \   0000C3   A8..         MOV     R0,?V1
   \   0000C5   7900         MOV     R1,#0x0
   \   0000C7   E8           MOV     A,R0
   \   0000C8   75F009       MOV     B,#0x9
   \   0000CB   A4           MUL     AB
   \   0000CC   C8           XCH     A,R0
   \   0000CD   AAF0         MOV     R2,B
   \   0000CF   75F000       MOV     B,#0x0
   \   0000D2   A4           MUL     AB
   \   0000D3   2A           ADD     A,R2
   \   0000D4   FA           MOV     R2,A
   \   0000D5   75F009       MOV     B,#0x9
   \   0000D8   E9           MOV     A,R1
   \   0000D9   A4           MUL     AB
   \   0000DA   2A           ADD     A,R2
   \   0000DB   F9           MOV     R1,A
   \   0000DC   74..         MOV     A,#(TCLinkKeyFrmCntr + 4) & 0xff
   \   0000DE   28           ADD     A,R0
   \   0000DF   F8           MOV     R0,A
   \   0000E0   74..         MOV     A,#((TCLinkKeyFrmCntr + 4) >> 8) & 0xff
   \   0000E2   39           ADDC    A,R1
   \   0000E3   F9           MOV     R1,A
   \   0000E4   E8           MOV     A,R0
   \   0000E5   FA           MOV     R2,A
   \   0000E6   E9           MOV     A,R1
   \   0000E7   FB           MOV     R3,A
   2785          
   2786                if ( si->frmCntr >= *tclkRxFrmCntr )
   \   0000E8   8A82         MOV     DPL,R2
   \   0000EA   8B83         MOV     DPH,R3
   \   0000EC   78..         MOV     R0,#?V4
   \   0000EE   12....       LCALL   ?L_MOV_X
   \   0000F1   EE           MOV     A,R6
   \   0000F2   2412         ADD     A,#0x12
   \   0000F4   F582         MOV     DPL,A
   \   0000F6   E4           CLR     A
   \   0000F7   3F           ADDC    A,R7
   \   0000F8   F583         MOV     DPH,A
   \   0000FA   78..         MOV     R0,#?V4
   \   0000FC   12....       LCALL   ?UL_GT_X
   \   0000FF   407A         JC      ??APSME_TCLinkKeySync_9
   2787                {
   2788                  // set the keyNvId to use
   2789                  si->keyNvId = (ZCD_NV_TCLK_TABLE_START + selectedId);
   \   000101   A8..         MOV     R0,?V1
   \   000103   7900         MOV     R1,#0x0
   \   000105   E8           MOV     A,R0
   \   000106   2401         ADD     A,#0x1
   \   000108   F8           MOV     R0,A
   \   000109   E9           MOV     A,R1
   \   00010A   3401         ADDC    A,#0x1
   \   00010C   F9           MOV     R1,A
   \   00010D   EE           MOV     A,R6
   \   00010E   240F         ADD     A,#0xf
   \   000110   F582         MOV     DPL,A
   \   000112   E4           CLR     A
   \   000113   3F           ADDC    A,R7
   \   000114   F583         MOV     DPH,A
   \   000116   E8           MOV     A,R0
   \   000117   F0           MOVX    @DPTR,A
   \   000118   A3           INC     DPTR
   \   000119   E9           MOV     A,R1
   \   00011A   F0           MOVX    @DPTR,A
   2790          
   2791                  // update the rx frame counter
   2792                  *tclkRxFrmCntr = si->frmCntr + 1;
   \   00011B   EE           MOV     A,R6
   \   00011C   2412         ADD     A,#0x12
   \   00011E   F582         MOV     DPL,A
   \   000120   E4           CLR     A
   \   000121   3F           ADDC    A,R7
   \   000122   F583         MOV     DPH,A
   \   000124   78..         MOV     R0,#?V4
   \   000126   12....       LCALL   ?L_MOV_X
   \   000129   90....       MOV     DPTR,#__Constant_1
   \   00012C   78..         MOV     R0,#?V4
   \   00012E   12....       LCALL   ?L_ADD_X
   \   000131   8A82         MOV     DPL,R2
   \   000133   8B83         MOV     DPH,R3
   \   000135   78..         MOV     R0,#?V4
   \   000137   12....       LCALL   ?L_MOV_TO_X
   2793          
   2794                  status = ZSuccess;
   \   00013A   75..00       MOV     ?V0,#0x0
   \   00013D   805E         SJMP    ??APSME_TCLinkKeySync_7
   2795                }
   \                     ??APSME_TCLinkKeySync_6:
   \   00013F                ; Setup parameters for call to function APSME_IsDefaultTCLK
   \   00013F   AA..         MOV     R2,?XSP + 0
   \   000141   AB..         MOV     R3,?XSP + 1
   \   000143   12....       LCALL   `??APSME_IsDefaultTCLK::?relay`; Banked call to: APSME_IsDefaultTCLK
   \   000146   E9           MOV     A,R1
   \   000147   7003         JNZ     $+5
   \   000149   02....       LJMP    ??APSME_TCLinkKeySync_4 & 0xFFFF
   \   00014C   E5..         MOV     A,?V2
   \   00014E   45..         ORL     A,?V3
   \   000150   7003         JNZ     $+5
   \   000152   02....       LJMP    ??APSME_TCLinkKeySync_3 & 0xFFFF
   \   000155   EE           MOV     A,R6
   \   000156   240E         ADD     A,#0xe
   \   000158   F582         MOV     DPL,A
   \   00015A   E4           CLR     A
   \   00015B   3F           ADDC    A,R7
   \   00015C   F583         MOV     DPH,A
   \   00015E   E0           MOVX    A,@DPTR
   \   00015F   6402         XRL     A,#0x2
   \   000161   6003         JZ      $+5
   \   000163   02....       LJMP    ??APSME_TCLinkKeySync_3 & 0xFFFF
   \   000166   E5..         MOV     A,?V4
   \   000168   6003         JZ      $+5
   \   00016A   02....       LJMP    ??APSME_TCLinkKeySync_3 & 0xFFFF
   \   00016D   90....       MOV     DPTR,#zgUseDefaultTCLK
   \   000170   E0           MOVX    A,@DPTR
   \   000171   6401         XRL     A,#0x1
   \   000173   6003         JZ      $+5
   \   000175   02....       LJMP    ??APSME_TCLinkKeySync_3 & 0xFFFF
   \   000178   02....       LJMP    ??APSME_TCLinkKeySync_4 & 0xFFFF
   2796                else
   2797                {
   2798                  status = ZSecOldFrmCount;
   \                     ??APSME_TCLinkKeySync_9:
   \   00017B   75..A2       MOV     ?V0,#-0x5e
   \   00017E   801D         SJMP    ??APSME_TCLinkKeySync_7
   2799                }
   2800              }
   2801              else
   2802              {
   2803                // set the keyNvId to use
   2804                si->keyNvId = (ZCD_NV_TCLK_TABLE_START + selectedId);
   \                     ??APSME_TCLinkKeySync_8:
   \   000180   A8..         MOV     R0,?V1
   \   000182   7900         MOV     R1,#0x0
   \   000184   E8           MOV     A,R0
   \   000185   2401         ADD     A,#0x1
   \   000187   F8           MOV     R0,A
   \   000188   E9           MOV     A,R1
   \   000189   3401         ADDC    A,#0x1
   \   00018B   F9           MOV     R1,A
   \   00018C   EE           MOV     A,R6
   \   00018D   240F         ADD     A,#0xf
   \   00018F   F582         MOV     DPL,A
   \   000191   E4           CLR     A
   \   000192   3F           ADDC    A,R7
   \   000193   F583         MOV     DPH,A
   \   000195   E8           MOV     A,R0
   \   000196   F0           MOVX    @DPTR,A
   \   000197   A3           INC     DPTR
   \   000198   E9           MOV     A,R1
   \   000199   F0           MOVX    @DPTR,A
   2805          
   2806                status = ZSuccess;
   \   00019A   75..00       MOV     ?V0,#0x0
   2807              }
   2808            }
   2809          
   2810            // clear copy of key in RAM
   2811            osal_memset( &tcLinkKey, 0x00, sizeof(APSME_TCLinkKey_t) );
   \                     ??APSME_TCLinkKeySync_7:
   \   00019D                ; Setup parameters for call to function osal_memset
   \   00019D   7C20         MOV     R4,#0x20
   \   00019F   7D00         MOV     R5,#0x0
   \   0001A1   7900         MOV     R1,#0x0
   \   0001A3   AA..         MOV     R2,?XSP + 0
   \   0001A5   AB..         MOV     R3,?XSP + 1
   \   0001A7   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2812          
   2813            return status;
   \   0001AA   A9..         MOV     R1,?V0
   \   0001AC   7420         MOV     A,#0x20
   \   0001AE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001B1   7F08         MOV     R7,#0x8
   \   0001B3   02....       LJMP    ?BANKED_LEAVE_XDATA
   2814          }
   2815          
   2816          /******************************************************************************
   2817           * @fn          APSME_TCLinkKeyLoad
   2818           *
   2819           * @brief       Load Trust Center LINK key data.
   2820           *
   2821           * @param       dstAddr - [in] dstAddr
   2822           * @param       si      - [in, out] SSP_Info_t
   2823           *
   2824           * @return      ZStatus_t
   2825           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2826          ZStatus_t APSME_TCLinkKeyLoad( uint16 dstAddr, SSP_Info_t* si )
   \                     APSME_TCLinkKeyLoad:
   2827          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000   74EF         MOV     A,#-0x11
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 17
   \   000005                ; Auto size: 45
   \   000005   74D3         MOV     A,#-0x2d
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8C..         MOV     ?V0,R4
   \   00000C   8D..         MOV     ?V1,R5
   2828            uint8 i;
   2829            ZStatus_t status = ZSecNoKey;
   \   00000E   7EA1         MOV     R6,#-0x5f
   2830            APSME_TCLinkKey_t tcLinkKey;
   2831            AddrMgrEntry_t addrEntry;
   2832            uint32 *tclkTxFrmCntr;
   2833            uint8 extAddrFound;
   2834            uint8 defaultTCLKIdx = ZDSECMGR_TC_DEVICE_MAX;
   \   000010   75..01       MOV     ?V8,#0x1
   2835          
   2836            // Look up the ami of the srcAddr if available
   2837            addrEntry.user    = ADDRMGR_USER_DEFAULT;
   \   000013   85..82       MOV     DPL,?XSP + 0
   \   000016   85..83       MOV     DPH,?XSP + 1
   \   000019   7400         MOV     A,#0x0
   \   00001B   F0           MOVX    @DPTR,A
   2838            addrEntry.nwkAddr = dstAddr;
   \   00001C   7401         MOV     A,#0x1
   \   00001E   12....       LCALL   ?XSTACK_DISP0_8
   \   000021   EA           MOV     A,R2
   \   000022   F0           MOVX    @DPTR,A
   \   000023   A3           INC     DPTR
   \   000024   EB           MOV     A,R3
   \   000025   F0           MOVX    @DPTR,A
   2839          
   2840            extAddrFound = AddrMgrExtAddrValid( si->extAddr );
   \   000026                ; Setup parameters for call to function AddrMgrExtAddrValid
   \   000026   E5..         MOV     A,?V0
   \   000028   2406         ADD     A,#0x6
   \   00002A   FA           MOV     R2,A
   \   00002B   E4           CLR     A
   \   00002C   35..         ADDC    A,?V1
   \   00002E   FB           MOV     R3,A
   \   00002F   12....       LCALL   `??AddrMgrExtAddrValid::?relay`; Banked call to: AddrMgrExtAddrValid
   \   000032   E9           MOV     A,R1
   \   000033   F5..         MOV     ?V2,A
   2841          
   2842            // Look up the TC link key associated with the device
   2843            // or the master TC link key (ami = 0xFFFF), whichever is found
   2844            for( i = 0; i < ZDSECMGR_TC_DEVICE_MAX; i++ )
   \   000035   7F00         MOV     R7,#0x0
   \   000037   8003         SJMP    ??APSME_TCLinkKeyLoad_0
   2845            {
   2846              // Read entry i of the TC link key table from NV
   2847              osal_nv_read( (ZCD_NV_TCLK_TABLE_START + i), 0,
   2848                           sizeof(APSME_TCLinkKey_t), &tcLinkKey );
   2849          
   2850              if( extAddrFound && AddrMgrExtAddrEqual(si->extAddr, tcLinkKey.extAddr) )
   2851              {
   2852                status = ZSuccess;
   2853          
   2854                break; // break from the loop
   2855              }
   2856          
   2857              if ( APSME_IsDefaultTCLK(tcLinkKey.extAddr) )
   2858              {
   2859                if ( !extAddrFound && ( !APSME_IsDistributedSecurity() ) )
   2860                {
   2861                  status = ZSuccess;
   2862          
   2863                  break; // break from the loop
   2864                }
   2865          
   2866                // Remember the last default TCLK index
   2867                defaultTCLKIdx = i;
   \                     ??APSME_TCLinkKeyLoad_1:
   \   000039   8F..         MOV     ?V8,R7
   \                     ??APSME_TCLinkKeyLoad_2:
   \   00003B   0F           INC     R7
   \                     ??APSME_TCLinkKeyLoad_0:
   \   00003C   EF           MOV     A,R7
   \   00003D   7065         JNZ     ??APSME_TCLinkKeyLoad_3
   \   00003F                ; Setup parameters for call to function osal_nv_read
   \   00003F   740D         MOV     A,#0xd
   \   000041   12....       LCALL   ?XSTACK_DISP100_8
   \   000044   88..         MOV     ?V4,R0
   \   000046   89..         MOV     ?V5,R1
   \   000048   78..         MOV     R0,#?V4
   \   00004A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004D   75..20       MOV     ?V4,#0x20
   \   000050   75..00       MOV     ?V5,#0x0
   \   000053   78..         MOV     R0,#?V4
   \   000055   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000058   7C00         MOV     R4,#0x0
   \   00005A   7D00         MOV     R5,#0x0
   \   00005C   EF           MOV     A,R7
   \   00005D   F8           MOV     R0,A
   \   00005E   7900         MOV     R1,#0x0
   \   000060   E8           MOV     A,R0
   \   000061   2401         ADD     A,#0x1
   \   000063   FA           MOV     R2,A
   \   000064   E9           MOV     A,R1
   \   000065   3401         ADDC    A,#0x1
   \   000067   FB           MOV     R3,A
   \   000068   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00006B   7404         MOV     A,#0x4
   \   00006D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000070   E9           MOV     A,R1
   \   000071   E5..         MOV     A,?V2
   \   000073   6018         JZ      ??APSME_TCLinkKeyLoad_4
   \   000075                ; Setup parameters for call to function AddrMgrExtAddrEqual
   \   000075   740D         MOV     A,#0xd
   \   000077   12....       LCALL   ?XSTACK_DISP102_8
   \   00007A   E5..         MOV     A,?V0
   \   00007C   2406         ADD     A,#0x6
   \   00007E   FA           MOV     R2,A
   \   00007F   E4           CLR     A
   \   000080   35..         ADDC    A,?V1
   \   000082   FB           MOV     R3,A
   \   000083   12....       LCALL   `??AddrMgrExtAddrEqual::?relay`; Banked call to: AddrMgrExtAddrEqual
   \   000086   E9           MOV     A,R1
   \   000087   6004         JZ      ??APSME_TCLinkKeyLoad_4
   \   000089   7E00         MOV     R6,#0x0
   \   00008B   8017         SJMP    ??APSME_TCLinkKeyLoad_3
   \                     ??APSME_TCLinkKeyLoad_4:
   \   00008D                ; Setup parameters for call to function APSME_IsDefaultTCLK
   \   00008D   740D         MOV     A,#0xd
   \   00008F   12....       LCALL   ?XSTACK_DISP101_8
   \   000092   12....       LCALL   `??APSME_IsDefaultTCLK::?relay`; Banked call to: APSME_IsDefaultTCLK
   \   000095   E9           MOV     A,R1
   \   000096   60A3         JZ      ??APSME_TCLinkKeyLoad_2
   \   000098   E5..         MOV     A,?V2
   \   00009A   709D         JNZ     ??APSME_TCLinkKeyLoad_1
   \   00009C                ; Setup parameters for call to function APSME_IsDistributedSecurity
   \   00009C   12....       LCALL   `??APSME_IsDistributedSecurity::?relay`; Banked call to: APSME_IsDistributedSecurity
   \   00009F   E9           MOV     A,R1
   \   0000A0   7097         JNZ     ??APSME_TCLinkKeyLoad_1
   \   0000A2   7E00         MOV     R6,#0x0
   2868              }
   2869            }
   2870          
   2871            if ( (status != ZSuccess) && (defaultTCLKIdx < ZDSECMGR_TC_DEVICE_MAX) )
   \                     ??APSME_TCLinkKeyLoad_3:
   \   0000A4   EE           MOV     A,R6
   \   0000A5   6008         JZ      ??APSME_TCLinkKeyLoad_5
   \   0000A7   E5..         MOV     A,?V8
   \   0000A9   7004         JNZ     ??APSME_TCLinkKeyLoad_5
   2872            {
   2873              // Exact match was not found; use the last default TC Link Key
   2874              i = defaultTCLKIdx;
   \   0000AB   AF..         MOV     R7,?V8
   2875              status = ZSuccess;
   \   0000AD   7E00         MOV     R6,#0x0
   2876            }
   2877          
   2878            if ( status == ZSuccess )
   \                     ??APSME_TCLinkKeyLoad_5:
   \   0000AF   EE           MOV     A,R6
   \   0000B0   6003         JZ      $+5
   \   0000B2   02....       LJMP    ??APSME_TCLinkKeyLoad_6 & 0xFFFF
   2879            {
   2880              tclkTxFrmCntr = &TCLinkKeyFrmCntr[i].txFrmCntr;
   \   0000B5   EF           MOV     A,R7
   \   0000B6   F8           MOV     R0,A
   \   0000B7   7900         MOV     R1,#0x0
   \   0000B9   E8           MOV     A,R0
   \   0000BA   75F009       MOV     B,#0x9
   \   0000BD   A4           MUL     AB
   \   0000BE   C8           XCH     A,R0
   \   0000BF   AAF0         MOV     R2,B
   \   0000C1   75F000       MOV     B,#0x0
   \   0000C4   A4           MUL     AB
   \   0000C5   2A           ADD     A,R2
   \   0000C6   FA           MOV     R2,A
   \   0000C7   75F009       MOV     B,#0x9
   \   0000CA   E9           MOV     A,R1
   \   0000CB   A4           MUL     AB
   \   0000CC   2A           ADD     A,R2
   \   0000CD   F9           MOV     R1,A
   \   0000CE   74..         MOV     A,#TCLinkKeyFrmCntr & 0xff
   \   0000D0   28           ADD     A,R0
   \   0000D1   FC           MOV     R4,A
   \   0000D2   74..         MOV     A,#(TCLinkKeyFrmCntr >> 8) & 0xff
   \   0000D4   39           ADDC    A,R1
   \   0000D5   FD           MOV     R5,A
   2881          
   2882              // set the keyNvId to use
   2883              si->keyNvId = (ZCD_NV_TCLK_TABLE_START + i);
   \   0000D6   EF           MOV     A,R7
   \   0000D7   F8           MOV     R0,A
   \   0000D8   7900         MOV     R1,#0x0
   \   0000DA   E8           MOV     A,R0
   \   0000DB   2401         ADD     A,#0x1
   \   0000DD   F8           MOV     R0,A
   \   0000DE   E9           MOV     A,R1
   \   0000DF   3401         ADDC    A,#0x1
   \   0000E1   F9           MOV     R1,A
   \   0000E2   E5..         MOV     A,?V0
   \   0000E4   240F         ADD     A,#0xf
   \   0000E6   F582         MOV     DPL,A
   \   0000E8   E4           CLR     A
   \   0000E9   35..         ADDC    A,?V1
   \   0000EB   F583         MOV     DPH,A
   \   0000ED   E8           MOV     A,R0
   \   0000EE   F0           MOVX    @DPTR,A
   \   0000EF   A3           INC     DPTR
   \   0000F0   E9           MOV     A,R1
   \   0000F1   F0           MOVX    @DPTR,A
   2884          
   2885              // update link key related fields
   2886              si->keyID   = SEC_KEYID_LINK;
   \   0000F2   E5..         MOV     A,?V0
   \   0000F4   240E         ADD     A,#0xe
   \   0000F6   F582         MOV     DPL,A
   \   0000F8   E4           CLR     A
   \   0000F9   35..         ADDC    A,?V1
   \   0000FB   F583         MOV     DPH,A
   \   0000FD   7400         MOV     A,#0x0
   \   0000FF   F0           MOVX    @DPTR,A
   2887              si->frmCntr = *tclkTxFrmCntr;
   \   000100   8C82         MOV     DPL,R4
   \   000102   8D83         MOV     DPH,R5
   \   000104   12....       LCALL   ?XLOAD_R0123
   \   000107   E5..         MOV     A,?V0
   \   000109   2412         ADD     A,#0x12
   \   00010B   F582         MOV     DPL,A
   \   00010D   E4           CLR     A
   \   00010E   35..         ADDC    A,?V1
   \   000110   F583         MOV     DPH,A
   \   000112   12....       LCALL   ?XSTORE_R0123
   2888          
   2889              // update outgoing frame counter
   2890              (*tclkTxFrmCntr)++;
   \   000115   90....       MOV     DPTR,#__Constant_1
   \   000118   78..         MOV     R0,#?V0
   \   00011A   12....       LCALL   ?L_MOV_X
   \   00011D   8C82         MOV     DPL,R4
   \   00011F   8D83         MOV     DPH,R5
   \   000121   78..         MOV     R0,#?V0
   \   000123   12....       LCALL   ?L_ADD_TO_X
   2891          
   2892          #if defined ( NV_RESTORE )
   2893              // write periodically to NV
   2894              if ( !(*tclkTxFrmCntr % MAX_TCLK_FRAMECOUNTER_CHANGES) )
   \   000126   8C82         MOV     DPL,R4
   \   000128   8D83         MOV     DPH,R5
   \   00012A   78..         MOV     R0,#?V4
   \   00012C   12....       LCALL   ?L_MOV_X
   \   00012F   90....       MOV     DPTR,#__Constant_a
   \   000132   78..         MOV     R0,#?V0
   \   000134   12....       LCALL   ?L_MOV_X
   \   000137   78..         MOV     R0,#?V4
   \   000139   79..         MOV     R1,#?V0
   \   00013B   12....       LCALL   ?UL_DIV_MOD
   \   00013E   E5..         MOV     A,?V0
   \   000140   45..         ORL     A,?V1
   \   000142   45..         ORL     A,?V2
   \   000144   45..         ORL     A,?V3
   \   000146   7033         JNZ     ??APSME_TCLinkKeyLoad_6
   2895              {
   2896                // set the flag to write key to NV
   2897                TCLinkKeyFrmCntr[i].pendingFlag = TRUE;
   \   000148   EF           MOV     A,R7
   \   000149   F8           MOV     R0,A
   \   00014A   7900         MOV     R1,#0x0
   \   00014C   E8           MOV     A,R0
   \   00014D   75F009       MOV     B,#0x9
   \   000150   A4           MUL     AB
   \   000151   C8           XCH     A,R0
   \   000152   AAF0         MOV     R2,B
   \   000154   75F000       MOV     B,#0x0
   \   000157   A4           MUL     AB
   \   000158   2A           ADD     A,R2
   \   000159   FA           MOV     R2,A
   \   00015A   75F009       MOV     B,#0x9
   \   00015D   E9           MOV     A,R1
   \   00015E   A4           MUL     AB
   \   00015F   2A           ADD     A,R2
   \   000160   F9           MOV     R1,A
   \   000161   74..         MOV     A,#(TCLinkKeyFrmCntr + 8) & 0xff
   \   000163   28           ADD     A,R0
   \   000164   F582         MOV     DPL,A
   \   000166   74..         MOV     A,#((TCLinkKeyFrmCntr + 8) >> 8) & 0xff
   \   000168   39           ADDC    A,R1
   \   000169   F583         MOV     DPH,A
   \   00016B   7401         MOV     A,#0x1
   \   00016D   F0           MOVX    @DPTR,A
   2898          
   2899                // Notify the ZDApp that the frame counter has changed.
   2900                osal_set_event( ZDAppTaskID, ZDO_TCLK_FRAMECOUNTER_CHANGE );
   \   00016E                ; Setup parameters for call to function osal_set_event
   \   00016E   7A00         MOV     R2,#0x0
   \   000170   7B04         MOV     R3,#0x4
   \   000172   90....       MOV     DPTR,#ZDAppTaskID
   \   000175   E0           MOVX    A,@DPTR
   \   000176   F9           MOV     R1,A
   \   000177   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   00017A   E9           MOV     A,R1
   2901              }
   2902          #endif
   2903            }
   2904          
   2905            // If no TC link key found, remove the device from the address manager
   2906            if ( (status != ZSuccess) && (AddrMgrEntryLookupNwk(&addrEntry) == TRUE) )
   \                     ??APSME_TCLinkKeyLoad_6:
   \   00017B   EE           MOV     A,R6
   \   00017C   6014         JZ      ??APSME_TCLinkKeyLoad_7
   \   00017E                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   00017E   AA..         MOV     R2,?XSP + 0
   \   000180   AB..         MOV     R3,?XSP + 1
   \   000182   12....       LCALL   `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
   \   000185   E9           MOV     A,R1
   \   000186   6401         XRL     A,#0x1
   \   000188   7008         JNZ     ??APSME_TCLinkKeyLoad_7
   2907            {
   2908              AddrMgrEntryRelease( &addrEntry );
   \   00018A                ; Setup parameters for call to function AddrMgrEntryRelease
   \   00018A   AA..         MOV     R2,?XSP + 0
   \   00018C   AB..         MOV     R3,?XSP + 1
   \   00018E   12....       LCALL   `??AddrMgrEntryRelease::?relay`; Banked call to: AddrMgrEntryRelease
   \   000191   E9           MOV     A,R1
   2909            }
   2910          
   2911              // clear copy of key in RAM
   2912            osal_memset( &tcLinkKey, 0x00, sizeof(APSME_TCLinkKey_t) );
   \                     ??APSME_TCLinkKeyLoad_7:
   \   000192                ; Setup parameters for call to function osal_memset
   \   000192   7C20         MOV     R4,#0x20
   \   000194   7D00         MOV     R5,#0x0
   \   000196   7900         MOV     R1,#0x0
   \   000198   740D         MOV     A,#0xd
   \   00019A   12....       LCALL   ?XSTACK_DISP101_8
   \   00019D   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2913          
   2914            return status;
   \   0001A0   EE           MOV     A,R6
   \   0001A1   F9           MOV     R1,A
   \   0001A2   742D         MOV     A,#0x2d
   \   0001A4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001A7   7F09         MOV     R7,#0x9
   \   0001A9   02....       LJMP    ?BANKED_LEAVE_XDATA
   2915          }
   2916          
   2917          /******************************************************************************
   2918           * @fn          APSME_IsDefaultTCLK
   2919           *
   2920           * @brief       Return TRUE or FALSE based on the extended address.  If the
   2921           *              input ext address is all FFs, it means the trust center link
   2922           *              assoiciated with the address is the default trust center link key
   2923           *
   2924           * @param       extAddr - [in] extended address
   2925           *
   2926           * @return      uint8 TRUE/FALSE
   2927           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2928          uint8 APSME_IsDefaultTCLK( uint8 *extAddr )
   \                     APSME_IsDefaultTCLK:
   2929          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2930            return osal_isbufset( extAddr, 0xFF, Z_EXTADDR_LEN );
   \   000004                ; Setup parameters for call to function osal_isbufset
   \   000004   7C08         MOV     R4,#0x8
   \   000006   79FF         MOV     R1,#-0x1
   \   000008   12....       LCALL   `??osal_isbufset::?relay`; Banked call to: osal_isbufset
   \   00000B   D083         POP     DPH
   \   00000D   D082         POP     DPL
   \   00000F   02....       LJMP    ?BRET
   2931          }
   2932          
   2933          /******************************************************************************
   2934           * @fn          ZDSecMgrNwkKeyInit
   2935           *
   2936           * @brief       Initialize the NV items for
   2937           *                  ZCD_NV_NWKKEY,
   2938           *                  ZCD_NV_NWK_ACTIVE_KEY_INFO and
   2939           *                  ZCD_NV_NWK_ALTERN_KEY_INFO
   2940           *
   2941           * @param       setDefault
   2942           *
   2943           * @return      none
   2944           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2945          void ZDSecMgrNwkKeyInit(uint8 setDefault)
   \                     ZDSecMgrNwkKeyInit:
   2946          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 38
   \   000005   74DA         MOV     A,#-0x26
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   2947            uint8 status;
   2948            nwkKeyDesc nwkKey;
   2949          
   2950            // Initialize NV items for NWK key, this structure contains the frame counter
   2951            // and is only used when NV_RESTORE is enabled
   2952            nwkActiveKeyItems keyItems;
   2953          
   2954            osal_memset( &keyItems, 0, sizeof( nwkActiveKeyItems ) );
   \   00000C                ; Setup parameters for call to function osal_memset
   \   00000C   7C15         MOV     R4,#0x15
   \   00000E   7D00         MOV     R5,#0x0
   \   000010   7900         MOV     R1,#0x0
   \   000012   7411         MOV     A,#0x11
   \   000014   12....       LCALL   ?XSTACK_DISP101_8
   \   000017   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2955          
   2956            status = osal_nv_item_init( ZCD_NV_NWKKEY, sizeof(nwkActiveKeyItems), (void *)&keyItems );
   \   00001A                ; Setup parameters for call to function osal_nv_item_init
   \   00001A   7411         MOV     A,#0x11
   \   00001C   12....       LCALL   ?XSTACK_DISP100_8
   \   00001F   88..         MOV     ?V0,R0
   \   000021   89..         MOV     ?V1,R1
   \   000023   78..         MOV     R0,#?V0
   \   000025   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000028   7C15         MOV     R4,#0x15
   \   00002A   7D00         MOV     R5,#0x0
   \   00002C   7A82         MOV     R2,#-0x7e
   \   00002E   7B00         MOV     R3,#0x0
   \   000030   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000033   7402         MOV     A,#0x2
   \   000035   12....       LCALL   ?DEALLOC_XSTACK8
   \   000038   E9           MOV     A,R1
   2957          
   2958          #if defined ( NV_RESTORE )
   2959            // reset the values of NV items if NV_RESTORE is not enabled
   2960            if ((status == SUCCESS) && (setDefault == TRUE))
   \   000039   702F         JNZ     ??ZDSecMgrNwkKeyInit_0
   \   00003B   7401         MOV     A,#0x1
   \   00003D   6E           XRL     A,R6
   \   00003E   702A         JNZ     ??ZDSecMgrNwkKeyInit_0
   2961            {
   2962              // clear NV data to default values
   2963              osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), &keyItems );
   \   000040                ; Setup parameters for call to function osal_nv_write
   \   000040   7411         MOV     A,#0x11
   \   000042   12....       LCALL   ?XSTACK_DISP100_8
   \   000045   88..         MOV     ?V0,R0
   \   000047   89..         MOV     ?V1,R1
   \   000049   78..         MOV     R0,#?V0
   \   00004B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004E   75..15       MOV     ?V0,#0x15
   \   000051   75..00       MOV     ?V1,#0x0
   \   000054   78..         MOV     R0,#?V0
   \   000056   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000059   7C00         MOV     R4,#0x0
   \   00005B   7D00         MOV     R5,#0x0
   \   00005D   7A82         MOV     R2,#-0x7e
   \   00005F   7B00         MOV     R3,#0x0
   \   000061   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000064   7404         MOV     A,#0x4
   \   000066   12....       LCALL   ?DEALLOC_XSTACK8
   \   000069   E9           MOV     A,R1
   2964            }
   2965          #else
   2966            (void)setDefault;   // to eliminate compiler warning
   2967          
   2968            // reset the values of NV items if NV_RESTORE is not enabled
   2969            if (status == SUCCESS)
   2970            {
   2971              osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), &keyItems );
   2972            }
   2973          #endif // defined (NV_RESTORE)
   2974          
   2975            // Initialize NV items for NWK Active and Alternate keys. These items are used
   2976            // all the time, independently of NV_RESTORE being set or not
   2977            osal_memset( &nwkKey, 0x00, sizeof(nwkKey) );
   \                     ??ZDSecMgrNwkKeyInit_0:
   \   00006A                ; Setup parameters for call to function osal_memset
   \   00006A   7C11         MOV     R4,#0x11
   \   00006C   7D00         MOV     R5,#0x0
   \   00006E   7900         MOV     R1,#0x0
   \   000070   AA..         MOV     R2,?XSP + 0
   \   000072   AB..         MOV     R3,?XSP + 1
   \   000074   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2978          
   2979            status = osal_nv_item_init( ZCD_NV_NWK_ACTIVE_KEY_INFO, sizeof(nwkKey), &nwkKey);
   \   000077                ; Setup parameters for call to function osal_nv_item_init
   \   000077   A8..         MOV     R0,?XSP + 0
   \   000079   A9..         MOV     R1,?XSP + 1
   \   00007B   88..         MOV     ?V0,R0
   \   00007D   89..         MOV     ?V1,R1
   \   00007F   78..         MOV     R0,#?V0
   \   000081   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000084   7C11         MOV     R4,#0x11
   \   000086   7D00         MOV     R5,#0x0
   \   000088   7A3A         MOV     R2,#0x3a
   \   00008A   7B00         MOV     R3,#0x0
   \   00008C   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00008F   7402         MOV     A,#0x2
   \   000091   12....       LCALL   ?DEALLOC_XSTACK8
   \   000094   E9           MOV     A,R1
   2980          
   2981          #if defined ( NV_RESTORE )
   2982            // reset the values of NV items if NV_RESTORE is not enabled
   2983            if ((status == SUCCESS) && (setDefault == TRUE))
   \   000095   702E         JNZ     ??ZDSecMgrNwkKeyInit_1
   \   000097   7401         MOV     A,#0x1
   \   000099   6E           XRL     A,R6
   \   00009A   7029         JNZ     ??ZDSecMgrNwkKeyInit_1
   2984            {
   2985              // clear NV data to default values
   2986              osal_nv_write( ZCD_NV_NWK_ACTIVE_KEY_INFO, 0, sizeof(nwkKey), &nwkKey );
   \   00009C                ; Setup parameters for call to function osal_nv_write
   \   00009C   A8..         MOV     R0,?XSP + 0
   \   00009E   A9..         MOV     R1,?XSP + 1
   \   0000A0   88..         MOV     ?V0,R0
   \   0000A2   89..         MOV     ?V1,R1
   \   0000A4   78..         MOV     R0,#?V0
   \   0000A6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A9   75..11       MOV     ?V0,#0x11
   \   0000AC   75..00       MOV     ?V1,#0x0
   \   0000AF   78..         MOV     R0,#?V0
   \   0000B1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B4   7C00         MOV     R4,#0x0
   \   0000B6   7D00         MOV     R5,#0x0
   \   0000B8   7A3A         MOV     R2,#0x3a
   \   0000BA   7B00         MOV     R3,#0x0
   \   0000BC   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000BF   7404         MOV     A,#0x4
   \   0000C1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C4   E9           MOV     A,R1
   2987            }
   2988          #else
   2989            // reset the values of NV items if NV_RESTORE is not enabled
   2990            if (status == SUCCESS)
   2991            {
   2992              osal_nv_write( ZCD_NV_NWK_ACTIVE_KEY_INFO, 0, sizeof(nwkKey), &nwkKey );
   2993            }
   2994          #endif // defined (NV_RESTORE)
   2995          
   2996            status = osal_nv_item_init( ZCD_NV_NWK_ALTERN_KEY_INFO, sizeof(nwkKey), &nwkKey );
   \                     ??ZDSecMgrNwkKeyInit_1:
   \   0000C5                ; Setup parameters for call to function osal_nv_item_init
   \   0000C5   A8..         MOV     R0,?XSP + 0
   \   0000C7   A9..         MOV     R1,?XSP + 1
   \   0000C9   88..         MOV     ?V0,R0
   \   0000CB   89..         MOV     ?V1,R1
   \   0000CD   78..         MOV     R0,#?V0
   \   0000CF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D2   7C11         MOV     R4,#0x11
   \   0000D4   7D00         MOV     R5,#0x0
   \   0000D6   7A3B         MOV     R2,#0x3b
   \   0000D8   7B00         MOV     R3,#0x0
   \   0000DA   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   0000DD   7402         MOV     A,#0x2
   \   0000DF   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E2   E9           MOV     A,R1
   2997          
   2998          #if defined ( NV_RESTORE )
   2999            // reset the values of NV items if NV_RESTORE is not enabled
   3000            if ((status == SUCCESS) && (setDefault == TRUE))
   \   0000E3   702E         JNZ     ??ZDSecMgrNwkKeyInit_2
   \   0000E5   7401         MOV     A,#0x1
   \   0000E7   6E           XRL     A,R6
   \   0000E8   7029         JNZ     ??ZDSecMgrNwkKeyInit_2
   3001            {
   3002              // clear NV data to default values
   3003              osal_nv_write( ZCD_NV_NWK_ALTERN_KEY_INFO, 0, sizeof(nwkKey), &nwkKey );
   \   0000EA                ; Setup parameters for call to function osal_nv_write
   \   0000EA   A8..         MOV     R0,?XSP + 0
   \   0000EC   A9..         MOV     R1,?XSP + 1
   \   0000EE   88..         MOV     ?V0,R0
   \   0000F0   89..         MOV     ?V1,R1
   \   0000F2   78..         MOV     R0,#?V0
   \   0000F4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F7   75..11       MOV     ?V0,#0x11
   \   0000FA   75..00       MOV     ?V1,#0x0
   \   0000FD   78..         MOV     R0,#?V0
   \   0000FF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000102   7C00         MOV     R4,#0x0
   \   000104   7D00         MOV     R5,#0x0
   \   000106   7A3B         MOV     R2,#0x3b
   \   000108   7B00         MOV     R3,#0x0
   \   00010A   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00010D   7404         MOV     A,#0x4
   \   00010F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000112   E9           MOV     A,R1
   3004            }
   3005          #else
   3006            // reset the values of NV items if NV_RESTORE is not enabled
   3007            if (status == SUCCESS)
   3008            {
   3009              osal_nv_write( ZCD_NV_NWK_ALTERN_KEY_INFO, 0, sizeof(nwkKey), &nwkKey );
   3010            }
   3011          #endif // defined (NV_RESTORE)
   3012          
   3013          }
   \                     ??ZDSecMgrNwkKeyInit_2:
   \   000113   7426         MOV     A,#0x26
   \   000115   12....       LCALL   ?DEALLOC_XSTACK8
   \   000118   7F02         MOV     R7,#0x2
   \   00011A   02....       LJMP    ?BANKED_LEAVE_XDATA
   3014          
   3015          /*********************************************************************
   3016           * @fn          ZDSecMgrReadKeyFromNv
   3017           *
   3018           * @brief       Looks for a specific key in NV based on Index value
   3019           *
   3020           * @param   keyNvId - Index of key to look in NV
   3021           *                    valid values are:
   3022           *                    ZCD_NV_NWK_ACTIVE_KEY_INFO
   3023           *                    ZCD_NV_NWK_ALTERN_KEY_INFO
   3024           *                    ZCD_NV_TCLK_TABLE_START + <offset_in_table>
   3025           *                    ZCD_NV_APS_LINK_KEY_DATA_START + <offset_in_table>
   3026           *                    ZCD_NV_PRECFGKEY
   3027           *
   3028           * @param  *keyinfo - Data is read into this buffer.
   3029           *
   3030           * @return  SUCCESS if NV data was copied to the keyinfo parameter .
   3031           *          Otherwise, NV_OPER_FAILED for failure.
   3032           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3033          ZStatus_t ZDSecMgrReadKeyFromNv(uint16 keyNvId, void *keyinfo)
   \                     ZDSecMgrReadKeyFromNv:
   3034          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   3035            if ((keyNvId == ZCD_NV_NWK_ACTIVE_KEY_INFO) ||
   3036                (keyNvId == ZCD_NV_NWK_ALTERN_KEY_INFO))
   \   000005   743A         MOV     A,#0x3a
   \   000007   6A           XRL     A,R2
   \   000008   7003         JNZ     ??ZDSecMgrReadKeyFromNv_0
   \   00000A   7400         MOV     A,#0x0
   \   00000C   6B           XRL     A,R3
   \                     ??ZDSecMgrReadKeyFromNv_0:
   \   00000D   600A         JZ      ??ZDSecMgrReadKeyFromNv_1
   \   00000F   743B         MOV     A,#0x3b
   \   000011   6A           XRL     A,R2
   \   000012   7003         JNZ     ??ZDSecMgrReadKeyFromNv_2
   \   000014   7400         MOV     A,#0x0
   \   000016   6B           XRL     A,R3
   \                     ??ZDSecMgrReadKeyFromNv_2:
   \   000017   7023         JNZ     ??ZDSecMgrReadKeyFromNv_3
   3037            {
   3038              // get NWK active or alternate key from NV
   3039              return (osal_nv_read(keyNvId,
   3040                                   osal_offsetof(nwkKeyDesc, key),
   3041                                   SEC_KEY_LEN,
   3042                                   keyinfo));
   \                     ??ZDSecMgrReadKeyFromNv_1:
   \   000019                ; Setup parameters for call to function osal_nv_read
   \   000019   8C..         MOV     ?V0,R4
   \   00001B   8D..         MOV     ?V1,R5
   \   00001D   78..         MOV     R0,#?V0
   \   00001F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000022   75..10       MOV     ?V0,#0x10
   \   000025   75..00       MOV     ?V1,#0x0
   \   000028   78..         MOV     R0,#?V0
   \   00002A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002D   7C01         MOV     R4,#0x1
   \   00002F   7D00         MOV     R5,#0x0
   \   000031   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000034   7404         MOV     A,#0x4
   \   000036   12....       LCALL   ?DEALLOC_XSTACK8
   \   000039   02....       LJMP    ??ZDSecMgrReadKeyFromNv_4 & 0xFFFF
   3043            }
   3044            else if ((keyNvId >= ZCD_NV_TCLK_TABLE_START) &&
   3045                     (keyNvId < (ZCD_NV_TCLK_TABLE_START + ZDSECMGR_TC_DEVICE_MAX)))
   \                     ??ZDSecMgrReadKeyFromNv_3:
   \   00003C   EA           MOV     A,R2
   \   00003D   C3           CLR     C
   \   00003E   9401         SUBB    A,#0x1
   \   000040   F8           MOV     R0,A
   \   000041   EB           MOV     A,R3
   \   000042   9401         SUBB    A,#0x1
   \   000044   F9           MOV     R1,A
   \   000045   C3           CLR     C
   \   000046   E8           MOV     A,R0
   \   000047   9401         SUBB    A,#0x1
   \   000049   E9           MOV     A,R1
   \   00004A   9400         SUBB    A,#0x0
   \   00004C   5022         JNC     ??ZDSecMgrReadKeyFromNv_5
   3046            {
   3047              // Read entry keyNvId of the TC link key table from NV. keyNvId should be
   3048              // ZCD_NV_TCLK_TABLE_START + <offset_in_table>
   3049              return (osal_nv_read(keyNvId,
   3050                                   osal_offsetof(APSME_TCLinkKey_t, key),
   3051                                   SEC_KEY_LEN,
   3052                                   keyinfo));
   \   00004E                ; Setup parameters for call to function osal_nv_read
   \   00004E   8C..         MOV     ?V0,R4
   \   000050   8D..         MOV     ?V1,R5
   \   000052   78..         MOV     R0,#?V0
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000057   75..10       MOV     ?V0,#0x10
   \   00005A   75..00       MOV     ?V1,#0x0
   \   00005D   78..         MOV     R0,#?V0
   \   00005F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000062   7C08         MOV     R4,#0x8
   \   000064   7D00         MOV     R5,#0x0
   \   000066   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000069   7404         MOV     A,#0x4
   \   00006B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006E   8062         SJMP    ??ZDSecMgrReadKeyFromNv_4
   3053            }
   3054            else if ((keyNvId >= ZCD_NV_APS_LINK_KEY_DATA_START) &&
   3055                     (keyNvId < (ZCD_NV_APS_LINK_KEY_DATA_START + ZDSECMGR_ENTRY_MAX)))
   \                     ??ZDSecMgrReadKeyFromNv_5:
   \   000070   EA           MOV     A,R2
   \   000071   C3           CLR     C
   \   000072   9401         SUBB    A,#0x1
   \   000074   F8           MOV     R0,A
   \   000075   EB           MOV     A,R3
   \   000076   9402         SUBB    A,#0x2
   \   000078   F9           MOV     R1,A
   \   000079   C3           CLR     C
   \   00007A   E8           MOV     A,R0
   \   00007B   9403         SUBB    A,#0x3
   \   00007D   E9           MOV     A,R1
   \   00007E   9400         SUBB    A,#0x0
   \   000080   5022         JNC     ??ZDSecMgrReadKeyFromNv_6
   3056            {
   3057              // Read entry keyNvId of the APS link key table from NV. keyNvId should be
   3058              // ZCD_NV_APS_LINK_KEY_DATA_START + <offset_in_table>
   3059              return (osal_nv_read(keyNvId,
   3060                                   osal_offsetof(APSME_LinkKeyData_t, key),
   3061                                   SEC_KEY_LEN,
   3062                                   keyinfo));
   \   000082                ; Setup parameters for call to function osal_nv_read
   \   000082   8C..         MOV     ?V0,R4
   \   000084   8D..         MOV     ?V1,R5
   \   000086   78..         MOV     R0,#?V0
   \   000088   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008B   75..10       MOV     ?V0,#0x10
   \   00008E   75..00       MOV     ?V1,#0x0
   \   000091   78..         MOV     R0,#?V0
   \   000093   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000096   7C00         MOV     R4,#0x0
   \   000098   7D00         MOV     R5,#0x0
   \   00009A   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00009D   7404         MOV     A,#0x4
   \   00009F   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A2   802E         SJMP    ??ZDSecMgrReadKeyFromNv_4
   3063            }
   3064            else if (keyNvId == ZCD_NV_PRECFGKEY)
   \                     ??ZDSecMgrReadKeyFromNv_6:
   \   0000A4   7462         MOV     A,#0x62
   \   0000A6   6A           XRL     A,R2
   \   0000A7   7003         JNZ     ??ZDSecMgrReadKeyFromNv_7
   \   0000A9   7400         MOV     A,#0x0
   \   0000AB   6B           XRL     A,R3
   \                     ??ZDSecMgrReadKeyFromNv_7:
   \   0000AC   7022         JNZ     ??ZDSecMgrReadKeyFromNv_8
   3065            {
   3066              // Read entry keyNvId of the Preconfig key from NV.
   3067              return (osal_nv_read(keyNvId,
   3068                                   0,
   3069                                   SEC_KEY_LEN,
   3070                                   keyinfo));
   \   0000AE                ; Setup parameters for call to function osal_nv_read
   \   0000AE   8C..         MOV     ?V0,R4
   \   0000B0   8D..         MOV     ?V1,R5
   \   0000B2   78..         MOV     R0,#?V0
   \   0000B4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B7   75..10       MOV     ?V0,#0x10
   \   0000BA   75..00       MOV     ?V1,#0x0
   \   0000BD   78..         MOV     R0,#?V0
   \   0000BF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C2   7C00         MOV     R4,#0x0
   \   0000C4   7D00         MOV     R5,#0x0
   \   0000C6   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   0000C9   7404         MOV     A,#0x4
   \   0000CB   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000CE   8002         SJMP    ??ZDSecMgrReadKeyFromNv_4
   3071            }
   3072          
   3073            return NV_OPER_FAILED;
   \                     ??ZDSecMgrReadKeyFromNv_8:
   \   0000D0   790A         MOV     R1,#0xa
   \                     ??ZDSecMgrReadKeyFromNv_4:
   \   0000D2   7F02         MOV     R7,#0x2
   \   0000D4   02....       LJMP    ?BANKED_LEAVE_XDATA
   3074          }
   3075          
   3076          /******************************************************************************
   3077           * @fn          ZDSecMgrApsLinkKeyInit
   3078           *
   3079           * @brief       Initialize the NV table for Application link keys
   3080           *
   3081           * @param       none
   3082           *
   3083           * @return      none
   3084           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3085          void ZDSecMgrApsLinkKeyInit(void)
   \                     ZDSecMgrApsLinkKeyInit:
   3086          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 24
   \   000005   74E8         MOV     A,#-0x18
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   3087            APSME_LinkKeyData_t pApsLinkKey;
   3088            uint8 i;
   3089            uint8 status;
   3090          
   3091            // Initialize all NV items for APS link key, if not exist already.
   3092            osal_memset( &pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t) );
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C18         MOV     R4,#0x18
   \   00000C   7D00         MOV     R5,#0x0
   \   00000E   7900         MOV     R1,#0x0
   \   000010   AA..         MOV     R2,?XSP + 0
   \   000012   AB..         MOV     R3,?XSP + 1
   \   000014   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   3093          
   3094            for( i = 0; i < ZDSECMGR_ENTRY_MAX; i++ )
   \   000017   7E00         MOV     R6,#0x0
   \   000019   8027         SJMP    ??ZDSecMgrApsLinkKeyInit_0
   3095            {
   3096              status = osal_nv_item_init( (ZCD_NV_APS_LINK_KEY_DATA_START + i),
   3097                                          sizeof(APSME_LinkKeyData_t), &pApsLinkKey );
   \                     ??ZDSecMgrApsLinkKeyInit_1:
   \   00001B                ; Setup parameters for call to function osal_nv_item_init
   \   00001B   A8..         MOV     R0,?XSP + 0
   \   00001D   A9..         MOV     R1,?XSP + 1
   \   00001F   88..         MOV     ?V0,R0
   \   000021   89..         MOV     ?V1,R1
   \   000023   78..         MOV     R0,#?V0
   \   000025   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000028   7C18         MOV     R4,#0x18
   \   00002A   7D00         MOV     R5,#0x0
   \   00002C   EE           MOV     A,R6
   \   00002D   F8           MOV     R0,A
   \   00002E   7900         MOV     R1,#0x0
   \   000030   E8           MOV     A,R0
   \   000031   2401         ADD     A,#0x1
   \   000033   FA           MOV     R2,A
   \   000034   E9           MOV     A,R1
   \   000035   3402         ADDC    A,#0x2
   \   000037   FB           MOV     R3,A
   \   000038   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00003B   7402         MOV     A,#0x2
   \   00003D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000040   E9           MOV     A,R1
   3098          
   3099          #if defined ( NV_RESTORE )
   3100              (void)status;   // to eliminate compiler warning
   3101          #else
   3102              // reset the values of NV items if NV_RESTORE is not enabled
   3103              if (status == SUCCESS)
   3104              {
   3105                osal_nv_write( (ZCD_NV_APS_LINK_KEY_DATA_START + i), 0,
   3106                               sizeof(APSME_LinkKeyData_t), &pApsLinkKey );
   3107          
   3108              }
   3109          #endif // defined (NV_RESTORE)
   3110            }
   \   000041   0E           INC     R6
   \                     ??ZDSecMgrApsLinkKeyInit_0:
   \   000042   EE           MOV     A,R6
   \   000043   C3           CLR     C
   \   000044   9403         SUBB    A,#0x3
   \   000046   40D3         JC      ??ZDSecMgrApsLinkKeyInit_1
   3111          }
   \   000048   7418         MOV     A,#0x18
   \   00004A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00004D   7F02         MOV     R7,#0x2
   \   00004F   02....       LJMP    ?BANKED_LEAVE_XDATA
   3112          
   3113          /******************************************************************************
   3114           * @fn          ZDSecMgrInitNVKeyTables
   3115           *
   3116           * @brief       Initialize the NV table for All keys: NWK, Master, TCLK and APS
   3117           *
   3118           * @param       setDefault - TRUE to set default values
   3119           *
   3120           * @return      none
   3121           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3122          void ZDSecMgrInitNVKeyTables(uint8 setDefault)
   \                     ZDSecMgrInitNVKeyTables:
   3123          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   3124            ZDSecMgrNwkKeyInit(setDefault);
   \   000007                ; Setup parameters for call to function ZDSecMgrNwkKeyInit
   \   000007   EE           MOV     A,R6
   \   000008   F9           MOV     R1,A
   \   000009   12....       LCALL   `??ZDSecMgrNwkKeyInit::?relay`; Banked call to: ZDSecMgrNwkKeyInit
   3125            ZDSecMgrApsLinkKeyInit();
   \   00000C                ; Setup parameters for call to function ZDSecMgrApsLinkKeyInit
   \   00000C   12....       LCALL   `??ZDSecMgrApsLinkKeyInit::?relay`; Banked call to: ZDSecMgrApsLinkKeyInit
   3126            APSME_TCLinkKeyInit(setDefault);
   \   00000F                ; Setup parameters for call to function APSME_TCLinkKeyInit
   \   00000F   EE           MOV     A,R6
   \   000010   F9           MOV     R1,A
   \   000011   12....       LCALL   `??APSME_TCLinkKeyInit::?relay`; Banked call to: APSME_TCLinkKeyInit
   3127          }
   \   000014   7F01         MOV     R7,#0x1
   \   000016   02....       LJMP    ?BANKED_LEAVE_XDATA
   3128          
   3129          /******************************************************************************
   3130           * @fn          ZDSecMgrSaveApsLinkKey
   3131           *
   3132           * @brief       Save APS Link Key to NV. It will loop through all the keys
   3133           *              to see which one to save.
   3134           *
   3135           * @param       none
   3136           *
   3137           * @return      none
   3138           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3139          void ZDSecMgrSaveApsLinkKey(void)
   \                     ZDSecMgrSaveApsLinkKey:
   3140          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   3141            APSME_LinkKeyData_t *pKeyData = NULL;
   \   000005   75..00       MOV     ?V0,#0x0
   \   000008   75..00       MOV     ?V1,#0x0
   3142            int i;
   3143          
   3144            pKeyData = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
   \   00000B                ; Setup parameters for call to function osal_mem_alloc
   \   00000B   7A18         MOV     R2,#0x18
   \   00000D   7B00         MOV     R3,#0x0
   \   00000F   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000012   8A..         MOV     ?V2,R2
   \   000014   8B..         MOV     ?V3,R3
   \   000016   85....       MOV     ?V0,?V2
   \   000019   85....       MOV     ?V1,?V3
   3145          
   3146            if (pKeyData != NULL)
   \   00001C   E5..         MOV     A,?V0
   \   00001E   45..         ORL     A,?V1
   \   000020   7003         JNZ     $+5
   \   000022   02....       LJMP    ??ZDSecMgrSaveApsLinkKey_0 & 0xFFFF
   3147            {
   3148              // checks all pending flags to know which one to save
   3149              for (i = 0; i < ZDSECMGR_ENTRY_MAX; i++)
   \   000025   7E00         MOV     R6,#0x0
   \   000027   7F00         MOV     R7,#0x0
   \   000029   02....       LJMP    ??ZDSecMgrSaveApsLinkKey_1 & 0xFFFF
   3150              {
   3151                if (ApsLinkKeyFrmCntr[i].pendingFlag == TRUE)
   \                     ??ZDSecMgrSaveApsLinkKey_2:
   \   00002C   EE           MOV     A,R6
   \   00002D   F8           MOV     R0,A
   \   00002E   EF           MOV     A,R7
   \   00002F   F9           MOV     R1,A
   \   000030   E8           MOV     A,R0
   \   000031   75F009       MOV     B,#0x9
   \   000034   A4           MUL     AB
   \   000035   C8           XCH     A,R0
   \   000036   AAF0         MOV     R2,B
   \   000038   75F000       MOV     B,#0x0
   \   00003B   A4           MUL     AB
   \   00003C   2A           ADD     A,R2
   \   00003D   FA           MOV     R2,A
   \   00003E   75F009       MOV     B,#0x9
   \   000041   E9           MOV     A,R1
   \   000042   A4           MUL     AB
   \   000043   2A           ADD     A,R2
   \   000044   F9           MOV     R1,A
   \   000045   74..         MOV     A,#(ApsLinkKeyFrmCntr + 8) & 0xff
   \   000047   28           ADD     A,R0
   \   000048   F582         MOV     DPL,A
   \   00004A   74..         MOV     A,#((ApsLinkKeyFrmCntr + 8) >> 8) & 0xff
   \   00004C   39           ADDC    A,R1
   \   00004D   F583         MOV     DPH,A
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   6401         XRL     A,#0x1
   \   000052   6003         JZ      $+5
   \   000054   02....       LJMP    ??ZDSecMgrSaveApsLinkKey_3 & 0xFFFF
   3152                {
   3153                  // retrieve key from NV
   3154                  if (osal_nv_read(ZCD_NV_APS_LINK_KEY_DATA_START + i, 0,
   3155                                   sizeof(APSME_LinkKeyData_t), pKeyData) == SUCCESS)
   \   000057                ; Setup parameters for call to function osal_nv_read
   \   000057   78..         MOV     R0,#?V0
   \   000059   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005C   75..18       MOV     ?V2,#0x18
   \   00005F   75..00       MOV     ?V3,#0x0
   \   000062   78..         MOV     R0,#?V2
   \   000064   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000067   7C00         MOV     R4,#0x0
   \   000069   7D00         MOV     R5,#0x0
   \   00006B   EE           MOV     A,R6
   \   00006C   2401         ADD     A,#0x1
   \   00006E   FA           MOV     R2,A
   \   00006F   EF           MOV     A,R7
   \   000070   3402         ADDC    A,#0x2
   \   000072   FB           MOV     R3,A
   \   000073   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000076   7404         MOV     A,#0x4
   \   000078   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007B   E9           MOV     A,R1
   \   00007C   6003         JZ      $+5
   \   00007E   02....       LJMP    ??ZDSecMgrSaveApsLinkKey_3 & 0xFFFF
   3156                  {
   3157                    pKeyData->txFrmCntr = ApsLinkKeyFrmCntr[i].txFrmCntr;
   \   000081   EE           MOV     A,R6
   \   000082   F8           MOV     R0,A
   \   000083   EF           MOV     A,R7
   \   000084   F9           MOV     R1,A
   \   000085   E8           MOV     A,R0
   \   000086   75F009       MOV     B,#0x9
   \   000089   A4           MUL     AB
   \   00008A   C8           XCH     A,R0
   \   00008B   AAF0         MOV     R2,B
   \   00008D   75F000       MOV     B,#0x0
   \   000090   A4           MUL     AB
   \   000091   2A           ADD     A,R2
   \   000092   FA           MOV     R2,A
   \   000093   75F009       MOV     B,#0x9
   \   000096   E9           MOV     A,R1
   \   000097   A4           MUL     AB
   \   000098   2A           ADD     A,R2
   \   000099   F9           MOV     R1,A
   \   00009A   74..         MOV     A,#ApsLinkKeyFrmCntr & 0xff
   \   00009C   28           ADD     A,R0
   \   00009D   F582         MOV     DPL,A
   \   00009F   74..         MOV     A,#(ApsLinkKeyFrmCntr >> 8) & 0xff
   \   0000A1   39           ADDC    A,R1
   \   0000A2   F583         MOV     DPH,A
   \   0000A4   12....       LCALL   ?XLOAD_R0123
   \   0000A7   E5..         MOV     A,?V0
   \   0000A9   2410         ADD     A,#0x10
   \   0000AB   F582         MOV     DPL,A
   \   0000AD   E4           CLR     A
   \   0000AE   35..         ADDC    A,?V1
   \   0000B0   F583         MOV     DPH,A
   \   0000B2   12....       LCALL   ?XSTORE_R0123
   3158                    pKeyData->rxFrmCntr = ApsLinkKeyFrmCntr[i].rxFrmCntr;
   \   0000B5   EE           MOV     A,R6
   \   0000B6   F8           MOV     R0,A
   \   0000B7   EF           MOV     A,R7
   \   0000B8   F9           MOV     R1,A
   \   0000B9   E8           MOV     A,R0
   \   0000BA   75F009       MOV     B,#0x9
   \   0000BD   A4           MUL     AB
   \   0000BE   C8           XCH     A,R0
   \   0000BF   AAF0         MOV     R2,B
   \   0000C1   75F000       MOV     B,#0x0
   \   0000C4   A4           MUL     AB
   \   0000C5   2A           ADD     A,R2
   \   0000C6   FA           MOV     R2,A
   \   0000C7   75F009       MOV     B,#0x9
   \   0000CA   E9           MOV     A,R1
   \   0000CB   A4           MUL     AB
   \   0000CC   2A           ADD     A,R2
   \   0000CD   F9           MOV     R1,A
   \   0000CE   74..         MOV     A,#(ApsLinkKeyFrmCntr + 4) & 0xff
   \   0000D0   28           ADD     A,R0
   \   0000D1   F582         MOV     DPL,A
   \   0000D3   74..         MOV     A,#((ApsLinkKeyFrmCntr + 4) >> 8) & 0xff
   \   0000D5   39           ADDC    A,R1
   \   0000D6   F583         MOV     DPH,A
   \   0000D8   12....       LCALL   ?XLOAD_R0123
   \   0000DB   E5..         MOV     A,?V0
   \   0000DD   2414         ADD     A,#0x14
   \   0000DF   F582         MOV     DPL,A
   \   0000E1   E4           CLR     A
   \   0000E2   35..         ADDC    A,?V1
   \   0000E4   F583         MOV     DPH,A
   \   0000E6   12....       LCALL   ?XSTORE_R0123
   3159          
   3160                    // Write the APS link key back to the NV
   3161                    osal_nv_write(ZCD_NV_APS_LINK_KEY_DATA_START + i, 0,
   3162                                  sizeof(APSME_LinkKeyData_t), pKeyData);
   \   0000E9                ; Setup parameters for call to function osal_nv_write
   \   0000E9   78..         MOV     R0,#?V0
   \   0000EB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000EE   75..18       MOV     ?V2,#0x18
   \   0000F1   75..00       MOV     ?V3,#0x0
   \   0000F4   78..         MOV     R0,#?V2
   \   0000F6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F9   7C00         MOV     R4,#0x0
   \   0000FB   7D00         MOV     R5,#0x0
   \   0000FD   EE           MOV     A,R6
   \   0000FE   2401         ADD     A,#0x1
   \   000100   FA           MOV     R2,A
   \   000101   EF           MOV     A,R7
   \   000102   3402         ADDC    A,#0x2
   \   000104   FB           MOV     R3,A
   \   000105   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000108   7404         MOV     A,#0x4
   \   00010A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00010D   E9           MOV     A,R1
   3163          
   3164                    // clear the pending write flag
   3165                    ApsLinkKeyFrmCntr[i].pendingFlag = FALSE;
   \   00010E   EE           MOV     A,R6
   \   00010F   F8           MOV     R0,A
   \   000110   EF           MOV     A,R7
   \   000111   F9           MOV     R1,A
   \   000112   E8           MOV     A,R0
   \   000113   75F009       MOV     B,#0x9
   \   000116   A4           MUL     AB
   \   000117   C8           XCH     A,R0
   \   000118   AAF0         MOV     R2,B
   \   00011A   75F000       MOV     B,#0x0
   \   00011D   A4           MUL     AB
   \   00011E   2A           ADD     A,R2
   \   00011F   FA           MOV     R2,A
   \   000120   75F009       MOV     B,#0x9
   \   000123   E9           MOV     A,R1
   \   000124   A4           MUL     AB
   \   000125   2A           ADD     A,R2
   \   000126   F9           MOV     R1,A
   \   000127   74..         MOV     A,#(ApsLinkKeyFrmCntr + 8) & 0xff
   \   000129   28           ADD     A,R0
   \   00012A   F582         MOV     DPL,A
   \   00012C   74..         MOV     A,#((ApsLinkKeyFrmCntr + 8) >> 8) & 0xff
   \   00012E   39           ADDC    A,R1
   \   00012F   F583         MOV     DPH,A
   \   000131   7400         MOV     A,#0x0
   \   000133   F0           MOVX    @DPTR,A
   3166                  }
   3167                }
   3168              }
   \                     ??ZDSecMgrSaveApsLinkKey_3:
   \   000134   0E           INC     R6
   \   000135   EE           MOV     A,R6
   \   000136   7001         JNZ     ??ZDSecMgrSaveApsLinkKey_1
   \   000138   0F           INC     R7
   \                     ??ZDSecMgrSaveApsLinkKey_1:
   \   000139   C3           CLR     C
   \   00013A   EE           MOV     A,R6
   \   00013B   9403         SUBB    A,#0x3
   \   00013D   EF           MOV     A,R7
   \   00013E   9400         SUBB    A,#0x0
   \   000140   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000142   65D0         XRL     A,PSW
   \   000144   33           RLC     A
   \   000145   5003         JNC     $+5
   \   000147   02....       LJMP    ??ZDSecMgrSaveApsLinkKey_2 & 0xFFFF
   3169          
   3170              // clear copy of key in RAM
   3171              osal_memset( pKeyData, 0x00, sizeof(APSME_LinkKeyData_t) );
   \   00014A                ; Setup parameters for call to function osal_memset
   \   00014A   7C18         MOV     R4,#0x18
   \   00014C   7D00         MOV     R5,#0x0
   \   00014E   7900         MOV     R1,#0x0
   \   000150   AA..         MOV     R2,?V0
   \   000152   AB..         MOV     R3,?V1
   \   000154   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   3172          
   3173              osal_mem_free(pKeyData);
   \   000157                ; Setup parameters for call to function osal_mem_free
   \   000157   AA..         MOV     R2,?V0
   \   000159   AB..         MOV     R3,?V1
   \   00015B   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   3174            }
   3175          }
   \                     ??ZDSecMgrSaveApsLinkKey_0:
   \   00015E   7F04         MOV     R7,#0x4
   \   000160   02....       LJMP    ?BANKED_LEAVE_XDATA
   3176          
   3177          /******************************************************************************
   3178           * @fn          ZDSecMgrSaveTCLinkKey
   3179           *
   3180           * @brief       Save TC Link Key to NV. It will loop through all the keys
   3181           *              to see which one to save.
   3182           *
   3183           * @param       none
   3184           *
   3185           * @return      none
   3186           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3187          void ZDSecMgrSaveTCLinkKey(void)
   \                     ZDSecMgrSaveTCLinkKey:
   3188          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   3189            APSME_TCLinkKey_t *pKeyData = NULL;
   \   000005   75..00       MOV     ?V0,#0x0
   \   000008   75..00       MOV     ?V1,#0x0
   3190            uint16 i;
   3191          
   3192            pKeyData = (APSME_TCLinkKey_t *)osal_mem_alloc(sizeof(APSME_TCLinkKey_t));
   \   00000B                ; Setup parameters for call to function osal_mem_alloc
   \   00000B   7A20         MOV     R2,#0x20
   \   00000D   7B00         MOV     R3,#0x0
   \   00000F   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000012   8A..         MOV     ?V2,R2
   \   000014   8B..         MOV     ?V3,R3
   \   000016   85....       MOV     ?V0,?V2
   \   000019   85....       MOV     ?V1,?V3
   3193          
   3194            if (pKeyData != NULL)
   \   00001C   E5..         MOV     A,?V0
   \   00001E   45..         ORL     A,?V1
   \   000020   7003         JNZ     $+5
   \   000022   02....       LJMP    ??ZDSecMgrSaveTCLinkKey_0 & 0xFFFF
   3195            {
   3196              for( i = 0; i < ZDSECMGR_TC_DEVICE_MAX; i++ )
   \   000025   7E00         MOV     R6,#0x0
   \   000027   7F00         MOV     R7,#0x0
   \   000029   02....       LJMP    ??ZDSecMgrSaveTCLinkKey_1 & 0xFFFF
   3197              {
   3198                if (TCLinkKeyFrmCntr[i].pendingFlag == TRUE)
   \                     ??ZDSecMgrSaveTCLinkKey_2:
   \   00002C   EE           MOV     A,R6
   \   00002D   F8           MOV     R0,A
   \   00002E   EF           MOV     A,R7
   \   00002F   F9           MOV     R1,A
   \   000030   E8           MOV     A,R0
   \   000031   75F009       MOV     B,#0x9
   \   000034   A4           MUL     AB
   \   000035   C8           XCH     A,R0
   \   000036   AAF0         MOV     R2,B
   \   000038   75F000       MOV     B,#0x0
   \   00003B   A4           MUL     AB
   \   00003C   2A           ADD     A,R2
   \   00003D   FA           MOV     R2,A
   \   00003E   75F009       MOV     B,#0x9
   \   000041   E9           MOV     A,R1
   \   000042   A4           MUL     AB
   \   000043   2A           ADD     A,R2
   \   000044   F9           MOV     R1,A
   \   000045   74..         MOV     A,#(TCLinkKeyFrmCntr + 8) & 0xff
   \   000047   28           ADD     A,R0
   \   000048   F582         MOV     DPL,A
   \   00004A   74..         MOV     A,#((TCLinkKeyFrmCntr + 8) >> 8) & 0xff
   \   00004C   39           ADDC    A,R1
   \   00004D   F583         MOV     DPH,A
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   6401         XRL     A,#0x1
   \   000052   6003         JZ      $+5
   \   000054   02....       LJMP    ??ZDSecMgrSaveTCLinkKey_3 & 0xFFFF
   3199                {
   3200                  if (osal_nv_read(ZCD_NV_TCLK_TABLE_START + i, 0,
   3201                                   sizeof(APSME_TCLinkKey_t), pKeyData) == SUCCESS)
   \   000057                ; Setup parameters for call to function osal_nv_read
   \   000057   78..         MOV     R0,#?V0
   \   000059   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005C   75..20       MOV     ?V2,#0x20
   \   00005F   75..00       MOV     ?V3,#0x0
   \   000062   78..         MOV     R0,#?V2
   \   000064   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000067   7C00         MOV     R4,#0x0
   \   000069   7D00         MOV     R5,#0x0
   \   00006B   EE           MOV     A,R6
   \   00006C   2401         ADD     A,#0x1
   \   00006E   FA           MOV     R2,A
   \   00006F   EF           MOV     A,R7
   \   000070   3401         ADDC    A,#0x1
   \   000072   FB           MOV     R3,A
   \   000073   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000076   7404         MOV     A,#0x4
   \   000078   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007B   E9           MOV     A,R1
   \   00007C   6003         JZ      $+5
   \   00007E   02....       LJMP    ??ZDSecMgrSaveTCLinkKey_3 & 0xFFFF
   3202                  {
   3203                    pKeyData->txFrmCntr = TCLinkKeyFrmCntr[i].txFrmCntr;
   \   000081   EE           MOV     A,R6
   \   000082   F8           MOV     R0,A
   \   000083   EF           MOV     A,R7
   \   000084   F9           MOV     R1,A
   \   000085   E8           MOV     A,R0
   \   000086   75F009       MOV     B,#0x9
   \   000089   A4           MUL     AB
   \   00008A   C8           XCH     A,R0
   \   00008B   AAF0         MOV     R2,B
   \   00008D   75F000       MOV     B,#0x0
   \   000090   A4           MUL     AB
   \   000091   2A           ADD     A,R2
   \   000092   FA           MOV     R2,A
   \   000093   75F009       MOV     B,#0x9
   \   000096   E9           MOV     A,R1
   \   000097   A4           MUL     AB
   \   000098   2A           ADD     A,R2
   \   000099   F9           MOV     R1,A
   \   00009A   74..         MOV     A,#TCLinkKeyFrmCntr & 0xff
   \   00009C   28           ADD     A,R0
   \   00009D   F582         MOV     DPL,A
   \   00009F   74..         MOV     A,#(TCLinkKeyFrmCntr >> 8) & 0xff
   \   0000A1   39           ADDC    A,R1
   \   0000A2   F583         MOV     DPH,A
   \   0000A4   12....       LCALL   ?XLOAD_R0123
   \   0000A7   E5..         MOV     A,?V0
   \   0000A9   2418         ADD     A,#0x18
   \   0000AB   F582         MOV     DPL,A
   \   0000AD   E4           CLR     A
   \   0000AE   35..         ADDC    A,?V1
   \   0000B0   F583         MOV     DPH,A
   \   0000B2   12....       LCALL   ?XSTORE_R0123
   3204                    pKeyData->rxFrmCntr = TCLinkKeyFrmCntr[i].rxFrmCntr;
   \   0000B5   EE           MOV     A,R6
   \   0000B6   F8           MOV     R0,A
   \   0000B7   EF           MOV     A,R7
   \   0000B8   F9           MOV     R1,A
   \   0000B9   E8           MOV     A,R0
   \   0000BA   75F009       MOV     B,#0x9
   \   0000BD   A4           MUL     AB
   \   0000BE   C8           XCH     A,R0
   \   0000BF   AAF0         MOV     R2,B
   \   0000C1   75F000       MOV     B,#0x0
   \   0000C4   A4           MUL     AB
   \   0000C5   2A           ADD     A,R2
   \   0000C6   FA           MOV     R2,A
   \   0000C7   75F009       MOV     B,#0x9
   \   0000CA   E9           MOV     A,R1
   \   0000CB   A4           MUL     AB
   \   0000CC   2A           ADD     A,R2
   \   0000CD   F9           MOV     R1,A
   \   0000CE   74..         MOV     A,#(TCLinkKeyFrmCntr + 4) & 0xff
   \   0000D0   28           ADD     A,R0
   \   0000D1   F582         MOV     DPL,A
   \   0000D3   74..         MOV     A,#((TCLinkKeyFrmCntr + 4) >> 8) & 0xff
   \   0000D5   39           ADDC    A,R1
   \   0000D6   F583         MOV     DPH,A
   \   0000D8   12....       LCALL   ?XLOAD_R0123
   \   0000DB   E5..         MOV     A,?V0
   \   0000DD   241C         ADD     A,#0x1c
   \   0000DF   F582         MOV     DPL,A
   \   0000E1   E4           CLR     A
   \   0000E2   35..         ADDC    A,?V1
   \   0000E4   F583         MOV     DPH,A
   \   0000E6   12....       LCALL   ?XSTORE_R0123
   3205          
   3206                    // Write the TC link key back to the NV
   3207                    osal_nv_write(ZCD_NV_TCLK_TABLE_START + i, 0,
   3208                                  sizeof(APSME_TCLinkKey_t), pKeyData);
   \   0000E9                ; Setup parameters for call to function osal_nv_write
   \   0000E9   78..         MOV     R0,#?V0
   \   0000EB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000EE   75..20       MOV     ?V2,#0x20
   \   0000F1   75..00       MOV     ?V3,#0x0
   \   0000F4   78..         MOV     R0,#?V2
   \   0000F6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F9   7C00         MOV     R4,#0x0
   \   0000FB   7D00         MOV     R5,#0x0
   \   0000FD   EE           MOV     A,R6
   \   0000FE   2401         ADD     A,#0x1
   \   000100   FA           MOV     R2,A
   \   000101   EF           MOV     A,R7
   \   000102   3401         ADDC    A,#0x1
   \   000104   FB           MOV     R3,A
   \   000105   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000108   7404         MOV     A,#0x4
   \   00010A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00010D   E9           MOV     A,R1
   3209          
   3210                    // clear the pending write flag
   3211                    TCLinkKeyFrmCntr[i].pendingFlag = FALSE;
   \   00010E   EE           MOV     A,R6
   \   00010F   F8           MOV     R0,A
   \   000110   EF           MOV     A,R7
   \   000111   F9           MOV     R1,A
   \   000112   E8           MOV     A,R0
   \   000113   75F009       MOV     B,#0x9
   \   000116   A4           MUL     AB
   \   000117   C8           XCH     A,R0
   \   000118   AAF0         MOV     R2,B
   \   00011A   75F000       MOV     B,#0x0
   \   00011D   A4           MUL     AB
   \   00011E   2A           ADD     A,R2
   \   00011F   FA           MOV     R2,A
   \   000120   75F009       MOV     B,#0x9
   \   000123   E9           MOV     A,R1
   \   000124   A4           MUL     AB
   \   000125   2A           ADD     A,R2
   \   000126   F9           MOV     R1,A
   \   000127   74..         MOV     A,#(TCLinkKeyFrmCntr + 8) & 0xff
   \   000129   28           ADD     A,R0
   \   00012A   F582         MOV     DPL,A
   \   00012C   74..         MOV     A,#((TCLinkKeyFrmCntr + 8) >> 8) & 0xff
   \   00012E   39           ADDC    A,R1
   \   00012F   F583         MOV     DPH,A
   \   000131   7400         MOV     A,#0x0
   \   000133   F0           MOVX    @DPTR,A
   3212                  }
   3213                }
   3214              }
   \                     ??ZDSecMgrSaveTCLinkKey_3:
   \   000134   0E           INC     R6
   \   000135   EE           MOV     A,R6
   \   000136   7001         JNZ     ??ZDSecMgrSaveTCLinkKey_1
   \   000138   0F           INC     R7
   \                     ??ZDSecMgrSaveTCLinkKey_1:
   \   000139   EE           MOV     A,R6
   \   00013A   4F           ORL     A,R7
   \   00013B   7003         JNZ     $+5
   \   00013D   02....       LJMP    ??ZDSecMgrSaveTCLinkKey_2 & 0xFFFF
   3215                // clear copy of key in RAM
   3216              osal_memset( pKeyData, 0x00, sizeof(APSME_TCLinkKey_t) );
   \   000140                ; Setup parameters for call to function osal_memset
   \   000140   7C20         MOV     R4,#0x20
   \   000142   7D00         MOV     R5,#0x0
   \   000144   7900         MOV     R1,#0x0
   \   000146   AA..         MOV     R2,?V0
   \   000148   AB..         MOV     R3,?V1
   \   00014A   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   3217          
   3218              osal_mem_free(pKeyData);
   \   00014D                ; Setup parameters for call to function osal_mem_free
   \   00014D   AA..         MOV     R2,?V0
   \   00014F   AB..         MOV     R3,?V1
   \   000151   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   3219            }
   3220          }
   \                     ??ZDSecMgrSaveTCLinkKey_0:
   \   000154   7F04         MOV     R7,#0x4
   \   000156   02....       LJMP    ?BANKED_LEAVE_XDATA
   3221          
   3222          /******************************************************************************
   3223           * @fn          ZDSecMgrUpdateTCAddress
   3224           *
   3225           * @brief       Update Trust Center address and save to NV.
   3226           *
   3227           * @param       extAddr - [in] extended address or NULL if no TC protected
   3228           *
   3229           * @return      none
   3230           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3231          void ZDSecMgrUpdateTCAddress( uint8 *extAddr )
   \                     ZDSecMgrUpdateTCAddress:
   3232          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   3233            uint8 noTCAddress[Z_EXTADDR_LEN] = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };
   \   00000A   90....       MOV     DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,`
   \   00000D   AC..         MOV     R4,?XSP + 0
   \   00000F   AD..         MOV     R5,?XSP + 1
   \   000011   7408         MOV     A,#0x8
   \   000013   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   3234            APSME_SetRequest( apsTrustCenterAddress, 0, ( extAddr != NULL) ? extAddr : noTCAddress );
   \   000016   EA           MOV     A,R2
   \   000017   4B           ORL     A,R3
   \   000018   700C         JNZ     ??ZDSecMgrUpdateTCAddress_0
   \   00001A   A8..         MOV     R0,?XSP + 0
   \   00001C   A9..         MOV     R1,?XSP + 1
   \   00001E   88..         MOV     ?V0,R0
   \   000020   89..         MOV     ?V1,R1
   \   000022   AA..         MOV     R2,?V0
   \   000024   AB..         MOV     R3,?V1
   \                     ??ZDSecMgrUpdateTCAddress_0:
   \   000026                ; Setup parameters for call to function APSME_SetRequest
   \   000026   EA           MOV     A,R2
   \   000027   FC           MOV     R4,A
   \   000028   EB           MOV     A,R3
   \   000029   FD           MOV     R5,A
   \   00002A   7A00         MOV     R2,#0x0
   \   00002C   7B00         MOV     R3,#0x0
   \   00002E   79AB         MOV     R1,#-0x55
   \   000030   12....       LCALL   `??APSME_SetRequest::?relay`; Banked call to: APSME_SetRequest
   \   000033   E9           MOV     A,R1
   3235          #if defined ( NV_RESTORE )
   3236            osal_nv_write( ZCD_NV_TRUSTCENTER_ADDR, 0, Z_EXTADDR_LEN, zgApsTrustCenterAddr );
   \   000034                ; Setup parameters for call to function osal_nv_write
   \   000034   75....       MOV     ?V0,#zgApsTrustCenterAddr & 0xff
   \   000037   75....       MOV     ?V1,#(zgApsTrustCenterAddr >> 8) & 0xff
   \   00003A   78..         MOV     R0,#?V0
   \   00003C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003F   75..08       MOV     ?V0,#0x8
   \   000042   75..00       MOV     ?V1,#0x0
   \   000045   78..         MOV     R0,#?V0
   \   000047   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004A   7C00         MOV     R4,#0x0
   \   00004C   7D00         MOV     R5,#0x0
   \   00004E   7A71         MOV     R2,#0x71
   \   000050   7B00         MOV     R3,#0x0
   \   000052   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000055   7404         MOV     A,#0x4
   \   000057   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005A   E9           MOV     A,R1
   3237          #endif
   3238          }
   \   00005B   7408         MOV     A,#0x8
   \   00005D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000060   7F02         MOV     R7,#0x2
   \   000062   02....       LJMP    ?BANKED_LEAVE_XDATA
   3239          
   3240          #if defined ( ZBA_FALLBACK_NWKKEY )
   3241          /******************************************************************************
   3242           * @fn          ZDSecMgrFallbackNwkKey
   3243           *
   3244           * @brief       Use the ZBA fallback network key.
   3245           *
   3246           * @param       none
   3247           *
   3248           * @return      none
   3249           */
   3250          void ZDSecMgrFallbackNwkKey( void )
   3251          {
   3252            if ( !_NIB.nwkKeyLoaded )
   3253            {
   3254              uint8 fallbackKey[SEC_KEY_LEN];
   3255          
   3256              ZDSecMgrReadKeyFromNv( ZCD_NV_PRECFGKEY, fallbackKey );
   3257              SSP_UpdateNwkKey( fallbackKey, 0);
   3258              SSP_SwitchNwkKey( 0 );
   3259          
   3260              // clear local copy of key
   3261              osal_memset( fallbackKey, 0x00, SEC_KEY_LEN );
   3262          
   3263              // handle next step in authentication process
   3264              ZDSecMgrAuthNwkKey();
   3265            }
   3266          }
   3267          #endif // defined ( ZBA_FALLBACK_NWKKEY )
   3268          
   3269          #if defined ( NV_RESTORE )
   3270          /******************************************************************************
   3271           * @fn          ZDSecMgrClearNVKeyValues
   3272           *
   3273           * @brief       If NV_RESTORE is enabled and the status of the network needs
   3274           *              default values this fuction clears ZCD_NV_NWKKEY,
   3275           *              ZCD_NV_NWK_ACTIVE_KEY_INFO and ZCD_NV_NWK_ALTERN_KEY_INFO link
   3276           *
   3277           * @param       none
   3278           *
   3279           * @return      none
   3280           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3281          void ZDSecMgrClearNVKeyValues(void)
   \                     ZDSecMgrClearNVKeyValues:
   3282          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 38
   \   000005   74DA         MOV     A,#-0x26
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   3283            nwkActiveKeyItems keyItems;
   3284            nwkKeyDesc nwkKey;
   3285          
   3286            osal_memset(&keyItems, 0x00, sizeof(nwkActiveKeyItems));
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C15         MOV     R4,#0x15
   \   00000C   7D00         MOV     R5,#0x0
   \   00000E   7900         MOV     R1,#0x0
   \   000010   7411         MOV     A,#0x11
   \   000012   12....       LCALL   ?XSTACK_DISP101_8
   \   000015   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   3287          
   3288            osal_nv_write(ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), &keyItems);
   \   000018                ; Setup parameters for call to function osal_nv_write
   \   000018   7411         MOV     A,#0x11
   \   00001A   12....       LCALL   ?XSTACK_DISP100_8
   \   00001D   88..         MOV     ?V0,R0
   \   00001F   89..         MOV     ?V1,R1
   \   000021   78..         MOV     R0,#?V0
   \   000023   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000026   75..15       MOV     ?V0,#0x15
   \   000029   75..00       MOV     ?V1,#0x0
   \   00002C   78..         MOV     R0,#?V0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000031   7C00         MOV     R4,#0x0
   \   000033   7D00         MOV     R5,#0x0
   \   000035   7A82         MOV     R2,#-0x7e
   \   000037   7B00         MOV     R3,#0x0
   \   000039   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00003C   7404         MOV     A,#0x4
   \   00003E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000041   E9           MOV     A,R1
   3289          
   3290            // Initialize NV items for NWK Active and Alternate keys.
   3291            osal_memset( &nwkKey, 0x00, sizeof(nwkKeyDesc) );
   \   000042                ; Setup parameters for call to function osal_memset
   \   000042   7C11         MOV     R4,#0x11
   \   000044   7D00         MOV     R5,#0x0
   \   000046   7900         MOV     R1,#0x0
   \   000048   AA..         MOV     R2,?XSP + 0
   \   00004A   AB..         MOV     R3,?XSP + 1
   \   00004C   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   3292          
   3293            osal_nv_write(ZCD_NV_NWK_ACTIVE_KEY_INFO, 0, sizeof(nwkKeyDesc), &nwkKey);
   \   00004F                ; Setup parameters for call to function osal_nv_write
   \   00004F   A8..         MOV     R0,?XSP + 0
   \   000051   A9..         MOV     R1,?XSP + 1
   \   000053   88..         MOV     ?V0,R0
   \   000055   89..         MOV     ?V1,R1
   \   000057   78..         MOV     R0,#?V0
   \   000059   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005C   75..11       MOV     ?V0,#0x11
   \   00005F   75..00       MOV     ?V1,#0x0
   \   000062   78..         MOV     R0,#?V0
   \   000064   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000067   7C00         MOV     R4,#0x0
   \   000069   7D00         MOV     R5,#0x0
   \   00006B   7A3A         MOV     R2,#0x3a
   \   00006D   7B00         MOV     R3,#0x0
   \   00006F   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000072   7404         MOV     A,#0x4
   \   000074   12....       LCALL   ?DEALLOC_XSTACK8
   \   000077   E9           MOV     A,R1
   3294          
   3295            osal_nv_write(ZCD_NV_NWK_ALTERN_KEY_INFO, 0, sizeof(nwkKeyDesc), &nwkKey);
   \   000078                ; Setup parameters for call to function osal_nv_write
   \   000078   A8..         MOV     R0,?XSP + 0
   \   00007A   A9..         MOV     R1,?XSP + 1
   \   00007C   88..         MOV     ?V0,R0
   \   00007E   89..         MOV     ?V1,R1
   \   000080   78..         MOV     R0,#?V0
   \   000082   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000085   75..11       MOV     ?V0,#0x11
   \   000088   75..00       MOV     ?V1,#0x0
   \   00008B   78..         MOV     R0,#?V0
   \   00008D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000090   7C00         MOV     R4,#0x0
   \   000092   7D00         MOV     R5,#0x0
   \   000094   7A3B         MOV     R2,#0x3b
   \   000096   7B00         MOV     R3,#0x0
   \   000098   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00009B   7404         MOV     A,#0x4
   \   00009D   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A0   E9           MOV     A,R1
   3296          }
   \   0000A1   7426         MOV     A,#0x26
   \   0000A3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A6   7F02         MOV     R7,#0x2
   \   0000A8   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDSecMgrAppKeyType>`:
   \   000000   03           DB 3

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrAddrStore::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAddrStore

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrExtAddrStore::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrExtAddrStore

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrExtAddrLookup::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrExtAddrLookup

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrAddrClear::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAddrClear

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrEntryInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrEntryInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrEntryLookup::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrEntryLookup

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrEntryLookupAMI::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrEntryLookupAMI

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrEntryLookupExt::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrEntryLookupExt

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrEntryLookupExtGetIndex::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrEntryLookupExtGetIndex

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrEntryLookupAMIGetIndex::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrEntryLookupAMIGetIndex

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrEntryFree::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrEntryFree

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrEntryNew::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrEntryNew

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrAppKeyGet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAppKeyGet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrAppKeyReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAppKeyReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrSendNwkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrSendNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrDeviceRemoveByExtAddr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrDeviceRemoveByExtAddr

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrDeviceRemove::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrDeviceRemove

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrDeviceValidateRM::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrDeviceValidateRM

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrDeviceValidate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrDeviceValidate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrDeviceJoin::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrDeviceJoin

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrDeviceJoinDirect::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrDeviceJoinDirect

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrDeviceJoinFwd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrDeviceJoinFwd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrDeviceNew::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrDeviceNew

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrAssocDeviceAuth::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAssocDeviceAuth

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrAuthNwkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAuthNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrConfig::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrConfig

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrPermitJoining::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrPermitJoining

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrPermitJoiningTimeout::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrPermitJoiningTimeout

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrNewDeviceEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrNewDeviceEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrTCExtAddrCheck::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrTCExtAddrCheck

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrTCDataLoad::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrTCDataLoad

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrTransportKeyInd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrTransportKeyInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrUpdateDeviceInd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrUpdateDeviceInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrRemoveDeviceInd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrRemoveDeviceInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrRequestKeyInd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrRequestKeyInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrSwitchKeyInd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrSwitchKeyInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrUpdateNwkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrUpdateNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrSwitchNwkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrSwitchNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrRequestAppKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrRequestAppKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrSetupPartner::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrSetupPartner

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrAppKeyTypeSet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAppKeyTypeSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??APSME_LinkKeySet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    APSME_LinkKeySet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrAuthenticationSet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAuthenticationSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrAuthenticationCheck::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAuthenticationCheck

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??APSME_LinkKeyNVIdGet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    APSME_LinkKeyNVIdGet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??APSME_IsLinkKeyValid::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    APSME_IsLinkKeyValid

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??APSME_KeyFwdToChild::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    APSME_KeyFwdToChild

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrAddLinkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAddLinkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrInitNV::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrInitNV

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrWriteNV::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrWriteNV

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrRestoreFromNV::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrRestoreFromNV

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrSetDefaultNV::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrSetDefaultNV

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrUpdateNV::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrUpdateNV

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrAPSRemove::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrAPSRemove

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??APSME_TCLinkKeyInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    APSME_TCLinkKeyInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??APSME_TCLinkKeySync::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    APSME_TCLinkKeySync

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??APSME_TCLinkKeyLoad::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    APSME_TCLinkKeyLoad

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??APSME_IsDefaultTCLK::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    APSME_IsDefaultTCLK

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrNwkKeyInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrNwkKeyInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrReadKeyFromNv::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrReadKeyFromNv

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrApsLinkKeyInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrApsLinkKeyInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrInitNVKeyTables::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrInitNVKeyTables

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrSaveApsLinkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrSaveApsLinkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrSaveTCLinkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrSaveTCLinkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrUpdateTCAddress::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrUpdateTCAddress

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDSecMgrClearNVKeyValues::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDSecMgrClearNVKeyValues

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e9:
   \   000000   E9030000     DD 1001

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_b:
   \   000000   0B000000     DD 11

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1:
   \   000000   01000000     DD 1

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_a:
   \   000000   0A000000     DD 10
   3297          #endif // defined ( NV_RESTORE )
   3298          
   3299          /******************************************************************************
   3300          ******************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2     62   APSME_IsDefaultTCLK
        2      0   -> osal_isbufset
      0     37   APSME_IsLinkKeyValid
        0     33   -> APSME_LinkKeyNVIdGet
        0     33   -> osal_mem_alloc
        0     33   -> osal_mem_free
        0     36   -> osal_memcmp
        0     33   -> osal_memset
        0     37   -> osal_nv_read
      2      0   APSME_KeyFwdToChild
        2      0   -> AssocGetWithExt
        2      0   -> ZDSecMgrAssocDeviceAuth
      0     44   APSME_LinkKeyNVIdGet
        0     11   -> ZDSecMgrEntryLookupExt
      0     36   APSME_LinkKeySet
        0     20   -> ZDSecMgrEntryLookupExtGetIndex
        0     18   -> osal_mem_alloc
        0     18   -> osal_mem_free
        0     21   -> osal_memcpy
        0     18   -> osal_memset
        0     22   -> osal_nv_read
        0     22   -> osal_nv_write
      0     57   APSME_TCLinkKeyInit
        0     47   -> osal_memcpy
        0     44   -> osal_memset
        0     46   -> osal_nv_item_init
        0     48   -> osal_nv_read
        0     48   -> osal_nv_write
      0     66   APSME_TCLinkKeyLoad
        0     62   -> APSME_IsDefaultTCLK
        0     62   -> APSME_IsDistributedSecurity
        0     62   -> AddrMgrEntryLookupNwk
        0     62   -> AddrMgrEntryRelease
        0     62   -> AddrMgrExtAddrEqual
        0     62   -> AddrMgrExtAddrValid
        0     62   -> osal_memset
        0     66   -> osal_nv_read
        0     62   -> osal_set_event
      0     52   APSME_TCLinkKeySync
        0     48   -> APSME_IsDefaultTCLK
        0     48   -> APSME_LookupExtAddr
        0     48   -> AddrMgrExtAddrEqual
        0     48   -> AddrMgrExtAddrValid
        0     48   -> osal_memset
        0     52   -> osal_nv_read
        0     48   -> sAddrExtCmp
      2     10   ZDSecMgrAPSRemove
        2      8   -> ZDSecMgrDeviceRemove
      0     18   ZDSecMgrAddLinkKey
        0     14   -> APSME_LinkKeySet
        0     16   -> ZDSecMgrAddrStore
        0     14   -> ZDSecMgrEntryLookupAMI
        0     14   -> ZDSecMgrEntryNew
        0     14   -> ZDSecMgrWriteNV
      0     57   ZDSecMgrAddrClear
        0     24   -> AddrMgrEntryRelease
        0     24   -> ZDSecMgrExtAddrLookup
      0     53   ZDSecMgrAddrStore
        0     22   -> AddrMgrEntryUpdate
        0     22   -> AddrMgrExtAddrSet
      3     57   ZDSecMgrAppKeyGet
        2      0   -> SSP_GetTrueRand
      0     57   ZDSecMgrAppKeyReq
        0     49   -> APSME_LookupExtAddr
        0     49   -> APSME_LookupNwkAddr
        0     49   -> APSME_TransportKeyReq
        0     57   -> ZDSecMgrAppKeyGet
        0     49   -> osal_memset
      2      0   ZDSecMgrAppKeyTypeSet
      0     45   ZDSecMgrApsLinkKeyInit
        0     34   -> osal_memset
        0     36   -> osal_nv_item_init
      2     33   ZDSecMgrAssocDeviceAuth
      2     25   ZDSecMgrAuthNwkKey
        2      0   -> osal_set_event
      0      0   ZDSecMgrAuthenticationCheck
      1     11   ZDSecMgrAuthenticationSet
        0     11   -> ZDSecMgrEntryLookupExt
      0     52   ZDSecMgrClearNVKeyValues
        0     48   -> osal_memset
        0     52   -> osal_nv_write
      2      0   ZDSecMgrConfig
        2      0   -> APSME_SecurityNM
      0     41   ZDSecMgrDeviceJoin
        0     29   -> ZDSecMgrAddrClear
        0     31   -> ZDSecMgrAddrStore
        0     29   -> ZDSecMgrDeviceRemove
        0     29   -> ZDSecMgrDeviceValidate
        0     29   -> ZDSecMgrSendNwkKey
        0     32   -> osal_memcpy
      0     18   ZDSecMgrDeviceJoinDirect
        0      9   -> AssocGetWithShort
        0      9   -> ZDSecMgrAssocDeviceAuth
        0      9   -> ZDSecMgrDeviceJoin
      0     27   ZDSecMgrDeviceJoinFwd
        0     18   -> APSME_UpdateDeviceReq
        0     18   -> AssocGetWithShort
        0     18   -> ZDSecMgrAssocDeviceAuth
      0     42   ZDSecMgrDeviceNew
        0      9   -> APSME_IsDistributedSecurity
        0      9   -> ZDSecMgrDeviceJoinDirect
        0      9   -> ZDSecMgrDeviceJoinFwd
      0     49   ZDSecMgrDeviceRemove
        0     20   -> APSME_RemoveDeviceReq
        0     20   -> AssocGetWithExt
        0     20   -> NLME_GetShortAddr
        0     20   -> NLME_LeaveReq
      0     11   ZDSecMgrDeviceRemoveByExtAddr
        0     11   -> ZDSecMgrEntryFree
        0     11   -> ZDSecMgrEntryLookupExt
      2     29   ZDSecMgrDeviceValidate
        2      0   -> ZDSecMgrDeviceValidateRM
      2      0   ZDSecMgrDeviceValidateRM
      0     31   ZDSecMgrEntryFree
        0     16   -> ZDSecMgrEntryLookupAMIGetIndex
        0     16   -> ZDSecMgrUpdateNV
        0     16   -> osal_mem_alloc
        0     16   -> osal_mem_free
        0     16   -> osal_memset
        0     20   -> osal_nv_write
      0      9   ZDSecMgrEntryInit
        0      9   -> ZDSecMgrRestoreFromNV
        0      9   -> osal_mem_alloc
      0     22   ZDSecMgrEntryLookup
        0     22   -> AddrMgrEntryLookupNwk
      0     23   ZDSecMgrEntryLookupAMI
      0     25   ZDSecMgrEntryLookupAMIGetIndex
      0     22   ZDSecMgrEntryLookupExt
        0     11   -> ZDSecMgrEntryLookupAMI
        0     11   -> ZDSecMgrExtAddrLookup
      0     31   ZDSecMgrEntryLookupExtGetIndex
        0     11   -> ZDSecMgrExtAddrLookup
      0     23   ZDSecMgrEntryNew
      0     46   ZDSecMgrExtAddrLookup
        0     22   -> AddrMgrEntryLookupExt
        0     22   -> AddrMgrExtAddrSet
      0     24   ZDSecMgrExtAddrStore
        0     22   -> AddrMgrEntryUpdate
        0     22   -> AddrMgrExtAddrSet
      2      0   ZDSecMgrInit
        2      0   -> ZDSecMgrConfig
      0     16   ZDSecMgrInitNV
        0     14   -> osal_nv_item_init
        0     16   -> osal_nv_write
      0      9   ZDSecMgrInitNVKeyTables
        0      9   -> APSME_TCLinkKeyInit
        0      9   -> ZDSecMgrApsLinkKeyInit
        0      9   -> ZDSecMgrNwkKeyInit
      1     33   ZDSecMgrNewDeviceEvent
        0     33   -> AddrMgrEntryGet
        0     33   -> AssocGetWithShort
        0     33   -> AssocRemove
        0     33   -> NLME_GetShortAddr
        0     33   -> ZDSecMgrAddrClear
        0     33   -> ZDSecMgrAssocDeviceAuth
        0     33   -> ZDSecMgrDeviceNew
      0     61   ZDSecMgrNwkKeyInit
        0     48   -> osal_memset
        0     50   -> osal_nv_item_init
        0     52   -> osal_nv_write
      2      0   ZDSecMgrPermitJoining
      2      0   ZDSecMgrPermitJoiningTimeout
      0     39   ZDSecMgrReadKeyFromNv
        0     14   -> osal_nv_read
      0     17   ZDSecMgrRemoveDeviceInd
        0     17   -> APSME_LookupNwkAddr
        0     17   -> NLME_GetShortAddr
        0     17   -> ZDSecMgrDeviceRemove
      2      4   ZDSecMgrRequestAppKey
        2      4   -> APSME_RequestKeyReq
      2      0   ZDSecMgrRequestKeyInd
        2      0   -> ZDSecMgrAppKeyReq
      0     31   ZDSecMgrRestoreFromNV
        0     18   -> osal_mem_alloc
        0     18   -> osal_mem_free
        0     18   -> osal_memset
        0     22   -> osal_nv_read
        0     22   -> osal_nv_write
      0     16   ZDSecMgrSaveApsLinkKey
        0     12   -> osal_mem_alloc
        0     12   -> osal_mem_free
        0     12   -> osal_memset
        0     16   -> osal_nv_read
        0     16   -> osal_nv_write
      0     16   ZDSecMgrSaveTCLinkKey
        0     12   -> osal_mem_alloc
        0     12   -> osal_mem_free
        0     12   -> osal_memset
        0     16   -> osal_nv_read
        0     16   -> osal_nv_write
      1     73   ZDSecMgrSendNwkKey
        0     40   -> APSME_TransportKeyReq
        0     40   -> NLME_GetShortAddr
        0     44   -> NLME_ReadNwkKeyInfo
        0     40   -> osal_memset
      0     23   ZDSecMgrSetDefaultNV
        0     19   -> osal_mem_alloc
        0     19   -> osal_mem_free
        0     19   -> osal_memset
        0     23   -> osal_nv_write
      0     25   ZDSecMgrSetupPartner
        0     25   -> AddrMgrEntryUpdate
        0     25   -> AddrMgrExtAddrSet
        0     25   -> AddrMgrExtAddrValid
        0     25   -> ZDP_IEEEAddrReq
        0     25   -> ZDP_NwkAddrReq
      2      0   ZDSecMgrSwitchKeyInd
        2      0   -> SSP_SwitchNwkKey
        2      0   -> ZDApp_NVUpdate
      1     13   ZDSecMgrSwitchNwkKey
        0     13   -> APSME_SwitchKeyReq
        0     13   -> SSP_SwitchNwkKey
        0     13   -> ZDApp_NVUpdate
      0     52   ZDSecMgrTCDataLoad
        0     25   -> APSME_IsDistributedSecurity
        0     25   -> AddrMgrEntryLookupExt
        0     27   -> ZDSecMgrAddrStore
        0     25   -> sAddrExtCpy
      0     17   ZDSecMgrTCExtAddrCheck
        0     17   -> APSME_GetRequest
        0     17   -> sAddrExtCmp
      0     25   ZDSecMgrTransportKeyInd
        0     25   -> SSP_SwitchNwkKey
        0     25   -> SSP_UpdateNwkKey
        0     25   -> ZDSecMgrAuthNwkKey
        0     25   -> ZDSecMgrReadKeyFromNv
        0     25   -> ZDSecMgrTCDataLoad
        0     25   -> ZDSecMgrUpdateTCAddress
        0     25   -> osal_isbufset
        0     25   -> osal_memset
      2      8   ZDSecMgrUpdateDeviceInd
        2      8   -> ZDSecMgrDeviceJoin
      0     32   ZDSecMgrUpdateNV
        0     16   -> osal_nv_read
        0     16   -> osal_nv_write
      1     23   ZDSecMgrUpdateNwkKey
        0     23   -> APSME_TransportKeyReq
        0     23   -> SSP_UpdateNwkKey
        0     23   -> ZDApp_NVUpdate
      0     47   ZDSecMgrUpdateTCAddress
        0     18   -> APSME_SetRequest
        0     22   -> osal_nv_write
      0     30   ZDSecMgrWriteNV
        0     16   -> osal_nv_write


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Constant {255, 255, 255, 255, 255, 255, 255,
       1  ?<Initializer for ZDSecMgrAppKeyType>
      18  APSME_IsDefaultTCLK
       6  APSME_IsDefaultTCLK::?relay
     204  APSME_IsLinkKeyValid
       6  APSME_IsLinkKeyValid::?relay
      73  APSME_KeyFwdToChild
       6  APSME_KeyFwdToChild::?relay
      79  APSME_LinkKeyNVIdGet
       6  APSME_LinkKeyNVIdGet::?relay
     478  APSME_LinkKeySet
       6  APSME_LinkKeySet::?relay
     410  APSME_TCLinkKeyInit
       6  APSME_TCLinkKeyInit::?relay
     428  APSME_TCLinkKeyLoad
       6  APSME_TCLinkKeyLoad::?relay
     438  APSME_TCLinkKeySync
       6  APSME_TCLinkKeySync::?relay
      27  ApsLinkKeyFrmCntr
       9  TCLinkKeyFrmCntr
      32  TrustCenterLinkKey
      99  ZDSecMgrAPSRemove
       6  ZDSecMgrAPSRemove::?relay
     156  ZDSecMgrAddLinkKey
       6  ZDSecMgrAddLinkKey::?relay
      78  ZDSecMgrAddrClear
       6  ZDSecMgrAddrClear::?relay
     121  ZDSecMgrAddrStore
       6  ZDSecMgrAddrStore::?relay
      58  ZDSecMgrAppKeyGet
       6  ZDSecMgrAppKeyGet::?relay
     322  ZDSecMgrAppKeyReq
       6  ZDSecMgrAppKeyReq::?relay
       1  ZDSecMgrAppKeyType
      34  ZDSecMgrAppKeyTypeSet
       6  ZDSecMgrAppKeyTypeSet::?relay
      82  ZDSecMgrApsLinkKeyInit
       6  ZDSecMgrApsLinkKeyInit::?relay
      28  ZDSecMgrAssocDeviceAuth
       6  ZDSecMgrAssocDeviceAuth::?relay
      32  ZDSecMgrAuthNwkKey
       6  ZDSecMgrAuthNwkKey::?relay
       5  ZDSecMgrAuthenticationCheck
       6  ZDSecMgrAuthenticationCheck::?relay
      58  ZDSecMgrAuthenticationSet
       6  ZDSecMgrAuthenticationSet::?relay
     171  ZDSecMgrClearNVKeyValues
       6  ZDSecMgrClearNVKeyValues::?relay
      14  ZDSecMgrConfig
       6  ZDSecMgrConfig::?relay
     284  ZDSecMgrDeviceJoin
       6  ZDSecMgrDeviceJoin::?relay
      45  ZDSecMgrDeviceJoinDirect
       6  ZDSecMgrDeviceJoinDirect::?relay
     251  ZDSecMgrDeviceJoinFwd
       6  ZDSecMgrDeviceJoinFwd::?relay
      46  ZDSecMgrDeviceNew
       6  ZDSecMgrDeviceNew::?relay
     302  ZDSecMgrDeviceRemove
       6  ZDSecMgrDeviceRemove::?relay
      48  ZDSecMgrDeviceRemoveByExtAddr
       6  ZDSecMgrDeviceRemoveByExtAddr::?relay
      28  ZDSecMgrDeviceValidate
       6  ZDSecMgrDeviceValidate::?relay
      21  ZDSecMgrDeviceValidateRM
       6  ZDSecMgrDeviceValidateRM::?relay
       2  ZDSecMgrEntries
     185  ZDSecMgrEntryFree
       6  ZDSecMgrEntryFree::?relay
     172  ZDSecMgrEntryInit
       6  ZDSecMgrEntryInit::?relay
     210  ZDSecMgrEntryLookup
       6  ZDSecMgrEntryLookup::?relay
     152  ZDSecMgrEntryLookupAMI
       6  ZDSecMgrEntryLookupAMI::?relay
     110  ZDSecMgrEntryLookupAMIGetIndex
       6  ZDSecMgrEntryLookupAMIGetIndex::?relay
      71  ZDSecMgrEntryLookupExt
       6  ZDSecMgrEntryLookupExt::?relay
     198  ZDSecMgrEntryLookupExtGetIndex
       6  ZDSecMgrEntryLookupExtGetIndex::?relay
     199  ZDSecMgrEntryNew
       6  ZDSecMgrEntryNew::?relay
     105  ZDSecMgrExtAddrLookup
       6  ZDSecMgrExtAddrLookup::?relay
     121  ZDSecMgrExtAddrStore
       6  ZDSecMgrExtAddrStore::?relay
      14  ZDSecMgrInit
       6  ZDSecMgrInit::?relay
     138  ZDSecMgrInitNV
       6  ZDSecMgrInitNV::?relay
      25  ZDSecMgrInitNVKeyTables
       6  ZDSecMgrInitNVKeyTables::?relay
     256  ZDSecMgrNewDeviceEvent
       6  ZDSecMgrNewDeviceEvent::?relay
     285  ZDSecMgrNwkKeyInit
       6  ZDSecMgrNwkKeyInit::?relay
      49  ZDSecMgrPermitJoining
       6  ZDSecMgrPermitJoining::?relay
       1  ZDSecMgrPermitJoiningEnabled
       1  ZDSecMgrPermitJoiningTimed
      31  ZDSecMgrPermitJoiningTimeout
       6  ZDSecMgrPermitJoiningTimeout::?relay
     215  ZDSecMgrReadKeyFromNv
       6  ZDSecMgrReadKeyFromNv::?relay
      95  ZDSecMgrRemoveDeviceInd
       6  ZDSecMgrRemoveDeviceInd::?relay
      57  ZDSecMgrRequestAppKey
       6  ZDSecMgrRequestAppKey::?relay
      40  ZDSecMgrRequestKeyInd
       6  ZDSecMgrRequestKeyInd::?relay
     728  ZDSecMgrRestoreFromNV
       6  ZDSecMgrRestoreFromNV::?relay
     355  ZDSecMgrSaveApsLinkKey
       6  ZDSecMgrSaveApsLinkKey::?relay
     345  ZDSecMgrSaveTCLinkKey
       6  ZDSecMgrSaveTCLinkKey::?relay
     335  ZDSecMgrSendNwkKey
       6  ZDSecMgrSendNwkKey::?relay
     284  ZDSecMgrSetDefaultNV
       6  ZDSecMgrSetDefaultNV::?relay
     141  ZDSecMgrSetupPartner
       6  ZDSecMgrSetupPartner::?relay
      27  ZDSecMgrSwitchKeyInd
       6  ZDSecMgrSwitchKeyInd::?relay
      71  ZDSecMgrSwitchNwkKey
       6  ZDSecMgrSwitchNwkKey::?relay
       1  ZDSecMgrTCAuthenticated
      97  ZDSecMgrTCDataLoad
       6  ZDSecMgrTCDataLoad::?relay
       8  ZDSecMgrTCExtAddr
      49  ZDSecMgrTCExtAddrCheck
       6  ZDSecMgrTCExtAddrCheck::?relay
     250  ZDSecMgrTransportKeyInd
       6  ZDSecMgrTransportKeyInd::?relay
     160  ZDSecMgrUpdateDeviceInd
       6  ZDSecMgrUpdateDeviceInd::?relay
     313  ZDSecMgrUpdateNV
       6  ZDSecMgrUpdateNV::?relay
     131  ZDSecMgrUpdateNwkKey
       6  ZDSecMgrUpdateNwkKey::?relay
     101  ZDSecMgrUpdateTCAddress
       6  ZDSecMgrUpdateTCAddress::?relay
     275  ZDSecMgrWriteNV
       6  ZDSecMgrWriteNV::?relay
       4  __Constant_1
       4  __Constant_3e9
       4  __Constant_a
       4  __Constant_b

 
 10 801 bytes in segment BANKED_CODE
    402 bytes in segment BANK_RELAYS
      1 byte  in segment XDATA_I
      1 byte  in segment XDATA_ID
     24 bytes in segment XDATA_ROM_C
     81 bytes in segment XDATA_Z
 
 11 204 bytes of CODE  memory
      8 bytes of CONST memory (+ 16 bytes shared)
     82 bytes of XDATA memory

Errors: none
Warnings: none

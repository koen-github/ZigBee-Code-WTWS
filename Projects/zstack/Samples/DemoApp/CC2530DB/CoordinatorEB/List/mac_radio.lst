###############################################################################
#
# IAR C/C++ Compiler V9.20.1.2476 for 8051                22/Feb/2017  14:31:41
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\koen\ZigBee-Code-WTWS\Components\mac\low_level\srf04\mac_radio.c
#    Command line       =  
#        -f
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00002000 -DZDAPP_CONFIG_PAN_ID=0xABCD
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={'H', 'O', 'G', 'E', 'S',
#        'C', 'H', 'O', 'O', 'L', 'U', 'T', 'R', 'E', 'C', 'H'}"
#        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440
#        C:\Users\koen\ZigBee-Code-WTWS\Components\mac\low_level\srf04\mac_radio.c
#        -D HOLD_AUTO_START -D BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D
#        NV_RESTORE -D HAL_UART=TRUE -lC
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\
#        -lA
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\
#        --diag_suppress Pe001,Pa010,Pe1665 -o
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\Obj\
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\Source\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ol --require_prototypes
#    List file          =  
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\mac_radio.lst
#    Object file        =  
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\Obj\mac_radio.r51
#
###############################################################################

C:\Users\koen\ZigBee-Code-WTWS\Components\mac\low_level\srf04\mac_radio.c
      1          /**************************************************************************************************
      2            Filename:       mac_radio.c
      3            Revised:        $Date: 2007-09-11 10:58:41 -0700 (Tue, 11 Sep 2007) $
      4            Revision:       $Revision: 15371 $
      5          
      6            Description:    Describe the purpose and contents of the file.
      7          
      8          
      9            Copyright 2006-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /* ------------------------------------------------------------------------------------------------
     41           *                                          Includes
     42           * ------------------------------------------------------------------------------------------------
     43           */
     44          
     45          /* hal */
     46          #include "hal_types.h"
     47          
     48          /* high-level */
     49          #include "mac_pib.h"
     50          
     51          /* exported low-level */
     52          #include "mac_low_level.h"
     53          
     54          /* low-level specific */
     55          #include "mac_radio.h"
     56          #include "mac_tx.h"
     57          #include "mac_rx.h"
     58          #include "mac_rx_onoff.h"
     59          #include "mac_sleep.h"
     60          #include "mac_backoff_timer.h"
     61          
     62          /* target specific */
     63          #include "mac_radio_defs.h"

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1
     64          
     65          /* debug */
     66          #include "mac_assert.h"
     67          
     68          
     69          /* ------------------------------------------------------------------------------------------------
     70           *                                          Includes
     71           * ------------------------------------------------------------------------------------------------
     72           */
     73          #define ED_RF_POWER_MIN_DBM   (MAC_RADIO_RECEIVER_SENSITIVITY_DBM + MAC_SPEC_ED_MIN_DBM_ABOVE_RECEIVER_SENSITIVITY)
     74          #define ED_RF_POWER_MAX_DBM   MAC_RADIO_RECEIVER_SATURATION_DBM
     75          
     76          
     77          /* ------------------------------------------------------------------------------------------------
     78           *                                        Global Variables
     79           * ------------------------------------------------------------------------------------------------
     80           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     81          uint8 macPhyTxPower;
   \                     macPhyTxPower:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     82          uint8 macPhyChannel;
   \                     macPhyChannel:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     83          
     84          
     85          /* ------------------------------------------------------------------------------------------------
     86           *                                        Local Variables
     87           * ------------------------------------------------------------------------------------------------
     88           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     89          static uint8 reqChannel;
   \                     reqChannel:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     90          static uint8 reqTxPower;
   \                     reqTxPower:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     91          
     92          
     93          /* ------------------------------------------------------------------------------------------------
     94           *                                        Local Functions
     95           * ------------------------------------------------------------------------------------------------
     96           */
     97          static uint8 radioComputeED(int8 rssiDbm);
     98          
     99          
    100          /**************************************************************************************************
    101           * @fn          macRadioInit
    102           *
    103           * @brief       Initialize radio software.
    104           *
    105           * @param       none
    106           *
    107           * @return      none
    108           **************************************************************************************************
    109           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    110          MAC_INTERNAL_API void macRadioInit(void)
   \                     macRadioInit:
    111          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    112            /* variable initialization for this module */
    113            reqChannel    = MAC_RADIO_CHANNEL_DEFAULT;
   \   000004   90....       MOV     DPTR,#reqChannel
   \   000007   740B         MOV     A,#0xb
   \   000009   F0           MOVX    @DPTR,A
    114            macPhyChannel = MAC_RADIO_CHANNEL_INVALID;
   \   00000A   90....       MOV     DPTR,#macPhyChannel
   \   00000D   74FF         MOV     A,#-0x1
   \   00000F   F0           MOVX    @DPTR,A
    115            macPhyTxPower = MAC_RADIO_TX_POWER_INVALID;
   \   000010   90....       MOV     DPTR,#macPhyTxPower
   \   000013   74FF         MOV     A,#-0x1
   \   000015   F0           MOVX    @DPTR,A
    116            reqTxPower    = MAC_RADIO_TX_POWER_INVALID;
   \   000016   90....       MOV     DPTR,#reqTxPower
   \   000019   74FF         MOV     A,#-0x1
   \   00001B   F0           MOVX    @DPTR,A
    117          }
   \   00001C   D083         POP     DPH
   \   00001E   D082         POP     DPL
   \   000020   02....       LJMP    ?BRET
    118          
    119          
    120          /**************************************************************************************************
    121           * @fn          macRadioReset
    122           *
    123           * @brief       Resets the radio module.
    124           *
    125           * @param       none
    126           *
    127           * @return      none
    128           **************************************************************************************************
    129           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    130          MAC_INTERNAL_API void macRadioReset(void)
   \                     macRadioReset:
    131          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    132            macRadioStopScan();
   \   000004                ; Setup parameters for call to function macRadioStopScan
   \   000004   12....       LCALL   `??macRadioStopScan::?relay`; Banked call to: macRadioStopScan
    133            macRadioEnergyDetectStop();
   \   000007                ; Setup parameters for call to function macRadioEnergyDetectStop
   \   000007   12....       LCALL   `??macRadioEnergyDetectStop::?relay`; Banked call to: macRadioEnergyDetectStop
   \   00000A   E9           MOV     A,R1
    134          }
   \   00000B   D083         POP     DPH
   \   00000D   D082         POP     DPL
   \   00000F   02....       LJMP    ?BRET
    135          
    136          
    137          /**************************************************************************************************
    138           * @fn          macRadioRandomByte
    139           *
    140           * @brief       Return a random byte derived from previously set random seed.
    141           *
    142           * @param       none
    143           *
    144           * @return      a random byte
    145           **************************************************************************************************
    146           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    147          MAC_INTERNAL_API uint8 macRadioRandomByte(void)
   \                     macRadioRandomByte:
    148          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    149            return(MAC_RADIO_RANDOM_BYTE());
   \   000004                ; Setup parameters for call to function macMcuRandomByte
   \   000004   12....       LCALL   `??macMcuRandomByte::?relay`; Banked call to: macMcuRandomByte
   \   000007   D083         POP     DPH
   \   000009   D082         POP     DPL
   \   00000B   02....       LJMP    ?BRET
    150          }
    151          
    152          
    153          /**************************************************************************************************
    154           * @fn          macRadioSetPanCoordinator
    155           *
    156           * @brief       Configure the pan coordinator status of the radio
    157           *
    158           * @param       panCoordFlag - non-zero to configure radio to be pan coordinator
    159           *                             zero to configure radio as NON pan coordinator
    160           *
    161           * @return      none
    162           **************************************************************************************************
    163           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    164          MAC_INTERNAL_API void macRadioSetPanCoordinator(uint8 panCoordFlag)
   \                     macRadioSetPanCoordinator:
    165          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    166            /* abstracted radio configuration */
    167            MAC_RADIO_SET_PAN_COORDINATOR(panCoordFlag);
   \   000005   906180       MOV     DPTR,#0x6180
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F8           MOV     R0,A
   \   00000A   E9           MOV     A,R1
   \   00000B   6004         JZ      ??macRadioSetPanCoordinator_0
   \   00000D   D2..         SETB    ?VB.0
   \   00000F   8002         SJMP    ??macRadioSetPanCoordinator_1
   \                     ??macRadioSetPanCoordinator_0:
   \   000011   C2..         CLR     ?VB.0
   \                     ??macRadioSetPanCoordinator_1:
   \   000013   75F002       MOV     B,#0x2
   \   000016   A2..         MOV     C,?VB.0
   \   000018   E4           CLR     A
   \   000019   33           RLC     A
   \   00001A   A4           MUL     AB
   \   00001B   FA           MOV     R2,A
   \   00001C   74FD         MOV     A,#-0x3
   \   00001E   58           ANL     A,R0
   \   00001F   4A           ORL     A,R2
   \   000020   906180       MOV     DPTR,#0x6180
   \   000023   F0           MOVX    @DPTR,A
    168          }
   \   000024   7F01         MOV     R7,#0x1
   \   000026   02....       LJMP    ?BANKED_LEAVE_XDATA
    169          
    170          
    171          /**************************************************************************************************
    172           * @fn          macRadioSetPanID
    173           *
    174           * @brief       Set the pan ID on the radio.
    175           *
    176           * @param       panID - 16 bit PAN identifier
    177           *
    178           * @return      none
    179           **************************************************************************************************
    180           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    181          void macRadioSetPanID(uint16 panID)
   \                     macRadioSetPanID:
    182          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    183            /* abstracted radio configuration */
    184            MAC_RADIO_SET_PAN_ID(panID);
   \   000004   EA           MOV     A,R2
   \   000005   906172       MOV     DPTR,#0x6172
   \   000008   F0           MOVX    @DPTR,A
   \   000009   E4           CLR     A
   \   00000A   CB           XCH     A,R3
   \   00000B   FA           MOV     R2,A
   \   00000C   EA           MOV     A,R2
   \   00000D   906173       MOV     DPTR,#0x6173
   \   000010   F0           MOVX    @DPTR,A
    185          }
   \   000011   D083         POP     DPH
   \   000013   D082         POP     DPL
   \   000015   02....       LJMP    ?BRET
    186          
    187          
    188          /**************************************************************************************************
    189           * @fn          macRadioSetShortAddr
    190           *
    191           * @brief       Set the short addrss on the radio.
    192           *
    193           * @param       shortAddr - 16 bit short address
    194           *
    195           * @return      none
    196           **************************************************************************************************
    197           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    198          MAC_INTERNAL_API void macRadioSetShortAddr(uint16 shortAddr)
   \                     macRadioSetShortAddr:
    199          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    200            /* abstracted radio configuration */
    201            MAC_RADIO_SET_SHORT_ADDR(shortAddr);
   \   000004   EA           MOV     A,R2
   \   000005   906174       MOV     DPTR,#0x6174
   \   000008   F0           MOVX    @DPTR,A
   \   000009   E4           CLR     A
   \   00000A   CB           XCH     A,R3
   \   00000B   FA           MOV     R2,A
   \   00000C   EA           MOV     A,R2
   \   00000D   906175       MOV     DPTR,#0x6175
   \   000010   F0           MOVX    @DPTR,A
    202          }
   \   000011   D083         POP     DPH
   \   000013   D082         POP     DPL
   \   000015   02....       LJMP    ?BRET
    203          
    204          
    205          /**************************************************************************************************
    206           * @fn          macRadioSetIEEEAddr
    207           *
    208           * @brief       Set the IEEE address on the radio.
    209           *
    210           * @param       pIEEEAddr - pointer to array holding 64 bit IEEE address; array must be little
    211           *                          endian format (starts with lowest signficant byte)
    212           *
    213           * @return      none
    214           **************************************************************************************************
    215           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    216          MAC_INTERNAL_API void macRadioSetIEEEAddr(uint8 * pIEEEAddr)
   \                     macRadioSetIEEEAddr:
    217          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   EA           MOV     A,R2
   \   000005   FC           MOV     R4,A
   \   000006   EB           MOV     A,R3
   \   000007   FD           MOV     R5,A
    218            /* abstracted radio configuration */
    219            MAC_RADIO_SET_IEEE_ADDR(pIEEEAddr);
   \   000008                ; Setup parameters for call to function macMemWriteRam
   \   000008   7908         MOV     R1,#0x8
   \   00000A   7A6A         MOV     R2,#0x6a
   \   00000C   7B61         MOV     R3,#0x61
   \   00000E   12....       LCALL   `??macMemWriteRam::?relay`; Banked call to: macMemWriteRam
    220          }
   \   000011   D083         POP     DPH
   \   000013   D082         POP     DPL
   \   000015   02....       LJMP    ?BRET
    221          
    222          
    223          /**************************************************************************************************
    224           * @fn          macRadioSetTxPower
    225           *
    226           * @brief       Set transmitter power of the radio.
    227           *
    228           * @param       txPower - the minus dBm for power but as a postive integer (or if configured
    229           *                        for it, txPower is the raw register value). If PA/LNA is installed
    230           *                        then txPower becomes positive dBm.
    231           *
    232           * @return      The minus dBm for power actually set according to what is possible according to
    233                          the build and run-time configuration set.
    234           **************************************************************************************************
    235           */
    236          #ifndef HAL_MAC_USE_REGISTER_POWER_VALUES
    237          /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    238          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    239          MAC_INTERNAL_API uint8 macRadioSetTxPower(uint8 txPower)
   \                     macRadioSetTxPower:
    240          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    241            halIntState_t  s;
    242            const uint8 CODE *pTable;
    243          
    244            /* abstracted power table selection */
    245            MAC_RADIO_SELECT_PTABLE(pTable);
   \   000007   907803       MOV     DPTR,#0x7803
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   6495         XRL     A,#0x95
   \   00000D   6008         JZ      ??macRadioSetTxPower_0
   \   00000F   907803       MOV     DPTR,#0x7803
   \   000012   E0           MOVX    A,@DPTR
   \   000013   6434         XRL     A,#0x34
   \   000015   7006         JNZ     ??macRadioSetTxPower_1
   \                     ??macRadioSetTxPower_0:
   \   000017   7C..         MOV     R4,#macRadioDefsTxPwrBare0x95 & 0xff
   \   000019   7D..         MOV     R5,#(macRadioDefsTxPwrBare0x95 >> 8) & 0xff
   \   00001B   8004         SJMP    ??macRadioSetTxPower_2
   \                     ??macRadioSetTxPower_1:
   \   00001D   7C..         MOV     R4,#macRadioDefsTxPwrBare & 0xff
   \   00001F   7D..         MOV     R5,#(macRadioDefsTxPwrBare >> 8) & 0xff
    246          
    247            /* if the selected dBm is out of range, use the closest available */
    248            if ((int8)txPower > (int8)pTable[MAC_RADIO_DEFS_TBL_TXPWR_FIRST_ENTRY])
   \                     ??macRadioSetTxPower_2:
   \   000021   8C82         MOV     DPL,R4
   \   000023   8D83         MOV     DPH,R5
   \   000025   E4           CLR     A
   \   000026   93           MOVC    A,@A+DPTR
   \   000027   C3           CLR     C
   \   000028   9E           SUBB    A,R6
   \   000029   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00002B   65D0         XRL     A,PSW
   \   00002D   33           RLC     A
   \   00002E   5009         JNC     ??macRadioSetTxPower_3
    249            {
    250              /* greater than base value -- out of table range */
    251              txPower = pTable[MAC_RADIO_DEFS_TBL_TXPWR_FIRST_ENTRY];
   \   000030   8C82         MOV     DPL,R4
   \   000032   8D83         MOV     DPH,R5
   \   000034   E4           CLR     A
   \   000035   93           MOVC    A,@A+DPTR
   \   000036   FE           MOV     R6,A
   \   000037   801A         SJMP    ??macRadioSetTxPower_4
    252            }
    253            else if ((int8)txPower < (int8)pTable[MAC_RADIO_DEFS_TBL_TXPWR_LAST_ENTRY])
   \                     ??macRadioSetTxPower_3:
   \   000039   8C82         MOV     DPL,R4
   \   00003B   8D83         MOV     DPH,R5
   \   00003D   A3           INC     DPTR
   \   00003E   E4           CLR     A
   \   00003F   93           MOVC    A,@A+DPTR
   \   000040   F8           MOV     R0,A
   \   000041   EE           MOV     A,R6
   \   000042   C3           CLR     C
   \   000043   98           SUBB    A,R0
   \   000044   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000046   65D0         XRL     A,PSW
   \   000048   33           RLC     A
   \   000049   5008         JNC     ??macRadioSetTxPower_4
    254            {
    255              /* smaller than the lowest power level -- out of table range */
    256              txPower = pTable[MAC_RADIO_DEFS_TBL_TXPWR_LAST_ENTRY];
   \   00004B   8C82         MOV     DPL,R4
   \   00004D   8D83         MOV     DPH,R5
   \   00004F   A3           INC     DPTR
   \   000050   E4           CLR     A
   \   000051   93           MOVC    A,@A+DPTR
   \   000052   FE           MOV     R6,A
    257            }
    258          
    259            /*
    260             *  Set the global variable reqTxPower.  This variable is referenced
    261             *  by the function macRadioUpdateTxPower() to write the radio register.
    262             *
    263             *  A lookup table is used to translate the power level to the register
    264             *  value.
    265             */
    266            HAL_ENTER_CRITICAL_SECTION(s);
   \                     ??macRadioSetTxPower_4:
   \   000053   A2AF         MOV     C,0xa8.7
   \   000055   E4           CLR     A
   \   000056   33           RLC     A
   \   000057   FA           MOV     R2,A
   \   000058   C2AF         CLR     0xa8.7
    267            /* When calculating index to the power register value table,
    268             * either txPower (of uint8 type) has to be explicitly type-casted to int8
    269             * or the subtraction expression has to be type-casted to uint8 to work
    270             * with the integral promotions.
    271             * The latter is more code size efficient and hence the latter is used.
    272             */
    273            {
    274              uint8 index = pTable[MAC_RADIO_DEFS_TBL_TXPWR_FIRST_ENTRY] - txPower
    275                + MAC_RADIO_DEFS_TBL_TXPWR_ENTRIES;
   \   00005A   8C82         MOV     DPL,R4
   \   00005C   8D83         MOV     DPH,R5
   \   00005E   E4           CLR     A
   \   00005F   93           MOVC    A,@A+DPTR
   \   000060   C3           CLR     C
   \   000061   9E           SUBB    A,R6
   \   000062   2402         ADD     A,#0x2
   \   000064   F8           MOV     R0,A
    276              reqTxPower = pTable[index];
   \   000065   7900         MOV     R1,#0x0
   \   000067   EC           MOV     A,R4
   \   000068   28           ADD     A,R0
   \   000069   F582         MOV     DPL,A
   \   00006B   ED           MOV     A,R5
   \   00006C   39           ADDC    A,R1
   \   00006D   F583         MOV     DPH,A
   \   00006F   E4           CLR     A
   \   000070   93           MOVC    A,@A+DPTR
   \   000071   90....       MOV     DPTR,#reqTxPower
   \   000074   F0           MOVX    @DPTR,A
    277          
    278              /* abstracted boost mode selection */
    279              MAC_RADIO_SELECT_BOOST_MODE(reqTxPower);
   \   000075   907803       MOV     DPTR,#0x7803
   \   000078   E0           MOVX    A,@DPTR
   \   000079   6495         XRL     A,#0x95
   \   00007B   6008         JZ      ??macRadioSetTxPower_5
   \   00007D   907803       MOV     DPTR,#0x7803
   \   000080   E0           MOVX    A,@DPTR
   \   000081   6434         XRL     A,#0x34
   \   000083   7016         JNZ     ??macRadioSetTxPower_6
   \                     ??macRadioSetTxPower_5:
   \   000085   90....       MOV     DPTR,#reqTxPower
   \   000088   E0           MOVX    A,@DPTR
   \   000089   64FD         XRL     A,#0xfd
   \   00008B   7008         JNZ     ??macRadioSetTxPower_7
   \   00008D   90....       MOV     DPTR,#reqTxBoost
   \   000090   7401         MOV     A,#0x1
   \   000092   F0           MOVX    @DPTR,A
   \   000093   8006         SJMP    ??macRadioSetTxPower_6
   \                     ??macRadioSetTxPower_7:
   \   000095   90....       MOV     DPTR,#reqTxBoost
   \   000098   7400         MOV     A,#0x0
   \   00009A   F0           MOVX    @DPTR,A
    280            }
    281            HAL_EXIT_CRITICAL_SECTION(s);
   \                     ??macRadioSetTxPower_6:
   \   00009B   EA           MOV     A,R2
   \   00009C   FF           MOV     R7,A
   \   00009D   EA           MOV     A,R2
   \   00009E   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000A0   92AF         MOV     0xa8.7,C
    282          
    283            /* update the radio power setting */
    284            macRadioUpdateTxPower();
   \   0000A2                ; Setup parameters for call to function macRadioUpdateTxPower
   \   0000A2   12....       LCALL   `??macRadioUpdateTxPower::?relay`; Banked call to: macRadioUpdateTxPower
    285          
    286            return txPower;
   \   0000A5   EE           MOV     A,R6
   \   0000A6   F9           MOV     R1,A
   \   0000A7   7F01         MOV     R7,#0x1
   \   0000A9   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0000AC                REQUIRE _A_IEN0
    287          }
    288          
    289          #else
    290          /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
    291          
    292          MAC_INTERNAL_API uint8 macRadioSetTxPower(uint8 txPower)
    293          {
    294            halIntState_t  s;
    295          
    296            /* same as above but with no lookup table, use raw register value */
    297            HAL_ENTER_CRITICAL_SECTION(s);
    298            reqTxPower = txPower;
    299            MAC_RADIO_SELECT_BOOST_MODE(reqTxPower);
    300            HAL_EXIT_CRITICAL_SECTION(s);
    301          
    302            /* update the radio power setting */
    303            macRadioUpdateTxPower();
    304          
    305            return txPower;
    306          }
    307          
    308          #endif
    309          
    310          
    311          /**************************************************************************************************
    312           * @fn          macRadioUpdateTxPower
    313           *
    314           * @brief       Update the radio's transmit power if a new power level has been requested
    315           *
    316           * @param       reqTxPower - file scope variable that holds the last request power level
    317           *              macPhyTxPower - global variable that holds radio's set power level
    318           *
    319           * @return      none
    320           **************************************************************************************************
    321           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    322          MAC_INTERNAL_API void macRadioUpdateTxPower(void)
   \                     macRadioUpdateTxPower:
    323          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    324            halIntState_t  s;
    325          
    326            /*
    327             *  If the requested power setting is different from the actual radio setting,
    328             *  attempt to udpate to the new power setting.
    329             */
    330            HAL_ENTER_CRITICAL_SECTION(s);
   \   000004   A2AF         MOV     C,0xa8.7
   \   000006   E4           CLR     A
   \   000007   33           RLC     A
   \   000008   F8           MOV     R0,A
   \   000009   C2AF         CLR     0xa8.7
    331            if (reqTxPower != macPhyTxPower)
   \   00000B   90....       MOV     DPTR,#reqTxPower
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F9           MOV     R1,A
   \   000010   90....       MOV     DPTR,#macPhyTxPower
   \   000013   E0           MOVX    A,@DPTR
   \   000014   69           XRL     A,R1
   \   000015   6058         JZ      ??macRadioUpdateTxPower_0
    332            {
    333              /*
    334               *  Radio power cannot be updated when the radio is physically transmitting.
    335               *  If there is a possibility radio is transmitting, do not change the power
    336               *  setting.  This function will be called again after the current transmit
    337               *  completes.
    338               */
    339              if (!macRxOutgoingAckFlag && !MAC_TX_IS_PHYSICALLY_ACTIVE())
   \   000017   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   7052         JNZ     ??macRadioUpdateTxPower_0
   \   00001D   90....       MOV     DPTR,#macTxActive
   \   000020   E0           MOVX    A,@DPTR
   \   000021   A2E7         MOV     C,0xE0 /* A   */.7
   \   000023   404A         JC      ??macRadioUpdateTxPower_0
    340              {
    341                /*
    342                 *  Set new power level;  update the shadow value and write
    343                 *  the new value to the radio hardware.
    344                 */
    345                macPhyTxPower = reqTxPower;
   \   000025   90....       MOV     DPTR,#reqTxPower
   \   000028   E0           MOVX    A,@DPTR
   \   000029   90....       MOV     DPTR,#macPhyTxPower
   \   00002C   F0           MOVX    @DPTR,A
    346                MAC_RADIO_SET_TX_POWER(macPhyTxPower);
   \   00002D   907803       MOV     DPTR,#0x7803
   \   000030   E0           MOVX    A,@DPTR
   \   000031   6495         XRL     A,#0x95
   \   000033   6008         JZ      ??macRadioUpdateTxPower_1
   \   000035   907803       MOV     DPTR,#0x7803
   \   000038   E0           MOVX    A,@DPTR
   \   000039   6434         XRL     A,#0x34
   \   00003B   702A         JNZ     ??macRadioUpdateTxPower_2
   \                     ??macRadioUpdateTxPower_1:
   \   00003D   90....       MOV     DPTR,#macPhyTxPower
   \   000040   E0           MOVX    A,@DPTR
   \   000041   906190       MOV     DPTR,#0x6190
   \   000044   F0           MOVX    @DPTR,A
   \   000045   90....       MOV     DPTR,#reqTxBoost
   \   000048   E0           MOVX    A,@DPTR
   \   000049   600E         JZ      ??macRadioUpdateTxPower_3
   \   00004B   9061AC       MOV     DPTR,#0x61ac
   \   00004E   74F5         MOV     A,#-0xb
   \   000050   F0           MOVX    @DPTR,A
   \   000051   906191       MOV     DPTR,#0x6191
   \   000054   7474         MOV     A,#0x74
   \   000056   F0           MOVX    @DPTR,A
   \   000057   8016         SJMP    ??macRadioUpdateTxPower_0
   \                     ??macRadioUpdateTxPower_3:
   \   000059   9061AC       MOV     DPTR,#0x61ac
   \   00005C   7455         MOV     A,#0x55
   \   00005E   F0           MOVX    @DPTR,A
   \   00005F   906191       MOV     DPTR,#0x6191
   \   000062   7469         MOV     A,#0x69
   \   000064   F0           MOVX    @DPTR,A
   \   000065   8008         SJMP    ??macRadioUpdateTxPower_0
   \                     ??macRadioUpdateTxPower_2:
   \   000067   90....       MOV     DPTR,#macPhyTxPower
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   906190       MOV     DPTR,#0x6190
   \   00006E   F0           MOVX    @DPTR,A
    347              }
    348            }
    349            HAL_EXIT_CRITICAL_SECTION(s);
   \                     ??macRadioUpdateTxPower_0:
   \   00006F   E8           MOV     A,R0
   \   000070   F9           MOV     R1,A
   \   000071   E8           MOV     A,R0
   \   000072   A2E0         MOV     C,0xE0 /* A   */.0
   \   000074   92AF         MOV     0xa8.7,C
    350          }
   \   000076   D083         POP     DPH
   \   000078   D082         POP     DPL
   \   00007A   02....       LJMP    ?BRET
   \   00007D                REQUIRE _A_IEN0
    351          
    352          
    353          /**************************************************************************************************
    354           * @fn          macRadioSetChannel
    355           *
    356           * @brief       Set radio channel.
    357           *
    358           * @param       channel - channel number, valid range is 11 through 26. Allow
    359           *              channels 27 and 28 for some Japanese customers.
    360           *
    361           * @return      none
    362           **************************************************************************************************
    363           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    364          MAC_INTERNAL_API void macRadioSetChannel(uint8 channel)
   \                     macRadioSetChannel:
    365          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
    366            halIntState_t  s;
    367          
    368            MAC_ASSERT((channel >= 11) && (channel <= 28));  /* illegal channel */
   \   000007   EF           MOV     A,R7
   \   000008   C3           CLR     C
   \   000009   940B         SUBB    A,#0xb
   \   00000B   C3           CLR     C
   \   00000C   9412         SUBB    A,#0x12
   \   00000E   4003         JC      ??macRadioSetChannel_0
   \   000010                ; Setup parameters for call to function halAssertHandler
   \   000010   12....       LCALL   `??halAssertHandler::?relay`; Banked call to: halAssertHandler
    369          
    370            /* critical section to make sure transmit does not start while updating channel */
    371            HAL_ENTER_CRITICAL_SECTION(s);
   \                     ??macRadioSetChannel_0:
   \   000013   A2AF         MOV     C,0xa8.7
   \   000015   E4           CLR     A
   \   000016   33           RLC     A
   \   000017   FE           MOV     R6,A
   \   000018   C2AF         CLR     0xa8.7
    372          
    373            /* set requested channel */
    374            reqChannel = channel;
   \   00001A   EF           MOV     A,R7
   \   00001B   90....       MOV     DPTR,#reqChannel
   \   00001E   F0           MOVX    @DPTR,A
    375          
    376            /*
    377             *  If transmit is not active, update the radio hardware immediately.  If transmit is active,
    378             *  the channel will be updated at the end of the current transmit.
    379             */
    380            if (!macTxActive)
   \   00001F   90....       MOV     DPTR,#macTxActive
   \   000022   E0           MOVX    A,@DPTR
   \   000023   7003         JNZ     ??macRadioSetChannel_1
    381            {
    382              macRadioUpdateChannel();
   \   000025                ; Setup parameters for call to function macRadioUpdateChannel
   \   000025   12....       LCALL   `??macRadioUpdateChannel::?relay`; Banked call to: macRadioUpdateChannel
    383            }
    384          
    385            HAL_EXIT_CRITICAL_SECTION(s);
   \                     ??macRadioSetChannel_1:
   \   000028   EE           MOV     A,R6
   \   000029   F8           MOV     R0,A
   \   00002A   EE           MOV     A,R6
   \   00002B   A2E0         MOV     C,0xE0 /* A   */.0
   \   00002D   92AF         MOV     0xa8.7,C
    386          }
   \   00002F   7F01         MOV     R7,#0x1
   \   000031   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000034                REQUIRE _A_IEN0
    387          
    388          
    389          /**************************************************************************************************
    390           * @fn          macRadioUpdateChannel
    391           *
    392           * @brief       Update the radio channel if a new channel has been requested.
    393           *
    394           * @param       none
    395           *
    396           * @return      none
    397           **************************************************************************************************
    398           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    399          MAC_INTERNAL_API void macRadioUpdateChannel(void)
   \                     macRadioUpdateChannel:
    400          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    401            halIntState_t  s;
    402          
    403            MAC_ASSERT(!macTxActive); /* cannot change channel during a transmit */
   \   000005   90....       MOV     DPTR,#macTxActive
   \   000008   E0           MOVX    A,@DPTR
   \   000009   6003         JZ      ??macRadioUpdateChannel_0
   \   00000B                ; Setup parameters for call to function halAssertHandler
   \   00000B   12....       LCALL   `??halAssertHandler::?relay`; Banked call to: halAssertHandler
    404          
    405            /* if the channel has changed, set the radio to the new channel */
    406            HAL_ENTER_CRITICAL_SECTION(s);
   \                     ??macRadioUpdateChannel_0:
   \   00000E   A2AF         MOV     C,0xa8.7
   \   000010   E4           CLR     A
   \   000011   33           RLC     A
   \   000012   F8           MOV     R0,A
   \   000013   C2AF         CLR     0xa8.7
    407            if (reqChannel != macPhyChannel)
   \   000015   90....       MOV     DPTR,#reqChannel
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F9           MOV     R1,A
   \   00001A   90....       MOV     DPTR,#macPhyChannel
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   69           XRL     A,R1
   \   00001F   6028         JZ      ??macRadioUpdateChannel_1
    408            {
    409              macPhyChannel = reqChannel;
   \   000021   90....       MOV     DPTR,#reqChannel
   \   000024   E0           MOVX    A,@DPTR
   \   000025   90....       MOV     DPTR,#macPhyChannel
   \   000028   F0           MOVX    @DPTR,A
    410              HAL_EXIT_CRITICAL_SECTION(s);
   \   000029   E8           MOV     A,R0
   \   00002A   FE           MOV     R6,A
   \   00002B   E8           MOV     A,R0
   \   00002C   A2E0         MOV     C,0xE0 /* A   */.0
   \   00002E   92AF         MOV     0xa8.7,C
    411          
    412              /* changing the channel stops any receive in progress */
    413              macRxOff();
   \   000030                ; Setup parameters for call to function macRxOff
   \   000030   12....       LCALL   `??macRxOff::?relay` ; Banked call to: macRxOff
    414              MAC_RADIO_SET_CHANNEL(macPhyChannel);
   \   000033   75F005       MOV     B,#0x5
   \   000036   90....       MOV     DPTR,#macPhyChannel
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   A4           MUL     AB
   \   00003B   24D4         ADD     A,#-0x2c
   \   00003D   90618F       MOV     DPTR,#0x618f
   \   000040   F0           MOVX    @DPTR,A
    415          
    416              /* If the channel is updated in the middle of receiving a frame, we must
    417               * clean up the Rx logic.
    418               */
    419              macRxHaltCleanup();
   \   000041                ; Setup parameters for call to function macRxHaltCleanup
   \   000041   12....       LCALL   `??macRxHaltCleanup::?relay`; Banked call to: macRxHaltCleanup
    420          
    421              macRxOnRequest();
   \   000044                ; Setup parameters for call to function macRxOnRequest
   \   000044   12....       LCALL   `??macRxOnRequest::?relay`; Banked call to: macRxOnRequest
   \   000047   8007         SJMP    ??macRadioUpdateChannel_2
    422            }
    423            else
    424            {
    425              HAL_EXIT_CRITICAL_SECTION(s);
   \                     ??macRadioUpdateChannel_1:
   \   000049   E8           MOV     A,R0
   \   00004A   F9           MOV     R1,A
   \   00004B   E8           MOV     A,R0
   \   00004C   A2E0         MOV     C,0xE0 /* A   */.0
   \   00004E   92AF         MOV     0xa8.7,C
    426            }
    427          }
   \                     ??macRadioUpdateChannel_2:
   \   000050   7F01         MOV     R7,#0x1
   \   000052   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000055                REQUIRE _A_IEN0
    428          
    429          
    430          /**************************************************************************************************
    431           * @fn          macRadioStartScan
    432           *
    433           * @brief       Puts radio into selected scan mode.
    434           *
    435           * @param       scanMode - scan mode, see #defines in .h file
    436           *
    437           * @return      none
    438           **************************************************************************************************
    439           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    440          MAC_INTERNAL_API void macRadioStartScan(uint8 scanMode)
   \                     macRadioStartScan:
    441          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    442            MAC_ASSERT(macSleepState == MAC_SLEEP_STATE_AWAKE); /* radio must be awake */
   \   000007   90....       MOV     DPTR,#macSleepState
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   6003         JZ      ??macRadioStartScan_0
   \   00000D                ; Setup parameters for call to function halAssertHandler
   \   00000D   12....       LCALL   `??halAssertHandler::?relay`; Banked call to: halAssertHandler
    443            MAC_ASSERT(macRxFilter == RX_FILTER_OFF); /* all filtering must be off to start scan */
   \                     ??macRadioStartScan_0:
   \   000010   90....       MOV     DPTR,#macRxFilter
   \   000013   E0           MOVX    A,@DPTR
   \   000014   6003         JZ      ??macRadioStartScan_1
   \   000016                ; Setup parameters for call to function halAssertHandler
   \   000016   12....       LCALL   `??halAssertHandler::?relay`; Banked call to: halAssertHandler
    444          
    445            /* set the receive filter based on the selected scan mode */
    446            if (scanMode == MAC_SCAN_ED)
   \                     ??macRadioStartScan_1:
   \   000019   EE           MOV     A,R6
   \   00001A   7008         JNZ     ??macRadioStartScan_2
    447            {
    448              macRxFilter = RX_FILTER_ALL;
   \   00001C   90....       MOV     DPTR,#macRxFilter
   \   00001F   7401         MOV     A,#0x1
   \   000021   F0           MOVX    @DPTR,A
   \   000022   802C         SJMP    ??macRadioStartScan_3
    449            }
    450            else if (scanMode == MAC_SCAN_ORPHAN)
   \                     ??macRadioStartScan_2:
   \   000024   7403         MOV     A,#0x3
   \   000026   6E           XRL     A,R6
   \   000027   7008         JNZ     ??macRadioStartScan_4
    451            {
    452              macRxFilter = RX_FILTER_NON_COMMAND_FRAMES;
   \   000029   90....       MOV     DPTR,#macRxFilter
   \   00002C   7403         MOV     A,#0x3
   \   00002E   F0           MOVX    @DPTR,A
   \   00002F   801F         SJMP    ??macRadioStartScan_3
    453            }
    454            else
    455            {
    456          #ifdef FEATURE_ENHANCED_BEACON
    457              MAC_ASSERT((scanMode == MAC_SCAN_ACTIVE_ENHANCED) || (scanMode == MAC_SCAN_ACTIVE) ||
    458                         (scanMode == MAC_SCAN_PASSIVE)); /* invalid scan type */
    459          #else
    460              MAC_ASSERT((scanMode == MAC_SCAN_ACTIVE) ||
    461                         (scanMode == MAC_SCAN_PASSIVE)); /* invalid scan type */
   \                     ??macRadioStartScan_4:
   \   000031   7401         MOV     A,#0x1
   \   000033   6E           XRL     A,R6
   \   000034   6008         JZ      ??macRadioStartScan_5
   \   000036   7402         MOV     A,#0x2
   \   000038   6E           XRL     A,R6
   \   000039   6003         JZ      ??macRadioStartScan_5
   \   00003B                ; Setup parameters for call to function halAssertHandler
   \   00003B   12....       LCALL   `??halAssertHandler::?relay`; Banked call to: halAssertHandler
    462          #endif
    463              macRxFilter = RX_FILTER_NON_BEACON_FRAMES;
   \                     ??macRadioStartScan_5:
   \   00003E   90....       MOV     DPTR,#macRxFilter
   \   000041   7402         MOV     A,#0x2
   \   000043   F0           MOVX    @DPTR,A
    464          
    465              /* for active and passive scans, per spec the pan ID must be 0xFFFF */
    466              MAC_RADIO_SET_PAN_ID(0xFFFF);
   \   000044   906172       MOV     DPTR,#0x6172
   \   000047   74FF         MOV     A,#-0x1
   \   000049   F0           MOVX    @DPTR,A
   \   00004A   906173       MOV     DPTR,#0x6173
   \   00004D   74FF         MOV     A,#-0x1
   \   00004F   F0           MOVX    @DPTR,A
    467            }
    468          }
   \                     ??macRadioStartScan_3:
   \   000050   7F01         MOV     R7,#0x1
   \   000052   02....       LJMP    ?BANKED_LEAVE_XDATA
    469          
    470          
    471          /**************************************************************************************************
    472           * @fn          macRadioStopScan
    473           *
    474           * @brief       Takes radio out of scan mode.  Note can be called if
    475           *
    476           * @param       none
    477           *
    478           * @return      none
    479           **************************************************************************************************
    480           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    481          MAC_INTERNAL_API void macRadioStopScan(void)
   \                     macRadioStopScan:
    482          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    483            macRxFilter = RX_FILTER_OFF;
   \   000004   90....       MOV     DPTR,#macRxFilter
   \   000007   7400         MOV     A,#0x0
   \   000009   F0           MOVX    @DPTR,A
    484          
    485            /* restore the pan ID (passive and active scans set pan ID to 0xFFFF) */
    486            MAC_RADIO_SET_PAN_ID(macPib.panId);
   \   00000A   90....       MOV     DPTR,#macPib + 29
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F8           MOV     R0,A
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F9           MOV     R1,A
   \   000012   E8           MOV     A,R0
   \   000013   906172       MOV     DPTR,#0x6172
   \   000016   F0           MOVX    @DPTR,A
   \   000017   90....       MOV     DPTR,#macPib + 29
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F8           MOV     R0,A
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F9           MOV     R1,A
   \   00001F   E4           CLR     A
   \   000020   C9           XCH     A,R1
   \   000021   F8           MOV     R0,A
   \   000022   E8           MOV     A,R0
   \   000023   906173       MOV     DPTR,#0x6173
   \   000026   F0           MOVX    @DPTR,A
    487          }
   \   000027   D083         POP     DPH
   \   000029   D082         POP     DPL
   \   00002B   02....       LJMP    ?BRET
    488          
    489          
    490          /**************************************************************************************************
    491           * @fn          macRadioEnergyDetectStart
    492           *
    493           * @brief       Initiates energy detect.  The highest energy detected is recorded from the time
    494           *              when this function is called until the energy detect is stopped.
    495           *
    496           * @param       none
    497           *
    498           * @return      none
    499           **************************************************************************************************
    500           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    501          void macRadioEnergyDetectStart(void)
   \                     macRadioEnergyDetectStart:
    502          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    503            MAC_RADIO_RECORD_MAX_RSSI_START();
   \   000004                ; Setup parameters for call to function macMcuRecordMaxRssiStart
   \   000004   12....       LCALL   `??macMcuRecordMaxRssiStart::?relay`; Banked call to: macMcuRecordMaxRssiStart
    504          }
   \   000007   D083         POP     DPH
   \   000009   D082         POP     DPL
   \   00000B   02....       LJMP    ?BRET
    505          
    506          
    507          /**************************************************************************************************
    508           * @fn          macRadioEnergyDetectStop
    509           *
    510           * @brief       Called at completion of an energy detect.  Note: can be called even if energy
    511           *              detect is already stopped (needed by reset).
    512           *
    513           * @param       none
    514           *
    515           * @return      highest energy detect measurement
    516           **************************************************************************************************
    517           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    518          uint8 macRadioEnergyDetectStop(void)
   \                     macRadioEnergyDetectStop:
    519          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    520            uint8 rssiDbm;
    521            uint8 energyDetectMeasurement;
    522          
    523            rssiDbm = MAC_RADIO_RECORD_MAX_RSSI_STOP() + MAC_RADIO_RSSI_OFFSET;
   \   000004                ; Setup parameters for call to function macMcuRecordMaxRssiStop
   \   000004   12....       LCALL   `??macMcuRecordMaxRssiStop::?relay`; Banked call to: macMcuRecordMaxRssiStop
   \   000007   E9           MOV     A,R1
   \   000008   24B7         ADD     A,#-0x49
   \   00000A   F9           MOV     R1,A
    524            MAC_RADIO_RSSI_LNA_OFFSET(rssiDbm);
    525            energyDetectMeasurement = radioComputeED(rssiDbm);
   \   00000B                ; Setup parameters for call to function radioComputeED
   \   00000B   12....       LCALL   `??radioComputeED::?relay`; Banked call to: radioComputeED
   \   00000E   E9           MOV     A,R1
   \   00000F   F9           MOV     R1,A
    526          
    527            return(energyDetectMeasurement);
   \   000010   D083         POP     DPH
   \   000012   D082         POP     DPL
   \   000014   02....       LJMP    ?BRET
    528          }
    529          
    530          /*=================================================================================================
    531           * @fn          radioComputeED
    532           *
    533           * @brief       Compute energy detect measurement.
    534           *
    535           * @param       rssi - raw RSSI value from radio hardware
    536           *
    537           * @return      energy detect measurement in the range of 0x00-0xFF
    538           *=================================================================================================
    539           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    540          static uint8 radioComputeED(int8 rssiDbm)
   \                     radioComputeED:
    541          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
    542            uint8 ed;
    543            int8 min, max;
    544          
    545            /*
    546             *  Keep RF power between minimum and maximum values.
    547             *  This min/max range is derived from datasheet and specification.
    548             */
    549            
    550            min = ED_RF_POWER_MIN_DBM;
   \   000007   7EA9         MOV     R6,#-0x57
    551            MAC_RADIO_SENSITIVITY_OFFSET(min);
    552            max = ED_RF_POWER_MAX_DBM;
   \   000009   7C0A         MOV     R4,#0xa
    553            MAC_RADIO_SATURATION_OFFSET(max);
    554            if (rssiDbm < min)
   \   00000B   EF           MOV     A,R7
   \   00000C   C3           CLR     C
   \   00000D   9E           SUBB    A,R6
   \   00000E   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000010   65D0         XRL     A,PSW
   \   000012   33           RLC     A
   \   000013   5004         JNC     ??radioComputeED_0
    555            {
    556              rssiDbm = min;
   \   000015   EE           MOV     A,R6
   \   000016   FF           MOV     R7,A
   \   000017   800C         SJMP    ??radioComputeED_1
    557            }
    558            else if (rssiDbm > max)
   \                     ??radioComputeED_0:
   \   000019   EC           MOV     A,R4
   \   00001A   C3           CLR     C
   \   00001B   9F           SUBB    A,R7
   \   00001C   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00001E   65D0         XRL     A,PSW
   \   000020   33           RLC     A
   \   000021   5002         JNC     ??radioComputeED_1
    559            {
    560              rssiDbm = max;
   \   000023   EC           MOV     A,R4
   \   000024   FF           MOV     R7,A
    561            }
    562          
    563            /*
    564             *  Create energy detect measurement by normalizing and scaling RF power level.
    565             *
    566             *  Note : The division operation below is designed for maximum accuracy and
    567             *         best granularity.  This is done by grouping the math operations to
    568             *         compute the entire numerator before doing any division.
    569             */
    570            ed = (MAC_SPEC_ED_MAX * (rssiDbm - min)) / (max - min);
   \                     ??radioComputeED_1:
   \   000025   EF           MOV     A,R7
   \   000026   FA           MOV     R2,A
   \   000027   33           RLC     A
   \   000028   95E0         SUBB    A,0xE0 /* A   */
   \   00002A   FB           MOV     R3,A
   \   00002B   EE           MOV     A,R6
   \   00002C   F8           MOV     R0,A
   \   00002D   33           RLC     A
   \   00002E   95E0         SUBB    A,0xE0 /* A   */
   \   000030   F9           MOV     R1,A
   \   000031   EA           MOV     A,R2
   \   000032   C3           CLR     C
   \   000033   98           SUBB    A,R0
   \   000034   F8           MOV     R0,A
   \   000035   EB           MOV     A,R3
   \   000036   99           SUBB    A,R1
   \   000037   F9           MOV     R1,A
   \   000038   E8           MOV     A,R0
   \   000039   75F0FF       MOV     B,#-0x1
   \   00003C   A4           MUL     AB
   \   00003D   C8           XCH     A,R0
   \   00003E   AAF0         MOV     R2,B
   \   000040   75F000       MOV     B,#0x0
   \   000043   A4           MUL     AB
   \   000044   2A           ADD     A,R2
   \   000045   FA           MOV     R2,A
   \   000046   75F0FF       MOV     B,#-0x1
   \   000049   E9           MOV     A,R1
   \   00004A   A4           MUL     AB
   \   00004B   2A           ADD     A,R2
   \   00004C   F9           MOV     R1,A
   \   00004D   EC           MOV     A,R4
   \   00004E   FC           MOV     R4,A
   \   00004F   33           RLC     A
   \   000050   95E0         SUBB    A,0xE0 /* A   */
   \   000052   FD           MOV     R5,A
   \   000053   EE           MOV     A,R6
   \   000054   FA           MOV     R2,A
   \   000055   33           RLC     A
   \   000056   95E0         SUBB    A,0xE0 /* A   */
   \   000058   FB           MOV     R3,A
   \   000059   EC           MOV     A,R4
   \   00005A   C3           CLR     C
   \   00005B   9A           SUBB    A,R2
   \   00005C   FA           MOV     R2,A
   \   00005D   ED           MOV     A,R5
   \   00005E   9B           SUBB    A,R3
   \   00005F   FB           MOV     R3,A
   \   000060   12....       LCALL   ?S_DIV_MOD
   \   000063   E8           MOV     A,R0
   \   000064   F9           MOV     R1,A
    571          
    572            return(ed);
   \   000065   7F01         MOV     R7,#0x1
   \   000067   02....       LJMP    ?BANKED_LEAVE_XDATA
    573          }
    574          
    575          
    576          /**************************************************************************************************
    577           * @fn          macRadioComputeLQI
    578           *
    579           * @brief       Compute link quality indication.
    580           *
    581           * @param       rssi - raw RSSI value from radio hardware
    582           *              corr - correlation value from radio hardware
    583           *
    584           * @return      link quality indicator value
    585           **************************************************************************************************
    586           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    587          MAC_INTERNAL_API uint8 macRadioComputeLQI(int8 rssiDbm, uint8 corr)
   \                     macRadioComputeLQI:
    588          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    589            (void) corr; /* suppress compiler warning of unused parameter */
    590          
    591            /*
    592             *  Note : Currently the LQI value is simply the energy detect measurement.
    593             *         A more accurate value could be derived by using the correlation
    594             *         value along with the RSSI value.
    595             */
    596            return(radioComputeED(rssiDbm));
   \   000007                ; Setup parameters for call to function radioComputeED
   \   000007   EE           MOV     A,R6
   \   000008   F9           MOV     R1,A
   \   000009   12....       LCALL   `??radioComputeED::?relay`; Banked call to: radioComputeED
   \   00000C   7F01         MOV     R7,#0x1
   \   00000E   02....       LJMP    ?BANKED_LEAVE_XDATA
    597          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??macRadioInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRadioInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??macRadioReset::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRadioReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??macRadioRandomByte::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRadioRandomByte

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??macRadioSetPanCoordinator::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRadioSetPanCoordinator

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??macRadioSetPanID::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRadioSetPanID

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??macRadioSetShortAddr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRadioSetShortAddr

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??macRadioSetIEEEAddr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRadioSetIEEEAddr

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??macRadioSetTxPower::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRadioSetTxPower

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??macRadioUpdateTxPower::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRadioUpdateTxPower

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??macRadioSetChannel::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRadioSetChannel

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??macRadioUpdateChannel::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRadioUpdateChannel

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??macRadioStartScan::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRadioStartScan

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??macRadioStopScan::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRadioStopScan

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??macRadioEnergyDetectStart::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRadioEnergyDetectStart

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??macRadioEnergyDetectStop::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRadioEnergyDetectStop

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??radioComputeED::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    radioComputeED

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??macRadioComputeLQI::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRadioComputeLQI
    598          
    599          
    600          /**************************************************************************************************
    601          */

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      9   macRadioComputeLQI
        0      9   -> radioComputeED
      2      0   macRadioEnergyDetectStart
        2      0   -> macMcuRecordMaxRssiStart
      2      0   macRadioEnergyDetectStop
        2      0   -> macMcuRecordMaxRssiStop
        2      0   -> radioComputeED
      2      0   macRadioInit
      2      0   macRadioRandomByte
        2      0   -> macMcuRandomByte
      2      0   macRadioReset
        2      0   -> macRadioEnergyDetectStop
        2      0   -> macRadioStopScan
      0      9   macRadioSetChannel
        0      9   -> halAssertHandler
        0      9   -> macRadioUpdateChannel
      2      0   macRadioSetIEEEAddr
        2      0   -> macMemWriteRam
      0      9   macRadioSetPanCoordinator
      2      0   macRadioSetPanID
      2      0   macRadioSetShortAddr
      0      9   macRadioSetTxPower
        0      9   -> macRadioUpdateTxPower
      0      9   macRadioStartScan
        0      9   -> halAssertHandler
      2      0   macRadioStopScan
      0     18   macRadioUpdateChannel
        0      9   -> halAssertHandler
        0      9   -> macRxHaltCleanup
        0      9   -> macRxOff
        0      9   -> macRxOnRequest
      2      9   macRadioUpdateTxPower
      0     18   radioComputeED


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  _A_IEN0
       1  macPhyChannel
       1  macPhyTxPower
      17  macRadioComputeLQI
       6  macRadioComputeLQI::?relay
      14  macRadioEnergyDetectStart
       6  macRadioEnergyDetectStart::?relay
      23  macRadioEnergyDetectStop
       6  macRadioEnergyDetectStop::?relay
      35  macRadioInit
       6  macRadioInit::?relay
      14  macRadioRandomByte
       6  macRadioRandomByte::?relay
      18  macRadioReset
       6  macRadioReset::?relay
      52  macRadioSetChannel
       6  macRadioSetChannel::?relay
      24  macRadioSetIEEEAddr
       6  macRadioSetIEEEAddr::?relay
      41  macRadioSetPanCoordinator
       6  macRadioSetPanCoordinator::?relay
      24  macRadioSetPanID
       6  macRadioSetPanID::?relay
      24  macRadioSetShortAddr
       6  macRadioSetShortAddr::?relay
     172  macRadioSetTxPower
       6  macRadioSetTxPower::?relay
      85  macRadioStartScan
       6  macRadioStartScan::?relay
      46  macRadioStopScan
       6  macRadioStopScan::?relay
      85  macRadioUpdateChannel
       6  macRadioUpdateChannel::?relay
     125  macRadioUpdateTxPower
       6  macRadioUpdateTxPower::?relay
     106  radioComputeED
       6  radioComputeED::?relay
       1  reqChannel
       1  reqTxPower

 
 905 bytes in segment BANKED_CODE
 102 bytes in segment BANK_RELAYS
   1 byte  in segment SFR_AN
   4 bytes in segment XDATA_Z
 
 1 007 bytes of CODE  memory
     0 bytes of DATA  memory (+ 1 byte shared)
     4 bytes of XDATA memory

Errors: none
Warnings: none

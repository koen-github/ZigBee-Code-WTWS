###############################################################################
#
# IAR C/C++ Compiler V9.20.1.2476 for 8051                22/Feb/2017  14:31:42
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\koen\ZigBee-Code-WTWS\Components\osal\common\OSAL.c
#    Command line       =  
#        -f
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00002000 -DZDAPP_CONFIG_PAN_ID=0xABCD
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={'H', 'O', 'G', 'E', 'S',
#        'C', 'H', 'O', 'O', 'L', 'U', 'T', 'R', 'E', 'C', 'H'}"
#        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440
#        C:\Users\koen\ZigBee-Code-WTWS\Components\osal\common\OSAL.c -D
#        HOLD_AUTO_START -D BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D
#        NV_RESTORE -D HAL_UART=TRUE -lC
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\
#        -lA
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\
#        --diag_suppress Pe001,Pa010,Pe1665 -o
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\Obj\
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\Source\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ol --require_prototypes
#    List file          =  
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\OSAL.lst
#    Object file        =  
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\Obj\OSAL.r51
#
###############################################################################

C:\Users\koen\ZigBee-Code-WTWS\Components\osal\common\OSAL.c
      1          /**************************************************************************************************
      2            Filename:       OSAL.c
      3            Revised:        $Date: 2014-05-06 09:41:18 -0700 (Tue, 06 May 2014) $
      4            Revision:       $Revision: 38415 $
      5          
      6            Description:    This API allows the software components in the Z-stack to be written
      7                            independently of the specifics of the operating system, kernel or tasking
      8                            environment (including control loops or connect-to-interrupt systems).
      9          
     10          
     11            Copyright 2004-2014 Texas Instruments Incorporated. All rights reserved.
     12          
     13            IMPORTANT: Your use of this Software is limited to those specific rights
     14            granted under the terms of a software license agreement between the user
     15            who downloaded the software, his/her employer (which must be your employer)
     16            and Texas Instruments Incorporated (the "License"). You may not use this
     17            Software unless you agree to abide by the terms of the License. The License
     18            limits your use, and you acknowledge, that the Software may not be modified,
     19            copied or distributed unless embedded on a Texas Instruments microcontroller
     20            or used solely and exclusively in conjunction with a Texas Instruments radio
     21            frequency transceiver, which is integrated into your product. Other than for
     22            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     23            works of, modify, distribute, perform, display or sell this Software and/or
     24            its documentation for any purpose.
     25          
     26            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     27            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     28            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     29            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     30            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     31            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     32            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     33            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     34            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     35            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     36            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     37          
     38            Should you have any questions regarding your right to use this Software,
     39            contact Texas Instruments Incorporated at www.TI.com.
     40          **************************************************************************************************/
     41          
     42          /*********************************************************************
     43           * INCLUDES
     44           */
     45          
     46          #include <string.h>
     47          
     48          #include "comdef.h"
     49          #include "hal_board.h"

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1
     50          #include "OSAL.h"
     51          #include "OSAL_Tasks.h"
     52          #include "OSAL_Memory.h"
     53          #include "OSAL_PwrMgr.h"
     54          #include "OSAL_Clock.h"
     55          
     56          #include "OnBoard.h"
     57          
     58          /* HAL */
     59          #include "hal_drivers.h"
     60          
     61          #ifdef IAR_ARMCM3_LM
     62            #include "FreeRTOSConfig.h"
     63            #include "osal_task.h"
     64          #endif
     65          
     66          /*********************************************************************
     67           * MACROS
     68           */
     69          
     70          /*********************************************************************
     71           * CONSTANTS
     72           */
     73          
     74          /*********************************************************************
     75           * TYPEDEFS
     76           */
     77          
     78          /*********************************************************************
     79           * GLOBAL VARIABLES
     80           */
     81          
     82          // Message Pool Definitions

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     83          osal_msg_q_t osal_qHead;
   \                     osal_qHead:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     84          
     85          /*********************************************************************
     86           * EXTERNAL VARIABLES
     87           */
     88          
     89          /*********************************************************************
     90           * EXTERNAL FUNCTIONS
     91           */
     92          
     93          /*********************************************************************
     94           * LOCAL VARIABLES
     95           */
     96          
     97          // Index of active task

   \                                 In  segment XDATA_I, align 1, keep-with-next
     98          static uint8 activeTaskID = TASK_NO_TASK;
   \                     activeTaskID:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for activeTaskID>`
   \   000001                REQUIRE __INIT_XDATA_I
     99          
    100          /*********************************************************************
    101           * LOCAL FUNCTION PROTOTYPES
    102           */
    103          
    104          static uint8 osal_msg_enqueue_push( uint8 destination_task, uint8 *msg_ptr, uint8 urgent );
    105          
    106          /*********************************************************************
    107           * HELPER FUNCTIONS
    108           */
    109          /* very ugly stub so Keil can compile */
    110          #ifdef __KEIL__
    111          char *  itoa ( int value, char * buffer, int radix )
    112          {
    113            return(buffer);
    114          }
    115          #endif
    116          
    117          /*********************************************************************
    118           * @fn      osal_strlen
    119           *
    120           * @brief
    121           *
    122           *   Calculates the length of a string.  The string must be null
    123           *   terminated.
    124           *
    125           * @param   char *pString - pointer to text string
    126           *
    127           * @return  int - number of characters
    128           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    129          int osal_strlen( char *pString )
   \                     osal_strlen:
    130          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    131            return (int)( strlen( pString ) );
   \   000004                ; Setup parameters for call to function strlen
   \   000004   12....       LCALL   `??strlen::?relay`   ; Banked call to: strlen
   \   000007   D083         POP     DPH
   \   000009   D082         POP     DPL
   \   00000B   02....       LJMP    ?BRET
    132          }
    133          
    134          /*********************************************************************
    135           * @fn      osal_memcpy
    136           *
    137           * @brief
    138           *
    139           *   Generic memory copy.
    140           *
    141           *   Note: This function differs from the standard memcpy(), since
    142           *         it returns the pointer to the next destination uint8. The
    143           *         standard memcpy() returns the original destination address.
    144           *
    145           * @param   dst - destination address
    146           * @param   src - source address
    147           * @param   len - number of bytes to copy
    148           *
    149           * @return  pointer to end of destination buffer
    150           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    151          void *osal_memcpy( void *dst, const void GENERIC *src, unsigned int len )
   \                     osal_memcpy:
    152          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    153            uint8 *pDst;
    154            const uint8 GENERIC *pSrc;
    155          
    156            pSrc = src;
   \   000009   7409         MOV     A,#0x9
   \   00000B   12....       LCALL   ?XSTACK_DISP0_8
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F9           MOV     R1,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   FA           MOV     R2,A
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   FB           MOV     R3,A
    157            pDst = dst;
   \   000016   8E82         MOV     DPL,R6
   \   000018   8F83         MOV     DPH,R7
   \   00001A   8011         SJMP    ??osal_memcpy_0
    158          
    159            while ( len-- )
    160              *pDst++ = *pSrc++;
   \                     ??osal_memcpy_1:
   \   00001C   12....       LCALL   ?C_GPTR_LOAD
   \   00001F   C0E0         PUSH    A
   \   000021   D0E0         POP     A
   \   000023   F0           MOVX    @DPTR,A
   \   000024   E9           MOV     A,R1
   \   000025   2401         ADD     A,#0x1
   \   000027   F9           MOV     R1,A
   \   000028   EA           MOV     A,R2
   \   000029   3400         ADDC    A,#0x0
   \   00002B   FA           MOV     R2,A
   \   00002C   A3           INC     DPTR
   \                     ??osal_memcpy_0:
   \   00002D   EC           MOV     A,R4
   \   00002E   FE           MOV     R6,A
   \   00002F   ED           MOV     A,R5
   \   000030   FF           MOV     R7,A
   \   000031   EE           MOV     A,R6
   \   000032   24FF         ADD     A,#-0x1
   \   000034   FC           MOV     R4,A
   \   000035   EF           MOV     A,R7
   \   000036   34FF         ADDC    A,#-0x1
   \   000038   FD           MOV     R5,A
   \   000039   EE           MOV     A,R6
   \   00003A   4F           ORL     A,R7
   \   00003B   70DF         JNZ     ??osal_memcpy_1
    161          
    162            return ( pDst );
   \   00003D   AA82         MOV     R2,DPL
   \   00003F   AB83         MOV     R3,DPH
   \   000041   7F01         MOV     R7,#0x1
   \   000043   02....       LJMP    ?BANKED_LEAVE_XDATA
    163          }
    164          
    165          /*********************************************************************
    166           * @fn      osal_revmemcpy
    167           *
    168           * @brief   Generic reverse memory copy.  Starts at the end of the
    169           *   source buffer, by taking the source address pointer and moving
    170           *   pointer ahead "len" bytes, then decrementing the pointer.
    171           *
    172           *   Note: This function differs from the standard memcpy(), since
    173           *         it returns the pointer to the next destination uint8. The
    174           *         standard memcpy() returns the original destination address.
    175           *
    176           * @param   dst - destination address
    177           * @param   src - source address
    178           * @param   len - number of bytes to copy
    179           *
    180           * @return  pointer to end of destination buffer
    181           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    182          void *osal_revmemcpy( void *dst, const void GENERIC *src, unsigned int len )
   \                     osal_revmemcpy:
    183          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    184            uint8 *pDst;
    185            const uint8 GENERIC *pSrc;
    186          
    187            pSrc = src;
   \   000009   7409         MOV     A,#0x9
   \   00000B   12....       LCALL   ?XSTACK_DISP0_8
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F9           MOV     R1,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   FA           MOV     R2,A
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   FB           MOV     R3,A
    188            pSrc += (len-1);
   \   000016   E9           MOV     A,R1
   \   000017   2C           ADD     A,R4
   \   000018   F9           MOV     R1,A
   \   000019   EA           MOV     A,R2
   \   00001A   3D           ADDC    A,R5
   \   00001B   FA           MOV     R2,A
   \   00001C   E9           MOV     A,R1
   \   00001D   24FF         ADD     A,#-0x1
   \   00001F   F9           MOV     R1,A
   \   000020   EA           MOV     A,R2
   \   000021   34FF         ADDC    A,#-0x1
   \   000023   FA           MOV     R2,A
    189            pDst = dst;
   \   000024   8E82         MOV     DPL,R6
   \   000026   8F83         MOV     DPH,R7
   \   000028   8011         SJMP    ??osal_revmemcpy_0
    190          
    191            while ( len-- )
    192              *pDst++ = *pSrc--;
   \                     ??osal_revmemcpy_1:
   \   00002A   12....       LCALL   ?C_GPTR_LOAD
   \   00002D   C0E0         PUSH    A
   \   00002F   D0E0         POP     A
   \   000031   F0           MOVX    @DPTR,A
   \   000032   E9           MOV     A,R1
   \   000033   24FF         ADD     A,#-0x1
   \   000035   F9           MOV     R1,A
   \   000036   EA           MOV     A,R2
   \   000037   34FF         ADDC    A,#-0x1
   \   000039   FA           MOV     R2,A
   \   00003A   A3           INC     DPTR
   \                     ??osal_revmemcpy_0:
   \   00003B   EC           MOV     A,R4
   \   00003C   FE           MOV     R6,A
   \   00003D   ED           MOV     A,R5
   \   00003E   FF           MOV     R7,A
   \   00003F   EE           MOV     A,R6
   \   000040   24FF         ADD     A,#-0x1
   \   000042   FC           MOV     R4,A
   \   000043   EF           MOV     A,R7
   \   000044   34FF         ADDC    A,#-0x1
   \   000046   FD           MOV     R5,A
   \   000047   EE           MOV     A,R6
   \   000048   4F           ORL     A,R7
   \   000049   70DF         JNZ     ??osal_revmemcpy_1
    193          
    194            return ( pDst );
   \   00004B   AA82         MOV     R2,DPL
   \   00004D   AB83         MOV     R3,DPH
   \   00004F   7F01         MOV     R7,#0x1
   \   000051   02....       LJMP    ?BANKED_LEAVE_XDATA
    195          }
    196          
    197          /*********************************************************************
    198           * @fn      osal_memdup
    199           *
    200           * @brief   Allocates a buffer [with osal_mem_alloc()] and copies
    201           *          the src buffer into the newly allocated space.
    202           *
    203           * @param   src - source address
    204           * @param   len - number of bytes to copy
    205           *
    206           * @return  pointer to the new allocated buffer, or NULL if
    207           *          allocation problem.
    208           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    209          void *osal_memdup( const void GENERIC *src, unsigned int len )
   \                     osal_memdup:
    210          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V4,R1
   \   000007   8A..         MOV     ?V5,R2
   \   000009   8B..         MOV     ?V6,R3
   \   00000B   EC           MOV     A,R4
   \   00000C   FE           MOV     R6,A
   \   00000D   ED           MOV     A,R5
   \   00000E   FF           MOV     R7,A
    211            uint8 *pDst;
    212          
    213            pDst = osal_mem_alloc( len );
   \   00000F                ; Setup parameters for call to function osal_mem_alloc
   \   00000F   EE           MOV     A,R6
   \   000010   FA           MOV     R2,A
   \   000011   EF           MOV     A,R7
   \   000012   FB           MOV     R3,A
   \   000013   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000016   8A..         MOV     ?V2,R2
   \   000018   8B..         MOV     ?V3,R3
   \   00001A   85....       MOV     ?V0,?V2
   \   00001D   85....       MOV     ?V1,?V3
    214            if ( pDst )
   \   000020   E5..         MOV     A,?V0
   \   000022   45..         ORL     A,?V1
   \   000024   601F         JZ      ??osal_memdup_0
    215            {
    216              VOID osal_memcpy( pDst, src, len );
   \   000026                ; Setup parameters for call to function osal_memcpy
   \   000026   78..         MOV     R0,#?V4
   \   000028   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00002B   EE           MOV     A,R6
   \   00002C   FC           MOV     R4,A
   \   00002D   EF           MOV     A,R7
   \   00002E   FD           MOV     R5,A
   \   00002F   AA..         MOV     R2,?V0
   \   000031   AB..         MOV     R3,?V1
   \   000033   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000036   7403         MOV     A,#0x3
   \   000038   12....       LCALL   ?DEALLOC_XSTACK8
   \   00003B   8A..         MOV     ?V2,R2
   \   00003D   8B..         MOV     ?V3,R3
   \   00003F   85..82       MOV     DPL,?V2
   \   000042   85..83       MOV     DPH,?V3
    217            }
    218          
    219            return ( (void *)pDst );
   \                     ??osal_memdup_0:
   \   000045   AA..         MOV     R2,?V0
   \   000047   AB..         MOV     R3,?V1
   \   000049   7F07         MOV     R7,#0x7
   \   00004B   02....       LJMP    ?BANKED_LEAVE_XDATA
    220          }
    221          
    222          /*********************************************************************
    223           * @fn      osal_memcmp
    224           *
    225           * @brief
    226           *
    227           *   Generic memory compare.
    228           *
    229           * @param   src1 - source 1 addrexx
    230           * @param   src2 - source 2 address
    231           * @param   len - number of bytes to compare
    232           *
    233           * @return  TRUE - same, FALSE - different
    234           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    235          uint8 osal_memcmp( const void GENERIC *src1, const void GENERIC *src2, unsigned int len )
   \                     osal_memcmp:
    236          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000   74ED         MOV     A,#-0x13
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 0
    237            const uint8 GENERIC *pSrc1;
    238            const uint8 GENERIC *pSrc2;
    239          
    240            pSrc1 = src1;
   \   000005   89..         MOV     ?V0,R1
   \   000007   8A..         MOV     ?V1,R2
   \   000009   8B..         MOV     ?V2,R3
    241            pSrc2 = src2;
   \   00000B   7413         MOV     A,#0x13
   \   00000D   12....       LCALL   ?XSTACK_DISP0_8
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F5..         MOV     ?V4,A
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V5,A
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F5..         MOV     ?V6,A
    242          
    243            while ( len-- )
   \                     ??osal_memcmp_0:
   \   00001B   EC           MOV     A,R4
   \   00001C   F8           MOV     R0,A
   \   00001D   ED           MOV     A,R5
   \   00001E   F9           MOV     R1,A
   \   00001F   E8           MOV     A,R0
   \   000020   24FF         ADD     A,#-0x1
   \   000022   FC           MOV     R4,A
   \   000023   E9           MOV     A,R1
   \   000024   34FF         ADDC    A,#-0x1
   \   000026   FD           MOV     R5,A
   \   000027   E8           MOV     A,R0
   \   000028   49           ORL     A,R1
   \   000029   604A         JZ      ??osal_memcmp_1
    244            {
    245              if( *pSrc1++ != *pSrc2++ )
   \   00002B   A9..         MOV     R1,?V0
   \   00002D   AA..         MOV     R2,?V1
   \   00002F   AB..         MOV     R3,?V2
   \   000031   89..         MOV     ?V0,R1
   \   000033   8A..         MOV     ?V1,R2
   \   000035   8B..         MOV     ?V2,R3
   \   000037   E5..         MOV     A,?V0
   \   000039   2401         ADD     A,#0x1
   \   00003B   F5..         MOV     ?V0,A
   \   00003D   E5..         MOV     A,?V1
   \   00003F   3400         ADDC    A,#0x0
   \   000041   F5..         MOV     ?V1,A
   \   000043   85....       MOV     ?V8,?V4
   \   000046   85....       MOV     ?V9,?V5
   \   000049   85....       MOV     ?V10,?V6
   \   00004C   85....       MOV     ?V4,?V8
   \   00004F   85....       MOV     ?V5,?V9
   \   000052   85....       MOV     ?V6,?V10
   \   000055   E5..         MOV     A,?V4
   \   000057   2401         ADD     A,#0x1
   \   000059   F5..         MOV     ?V4,A
   \   00005B   E5..         MOV     A,?V5
   \   00005D   3400         ADDC    A,#0x0
   \   00005F   F5..         MOV     ?V5,A
   \   000061   12....       LCALL   ?C_GPTR_LOAD
   \   000064   F8           MOV     R0,A
   \   000065   A9..         MOV     R1,?V8
   \   000067   AA..         MOV     R2,?V9
   \   000069   AB..         MOV     R3,?V10
   \   00006B   12....       LCALL   ?C_GPTR_LOAD
   \   00006E   68           XRL     A,R0
   \   00006F   60AA         JZ      ??osal_memcmp_0
    246                return FALSE;
   \   000071   7900         MOV     R1,#0x0
   \   000073   8002         SJMP    ??osal_memcmp_2
    247            }
    248            return TRUE;
   \                     ??osal_memcmp_1:
   \   000075   7901         MOV     R1,#0x1
   \                     ??osal_memcmp_2:
   \   000077   7F0B         MOV     R7,#0xb
   \   000079   02....       LJMP    ?BANKED_LEAVE_XDATA
    249          }
    250          
    251          
    252          /*********************************************************************
    253           * @fn      osal_memset
    254           *
    255           * @brief
    256           *
    257           *   Set memory buffer to value.
    258           *
    259           * @param   dest - pointer to buffer
    260           * @param   value - what to set each uint8 of the message
    261           * @param   size - how big
    262           *
    263           * @return  pointer to destination buffer
    264           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    265          void *osal_memset( void *dest, uint8 value, int len )
   \                     osal_memset:
    266          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    267            return memset( dest, value, len );
   \   000007                ; Setup parameters for call to function memset
   \   000007   8C..         MOV     ?V0,R4
   \   000009   8D..         MOV     ?V1,R5
   \   00000B   78..         MOV     R0,#?V0
   \   00000D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000010   EE           MOV     A,R6
   \   000011   FC           MOV     R4,A
   \   000012   7D00         MOV     R5,#0x0
   \   000014   12....       LCALL   `??memset::?relay`   ; Banked call to: memset
   \   000017   7402         MOV     A,#0x2
   \   000019   12....       LCALL   ?DEALLOC_XSTACK8
   \   00001C   7F02         MOV     R7,#0x2
   \   00001E   02....       LJMP    ?BANKED_LEAVE_XDATA
    268          }
    269          
    270          /*********************************************************************
    271           * @fn      osal_build_uint16
    272           *
    273           * @brief
    274           *
    275           *   Build a uint16 out of 2 bytes (0 then 1).
    276           *
    277           * @param   swapped - 0 then 1
    278           *
    279           * @return  uint16
    280           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    281          uint16 osal_build_uint16( uint8 *swapped )
   \                     osal_build_uint16:
    282          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    283            return ( BUILD_UINT16( swapped[0], swapped[1] ) );
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   E0           MOVX    A,@DPTR
   \   000009   FC           MOV     R4,A
   \   00000A   7D00         MOV     R5,#0x0
   \   00000C   8A82         MOV     DPL,R2
   \   00000E   8B83         MOV     DPH,R3
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F8           MOV     R0,A
   \   000013   7900         MOV     R1,#0x0
   \   000015   E4           CLR     A
   \   000016   C8           XCH     A,R0
   \   000017   F9           MOV     R1,A
   \   000018   EC           MOV     A,R4
   \   000019   28           ADD     A,R0
   \   00001A   FA           MOV     R2,A
   \   00001B   ED           MOV     A,R5
   \   00001C   39           ADDC    A,R1
   \   00001D   FB           MOV     R3,A
   \   00001E   D083         POP     DPH
   \   000020   D082         POP     DPL
   \   000022   02....       LJMP    ?BRET
    284          }
    285          
    286          /*********************************************************************
    287           * @fn      osal_build_uint32
    288           *
    289           * @brief
    290           *
    291           *   Build a uint32 out of sequential bytes.
    292           *
    293           * @param   swapped - sequential bytes
    294           * @param   len - number of bytes in the uint8 array
    295           *
    296           * @return  uint32
    297           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    298          uint32 osal_build_uint32( uint8 *swapped, uint8 len )
   \                     osal_build_uint32:
    299          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    300            if ( len == 2 )
   \   000007   7402         MOV     A,#0x2
   \   000009   6E           XRL     A,R6
   \   00000A   7036         JNZ     ??osal_build_uint32_0
    301              return ( BUILD_UINT32( swapped[0], swapped[1], 0L, 0L ) );
   \   00000C   8A82         MOV     DPL,R2
   \   00000E   8B83         MOV     DPH,R3
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F5..         MOV     ?V0,A
   \   000013   E4           CLR     A
   \   000014   F5..         MOV     ?V1,A
   \   000016   F5..         MOV     ?V2,A
   \   000018   F5..         MOV     ?V3,A
   \   00001A   8A82         MOV     DPL,R2
   \   00001C   8B83         MOV     DPH,R3
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F5..         MOV     ?V4,A
   \   000022   E4           CLR     A
   \   000023   F5..         MOV     ?V5,A
   \   000025   F5..         MOV     ?V6,A
   \   000027   F5..         MOV     ?V7,A
   \   000029   7408         MOV     A,#0x8
   \   00002B   78..         MOV     R0,#?V4
   \   00002D   12....       LCALL   ?L_SHL
   \   000030   78..         MOV     R0,#?V0
   \   000032   79..         MOV     R1,#?V4
   \   000034   12....       LCALL   ?L_ADD
   \   000037   AA..         MOV     R2,?V0
   \   000039   AB..         MOV     R3,?V1
   \   00003B   AC..         MOV     R4,?V2
   \   00003D   AD..         MOV     R5,?V3
   \   00003F   02....       LJMP    ??osal_build_uint32_1 & 0xFFFF
    302            else if ( len == 3 )
   \                     ??osal_build_uint32_0:
   \   000042   7403         MOV     A,#0x3
   \   000044   6E           XRL     A,R6
   \   000045   7054         JNZ     ??osal_build_uint32_2
    303              return ( BUILD_UINT32( swapped[0], swapped[1], swapped[2], 0L ) );
   \   000047   8A82         MOV     DPL,R2
   \   000049   8B83         MOV     DPH,R3
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   F5..         MOV     ?V0,A
   \   00004E   E4           CLR     A
   \   00004F   F5..         MOV     ?V1,A
   \   000051   F5..         MOV     ?V2,A
   \   000053   F5..         MOV     ?V3,A
   \   000055   8A82         MOV     DPL,R2
   \   000057   8B83         MOV     DPH,R3
   \   000059   A3           INC     DPTR
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   F5..         MOV     ?V4,A
   \   00005D   E4           CLR     A
   \   00005E   F5..         MOV     ?V5,A
   \   000060   F5..         MOV     ?V6,A
   \   000062   F5..         MOV     ?V7,A
   \   000064   7408         MOV     A,#0x8
   \   000066   78..         MOV     R0,#?V4
   \   000068   12....       LCALL   ?L_SHL
   \   00006B   78..         MOV     R0,#?V0
   \   00006D   79..         MOV     R1,#?V4
   \   00006F   12....       LCALL   ?L_ADD
   \   000072   8A82         MOV     DPL,R2
   \   000074   8B83         MOV     DPH,R3
   \   000076   A3           INC     DPTR
   \   000077   A3           INC     DPTR
   \   000078   E0           MOVX    A,@DPTR
   \   000079   F5..         MOV     ?V4,A
   \   00007B   E4           CLR     A
   \   00007C   F5..         MOV     ?V5,A
   \   00007E   F5..         MOV     ?V6,A
   \   000080   F5..         MOV     ?V7,A
   \   000082   7410         MOV     A,#0x10
   \   000084   78..         MOV     R0,#?V4
   \   000086   12....       LCALL   ?L_SHL
   \   000089   78..         MOV     R0,#?V0
   \   00008B   79..         MOV     R1,#?V4
   \   00008D   12....       LCALL   ?L_ADD
   \   000090   AA..         MOV     R2,?V0
   \   000092   AB..         MOV     R3,?V1
   \   000094   AC..         MOV     R4,?V2
   \   000096   AD..         MOV     R5,?V3
   \   000098   02....       LJMP    ??osal_build_uint32_1 & 0xFFFF
    304            else if ( len == 4 )
   \                     ??osal_build_uint32_2:
   \   00009B   7404         MOV     A,#0x4
   \   00009D   6E           XRL     A,R6
   \   00009E   7072         JNZ     ??osal_build_uint32_3
    305              return ( BUILD_UINT32( swapped[0], swapped[1], swapped[2], swapped[3] ) );
   \   0000A0   8A82         MOV     DPL,R2
   \   0000A2   8B83         MOV     DPH,R3
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   F5..         MOV     ?V0,A
   \   0000A7   E4           CLR     A
   \   0000A8   F5..         MOV     ?V1,A
   \   0000AA   F5..         MOV     ?V2,A
   \   0000AC   F5..         MOV     ?V3,A
   \   0000AE   8A82         MOV     DPL,R2
   \   0000B0   8B83         MOV     DPH,R3
   \   0000B2   A3           INC     DPTR
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   F5..         MOV     ?V4,A
   \   0000B6   E4           CLR     A
   \   0000B7   F5..         MOV     ?V5,A
   \   0000B9   F5..         MOV     ?V6,A
   \   0000BB   F5..         MOV     ?V7,A
   \   0000BD   7408         MOV     A,#0x8
   \   0000BF   78..         MOV     R0,#?V4
   \   0000C1   12....       LCALL   ?L_SHL
   \   0000C4   78..         MOV     R0,#?V0
   \   0000C6   79..         MOV     R1,#?V4
   \   0000C8   12....       LCALL   ?L_ADD
   \   0000CB   8A82         MOV     DPL,R2
   \   0000CD   8B83         MOV     DPH,R3
   \   0000CF   A3           INC     DPTR
   \   0000D0   A3           INC     DPTR
   \   0000D1   E0           MOVX    A,@DPTR
   \   0000D2   F5..         MOV     ?V4,A
   \   0000D4   E4           CLR     A
   \   0000D5   F5..         MOV     ?V5,A
   \   0000D7   F5..         MOV     ?V6,A
   \   0000D9   F5..         MOV     ?V7,A
   \   0000DB   7410         MOV     A,#0x10
   \   0000DD   78..         MOV     R0,#?V4
   \   0000DF   12....       LCALL   ?L_SHL
   \   0000E2   78..         MOV     R0,#?V0
   \   0000E4   79..         MOV     R1,#?V4
   \   0000E6   12....       LCALL   ?L_ADD
   \   0000E9   8A82         MOV     DPL,R2
   \   0000EB   8B83         MOV     DPH,R3
   \   0000ED   A3           INC     DPTR
   \   0000EE   A3           INC     DPTR
   \   0000EF   A3           INC     DPTR
   \   0000F0   E0           MOVX    A,@DPTR
   \   0000F1   F5..         MOV     ?V4,A
   \   0000F3   E4           CLR     A
   \   0000F4   F5..         MOV     ?V5,A
   \   0000F6   F5..         MOV     ?V6,A
   \   0000F8   F5..         MOV     ?V7,A
   \   0000FA   7418         MOV     A,#0x18
   \   0000FC   78..         MOV     R0,#?V4
   \   0000FE   12....       LCALL   ?L_SHL
   \   000101   78..         MOV     R0,#?V0
   \   000103   79..         MOV     R1,#?V4
   \   000105   12....       LCALL   ?L_ADD
   \   000108   AA..         MOV     R2,?V0
   \   00010A   AB..         MOV     R3,?V1
   \   00010C   AC..         MOV     R4,?V2
   \   00010E   AD..         MOV     R5,?V3
   \   000110   800D         SJMP    ??osal_build_uint32_1
    306            else
    307              return ( (uint32)swapped[0] );
   \                     ??osal_build_uint32_3:
   \   000112   8A82         MOV     DPL,R2
   \   000114   8B83         MOV     DPH,R3
   \   000116   E0           MOVX    A,@DPTR
   \   000117   F5..         MOV     ?V0,A
   \   000119   AA..         MOV     R2,?V0
   \   00011B   E4           CLR     A
   \   00011C   FB           MOV     R3,A
   \   00011D   FC           MOV     R4,A
   \   00011E   FD           MOV     R5,A
   \                     ??osal_build_uint32_1:
   \   00011F   7F08         MOV     R7,#0x8
   \   000121   02....       LJMP    ?BANKED_LEAVE_XDATA
    308          }
    309          
    310          #if !defined ( ZBIT ) && !defined ( ZBIT2 ) && !defined (UBIT)
    311          /*********************************************************************
    312           * @fn      _ltoa
    313           *
    314           * @brief
    315           *
    316           *   convert a long unsigned int to a string.
    317           *
    318           * @param  l - long to convert
    319           * @param  buf - buffer to convert to
    320           * @param  radix - 10 dec, 16 hex
    321           *
    322           * @return  pointer to buffer
    323           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    324          unsigned char * _ltoa(unsigned long l, unsigned char *buf, unsigned char radix)
   \                     _ltoa:
    325          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 31
   \   000005   74E1         MOV     A,#-0x1f
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   C0E0         PUSH    A
   \   00000D   85..82       MOV     DPL,?XSP + 0
   \   000010   85..83       MOV     DPH,?XSP + 1
   \   000013   D0E0         POP     A
   \   000015   F0           MOVX    @DPTR,A
   \   000016   8A..         MOV     ?V8,R2
   \   000018   8B..         MOV     ?V9,R3
   \   00001A   8C..         MOV     ?V10,R4
   \   00001C   8D..         MOV     ?V11,R5
    326          #if defined( __GNUC__ )
    327            return ( (char*)ltoa( l, buf, radix ) );
    328          #else
    329            unsigned char tmp1[10] = "", tmp2[10] = "", tmp3[10] = "";
   \   00001E   90....       MOV     DPTR,#`?<Constant "">`
   \   000021   7401         MOV     A,#0x1
   \   000023   12....       LCALL   ?XSTACK_DISP102_8
   \   000026   740A         MOV     A,#0xa
   \   000028   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   \   00002B   90....       MOV     DPTR,#`?<Constant "">_1`
   \   00002E   740B         MOV     A,#0xb
   \   000030   12....       LCALL   ?XSTACK_DISP102_8
   \   000033   740A         MOV     A,#0xa
   \   000035   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   \   000038   90....       MOV     DPTR,#`?<Constant "">_2`
   \   00003B   7415         MOV     A,#0x15
   \   00003D   12....       LCALL   ?XSTACK_DISP102_8
   \   000040   740A         MOV     A,#0xa
   \   000042   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    330            unsigned short num1, num2, num3;
    331            unsigned char i;
    332          
    333            buf[0] = '\0';
   \   000045   7437         MOV     A,#0x37
   \   000047   12....       LCALL   ?XSTACK_DISP0_8
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F8           MOV     R0,A
   \   00004C   A3           INC     DPTR
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   F583         MOV     DPH,A
   \   000050   8882         MOV     DPL,R0
   \   000052   7400         MOV     A,#0x0
   \   000054   F0           MOVX    @DPTR,A
    334          
    335            if ( radix == 10 )
   \   000055   85..82       MOV     DPL,?XSP + 0
   \   000058   85..83       MOV     DPH,?XSP + 1
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   640A         XRL     A,#0xa
   \   00005E   6003         JZ      $+5
   \   000060   02....       LJMP    ??_ltoa_0 & 0xFFFF
    336            {
    337              num1 = l % 10000;
   \   000063   85....       MOV     ?V0,?V8
   \   000066   85....       MOV     ?V1,?V9
   \   000069   85....       MOV     ?V2,?V10
   \   00006C   85....       MOV     ?V3,?V11
   \   00006F   90....       MOV     DPTR,#__Constant_2710
   \   000072   78..         MOV     R0,#?V4
   \   000074   12....       LCALL   ?L_MOV_X
   \   000077   78..         MOV     R0,#?V0
   \   000079   79..         MOV     R1,#?V4
   \   00007B   12....       LCALL   ?UL_DIV_MOD
   \   00007E   85....       MOV     ?V0,?V4
   \   000081   85....       MOV     ?V1,?V5
    338              num2 = (l / 10000) % 10000;
   \   000084   85....       MOV     ?V4,?V8
   \   000087   85....       MOV     ?V5,?V9
   \   00008A   85....       MOV     ?V6,?V10
   \   00008D   85....       MOV     ?V7,?V11
   \   000090   90....       MOV     DPTR,#__Constant_2710
   \   000093   78..         MOV     R0,#?V12
   \   000095   12....       LCALL   ?L_MOV_X
   \   000098   78..         MOV     R0,#?V4
   \   00009A   79..         MOV     R1,#?V12
   \   00009C   12....       LCALL   ?UL_DIV_MOD
   \   00009F   90....       MOV     DPTR,#__Constant_2710
   \   0000A2   78..         MOV     R0,#?V12
   \   0000A4   12....       LCALL   ?L_MOV_X
   \   0000A7   78..         MOV     R0,#?V4
   \   0000A9   79..         MOV     R1,#?V12
   \   0000AB   12....       LCALL   ?UL_DIV_MOD
   \   0000AE   AE..         MOV     R6,?V12
   \   0000B0   AF..         MOV     R7,?V13
    339              num3 = (unsigned short)(l / 100000000);
   \   0000B2   90....       MOV     DPTR,#__Constant_5f5e100
   \   0000B5   78..         MOV     R0,#?V4
   \   0000B7   12....       LCALL   ?L_MOV_X
   \   0000BA   78..         MOV     R0,#?V8
   \   0000BC   79..         MOV     R1,#?V4
   \   0000BE   12....       LCALL   ?UL_DIV_MOD
   \   0000C1   85....       MOV     ?V2,?V8
   \   0000C4   85....       MOV     ?V3,?V9
    340          
    341              if (num3) _itoa(num3, tmp3, 10);
   \   0000C7   E5..         MOV     A,?V2
   \   0000C9   45..         ORL     A,?V3
   \   0000CB   600E         JZ      ??_ltoa_1
   \   0000CD                ; Setup parameters for call to function _itoa
   \   0000CD   790A         MOV     R1,#0xa
   \   0000CF   7415         MOV     A,#0x15
   \   0000D1   12....       LCALL   ?XSTACK_DISP102_8
   \   0000D4   AA..         MOV     R2,?V2
   \   0000D6   AB..         MOV     R3,?V3
   \   0000D8   12....       LCALL   `??_itoa::?relay`    ; Banked call to: _itoa
    342              if (num2) _itoa(num2, tmp2, 10);
   \                     ??_ltoa_1:
   \   0000DB   EE           MOV     A,R6
   \   0000DC   4F           ORL     A,R7
   \   0000DD   600E         JZ      ??_ltoa_2
   \   0000DF                ; Setup parameters for call to function _itoa
   \   0000DF   790A         MOV     R1,#0xa
   \   0000E1   740B         MOV     A,#0xb
   \   0000E3   12....       LCALL   ?XSTACK_DISP102_8
   \   0000E6   EE           MOV     A,R6
   \   0000E7   FA           MOV     R2,A
   \   0000E8   EF           MOV     A,R7
   \   0000E9   FB           MOV     R3,A
   \   0000EA   12....       LCALL   `??_itoa::?relay`    ; Banked call to: _itoa
    343              if (num1) _itoa(num1, tmp1, 10);
   \                     ??_ltoa_2:
   \   0000ED   E5..         MOV     A,?V0
   \   0000EF   45..         ORL     A,?V1
   \   0000F1   600E         JZ      ??_ltoa_3
   \   0000F3                ; Setup parameters for call to function _itoa
   \   0000F3   790A         MOV     R1,#0xa
   \   0000F5   7401         MOV     A,#0x1
   \   0000F7   12....       LCALL   ?XSTACK_DISP102_8
   \   0000FA   AA..         MOV     R2,?V0
   \   0000FC   AB..         MOV     R3,?V1
   \   0000FE   12....       LCALL   `??_itoa::?relay`    ; Banked call to: _itoa
    344          
    345              if (num3)
   \                     ??_ltoa_3:
   \   000101   E5..         MOV     A,?V2
   \   000103   45..         ORL     A,?V3
   \   000105   6050         JZ      ??_ltoa_4
    346              {
    347                strcpy((char*)buf, (char const*)tmp3);
   \   000107                ; Setup parameters for call to function strcpy
   \   000107   7415         MOV     A,#0x15
   \   000109   12....       LCALL   ?XSTACK_DISP102_8
   \   00010C   7437         MOV     A,#0x37
   \   00010E   12....       LCALL   ?XSTACK_DISP0_8
   \   000111   E0           MOVX    A,@DPTR
   \   000112   FA           MOV     R2,A
   \   000113   A3           INC     DPTR
   \   000114   E0           MOVX    A,@DPTR
   \   000115   FB           MOV     R3,A
   \   000116   12....       LCALL   `??strcpy::?relay`   ; Banked call to: strcpy
    348                for (i = 0; i < 4 - strlen((char const*)tmp2); i++)
   \   000119   75..00       MOV     ?V4,#0x0
   \   00011C   8013         SJMP    ??_ltoa_5
    349                  strcat((char*)buf, "0");
   \                     ??_ltoa_6:
   \   00011E                ; Setup parameters for call to function strcat
   \   00011E   7C..         MOV     R4,#`?<Constant "0">` & 0xff
   \   000120   7D..         MOV     R5,#(`?<Constant "0">` >> 8) & 0xff
   \   000122   7437         MOV     A,#0x37
   \   000124   12....       LCALL   ?XSTACK_DISP0_8
   \   000127   E0           MOVX    A,@DPTR
   \   000128   FA           MOV     R2,A
   \   000129   A3           INC     DPTR
   \   00012A   E0           MOVX    A,@DPTR
   \   00012B   FB           MOV     R3,A
   \   00012C   12....       LCALL   `??strcat::?relay`   ; Banked call to: strcat
   \   00012F   05..         INC     ?V4
   \                     ??_ltoa_5:
   \   000131   85....       MOV     ?V6,?V4
   \   000134   75..00       MOV     ?V7,#0x0
   \   000137                ; Setup parameters for call to function strlen
   \   000137   740B         MOV     A,#0xb
   \   000139   12....       LCALL   ?XSTACK_DISP101_8
   \   00013C   12....       LCALL   `??strlen::?relay`   ; Banked call to: strlen
   \   00013F   8A..         MOV     ?V8,R2
   \   000141   8B..         MOV     ?V9,R3
   \   000143   7404         MOV     A,#0x4
   \   000145   C3           CLR     C
   \   000146   95..         SUBB    A,?V8
   \   000148   F8           MOV     R0,A
   \   000149   7400         MOV     A,#0x0
   \   00014B   95..         SUBB    A,?V9
   \   00014D   F9           MOV     R1,A
   \   00014E   C3           CLR     C
   \   00014F   E5..         MOV     A,?V6
   \   000151   98           SUBB    A,R0
   \   000152   E5..         MOV     A,?V7
   \   000154   99           SUBB    A,R1
   \   000155   40C7         JC      ??_ltoa_6
    350              }
    351              strcat((char*)buf, (char const*)tmp2);
   \                     ??_ltoa_4:
   \   000157                ; Setup parameters for call to function strcat
   \   000157   740B         MOV     A,#0xb
   \   000159   12....       LCALL   ?XSTACK_DISP102_8
   \   00015C   7437         MOV     A,#0x37
   \   00015E   12....       LCALL   ?XSTACK_DISP0_8
   \   000161   E0           MOVX    A,@DPTR
   \   000162   FA           MOV     R2,A
   \   000163   A3           INC     DPTR
   \   000164   E0           MOVX    A,@DPTR
   \   000165   FB           MOV     R3,A
   \   000166   12....       LCALL   `??strcat::?relay`   ; Banked call to: strcat
    352              if (num3 || num2)
   \   000169   E5..         MOV     A,?V2
   \   00016B   45..         ORL     A,?V3
   \   00016D   7004         JNZ     ??_ltoa_7
   \   00016F   EE           MOV     A,R6
   \   000170   4F           ORL     A,R7
   \   000171   603E         JZ      ??_ltoa_8
    353              {
    354                for (i = 0; i < 4 - strlen((char const*)tmp1); i++)
   \                     ??_ltoa_7:
   \   000173   75..00       MOV     ?V4,#0x0
   \   000176   8013         SJMP    ??_ltoa_9
    355                  strcat((char*)buf, "0");
   \                     ??_ltoa_10:
   \   000178                ; Setup parameters for call to function strcat
   \   000178   7C..         MOV     R4,#`?<Constant "0">` & 0xff
   \   00017A   7D..         MOV     R5,#(`?<Constant "0">` >> 8) & 0xff
   \   00017C   7437         MOV     A,#0x37
   \   00017E   12....       LCALL   ?XSTACK_DISP0_8
   \   000181   E0           MOVX    A,@DPTR
   \   000182   FA           MOV     R2,A
   \   000183   A3           INC     DPTR
   \   000184   E0           MOVX    A,@DPTR
   \   000185   FB           MOV     R3,A
   \   000186   12....       LCALL   `??strcat::?relay`   ; Banked call to: strcat
   \   000189   05..         INC     ?V4
   \                     ??_ltoa_9:
   \   00018B   85....       MOV     ?V6,?V4
   \   00018E   75..00       MOV     ?V7,#0x0
   \   000191                ; Setup parameters for call to function strlen
   \   000191   7401         MOV     A,#0x1
   \   000193   12....       LCALL   ?XSTACK_DISP101_8
   \   000196   12....       LCALL   `??strlen::?relay`   ; Banked call to: strlen
   \   000199   8A..         MOV     ?V8,R2
   \   00019B   8B..         MOV     ?V9,R3
   \   00019D   7404         MOV     A,#0x4
   \   00019F   C3           CLR     C
   \   0001A0   95..         SUBB    A,?V8
   \   0001A2   F8           MOV     R0,A
   \   0001A3   7400         MOV     A,#0x0
   \   0001A5   95..         SUBB    A,?V9
   \   0001A7   F9           MOV     R1,A
   \   0001A8   C3           CLR     C
   \   0001A9   E5..         MOV     A,?V6
   \   0001AB   98           SUBB    A,R0
   \   0001AC   E5..         MOV     A,?V7
   \   0001AE   99           SUBB    A,R1
   \   0001AF   40C7         JC      ??_ltoa_10
    356              }
    357              strcat((char*)buf, (char const*)tmp1);
   \                     ??_ltoa_8:
   \   0001B1                ; Setup parameters for call to function strcat
   \   0001B1   7401         MOV     A,#0x1
   \   0001B3   12....       LCALL   ?XSTACK_DISP102_8
   \   0001B6   7437         MOV     A,#0x37
   \   0001B8   12....       LCALL   ?XSTACK_DISP0_8
   \   0001BB   E0           MOVX    A,@DPTR
   \   0001BC   FA           MOV     R2,A
   \   0001BD   A3           INC     DPTR
   \   0001BE   E0           MOVX    A,@DPTR
   \   0001BF   FB           MOV     R3,A
   \   0001C0   12....       LCALL   `??strcat::?relay`   ; Banked call to: strcat
    358              if (!num3 && !num2 && !num1)
   \   0001C3   E5..         MOV     A,?V2
   \   0001C5   45..         ORL     A,?V3
   \   0001C7   701B         JNZ     ??_ltoa_11
   \   0001C9   EE           MOV     A,R6
   \   0001CA   4F           ORL     A,R7
   \   0001CB   7017         JNZ     ??_ltoa_11
   \   0001CD   E5..         MOV     A,?V0
   \   0001CF   45..         ORL     A,?V1
   \   0001D1   7011         JNZ     ??_ltoa_11
    359                strcpy((char*)buf, "0");
   \   0001D3                ; Setup parameters for call to function strcpy
   \   0001D3   7C..         MOV     R4,#`?<Constant "0">` & 0xff
   \   0001D5   7D..         MOV     R5,#(`?<Constant "0">` >> 8) & 0xff
   \   0001D7   7437         MOV     A,#0x37
   \   0001D9   12....       LCALL   ?XSTACK_DISP0_8
   \   0001DC   E0           MOVX    A,@DPTR
   \   0001DD   FA           MOV     R2,A
   \   0001DE   A3           INC     DPTR
   \   0001DF   E0           MOVX    A,@DPTR
   \   0001E0   FB           MOV     R3,A
   \   0001E1   12....       LCALL   `??strcpy::?relay`   ; Banked call to: strcpy
    360            }
    361            else if ( radix == 16 )
    362            {
    363              num1 = l & 0x0000FFFF;
    364              num2 = l >> 16;
    365          
    366              if (num2) _itoa(num2, tmp2, 16);
    367              if (num1) _itoa(num1, tmp1, 16);
    368          
    369              if (num2)
    370              {
    371                strcpy((char*)buf,(char const*)tmp2);
    372                for (i = 0; i < 4 - strlen((char const*)tmp1); i++)
    373                  strcat((char*)buf, "0");
    374              }
    375              strcat((char*)buf, (char const*)tmp1);
    376              if (!num2 && !num1)
    377                strcpy((char*)buf, "0");
    378            }
    379            else
    380              return NULL;
    381          
    382            return buf;
   \                     ??_ltoa_11:
   \   0001E4   7437         MOV     A,#0x37
   \   0001E6   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E9   E0           MOVX    A,@DPTR
   \   0001EA   FA           MOV     R2,A
   \   0001EB   A3           INC     DPTR
   \   0001EC   E0           MOVX    A,@DPTR
   \   0001ED   FB           MOV     R3,A
   \                     ??_ltoa_12:
   \   0001EE   741F         MOV     A,#0x1f
   \   0001F0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001F3   7F10         MOV     R7,#0x10
   \   0001F5   02....       LJMP    ?BANKED_LEAVE_XDATA
   \                     ??_ltoa_0:
   \   0001F8   85..82       MOV     DPL,?XSP + 0
   \   0001FB   85..83       MOV     DPH,?XSP + 1
   \   0001FE   E0           MOVX    A,@DPTR
   \   0001FF   6410         XRL     A,#0x10
   \   000201   6003         JZ      $+5
   \   000203   02....       LJMP    ??_ltoa_13 & 0xFFFF
   \   000206   85....       MOV     ?V2,?V8
   \   000209   85....       MOV     ?V3,?V9
   \   00020C   85....       MOV     ?V0,?V2
   \   00020F   85....       MOV     ?V1,?V3
   \   000212   7410         MOV     A,#0x10
   \   000214   78..         MOV     R0,#?V8
   \   000216   12....       LCALL   ?UL_SHR
   \   000219   AE..         MOV     R6,?V8
   \   00021B   AF..         MOV     R7,?V9
   \   00021D   EE           MOV     A,R6
   \   00021E   4F           ORL     A,R7
   \   00021F   600E         JZ      ??_ltoa_14
   \   000221                ; Setup parameters for call to function _itoa
   \   000221   7910         MOV     R1,#0x10
   \   000223   740B         MOV     A,#0xb
   \   000225   12....       LCALL   ?XSTACK_DISP102_8
   \   000228   EE           MOV     A,R6
   \   000229   FA           MOV     R2,A
   \   00022A   EF           MOV     A,R7
   \   00022B   FB           MOV     R3,A
   \   00022C   12....       LCALL   `??_itoa::?relay`    ; Banked call to: _itoa
   \                     ??_ltoa_14:
   \   00022F   E5..         MOV     A,?V0
   \   000231   45..         ORL     A,?V1
   \   000233   600E         JZ      ??_ltoa_15
   \   000235                ; Setup parameters for call to function _itoa
   \   000235   7910         MOV     R1,#0x10
   \   000237   7401         MOV     A,#0x1
   \   000239   12....       LCALL   ?XSTACK_DISP102_8
   \   00023C   AA..         MOV     R2,?V0
   \   00023E   AB..         MOV     R3,?V1
   \   000240   12....       LCALL   `??_itoa::?relay`    ; Banked call to: _itoa
   \                     ??_ltoa_15:
   \   000243   EE           MOV     A,R6
   \   000244   4F           ORL     A,R7
   \   000245   6050         JZ      ??_ltoa_16
   \   000247                ; Setup parameters for call to function strcpy
   \   000247   740B         MOV     A,#0xb
   \   000249   12....       LCALL   ?XSTACK_DISP102_8
   \   00024C   7437         MOV     A,#0x37
   \   00024E   12....       LCALL   ?XSTACK_DISP0_8
   \   000251   E0           MOVX    A,@DPTR
   \   000252   FA           MOV     R2,A
   \   000253   A3           INC     DPTR
   \   000254   E0           MOVX    A,@DPTR
   \   000255   FB           MOV     R3,A
   \   000256   12....       LCALL   `??strcpy::?relay`   ; Banked call to: strcpy
   \   000259   75..00       MOV     ?V4,#0x0
   \   00025C   8013         SJMP    ??_ltoa_17
   \                     ??_ltoa_18:
   \   00025E                ; Setup parameters for call to function strcat
   \   00025E   7C..         MOV     R4,#`?<Constant "0">` & 0xff
   \   000260   7D..         MOV     R5,#(`?<Constant "0">` >> 8) & 0xff
   \   000262   7437         MOV     A,#0x37
   \   000264   12....       LCALL   ?XSTACK_DISP0_8
   \   000267   E0           MOVX    A,@DPTR
   \   000268   FA           MOV     R2,A
   \   000269   A3           INC     DPTR
   \   00026A   E0           MOVX    A,@DPTR
   \   00026B   FB           MOV     R3,A
   \   00026C   12....       LCALL   `??strcat::?relay`   ; Banked call to: strcat
   \   00026F   05..         INC     ?V4
   \                     ??_ltoa_17:
   \   000271   85....       MOV     ?V2,?V4
   \   000274   75..00       MOV     ?V3,#0x0
   \   000277                ; Setup parameters for call to function strlen
   \   000277   7401         MOV     A,#0x1
   \   000279   12....       LCALL   ?XSTACK_DISP101_8
   \   00027C   12....       LCALL   `??strlen::?relay`   ; Banked call to: strlen
   \   00027F   8A..         MOV     ?V6,R2
   \   000281   8B..         MOV     ?V7,R3
   \   000283   7404         MOV     A,#0x4
   \   000285   C3           CLR     C
   \   000286   95..         SUBB    A,?V6
   \   000288   F8           MOV     R0,A
   \   000289   7400         MOV     A,#0x0
   \   00028B   95..         SUBB    A,?V7
   \   00028D   F9           MOV     R1,A
   \   00028E   C3           CLR     C
   \   00028F   E5..         MOV     A,?V2
   \   000291   98           SUBB    A,R0
   \   000292   E5..         MOV     A,?V3
   \   000294   99           SUBB    A,R1
   \   000295   40C7         JC      ??_ltoa_18
   \                     ??_ltoa_16:
   \   000297                ; Setup parameters for call to function strcat
   \   000297   7401         MOV     A,#0x1
   \   000299   12....       LCALL   ?XSTACK_DISP102_8
   \   00029C   7437         MOV     A,#0x37
   \   00029E   12....       LCALL   ?XSTACK_DISP0_8
   \   0002A1   E0           MOVX    A,@DPTR
   \   0002A2   FA           MOV     R2,A
   \   0002A3   A3           INC     DPTR
   \   0002A4   E0           MOVX    A,@DPTR
   \   0002A5   FB           MOV     R3,A
   \   0002A6   12....       LCALL   `??strcat::?relay`   ; Banked call to: strcat
   \   0002A9   EE           MOV     A,R6
   \   0002AA   4F           ORL     A,R7
   \   0002AB   6003         JZ      $+5
   \   0002AD   02....       LJMP    ??_ltoa_11 & 0xFFFF
   \   0002B0   E5..         MOV     A,?V0
   \   0002B2   45..         ORL     A,?V1
   \   0002B4   6003         JZ      $+5
   \   0002B6   02....       LJMP    ??_ltoa_11 & 0xFFFF
   \   0002B9                ; Setup parameters for call to function strcpy
   \   0002B9   7C..         MOV     R4,#`?<Constant "0">` & 0xff
   \   0002BB   7D..         MOV     R5,#(`?<Constant "0">` >> 8) & 0xff
   \   0002BD   7437         MOV     A,#0x37
   \   0002BF   12....       LCALL   ?XSTACK_DISP0_8
   \   0002C2   E0           MOVX    A,@DPTR
   \   0002C3   FA           MOV     R2,A
   \   0002C4   A3           INC     DPTR
   \   0002C5   E0           MOVX    A,@DPTR
   \   0002C6   FB           MOV     R3,A
   \   0002C7   12....       LCALL   `??strcpy::?relay`   ; Banked call to: strcpy
   \   0002CA   02....       LJMP    ??_ltoa_11 & 0xFFFF
   \                     ??_ltoa_13:
   \   0002CD   7A00         MOV     R2,#0x0
   \   0002CF   7B00         MOV     R3,#0x0
   \   0002D1   02....       LJMP    ??_ltoa_12 & 0xFFFF
    383          #endif
    384          }
    385          #endif // !defined(ZBIT) && !defined(ZBIT2)
    386          
    387          /*********************************************************************
    388           * @fn        osal_rand
    389           *
    390           * @brief    Random number generator
    391           *
    392           * @param   none
    393           *
    394           * @return  uint16 - new random number
    395           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    396          uint16 osal_rand( void )
   \                     osal_rand:
    397          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    398            return ( Onboard_rand() );
   \   000004                ; Setup parameters for call to function Onboard_rand
   \   000004   12....       LCALL   `??Onboard_rand::?relay`; Banked call to: Onboard_rand
   \   000007   D083         POP     DPH
   \   000009   D082         POP     DPL
   \   00000B   02....       LJMP    ?BRET
    399          }
    400          
    401          /*********************************************************************
    402           * API FUNCTIONS
    403           *********************************************************************/
    404          
    405          /*********************************************************************
    406           * @fn      osal_msg_allocate
    407           *
    408           * @brief
    409           *
    410           *    This function is called by a task to allocate a message buffer
    411           *    into which the task will encode the particular message it wishes
    412           *    to send.  This common buffer scheme is used to strictly limit the
    413           *    creation of message buffers within the system due to RAM size
    414           *    limitations on the microprocessor.   Note that all message buffers
    415           *    are a fixed size (at least initially).  The parameter len is kept
    416           *    in case a message pool with varying fixed message sizes is later
    417           *    created (for example, a pool of message buffers of size LARGE,
    418           *    MEDIUM and SMALL could be maintained and allocated based on request
    419           *    from the tasks).
    420           *
    421           *
    422           * @param   uint8 len  - wanted buffer length
    423           *
    424           *
    425           * @return  pointer to allocated buffer or NULL if allocation failed.
    426           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    427          uint8 * osal_msg_allocate( uint16 len )
   \                     osal_msg_allocate:
    428          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    429            osal_msg_hdr_t *hdr;
    430          
    431            if ( len == 0 )
   \   000009   EE           MOV     A,R6
   \   00000A   4F           ORL     A,R7
   \   00000B   7006         JNZ     ??osal_msg_allocate_0
    432              return ( NULL );
   \   00000D   7A00         MOV     R2,#0x0
   \   00000F   7B00         MOV     R3,#0x0
   \   000011   8044         SJMP    ??osal_msg_allocate_1
    433          
    434            hdr = (osal_msg_hdr_t *) osal_mem_alloc( (short)(len + sizeof( osal_msg_hdr_t )) );
   \                     ??osal_msg_allocate_0:
   \   000013                ; Setup parameters for call to function osal_mem_alloc
   \   000013   EE           MOV     A,R6
   \   000014   2405         ADD     A,#0x5
   \   000016   FA           MOV     R2,A
   \   000017   E4           CLR     A
   \   000018   3F           ADDC    A,R7
   \   000019   FB           MOV     R3,A
   \   00001A   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00001D   8A..         MOV     ?V0,R2
   \   00001F   8B..         MOV     ?V1,R3
   \   000021   A8..         MOV     R0,?V0
   \   000023   A9..         MOV     R1,?V1
    435            if ( hdr )
   \   000025   E8           MOV     A,R0
   \   000026   49           ORL     A,R1
   \   000027   602A         JZ      ??osal_msg_allocate_2
    436            {
    437              hdr->next = NULL;
   \   000029   8882         MOV     DPL,R0
   \   00002B   8983         MOV     DPH,R1
   \   00002D   7400         MOV     A,#0x0
   \   00002F   F0           MOVX    @DPTR,A
   \   000030   A3           INC     DPTR
   \   000031   7400         MOV     A,#0x0
   \   000033   F0           MOVX    @DPTR,A
    438              hdr->len = len;
   \   000034   8882         MOV     DPL,R0
   \   000036   8983         MOV     DPH,R1
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   EE           MOV     A,R6
   \   00003B   F0           MOVX    @DPTR,A
   \   00003C   A3           INC     DPTR
   \   00003D   EF           MOV     A,R7
   \   00003E   F0           MOVX    @DPTR,A
    439              hdr->dest_id = TASK_NO_TASK;
   \   00003F   8882         MOV     DPL,R0
   \   000041   8983         MOV     DPH,R1
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   74FF         MOV     A,#-0x1
   \   000049   F0           MOVX    @DPTR,A
    440              return ( (uint8 *) (hdr + 1) );
   \   00004A   E8           MOV     A,R0
   \   00004B   2405         ADD     A,#0x5
   \   00004D   FA           MOV     R2,A
   \   00004E   E4           CLR     A
   \   00004F   39           ADDC    A,R1
   \   000050   FB           MOV     R3,A
   \   000051   8004         SJMP    ??osal_msg_allocate_1
    441            }
    442            else
    443              return ( NULL );
   \                     ??osal_msg_allocate_2:
   \   000053   7A00         MOV     R2,#0x0
   \   000055   7B00         MOV     R3,#0x0
   \                     ??osal_msg_allocate_1:
   \   000057   7F02         MOV     R7,#0x2
   \   000059   02....       LJMP    ?BANKED_LEAVE_XDATA
    444          }
    445          
    446          /*********************************************************************
    447           * @fn      osal_msg_deallocate
    448           *
    449           * @brief
    450           *
    451           *    This function is used to deallocate a message buffer. This function
    452           *    is called by a task (or processing element) after it has finished
    453           *    processing a received message.
    454           *
    455           *
    456           * @param   uint8 *msg_ptr - pointer to new message buffer
    457           *
    458           * @return  SUCCESS, INVALID_MSG_POINTER
    459           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    460          uint8 osal_msg_deallocate( uint8 *msg_ptr )
   \                     osal_msg_deallocate:
    461          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    462            uint8 *x;
    463          
    464            if ( msg_ptr == NULL )
   \   000004   EA           MOV     A,R2
   \   000005   4B           ORL     A,R3
   \   000006   7004         JNZ     ??osal_msg_deallocate_0
    465              return ( INVALID_MSG_POINTER );
   \   000008   7905         MOV     R1,#0x5
   \   00000A   8020         SJMP    ??osal_msg_deallocate_1
    466          
    467            // don't deallocate queued buffer
    468            if ( OSAL_MSG_ID( msg_ptr ) != TASK_NO_TASK )
   \                     ??osal_msg_deallocate_0:
   \   00000C   EA           MOV     A,R2
   \   00000D   24FF         ADD     A,#-0x1
   \   00000F   F582         MOV     DPL,A
   \   000011   EB           MOV     A,R3
   \   000012   34FF         ADDC    A,#-0x1
   \   000014   F583         MOV     DPH,A
   \   000016   E0           MOVX    A,@DPTR
   \   000017   64FF         XRL     A,#0xff
   \   000019   6004         JZ      ??osal_msg_deallocate_2
    469              return ( MSG_BUFFER_NOT_AVAIL );
   \   00001B   7904         MOV     R1,#0x4
   \   00001D   800D         SJMP    ??osal_msg_deallocate_1
    470          
    471            x = (uint8 *)((uint8 *)msg_ptr - sizeof( osal_msg_hdr_t ));
   \                     ??osal_msg_deallocate_2:
   \   00001F   EA           MOV     A,R2
   \   000020   24FB         ADD     A,#-0x5
   \   000022   FA           MOV     R2,A
   \   000023   EB           MOV     A,R3
   \   000024   34FF         ADDC    A,#-0x1
   \   000026   FB           MOV     R3,A
    472          
    473            osal_mem_free( (void *)x );
   \   000027                ; Setup parameters for call to function osal_mem_free
   \   000027   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    474          
    475            return ( SUCCESS );
   \   00002A   7900         MOV     R1,#0x0
   \                     ??osal_msg_deallocate_1:
   \   00002C   D083         POP     DPH
   \   00002E   D082         POP     DPL
   \   000030   02....       LJMP    ?BRET
    476          }
    477          
    478          /*********************************************************************
    479           * @fn      osal_msg_send
    480           *
    481           * @brief
    482           *
    483           *    This function is called by a task to send a command message to
    484           *    another task or processing element.  The sending_task field must
    485           *    refer to a valid task, since the task ID will be used
    486           *    for the response message.  This function will also set a message
    487           *    ready event in the destination tasks event list.
    488           *
    489           *
    490           * @param   uint8 destination_task - Send msg to Task ID
    491           * @param   uint8 *msg_ptr - pointer to new message buffer
    492           *
    493           * @return  SUCCESS, INVALID_TASK, INVALID_MSG_POINTER
    494           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    495          uint8 osal_msg_send( uint8 destination_task, uint8 *msg_ptr )
   \                     osal_msg_send:
    496          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    497            return ( osal_msg_enqueue_push( destination_task, msg_ptr, FALSE ) );
   \   000007                ; Setup parameters for call to function osal_msg_enqueue_push
   \   000007   7C00         MOV     R4,#0x0
   \   000009   EE           MOV     A,R6
   \   00000A   F9           MOV     R1,A
   \   00000B   12....       LCALL   `??osal_msg_enqueue_push::?relay`; Banked call to: osal_msg_enqueue_push
   \   00000E   7F01         MOV     R7,#0x1
   \   000010   02....       LJMP    ?BANKED_LEAVE_XDATA
    498          }
    499          
    500          /*********************************************************************
    501           * @fn      osal_msg_push_front
    502           *
    503           * @brief
    504           *
    505           *    This function is called by a task to push a command message
    506           *    to the head of the OSAL queue. The destination_task field
    507           *    must refer to a valid task, since the task ID will be used to
    508           *    send the message to. This function will also set a message
    509           *    ready event in the destination task's event list.
    510           *
    511           * @param   uint8 destination_task - Send msg to Task ID
    512           * @param   uint8 *msg_ptr - pointer to message buffer
    513           *
    514           * @return  SUCCESS, INVALID_TASK, INVALID_MSG_POINTER
    515           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    516          uint8 osal_msg_push_front( uint8 destination_task, uint8 *msg_ptr )
   \                     osal_msg_push_front:
    517          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    518            return ( osal_msg_enqueue_push( destination_task, msg_ptr, TRUE ) );
   \   000007                ; Setup parameters for call to function osal_msg_enqueue_push
   \   000007   7C01         MOV     R4,#0x1
   \   000009   EE           MOV     A,R6
   \   00000A   F9           MOV     R1,A
   \   00000B   12....       LCALL   `??osal_msg_enqueue_push::?relay`; Banked call to: osal_msg_enqueue_push
   \   00000E   7F01         MOV     R7,#0x1
   \   000010   02....       LJMP    ?BANKED_LEAVE_XDATA
    519          }
    520          
    521          /*********************************************************************
    522           * @fn      osal_msg_enqueue_push
    523           *
    524           * @brief
    525           *
    526           *    This function is called by a task to either enqueue (append to
    527           *    queue) or push (prepend to queue) a command message to the OSAL
    528           *    queue. The destination_task field must refer to a valid task,
    529           *    since the task ID will be used to send the message to. This 
    530           *    function will also set a message ready event in the destination
    531           *    task's event list.
    532           *
    533           * @param   uint8 destination_task - Send msg to Task ID
    534           * @param   uint8 *msg_ptr - pointer to message buffer
    535           * @param   uint8 push - TRUE to push, otherwise enqueue
    536           *
    537           * @return  SUCCESS, INVALID_TASK, INVALID_MSG_POINTER
    538           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    539          static uint8 osal_msg_enqueue_push( uint8 destination_task, uint8 *msg_ptr, uint8 push )
   \                     osal_msg_enqueue_push:
    540          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EC           MOV     A,R4
   \   000008   FF           MOV     R7,A
    541            if ( msg_ptr == NULL )
   \   000009   EA           MOV     A,R2
   \   00000A   4B           ORL     A,R3
   \   00000B   7004         JNZ     ??osal_msg_enqueue_push_0
    542            {
    543              return ( INVALID_MSG_POINTER );
   \   00000D   7905         MOV     R1,#0x5
   \   00000F   8075         SJMP    ??osal_msg_enqueue_push_1
    544            }
    545          
    546            if ( destination_task >= tasksCnt )
   \                     ??osal_msg_enqueue_push_0:
   \   000011   90....       MOV     DPTR,#tasksCnt
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F8           MOV     R0,A
   \   000016   EE           MOV     A,R6
   \   000017   C3           CLR     C
   \   000018   98           SUBB    A,R0
   \   000019   4008         JC      ??osal_msg_enqueue_push_2
    547            {
    548              osal_msg_deallocate( msg_ptr );
   \   00001B                ; Setup parameters for call to function osal_msg_deallocate
   \   00001B   12....       LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \   00001E   E9           MOV     A,R1
    549              return ( INVALID_TASK );
   \   00001F   7903         MOV     R1,#0x3
   \   000021   8063         SJMP    ??osal_msg_enqueue_push_1
    550            }
    551          
    552            // Check the message header
    553            if ( OSAL_MSG_NEXT( msg_ptr ) != NULL ||
    554                 OSAL_MSG_ID( msg_ptr ) != TASK_NO_TASK )
   \                     ??osal_msg_enqueue_push_2:
   \   000023   EA           MOV     A,R2
   \   000024   24FB         ADD     A,#-0x5
   \   000026   F582         MOV     DPL,A
   \   000028   EB           MOV     A,R3
   \   000029   34FF         ADDC    A,#-0x1
   \   00002B   F583         MOV     DPH,A
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F8           MOV     R0,A
   \   00002F   A3           INC     DPTR
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F9           MOV     R1,A
   \   000032   E8           MOV     A,R0
   \   000033   49           ORL     A,R1
   \   000034   700F         JNZ     ??osal_msg_enqueue_push_3
   \   000036   EA           MOV     A,R2
   \   000037   24FF         ADD     A,#-0x1
   \   000039   F582         MOV     DPL,A
   \   00003B   EB           MOV     A,R3
   \   00003C   34FF         ADDC    A,#-0x1
   \   00003E   F583         MOV     DPH,A
   \   000040   E0           MOVX    A,@DPTR
   \   000041   64FF         XRL     A,#0xff
   \   000043   6008         JZ      ??osal_msg_enqueue_push_4
    555            {
    556              osal_msg_deallocate( msg_ptr );
   \                     ??osal_msg_enqueue_push_3:
   \   000045                ; Setup parameters for call to function osal_msg_deallocate
   \   000045   12....       LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \   000048   E9           MOV     A,R1
    557              return ( INVALID_MSG_POINTER );
   \   000049   7905         MOV     R1,#0x5
   \   00004B   8039         SJMP    ??osal_msg_enqueue_push_1
    558            }
    559          
    560            OSAL_MSG_ID( msg_ptr ) = destination_task;
   \                     ??osal_msg_enqueue_push_4:
   \   00004D   EE           MOV     A,R6
   \   00004E   C0E0         PUSH    A
   \   000050   EA           MOV     A,R2
   \   000051   24FF         ADD     A,#-0x1
   \   000053   F582         MOV     DPL,A
   \   000055   EB           MOV     A,R3
   \   000056   34FF         ADDC    A,#-0x1
   \   000058   F583         MOV     DPH,A
   \   00005A   D0E0         POP     A
   \   00005C   F0           MOVX    @DPTR,A
    561          
    562            if ( push == TRUE )
   \   00005D   7401         MOV     A,#0x1
   \   00005F   6F           XRL     A,R7
   \   000060   700D         JNZ     ??osal_msg_enqueue_push_5
    563            {
    564              // prepend the message
    565              osal_msg_push( &osal_qHead, msg_ptr );
   \   000062                ; Setup parameters for call to function osal_msg_push
   \   000062   EA           MOV     A,R2
   \   000063   FC           MOV     R4,A
   \   000064   EB           MOV     A,R3
   \   000065   FD           MOV     R5,A
   \   000066   7A..         MOV     R2,#osal_qHead & 0xff
   \   000068   7B..         MOV     R3,#(osal_qHead >> 8) & 0xff
   \   00006A   12....       LCALL   `??osal_msg_push::?relay`; Banked call to: osal_msg_push
   \   00006D   800B         SJMP    ??osal_msg_enqueue_push_6
    566            }
    567            else
    568            {
    569              // append the message
    570              osal_msg_enqueue( &osal_qHead, msg_ptr );
   \                     ??osal_msg_enqueue_push_5:
   \   00006F                ; Setup parameters for call to function osal_msg_enqueue
   \   00006F   EA           MOV     A,R2
   \   000070   FC           MOV     R4,A
   \   000071   EB           MOV     A,R3
   \   000072   FD           MOV     R5,A
   \   000073   7A..         MOV     R2,#osal_qHead & 0xff
   \   000075   7B..         MOV     R3,#(osal_qHead >> 8) & 0xff
   \   000077   12....       LCALL   `??osal_msg_enqueue::?relay`; Banked call to: osal_msg_enqueue
    571            }
    572          
    573            // Signal the task that a message is waiting
    574            osal_set_event( destination_task, SYS_EVENT_MSG );
   \                     ??osal_msg_enqueue_push_6:
   \   00007A                ; Setup parameters for call to function osal_set_event
   \   00007A   7A00         MOV     R2,#0x0
   \   00007C   7B80         MOV     R3,#-0x80
   \   00007E   EE           MOV     A,R6
   \   00007F   F9           MOV     R1,A
   \   000080   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000083   E9           MOV     A,R1
    575          
    576            return ( SUCCESS );
   \   000084   7900         MOV     R1,#0x0
   \                     ??osal_msg_enqueue_push_1:
   \   000086   7F01         MOV     R7,#0x1
   \   000088   02....       LJMP    ?BANKED_LEAVE_XDATA
    577          }
    578          
    579          /*********************************************************************
    580           * @fn      osal_msg_receive
    581           *
    582           * @brief
    583           *
    584           *    This function is called by a task to retrieve a received command
    585           *    message. The calling task must deallocate the message buffer after
    586           *    processing the message using the osal_msg_deallocate() call.
    587           *
    588           * @param   uint8 task_id - receiving tasks ID
    589           *
    590           * @return  *uint8 - message information or NULL if no message
    591           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    592          uint8 *osal_msg_receive( uint8 task_id )
   \                     osal_msg_receive:
    593          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
    594            osal_msg_hdr_t *listHdr;
    595            osal_msg_hdr_t *prevHdr = NULL;
   \   000007   75..00       MOV     ?V2,#0x0
   \   00000A   75..00       MOV     ?V3,#0x0
    596            osal_msg_hdr_t *foundHdr = NULL;
   \   00000D   7E00         MOV     R6,#0x0
   \   00000F   7F00         MOV     R7,#0x0
    597            halIntState_t   intState;
    598          
    599            // Hold off interrupts
    600            HAL_ENTER_CRITICAL_SECTION(intState);
   \   000011   A2AF         MOV     C,0xa8.7
   \   000013   E4           CLR     A
   \   000014   33           RLC     A
   \   000015   F5..         MOV     ?V1,A
   \   000017   C2AF         CLR     0xa8.7
    601          
    602            // Point to the top of the queue
    603            listHdr = osal_qHead;
   \   000019   90....       MOV     DPTR,#osal_qHead
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F8           MOV     R0,A
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F9           MOV     R1,A
   \   000021   801B         SJMP    ??osal_msg_receive_0
    604          
    605            // Look through the queue for a message that belongs to the asking task
    606            while ( listHdr != NULL )
    607            {
    608              if ( (listHdr - 1)->dest_id == task_id )
    609              {
    610                if ( foundHdr == NULL )
    611                {
    612                  // Save the first one
    613                  foundHdr = listHdr;
   \                     ??osal_msg_receive_1:
   \   000023   E8           MOV     A,R0
   \   000024   FE           MOV     R6,A
   \   000025   E9           MOV     A,R1
   \   000026   FF           MOV     R7,A
    614                }
    615                else
    616                {
    617                  // Second msg found, stop looking
    618                  break;
    619                }
    620              }
    621              if ( foundHdr == NULL )
   \                     ??osal_msg_receive_2:
   \   000027   EE           MOV     A,R6
   \   000028   4F           ORL     A,R7
   \   000029   7004         JNZ     ??osal_msg_receive_3
    622              {
    623                prevHdr = listHdr;
   \   00002B   88..         MOV     ?V2,R0
   \   00002D   89..         MOV     ?V3,R1
    624              }
    625              listHdr = OSAL_MSG_NEXT( listHdr );
   \                     ??osal_msg_receive_3:
   \   00002F   E8           MOV     A,R0
   \   000030   24FB         ADD     A,#-0x5
   \   000032   F582         MOV     DPL,A
   \   000034   E9           MOV     A,R1
   \   000035   34FF         ADDC    A,#-0x1
   \   000037   F583         MOV     DPH,A
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   F8           MOV     R0,A
   \   00003B   A3           INC     DPTR
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   F9           MOV     R1,A
   \                     ??osal_msg_receive_0:
   \   00003E   E8           MOV     A,R0
   \   00003F   49           ORL     A,R1
   \   000040   6013         JZ      ??osal_msg_receive_4
   \   000042   E8           MOV     A,R0
   \   000043   24FF         ADD     A,#-0x1
   \   000045   F582         MOV     DPL,A
   \   000047   E9           MOV     A,R1
   \   000048   34FF         ADDC    A,#-0x1
   \   00004A   F583         MOV     DPH,A
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   65..         XRL     A,?V0
   \   00004F   70D6         JNZ     ??osal_msg_receive_2
   \   000051   EE           MOV     A,R6
   \   000052   4F           ORL     A,R7
   \   000053   60CE         JZ      ??osal_msg_receive_1
    626            }
    627          
    628            // Is there more than one?
    629            if ( listHdr != NULL )
   \                     ??osal_msg_receive_4:
   \   000055   E8           MOV     A,R0
   \   000056   49           ORL     A,R1
   \   000057   600C         JZ      ??osal_msg_receive_5
    630            {
    631              // Yes, Signal the task that a message is waiting
    632              osal_set_event( task_id, SYS_EVENT_MSG );
   \   000059                ; Setup parameters for call to function osal_set_event
   \   000059   7A00         MOV     R2,#0x0
   \   00005B   7B80         MOV     R3,#-0x80
   \   00005D   A9..         MOV     R1,?V0
   \   00005F   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000062   E9           MOV     A,R1
   \   000063   800A         SJMP    ??osal_msg_receive_6
    633            }
    634            else
    635            {
    636              // No more
    637              osal_clear_event( task_id, SYS_EVENT_MSG );
   \                     ??osal_msg_receive_5:
   \   000065                ; Setup parameters for call to function osal_clear_event
   \   000065   7A00         MOV     R2,#0x0
   \   000067   7B80         MOV     R3,#-0x80
   \   000069   A9..         MOV     R1,?V0
   \   00006B   12....       LCALL   `??osal_clear_event::?relay`; Banked call to: osal_clear_event
   \   00006E   E9           MOV     A,R1
    638            }
    639          
    640            // Did we find a message?
    641            if ( foundHdr != NULL )
   \                     ??osal_msg_receive_6:
   \   00006F   EE           MOV     A,R6
   \   000070   4F           ORL     A,R7
   \   000071   6015         JZ      ??osal_msg_receive_7
    642            {
    643              // Take out of the link list
    644              osal_msg_extract( &osal_qHead, foundHdr, prevHdr );
   \   000073                ; Setup parameters for call to function osal_msg_extract
   \   000073   78..         MOV     R0,#?V2
   \   000075   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000078   EE           MOV     A,R6
   \   000079   FC           MOV     R4,A
   \   00007A   EF           MOV     A,R7
   \   00007B   FD           MOV     R5,A
   \   00007C   7A..         MOV     R2,#osal_qHead & 0xff
   \   00007E   7B..         MOV     R3,#(osal_qHead >> 8) & 0xff
   \   000080   12....       LCALL   `??osal_msg_extract::?relay`; Banked call to: osal_msg_extract
   \   000083   7402         MOV     A,#0x2
   \   000085   12....       LCALL   ?DEALLOC_XSTACK8
    645            }
    646          
    647            // Release interrupts
    648            HAL_EXIT_CRITICAL_SECTION(intState);
   \                     ??osal_msg_receive_7:
   \   000088   A8..         MOV     R0,?V1
   \   00008A   E5..         MOV     A,?V1
   \   00008C   A2E0         MOV     C,0xE0 /* A   */.0
   \   00008E   92AF         MOV     0xa8.7,C
    649          
    650            return ( (uint8*) foundHdr );
   \   000090   EE           MOV     A,R6
   \   000091   FA           MOV     R2,A
   \   000092   EF           MOV     A,R7
   \   000093   FB           MOV     R3,A
   \   000094   7F04         MOV     R7,#0x4
   \   000096   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000099                REQUIRE _A_IEN0
    651          }
    652          
    653          /**************************************************************************************************
    654           * @fn          osal_msg_find
    655           *
    656           * @brief       This function finds in place an OSAL message matching the task_id and event
    657           *              parameters.
    658           *
    659           * input parameters
    660           *
    661           * @param       task_id - The OSAL task id that the enqueued OSAL message must match.
    662           * @param       event - The OSAL event id that the enqueued OSAL message must match.
    663           *
    664           * output parameters
    665           *
    666           * None.
    667           *
    668           * @return      NULL if no match, otherwise an in place pointer to the matching OSAL message.
    669           **************************************************************************************************
    670           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    671          osal_event_hdr_t *osal_msg_find(uint8 task_id, uint8 event)
   \                     osal_msg_find:
    672          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   EA           MOV     A,R2
   \   000005   FC           MOV     R4,A
    673            osal_msg_hdr_t *pHdr;
    674            halIntState_t intState;
    675          
    676            HAL_ENTER_CRITICAL_SECTION(intState);  // Hold off interrupts.
   \   000006   A2AF         MOV     C,0xa8.7
   \   000008   E4           CLR     A
   \   000009   33           RLC     A
   \   00000A   F8           MOV     R0,A
   \   00000B   C2AF         CLR     0xa8.7
    677          
    678            pHdr = osal_qHead;  // Point to the top of the queue.
   \   00000D   90....       MOV     DPTR,#osal_qHead
   \   000010   E0           MOVX    A,@DPTR
   \   000011   FA           MOV     R2,A
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   FB           MOV     R3,A
   \   000015   800F         SJMP    ??osal_msg_find_0
    679          
    680            // Look through the queue for a message that matches the task_id and event parameters.
    681            while (pHdr != NULL)
    682            {
    683              if (((pHdr-1)->dest_id == task_id) && (((osal_event_hdr_t *)pHdr)->event == event))
    684              {
    685                break;
    686              }
    687          
    688              pHdr = OSAL_MSG_NEXT(pHdr);
   \                     ??osal_msg_find_1:
   \   000017   EA           MOV     A,R2
   \   000018   24FB         ADD     A,#-0x5
   \   00001A   F582         MOV     DPL,A
   \   00001C   EB           MOV     A,R3
   \   00001D   34FF         ADDC    A,#-0x1
   \   00001F   F583         MOV     DPH,A
   \   000021   E0           MOVX    A,@DPTR
   \   000022   FA           MOV     R2,A
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   FB           MOV     R3,A
   \                     ??osal_msg_find_0:
   \   000026   EA           MOV     A,R2
   \   000027   4B           ORL     A,R3
   \   000028   6016         JZ      ??osal_msg_find_2
   \   00002A   EA           MOV     A,R2
   \   00002B   24FF         ADD     A,#-0x1
   \   00002D   F582         MOV     DPL,A
   \   00002F   EB           MOV     A,R3
   \   000030   34FF         ADDC    A,#-0x1
   \   000032   F583         MOV     DPH,A
   \   000034   E0           MOVX    A,@DPTR
   \   000035   69           XRL     A,R1
   \   000036   70DF         JNZ     ??osal_msg_find_1
   \   000038   8A82         MOV     DPL,R2
   \   00003A   8B83         MOV     DPH,R3
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   6C           XRL     A,R4
   \   00003E   70D7         JNZ     ??osal_msg_find_1
    689            }
    690          
    691            HAL_EXIT_CRITICAL_SECTION(intState);  // Release interrupts.
   \                     ??osal_msg_find_2:
   \   000040   E8           MOV     A,R0
   \   000041   FD           MOV     R5,A
   \   000042   E8           MOV     A,R0
   \   000043   A2E0         MOV     C,0xE0 /* A   */.0
   \   000045   92AF         MOV     0xa8.7,C
    692          
    693            return (osal_event_hdr_t *)pHdr;
   \   000047   D083         POP     DPH
   \   000049   D082         POP     DPL
   \   00004B   02....       LJMP    ?BRET
   \   00004E                REQUIRE _A_IEN0
    694          }
    695          
    696          /**************************************************************************************************
    697           * @fn          osal_msg_count
    698           *
    699           * @brief       This function counts the number of messages, in the OSAL message queue with a
    700           *              a given task ID and message event type.
    701           *
    702           * input parameters
    703           *
    704           * @param       task_id - The OSAL task id that the enqueued OSAL message must match.
    705           * @param       event - The OSAL event id that the enqueued OSAL message must match. 0xFF for 
    706           *              all events.
    707           *
    708           * output parameters
    709           *
    710           * None.
    711           *
    712           * @return      The number of OSAL messages that match the task ID and Event.
    713           **************************************************************************************************
    714           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    715          uint8 osal_msg_count( uint8 task_id, uint8 event )
   \                     osal_msg_count:
    716          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FB           MOV     R3,A
    717            uint8 count = 0;
   \   000007   7900         MOV     R1,#0x0
    718            osal_msg_hdr_t *pHdr;
    719            halIntState_t intState;
    720          
    721            HAL_ENTER_CRITICAL_SECTION(intState);  // Hold off interrupts.
   \   000009   A2AF         MOV     C,0xa8.7
   \   00000B   E4           CLR     A
   \   00000C   33           RLC     A
   \   00000D   F8           MOV     R0,A
   \   00000E   C2AF         CLR     0xa8.7
    722          
    723            pHdr = osal_qHead;  // Point to the top of the queue.
   \   000010   90....       MOV     DPTR,#osal_qHead
   \   000013   E0           MOVX    A,@DPTR
   \   000014   FC           MOV     R4,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   FD           MOV     R5,A
   \   000018   802B         SJMP    ??osal_msg_count_0
    724          
    725            // Look through the queue for a message that matches the task_id and event parameters.
    726            while (pHdr != NULL)
    727            {
    728              if ( ((pHdr-1)->dest_id == task_id) 
    729                  && ((event == 0xFF) || (((osal_event_hdr_t *)pHdr)->event == event)) )
   \                     ??osal_msg_count_1:
   \   00001A   EC           MOV     A,R4
   \   00001B   24FF         ADD     A,#-0x1
   \   00001D   F582         MOV     DPL,A
   \   00001F   ED           MOV     A,R5
   \   000020   34FF         ADDC    A,#-0x1
   \   000022   F583         MOV     DPH,A
   \   000024   E0           MOVX    A,@DPTR
   \   000025   6B           XRL     A,R3
   \   000026   700E         JNZ     ??osal_msg_count_2
   \   000028   74FF         MOV     A,#-0x1
   \   00002A   6A           XRL     A,R2
   \   00002B   6008         JZ      ??osal_msg_count_3
   \   00002D   8C82         MOV     DPL,R4
   \   00002F   8D83         MOV     DPH,R5
   \   000031   E0           MOVX    A,@DPTR
   \   000032   6A           XRL     A,R2
   \   000033   7001         JNZ     ??osal_msg_count_2
    730              {
    731                count++;
   \                     ??osal_msg_count_3:
   \   000035   09           INC     R1
    732              }
    733          
    734              pHdr = OSAL_MSG_NEXT(pHdr);
   \                     ??osal_msg_count_2:
   \   000036   EC           MOV     A,R4
   \   000037   24FB         ADD     A,#-0x5
   \   000039   F582         MOV     DPL,A
   \   00003B   ED           MOV     A,R5
   \   00003C   34FF         ADDC    A,#-0x1
   \   00003E   F583         MOV     DPH,A
   \   000040   E0           MOVX    A,@DPTR
   \   000041   FC           MOV     R4,A
   \   000042   A3           INC     DPTR
   \   000043   E0           MOVX    A,@DPTR
   \   000044   FD           MOV     R5,A
    735            }
   \                     ??osal_msg_count_0:
   \   000045   EC           MOV     A,R4
   \   000046   4D           ORL     A,R5
   \   000047   70D1         JNZ     ??osal_msg_count_1
    736          
    737            HAL_EXIT_CRITICAL_SECTION(intState);  // Release interrupts.
   \   000049   E8           MOV     A,R0
   \   00004A   FC           MOV     R4,A
   \   00004B   E8           MOV     A,R0
   \   00004C   A2E0         MOV     C,0xE0 /* A   */.0
   \   00004E   92AF         MOV     0xa8.7,C
    738          
    739            return ( count );
   \   000050   7F01         MOV     R7,#0x1
   \   000052   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000055                REQUIRE _A_IEN0
    740          }
    741          
    742          /*********************************************************************
    743           * @fn      osal_msg_enqueue
    744           *
    745           * @brief
    746           *
    747           *    This function enqueues an OSAL message into an OSAL queue.
    748           *
    749           * @param   osal_msg_q_t *q_ptr - OSAL queue
    750           * @param   void *msg_ptr  - OSAL message
    751           *
    752           * @return  none
    753           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    754          void osal_msg_enqueue( osal_msg_q_t *q_ptr, void *msg_ptr )
   \                     osal_msg_enqueue:
    755          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    756            void *list;
    757            halIntState_t intState;
    758          
    759            // Hold off interrupts
    760            HAL_ENTER_CRITICAL_SECTION(intState);
   \   000005   A2AF         MOV     C,0xa8.7
   \   000007   E4           CLR     A
   \   000008   33           RLC     A
   \   000009   FE           MOV     R6,A
   \   00000A   C2AF         CLR     0xa8.7
    761          
    762            OSAL_MSG_NEXT( msg_ptr ) = NULL;
   \   00000C   EC           MOV     A,R4
   \   00000D   24FB         ADD     A,#-0x5
   \   00000F   F582         MOV     DPL,A
   \   000011   ED           MOV     A,R5
   \   000012   34FF         ADDC    A,#-0x1
   \   000014   F583         MOV     DPH,A
   \   000016   7400         MOV     A,#0x0
   \   000018   F0           MOVX    @DPTR,A
   \   000019   A3           INC     DPTR
   \   00001A   7400         MOV     A,#0x0
   \   00001C   F0           MOVX    @DPTR,A
    763            // If first message in queue
    764            if ( *q_ptr == NULL )
   \   00001D   8A82         MOV     DPL,R2
   \   00001F   8B83         MOV     DPH,R3
   \   000021   E0           MOVX    A,@DPTR
   \   000022   F8           MOV     R0,A
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F9           MOV     R1,A
   \   000026   E8           MOV     A,R0
   \   000027   49           ORL     A,R1
   \   000028   700B         JNZ     ??osal_msg_enqueue_0
    765            {
    766              *q_ptr = msg_ptr;
   \   00002A   8A82         MOV     DPL,R2
   \   00002C   8B83         MOV     DPH,R3
   \   00002E   EC           MOV     A,R4
   \   00002F   F0           MOVX    @DPTR,A
   \   000030   A3           INC     DPTR
   \   000031   ED           MOV     A,R5
   \   000032   F0           MOVX    @DPTR,A
   \   000033   803C         SJMP    ??osal_msg_enqueue_1
    767            }
    768            else
    769            {
    770              // Find end of queue
    771              for ( list = *q_ptr; OSAL_MSG_NEXT( list ) != NULL; list = OSAL_MSG_NEXT( list ) );
   \                     ??osal_msg_enqueue_0:
   \   000035   8A82         MOV     DPL,R2
   \   000037   8B83         MOV     DPH,R3
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   F8           MOV     R0,A
   \   00003B   A3           INC     DPTR
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   F9           MOV     R1,A
   \   00003E   800F         SJMP    ??osal_msg_enqueue_2
   \                     ??osal_msg_enqueue_3:
   \   000040   E8           MOV     A,R0
   \   000041   24FB         ADD     A,#-0x5
   \   000043   F582         MOV     DPL,A
   \   000045   E9           MOV     A,R1
   \   000046   34FF         ADDC    A,#-0x1
   \   000048   F583         MOV     DPH,A
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F8           MOV     R0,A
   \   00004C   A3           INC     DPTR
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   F9           MOV     R1,A
   \                     ??osal_msg_enqueue_2:
   \   00004F   E8           MOV     A,R0
   \   000050   24FB         ADD     A,#-0x5
   \   000052   F582         MOV     DPL,A
   \   000054   E9           MOV     A,R1
   \   000055   34FF         ADDC    A,#-0x1
   \   000057   F583         MOV     DPH,A
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   FA           MOV     R2,A
   \   00005B   A3           INC     DPTR
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   FB           MOV     R3,A
   \   00005E   EA           MOV     A,R2
   \   00005F   4B           ORL     A,R3
   \   000060   70DE         JNZ     ??osal_msg_enqueue_3
    772          
    773              // Add message to end of queue
    774              OSAL_MSG_NEXT( list ) = msg_ptr;
   \   000062   E8           MOV     A,R0
   \   000063   24FB         ADD     A,#-0x5
   \   000065   F582         MOV     DPL,A
   \   000067   E9           MOV     A,R1
   \   000068   34FF         ADDC    A,#-0x1
   \   00006A   F583         MOV     DPH,A
   \   00006C   EC           MOV     A,R4
   \   00006D   F0           MOVX    @DPTR,A
   \   00006E   A3           INC     DPTR
   \   00006F   ED           MOV     A,R5
   \   000070   F0           MOVX    @DPTR,A
    775            }
    776          
    777            // Re-enable interrupts
    778            HAL_EXIT_CRITICAL_SECTION(intState);
   \                     ??osal_msg_enqueue_1:
   \   000071   EE           MOV     A,R6
   \   000072   F8           MOV     R0,A
   \   000073   EE           MOV     A,R6
   \   000074   A2E0         MOV     C,0xE0 /* A   */.0
   \   000076   92AF         MOV     0xa8.7,C
    779          }
   \   000078   7F01         MOV     R7,#0x1
   \   00007A   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   00007D                REQUIRE _A_IEN0
    780          
    781          /*********************************************************************
    782           * @fn      osal_msg_dequeue
    783           *
    784           * @brief
    785           *
    786           *    This function dequeues an OSAL message from an OSAL queue.
    787           *
    788           * @param   osal_msg_q_t *q_ptr - OSAL queue
    789           *
    790           * @return  void * - pointer to OSAL message or NULL of queue is empty.
    791           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    792          void *osal_msg_dequeue( osal_msg_q_t *q_ptr )
   \                     osal_msg_dequeue:
    793          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    794            void *msg_ptr = NULL;
   \   000005   7800         MOV     R0,#0x0
   \   000007   7900         MOV     R1,#0x0
    795            halIntState_t intState;
    796          
    797            // Hold off interrupts
    798            HAL_ENTER_CRITICAL_SECTION(intState);
   \   000009   A2AF         MOV     C,0xa8.7
   \   00000B   E4           CLR     A
   \   00000C   33           RLC     A
   \   00000D   FE           MOV     R6,A
   \   00000E   C2AF         CLR     0xa8.7
    799          
    800            if ( *q_ptr != NULL )
   \   000010   8A82         MOV     DPL,R2
   \   000012   8B83         MOV     DPH,R3
   \   000014   E0           MOVX    A,@DPTR
   \   000015   FC           MOV     R4,A
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   FD           MOV     R5,A
   \   000019   EC           MOV     A,R4
   \   00001A   4D           ORL     A,R5
   \   00001B   603F         JZ      ??osal_msg_dequeue_0
    801            {
    802              // Dequeue message
    803              msg_ptr = *q_ptr;
   \   00001D   8A82         MOV     DPL,R2
   \   00001F   8B83         MOV     DPH,R3
   \   000021   E0           MOVX    A,@DPTR
   \   000022   F8           MOV     R0,A
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F9           MOV     R1,A
    804              *q_ptr = OSAL_MSG_NEXT( msg_ptr );
   \   000026   E8           MOV     A,R0
   \   000027   24FB         ADD     A,#-0x5
   \   000029   F582         MOV     DPL,A
   \   00002B   E9           MOV     A,R1
   \   00002C   34FF         ADDC    A,#-0x1
   \   00002E   F583         MOV     DPH,A
   \   000030   E0           MOVX    A,@DPTR
   \   000031   FC           MOV     R4,A
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   FD           MOV     R5,A
   \   000035   8A82         MOV     DPL,R2
   \   000037   8B83         MOV     DPH,R3
   \   000039   EC           MOV     A,R4
   \   00003A   F0           MOVX    @DPTR,A
   \   00003B   A3           INC     DPTR
   \   00003C   ED           MOV     A,R5
   \   00003D   F0           MOVX    @DPTR,A
    805              OSAL_MSG_NEXT( msg_ptr ) = NULL;
   \   00003E   E8           MOV     A,R0
   \   00003F   24FB         ADD     A,#-0x5
   \   000041   F582         MOV     DPL,A
   \   000043   E9           MOV     A,R1
   \   000044   34FF         ADDC    A,#-0x1
   \   000046   F583         MOV     DPH,A
   \   000048   7400         MOV     A,#0x0
   \   00004A   F0           MOVX    @DPTR,A
   \   00004B   A3           INC     DPTR
   \   00004C   7400         MOV     A,#0x0
   \   00004E   F0           MOVX    @DPTR,A
    806              OSAL_MSG_ID( msg_ptr ) = TASK_NO_TASK;
   \   00004F   E8           MOV     A,R0
   \   000050   24FF         ADD     A,#-0x1
   \   000052   F582         MOV     DPL,A
   \   000054   E9           MOV     A,R1
   \   000055   34FF         ADDC    A,#-0x1
   \   000057   F583         MOV     DPH,A
   \   000059   74FF         MOV     A,#-0x1
   \   00005B   F0           MOVX    @DPTR,A
    807            }
    808          
    809            // Re-enable interrupts
    810            HAL_EXIT_CRITICAL_SECTION(intState);
   \                     ??osal_msg_dequeue_0:
   \   00005C   EE           MOV     A,R6
   \   00005D   FC           MOV     R4,A
   \   00005E   EE           MOV     A,R6
   \   00005F   A2E0         MOV     C,0xE0 /* A   */.0
   \   000061   92AF         MOV     0xa8.7,C
    811          
    812            return msg_ptr;
   \   000063   E8           MOV     A,R0
   \   000064   FA           MOV     R2,A
   \   000065   E9           MOV     A,R1
   \   000066   FB           MOV     R3,A
   \   000067   7F01         MOV     R7,#0x1
   \   000069   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   00006C                REQUIRE _A_IEN0
    813          }
    814          
    815          /*********************************************************************
    816           * @fn      osal_msg_push
    817           *
    818           * @brief
    819           *
    820           *    This function pushes an OSAL message to the head of an OSAL
    821           *    queue.
    822           *
    823           * @param   osal_msg_q_t *q_ptr - OSAL queue
    824           * @param   void *msg_ptr  - OSAL message
    825           *
    826           * @return  none
    827           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    828          void osal_msg_push( osal_msg_q_t *q_ptr, void *msg_ptr )
   \                     osal_msg_push:
    829          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    830            halIntState_t intState;
    831          
    832            // Hold off interrupts
    833            HAL_ENTER_CRITICAL_SECTION(intState);
   \   000005   A2AF         MOV     C,0xa8.7
   \   000007   E4           CLR     A
   \   000008   33           RLC     A
   \   000009   F8           MOV     R0,A
   \   00000A   C2AF         CLR     0xa8.7
    834          
    835            // Push message to head of queue
    836            OSAL_MSG_NEXT( msg_ptr ) = *q_ptr;
   \   00000C   8A82         MOV     DPL,R2
   \   00000E   8B83         MOV     DPH,R3
   \   000010   E0           MOVX    A,@DPTR
   \   000011   FE           MOV     R6,A
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   FF           MOV     R7,A
   \   000015   EC           MOV     A,R4
   \   000016   24FB         ADD     A,#-0x5
   \   000018   F582         MOV     DPL,A
   \   00001A   ED           MOV     A,R5
   \   00001B   34FF         ADDC    A,#-0x1
   \   00001D   F583         MOV     DPH,A
   \   00001F   EE           MOV     A,R6
   \   000020   F0           MOVX    @DPTR,A
   \   000021   A3           INC     DPTR
   \   000022   EF           MOV     A,R7
   \   000023   F0           MOVX    @DPTR,A
    837            *q_ptr = msg_ptr;
   \   000024   8A82         MOV     DPL,R2
   \   000026   8B83         MOV     DPH,R3
   \   000028   EC           MOV     A,R4
   \   000029   F0           MOVX    @DPTR,A
   \   00002A   A3           INC     DPTR
   \   00002B   ED           MOV     A,R5
   \   00002C   F0           MOVX    @DPTR,A
    838          
    839            // Re-enable interrupts
    840            HAL_EXIT_CRITICAL_SECTION(intState);
   \   00002D   E8           MOV     A,R0
   \   00002E   F9           MOV     R1,A
   \   00002F   E8           MOV     A,R0
   \   000030   A2E0         MOV     C,0xE0 /* A   */.0
   \   000032   92AF         MOV     0xa8.7,C
    841          }
   \   000034   7F01         MOV     R7,#0x1
   \   000036   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000039                REQUIRE _A_IEN0
    842          
    843          /*********************************************************************
    844           * @fn      osal_msg_extract
    845           *
    846           * @brief
    847           *
    848           *    This function extracts and removes an OSAL message from the
    849           *    middle of an OSAL queue.
    850           *
    851           * @param   osal_msg_q_t *q_ptr - OSAL queue
    852           * @param   void *msg_ptr  - OSAL message to be extracted
    853           * @param   void *prev_ptr  - OSAL message before msg_ptr in queue
    854           *
    855           * @return  none
    856           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    857          void osal_msg_extract( osal_msg_q_t *q_ptr, void *msg_ptr, void *prev_ptr )
   \                     osal_msg_extract:
    858          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    859            halIntState_t intState;
    860          
    861            // Hold off interrupts
    862            HAL_ENTER_CRITICAL_SECTION(intState);
   \   000005   A2AF         MOV     C,0xa8.7
   \   000007   E4           CLR     A
   \   000008   33           RLC     A
   \   000009   FE           MOV     R6,A
   \   00000A   C2AF         CLR     0xa8.7
    863          
    864            if ( msg_ptr == *q_ptr )
   \   00000C   8A82         MOV     DPL,R2
   \   00000E   8B83         MOV     DPH,R3
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F8           MOV     R0,A
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F9           MOV     R1,A
   \   000015   EC           MOV     A,R4
   \   000016   68           XRL     A,R0
   \   000017   7002         JNZ     ??osal_msg_extract_0
   \   000019   ED           MOV     A,R5
   \   00001A   69           XRL     A,R1
   \                     ??osal_msg_extract_0:
   \   00001B   701A         JNZ     ??osal_msg_extract_1
    865            {
    866              // remove from first
    867              *q_ptr = OSAL_MSG_NEXT( msg_ptr );
   \   00001D   EC           MOV     A,R4
   \   00001E   24FB         ADD     A,#-0x5
   \   000020   F582         MOV     DPL,A
   \   000022   ED           MOV     A,R5
   \   000023   34FF         ADDC    A,#-0x1
   \   000025   F583         MOV     DPH,A
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F8           MOV     R0,A
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F9           MOV     R1,A
   \   00002C   8A82         MOV     DPL,R2
   \   00002E   8B83         MOV     DPH,R3
   \   000030   E8           MOV     A,R0
   \   000031   F0           MOVX    @DPTR,A
   \   000032   A3           INC     DPTR
   \   000033   E9           MOV     A,R1
   \   000034   F0           MOVX    @DPTR,A
   \   000035   8027         SJMP    ??osal_msg_extract_2
    868            }
    869            else
    870            {
    871              // remove from middle
    872              OSAL_MSG_NEXT( prev_ptr ) = OSAL_MSG_NEXT( msg_ptr );
   \                     ??osal_msg_extract_1:
   \   000037   EC           MOV     A,R4
   \   000038   24FB         ADD     A,#-0x5
   \   00003A   F582         MOV     DPL,A
   \   00003C   ED           MOV     A,R5
   \   00003D   34FF         ADDC    A,#-0x1
   \   00003F   F583         MOV     DPH,A
   \   000041   E0           MOVX    A,@DPTR
   \   000042   F8           MOV     R0,A
   \   000043   A3           INC     DPTR
   \   000044   E0           MOVX    A,@DPTR
   \   000045   F9           MOV     R1,A
   \   000046   7409         MOV     A,#0x9
   \   000048   12....       LCALL   ?XSTACK_DISP0_8
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   FA           MOV     R2,A
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   CA           XCH     A,R2
   \   000050   24FB         ADD     A,#-0x5
   \   000052   F582         MOV     DPL,A
   \   000054   CA           XCH     A,R2
   \   000055   34FF         ADDC    A,#-0x1
   \   000057   F583         MOV     DPH,A
   \   000059   E8           MOV     A,R0
   \   00005A   F0           MOVX    @DPTR,A
   \   00005B   A3           INC     DPTR
   \   00005C   E9           MOV     A,R1
   \   00005D   F0           MOVX    @DPTR,A
    873            }
    874            OSAL_MSG_NEXT( msg_ptr ) = NULL;
   \                     ??osal_msg_extract_2:
   \   00005E   EC           MOV     A,R4
   \   00005F   24FB         ADD     A,#-0x5
   \   000061   F582         MOV     DPL,A
   \   000063   ED           MOV     A,R5
   \   000064   34FF         ADDC    A,#-0x1
   \   000066   F583         MOV     DPH,A
   \   000068   7400         MOV     A,#0x0
   \   00006A   F0           MOVX    @DPTR,A
   \   00006B   A3           INC     DPTR
   \   00006C   7400         MOV     A,#0x0
   \   00006E   F0           MOVX    @DPTR,A
    875            OSAL_MSG_ID( msg_ptr ) = TASK_NO_TASK;
   \   00006F   EC           MOV     A,R4
   \   000070   24FF         ADD     A,#-0x1
   \   000072   F582         MOV     DPL,A
   \   000074   ED           MOV     A,R5
   \   000075   34FF         ADDC    A,#-0x1
   \   000077   F583         MOV     DPH,A
   \   000079   74FF         MOV     A,#-0x1
   \   00007B   F0           MOVX    @DPTR,A
    876          
    877            // Re-enable interrupts
    878            HAL_EXIT_CRITICAL_SECTION(intState);
   \   00007C   EE           MOV     A,R6
   \   00007D   F8           MOV     R0,A
   \   00007E   EE           MOV     A,R6
   \   00007F   A2E0         MOV     C,0xE0 /* A   */.0
   \   000081   92AF         MOV     0xa8.7,C
    879          }
   \   000083   7F01         MOV     R7,#0x1
   \   000085   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000088                REQUIRE _A_IEN0
    880          
    881          /*********************************************************************
    882           * @fn      osal_msg_enqueue_max
    883           *
    884           * @brief
    885           *
    886           *    This function enqueues an OSAL message into an OSAL queue if
    887           *    the length of the queue is less than max.
    888           *
    889           * @param   osal_msg_q_t *q_ptr - OSAL queue
    890           * @param   void *msg_ptr  - OSAL message
    891           * @param   uint8 max - maximum length of queue
    892           *
    893           * @return  TRUE if message was enqueued, FALSE otherwise
    894           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    895          uint8 osal_msg_enqueue_max( osal_msg_q_t *q_ptr, void *msg_ptr, uint8 max )
   \                     osal_msg_enqueue_max:
    896          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V0,R1
    897            void *list;
    898            uint8 ret = FALSE;
   \   00000B   7A00         MOV     R2,#0x0
    899            halIntState_t intState;
    900          
    901            // Hold off interrupts
    902            HAL_ENTER_CRITICAL_SECTION(intState);
   \   00000D   A2AF         MOV     C,0xa8.7
   \   00000F   E4           CLR     A
   \   000010   33           RLC     A
   \   000011   FB           MOV     R3,A
   \   000012   C2AF         CLR     0xa8.7
    903          
    904            // If first message in queue
    905            if ( *q_ptr == NULL )
   \   000014   8E82         MOV     DPL,R6
   \   000016   8F83         MOV     DPH,R7
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F8           MOV     R0,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F9           MOV     R1,A
   \   00001D   E8           MOV     A,R0
   \   00001E   49           ORL     A,R1
   \   00001F   700D         JNZ     ??osal_msg_enqueue_max_0
    906            {
    907              *q_ptr = msg_ptr;
   \   000021   8E82         MOV     DPL,R6
   \   000023   8F83         MOV     DPH,R7
   \   000025   EC           MOV     A,R4
   \   000026   F0           MOVX    @DPTR,A
   \   000027   A3           INC     DPTR
   \   000028   ED           MOV     A,R5
   \   000029   F0           MOVX    @DPTR,A
    908              ret = TRUE;
   \   00002A   7A01         MOV     R2,#0x1
   \   00002C   804A         SJMP    ??osal_msg_enqueue_max_1
    909            }
    910            else
    911            {
    912              // Find end of queue or max
    913              list = *q_ptr;
   \                     ??osal_msg_enqueue_max_0:
   \   00002E   8E82         MOV     DPL,R6
   \   000030   8F83         MOV     DPH,R7
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F8           MOV     R0,A
   \   000034   A3           INC     DPTR
   \   000035   E0           MOVX    A,@DPTR
   \   000036   F9           MOV     R1,A
    914              max--;
   \   000037   15..         DEC     ?V0
   \   000039   8011         SJMP    ??osal_msg_enqueue_max_2
    915              while ( (OSAL_MSG_NEXT( list ) != NULL) && (max > 0) )
    916              {
    917                list = OSAL_MSG_NEXT( list );
   \                     ??osal_msg_enqueue_max_3:
   \   00003B   E8           MOV     A,R0
   \   00003C   24FB         ADD     A,#-0x5
   \   00003E   F582         MOV     DPL,A
   \   000040   E9           MOV     A,R1
   \   000041   34FF         ADDC    A,#-0x1
   \   000043   F583         MOV     DPH,A
   \   000045   E0           MOVX    A,@DPTR
   \   000046   F8           MOV     R0,A
   \   000047   A3           INC     DPTR
   \   000048   E0           MOVX    A,@DPTR
   \   000049   F9           MOV     R1,A
    918                max--;
   \   00004A   15..         DEC     ?V0
    919              }
   \                     ??osal_msg_enqueue_max_2:
   \   00004C   E8           MOV     A,R0
   \   00004D   24FB         ADD     A,#-0x5
   \   00004F   F582         MOV     DPL,A
   \   000051   E9           MOV     A,R1
   \   000052   34FF         ADDC    A,#-0x1
   \   000054   F583         MOV     DPH,A
   \   000056   E0           MOVX    A,@DPTR
   \   000057   FE           MOV     R6,A
   \   000058   A3           INC     DPTR
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   FF           MOV     R7,A
   \   00005B   EE           MOV     A,R6
   \   00005C   4F           ORL     A,R7
   \   00005D   6004         JZ      ??osal_msg_enqueue_max_4
   \   00005F   E5..         MOV     A,?V0
   \   000061   70D8         JNZ     ??osal_msg_enqueue_max_3
    920          
    921              // Add message to end of queue if max not reached
    922              if ( max != 0 )
   \                     ??osal_msg_enqueue_max_4:
   \   000063   E5..         MOV     A,?V0
   \   000065   6011         JZ      ??osal_msg_enqueue_max_1
    923              {
    924                OSAL_MSG_NEXT( list ) = msg_ptr;
   \   000067   E8           MOV     A,R0
   \   000068   24FB         ADD     A,#-0x5
   \   00006A   F582         MOV     DPL,A
   \   00006C   E9           MOV     A,R1
   \   00006D   34FF         ADDC    A,#-0x1
   \   00006F   F583         MOV     DPH,A
   \   000071   EC           MOV     A,R4
   \   000072   F0           MOVX    @DPTR,A
   \   000073   A3           INC     DPTR
   \   000074   ED           MOV     A,R5
   \   000075   F0           MOVX    @DPTR,A
    925                ret = TRUE;
   \   000076   7A01         MOV     R2,#0x1
    926              }
    927            }
    928          
    929            // Re-enable interrupts
    930            HAL_EXIT_CRITICAL_SECTION(intState);
   \                     ??osal_msg_enqueue_max_1:
   \   000078   EB           MOV     A,R3
   \   000079   F8           MOV     R0,A
   \   00007A   EB           MOV     A,R3
   \   00007B   A2E0         MOV     C,0xE0 /* A   */.0
   \   00007D   92AF         MOV     0xa8.7,C
    931          
    932            return ret;
   \   00007F   EA           MOV     A,R2
   \   000080   F9           MOV     R1,A
   \   000081   7F01         MOV     R7,#0x1
   \   000083   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000086                REQUIRE _A_IEN0
    933          }
    934          
    935          /*********************************************************************
    936           * @fn      osal_set_event
    937           *
    938           * @brief
    939           *
    940           *    This function is called to set the event flags for a task. The
    941           *    event passed in is OR'd into the task's event variable.
    942           *
    943           * @param   uint8 task_id - receiving tasks ID
    944           * @param   uint8 event_flag - what event to set
    945           *
    946           * @return  SUCCESS, INVALID_TASK
    947           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    948          uint8 osal_set_event( uint8 task_id, uint16 event_flag )
   \                     osal_set_event:
    949          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    950            if ( task_id < tasksCnt )
   \   000007   90....       MOV     DPTR,#tasksCnt
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F8           MOV     R0,A
   \   00000C   EE           MOV     A,R6
   \   00000D   C3           CLR     C
   \   00000E   98           SUBB    A,R0
   \   00000F   503F         JNC     ??osal_set_event_0
    951            {
    952              halIntState_t   intState;
    953              HAL_ENTER_CRITICAL_SECTION(intState);    // Hold off interrupts
   \   000011   A2AF         MOV     C,0xa8.7
   \   000013   E4           CLR     A
   \   000014   33           RLC     A
   \   000015   FC           MOV     R4,A
   \   000016   C2AF         CLR     0xa8.7
    954              tasksEvents[task_id] |= event_flag;  // Stuff the event bit(s)
   \   000018   EE           MOV     A,R6
   \   000019   F8           MOV     R0,A
   \   00001A   7900         MOV     R1,#0x0
   \   00001C   E8           MOV     A,R0
   \   00001D   75F002       MOV     B,#0x2
   \   000020   A4           MUL     AB
   \   000021   C8           XCH     A,R0
   \   000022   ADF0         MOV     R5,B
   \   000024   75F000       MOV     B,#0x0
   \   000027   A4           MUL     AB
   \   000028   2D           ADD     A,R5
   \   000029   FD           MOV     R5,A
   \   00002A   75F002       MOV     B,#0x2
   \   00002D   E9           MOV     A,R1
   \   00002E   A4           MUL     AB
   \   00002F   2D           ADD     A,R5
   \   000030   F9           MOV     R1,A
   \   000031   90....       MOV     DPTR,#tasksEvents
   \   000034   E0           MOVX    A,@DPTR
   \   000035   28           ADD     A,R0
   \   000036   FD           MOV     R5,A
   \   000037   A3           INC     DPTR
   \   000038   E0           MOVX    A,@DPTR
   \   000039   39           ADDC    A,R1
   \   00003A   8D82         MOV     DPL,R5
   \   00003C   F583         MOV     DPH,A
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   4A           ORL     A,R2
   \   000040   F0           MOVX    @DPTR,A
   \   000041   A3           INC     DPTR
   \   000042   E0           MOVX    A,@DPTR
   \   000043   4B           ORL     A,R3
   \   000044   F0           MOVX    @DPTR,A
    955              HAL_EXIT_CRITICAL_SECTION(intState);     // Release interrupts
   \   000045   EC           MOV     A,R4
   \   000046   F8           MOV     R0,A
   \   000047   EC           MOV     A,R4
   \   000048   A2E0         MOV     C,0xE0 /* A   */.0
   \   00004A   92AF         MOV     0xa8.7,C
    956              return ( SUCCESS );
   \   00004C   7900         MOV     R1,#0x0
   \   00004E   8002         SJMP    ??osal_set_event_1
    957            }
    958             else
    959            {
    960              return ( INVALID_TASK );
   \                     ??osal_set_event_0:
   \   000050   7903         MOV     R1,#0x3
   \                     ??osal_set_event_1:
   \   000052   7F01         MOV     R7,#0x1
   \   000054   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000057                REQUIRE _A_IEN0
    961            }
    962          }
    963          
    964          /*********************************************************************
    965           * @fn      osal_clear_event
    966           *
    967           * @brief
    968           *
    969           *    This function is called to clear the event flags for a task. The
    970           *    event passed in is masked out of the task's event variable.
    971           *
    972           * @param   uint8 task_id - receiving tasks ID
    973           * @param   uint8 event_flag - what event to clear
    974           *
    975           * @return  SUCCESS, INVALID_TASK
    976           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    977          uint8 osal_clear_event( uint8 task_id, uint16 event_flag )
   \                     osal_clear_event:
    978          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
    979            if ( task_id < tasksCnt )
   \   000007   90....       MOV     DPTR,#tasksCnt
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F8           MOV     R0,A
   \   00000C   EF           MOV     A,R7
   \   00000D   C3           CLR     C
   \   00000E   98           SUBB    A,R0
   \   00000F   5045         JNC     ??osal_clear_event_0
    980            {
    981              halIntState_t   intState;
    982              HAL_ENTER_CRITICAL_SECTION(intState);    // Hold off interrupts
   \   000011   A2AF         MOV     C,0xa8.7
   \   000013   E4           CLR     A
   \   000014   33           RLC     A
   \   000015   FE           MOV     R6,A
   \   000016   C2AF         CLR     0xa8.7
    983              tasksEvents[task_id] &= ~(event_flag);   // Clear the event bit(s)
   \   000018   EA           MOV     A,R2
   \   000019   F4           CPL     A
   \   00001A   FC           MOV     R4,A
   \   00001B   EB           MOV     A,R3
   \   00001C   F4           CPL     A
   \   00001D   FD           MOV     R5,A
   \   00001E   EF           MOV     A,R7
   \   00001F   F8           MOV     R0,A
   \   000020   7900         MOV     R1,#0x0
   \   000022   E8           MOV     A,R0
   \   000023   75F002       MOV     B,#0x2
   \   000026   A4           MUL     AB
   \   000027   C8           XCH     A,R0
   \   000028   AAF0         MOV     R2,B
   \   00002A   75F000       MOV     B,#0x0
   \   00002D   A4           MUL     AB
   \   00002E   2A           ADD     A,R2
   \   00002F   FA           MOV     R2,A
   \   000030   75F002       MOV     B,#0x2
   \   000033   E9           MOV     A,R1
   \   000034   A4           MUL     AB
   \   000035   2A           ADD     A,R2
   \   000036   F9           MOV     R1,A
   \   000037   90....       MOV     DPTR,#tasksEvents
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   28           ADD     A,R0
   \   00003C   FA           MOV     R2,A
   \   00003D   A3           INC     DPTR
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   39           ADDC    A,R1
   \   000040   8A82         MOV     DPL,R2
   \   000042   F583         MOV     DPH,A
   \   000044   E0           MOVX    A,@DPTR
   \   000045   5C           ANL     A,R4
   \   000046   F0           MOVX    @DPTR,A
   \   000047   A3           INC     DPTR
   \   000048   E0           MOVX    A,@DPTR
   \   000049   5D           ANL     A,R5
   \   00004A   F0           MOVX    @DPTR,A
    984              HAL_EXIT_CRITICAL_SECTION(intState);     // Release interrupts
   \   00004B   EE           MOV     A,R6
   \   00004C   F8           MOV     R0,A
   \   00004D   EE           MOV     A,R6
   \   00004E   A2E0         MOV     C,0xE0 /* A   */.0
   \   000050   92AF         MOV     0xa8.7,C
    985              return ( SUCCESS );
   \   000052   7900         MOV     R1,#0x0
   \   000054   8002         SJMP    ??osal_clear_event_1
    986            }
    987             else
    988            {
    989              return ( INVALID_TASK );
   \                     ??osal_clear_event_0:
   \   000056   7903         MOV     R1,#0x3
   \                     ??osal_clear_event_1:
   \   000058   7F01         MOV     R7,#0x1
   \   00005A   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   00005D                REQUIRE _A_IEN0
    990            }
    991          }
    992          
    993          /*********************************************************************
    994           * @fn      osal_isr_register
    995           *
    996           * @brief
    997           *
    998           *   This function is called to register a service routine with an
    999           *   interrupt. When the interrupt occurs, this service routine is called.
   1000           *
   1001           * @param   uint8 interrupt_id - Interrupt number
   1002           * @param   void (*isr_ptr)( uint8* ) - function pointer to ISR
   1003           *
   1004           * @return  SUCCESS, INVALID_INTERRUPT_ID,
   1005           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1006          uint8 osal_isr_register( uint8 interrupt_id, void (*isr_ptr)( uint8* ) )
   \                     osal_isr_register:
   1007          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1008            // Remove these statements when functionality is complete
   1009            (void)interrupt_id;
   1010            (void)isr_ptr;
   1011            return ( SUCCESS );
   \   000000   7900         MOV     R1,#0x0
   \   000002   02....       LJMP    ?BRET
   1012          }
   1013          
   1014          /*********************************************************************
   1015           * @fn      osal_int_enable
   1016           *
   1017           * @brief
   1018           *
   1019           *   This function is called to enable an interrupt. Once enabled,
   1020           *   occurrence of the interrupt causes the service routine associated
   1021           *   with that interrupt to be called.
   1022           *
   1023           *   If INTS_ALL is the interrupt_id, interrupts (in general) are enabled.
   1024           *   If a single interrupt is passed in, then interrupts still have
   1025           *   to be enabled with another call to INTS_ALL.
   1026           *
   1027           * @param   uint8 interrupt_id - Interrupt number
   1028           *
   1029           * @return  SUCCESS or INVALID_INTERRUPT_ID
   1030           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1031          uint8 osal_int_enable( uint8 interrupt_id )
   \                     osal_int_enable:
   1032          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   E9           MOV     A,R1
   \   000001   F8           MOV     R0,A
   1033          
   1034            if ( interrupt_id == INTS_ALL )
   \   000002   74FF         MOV     A,#-0x1
   \   000004   68           XRL     A,R0
   \   000005   7006         JNZ     ??osal_int_enable_0
   1035            {
   1036              HAL_ENABLE_INTERRUPTS();
   \   000007   D2AF         SETB    0xa8.7
   1037              return ( SUCCESS );
   \   000009   7900         MOV     R1,#0x0
   \   00000B   8002         SJMP    ??osal_int_enable_1
   1038            }
   1039            else
   1040            {
   1041              return ( INVALID_INTERRUPT_ID );
   \                     ??osal_int_enable_0:
   \   00000D   7907         MOV     R1,#0x7
   \                     ??osal_int_enable_1:
   \   00000F   02....       LJMP    ?BRET
   \   000012                REQUIRE _A_IEN0
   1042            }
   1043          }
   1044          
   1045          /*********************************************************************
   1046           * @fn      osal_int_disable
   1047           *
   1048           * @brief
   1049           *
   1050           *   This function is called to disable an interrupt. When a disabled
   1051           *   interrupt occurs, the service routine associated with that
   1052           *   interrupt is not called.
   1053           *
   1054           *   If INTS_ALL is the interrupt_id, interrupts (in general) are disabled.
   1055           *   If a single interrupt is passed in, then just that interrupt is disabled.
   1056           *
   1057           * @param   uint8 interrupt_id - Interrupt number
   1058           *
   1059           * @return  SUCCESS or INVALID_INTERRUPT_ID
   1060           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1061          uint8 osal_int_disable( uint8 interrupt_id )
   \                     osal_int_disable:
   1062          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   E9           MOV     A,R1
   \   000001   F8           MOV     R0,A
   1063          
   1064            if ( interrupt_id == INTS_ALL )
   \   000002   74FF         MOV     A,#-0x1
   \   000004   68           XRL     A,R0
   \   000005   7006         JNZ     ??osal_int_disable_0
   1065            {
   1066              HAL_DISABLE_INTERRUPTS();
   \   000007   C2AF         CLR     0xa8.7
   1067              return ( SUCCESS );
   \   000009   7900         MOV     R1,#0x0
   \   00000B   8002         SJMP    ??osal_int_disable_1
   1068            }
   1069            else
   1070            {
   1071              return ( INVALID_INTERRUPT_ID );
   \                     ??osal_int_disable_0:
   \   00000D   7907         MOV     R1,#0x7
   \                     ??osal_int_disable_1:
   \   00000F   02....       LJMP    ?BRET
   \   000012                REQUIRE _A_IEN0
   1072            }
   1073          }
   1074          
   1075          /*********************************************************************
   1076           * @fn      osal_init_system
   1077           *
   1078           * @brief
   1079           *
   1080           *   This function initializes the "task" system by creating the
   1081           *   tasks defined in the task table (OSAL_Tasks.h).
   1082           *
   1083           * @param   void
   1084           *
   1085           * @return  SUCCESS
   1086           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1087          uint8 osal_init_system( void )
   \                     osal_init_system:
   1088          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1089            // Initialize the Memory Allocation System
   1090            osal_mem_init();
   \   000004                ; Setup parameters for call to function osal_mem_init
   \   000004   12....       LCALL   `??osal_mem_init::?relay`; Banked call to: osal_mem_init
   1091          
   1092            // Initialize the message queue
   1093            osal_qHead = NULL;
   \   000007   90....       MOV     DPTR,#osal_qHead
   \   00000A   7400         MOV     A,#0x0
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   A3           INC     DPTR
   \   00000E   7400         MOV     A,#0x0
   \   000010   F0           MOVX    @DPTR,A
   1094          
   1095            // Initialize the timers
   1096            osalTimerInit();
   \   000011                ; Setup parameters for call to function osalTimerInit
   \   000011   12....       LCALL   `??osalTimerInit::?relay`; Banked call to: osalTimerInit
   1097          
   1098            // Initialize the Power Management System
   1099            osal_pwrmgr_init();
   \   000014                ; Setup parameters for call to function osal_pwrmgr_init
   \   000014   12....       LCALL   `??osal_pwrmgr_init::?relay`; Banked call to: osal_pwrmgr_init
   1100          
   1101            // Initialize the system tasks.
   1102            osalInitTasks();
   \   000017                ; Setup parameters for call to function osalInitTasks
   \   000017   12....       LCALL   `??osalInitTasks::?relay`; Banked call to: osalInitTasks
   1103          
   1104            // Setup efficient search for the first free block of heap.
   1105            osal_mem_kick();
   \   00001A                ; Setup parameters for call to function osal_mem_kick
   \   00001A   12....       LCALL   `??osal_mem_kick::?relay`; Banked call to: osal_mem_kick
   1106          
   1107            return ( SUCCESS );
   \   00001D   7900         MOV     R1,#0x0
   \   00001F   D083         POP     DPH
   \   000021   D082         POP     DPL
   \   000023   02....       LJMP    ?BRET
   1108          }
   1109          
   1110          /*********************************************************************
   1111           * @fn      osal_start_system
   1112           *
   1113           * @brief
   1114           *
   1115           *   This function is the main loop function of the task system (if
   1116           *   ZBIT and UBIT are not defined). This Function doesn't return.
   1117           *
   1118           * @param   void
   1119           *
   1120           * @return  none
   1121           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1122          void osal_start_system( void )
   \                     osal_start_system:
   1123          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1124          #if !defined ( ZBIT ) && !defined ( UBIT )
   1125            for(;;)  // Forever Loop
   1126          #endif
   1127            {
   1128              osal_run_system();
   \                     ??osal_start_system_0:
   \   000004                ; Setup parameters for call to function osal_run_system
   \   000004   12....       LCALL   `??osal_run_system::?relay`; Banked call to: osal_run_system
   \   000007   80FB         SJMP    ??osal_start_system_0
   1129            }
   1130          }
   1131          
   1132          /*********************************************************************
   1133           * @fn      osal_run_system
   1134           *
   1135           * @brief
   1136           *
   1137           *   This function will make one pass through the OSAL taskEvents table
   1138           *   and call the task_event_processor() function for the first task that
   1139           *   is found with at least one event pending. If there are no pending
   1140           *   events (all tasks), this function puts the processor into Sleep.
   1141           *
   1142           * @param   void
   1143           *
   1144           * @return  none
   1145           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1146          void osal_run_system( void )
   \                     osal_run_system:
   1147          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1148            uint8 idx = 0;
   \   000005   7E00         MOV     R6,#0x0
   1149          
   1150          #ifndef HAL_BOARD_CC2538
   1151            osalTimeUpdate();
   \   000007                ; Setup parameters for call to function osalTimeUpdate
   \   000007   12....       LCALL   `??osalTimeUpdate::?relay`; Banked call to: osalTimeUpdate
   1152          #endif
   1153            
   1154            Hal_ProcessPoll();
   \   00000A                ; Setup parameters for call to function Hal_ProcessPoll
   \   00000A   12....       LCALL   `??Hal_ProcessPoll::?relay`; Banked call to: Hal_ProcessPoll
   1155          
   1156            do {
   1157              if (tasksEvents[idx])  // Task is highest priority that is ready.
   \                     ??osal_run_system_0:
   \   00000D   EE           MOV     A,R6
   \   00000E   F8           MOV     R0,A
   \   00000F   7900         MOV     R1,#0x0
   \   000011   E8           MOV     A,R0
   \   000012   75F002       MOV     B,#0x2
   \   000015   A4           MUL     AB
   \   000016   C8           XCH     A,R0
   \   000017   AAF0         MOV     R2,B
   \   000019   75F000       MOV     B,#0x0
   \   00001C   A4           MUL     AB
   \   00001D   2A           ADD     A,R2
   \   00001E   FA           MOV     R2,A
   \   00001F   75F002       MOV     B,#0x2
   \   000022   E9           MOV     A,R1
   \   000023   A4           MUL     AB
   \   000024   2A           ADD     A,R2
   \   000025   F9           MOV     R1,A
   \   000026   90....       MOV     DPTR,#tasksEvents
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   28           ADD     A,R0
   \   00002B   FA           MOV     R2,A
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   39           ADDC    A,R1
   \   00002F   8A82         MOV     DPL,R2
   \   000031   F583         MOV     DPH,A
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F8           MOV     R0,A
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F9           MOV     R1,A
   \   000038   E8           MOV     A,R0
   \   000039   49           ORL     A,R1
   \   00003A   700B         JNZ     ??osal_run_system_1
   1158              {
   1159                break;
   1160              }
   1161            } while (++idx < tasksCnt);
   \   00003C   0E           INC     R6
   \   00003D   90....       MOV     DPTR,#tasksCnt
   \   000040   E0           MOVX    A,@DPTR
   \   000041   F8           MOV     R0,A
   \   000042   EE           MOV     A,R6
   \   000043   C3           CLR     C
   \   000044   98           SUBB    A,R0
   \   000045   40C6         JC      ??osal_run_system_0
   1162          
   1163            if (idx < tasksCnt)
   \                     ??osal_run_system_1:
   \   000047   90....       MOV     DPTR,#tasksCnt
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F8           MOV     R0,A
   \   00004C   EE           MOV     A,R6
   \   00004D   C3           CLR     C
   \   00004E   98           SUBB    A,R0
   \   00004F   4003         JC      $+5
   \   000051   02....       LJMP    ??osal_run_system_2 & 0xFFFF
   1164            {
   1165              uint16 events;
   1166              halIntState_t intState;
   1167          
   1168              HAL_ENTER_CRITICAL_SECTION(intState);
   \   000054   A2AF         MOV     C,0xa8.7
   \   000056   E4           CLR     A
   \   000057   33           RLC     A
   \   000058   FC           MOV     R4,A
   \   000059   C2AF         CLR     0xa8.7
   1169              events = tasksEvents[idx];
   \   00005B   EE           MOV     A,R6
   \   00005C   F8           MOV     R0,A
   \   00005D   7900         MOV     R1,#0x0
   \   00005F   E8           MOV     A,R0
   \   000060   75F002       MOV     B,#0x2
   \   000063   A4           MUL     AB
   \   000064   C8           XCH     A,R0
   \   000065   AAF0         MOV     R2,B
   \   000067   75F000       MOV     B,#0x0
   \   00006A   A4           MUL     AB
   \   00006B   2A           ADD     A,R2
   \   00006C   FA           MOV     R2,A
   \   00006D   75F002       MOV     B,#0x2
   \   000070   E9           MOV     A,R1
   \   000071   A4           MUL     AB
   \   000072   2A           ADD     A,R2
   \   000073   F9           MOV     R1,A
   \   000074   90....       MOV     DPTR,#tasksEvents
   \   000077   E0           MOVX    A,@DPTR
   \   000078   28           ADD     A,R0
   \   000079   FA           MOV     R2,A
   \   00007A   A3           INC     DPTR
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   39           ADDC    A,R1
   \   00007D   8A82         MOV     DPL,R2
   \   00007F   F583         MOV     DPH,A
   \   000081   E0           MOVX    A,@DPTR
   \   000082   FA           MOV     R2,A
   \   000083   A3           INC     DPTR
   \   000084   E0           MOVX    A,@DPTR
   \   000085   FB           MOV     R3,A
   1170              tasksEvents[idx] = 0;  // Clear the Events for this task.
   \   000086   EE           MOV     A,R6
   \   000087   F8           MOV     R0,A
   \   000088   7900         MOV     R1,#0x0
   \   00008A   E8           MOV     A,R0
   \   00008B   75F002       MOV     B,#0x2
   \   00008E   A4           MUL     AB
   \   00008F   C8           XCH     A,R0
   \   000090   ADF0         MOV     R5,B
   \   000092   75F000       MOV     B,#0x0
   \   000095   A4           MUL     AB
   \   000096   2D           ADD     A,R5
   \   000097   FD           MOV     R5,A
   \   000098   75F002       MOV     B,#0x2
   \   00009B   E9           MOV     A,R1
   \   00009C   A4           MUL     AB
   \   00009D   2D           ADD     A,R5
   \   00009E   F9           MOV     R1,A
   \   00009F   90....       MOV     DPTR,#tasksEvents
   \   0000A2   E0           MOVX    A,@DPTR
   \   0000A3   28           ADD     A,R0
   \   0000A4   FD           MOV     R5,A
   \   0000A5   A3           INC     DPTR
   \   0000A6   E0           MOVX    A,@DPTR
   \   0000A7   39           ADDC    A,R1
   \   0000A8   8D82         MOV     DPL,R5
   \   0000AA   F583         MOV     DPH,A
   \   0000AC   7400         MOV     A,#0x0
   \   0000AE   F0           MOVX    @DPTR,A
   \   0000AF   A3           INC     DPTR
   \   0000B0   7400         MOV     A,#0x0
   \   0000B2   F0           MOVX    @DPTR,A
   1171              HAL_EXIT_CRITICAL_SECTION(intState);
   \   0000B3   EC           MOV     A,R4
   \   0000B4   FF           MOV     R7,A
   \   0000B5   EC           MOV     A,R4
   \   0000B6   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000B8   92AF         MOV     0xa8.7,C
   1172          
   1173              activeTaskID = idx;
   \   0000BA   EE           MOV     A,R6
   \   0000BB   90....       MOV     DPTR,#activeTaskID
   \   0000BE   F0           MOVX    @DPTR,A
   1174              events = (tasksArr[idx])( idx, events );
   \   0000BF                ; Setup parameters for indirect call
   \   0000BF   EE           MOV     A,R6
   \   0000C0   F9           MOV     R1,A
   \   0000C1   C9           XCH     A,R1
   \   0000C2   FC           MOV     R4,A
   \   0000C3   C9           XCH     A,R1
   \   0000C4   EE           MOV     A,R6
   \   0000C5   F8           MOV     R0,A
   \   0000C6   7900         MOV     R1,#0x0
   \   0000C8   E8           MOV     A,R0
   \   0000C9   75F002       MOV     B,#0x2
   \   0000CC   A4           MUL     AB
   \   0000CD   C8           XCH     A,R0
   \   0000CE   ADF0         MOV     R5,B
   \   0000D0   75F000       MOV     B,#0x0
   \   0000D3   A4           MUL     AB
   \   0000D4   2D           ADD     A,R5
   \   0000D5   FD           MOV     R5,A
   \   0000D6   75F002       MOV     B,#0x2
   \   0000D9   E9           MOV     A,R1
   \   0000DA   A4           MUL     AB
   \   0000DB   2D           ADD     A,R5
   \   0000DC   F9           MOV     R1,A
   \   0000DD   74..         MOV     A,#tasksArr & 0xff
   \   0000DF   28           ADD     A,R0
   \   0000E0   F582         MOV     DPL,A
   \   0000E2   74..         MOV     A,#(tasksArr >> 8) & 0xff
   \   0000E4   39           ADDC    A,R1
   \   0000E5   F583         MOV     DPH,A
   \   0000E7   E0           MOVX    A,@DPTR
   \   0000E8   F8           MOV     R0,A
   \   0000E9   A3           INC     DPTR
   \   0000EA   E0           MOVX    A,@DPTR
   \   0000EB   F583         MOV     DPH,A
   \   0000ED   8882         MOV     DPL,R0
   \   0000EF   CC           XCH     A,R4
   \   0000F0   F9           MOV     R1,A
   \   0000F1   CC           XCH     A,R4
   \   0000F2   12....       LCALL   ?CALL_IND
   \   0000F5   8A..         MOV     ?V0,R2
   \   0000F7   8B..         MOV     ?V1,R3
   \   0000F9   AA..         MOV     R2,?V0
   \   0000FB   AB..         MOV     R3,?V1
   1175              activeTaskID = TASK_NO_TASK;
   \   0000FD   90....       MOV     DPTR,#activeTaskID
   \   000100   74FF         MOV     A,#-0x1
   \   000102   F0           MOVX    @DPTR,A
   1176          
   1177              HAL_ENTER_CRITICAL_SECTION(intState);
   \   000103   A2AF         MOV     C,0xa8.7
   \   000105   E4           CLR     A
   \   000106   33           RLC     A
   \   000107   FC           MOV     R4,A
   \   000108   C2AF         CLR     0xa8.7
   1178              tasksEvents[idx] |= events;  // Add back unprocessed events to the current task.
   \   00010A   EE           MOV     A,R6
   \   00010B   F8           MOV     R0,A
   \   00010C   7900         MOV     R1,#0x0
   \   00010E   E8           MOV     A,R0
   \   00010F   75F002       MOV     B,#0x2
   \   000112   A4           MUL     AB
   \   000113   C8           XCH     A,R0
   \   000114   ADF0         MOV     R5,B
   \   000116   75F000       MOV     B,#0x0
   \   000119   A4           MUL     AB
   \   00011A   2D           ADD     A,R5
   \   00011B   FD           MOV     R5,A
   \   00011C   75F002       MOV     B,#0x2
   \   00011F   E9           MOV     A,R1
   \   000120   A4           MUL     AB
   \   000121   2D           ADD     A,R5
   \   000122   F9           MOV     R1,A
   \   000123   90....       MOV     DPTR,#tasksEvents
   \   000126   E0           MOVX    A,@DPTR
   \   000127   28           ADD     A,R0
   \   000128   FD           MOV     R5,A
   \   000129   A3           INC     DPTR
   \   00012A   E0           MOVX    A,@DPTR
   \   00012B   39           ADDC    A,R1
   \   00012C   8D82         MOV     DPL,R5
   \   00012E   F583         MOV     DPH,A
   \   000130   E0           MOVX    A,@DPTR
   \   000131   4A           ORL     A,R2
   \   000132   F0           MOVX    @DPTR,A
   \   000133   A3           INC     DPTR
   \   000134   E0           MOVX    A,@DPTR
   \   000135   4B           ORL     A,R3
   \   000136   F0           MOVX    @DPTR,A
   1179              HAL_EXIT_CRITICAL_SECTION(intState);
   \   000137   EC           MOV     A,R4
   \   000138   F8           MOV     R0,A
   \   000139   EC           MOV     A,R4
   \   00013A   A2E0         MOV     C,0xE0 /* A   */.0
   \   00013C   92AF         MOV     0xa8.7,C
   1180            }
   1181          #if defined( POWER_SAVING )
   1182            else  // Complete pass through all task events with no activity?
   1183            {
   1184              osal_pwrmgr_powerconserve();  // Put the processor/system into sleep
   1185            }
   1186          #endif
   1187          
   1188            /* Yield in case cooperative scheduling is being used. */
   1189          #if defined (configUSE_PREEMPTION) && (configUSE_PREEMPTION == 0)
   1190            {
   1191              osal_task_yield();
   1192            }
   1193          #endif
   1194          }
   \                     ??osal_run_system_2:
   \   00013E   7F02         MOV     R7,#0x2
   \   000140   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000143                REQUIRE _A_IEN0
   1195          
   1196          /*********************************************************************
   1197           * @fn      osal_buffer_uint32
   1198           *
   1199           * @brief
   1200           *
   1201           *   Buffer an uint32 value - LSB first.
   1202           *
   1203           * @param   buf - buffer
   1204           * @param   val - uint32 value
   1205           *
   1206           * @return  pointer to end of destination buffer
   1207           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1208          uint8* osal_buffer_uint32( uint8 *buf, uint32 val )
   \                     osal_buffer_uint32:
   1209          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   7410         MOV     A,#0x10
   \   000007   12....       LCALL   ?XSTACK_DISP0_8
   \   00000A   78..         MOV     R0,#?V4
   \   00000C   12....       LCALL   ?L_MOV_X
   1210            *buf++ = BREAK_UINT32( val, 0 );
   \   00000F   A8..         MOV     R0,?V4
   \   000011   A9..         MOV     R1,?V5
   \   000013   E8           MOV     A,R0
   \   000014   C0E0         PUSH    A
   \   000016   8A82         MOV     DPL,R2
   \   000018   8B83         MOV     DPH,R3
   \   00001A   D0E0         POP     A
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   8A82         MOV     DPL,R2
   \   00001F   8B83         MOV     DPH,R3
   \   000021   A3           INC     DPTR
   \   000022   AA82         MOV     R2,DPL
   \   000024   AB83         MOV     R3,DPH
   1211            *buf++ = BREAK_UINT32( val, 1 );
   \   000026   85....       MOV     ?V0,?V4
   \   000029   85....       MOV     ?V1,?V5
   \   00002C   E4           CLR     A
   \   00002D   C5..         XCH     A,?V1
   \   00002F   F5..         MOV     ?V0,A
   \   000031   E5..         MOV     A,?V0
   \   000033   C0E0         PUSH    A
   \   000035   8A82         MOV     DPL,R2
   \   000037   8B83         MOV     DPH,R3
   \   000039   D0E0         POP     A
   \   00003B   F0           MOVX    @DPTR,A
   \   00003C   8A82         MOV     DPL,R2
   \   00003E   8B83         MOV     DPH,R3
   \   000040   A3           INC     DPTR
   \   000041   AA82         MOV     R2,DPL
   \   000043   AB83         MOV     R3,DPH
   1212            *buf++ = BREAK_UINT32( val, 2 );
   \   000045   85....       MOV     ?V0,?V4
   \   000048   85....       MOV     ?V1,?V5
   \   00004B   85....       MOV     ?V2,?V6
   \   00004E   85....       MOV     ?V3,?V7
   \   000051   7410         MOV     A,#0x10
   \   000053   78..         MOV     R0,#?V0
   \   000055   12....       LCALL   ?UL_SHR
   \   000058   E5..         MOV     A,?V0
   \   00005A   C0E0         PUSH    A
   \   00005C   8A82         MOV     DPL,R2
   \   00005E   8B83         MOV     DPH,R3
   \   000060   D0E0         POP     A
   \   000062   F0           MOVX    @DPTR,A
   \   000063   8A82         MOV     DPL,R2
   \   000065   8B83         MOV     DPH,R3
   \   000067   A3           INC     DPTR
   \   000068   AA82         MOV     R2,DPL
   \   00006A   AB83         MOV     R3,DPH
   1213            *buf++ = BREAK_UINT32( val, 3 );
   \   00006C   7418         MOV     A,#0x18
   \   00006E   78..         MOV     R0,#?V4
   \   000070   12....       LCALL   ?UL_SHR
   \   000073   E5..         MOV     A,?V4
   \   000075   C0E0         PUSH    A
   \   000077   8A82         MOV     DPL,R2
   \   000079   8B83         MOV     DPH,R3
   \   00007B   D0E0         POP     A
   \   00007D   F0           MOVX    @DPTR,A
   \   00007E   8A82         MOV     DPL,R2
   \   000080   8B83         MOV     DPH,R3
   \   000082   A3           INC     DPTR
   \   000083   AA82         MOV     R2,DPL
   \   000085   AB83         MOV     R3,DPH
   1214          
   1215            return buf;
   \   000087   7F08         MOV     R7,#0x8
   \   000089   02....       LJMP    ?BANKED_LEAVE_XDATA
   1216          }
   1217          
   1218          /*********************************************************************
   1219           * @fn      osal_buffer_uint24
   1220           *
   1221           * @brief
   1222           *
   1223           *   Buffer an uint24 value - LSB first. Note that type uint24 is
   1224           *   typedef to uint32 in comdef.h
   1225           *
   1226           * @param   buf - buffer
   1227           * @param   val - uint24 value
   1228           *
   1229           * @return  pointer to end of destination buffer
   1230           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1231          uint8* osal_buffer_uint24( uint8 *buf, uint24 val )
   \                     osal_buffer_uint24:
   1232          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   7410         MOV     A,#0x10
   \   000007   12....       LCALL   ?XSTACK_DISP0_8
   \   00000A   78..         MOV     R0,#?V4
   \   00000C   12....       LCALL   ?L_MOV_X
   1233            *buf++ = BREAK_UINT32( val, 0 );
   \   00000F   85....       MOV     ?V0,?V4
   \   000012   85....       MOV     ?V1,?V5
   \   000015   E5..         MOV     A,?V0
   \   000017   C0E0         PUSH    A
   \   000019   8A82         MOV     DPL,R2
   \   00001B   8B83         MOV     DPH,R3
   \   00001D   D0E0         POP     A
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   8A82         MOV     DPL,R2
   \   000022   8B83         MOV     DPH,R3
   \   000024   A3           INC     DPTR
   \   000025   AA82         MOV     R2,DPL
   \   000027   AB83         MOV     R3,DPH
   1234            *buf++ = BREAK_UINT32( val, 1 );
   \   000029   85....       MOV     ?V0,?V4
   \   00002C   85....       MOV     ?V1,?V5
   \   00002F   E4           CLR     A
   \   000030   C5..         XCH     A,?V1
   \   000032   F5..         MOV     ?V0,A
   \   000034   E5..         MOV     A,?V0
   \   000036   C0E0         PUSH    A
   \   000038   8A82         MOV     DPL,R2
   \   00003A   8B83         MOV     DPH,R3
   \   00003C   D0E0         POP     A
   \   00003E   F0           MOVX    @DPTR,A
   \   00003F   8A82         MOV     DPL,R2
   \   000041   8B83         MOV     DPH,R3
   \   000043   A3           INC     DPTR
   \   000044   AA82         MOV     R2,DPL
   \   000046   AB83         MOV     R3,DPH
   1235            *buf++ = BREAK_UINT32( val, 2 );
   \   000048   7410         MOV     A,#0x10
   \   00004A   78..         MOV     R0,#?V4
   \   00004C   12....       LCALL   ?UL_SHR
   \   00004F   E5..         MOV     A,?V4
   \   000051   C0E0         PUSH    A
   \   000053   8A82         MOV     DPL,R2
   \   000055   8B83         MOV     DPH,R3
   \   000057   D0E0         POP     A
   \   000059   F0           MOVX    @DPTR,A
   \   00005A   8A82         MOV     DPL,R2
   \   00005C   8B83         MOV     DPH,R3
   \   00005E   A3           INC     DPTR
   \   00005F   AA82         MOV     R2,DPL
   \   000061   AB83         MOV     R3,DPH
   1236          
   1237            return buf;
   \   000063   7F08         MOV     R7,#0x8
   \   000065   02....       LJMP    ?BANKED_LEAVE_XDATA
   1238          }
   1239          
   1240          /*********************************************************************
   1241           * @fn      osal_isbufset
   1242           *
   1243           * @brief
   1244           *
   1245           *   Is all of the array elements set to a value?
   1246           *
   1247           * @param   buf - buffer to check
   1248           * @param   val - value to check each array element for
   1249           * @param   len - length to check
   1250           *
   1251           * @return  TRUE if all "val"
   1252           *          FALSE otherwise
   1253           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1254          uint8 osal_isbufset( uint8 *buf, uint8 val, uint8 len )
   \                     osal_isbufset:
   1255          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   1256            uint8 x;
   1257          
   1258            if ( buf == NULL )
   \   000007   EA           MOV     A,R2
   \   000008   4B           ORL     A,R3
   \   000009   7004         JNZ     ??osal_isbufset_0
   1259            {
   1260              return ( FALSE );
   \   00000B   7900         MOV     R1,#0x0
   \   00000D   8020         SJMP    ??osal_isbufset_1
   1261            }
   1262          
   1263            for ( x = 0; x < len; x++ )
   \                     ??osal_isbufset_0:
   \   00000F   7D00         MOV     R5,#0x0
   \   000011   8001         SJMP    ??osal_isbufset_2
   \                     ??osal_isbufset_3:
   \   000013   0D           INC     R5
   \                     ??osal_isbufset_2:
   \   000014   ED           MOV     A,R5
   \   000015   C3           CLR     C
   \   000016   9C           SUBB    A,R4
   \   000017   5014         JNC     ??osal_isbufset_4
   1264            {
   1265              // Check for non-initialized value
   1266              if ( buf[x] != val )
   \   000019   ED           MOV     A,R5
   \   00001A   F8           MOV     R0,A
   \   00001B   7900         MOV     R1,#0x0
   \   00001D   EA           MOV     A,R2
   \   00001E   28           ADD     A,R0
   \   00001F   F582         MOV     DPL,A
   \   000021   EB           MOV     A,R3
   \   000022   39           ADDC    A,R1
   \   000023   F583         MOV     DPH,A
   \   000025   E0           MOVX    A,@DPTR
   \   000026   6E           XRL     A,R6
   \   000027   60EA         JZ      ??osal_isbufset_3
   1267              {
   1268                return ( FALSE );
   \   000029   7900         MOV     R1,#0x0
   \   00002B   8002         SJMP    ??osal_isbufset_1
   1269              }
   1270            }
   1271            return ( TRUE );
   \                     ??osal_isbufset_4:
   \   00002D   7901         MOV     R1,#0x1
   \                     ??osal_isbufset_1:
   \   00002F   7F01         MOV     R7,#0x1
   \   000031   02....       LJMP    ?BANKED_LEAVE_XDATA
   1272          }
   1273          
   1274          /*********************************************************************
   1275           * @fn      osal_self
   1276           *
   1277           * @brief
   1278           *
   1279           *   This function returns the task ID of the current (active) task.
   1280           *
   1281           * @param   void
   1282           *
   1283           * @return   active task ID or TASK_NO_TASK if no task is active
   1284           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1285          uint8 osal_self( void )
   \                     osal_self:
   1286          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1287            return ( activeTaskID );
   \   000004   90....       MOV     DPTR,#activeTaskID
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F9           MOV     R1,A
   \   000009   D083         POP     DPH
   \   00000B   D082         POP     DPL
   \   00000D   02....       LJMP    ?BRET
   1288          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for activeTaskID>`:
   \   000000   FF           DB 255

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_strlen::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_strlen

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_memcpy::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_memcpy

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_revmemcpy::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_revmemcpy

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_memdup::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_memdup

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_memcmp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_memcmp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_memset::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_memset

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_build_uint16::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_build_uint16

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_build_uint32::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_build_uint32

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??_ltoa::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _ltoa

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_rand::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_rand

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_msg_allocate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_msg_allocate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_msg_deallocate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_msg_deallocate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_msg_send::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_msg_send

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_msg_push_front::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_msg_push_front

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_msg_enqueue_push::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_msg_enqueue_push

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_msg_receive::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_msg_receive

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_msg_find::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_msg_find

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_msg_count::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_msg_count

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_msg_enqueue::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_msg_enqueue

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_msg_dequeue::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_msg_dequeue

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_msg_push::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_msg_push

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_msg_extract::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_msg_extract

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_msg_enqueue_max::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_msg_enqueue_max

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_set_event::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_set_event

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_clear_event::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_clear_event

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_isr_register::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_isr_register

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_int_enable::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_int_enable

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_int_disable::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_int_disable

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_init_system::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_init_system

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_start_system::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_start_system

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_run_system::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_run_system

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_buffer_uint32::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_buffer_uint32

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_buffer_uint24::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_buffer_uint24

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_isbufset::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_isbufset

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_self::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_self

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "">`:
   \   000000   00           DB ""
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "">_1`:
   \   000000   00           DB ""
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "">_2`:
   \   000000   00           DB ""
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "0">`:
   \   000000   3000         DB "0"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_2710:
   \   000000   10270000     DD 10000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_5f5e100:
   \   000000   00E1F505     DD 100000000
   1289          
   1290          /*********************************************************************
   1291           */

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     57   _ltoa
        0     55   -> _itoa
        0     55   -> strcat
        0     55   -> strcpy
        0     55   -> strlen
      1     20   osal_buffer_uint24
      1     20   osal_buffer_uint32
      2      0   osal_build_uint16
      0     16   osal_build_uint32
      0     21   osal_clear_event
      2      0   osal_init_system
        2      0   -> osalInitTasks
        2      0   -> osalTimerInit
        2      0   -> osal_mem_init
        2      0   -> osal_mem_kick
        2      0   -> osal_pwrmgr_init
      0      0   osal_int_disable
      0      0   osal_int_enable
      0      9   osal_isbufset
      0      0   osal_isr_register
      0     22   osal_memcmp
      1     27   osal_memcpy
      0     18   osal_memdup
        0     15   -> osal_mem_alloc
        0     18   -> osal_memcpy
      0     12   osal_memset
        0     12   -> memset
      0     10   osal_msg_allocate
        0     10   -> osal_mem_alloc
      0      9   osal_msg_count
      2      9   osal_msg_deallocate
        2      0   -> osal_mem_free
      0      9   osal_msg_dequeue
      0     18   osal_msg_enqueue
      0      9   osal_msg_enqueue_max
      1     18   osal_msg_enqueue_push
        0      9   -> osal_msg_deallocate
        0      9   -> osal_msg_enqueue
        0      9   -> osal_msg_push
        0      9   -> osal_set_event
      0     23   osal_msg_extract
      2      0   osal_msg_find
      0     18   osal_msg_push
      0      9   osal_msg_push_front
        0      9   -> osal_msg_enqueue_push
      0     14   osal_msg_receive
        0     12   -> osal_clear_event
        0     14   -> osal_msg_extract
        0     12   -> osal_set_event
      0      9   osal_msg_send
        0      9   -> osal_msg_enqueue_push
      2      0   osal_rand
        2      0   -> Onboard_rand
      1     12   osal_revmemcpy
      0     10   osal_run_system
        0     10   -> Hal_ProcessPoll
        0     10   -> osalTimeUpdate
      2      0   osal_self
      0     21   osal_set_event
      2      0   osal_start_system
        2      0   -> osal_run_system
      2      0   osal_strlen
        2      0   -> strlen


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      10  ?<Constant "">
      10  ?<Constant "">_1
      10  ?<Constant "">_2
       2  ?<Constant "0">
       1  ?<Initializer for activeTaskID>
       1  _A_IEN0
       4  __Constant_2710
       4  __Constant_5f5e100
     724  _ltoa
       6  _ltoa::?relay
       1  activeTaskID
     104  osal_buffer_uint24
       6  osal_buffer_uint24::?relay
     140  osal_buffer_uint32
       6  osal_buffer_uint32::?relay
      37  osal_build_uint16
       6  osal_build_uint16::?relay
     292  osal_build_uint32
       6  osal_build_uint32::?relay
      93  osal_clear_event
       6  osal_clear_event::?relay
      38  osal_init_system
       6  osal_init_system::?relay
      18  osal_int_disable
       6  osal_int_disable::?relay
      18  osal_int_enable
       6  osal_int_enable::?relay
      52  osal_isbufset
       6  osal_isbufset::?relay
       5  osal_isr_register
       6  osal_isr_register::?relay
     124  osal_memcmp
       6  osal_memcmp::?relay
      70  osal_memcpy
       6  osal_memcpy::?relay
      78  osal_memdup
       6  osal_memdup::?relay
      33  osal_memset
       6  osal_memset::?relay
      92  osal_msg_allocate
       6  osal_msg_allocate::?relay
      85  osal_msg_count
       6  osal_msg_count::?relay
      51  osal_msg_deallocate
       6  osal_msg_deallocate::?relay
     108  osal_msg_dequeue
       6  osal_msg_dequeue::?relay
     125  osal_msg_enqueue
       6  osal_msg_enqueue::?relay
     134  osal_msg_enqueue_max
       6  osal_msg_enqueue_max::?relay
     139  osal_msg_enqueue_push
       6  osal_msg_enqueue_push::?relay
     136  osal_msg_extract
       6  osal_msg_extract::?relay
      78  osal_msg_find
       6  osal_msg_find::?relay
      57  osal_msg_push
       6  osal_msg_push::?relay
      19  osal_msg_push_front
       6  osal_msg_push_front::?relay
     153  osal_msg_receive
       6  osal_msg_receive::?relay
      19  osal_msg_send
       6  osal_msg_send::?relay
       2  osal_qHead
      14  osal_rand
       6  osal_rand::?relay
      84  osal_revmemcpy
       6  osal_revmemcpy::?relay
     323  osal_run_system
       6  osal_run_system::?relay
      16  osal_self
       6  osal_self::?relay
      87  osal_set_event
       6  osal_set_event::?relay
       9  osal_start_system
       6  osal_start_system::?relay
      14  osal_strlen
       6  osal_strlen::?relay

 
 3 569 bytes in segment BANKED_CODE
   210 bytes in segment BANK_RELAYS
     1 byte  in segment SFR_AN
     1 byte  in segment XDATA_I
     1 byte  in segment XDATA_ID
    40 bytes in segment XDATA_ROM_C
     2 bytes in segment XDATA_Z
 
 3 780 bytes of CODE  memory
    32 bytes of CONST memory (+ 8 bytes shared)
     0 bytes of DATA  memory (+ 1 byte  shared)
     3 bytes of XDATA memory

Errors: none
Warnings: none

###############################################################################
#
# IAR C/C++ Compiler V9.20.1.2476 for 8051                22/Feb/2017  14:31:45
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\koen\ZigBee-Code-WTWS\Components\stack\zdo\ZDObject.c
#    Command line       =  
#        -f
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00002000 -DZDAPP_CONFIG_PAN_ID=0xABCD
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={'H', 'O', 'G', 'E', 'S',
#        'C', 'H', 'O', 'O', 'L', 'U', 'T', 'R', 'E', 'C', 'H'}"
#        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440
#        C:\Users\koen\ZigBee-Code-WTWS\Components\stack\zdo\ZDObject.c -D
#        HOLD_AUTO_START -D BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D
#        NV_RESTORE -D HAL_UART=TRUE -lC
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\
#        -lA
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\
#        --diag_suppress Pe001,Pa010,Pe1665 -o
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\Obj\
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\Source\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ol --require_prototypes
#    List file          =  
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\ZDObject.lst
#    Object file        =  
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\Obj\ZDObject.r51
#
###############################################################################

C:\Users\koen\ZigBee-Code-WTWS\Components\stack\zdo\ZDObject.c
      1          /**************************************************************************************************
      2            Filename:       ZDObject.c
      3            Revised:        $Date: 2014-08-04 18:42:36 -0700 (Mon, 04 Aug 2014) $
      4            Revision:       $Revision: 39656 $
      5          
      6            Description:    This is the Zigbee Device Object.
      7          
      8          
      9            Copyright 2004-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComDef.h"
     44          #include "OSAL.h"
     45          #include "OSAL_Nv.h"
     46          #include "rtg.h"
     47          #include "NLMEDE.h"
     48          #include "nwk_globals.h"
     49          #include "APS.h"
     50          #include "APSMEDE.h"
     51          #include "AssocList.h"
     52          #include "BindingTable.h"
     53          #include "AddrMgr.h"
     54          #include "AF.h"
     55          #include "ZDObject.h"
     56          #include "ZDProfile.h"
     57          #include "ZDConfig.h"
     58          #include "ZDSecMgr.h"
     59          #include "ZDApp.h"
     60          #include "nwk_util.h"   // NLME_IsAddressBroadcast()
     61          #include "ZGlobals.h"
     62          #if defined MT_ZDO_CB_FUNC
     63          #include "MT.h"
     64          #endif
     65          
     66          #if defined( LCD_SUPPORTED )
     67            #include "OnBoard.h"
     68          #endif
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          
     73          /*********************************************************************
     74           * MACROS
     75           */
     76          
     77          /*********************************************************************
     78           * CONSTANTS
     79           */
     80          // NLME Stub Implementations
     81          #define ZDO_ProcessMgmtPermitJoinTimeout NLME_PermitJoiningTimeout
     82          
     83          /*********************************************************************
     84           * TYPEDEFS
     85           */
     86          #if defined ( REFLECTOR )
     87          typedef struct
     88          {
     89            byte SrcTransSeq;
     90            zAddrType_t SrcAddr;
     91            uint16 LocalCoordinator;
     92            byte epIntf;
     93            uint16 ProfileID;
     94            byte numInClusters;
     95            uint16 *inClusters;
     96            byte numOutClusters;
     97            uint16 *outClusters;
     98            byte SecurityUse;
     99            byte status;
    100          } ZDO_EDBind_t;
    101          #endif // defined ( REFLECTOR )
    102          
    103          enum
    104          {
    105            ZDMATCH_INIT,           // Initialized
    106            ZDMATCH_WAIT_REQ,       // Received first request, waiting for second
    107            ZDMATCH_SENDING_BINDS   // Received both requests, sending unbind/binds
    108          };
    109          
    110          enum
    111          {
    112            ZDMATCH_SENDING_NOT,
    113            ZDMATCH_SENDING_UNBIND,
    114            ZDMATCH_SENDING_BIND
    115          };
    116          
    117          /*********************************************************************
    118           * GLOBAL VARIABLES
    119           */
    120          
    121          /*********************************************************************
    122           * EXTERNAL VARIABLES
    123           */
    124          
    125          /*********************************************************************
    126           * EXTERNAL FUNCTIONS
    127           */
    128          
    129          /*********************************************************************
    130           * LOCAL VARIABLES
    131           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    132          static uint16 ZDOBuildBuf[26];  // temp area to build data without allocation
   \                     ZDOBuildBuf:
   \   000000                DS 52
   \   000034                REQUIRE __INIT_XDATA_Z
    133          
    134          #if defined ( REFLECTOR )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    135          static ZDO_EDBind_t *ZDO_EDBind;     // Null when not used
   \                     ZDO_EDBind:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    136          #endif
    137          
    138          #if defined ( MANAGED_SCAN )
    139            uint32 managedScanNextChannel = 0;
    140            uint32 managedScanChannelMask = 0;
    141            uint8  managedScanTimesPerChannel = 0;
    142          #endif
    143          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    144          ZDMatchEndDeviceBind_t *matchED = (ZDMatchEndDeviceBind_t *)NULL;
   \                     matchED:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    145          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    146          uint32 apsChannelMask = 0;
   \                     apsChannelMask:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    147          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    148          int16 zdpExternalStateTaskID = -1;
   \                     zdpExternalStateTaskID:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zdpExternalStateTaskID>`
   \   000002                REQUIRE __INIT_XDATA_I
    149          
    150          /*********************************************************************
    151           * LOCAL FUNCTIONS
    152           */
    153          static void ZDODeviceSetup( void );
    154          #if defined ( MANAGED_SCAN )
    155            static void ZDOManagedScan_Next( void );
    156          #endif
    157          #if defined ( REFLECTOR )
    158            static void ZDO_RemoveEndDeviceBind( void );
    159            static void ZDO_SendEDBindRsp( byte TransSeq, zAddrType_t *dstAddr, byte Status, byte secUse );
    160          #endif
    161          #if ( ZG_BUILD_COORDINATOR_TYPE )
    162            static byte ZDO_CompareClusterLists( byte numList1, uint16 *list1,
    163                                                 byte numList2, uint16 *list2, uint16 *pMatches );
    164            static void ZDO_RemoveMatchMemory( void );
    165            static uint8 ZDO_CopyMatchInfo( ZDEndDeviceBind_t *destReq, ZDEndDeviceBind_t *srcReq );
    166            static void ZDO_EndDeviceBindMatchTimeoutCB( void );
    167          #endif
    168          uint8 *ZDO_ConvertOTAClusters( uint8 cnt, uint8 *inBuf, uint16 *outList );
    169          static void zdoSendStateChangeMsg(uint8 state, uint8 taskId);
    170          
    171          /*********************************************************************
    172           * @fn          ZDO_Init
    173           *
    174           * @brief       ZDObject and ZDProfile initialization.
    175           *
    176           * @param       none
    177           *
    178           * @return      none
    179           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    180          void ZDO_Init( void )
   \                     ZDO_Init:
    181          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    182            // Initialize ZD items
    183            #if defined ( REFLECTOR )
    184            ZDO_EDBind = NULL;
   \   000004   90....       MOV     DPTR,#ZDO_EDBind
   \   000007   7400         MOV     A,#0x0
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   A3           INC     DPTR
   \   00000B   7400         MOV     A,#0x0
   \   00000D   F0           MOVX    @DPTR,A
    185            #endif
    186          
    187            // Initialize default ZDO_UseExtendedPANID to the APS one.
    188            osal_cpyExtAddr( ZDO_UseExtendedPANID, AIB_apsUseExtendedPANID );
   \   00000E                ; Setup parameters for call to function sAddrExtCpy
   \   00000E   7C..         MOV     R4,#AIB_apsUseExtendedPANID & 0xff
   \   000010   7D..         MOV     R5,#(AIB_apsUseExtendedPANID >> 8) & 0xff
   \   000012   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   000014   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000016   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    189          
    190            // Setup the device - type of device to create.
    191            ZDODeviceSetup();
   \   000019                ; Setup parameters for call to function ZDODeviceSetup
   \   000019   12....       LCALL   `??ZDODeviceSetup::?relay`; Banked call to: ZDODeviceSetup
    192          }
   \   00001C   D083         POP     DPH
   \   00001E   D082         POP     DPL
   \   000020   02....       LJMP    ?BRET
    193          
    194          #if defined ( MANAGED_SCAN )
    195          /*********************************************************************
    196           * @fn      ZDOManagedScan_Next()
    197           *
    198           * @brief   Setup a managed scan.
    199           *
    200           * @param   none
    201           *
    202           * @return  none
    203           */
    204          static void ZDOManagedScan_Next( void )
    205          {
    206            // Is it the first time
    207            if ( managedScanNextChannel == 0 && managedScanTimesPerChannel == 0 )
    208            {
    209              // Setup the defaults
    210              managedScanNextChannel  = 1;
    211          
    212              while( managedScanNextChannel && (zgDefaultChannelList & managedScanNextChannel) == 0 )
    213                managedScanNextChannel <<= 1;
    214          
    215              managedScanChannelMask = managedScanNextChannel;
    216              managedScanTimesPerChannel = MANAGEDSCAN_TIMES_PRE_CHANNEL;
    217            }
    218            else
    219            {
    220              // Do we need to go to the next channel
    221              if ( managedScanTimesPerChannel == 0 )
    222              {
    223                // Find next active channel
    224                managedScanChannelMask  = managedScanNextChannel;
    225                managedScanTimesPerChannel = MANAGEDSCAN_TIMES_PRE_CHANNEL;
    226              }
    227              else
    228              {
    229                managedScanTimesPerChannel--;
    230          
    231                if ( managedScanTimesPerChannel == 0 )
    232                {
    233                  managedScanNextChannel  <<= 1;
    234                  while( managedScanNextChannel && (zgDefaultChannelList & managedScanNextChannel) == 0 )
    235                    managedScanNextChannel <<= 1;
    236          
    237                  if ( managedScanNextChannel == 0 )
    238                    zdoDiscCounter  = NUM_DISC_ATTEMPTS + 1; // Stop
    239                }
    240              }
    241            }
    242          }
    243          #endif // MANAGED_SCAN
    244          
    245          /*********************************************************************
    246           * @fn      ZDODeviceSetup()
    247           *
    248           * @brief   Call set functions depending on the type of device compiled.
    249           *
    250           * @param   none
    251           *
    252           * @return  none
    253           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    254          static void ZDODeviceSetup( void )
   \                     ZDODeviceSetup:
    255          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    256            if ( ZG_BUILD_COORDINATOR_TYPE )
    257            {
    258              NLME_CoordinatorInit();
   \   000004                ; Setup parameters for call to function NLME_CoordinatorInit
   \   000004   12....       LCALL   `??NLME_CoordinatorInit::?relay`; Banked call to: NLME_CoordinatorInit
    259            }
    260          
    261          #if defined ( REFLECTOR )
    262            APS_ReflectorInit();
   \   000007                ; Setup parameters for call to function APS_ReflectorInit
   \   000007   12....       LCALL   `??APS_ReflectorInit::?relay`; Banked call to: APS_ReflectorInit
    263          #endif
    264          
    265            if ( ZG_BUILD_JOINING_TYPE )
    266            {
    267              NLME_DeviceJoiningInit();
   \   00000A                ; Setup parameters for call to function NLME_DeviceJoiningInit
   \   00000A   12....       LCALL   `??NLME_DeviceJoiningInit::?relay`; Banked call to: NLME_DeviceJoiningInit
    268            }
    269          }
   \   00000D   D083         POP     DPH
   \   00000F   D082         POP     DPL
   \   000011   02....       LJMP    ?BRET
    270          
    271          /*********************************************************************
    272           * @fn          ZDO_StartDevice
    273           *
    274           * @brief       This function starts a device in a network.
    275           *
    276           * @param       logicalType     - Device type to start
    277           *              startMode       - indicates mode of device startup
    278           *              beaconOrder     - indicates time betwen beacons
    279           *              superframeOrder - indicates length of active superframe
    280           *
    281           * @return      none
    282           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    283          void ZDO_StartDevice( byte logicalType, devStartModes_t startMode, byte beaconOrder, byte superframeOrder )
   \                     ZDO_StartDevice:
    284          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV     A,#-0xb
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V1,R1
   \   00000C   8A..         MOV     ?V0,R2
   \   00000E   8B..         MOV     ?V2,R3
   \   000010   8C..         MOV     ?V3,R4
    285            ZStatus_t ret;
    286          #if defined ( ZIGBEE_FREQ_AGILITY )
    287            static uint8 discRetries = 0;
    288          #endif
    289          #if defined ( ZIGBEE_COMMISSIONING )
    290            static uint8 scanCnt = 0;
    291          #endif
    292          
    293            ret = ZUnsupportedMode;
   \   000012   7912         MOV     R1,#0x12
    294          
    295            if ( ZG_BUILD_COORDINATOR_TYPE && logicalType == NODETYPE_COORDINATOR )
   \   000014   E5..         MOV     A,?V1
   \   000016   7060         JNZ     ??ZDO_StartDevice_0
    296            {
    297              if ( startMode == MODE_HARD )
   \   000018   7402         MOV     A,#0x2
   \   00001A   65..         XRL     A,?V0
   \   00001C   7043         JNZ     ??ZDO_StartDevice_1
    298              {
    299                devState = DEV_COORD_STARTING;
   \   00001E   90....       MOV     DPTR,#devState
   \   000021   7408         MOV     A,#0x8
   \   000023   F0           MOVX    @DPTR,A
    300                ret = NLME_NetworkFormationRequest( zgConfigPANID, zgApsUseExtendedPANID, zgDefaultChannelList,
    301                                                    zgDefaultStartingScanDuration, beaconOrder,
    302                                                    superframeOrder, false );
   \   000024                ; Setup parameters for call to function NLME_NetworkFormationRequest
   \   000024   75..00       MOV     ?V4,#0x0
   \   000027   78..         MOV     R0,#?V4
   \   000029   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00002C   E5..         MOV     A,?V3
   \   00002E   F5..         MOV     ?V4,A
   \   000030   78..         MOV     R0,#?V4
   \   000032   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000035   E5..         MOV     A,?V2
   \   000037   F5..         MOV     ?V4,A
   \   000039   78..         MOV     R0,#?V4
   \   00003B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00003E   90....       MOV     DPTR,#zgDefaultChannelList
   \   000041   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000044   90....       MOV     DPTR,#zgDefaultStartingScanDuration
   \   000047   E0           MOVX    A,@DPTR
   \   000048   F9           MOV     R1,A
   \   000049   7C..         MOV     R4,#zgApsUseExtendedPANID & 0xff
   \   00004B   7D..         MOV     R5,#(zgApsUseExtendedPANID >> 8) & 0xff
   \   00004D   90....       MOV     DPTR,#zgConfigPANID
   \   000050   E0           MOVX    A,@DPTR
   \   000051   FA           MOV     R2,A
   \   000052   A3           INC     DPTR
   \   000053   E0           MOVX    A,@DPTR
   \   000054   FB           MOV     R3,A
   \   000055   12....       LCALL   `??NLME_NetworkFormationRequest::?relay`; Banked call to: NLME_NetworkFormationRequest
   \   000058   7407         MOV     A,#0x7
   \   00005A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005D   E9           MOV     A,R1
   \   00005E   F9           MOV     R1,A
   \   00005F   8017         SJMP    ??ZDO_StartDevice_0
    303              }
    304              else if ( startMode == MODE_RESUME )
   \                     ??ZDO_StartDevice_1:
   \   000061   7401         MOV     A,#0x1
   \   000063   65..         XRL     A,?V0
   \   000065   7011         JNZ     ??ZDO_StartDevice_0
    305              {
    306                // Just start the coordinator
    307                devState = DEV_COORD_STARTING;
   \   000067   90....       MOV     DPTR,#devState
   \   00006A   7408         MOV     A,#0x8
   \   00006C   F0           MOVX    @DPTR,A
    308                ret = NLME_StartRouterRequest( beaconOrder, beaconOrder, false );
   \   00006D                ; Setup parameters for call to function NLME_StartRouterRequest
   \   00006D   7B00         MOV     R3,#0x0
   \   00006F   AA..         MOV     R2,?V2
   \   000071   A9..         MOV     R1,?V2
   \   000073   12....       LCALL   `??NLME_StartRouterRequest::?relay`; Banked call to: NLME_StartRouterRequest
   \   000076   E9           MOV     A,R1
   \   000077   F9           MOV     R1,A
    309              }
    310              else
    311              {
    312          #if defined( LCD_SUPPORTED )
    313                HalLcdWriteScreen( "StartDevice ERR", "MODE unknown" );
    314          #endif
    315              }
    316            }
    317          
    318            if ( ZG_BUILD_JOINING_TYPE && (logicalType == NODETYPE_ROUTER || logicalType == NODETYPE_DEVICE) )
   \                     ??ZDO_StartDevice_0:
   \   000078   7401         MOV     A,#0x1
   \   00007A   65..         XRL     A,?V1
   \   00007C   6009         JZ      ??ZDO_StartDevice_2
   \   00007E   7402         MOV     A,#0x2
   \   000080   65..         XRL     A,?V1
   \   000082   6003         JZ      $+5
   \   000084   02....       LJMP    ??ZDO_StartDevice_3 & 0xFFFF
    319            {
    320              if ( (startMode == MODE_JOIN) || (startMode == MODE_REJOIN) )
   \                     ??ZDO_StartDevice_2:
   \   000087   E5..         MOV     A,?V0
   \   000089   6006         JZ      ??ZDO_StartDevice_4
   \   00008B   7403         MOV     A,#0x3
   \   00008D   65..         XRL     A,?V0
   \   00008F   7079         JNZ     ??ZDO_StartDevice_5
    321              {
    322                devState = DEV_NWK_DISC;
   \                     ??ZDO_StartDevice_4:
   \   000091   90....       MOV     DPTR,#devState
   \   000094   7402         MOV     A,#0x2
   \   000096   F0           MOVX    @DPTR,A
    323          
    324            #if defined( MANAGED_SCAN )
    325                ZDOManagedScan_Next();
    326                ret = NLME_NetworkDiscoveryRequest( managedScanChannelMask, BEACON_ORDER_15_MSEC );
    327            #else
    328                ret = NLME_NetworkDiscoveryRequest( zgDefaultChannelList, zgDefaultStartingScanDuration );
   \   000097                ; Setup parameters for call to function NLME_NetworkDiscoveryRequest
   \   000097   90....       MOV     DPTR,#zgDefaultStartingScanDuration
   \   00009A   E0           MOVX    A,@DPTR
   \   00009B   F9           MOV     R1,A
   \   00009C   90....       MOV     DPTR,#zgDefaultChannelList
   \   00009F   12....       LCALL   ?XLOAD_R2345
   \   0000A2   12....       LCALL   `??NLME_NetworkDiscoveryRequest::?relay`; Banked call to: NLME_NetworkDiscoveryRequest
   \   0000A5   E9           MOV     A,R1
   \   0000A6   F9           MOV     R1,A
    329              #if defined ( ZIGBEE_FREQ_AGILITY )
    330                if ( !( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE ) &&
    331                      ( ret == ZSuccess ) && ( ++discRetries == 4 ) )
   \   0000A7   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   0000AA   E0           MOVX    A,@DPTR
   \   0000AB   A2E3         MOV     C,0xE0 /* A   */.3
   \   0000AD   4028         JC      ??ZDO_StartDevice_6
   \   0000AF   E9           MOV     A,R1
   \   0000B0   7025         JNZ     ??ZDO_StartDevice_6
   \   0000B2   90....       MOV     DPTR,#??discRetries
   \   0000B5   E0           MOVX    A,@DPTR
   \   0000B6   2401         ADD     A,#0x1
   \   0000B8   F0           MOVX    @DPTR,A
   \   0000B9   90....       MOV     DPTR,#??discRetries
   \   0000BC   E0           MOVX    A,@DPTR
   \   0000BD   6404         XRL     A,#0x4
   \   0000BF   7016         JNZ     ??ZDO_StartDevice_6
    332                {
    333                  // For devices with RxOnWhenIdle equals to FALSE, any network channel
    334                  // change will not be recieved. On these devices or routers that have
    335                  // lost the network, an active scan shall be conducted on the Default
    336                  // Channel list using the extended PANID to find the network. If the
    337                  // extended PANID isn't found using the Default Channel list, an scan
    338                  // should be completed using all channels.
    339                  zgDefaultChannelList = MAX_CHANNELS_24GHZ;
   \   0000C1   7C00         MOV     R4,#0x0
   \   0000C3   7DF8         MOV     R5,#-0x8
   \   0000C5   7EFF         MOV     R6,#-0x1
   \   0000C7   7F07         MOV     R7,#0x7
   \   0000C9   90....       MOV     DPTR,#zgDefaultChannelList
   \   0000CC   EC           MOV     A,R4
   \   0000CD   F0           MOVX    @DPTR,A
   \   0000CE   A3           INC     DPTR
   \   0000CF   ED           MOV     A,R5
   \   0000D0   F0           MOVX    @DPTR,A
   \   0000D1   A3           INC     DPTR
   \   0000D2   EE           MOV     A,R6
   \   0000D3   F0           MOVX    @DPTR,A
   \   0000D4   A3           INC     DPTR
   \   0000D5   EF           MOV     A,R7
   \   0000D6   F0           MOVX    @DPTR,A
    340                }
    341              #endif // ZIGBEE_FREQ_AGILITY
    342              #if defined ( ZIGBEE_COMMISSIONING )
    343                if (startMode == MODE_REJOIN && scanCnt++ >= 5 )
   \                     ??ZDO_StartDevice_6:
   \   0000D7   7403         MOV     A,#0x3
   \   0000D9   65..         XRL     A,?V0
   \   0000DB   6003         JZ      $+5
   \   0000DD   02....       LJMP    ??ZDO_StartDevice_3 & 0xFFFF
   \   0000E0   90....       MOV     DPTR,#??scanCnt
   \   0000E3   E0           MOVX    A,@DPTR
   \   0000E4   F8           MOV     R0,A
   \   0000E5   7401         MOV     A,#0x1
   \   0000E7   28           ADD     A,R0
   \   0000E8   90....       MOV     DPTR,#??scanCnt
   \   0000EB   F0           MOVX    @DPTR,A
   \   0000EC   E8           MOV     A,R0
   \   0000ED   C3           CLR     C
   \   0000EE   9405         SUBB    A,#0x5
   \   0000F0   407B         JC      ??ZDO_StartDevice_3
    344                {
    345                  // When ApsUseExtendedPanID is commissioned to a non zero value via
    346                  // application specific means, the device shall conduct an active scan
    347                  // on the Default Channel list and join the PAN with the same
    348                  // ExtendedPanID. If the PAN is not found, an scan should be completed
    349                  // on all channels.
    350                  // When devices rejoin the network and the PAN is not found from
    351                  zgDefaultChannelList = MAX_CHANNELS_24GHZ;
   \   0000F2   7C00         MOV     R4,#0x0
   \   0000F4   7DF8         MOV     R5,#-0x8
   \   0000F6   7EFF         MOV     R6,#-0x1
   \   0000F8   7F07         MOV     R7,#0x7
   \   0000FA   90....       MOV     DPTR,#zgDefaultChannelList
   \   0000FD   EC           MOV     A,R4
   \   0000FE   F0           MOVX    @DPTR,A
   \   0000FF   A3           INC     DPTR
   \   000100   ED           MOV     A,R5
   \   000101   F0           MOVX    @DPTR,A
   \   000102   A3           INC     DPTR
   \   000103   EE           MOV     A,R6
   \   000104   F0           MOVX    @DPTR,A
   \   000105   A3           INC     DPTR
   \   000106   EF           MOV     A,R7
   \   000107   F0           MOVX    @DPTR,A
   \   000108   8063         SJMP    ??ZDO_StartDevice_3
    352                }
    353              #endif // ZIGBEE_COMMISSIONING
    354            #endif
    355              }
    356              else if ( startMode == MODE_RESUME )
   \                     ??ZDO_StartDevice_5:
   \   00010A   7401         MOV     A,#0x1
   \   00010C   65..         XRL     A,?V0
   \   00010E   705D         JNZ     ??ZDO_StartDevice_3
    357              {
    358                if ( logicalType == NODETYPE_ROUTER )
   \   000110   7401         MOV     A,#0x1
   \   000112   65..         XRL     A,?V1
   \   000114   7041         JNZ     ??ZDO_StartDevice_7
    359                {
    360                  ZMacScanCnf_t scanCnf;
    361                  devState = DEV_NWK_ORPHAN;
   \   000116   90....       MOV     DPTR,#devState
   \   000119   740A         MOV     A,#0xa
   \   00011B   F0           MOVX    @DPTR,A
    362          
    363                  /* if router and nvram is available, fake successful orphan scan */
    364                  scanCnf.hdr.Status = ZSUCCESS;
   \   00011C   7401         MOV     A,#0x1
   \   00011E   12....       LCALL   ?XSTACK_DISP0_8
   \   000121   7400         MOV     A,#0x0
   \   000123   F0           MOVX    @DPTR,A
    365                  scanCnf.ScanType = ZMAC_ORPHAN_SCAN;
   \   000124   7402         MOV     A,#0x2
   \   000126   12....       LCALL   ?XSTACK_DISP0_8
   \   000129   7403         MOV     A,#0x3
   \   00012B   F0           MOVX    @DPTR,A
    366                  scanCnf.UnscannedChannels = 0;
   \   00012C   7C00         MOV     R4,#0x0
   \   00012E   7D00         MOV     R5,#0x0
   \   000130   7E00         MOV     R6,#0x0
   \   000132   7F00         MOV     R7,#0x0
   \   000134   7404         MOV     A,#0x4
   \   000136   12....       LCALL   ?XSTACK_DISP0_8
   \   000139   EC           MOV     A,R4
   \   00013A   F0           MOVX    @DPTR,A
   \   00013B   A3           INC     DPTR
   \   00013C   ED           MOV     A,R5
   \   00013D   F0           MOVX    @DPTR,A
   \   00013E   A3           INC     DPTR
   \   00013F   EE           MOV     A,R6
   \   000140   F0           MOVX    @DPTR,A
   \   000141   A3           INC     DPTR
   \   000142   EF           MOV     A,R7
   \   000143   F0           MOVX    @DPTR,A
    367                  scanCnf.ResultListSize = 0;
   \   000144   7408         MOV     A,#0x8
   \   000146   12....       LCALL   ?XSTACK_DISP0_8
   \   000149   7400         MOV     A,#0x0
   \   00014B   F0           MOVX    @DPTR,A
    368                  nwk_ScanJoiningOrphan(&scanCnf);
   \   00014C                ; Setup parameters for call to function nwk_ScanJoiningOrphan
   \   00014C   AA..         MOV     R2,?XSP + 0
   \   00014E   AB..         MOV     R3,?XSP + 1
   \   000150   12....       LCALL   `??nwk_ScanJoiningOrphan::?relay`; Banked call to: nwk_ScanJoiningOrphan
    369          
    370                  ret = ZSuccess;
   \   000153   7900         MOV     R1,#0x0
   \   000155   8016         SJMP    ??ZDO_StartDevice_3
    371                }
    372                else
    373                {
    374                  devState = DEV_NWK_ORPHAN;
   \                     ??ZDO_StartDevice_7:
   \   000157   90....       MOV     DPTR,#devState
   \   00015A   740A         MOV     A,#0xa
   \   00015C   F0           MOVX    @DPTR,A
    375                  ret = NLME_OrphanJoinRequest( zgDefaultChannelList,
    376                                                zgDefaultStartingScanDuration );
   \   00015D                ; Setup parameters for call to function NLME_OrphanJoinRequest
   \   00015D   90....       MOV     DPTR,#zgDefaultStartingScanDuration
   \   000160   E0           MOVX    A,@DPTR
   \   000161   F9           MOV     R1,A
   \   000162   90....       MOV     DPTR,#zgDefaultChannelList
   \   000165   12....       LCALL   ?XLOAD_R2345
   \   000168   12....       LCALL   `??NLME_OrphanJoinRequest::?relay`; Banked call to: NLME_OrphanJoinRequest
   \   00016B   E9           MOV     A,R1
   \   00016C   F9           MOV     R1,A
    377                }
    378              }
    379              else
    380              {
    381          #if defined( LCD_SUPPORTED )
    382                HalLcdWriteScreen( "StartDevice ERR", "MODE unknown" );
    383          #endif
    384              }
    385            }
    386          
    387            if ( ret != ZSuccess )
   \                     ??ZDO_StartDevice_3:
   \   00016D   E9           MOV     A,R1
   \   00016E   6018         JZ      ??ZDO_StartDevice_8
    388            {
    389              osal_start_timerEx(ZDAppTaskID, ZDO_NETWORK_INIT, NWK_RETRY_DELAY );
   \   000170                ; Setup parameters for call to function osal_start_timerEx
   \   000170   90....       MOV     DPTR,#__Constant_3e8
   \   000173   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000176   7A01         MOV     R2,#0x1
   \   000178   7B00         MOV     R3,#0x0
   \   00017A   90....       MOV     DPTR,#ZDAppTaskID
   \   00017D   E0           MOVX    A,@DPTR
   \   00017E   F9           MOV     R1,A
   \   00017F   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000182   7404         MOV     A,#0x4
   \   000184   12....       LCALL   ?DEALLOC_XSTACK8
   \   000187   E9           MOV     A,R1
    390            }
    391          }
   \                     ??ZDO_StartDevice_8:
   \   000188   740B         MOV     A,#0xb
   \   00018A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00018D   7F05         MOV     R7,#0x5
   \   00018F   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??discRetries:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??scanCnt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    392          
    393          /**************************************************************************************************
    394           * @fn          zdoSendStateChangeMsg
    395           *
    396           * @brief       Helper function for ZDO_UpdateNwkStatus.
    397           *
    398           * input parameters
    399           *
    400           * @param       taskId - The OSAL task identifier to which to send the ZDO_STATE_CHANGE_EVT.
    401           * @param       state - The current device state.
    402           *
    403           * output parameters
    404           *
    405           * None.
    406           *
    407           * @return      None.
    408           **************************************************************************************************
    409           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    410          static void zdoSendStateChangeMsg(uint8 state, uint8 taskId)
   \                     zdoSendStateChangeMsg:
    411          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FF           MOV     R7,A
   \   00000C   EA           MOV     A,R2
   \   00000D   FE           MOV     R6,A
    412            osal_event_hdr_t *pMsg = (osal_event_hdr_t *)osal_msg_find(taskId, ZDO_STATE_CHANGE);
   \   00000E                ; Setup parameters for call to function osal_msg_find
   \   00000E   7AD1         MOV     R2,#-0x2f
   \   000010   EE           MOV     A,R6
   \   000011   F9           MOV     R1,A
   \   000012   12....       LCALL   `??osal_msg_find::?relay`; Banked call to: osal_msg_find
   \   000015   8A..         MOV     ?V0,R2
   \   000017   8B..         MOV     ?V1,R3
   \   000019   AA..         MOV     R2,?V0
   \   00001B   AB..         MOV     R3,?V1
    413          
    414            if (NULL == pMsg)
   \   00001D   EA           MOV     A,R2
   \   00001E   4B           ORL     A,R3
   \   00001F   7047         JNZ     ??zdoSendStateChangeMsg_0
    415            {
    416              if (NULL == (pMsg = (osal_event_hdr_t *)osal_msg_allocate(sizeof(osal_event_hdr_t))))
   \   000021                ; Setup parameters for call to function osal_msg_allocate
   \   000021   7A02         MOV     R2,#0x2
   \   000023   7B00         MOV     R3,#0x0
   \   000025   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000028   8A..         MOV     ?V0,R2
   \   00002A   8B..         MOV     ?V1,R3
   \   00002C   AA..         MOV     R2,?V0
   \   00002E   AB..         MOV     R3,?V1
   \   000030   EA           MOV     A,R2
   \   000031   4B           ORL     A,R3
   \   000032   700F         JNZ     ??zdoSendStateChangeMsg_1
    417              {
    418                // Upon failure to notify any EndPoint of the state change, re-set the ZDO event to
    419                // try again later when more Heap may be available.
    420                osal_set_event(ZDAppTaskID, ZDO_STATE_CHANGE_EVT);
   \   000034                ; Setup parameters for call to function osal_set_event
   \   000034   7A10         MOV     R2,#0x10
   \   000036   7B00         MOV     R3,#0x0
   \   000038   90....       MOV     DPTR,#ZDAppTaskID
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   F9           MOV     R1,A
   \   00003D   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000040   E9           MOV     A,R1
   \   000041   8030         SJMP    ??zdoSendStateChangeMsg_2
    421              }
    422              else
    423              {
    424                pMsg->event = ZDO_STATE_CHANGE;
   \                     ??zdoSendStateChangeMsg_1:
   \   000043   8A82         MOV     DPL,R2
   \   000045   8B83         MOV     DPH,R3
   \   000047   74D1         MOV     A,#-0x2f
   \   000049   F0           MOVX    @DPTR,A
    425                pMsg->status = state;
   \   00004A   EF           MOV     A,R7
   \   00004B   C0E0         PUSH    A
   \   00004D   8A82         MOV     DPL,R2
   \   00004F   8B83         MOV     DPH,R3
   \   000051   A3           INC     DPTR
   \   000052   D0E0         POP     A
   \   000054   F0           MOVX    @DPTR,A
    426          
    427                (void)osal_msg_send(taskId, (uint8 *)pMsg);
   \   000055                ; Setup parameters for call to function osal_msg_send
   \   000055   EE           MOV     A,R6
   \   000056   F9           MOV     R1,A
   \   000057   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   00005A   E9           MOV     A,R1
   \   00005B   C0E0         PUSH    A
   \   00005D   85..82       MOV     DPL,?XSP + 0
   \   000060   85..83       MOV     DPH,?XSP + 1
   \   000063   D0E0         POP     A
   \   000065   F0           MOVX    @DPTR,A
   \   000066   800B         SJMP    ??zdoSendStateChangeMsg_2
    428              }
    429            }
    430            else
    431            {
    432              // Modify in place the status of an existing ZDO_STATE_CHANGE message to the EndPoint.
    433              pMsg->status = state;
   \                     ??zdoSendStateChangeMsg_0:
   \   000068   EF           MOV     A,R7
   \   000069   C0E0         PUSH    A
   \   00006B   8A82         MOV     DPL,R2
   \   00006D   8B83         MOV     DPH,R3
   \   00006F   A3           INC     DPTR
   \   000070   D0E0         POP     A
   \   000072   F0           MOVX    @DPTR,A
    434            }
    435          }
   \                     ??zdoSendStateChangeMsg_2:
   \   000073   7401         MOV     A,#0x1
   \   000075   12....       LCALL   ?DEALLOC_XSTACK8
   \   000078   7F02         MOV     R7,#0x2
   \   00007A   02....       LJMP    ?BANKED_LEAVE_XDATA
    436          
    437          /**************************************************************************************************
    438           * @fn          ZDO_UpdateNwkStatus
    439           *
    440           * @brief       This function sends a ZDO_STATE_CHANGE message to the task of every EndPoint
    441           *              registered with AF (except, of course, the ZDO_EP). Even if a single task has more
    442           *              than one registered EndPoint, it will only receive one notification per state
    443           *              change. Although the device may go through a sequence of state changes, the
    444           *              Application task may only receive notification of the final, steady-state state
    445           *              because it has the lowest priority and never even runs to receive the intermediate
    446           *              state change notifications.
    447           *
    448           * input parameters
    449           *
    450           * @param       state - The current device state.
    451           *
    452           * output parameters
    453           *
    454           * None.
    455           *
    456           * @return      None.
    457           **************************************************************************************************
    458           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    459          void ZDO_UpdateNwkStatus(devStates_t state)
   \                     ZDO_UpdateNwkStatus:
    460          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
    461            epList_t *pItem = epList;
   \   000007   90....       MOV     DPTR,#epList
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   FE           MOV     R6,A
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   FF           MOV     R7,A
   \   00000F   803C         SJMP    ??ZDO_UpdateNwkStatus_0
    462          
    463          #if defined MT_ZDO_CB_FUNC
    464            if ( zdpExternalStateTaskID == -1 )
    465            {
    466              zdpExternalStateTaskID = MT_TaskID;
    467            }
    468          #endif
    469          
    470            while (pItem != NULL)
    471            {
    472              if (pItem->epDesc->endPoint != ZDO_EP)
   \                     ??ZDO_UpdateNwkStatus_1:
   \   000011   8E82         MOV     DPL,R6
   \   000013   8F83         MOV     DPH,R7
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F8           MOV     R0,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F583         MOV     DPH,A
   \   00001D   8882         MOV     DPL,R0
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   601E         JZ      ??ZDO_UpdateNwkStatus_2
    473              {
    474                zdoSendStateChangeMsg(state, *(pItem->epDesc->task_id));
   \   000022                ; Setup parameters for call to function zdoSendStateChangeMsg
   \   000022   8E82         MOV     DPL,R6
   \   000024   8F83         MOV     DPH,R7
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   F8           MOV     R0,A
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F583         MOV     DPH,A
   \   00002E   8882         MOV     DPL,R0
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F8           MOV     R0,A
   \   000033   A3           INC     DPTR
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F583         MOV     DPH,A
   \   000037   8882         MOV     DPL,R0
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   FA           MOV     R2,A
   \   00003B   A9..         MOV     R1,?V0
   \   00003D   12....       LCALL   `??zdoSendStateChangeMsg::?relay`; Banked call to: zdoSendStateChangeMsg
    475              }
    476          
    477              pItem = pItem->nextDesc;
   \                     ??ZDO_UpdateNwkStatus_2:
   \   000040   8E82         MOV     DPL,R6
   \   000042   8F83         MOV     DPH,R7
   \   000044   E0           MOVX    A,@DPTR
   \   000045   F8           MOV     R0,A
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   F9           MOV     R1,A
   \   000049   E8           MOV     A,R0
   \   00004A   FE           MOV     R6,A
   \   00004B   E9           MOV     A,R1
   \   00004C   FF           MOV     R7,A
    478            }
   \                     ??ZDO_UpdateNwkStatus_0:
   \   00004D   EE           MOV     A,R6
   \   00004E   4F           ORL     A,R7
   \   00004F   70C0         JNZ     ??ZDO_UpdateNwkStatus_1
    479            
    480            if ( zdpExternalStateTaskID != -1 )
   \   000051   90....       MOV     DPTR,#zdpExternalStateTaskID
   \   000054   E0           MOVX    A,@DPTR
   \   000055   64FF         XRL     A,#0xff
   \   000057   7004         JNZ     ??ZDO_UpdateNwkStatus_3
   \   000059   A3           INC     DPTR
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   64FF         XRL     A,#0xff
   \                     ??ZDO_UpdateNwkStatus_3:
   \   00005D   600D         JZ      ??ZDO_UpdateNwkStatus_4
    481            {  
    482              zdoSendStateChangeMsg( state, zdpExternalStateTaskID );
   \   00005F                ; Setup parameters for call to function zdoSendStateChangeMsg
   \   00005F   90....       MOV     DPTR,#zdpExternalStateTaskID
   \   000062   E0           MOVX    A,@DPTR
   \   000063   FA           MOV     R2,A
   \   000064   A3           INC     DPTR
   \   000065   E0           MOVX    A,@DPTR
   \   000066   FB           MOV     R3,A
   \   000067   A9..         MOV     R1,?V0
   \   000069   12....       LCALL   `??zdoSendStateChangeMsg::?relay`; Banked call to: zdoSendStateChangeMsg
    483            }
    484            
    485            ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
   \                     ??ZDO_UpdateNwkStatus_4:
   \   00006C                ; Setup parameters for call to function NLME_GetShortAddr
   \   00006C   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00006F   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000072   EA           MOV     A,R2
   \   000073   F0           MOVX    @DPTR,A
   \   000074   A3           INC     DPTR
   \   000075   EB           MOV     A,R3
   \   000076   F0           MOVX    @DPTR,A
    486            (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
   \   000077                ; Setup parameters for call to function NLME_GetExtAddr
   \   000077   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   00007A   8A..         MOV     ?V2,R2
   \   00007C   8B..         MOV     ?V3,R3
   \   00007E   85..82       MOV     DPL,?V2
   \   000081   85..83       MOV     DPH,?V3
    487          }
   \   000084   7F04         MOV     R7,#0x4
   \   000086   02....       LJMP    ?BANKED_LEAVE_XDATA
    488          
    489          #if defined ( REFLECTOR )
    490          /*********************************************************************
    491           * @fn          ZDO_RemoveEndDeviceBind
    492           *
    493           * @brief       Remove the end device bind
    494           *
    495           * @param  none
    496           *
    497           * @return      none
    498           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    499          static void ZDO_RemoveEndDeviceBind( void )
   \                     ZDO_RemoveEndDeviceBind:
    500          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    501            if ( ZDO_EDBind != NULL )
   \   000004   90....       MOV     DPTR,#ZDO_EDBind
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F8           MOV     R0,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F9           MOV     R1,A
   \   00000C   E8           MOV     A,R0
   \   00000D   49           ORL     A,R1
   \   00000E   607B         JZ      ??ZDO_RemoveEndDeviceBind_0
    502            {
    503              // Free the RAM
    504              if ( ZDO_EDBind->inClusters != NULL )
   \   000010   90....       MOV     DPTR,#ZDO_EDBind
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F8           MOV     R0,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   C8           XCH     A,R0
   \   000018   2410         ADD     A,#0x10
   \   00001A   F582         MOV     DPL,A
   \   00001C   C8           XCH     A,R0
   \   00001D   3400         ADDC    A,#0x0
   \   00001F   F583         MOV     DPH,A
   \   000021   E0           MOVX    A,@DPTR
   \   000022   F8           MOV     R0,A
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F9           MOV     R1,A
   \   000026   E8           MOV     A,R0
   \   000027   49           ORL     A,R1
   \   000028   6019         JZ      ??ZDO_RemoveEndDeviceBind_1
    505              {
    506                osal_mem_free( ZDO_EDBind->inClusters );
   \   00002A                ; Setup parameters for call to function osal_mem_free
   \   00002A   90....       MOV     DPTR,#ZDO_EDBind
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F8           MOV     R0,A
   \   00002F   A3           INC     DPTR
   \   000030   E0           MOVX    A,@DPTR
   \   000031   C8           XCH     A,R0
   \   000032   2410         ADD     A,#0x10
   \   000034   F582         MOV     DPL,A
   \   000036   C8           XCH     A,R0
   \   000037   3400         ADDC    A,#0x0
   \   000039   F583         MOV     DPH,A
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   FA           MOV     R2,A
   \   00003D   A3           INC     DPTR
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   FB           MOV     R3,A
   \   000040   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    507              }
    508              if ( ZDO_EDBind->outClusters != NULL )
   \                     ??ZDO_RemoveEndDeviceBind_1:
   \   000043   90....       MOV     DPTR,#ZDO_EDBind
   \   000046   E0           MOVX    A,@DPTR
   \   000047   F8           MOV     R0,A
   \   000048   A3           INC     DPTR
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   C8           XCH     A,R0
   \   00004B   2413         ADD     A,#0x13
   \   00004D   F582         MOV     DPL,A
   \   00004F   C8           XCH     A,R0
   \   000050   3400         ADDC    A,#0x0
   \   000052   F583         MOV     DPH,A
   \   000054   E0           MOVX    A,@DPTR
   \   000055   F8           MOV     R0,A
   \   000056   A3           INC     DPTR
   \   000057   E0           MOVX    A,@DPTR
   \   000058   F9           MOV     R1,A
   \   000059   E8           MOV     A,R0
   \   00005A   49           ORL     A,R1
   \   00005B   6019         JZ      ??ZDO_RemoveEndDeviceBind_2
    509              {
    510                osal_mem_free( ZDO_EDBind->outClusters );
   \   00005D                ; Setup parameters for call to function osal_mem_free
   \   00005D   90....       MOV     DPTR,#ZDO_EDBind
   \   000060   E0           MOVX    A,@DPTR
   \   000061   F8           MOV     R0,A
   \   000062   A3           INC     DPTR
   \   000063   E0           MOVX    A,@DPTR
   \   000064   C8           XCH     A,R0
   \   000065   2413         ADD     A,#0x13
   \   000067   F582         MOV     DPL,A
   \   000069   C8           XCH     A,R0
   \   00006A   3400         ADDC    A,#0x0
   \   00006C   F583         MOV     DPH,A
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   FA           MOV     R2,A
   \   000070   A3           INC     DPTR
   \   000071   E0           MOVX    A,@DPTR
   \   000072   FB           MOV     R3,A
   \   000073   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    511              }
    512              osal_mem_free( ZDO_EDBind );
   \                     ??ZDO_RemoveEndDeviceBind_2:
   \   000076                ; Setup parameters for call to function osal_mem_free
   \   000076   90....       MOV     DPTR,#ZDO_EDBind
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   FA           MOV     R2,A
   \   00007B   A3           INC     DPTR
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   FB           MOV     R3,A
   \   00007E   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    513              ZDO_EDBind = NULL;
   \   000081   90....       MOV     DPTR,#ZDO_EDBind
   \   000084   7400         MOV     A,#0x0
   \   000086   F0           MOVX    @DPTR,A
   \   000087   A3           INC     DPTR
   \   000088   7400         MOV     A,#0x0
   \   00008A   F0           MOVX    @DPTR,A
    514            }
    515          }
   \                     ??ZDO_RemoveEndDeviceBind_0:
   \   00008B   D083         POP     DPH
   \   00008D   D082         POP     DPL
   \   00008F   02....       LJMP    ?BRET
    516          #endif // REFLECTOR
    517          
    518          #if defined ( REFLECTOR )
    519          /*********************************************************************
    520           * @fn          ZDO_RemoveEndDeviceBind
    521           *
    522           * @brief       Remove the end device bind
    523           *
    524           * @param  none
    525           *
    526           * @return      none
    527           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    528          static void ZDO_SendEDBindRsp( byte TransSeq, zAddrType_t *dstAddr, byte Status, byte secUse )
   \                     ZDO_SendEDBindRsp:
    529          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   C0E0         PUSH    A
   \   00000D   7401         MOV     A,#0x1
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   D0E0         POP     A
   \   000014   F0           MOVX    @DPTR,A
   \   000015   EC           MOV     A,R4
   \   000016   C0E0         PUSH    A
   \   000018   85..82       MOV     DPL,?XSP + 0
   \   00001B   85..83       MOV     DPH,?XSP + 1
   \   00001E   D0E0         POP     A
   \   000020   F0           MOVX    @DPTR,A
   \   000021   ED           MOV     A,R5
   \   000022   FE           MOV     R6,A
    530            ZDP_EndDeviceBindRsp( TransSeq, dstAddr, Status, secUse );
   \   000023                ; Setup parameters for call to function ZDP_SendData
   \   000023   EE           MOV     A,R6
   \   000024   F5..         MOV     ?V0,A
   \   000026   78..         MOV     R0,#?V0
   \   000028   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00002B   7401         MOV     A,#0x1
   \   00002D   12....       LCALL   ?XSTACK_DISP100_8
   \   000030   88..         MOV     ?V0,R0
   \   000032   89..         MOV     ?V1,R1
   \   000034   78..         MOV     R0,#?V0
   \   000036   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000039   75..20       MOV     ?V0,#0x20
   \   00003C   75..80       MOV     ?V1,#-0x80
   \   00003F   78..         MOV     R0,#?V0
   \   000041   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000044   7901         MOV     R1,#0x1
   \   000046   EA           MOV     A,R2
   \   000047   FC           MOV     R4,A
   \   000048   EB           MOV     A,R3
   \   000049   FD           MOV     R5,A
   \   00004A   7406         MOV     A,#0x6
   \   00004C   12....       LCALL   ?XSTACK_DISP101_8
   \   00004F   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   000052   7405         MOV     A,#0x5
   \   000054   12....       LCALL   ?DEALLOC_XSTACK8
   \   000057   E9           MOV     A,R1
    531          
    532          #if defined( LCD_SUPPORTED )
    533            HalLcdWriteString( "End Device Bind", HAL_LCD_LINE_1 );
    534            if ( Status == ZDP_SUCCESS )
    535            {
    536              HalLcdWriteString( "Success Sent", HAL_LCD_LINE_2 );
    537            }
    538            else
    539            {
    540              HalLcdWriteString( "Timeout", HAL_LCD_LINE_2 );
    541            }
    542          #endif
    543          
    544          }
   \   000058   7402         MOV     A,#0x2
   \   00005A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005D   7F02         MOV     R7,#0x2
   \   00005F   02....       LJMP    ?BANKED_LEAVE_XDATA
    545          #endif // REFLECTOR
    546          
    547          #if ( ZG_BUILD_COORDINATOR_TYPE )
    548          /*********************************************************************
    549           * @fn          ZDO_CompareClusterLists
    550           *
    551           * @brief       Compare one list to another list
    552           *
    553           * @param       numList1 - number of items in list 1
    554           * @param       list1 - first list of cluster IDs
    555           * @param       numList2 - number of items in list 2
    556           * @param       list2 - second list of cluster IDs
    557           * @param       pMatches - buffer to put matches
    558           *
    559           * @return      number of matches
    560           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    561          static byte ZDO_CompareClusterLists( byte numList1, uint16 *list1,
   \                     ZDO_CompareClusterLists:
    562                                    byte numList2, uint16 *list2, uint16 *pMatches )
    563          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V3,R1
   \   000007   8C..         MOV     ?V4,R4
    564            byte x, y;
    565            uint16 z;
    566            byte numMatches = 0;
   \   000009   75..00       MOV     ?V1,#0x0
    567          
    568            // Check the first in against the seconds out
    569            for ( x = 0; x < numList1; x++ )
   \   00000C   75..00       MOV     ?V0,#0x0
   \   00000F   7410         MOV     A,#0x10
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F8           MOV     R0,A
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F9           MOV     R1,A
   \   000019   E8           MOV     A,R0
   \   00001A   FC           MOV     R4,A
   \   00001B   E9           MOV     A,R1
   \   00001C   FD           MOV     R5,A
   \   00001D   7412         MOV     A,#0x12
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F8           MOV     R0,A
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F9           MOV     R1,A
   \   000027   E8           MOV     A,R0
   \   000028   FE           MOV     R6,A
   \   000029   E9           MOV     A,R1
   \   00002A   FF           MOV     R7,A
   \   00002B   02....       LJMP    ??ZDO_CompareClusterLists_0 & 0xFFFF
    570            {
    571              for ( y = 0; y < numList2; y++ )
    572              {
    573                z = list2[y];
   \                     ??ZDO_CompareClusterLists_1:
   \   00002E   A8..         MOV     R0,?V2
   \   000030   7900         MOV     R1,#0x0
   \   000032   E8           MOV     A,R0
   \   000033   75F002       MOV     B,#0x2
   \   000036   A4           MUL     AB
   \   000037   C8           XCH     A,R0
   \   000038   85F0..       MOV     ?V5,B
   \   00003B   75F000       MOV     B,#0x0
   \   00003E   A4           MUL     AB
   \   00003F   25..         ADD     A,?V5
   \   000041   F5..         MOV     ?V5,A
   \   000043   75F002       MOV     B,#0x2
   \   000046   E9           MOV     A,R1
   \   000047   A4           MUL     AB
   \   000048   25..         ADD     A,?V5
   \   00004A   F9           MOV     R1,A
   \   00004B   EC           MOV     A,R4
   \   00004C   28           ADD     A,R0
   \   00004D   F582         MOV     DPL,A
   \   00004F   ED           MOV     A,R5
   \   000050   39           ADDC    A,R1
   \   000051   F583         MOV     DPH,A
   \   000053   E0           MOVX    A,@DPTR
   \   000054   F5..         MOV     ?V6,A
   \   000056   A3           INC     DPTR
   \   000057   E0           MOVX    A,@DPTR
   \   000058   F5..         MOV     ?V7,A
    574                if ( list1[x] == z )
   \   00005A   A8..         MOV     R0,?V0
   \   00005C   7900         MOV     R1,#0x0
   \   00005E   E8           MOV     A,R0
   \   00005F   75F002       MOV     B,#0x2
   \   000062   A4           MUL     AB
   \   000063   C8           XCH     A,R0
   \   000064   85F0..       MOV     ?V5,B
   \   000067   75F000       MOV     B,#0x0
   \   00006A   A4           MUL     AB
   \   00006B   25..         ADD     A,?V5
   \   00006D   F5..         MOV     ?V5,A
   \   00006F   75F002       MOV     B,#0x2
   \   000072   E9           MOV     A,R1
   \   000073   A4           MUL     AB
   \   000074   25..         ADD     A,?V5
   \   000076   F9           MOV     R1,A
   \   000077   EA           MOV     A,R2
   \   000078   28           ADD     A,R0
   \   000079   F582         MOV     DPL,A
   \   00007B   EB           MOV     A,R3
   \   00007C   39           ADDC    A,R1
   \   00007D   F583         MOV     DPH,A
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   65..         XRL     A,?V6
   \   000082   7004         JNZ     ??ZDO_CompareClusterLists_2
   \   000084   A3           INC     DPTR
   \   000085   E0           MOVX    A,@DPTR
   \   000086   65..         XRL     A,?V7
   \                     ??ZDO_CompareClusterLists_2:
   \   000088   702E         JNZ     ??ZDO_CompareClusterLists_3
    575                {
    576                  pMatches[numMatches++] = z;
   \   00008A   A8..         MOV     R0,?V1
   \   00008C   7900         MOV     R1,#0x0
   \   00008E   E8           MOV     A,R0
   \   00008F   75F002       MOV     B,#0x2
   \   000092   A4           MUL     AB
   \   000093   C8           XCH     A,R0
   \   000094   85F0..       MOV     ?V5,B
   \   000097   75F000       MOV     B,#0x0
   \   00009A   A4           MUL     AB
   \   00009B   25..         ADD     A,?V5
   \   00009D   F5..         MOV     ?V5,A
   \   00009F   75F002       MOV     B,#0x2
   \   0000A2   E9           MOV     A,R1
   \   0000A3   A4           MUL     AB
   \   0000A4   25..         ADD     A,?V5
   \   0000A6   F9           MOV     R1,A
   \   0000A7   EE           MOV     A,R6
   \   0000A8   28           ADD     A,R0
   \   0000A9   F582         MOV     DPL,A
   \   0000AB   EF           MOV     A,R7
   \   0000AC   39           ADDC    A,R1
   \   0000AD   F583         MOV     DPH,A
   \   0000AF   E5..         MOV     A,?V6
   \   0000B1   F0           MOVX    @DPTR,A
   \   0000B2   A3           INC     DPTR
   \   0000B3   E5..         MOV     A,?V7
   \   0000B5   F0           MOVX    @DPTR,A
   \   0000B6   05..         INC     ?V1
    577                }
    578              }
   \                     ??ZDO_CompareClusterLists_3:
   \   0000B8   05..         INC     ?V2
   \                     ??ZDO_CompareClusterLists_4:
   \   0000BA   E5..         MOV     A,?V2
   \   0000BC   C3           CLR     C
   \   0000BD   95..         SUBB    A,?V4
   \   0000BF   5003         JNC     $+5
   \   0000C1   02....       LJMP    ??ZDO_CompareClusterLists_1 & 0xFFFF
   \   0000C4   05..         INC     ?V0
   \                     ??ZDO_CompareClusterLists_0:
   \   0000C6   E5..         MOV     A,?V0
   \   0000C8   C3           CLR     C
   \   0000C9   95..         SUBB    A,?V3
   \   0000CB   5005         JNC     ??ZDO_CompareClusterLists_5
   \   0000CD   75..00       MOV     ?V2,#0x0
   \   0000D0   80E8         SJMP    ??ZDO_CompareClusterLists_4
    579            }
    580          
    581            return ( numMatches );
   \                     ??ZDO_CompareClusterLists_5:
   \   0000D2   A9..         MOV     R1,?V1
   \   0000D4   7F08         MOV     R7,#0x8
   \   0000D6   02....       LJMP    ?BANKED_LEAVE_XDATA
    582          }
    583          #endif // ZG_BUILD_COORDINATOR_TYPE
    584          
    585          /*********************************************************************
    586           * Utility functions
    587           */
    588          
    589          /*********************************************************************
    590           * @fn          ZDO_CompareByteLists
    591           *
    592           * @brief       Compares two lists for matches.
    593           *
    594           * @param       ACnt  - number of entries in list A
    595           * @param       AList  - List A
    596           * @param       BCnt  - number of entries in list B
    597           * @param       BList  - List B
    598           *
    599           * @return      true if a match is found
    600           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    601          byte ZDO_AnyClusterMatches( byte ACnt, uint16 *AList, byte BCnt, uint16 *BList )
   \                     ZDO_AnyClusterMatches:
    602          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V4,R1
   \   000007   8C..         MOV     ?V2,R4
    603            byte x, y;
    604          
    605            for ( x = 0; x < ACnt; x++ )
   \   000009   75..00       MOV     ?V0,#0x0
   \   00000C   740D         MOV     A,#0xd
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F8           MOV     R0,A
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F9           MOV     R1,A
   \   000016   E8           MOV     A,R0
   \   000017   FC           MOV     R4,A
   \   000018   E9           MOV     A,R1
   \   000019   FD           MOV     R5,A
   \   00001A   8002         SJMP    ??ZDO_AnyClusterMatches_0
   \                     ??ZDO_AnyClusterMatches_1:
   \   00001C   05..         INC     ?V0
   \                     ??ZDO_AnyClusterMatches_0:
   \   00001E   E5..         MOV     A,?V0
   \   000020   C3           CLR     C
   \   000021   95..         SUBB    A,?V4
   \   000023   5066         JNC     ??ZDO_AnyClusterMatches_2
    606            {
    607              for ( y = 0; y < BCnt; y++ )
   \   000025   75..00       MOV     ?V1,#0x0
   \   000028   8002         SJMP    ??ZDO_AnyClusterMatches_3
   \                     ??ZDO_AnyClusterMatches_4:
   \   00002A   05..         INC     ?V1
   \                     ??ZDO_AnyClusterMatches_3:
   \   00002C   E5..         MOV     A,?V1
   \   00002E   C3           CLR     C
   \   00002F   95..         SUBB    A,?V2
   \   000031   50E9         JNC     ??ZDO_AnyClusterMatches_1
    608              {
    609                if ( AList[x] == BList[y] )
   \   000033   A8..         MOV     R0,?V0
   \   000035   7900         MOV     R1,#0x0
   \   000037   E8           MOV     A,R0
   \   000038   75F002       MOV     B,#0x2
   \   00003B   A4           MUL     AB
   \   00003C   C8           XCH     A,R0
   \   00003D   AEF0         MOV     R6,B
   \   00003F   75F000       MOV     B,#0x0
   \   000042   A4           MUL     AB
   \   000043   2E           ADD     A,R6
   \   000044   FE           MOV     R6,A
   \   000045   75F002       MOV     B,#0x2
   \   000048   E9           MOV     A,R1
   \   000049   A4           MUL     AB
   \   00004A   2E           ADD     A,R6
   \   00004B   F9           MOV     R1,A
   \   00004C   EA           MOV     A,R2
   \   00004D   28           ADD     A,R0
   \   00004E   F582         MOV     DPL,A
   \   000050   EB           MOV     A,R3
   \   000051   39           ADDC    A,R1
   \   000052   F583         MOV     DPH,A
   \   000054   E0           MOVX    A,@DPTR
   \   000055   FE           MOV     R6,A
   \   000056   A3           INC     DPTR
   \   000057   E0           MOVX    A,@DPTR
   \   000058   FF           MOV     R7,A
   \   000059   A8..         MOV     R0,?V1
   \   00005B   7900         MOV     R1,#0x0
   \   00005D   E8           MOV     A,R0
   \   00005E   75F002       MOV     B,#0x2
   \   000061   A4           MUL     AB
   \   000062   C8           XCH     A,R0
   \   000063   85F0..       MOV     ?V3,B
   \   000066   75F000       MOV     B,#0x0
   \   000069   A4           MUL     AB
   \   00006A   25..         ADD     A,?V3
   \   00006C   F5..         MOV     ?V3,A
   \   00006E   75F002       MOV     B,#0x2
   \   000071   E9           MOV     A,R1
   \   000072   A4           MUL     AB
   \   000073   25..         ADD     A,?V3
   \   000075   F9           MOV     R1,A
   \   000076   EC           MOV     A,R4
   \   000077   28           ADD     A,R0
   \   000078   F582         MOV     DPL,A
   \   00007A   ED           MOV     A,R5
   \   00007B   39           ADDC    A,R1
   \   00007C   F583         MOV     DPH,A
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   6E           XRL     A,R6
   \   000080   7003         JNZ     ??ZDO_AnyClusterMatches_5
   \   000082   A3           INC     DPTR
   \   000083   E0           MOVX    A,@DPTR
   \   000084   6F           XRL     A,R7
   \                     ??ZDO_AnyClusterMatches_5:
   \   000085   70A3         JNZ     ??ZDO_AnyClusterMatches_4
    610                {
    611                  return true;
   \   000087   7901         MOV     R1,#0x1
   \   000089   8002         SJMP    ??ZDO_AnyClusterMatches_6
    612                }
    613              }
    614            }
    615          
    616            return false;
   \                     ??ZDO_AnyClusterMatches_2:
   \   00008B   7900         MOV     R1,#0x0
   \                     ??ZDO_AnyClusterMatches_6:
   \   00008D   7F05         MOV     R7,#0x5
   \   00008F   02....       LJMP    ?BANKED_LEAVE_XDATA
    617          }
    618          
    619          /*********************************************************************
    620           * Callback functions from ZDProfile
    621           */
    622          
    623          /*********************************************************************
    624           * @fn          ZDO_ProcessNodeDescReq
    625           *
    626           * @brief       This function processes and responds to the
    627           *              Node_Desc_req message.
    628           *
    629           * @param       inMsg - incoming message
    630           *
    631           * @return      none
    632           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    633          void ZDO_ProcessNodeDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessNodeDescReq:
    634          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    635            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \   000009   EE           MOV     A,R6
   \   00000A   2413         ADD     A,#0x13
   \   00000C   F582         MOV     DPL,A
   \   00000E   E4           CLR     A
   \   00000F   3F           ADDC    A,R7
   \   000010   F583         MOV     DPH,A
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F8           MOV     R0,A
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F583         MOV     DPH,A
   \   000018   8882         MOV     DPL,R0
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   FA           MOV     R2,A
   \   00001C   7B00         MOV     R3,#0x0
   \   00001E   EE           MOV     A,R6
   \   00001F   2413         ADD     A,#0x13
   \   000021   F582         MOV     DPL,A
   \   000023   E4           CLR     A
   \   000024   3F           ADDC    A,R7
   \   000025   F583         MOV     DPH,A
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F8           MOV     R0,A
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F583         MOV     DPH,A
   \   00002D   8882         MOV     DPL,R0
   \   00002F   A3           INC     DPTR
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F8           MOV     R0,A
   \   000032   7900         MOV     R1,#0x0
   \   000034   E4           CLR     A
   \   000035   C8           XCH     A,R0
   \   000036   F9           MOV     R1,A
   \   000037   EA           MOV     A,R2
   \   000038   28           ADD     A,R0
   \   000039   FC           MOV     R4,A
   \   00003A   EB           MOV     A,R3
   \   00003B   39           ADDC    A,R1
   \   00003C   FD           MOV     R5,A
    636            NodeDescriptorFormat_t *desc = NULL;
   \   00003D   75..00       MOV     ?V0,#0x0
   \   000040   75..00       MOV     ?V1,#0x0
    637          
    638            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \   000043   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000046   E0           MOVX    A,@DPTR
   \   000047   6C           XRL     A,R4
   \   000048   7003         JNZ     ??ZDO_ProcessNodeDescReq_0
   \   00004A   A3           INC     DPTR
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   6D           XRL     A,R5
   \                     ??ZDO_ProcessNodeDescReq_0:
   \   00004D   7006         JNZ     ??ZDO_ProcessNodeDescReq_1
    639            {
    640              desc = &ZDO_Config_Node_Descriptor;
   \   00004F   75....       MOV     ?V0,#ZDO_Config_Node_Descriptor & 0xff
   \   000052   75....       MOV     ?V1,#(ZDO_Config_Node_Descriptor >> 8) & 0xff
    641            }
    642          
    643            if ( desc != NULL )
   \                     ??ZDO_ProcessNodeDescReq_1:
   \   000055   E5..         MOV     A,?V0
   \   000057   45..         ORL     A,?V1
   \   000059   6014         JZ      ??ZDO_ProcessNodeDescReq_2
    644            {
    645              ZDP_NodeDescMsg( inMsg, aoi, desc );
   \   00005B                ; Setup parameters for call to function ZDP_NodeDescMsg
   \   00005B   78..         MOV     R0,#?V0
   \   00005D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000060   EE           MOV     A,R6
   \   000061   FA           MOV     R2,A
   \   000062   EF           MOV     A,R7
   \   000063   FB           MOV     R3,A
   \   000064   12....       LCALL   `??ZDP_NodeDescMsg::?relay`; Banked call to: ZDP_NodeDescMsg
   \   000067   7402         MOV     A,#0x2
   \   000069   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006C   E9           MOV     A,R1
   \   00006D   803C         SJMP    ??ZDO_ProcessNodeDescReq_3
    646            }
    647            else
    648            {
    649              ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr),
    650                        ZDP_INVALID_REQTYPE, aoi, Node_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessNodeDescReq_2:
   \   00006F                ; Setup parameters for call to function ZDP_GenericRsp
   \   00006F   75..02       MOV     ?V0,#0x2
   \   000072   75..80       MOV     ?V1,#-0x80
   \   000075   78..         MOV     R0,#?V0
   \   000077   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007A   8C..         MOV     ?V0,R4
   \   00007C   8D..         MOV     ?V1,R5
   \   00007E   78..         MOV     R0,#?V0
   \   000080   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000083   EE           MOV     A,R6
   \   000084   240E         ADD     A,#0xe
   \   000086   F582         MOV     DPL,A
   \   000088   E4           CLR     A
   \   000089   3F           ADDC    A,R7
   \   00008A   F583         MOV     DPH,A
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   FD           MOV     R5,A
   \   00008E   7C80         MOV     R4,#-0x80
   \   000090   EE           MOV     A,R6
   \   000091   2402         ADD     A,#0x2
   \   000093   FA           MOV     R2,A
   \   000094   E4           CLR     A
   \   000095   3F           ADDC    A,R7
   \   000096   FB           MOV     R3,A
   \   000097   EE           MOV     A,R6
   \   000098   240F         ADD     A,#0xf
   \   00009A   F582         MOV     DPL,A
   \   00009C   E4           CLR     A
   \   00009D   3F           ADDC    A,R7
   \   00009E   F583         MOV     DPH,A
   \   0000A0   E0           MOVX    A,@DPTR
   \   0000A1   F9           MOV     R1,A
   \   0000A2   12....       LCALL   `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
   \   0000A5   7404         MOV     A,#0x4
   \   0000A7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AA   E9           MOV     A,R1
    651            }
    652          }
   \                     ??ZDO_ProcessNodeDescReq_3:
   \   0000AB   7F02         MOV     R7,#0x2
   \   0000AD   02....       LJMP    ?BANKED_LEAVE_XDATA
    653          
    654          /*********************************************************************
    655           * @fn          ZDO_ProcessPowerDescReq
    656           *
    657           * @brief       This function processes and responds to the
    658           *              Node_Power_req message.
    659           *
    660           * @param       inMsg  - incoming request
    661           *
    662           * @return      none
    663           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    664          void ZDO_ProcessPowerDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessPowerDescReq:
    665          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    666            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \   000009   EE           MOV     A,R6
   \   00000A   2413         ADD     A,#0x13
   \   00000C   F582         MOV     DPL,A
   \   00000E   E4           CLR     A
   \   00000F   3F           ADDC    A,R7
   \   000010   F583         MOV     DPH,A
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F8           MOV     R0,A
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F583         MOV     DPH,A
   \   000018   8882         MOV     DPL,R0
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   FA           MOV     R2,A
   \   00001C   7B00         MOV     R3,#0x0
   \   00001E   EE           MOV     A,R6
   \   00001F   2413         ADD     A,#0x13
   \   000021   F582         MOV     DPL,A
   \   000023   E4           CLR     A
   \   000024   3F           ADDC    A,R7
   \   000025   F583         MOV     DPH,A
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F8           MOV     R0,A
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F583         MOV     DPH,A
   \   00002D   8882         MOV     DPL,R0
   \   00002F   A3           INC     DPTR
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F8           MOV     R0,A
   \   000032   7900         MOV     R1,#0x0
   \   000034   E4           CLR     A
   \   000035   C8           XCH     A,R0
   \   000036   F9           MOV     R1,A
   \   000037   EA           MOV     A,R2
   \   000038   28           ADD     A,R0
   \   000039   FC           MOV     R4,A
   \   00003A   EB           MOV     A,R3
   \   00003B   39           ADDC    A,R1
   \   00003C   FD           MOV     R5,A
    667            NodePowerDescriptorFormat_t *desc = NULL;
   \   00003D   75..00       MOV     ?V0,#0x0
   \   000040   75..00       MOV     ?V1,#0x0
    668          
    669            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \   000043   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000046   E0           MOVX    A,@DPTR
   \   000047   6C           XRL     A,R4
   \   000048   7003         JNZ     ??ZDO_ProcessPowerDescReq_0
   \   00004A   A3           INC     DPTR
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   6D           XRL     A,R5
   \                     ??ZDO_ProcessPowerDescReq_0:
   \   00004D   7006         JNZ     ??ZDO_ProcessPowerDescReq_1
    670            {
    671              desc = &ZDO_Config_Power_Descriptor;
   \   00004F   75....       MOV     ?V0,#ZDO_Config_Power_Descriptor & 0xff
   \   000052   75....       MOV     ?V1,#(ZDO_Config_Power_Descriptor >> 8) & 0xff
    672            }
    673          
    674            if ( desc != NULL )
   \                     ??ZDO_ProcessPowerDescReq_1:
   \   000055   E5..         MOV     A,?V0
   \   000057   45..         ORL     A,?V1
   \   000059   6014         JZ      ??ZDO_ProcessPowerDescReq_2
    675            {
    676              ZDP_PowerDescMsg( inMsg, aoi, desc );
   \   00005B                ; Setup parameters for call to function ZDP_PowerDescMsg
   \   00005B   78..         MOV     R0,#?V0
   \   00005D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000060   EE           MOV     A,R6
   \   000061   FA           MOV     R2,A
   \   000062   EF           MOV     A,R7
   \   000063   FB           MOV     R3,A
   \   000064   12....       LCALL   `??ZDP_PowerDescMsg::?relay`; Banked call to: ZDP_PowerDescMsg
   \   000067   7402         MOV     A,#0x2
   \   000069   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006C   E9           MOV     A,R1
   \   00006D   803C         SJMP    ??ZDO_ProcessPowerDescReq_3
    677            }
    678            else
    679            {
    680              ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr),
    681                        ZDP_INVALID_REQTYPE, aoi, Power_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessPowerDescReq_2:
   \   00006F                ; Setup parameters for call to function ZDP_GenericRsp
   \   00006F   75..03       MOV     ?V0,#0x3
   \   000072   75..80       MOV     ?V1,#-0x80
   \   000075   78..         MOV     R0,#?V0
   \   000077   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007A   8C..         MOV     ?V0,R4
   \   00007C   8D..         MOV     ?V1,R5
   \   00007E   78..         MOV     R0,#?V0
   \   000080   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000083   EE           MOV     A,R6
   \   000084   240E         ADD     A,#0xe
   \   000086   F582         MOV     DPL,A
   \   000088   E4           CLR     A
   \   000089   3F           ADDC    A,R7
   \   00008A   F583         MOV     DPH,A
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   FD           MOV     R5,A
   \   00008E   7C80         MOV     R4,#-0x80
   \   000090   EE           MOV     A,R6
   \   000091   2402         ADD     A,#0x2
   \   000093   FA           MOV     R2,A
   \   000094   E4           CLR     A
   \   000095   3F           ADDC    A,R7
   \   000096   FB           MOV     R3,A
   \   000097   EE           MOV     A,R6
   \   000098   240F         ADD     A,#0xf
   \   00009A   F582         MOV     DPL,A
   \   00009C   E4           CLR     A
   \   00009D   3F           ADDC    A,R7
   \   00009E   F583         MOV     DPH,A
   \   0000A0   E0           MOVX    A,@DPTR
   \   0000A1   F9           MOV     R1,A
   \   0000A2   12....       LCALL   `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
   \   0000A5   7404         MOV     A,#0x4
   \   0000A7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AA   E9           MOV     A,R1
    682            }
    683          }
   \                     ??ZDO_ProcessPowerDescReq_3:
   \   0000AB   7F02         MOV     R7,#0x2
   \   0000AD   02....       LJMP    ?BANKED_LEAVE_XDATA
    684          
    685          /*********************************************************************
    686           * @fn          ZDO_ProcessSimpleDescReq
    687           *
    688           * @brief       This function processes and responds to the
    689           *              Simple_Desc_req message.
    690           *
    691           * @param       inMsg - incoming message (request)
    692           *
    693           * @return      none
    694           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    695          void ZDO_ProcessSimpleDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessSimpleDescReq:
    696          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    697            SimpleDescriptionFormat_t *sDesc = NULL;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   7400         MOV     A,#0x0
   \   000016   F0           MOVX    @DPTR,A
   \   000017   A3           INC     DPTR
   \   000018   7400         MOV     A,#0x0
   \   00001A   F0           MOVX    @DPTR,A
    698            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \   00001B   EE           MOV     A,R6
   \   00001C   2413         ADD     A,#0x13
   \   00001E   F582         MOV     DPL,A
   \   000020   E4           CLR     A
   \   000021   3F           ADDC    A,R7
   \   000022   F583         MOV     DPH,A
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F8           MOV     R0,A
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F583         MOV     DPH,A
   \   00002A   8882         MOV     DPL,R0
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   FA           MOV     R2,A
   \   00002E   7B00         MOV     R3,#0x0
   \   000030   EE           MOV     A,R6
   \   000031   2413         ADD     A,#0x13
   \   000033   F582         MOV     DPL,A
   \   000035   E4           CLR     A
   \   000036   3F           ADDC    A,R7
   \   000037   F583         MOV     DPH,A
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   F8           MOV     R0,A
   \   00003B   A3           INC     DPTR
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   F583         MOV     DPH,A
   \   00003F   8882         MOV     DPL,R0
   \   000041   A3           INC     DPTR
   \   000042   E0           MOVX    A,@DPTR
   \   000043   F8           MOV     R0,A
   \   000044   7900         MOV     R1,#0x0
   \   000046   E4           CLR     A
   \   000047   C8           XCH     A,R0
   \   000048   F9           MOV     R1,A
   \   000049   EA           MOV     A,R2
   \   00004A   28           ADD     A,R0
   \   00004B   FA           MOV     R2,A
   \   00004C   EB           MOV     A,R3
   \   00004D   39           ADDC    A,R1
   \   00004E   FB           MOV     R3,A
    699            byte endPoint = inMsg->asdu[2];
   \   00004F   EE           MOV     A,R6
   \   000050   2413         ADD     A,#0x13
   \   000052   F582         MOV     DPL,A
   \   000054   E4           CLR     A
   \   000055   3F           ADDC    A,R7
   \   000056   F583         MOV     DPH,A
   \   000058   E0           MOVX    A,@DPTR
   \   000059   F8           MOV     R0,A
   \   00005A   A3           INC     DPTR
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   F583         MOV     DPH,A
   \   00005E   8882         MOV     DPL,R0
   \   000060   A3           INC     DPTR
   \   000061   A3           INC     DPTR
   \   000062   E0           MOVX    A,@DPTR
   \   000063   F9           MOV     R1,A
    700            byte free = false;
   \   000064   75..00       MOV     ?V1,#0x0
    701            byte stat = ZDP_SUCCESS;
   \   000067   75..00       MOV     ?V0,#0x0
    702          
    703            if ( (endPoint == ZDO_EP) || (endPoint > MAX_ENDPOINTS) )
   \   00006A   E9           MOV     A,R1
   \   00006B   6005         JZ      ??ZDO_ProcessSimpleDescReq_0
   \   00006D   74FF         MOV     A,#-0x1
   \   00006F   69           XRL     A,R1
   \   000070   7005         JNZ     ??ZDO_ProcessSimpleDescReq_1
    704            {
    705              stat = ZDP_INVALID_EP;
   \                     ??ZDO_ProcessSimpleDescReq_0:
   \   000072   75..82       MOV     ?V0,#-0x7e
   \   000075   8048         SJMP    ??ZDO_ProcessSimpleDescReq_2
    706            }
    707            else if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \                     ??ZDO_ProcessSimpleDescReq_1:
   \   000077   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   6A           XRL     A,R2
   \   00007C   7003         JNZ     ??ZDO_ProcessSimpleDescReq_3
   \   00007E   A3           INC     DPTR
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   6B           XRL     A,R3
   \                     ??ZDO_ProcessSimpleDescReq_3:
   \   000081   701E         JNZ     ??ZDO_ProcessSimpleDescReq_4
    708            {
    709              free = afFindSimpleDesc( &sDesc, endPoint );
   \   000083                ; Setup parameters for call to function afFindSimpleDesc
   \   000083   AA..         MOV     R2,?XSP + 0
   \   000085   AB..         MOV     R3,?XSP + 1
   \   000087   12....       LCALL   `??afFindSimpleDesc::?relay`; Banked call to: afFindSimpleDesc
   \   00008A   E9           MOV     A,R1
   \   00008B   F5..         MOV     ?V1,A
    710              if ( sDesc == NULL )
   \   00008D   85..82       MOV     DPL,?XSP + 0
   \   000090   85..83       MOV     DPH,?XSP + 1
   \   000093   E0           MOVX    A,@DPTR
   \   000094   F8           MOV     R0,A
   \   000095   A3           INC     DPTR
   \   000096   E0           MOVX    A,@DPTR
   \   000097   F9           MOV     R1,A
   \   000098   E8           MOV     A,R0
   \   000099   49           ORL     A,R1
   \   00009A   7023         JNZ     ??ZDO_ProcessSimpleDescReq_2
    711              {
    712                stat = ZDP_NOT_ACTIVE;
   \   00009C   75..83       MOV     ?V0,#-0x7d
   \   00009F   801E         SJMP    ??ZDO_ProcessSimpleDescReq_2
    713              }
    714            }
    715            else
    716            {
    717              if ( ZSTACK_ROUTER_BUILD )
   \                     ??ZDO_ProcessSimpleDescReq_4:
   \   0000A1   90....       MOV     DPTR,#zgDeviceLogicalType
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   6008         JZ      ??ZDO_ProcessSimpleDescReq_5
   \   0000A7   90....       MOV     DPTR,#zgDeviceLogicalType
   \   0000AA   E0           MOVX    A,@DPTR
   \   0000AB   6401         XRL     A,#0x1
   \   0000AD   7005         JNZ     ??ZDO_ProcessSimpleDescReq_6
    718              {
    719                stat = ZDP_DEVICE_NOT_FOUND;
   \                     ??ZDO_ProcessSimpleDescReq_5:
   \   0000AF   75..81       MOV     ?V0,#-0x7f
   \   0000B2   800B         SJMP    ??ZDO_ProcessSimpleDescReq_2
    720              }
    721              else if ( ZSTACK_END_DEVICE_BUILD )
   \                     ??ZDO_ProcessSimpleDescReq_6:
   \   0000B4   90....       MOV     DPTR,#zgDeviceLogicalType
   \   0000B7   E0           MOVX    A,@DPTR
   \   0000B8   6402         XRL     A,#0x2
   \   0000BA   7003         JNZ     ??ZDO_ProcessSimpleDescReq_2
    722              {
    723                stat = ZDP_INVALID_REQTYPE;
   \   0000BC   75..80       MOV     ?V0,#-0x80
    724              }
    725            }
    726          
    727            ZDP_SimpleDescMsg( inMsg, stat, sDesc );
   \                     ??ZDO_ProcessSimpleDescReq_2:
   \   0000BF                ; Setup parameters for call to function ZDP_SimpleDescMsg
   \   0000BF   85..82       MOV     DPL,?XSP + 0
   \   0000C2   85..83       MOV     DPH,?XSP + 1
   \   0000C5   E0           MOVX    A,@DPTR
   \   0000C6   FC           MOV     R4,A
   \   0000C7   A3           INC     DPTR
   \   0000C8   E0           MOVX    A,@DPTR
   \   0000C9   FD           MOV     R5,A
   \   0000CA   A9..         MOV     R1,?V0
   \   0000CC   EE           MOV     A,R6
   \   0000CD   FA           MOV     R2,A
   \   0000CE   EF           MOV     A,R7
   \   0000CF   FB           MOV     R3,A
   \   0000D0   12....       LCALL   `??ZDP_SimpleDescMsg::?relay`; Banked call to: ZDP_SimpleDescMsg
   \   0000D3   E9           MOV     A,R1
    728          
    729            if ( free && sDesc )
   \   0000D4   E5..         MOV     A,?V1
   \   0000D6   601D         JZ      ??ZDO_ProcessSimpleDescReq_7
   \   0000D8   85..82       MOV     DPL,?XSP + 0
   \   0000DB   85..83       MOV     DPH,?XSP + 1
   \   0000DE   E0           MOVX    A,@DPTR
   \   0000DF   F8           MOV     R0,A
   \   0000E0   A3           INC     DPTR
   \   0000E1   E0           MOVX    A,@DPTR
   \   0000E2   F9           MOV     R1,A
   \   0000E3   E8           MOV     A,R0
   \   0000E4   49           ORL     A,R1
   \   0000E5   600E         JZ      ??ZDO_ProcessSimpleDescReq_7
    730            {
    731              osal_mem_free( sDesc );
   \   0000E7                ; Setup parameters for call to function osal_mem_free
   \   0000E7   85..82       MOV     DPL,?XSP + 0
   \   0000EA   85..83       MOV     DPH,?XSP + 1
   \   0000ED   E0           MOVX    A,@DPTR
   \   0000EE   FA           MOV     R2,A
   \   0000EF   A3           INC     DPTR
   \   0000F0   E0           MOVX    A,@DPTR
   \   0000F1   FB           MOV     R3,A
   \   0000F2   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    732            }
    733          }
   \                     ??ZDO_ProcessSimpleDescReq_7:
   \   0000F5   7402         MOV     A,#0x2
   \   0000F7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000FA   7F02         MOV     R7,#0x2
   \   0000FC   02....       LJMP    ?BANKED_LEAVE_XDATA
    734          
    735          /*********************************************************************
    736           * @fn          ZDO_ProcessActiveEPReq
    737           *
    738           * @brief       This function processes and responds to the
    739           *              Active_EP_req message.
    740           *
    741           * @param       inMsg  - incoming message (request)
    742           *
    743           * @return      none
    744           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    745          void ZDO_ProcessActiveEPReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessActiveEPReq:
    746          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    747            byte cnt = 0;
   \   000009   75..00       MOV     ?V0,#0x0
    748            uint16 aoi;
    749            byte stat = ZDP_SUCCESS;
   \   00000C   75..00       MOV     ?V1,#0x0
    750          
    751            aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \   00000F   EE           MOV     A,R6
   \   000010   2413         ADD     A,#0x13
   \   000012   F582         MOV     DPL,A
   \   000014   E4           CLR     A
   \   000015   3F           ADDC    A,R7
   \   000016   F583         MOV     DPH,A
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F8           MOV     R0,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F583         MOV     DPH,A
   \   00001E   8882         MOV     DPL,R0
   \   000020   E0           MOVX    A,@DPTR
   \   000021   FA           MOV     R2,A
   \   000022   7B00         MOV     R3,#0x0
   \   000024   EE           MOV     A,R6
   \   000025   2413         ADD     A,#0x13
   \   000027   F582         MOV     DPL,A
   \   000029   E4           CLR     A
   \   00002A   3F           ADDC    A,R7
   \   00002B   F583         MOV     DPH,A
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F8           MOV     R0,A
   \   00002F   A3           INC     DPTR
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F583         MOV     DPH,A
   \   000033   8882         MOV     DPL,R0
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F8           MOV     R0,A
   \   000038   7900         MOV     R1,#0x0
   \   00003A   E4           CLR     A
   \   00003B   C8           XCH     A,R0
   \   00003C   F9           MOV     R1,A
   \   00003D   EA           MOV     A,R2
   \   00003E   28           ADD     A,R0
   \   00003F   F5..         MOV     ?V2,A
   \   000041   EB           MOV     A,R3
   \   000042   39           ADDC    A,R1
   \   000043   F5..         MOV     ?V3,A
    752          
    753            if ( aoi == NLME_GetShortAddr() )
   \   000045                ; Setup parameters for call to function NLME_GetShortAddr
   \   000045   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000048   8A..         MOV     ?V4,R2
   \   00004A   8B..         MOV     ?V5,R3
   \   00004C   E5..         MOV     A,?V4
   \   00004E   65..         XRL     A,?V2
   \   000050   7004         JNZ     ??ZDO_ProcessActiveEPReq_0
   \   000052   E5..         MOV     A,?V5
   \   000054   65..         XRL     A,?V3
   \                     ??ZDO_ProcessActiveEPReq_0:
   \   000056   7013         JNZ     ??ZDO_ProcessActiveEPReq_1
    754            {
    755              cnt = afNumEndPoints() - 1;  // -1 for ZDO endpoint descriptor
   \   000058                ; Setup parameters for call to function afNumEndPoints
   \   000058   12....       LCALL   `??afNumEndPoints::?relay`; Banked call to: afNumEndPoints
   \   00005B   E9           MOV     A,R1
   \   00005C   24FF         ADD     A,#-0x1
   \   00005E   F5..         MOV     ?V0,A
    756              afEndPoints( (uint8 *)ZDOBuildBuf, true );
   \   000060                ; Setup parameters for call to function afEndPoints
   \   000060   7901         MOV     R1,#0x1
   \   000062   7A..         MOV     R2,#ZDOBuildBuf & 0xff
   \   000064   7B..         MOV     R3,#(ZDOBuildBuf >> 8) & 0xff
   \   000066   12....       LCALL   `??afEndPoints::?relay`; Banked call to: afEndPoints
   \   000069   8003         SJMP    ??ZDO_ProcessActiveEPReq_2
    757            }
    758            else
    759            {
    760              stat = ZDP_INVALID_REQTYPE;
   \                     ??ZDO_ProcessActiveEPReq_1:
   \   00006B   75..80       MOV     ?V1,#-0x80
    761            }
    762          
    763            ZDP_ActiveEPRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat,
    764                            aoi, cnt, (uint8 *)ZDOBuildBuf, inMsg->SecurityUse );
   \                     ??ZDO_ProcessActiveEPReq_2:
   \   00006E                ; Setup parameters for call to function ZDP_EPRsp
   \   00006E   EE           MOV     A,R6
   \   00006F   240E         ADD     A,#0xe
   \   000071   F582         MOV     DPL,A
   \   000073   E4           CLR     A
   \   000074   3F           ADDC    A,R7
   \   000075   F583         MOV     DPH,A
   \   000077   E0           MOVX    A,@DPTR
   \   000078   F5..         MOV     ?V4,A
   \   00007A   78..         MOV     R0,#?V4
   \   00007C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00007F   75....       MOV     ?V4,#ZDOBuildBuf & 0xff
   \   000082   75....       MOV     ?V5,#(ZDOBuildBuf >> 8) & 0xff
   \   000085   78..         MOV     R0,#?V4
   \   000087   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008A   E5..         MOV     A,?V0
   \   00008C   F5..         MOV     ?V0,A
   \   00008E   78..         MOV     R0,#?V0
   \   000090   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000093   78..         MOV     R0,#?V2
   \   000095   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000098   E5..         MOV     A,?V1
   \   00009A   F5..         MOV     ?V0,A
   \   00009C   78..         MOV     R0,#?V0
   \   00009E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000A1   EE           MOV     A,R6
   \   0000A2   2402         ADD     A,#0x2
   \   0000A4   FC           MOV     R4,A
   \   0000A5   E4           CLR     A
   \   0000A6   3F           ADDC    A,R7
   \   0000A7   FD           MOV     R5,A
   \   0000A8   EE           MOV     A,R6
   \   0000A9   240F         ADD     A,#0xf
   \   0000AB   F582         MOV     DPL,A
   \   0000AD   E4           CLR     A
   \   0000AE   3F           ADDC    A,R7
   \   0000AF   F583         MOV     DPH,A
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   F9           MOV     R1,A
   \   0000B3   7A05         MOV     R2,#0x5
   \   0000B5   7B80         MOV     R3,#-0x80
   \   0000B7   12....       LCALL   `??ZDP_EPRsp::?relay`; Banked call to: ZDP_EPRsp
   \   0000BA   7407         MOV     A,#0x7
   \   0000BC   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000BF   E9           MOV     A,R1
    765          }
   \   0000C0   7F06         MOV     R7,#0x6
   \   0000C2   02....       LJMP    ?BANKED_LEAVE_XDATA
    766          
    767          /*********************************************************************
    768           * @fn          ZDO_ConvertOTAClusters
    769           *
    770           * @brief       This function will convert the over-the-air cluster list
    771           *              format to an internal format.
    772           *
    773           * @param       inMsg  - incoming message (request)
    774           *
    775           * @return      pointer to incremented inBuf
    776           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    777          uint8 *ZDO_ConvertOTAClusters( uint8 cnt, uint8 *inBuf, uint16 *outList )
   \                     ZDO_ConvertOTAClusters:
    778          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V1,R1
    779            uint8 x;
    780          
    781            for ( x = 0; x < cnt; x++ )
   \   000007   75..00       MOV     ?V0,#0x0
   \   00000A   804D         SJMP    ??ZDO_ConvertOTAClusters_0
    782            {
    783              // convert ota format to internal
    784              outList[x] = BUILD_UINT16( inBuf[0], inBuf[1] );
   \                     ??ZDO_ConvertOTAClusters_1:
   \   00000C   8A82         MOV     DPL,R2
   \   00000E   8B83         MOV     DPH,R3
   \   000010   E0           MOVX    A,@DPTR
   \   000011   FE           MOV     R6,A
   \   000012   7F00         MOV     R7,#0x0
   \   000014   8A82         MOV     DPL,R2
   \   000016   8B83         MOV     DPH,R3
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F8           MOV     R0,A
   \   00001B   7900         MOV     R1,#0x0
   \   00001D   E4           CLR     A
   \   00001E   C8           XCH     A,R0
   \   00001F   F9           MOV     R1,A
   \   000020   EE           MOV     A,R6
   \   000021   28           ADD     A,R0
   \   000022   FE           MOV     R6,A
   \   000023   EF           MOV     A,R7
   \   000024   39           ADDC    A,R1
   \   000025   FF           MOV     R7,A
   \   000026   A8..         MOV     R0,?V0
   \   000028   7900         MOV     R1,#0x0
   \   00002A   E8           MOV     A,R0
   \   00002B   75F002       MOV     B,#0x2
   \   00002E   A4           MUL     AB
   \   00002F   C8           XCH     A,R0
   \   000030   85F0..       MOV     ?V2,B
   \   000033   75F000       MOV     B,#0x0
   \   000036   A4           MUL     AB
   \   000037   25..         ADD     A,?V2
   \   000039   F5..         MOV     ?V2,A
   \   00003B   75F002       MOV     B,#0x2
   \   00003E   E9           MOV     A,R1
   \   00003F   A4           MUL     AB
   \   000040   25..         ADD     A,?V2
   \   000042   F9           MOV     R1,A
   \   000043   EC           MOV     A,R4
   \   000044   28           ADD     A,R0
   \   000045   F582         MOV     DPL,A
   \   000047   ED           MOV     A,R5
   \   000048   39           ADDC    A,R1
   \   000049   F583         MOV     DPH,A
   \   00004B   EE           MOV     A,R6
   \   00004C   F0           MOVX    @DPTR,A
   \   00004D   A3           INC     DPTR
   \   00004E   EF           MOV     A,R7
   \   00004F   F0           MOVX    @DPTR,A
    785              inBuf += sizeof( uint16 );
   \   000050   EA           MOV     A,R2
   \   000051   2402         ADD     A,#0x2
   \   000053   FA           MOV     R2,A
   \   000054   5001         JNC     ??ZDO_ConvertOTAClusters_2
   \   000056   0B           INC     R3
    786            }
   \                     ??ZDO_ConvertOTAClusters_2:
   \   000057   05..         INC     ?V0
   \                     ??ZDO_ConvertOTAClusters_0:
   \   000059   E5..         MOV     A,?V0
   \   00005B   C3           CLR     C
   \   00005C   95..         SUBB    A,?V1
   \   00005E   40AC         JC      ??ZDO_ConvertOTAClusters_1
    787            return ( inBuf );
   \   000060   7F03         MOV     R7,#0x3
   \   000062   02....       LJMP    ?BANKED_LEAVE_XDATA
    788          }
    789          
    790          /*********************************************************************
    791           * @fn          ZDO_ProcessMatchDescReq
    792           *
    793           * @brief       This function processes and responds to the
    794           *              Match_Desc_req message.
    795           *
    796           * @param       inMsg  - incoming message (request)
    797           *
    798           * @return      none
    799           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    800          void ZDO_ProcessMatchDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMatchDescReq:
    801          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV     A,#-0x7
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V12,R2
   \   00000C   8B..         MOV     ?V13,R3
    802            uint8 epCnt = 0;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   7400         MOV     A,#0x0
   \   000016   F0           MOVX    @DPTR,A
    803            uint8 numInClusters;
    804            uint16 *inClusters = NULL;
   \   000017   7403         MOV     A,#0x3
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   7400         MOV     A,#0x0
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   A3           INC     DPTR
   \   000020   7400         MOV     A,#0x0
   \   000022   F0           MOVX    @DPTR,A
    805            uint8 numOutClusters;
    806            uint16 *outClusters = NULL;
   \   000023   7401         MOV     A,#0x1
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   7400         MOV     A,#0x0
   \   00002A   F0           MOVX    @DPTR,A
   \   00002B   A3           INC     DPTR
   \   00002C   7400         MOV     A,#0x0
   \   00002E   F0           MOVX    @DPTR,A
    807            epList_t *epDesc;
    808            SimpleDescriptionFormat_t *sDesc = NULL;
   \   00002F   75..00       MOV     ?V10,#0x0
   \   000032   75..00       MOV     ?V11,#0x0
    809            uint8 allocated;
    810            uint8 *msg;
    811            uint16 aoi;
    812            uint16 profileID;
    813          
    814            // Parse the incoming message
    815            msg = inMsg->asdu;
   \   000035   E5..         MOV     A,?V12
   \   000037   2413         ADD     A,#0x13
   \   000039   F582         MOV     DPL,A
   \   00003B   E4           CLR     A
   \   00003C   35..         ADDC    A,?V13
   \   00003E   F583         MOV     DPH,A
   \   000040   E0           MOVX    A,@DPTR
   \   000041   F5..         MOV     ?V2,A
   \   000043   A3           INC     DPTR
   \   000044   E0           MOVX    A,@DPTR
   \   000045   F5..         MOV     ?V3,A
    816            aoi = BUILD_UINT16( msg[0], msg[1] );
   \   000047   85..82       MOV     DPL,?V2
   \   00004A   85..83       MOV     DPH,?V3
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   FA           MOV     R2,A
   \   00004F   7B00         MOV     R3,#0x0
   \   000051   85..82       MOV     DPL,?V2
   \   000054   85..83       MOV     DPH,?V3
   \   000057   A3           INC     DPTR
   \   000058   E0           MOVX    A,@DPTR
   \   000059   F8           MOV     R0,A
   \   00005A   7900         MOV     R1,#0x0
   \   00005C   E4           CLR     A
   \   00005D   C8           XCH     A,R0
   \   00005E   F9           MOV     R1,A
   \   00005F   EA           MOV     A,R2
   \   000060   28           ADD     A,R0
   \   000061   FE           MOV     R6,A
   \   000062   EB           MOV     A,R3
   \   000063   39           ADDC    A,R1
   \   000064   FF           MOV     R7,A
    817            profileID = BUILD_UINT16( msg[2], msg[3] );
   \   000065   85..82       MOV     DPL,?V2
   \   000068   85..83       MOV     DPH,?V3
   \   00006B   A3           INC     DPTR
   \   00006C   A3           INC     DPTR
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   FA           MOV     R2,A
   \   00006F   7B00         MOV     R3,#0x0
   \   000071   85..82       MOV     DPL,?V2
   \   000074   85..83       MOV     DPH,?V3
   \   000077   A3           INC     DPTR
   \   000078   A3           INC     DPTR
   \   000079   A3           INC     DPTR
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   F8           MOV     R0,A
   \   00007C   7900         MOV     R1,#0x0
   \   00007E   E4           CLR     A
   \   00007F   C8           XCH     A,R0
   \   000080   F9           MOV     R1,A
   \   000081   EA           MOV     A,R2
   \   000082   28           ADD     A,R0
   \   000083   F5..         MOV     ?V0,A
   \   000085   EB           MOV     A,R3
   \   000086   39           ADDC    A,R1
   \   000087   F5..         MOV     ?V1,A
    818            msg += 4;
   \   000089   E5..         MOV     A,?V2
   \   00008B   2404         ADD     A,#0x4
   \   00008D   F5..         MOV     ?V2,A
   \   00008F   5002         JNC     ??ZDO_ProcessMatchDescReq_0
   \   000091   05..         INC     ?V3
    819          
    820            if ( ADDR_BCAST_NOT_ME == NLME_IsAddressBroadcast(aoi) )
   \                     ??ZDO_ProcessMatchDescReq_0:
   \   000093                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   000093   EE           MOV     A,R6
   \   000094   FA           MOV     R2,A
   \   000095   EF           MOV     A,R7
   \   000096   FB           MOV     R3,A
   \   000097   12....       LCALL   `??NLME_IsAddressBroadcast::?relay`; Banked call to: NLME_IsAddressBroadcast
   \   00009A   E9           MOV     A,R1
   \   00009B   6401         XRL     A,#0x1
   \   00009D   7059         JNZ     ??ZDO_ProcessMatchDescReq_1
    821            {
    822              ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_INVALID_REQTYPE,
    823                                    ZDAppNwkAddr.addr.shortAddr, 0, NULL, inMsg->SecurityUse );
   \   00009F                ; Setup parameters for call to function ZDP_EPRsp
   \   00009F   E5..         MOV     A,?V12
   \   0000A1   240E         ADD     A,#0xe
   \   0000A3   F582         MOV     DPL,A
   \   0000A5   E4           CLR     A
   \   0000A6   35..         ADDC    A,?V13
   \   0000A8   F583         MOV     DPH,A
   \   0000AA   E0           MOVX    A,@DPTR
   \   0000AB   F5..         MOV     ?V0,A
   \   0000AD   78..         MOV     R0,#?V0
   \   0000AF   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000B2   E4           CLR     A
   \   0000B3   F5..         MOV     ?V0,A
   \   0000B5   F5..         MOV     ?V1,A
   \   0000B7   78..         MOV     R0,#?V0
   \   0000B9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000BC   75..00       MOV     ?V0,#0x0
   \   0000BF   78..         MOV     R0,#?V0
   \   0000C1   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C4   90....       MOV     DPTR,#ZDAppNwkAddr
   \   0000C7   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000CA   75..80       MOV     ?V0,#-0x80
   \   0000CD   78..         MOV     R0,#?V0
   \   0000CF   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000D2   E5..         MOV     A,?V12
   \   0000D4   2402         ADD     A,#0x2
   \   0000D6   FC           MOV     R4,A
   \   0000D7   E4           CLR     A
   \   0000D8   35..         ADDC    A,?V13
   \   0000DA   FD           MOV     R5,A
   \   0000DB   E5..         MOV     A,?V12
   \   0000DD   240F         ADD     A,#0xf
   \   0000DF   F582         MOV     DPL,A
   \   0000E1   E4           CLR     A
   \   0000E2   35..         ADDC    A,?V13
   \   0000E4   F583         MOV     DPH,A
   \   0000E6   E0           MOVX    A,@DPTR
   \   0000E7   F9           MOV     R1,A
   \   0000E8   7A06         MOV     R2,#0x6
   \   0000EA   7B80         MOV     R3,#-0x80
   \   0000EC   12....       LCALL   `??ZDP_EPRsp::?relay`; Banked call to: ZDP_EPRsp
   \   0000EF   7407         MOV     A,#0x7
   \   0000F1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000F4   E9           MOV     A,R1
    824              return;
   \   0000F5   02....       LJMP    ??ZDO_ProcessMatchDescReq_2 & 0xFFFF
    825            }
    826            else if ( (ADDR_NOT_BCAST == NLME_IsAddressBroadcast(aoi)) && (aoi != ZDAppNwkAddr.addr.shortAddr) )
   \                     ??ZDO_ProcessMatchDescReq_1:
   \   0000F8                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   0000F8   EE           MOV     A,R6
   \   0000F9   FA           MOV     R2,A
   \   0000FA   EF           MOV     A,R7
   \   0000FB   FB           MOV     R3,A
   \   0000FC   12....       LCALL   `??NLME_IsAddressBroadcast::?relay`; Banked call to: NLME_IsAddressBroadcast
   \   0000FF   E9           MOV     A,R1
   \   000100   7065         JNZ     ??ZDO_ProcessMatchDescReq_3
   \   000102   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000105   E0           MOVX    A,@DPTR
   \   000106   6E           XRL     A,R6
   \   000107   7003         JNZ     ??ZDO_ProcessMatchDescReq_4
   \   000109   A3           INC     DPTR
   \   00010A   E0           MOVX    A,@DPTR
   \   00010B   6F           XRL     A,R7
   \                     ??ZDO_ProcessMatchDescReq_4:
   \   00010C   6059         JZ      ??ZDO_ProcessMatchDescReq_3
    827            {
    828              ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_INVALID_REQTYPE,
    829                                       ZDAppNwkAddr.addr.shortAddr, 0, NULL, inMsg->SecurityUse );
   \   00010E                ; Setup parameters for call to function ZDP_EPRsp
   \   00010E   E5..         MOV     A,?V12
   \   000110   240E         ADD     A,#0xe
   \   000112   F582         MOV     DPL,A
   \   000114   E4           CLR     A
   \   000115   35..         ADDC    A,?V13
   \   000117   F583         MOV     DPH,A
   \   000119   E0           MOVX    A,@DPTR
   \   00011A   F5..         MOV     ?V0,A
   \   00011C   78..         MOV     R0,#?V0
   \   00011E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000121   E4           CLR     A
   \   000122   F5..         MOV     ?V0,A
   \   000124   F5..         MOV     ?V1,A
   \   000126   78..         MOV     R0,#?V0
   \   000128   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00012B   75..00       MOV     ?V0,#0x0
   \   00012E   78..         MOV     R0,#?V0
   \   000130   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000133   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000136   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000139   75..80       MOV     ?V0,#-0x80
   \   00013C   78..         MOV     R0,#?V0
   \   00013E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000141   E5..         MOV     A,?V12
   \   000143   2402         ADD     A,#0x2
   \   000145   FC           MOV     R4,A
   \   000146   E4           CLR     A
   \   000147   35..         ADDC    A,?V13
   \   000149   FD           MOV     R5,A
   \   00014A   E5..         MOV     A,?V12
   \   00014C   240F         ADD     A,#0xf
   \   00014E   F582         MOV     DPL,A
   \   000150   E4           CLR     A
   \   000151   35..         ADDC    A,?V13
   \   000153   F583         MOV     DPH,A
   \   000155   E0           MOVX    A,@DPTR
   \   000156   F9           MOV     R1,A
   \   000157   7A06         MOV     R2,#0x6
   \   000159   7B80         MOV     R3,#-0x80
   \   00015B   12....       LCALL   `??ZDP_EPRsp::?relay`; Banked call to: ZDP_EPRsp
   \   00015E   7407         MOV     A,#0x7
   \   000160   12....       LCALL   ?DEALLOC_XSTACK8
   \   000163   E9           MOV     A,R1
    830              return;
   \   000164   02....       LJMP    ??ZDO_ProcessMatchDescReq_2 & 0xFFFF
    831            }
    832          
    833            if ((numInClusters = *msg++) &&
    834                (inClusters = (uint16*)osal_mem_alloc( numInClusters * sizeof( uint16 ) )))
   \                     ??ZDO_ProcessMatchDescReq_3:
   \   000167   85..82       MOV     DPL,?V2
   \   00016A   85..83       MOV     DPH,?V3
   \   00016D   E0           MOVX    A,@DPTR
   \   00016E   F5..         MOV     ?V8,A
   \   000170   85..82       MOV     DPL,?V2
   \   000173   85..83       MOV     DPH,?V3
   \   000176   A3           INC     DPTR
   \   000177   8582..       MOV     ?V2,DPL
   \   00017A   8583..       MOV     ?V3,DPH
   \   00017D   E5..         MOV     A,?V8
   \   00017F   6053         JZ      ??ZDO_ProcessMatchDescReq_5
   \   000181                ; Setup parameters for call to function osal_mem_alloc
   \   000181   AA..         MOV     R2,?V8
   \   000183   7B00         MOV     R3,#0x0
   \   000185   EA           MOV     A,R2
   \   000186   75F002       MOV     B,#0x2
   \   000189   A4           MUL     AB
   \   00018A   CA           XCH     A,R2
   \   00018B   A8F0         MOV     R0,B
   \   00018D   75F000       MOV     B,#0x0
   \   000190   A4           MUL     AB
   \   000191   28           ADD     A,R0
   \   000192   F8           MOV     R0,A
   \   000193   75F002       MOV     B,#0x2
   \   000196   EB           MOV     A,R3
   \   000197   A4           MUL     AB
   \   000198   28           ADD     A,R0
   \   000199   FB           MOV     R3,A
   \   00019A   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00019D   7403         MOV     A,#0x3
   \   00019F   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A2   EA           MOV     A,R2
   \   0001A3   F0           MOVX    @DPTR,A
   \   0001A4   A3           INC     DPTR
   \   0001A5   EB           MOV     A,R3
   \   0001A6   F0           MOVX    @DPTR,A
   \   0001A7   7403         MOV     A,#0x3
   \   0001A9   12....       LCALL   ?XSTACK_DISP0_8
   \   0001AC   E0           MOVX    A,@DPTR
   \   0001AD   F8           MOV     R0,A
   \   0001AE   A3           INC     DPTR
   \   0001AF   E0           MOVX    A,@DPTR
   \   0001B0   F9           MOV     R1,A
   \   0001B1   E8           MOV     A,R0
   \   0001B2   49           ORL     A,R1
   \   0001B3   601F         JZ      ??ZDO_ProcessMatchDescReq_5
    835            {
    836              msg = ZDO_ConvertOTAClusters( numInClusters, msg, inClusters );
   \   0001B5                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   0001B5   7403         MOV     A,#0x3
   \   0001B7   12....       LCALL   ?XSTACK_DISP0_8
   \   0001BA   E0           MOVX    A,@DPTR
   \   0001BB   FC           MOV     R4,A
   \   0001BC   A3           INC     DPTR
   \   0001BD   E0           MOVX    A,@DPTR
   \   0001BE   FD           MOV     R5,A
   \   0001BF   AA..         MOV     R2,?V2
   \   0001C1   AB..         MOV     R3,?V3
   \   0001C3   A9..         MOV     R1,?V8
   \   0001C5   12....       LCALL   `??ZDO_ConvertOTAClusters::?relay`; Banked call to: ZDO_ConvertOTAClusters
   \   0001C8   8A..         MOV     ?V4,R2
   \   0001CA   8B..         MOV     ?V5,R3
   \   0001CC   85....       MOV     ?V2,?V4
   \   0001CF   85....       MOV     ?V3,?V5
   \   0001D2   8003         SJMP    ??ZDO_ProcessMatchDescReq_6
    837            }
    838            else
    839            {
    840              numInClusters = 0;
   \                     ??ZDO_ProcessMatchDescReq_5:
   \   0001D4   75..00       MOV     ?V8,#0x0
    841            }
    842          
    843            if ((numOutClusters = *msg++) &&
    844                (outClusters = (uint16 *)osal_mem_alloc( numOutClusters * sizeof( uint16 ) )))
   \                     ??ZDO_ProcessMatchDescReq_6:
   \   0001D7   85..82       MOV     DPL,?V2
   \   0001DA   85..83       MOV     DPH,?V3
   \   0001DD   E0           MOVX    A,@DPTR
   \   0001DE   F5..         MOV     ?V7,A
   \   0001E0   85..82       MOV     DPL,?V2
   \   0001E3   85..83       MOV     DPH,?V3
   \   0001E6   A3           INC     DPTR
   \   0001E7   8582..       MOV     ?V2,DPL
   \   0001EA   8583..       MOV     ?V3,DPH
   \   0001ED   E5..         MOV     A,?V7
   \   0001EF   6053         JZ      ??ZDO_ProcessMatchDescReq_7
   \   0001F1                ; Setup parameters for call to function osal_mem_alloc
   \   0001F1   AA..         MOV     R2,?V7
   \   0001F3   7B00         MOV     R3,#0x0
   \   0001F5   EA           MOV     A,R2
   \   0001F6   75F002       MOV     B,#0x2
   \   0001F9   A4           MUL     AB
   \   0001FA   CA           XCH     A,R2
   \   0001FB   A8F0         MOV     R0,B
   \   0001FD   75F000       MOV     B,#0x0
   \   000200   A4           MUL     AB
   \   000201   28           ADD     A,R0
   \   000202   F8           MOV     R0,A
   \   000203   75F002       MOV     B,#0x2
   \   000206   EB           MOV     A,R3
   \   000207   A4           MUL     AB
   \   000208   28           ADD     A,R0
   \   000209   FB           MOV     R3,A
   \   00020A   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00020D   7401         MOV     A,#0x1
   \   00020F   12....       LCALL   ?XSTACK_DISP0_8
   \   000212   EA           MOV     A,R2
   \   000213   F0           MOVX    @DPTR,A
   \   000214   A3           INC     DPTR
   \   000215   EB           MOV     A,R3
   \   000216   F0           MOVX    @DPTR,A
   \   000217   7401         MOV     A,#0x1
   \   000219   12....       LCALL   ?XSTACK_DISP0_8
   \   00021C   E0           MOVX    A,@DPTR
   \   00021D   F8           MOV     R0,A
   \   00021E   A3           INC     DPTR
   \   00021F   E0           MOVX    A,@DPTR
   \   000220   F9           MOV     R1,A
   \   000221   E8           MOV     A,R0
   \   000222   49           ORL     A,R1
   \   000223   601F         JZ      ??ZDO_ProcessMatchDescReq_7
    845            {
    846              msg = ZDO_ConvertOTAClusters( numOutClusters, msg, outClusters );
   \   000225                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   000225   7401         MOV     A,#0x1
   \   000227   12....       LCALL   ?XSTACK_DISP0_8
   \   00022A   E0           MOVX    A,@DPTR
   \   00022B   FC           MOV     R4,A
   \   00022C   A3           INC     DPTR
   \   00022D   E0           MOVX    A,@DPTR
   \   00022E   FD           MOV     R5,A
   \   00022F   AA..         MOV     R2,?V2
   \   000231   AB..         MOV     R3,?V3
   \   000233   A9..         MOV     R1,?V7
   \   000235   12....       LCALL   `??ZDO_ConvertOTAClusters::?relay`; Banked call to: ZDO_ConvertOTAClusters
   \   000238   8A..         MOV     ?V4,R2
   \   00023A   8B..         MOV     ?V5,R3
   \   00023C   85....       MOV     ?V2,?V4
   \   00023F   85....       MOV     ?V3,?V5
   \   000242   8003         SJMP    ??ZDO_ProcessMatchDescReq_8
    847            }
    848            else
    849            {
    850              numOutClusters = 0;
   \                     ??ZDO_ProcessMatchDescReq_7:
   \   000244   75..00       MOV     ?V7,#0x0
    851            }
    852          
    853            // First count the number of endpoints that match.
    854            epDesc = epList;
   \                     ??ZDO_ProcessMatchDescReq_8:
   \   000247   90....       MOV     DPTR,#epList
   \   00024A   E0           MOVX    A,@DPTR
   \   00024B   F5..         MOV     ?V14,A
   \   00024D   A3           INC     DPTR
   \   00024E   E0           MOVX    A,@DPTR
   \   00024F   F5..         MOV     ?V15,A
   \   000251   807F         SJMP    ??ZDO_ProcessMatchDescReq_9
    855            while ( epDesc )
    856            {
    857              // Don't search endpoint 0 and check if response is allowed
    858              if ( epDesc->epDesc->endPoint != ZDO_EP && (epDesc->flags&eEP_AllowMatch) )
    859              {
    860                if ( epDesc->pfnDescCB )
    861                {
    862                  sDesc = (SimpleDescriptionFormat_t *)epDesc->pfnDescCB( AF_DESCRIPTOR_SIMPLE, epDesc->epDesc->endPoint );
    863                  allocated = TRUE;
    864                }
    865                else
    866                {
    867                  sDesc = epDesc->epDesc->simpleDesc;
    868                  allocated = FALSE;
    869                }
    870          
    871                // Allow specific ProfileId or Wildcard ProfileID
    872                if ( sDesc && ( ( sDesc->AppProfId == profileID ) || ( profileID == ZDO_WILDCARD_PROFILE_ID ) ) )
    873                {
    874                  uint8 *uint8Buf = (uint8 *)ZDOBuildBuf;
    875          
    876                  // Are there matching input clusters?
    877                  if ((ZDO_AnyClusterMatches( numInClusters, inClusters,
    878                             sDesc->AppNumInClusters, sDesc->pAppInClusterList )) ||
    879                      // Are there matching output clusters?
    880                      (ZDO_AnyClusterMatches( numOutClusters, outClusters,
    881                             sDesc->AppNumOutClusters, sDesc->pAppOutClusterList )))
    882                  {
    883                    // Notify the endpoint of the match.
    884                    uint8 bufLen = sizeof( ZDO_MatchDescRspSent_t ) + (numOutClusters + numInClusters) * sizeof(uint16);
    885                    ZDO_MatchDescRspSent_t *pRspSent = (ZDO_MatchDescRspSent_t *) osal_msg_allocate( bufLen );
    886          
    887                    if (pRspSent)
    888                    {
    889                      pRspSent->hdr.event = ZDO_MATCH_DESC_RSP_SENT;
    890                      pRspSent->nwkAddr = inMsg->srcAddr.addr.shortAddr;
    891                      pRspSent->numInClusters = numInClusters;
    892                      pRspSent->numOutClusters = numOutClusters;
    893          
    894                      if (numInClusters)
    895                      {
    896                        pRspSent->pInClusters = (uint16*) (pRspSent + 1);
    897                        osal_memcpy(pRspSent->pInClusters, inClusters, numInClusters * sizeof(uint16));
    898                      }
    899                      else
    900                      {
    901                        pRspSent->pInClusters = NULL;
    902                      }
    903          
    904                      if (numOutClusters)
    905                      {
    906                        pRspSent->pOutClusters = (uint16*)(pRspSent + 1) + numInClusters;
    907                        osal_memcpy(pRspSent->pOutClusters, outClusters, numOutClusters * sizeof(uint16));
    908                      }
    909                      else
    910                      {
    911                        pRspSent->pOutClusters = NULL;
   \                     ??ZDO_ProcessMatchDescReq_10:
   \   000253   85..82       MOV     DPL,?V2
   \   000256   85..83       MOV     DPH,?V3
   \   000259   A3           INC     DPTR
   \   00025A   A3           INC     DPTR
   \   00025B   A3           INC     DPTR
   \   00025C   A3           INC     DPTR
   \   00025D   A3           INC     DPTR
   \   00025E   A3           INC     DPTR
   \   00025F   A3           INC     DPTR
   \   000260   A3           INC     DPTR
   \   000261   7400         MOV     A,#0x0
   \   000263   F0           MOVX    @DPTR,A
   \   000264   A3           INC     DPTR
   \   000265   7400         MOV     A,#0x0
   \   000267   F0           MOVX    @DPTR,A
    912                      }
    913          
    914                      osal_msg_send( *epDesc->epDesc->task_id, (uint8 *)pRspSent );
   \                     ??ZDO_ProcessMatchDescReq_11:
   \   000268                ; Setup parameters for call to function osal_msg_send
   \   000268   AA..         MOV     R2,?V2
   \   00026A   AB..         MOV     R3,?V3
   \   00026C   85..82       MOV     DPL,?V14
   \   00026F   85..83       MOV     DPH,?V15
   \   000272   A3           INC     DPTR
   \   000273   A3           INC     DPTR
   \   000274   E0           MOVX    A,@DPTR
   \   000275   F8           MOV     R0,A
   \   000276   A3           INC     DPTR
   \   000277   E0           MOVX    A,@DPTR
   \   000278   F583         MOV     DPH,A
   \   00027A   8882         MOV     DPL,R0
   \   00027C   A3           INC     DPTR
   \   00027D   E0           MOVX    A,@DPTR
   \   00027E   F8           MOV     R0,A
   \   00027F   A3           INC     DPTR
   \   000280   E0           MOVX    A,@DPTR
   \   000281   F583         MOV     DPH,A
   \   000283   8882         MOV     DPL,R0
   \   000285   E0           MOVX    A,@DPTR
   \   000286   F9           MOV     R1,A
   \   000287   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   00028A   E9           MOV     A,R1
    915                    }
    916          
    917                    uint8Buf[epCnt++] = sDesc->EndPoint;
   \                     ??ZDO_ProcessMatchDescReq_12:
   \   00028B   85..82       MOV     DPL,?V10
   \   00028E   85..83       MOV     DPH,?V11
   \   000291   E0           MOVX    A,@DPTR
   \   000292   C0E0         PUSH    A
   \   000294   85..82       MOV     DPL,?XSP + 0
   \   000297   85..83       MOV     DPH,?XSP + 1
   \   00029A   E0           MOVX    A,@DPTR
   \   00029B   F8           MOV     R0,A
   \   00029C   7900         MOV     R1,#0x0
   \   00029E   7405         MOV     A,#0x5
   \   0002A0   12....       LCALL   ?XSTACK_DISP0_8
   \   0002A3   E0           MOVX    A,@DPTR
   \   0002A4   28           ADD     A,R0
   \   0002A5   FA           MOV     R2,A
   \   0002A6   A3           INC     DPTR
   \   0002A7   E0           MOVX    A,@DPTR
   \   0002A8   39           ADDC    A,R1
   \   0002A9   8A82         MOV     DPL,R2
   \   0002AB   F583         MOV     DPH,A
   \   0002AD   D0E0         POP     A
   \   0002AF   F0           MOVX    @DPTR,A
   \   0002B0   85..82       MOV     DPL,?XSP + 0
   \   0002B3   85..83       MOV     DPH,?XSP + 1
   \   0002B6   E0           MOVX    A,@DPTR
   \   0002B7   2401         ADD     A,#0x1
   \   0002B9   F0           MOVX    @DPTR,A
    918                  }
    919                }
    920          
    921                if ( allocated )
   \                     ??ZDO_ProcessMatchDescReq_13:
   \   0002BA   E5..         MOV     A,?V9
   \   0002BC   6007         JZ      ??ZDO_ProcessMatchDescReq_14
    922                {
    923                  osal_mem_free( sDesc );
   \   0002BE                ; Setup parameters for call to function osal_mem_free
   \   0002BE   AA..         MOV     R2,?V10
   \   0002C0   AB..         MOV     R3,?V11
   \   0002C2   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    924                }
    925              }
    926              epDesc = epDesc->nextDesc;
   \                     ??ZDO_ProcessMatchDescReq_14:
   \   0002C5   85..82       MOV     DPL,?V14
   \   0002C8   85..83       MOV     DPH,?V15
   \   0002CB   E0           MOVX    A,@DPTR
   \   0002CC   F5..         MOV     ?V14,A
   \   0002CE   A3           INC     DPTR
   \   0002CF   E0           MOVX    A,@DPTR
   \   0002D0   F5..         MOV     ?V15,A
   \                     ??ZDO_ProcessMatchDescReq_9:
   \   0002D2   E5..         MOV     A,?V14
   \   0002D4   45..         ORL     A,?V15
   \   0002D6   7003         JNZ     $+5
   \   0002D8   02....       LJMP    ??ZDO_ProcessMatchDescReq_15 & 0xFFFF
   \   0002DB   85..82       MOV     DPL,?V14
   \   0002DE   85..83       MOV     DPH,?V15
   \   0002E1   A3           INC     DPTR
   \   0002E2   A3           INC     DPTR
   \   0002E3   E0           MOVX    A,@DPTR
   \   0002E4   F8           MOV     R0,A
   \   0002E5   A3           INC     DPTR
   \   0002E6   E0           MOVX    A,@DPTR
   \   0002E7   F583         MOV     DPH,A
   \   0002E9   8882         MOV     DPL,R0
   \   0002EB   E0           MOVX    A,@DPTR
   \   0002EC   60D7         JZ      ??ZDO_ProcessMatchDescReq_14
   \   0002EE   85..82       MOV     DPL,?V14
   \   0002F1   85..83       MOV     DPH,?V15
   \   0002F4   A3           INC     DPTR
   \   0002F5   A3           INC     DPTR
   \   0002F6   A3           INC     DPTR
   \   0002F7   A3           INC     DPTR
   \   0002F8   A3           INC     DPTR
   \   0002F9   A3           INC     DPTR
   \   0002FA   A3           INC     DPTR
   \   0002FB   A3           INC     DPTR
   \   0002FC   E0           MOVX    A,@DPTR
   \   0002FD   A2E0         MOV     C,0xE0 /* A   */.0
   \   0002FF   50C4         JNC     ??ZDO_ProcessMatchDescReq_14
   \   000301   85..82       MOV     DPL,?V14
   \   000304   85..83       MOV     DPH,?V15
   \   000307   A3           INC     DPTR
   \   000308   A3           INC     DPTR
   \   000309   A3           INC     DPTR
   \   00030A   A3           INC     DPTR
   \   00030B   E0           MOVX    A,@DPTR
   \   00030C   F8           MOV     R0,A
   \   00030D   A3           INC     DPTR
   \   00030E   E0           MOVX    A,@DPTR
   \   00030F   F9           MOV     R1,A
   \   000310   E8           MOV     A,R0
   \   000311   49           ORL     A,R1
   \   000312   6038         JZ      ??ZDO_ProcessMatchDescReq_16
   \   000314                ; Setup parameters for indirect call
   \   000314   85..82       MOV     DPL,?V14
   \   000317   85..83       MOV     DPH,?V15
   \   00031A   A3           INC     DPTR
   \   00031B   A3           INC     DPTR
   \   00031C   E0           MOVX    A,@DPTR
   \   00031D   F8           MOV     R0,A
   \   00031E   A3           INC     DPTR
   \   00031F   E0           MOVX    A,@DPTR
   \   000320   F583         MOV     DPH,A
   \   000322   8882         MOV     DPL,R0
   \   000324   E0           MOVX    A,@DPTR
   \   000325   FA           MOV     R2,A
   \   000326   7901         MOV     R1,#0x1
   \   000328   85..82       MOV     DPL,?V14
   \   00032B   85..83       MOV     DPH,?V15
   \   00032E   A3           INC     DPTR
   \   00032F   A3           INC     DPTR
   \   000330   A3           INC     DPTR
   \   000331   A3           INC     DPTR
   \   000332   E0           MOVX    A,@DPTR
   \   000333   F8           MOV     R0,A
   \   000334   A3           INC     DPTR
   \   000335   E0           MOVX    A,@DPTR
   \   000336   F583         MOV     DPH,A
   \   000338   8882         MOV     DPL,R0
   \   00033A   12....       LCALL   ?CALL_IND
   \   00033D   8A..         MOV     ?V2,R2
   \   00033F   8B..         MOV     ?V3,R3
   \   000341   85....       MOV     ?V10,?V2
   \   000344   85....       MOV     ?V11,?V3
   \   000347   75..01       MOV     ?V9,#0x1
   \   00034A   801D         SJMP    ??ZDO_ProcessMatchDescReq_17
   \                     ??ZDO_ProcessMatchDescReq_16:
   \   00034C   85..82       MOV     DPL,?V14
   \   00034F   85..83       MOV     DPH,?V15
   \   000352   A3           INC     DPTR
   \   000353   A3           INC     DPTR
   \   000354   E0           MOVX    A,@DPTR
   \   000355   F8           MOV     R0,A
   \   000356   A3           INC     DPTR
   \   000357   E0           MOVX    A,@DPTR
   \   000358   F583         MOV     DPH,A
   \   00035A   8882         MOV     DPL,R0
   \   00035C   A3           INC     DPTR
   \   00035D   A3           INC     DPTR
   \   00035E   A3           INC     DPTR
   \   00035F   E0           MOVX    A,@DPTR
   \   000360   F5..         MOV     ?V10,A
   \   000362   A3           INC     DPTR
   \   000363   E0           MOVX    A,@DPTR
   \   000364   F5..         MOV     ?V11,A
   \   000366   75..00       MOV     ?V9,#0x0
   \                     ??ZDO_ProcessMatchDescReq_17:
   \   000369   E5..         MOV     A,?V10
   \   00036B   45..         ORL     A,?V11
   \   00036D   7003         JNZ     $+5
   \   00036F   02....       LJMP    ??ZDO_ProcessMatchDescReq_13 & 0xFFFF
   \   000372   85..82       MOV     DPL,?V10
   \   000375   85..83       MOV     DPH,?V11
   \   000378   A3           INC     DPTR
   \   000379   E0           MOVX    A,@DPTR
   \   00037A   65..         XRL     A,?V0
   \   00037C   7004         JNZ     ??ZDO_ProcessMatchDescReq_18
   \   00037E   A3           INC     DPTR
   \   00037F   E0           MOVX    A,@DPTR
   \   000380   65..         XRL     A,?V1
   \                     ??ZDO_ProcessMatchDescReq_18:
   \   000382   600F         JZ      ??ZDO_ProcessMatchDescReq_19
   \   000384   74FF         MOV     A,#-0x1
   \   000386   65..         XRL     A,?V0
   \   000388   7004         JNZ     ??ZDO_ProcessMatchDescReq_20
   \   00038A   74FF         MOV     A,#-0x1
   \   00038C   65..         XRL     A,?V1
   \                     ??ZDO_ProcessMatchDescReq_20:
   \   00038E   6003         JZ      $+5
   \   000390   02....       LJMP    ??ZDO_ProcessMatchDescReq_13 & 0xFFFF
   \                     ??ZDO_ProcessMatchDescReq_19:
   \   000393   7405         MOV     A,#0x5
   \   000395   12....       LCALL   ?XSTACK_DISP0_8
   \   000398   74..         MOV     A,#ZDOBuildBuf & 0xff
   \   00039A   F0           MOVX    @DPTR,A
   \   00039B   A3           INC     DPTR
   \   00039C   74..         MOV     A,#(ZDOBuildBuf >> 8) & 0xff
   \   00039E   F0           MOVX    @DPTR,A
   \   00039F                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   00039F   85..82       MOV     DPL,?V10
   \   0003A2   85..83       MOV     DPH,?V11
   \   0003A5   A3           INC     DPTR
   \   0003A6   A3           INC     DPTR
   \   0003A7   A3           INC     DPTR
   \   0003A8   A3           INC     DPTR
   \   0003A9   A3           INC     DPTR
   \   0003AA   A3           INC     DPTR
   \   0003AB   A3           INC     DPTR
   \   0003AC   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0003AF   85..82       MOV     DPL,?V10
   \   0003B2   85..83       MOV     DPH,?V11
   \   0003B5   A3           INC     DPTR
   \   0003B6   A3           INC     DPTR
   \   0003B7   A3           INC     DPTR
   \   0003B8   A3           INC     DPTR
   \   0003B9   A3           INC     DPTR
   \   0003BA   A3           INC     DPTR
   \   0003BB   E0           MOVX    A,@DPTR
   \   0003BC   FC           MOV     R4,A
   \   0003BD   7405         MOV     A,#0x5
   \   0003BF   12....       LCALL   ?XSTACK_DISP0_8
   \   0003C2   E0           MOVX    A,@DPTR
   \   0003C3   FA           MOV     R2,A
   \   0003C4   A3           INC     DPTR
   \   0003C5   E0           MOVX    A,@DPTR
   \   0003C6   FB           MOV     R3,A
   \   0003C7   A9..         MOV     R1,?V8
   \   0003C9   12....       LCALL   `??ZDO_AnyClusterMatches::?relay`; Banked call to: ZDO_AnyClusterMatches
   \   0003CC   7402         MOV     A,#0x2
   \   0003CE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0003D1   E9           MOV     A,R1
   \   0003D2   703E         JNZ     ??ZDO_ProcessMatchDescReq_21
   \   0003D4                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   0003D4   85..82       MOV     DPL,?V10
   \   0003D7   85..83       MOV     DPH,?V11
   \   0003DA   A3           INC     DPTR
   \   0003DB   A3           INC     DPTR
   \   0003DC   A3           INC     DPTR
   \   0003DD   A3           INC     DPTR
   \   0003DE   A3           INC     DPTR
   \   0003DF   A3           INC     DPTR
   \   0003E0   A3           INC     DPTR
   \   0003E1   A3           INC     DPTR
   \   0003E2   A3           INC     DPTR
   \   0003E3   A3           INC     DPTR
   \   0003E4   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0003E7   85..82       MOV     DPL,?V10
   \   0003EA   85..83       MOV     DPH,?V11
   \   0003ED   A3           INC     DPTR
   \   0003EE   A3           INC     DPTR
   \   0003EF   A3           INC     DPTR
   \   0003F0   A3           INC     DPTR
   \   0003F1   A3           INC     DPTR
   \   0003F2   A3           INC     DPTR
   \   0003F3   A3           INC     DPTR
   \   0003F4   A3           INC     DPTR
   \   0003F5   A3           INC     DPTR
   \   0003F6   E0           MOVX    A,@DPTR
   \   0003F7   FC           MOV     R4,A
   \   0003F8   7403         MOV     A,#0x3
   \   0003FA   12....       LCALL   ?XSTACK_DISP0_8
   \   0003FD   E0           MOVX    A,@DPTR
   \   0003FE   FA           MOV     R2,A
   \   0003FF   A3           INC     DPTR
   \   000400   E0           MOVX    A,@DPTR
   \   000401   FB           MOV     R3,A
   \   000402   A9..         MOV     R1,?V7
   \   000404   12....       LCALL   `??ZDO_AnyClusterMatches::?relay`; Banked call to: ZDO_AnyClusterMatches
   \   000407   7402         MOV     A,#0x2
   \   000409   12....       LCALL   ?DEALLOC_XSTACK8
   \   00040C   E9           MOV     A,R1
   \   00040D   7003         JNZ     $+5
   \   00040F   02....       LJMP    ??ZDO_ProcessMatchDescReq_13 & 0xFFFF
   \                     ??ZDO_ProcessMatchDescReq_21:
   \   000412   75F002       MOV     B,#0x2
   \   000415   AA..         MOV     R2,?V7
   \   000417   7B00         MOV     R3,#0x0
   \   000419   A8..         MOV     R0,?V8
   \   00041B   7900         MOV     R1,#0x0
   \   00041D   EA           MOV     A,R2
   \   00041E   28           ADD     A,R0
   \   00041F   F8           MOV     R0,A
   \   000420   EB           MOV     A,R3
   \   000421   39           ADDC    A,R1
   \   000422   F9           MOV     R1,A
   \   000423   E8           MOV     A,R0
   \   000424   A4           MUL     AB
   \   000425   240A         ADD     A,#0xa
   \   000427   FA           MOV     R2,A
   \   000428                ; Setup parameters for call to function osal_msg_allocate
   \   000428   7B00         MOV     R3,#0x0
   \   00042A   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   00042D   8A..         MOV     ?V4,R2
   \   00042F   8B..         MOV     ?V5,R3
   \   000431   85....       MOV     ?V2,?V4
   \   000434   85....       MOV     ?V3,?V5
   \   000437   E5..         MOV     A,?V2
   \   000439   45..         ORL     A,?V3
   \   00043B   7003         JNZ     $+5
   \   00043D   02....       LJMP    ??ZDO_ProcessMatchDescReq_12 & 0xFFFF
   \   000440   85..82       MOV     DPL,?V2
   \   000443   85..83       MOV     DPH,?V3
   \   000446   74D2         MOV     A,#-0x2e
   \   000448   F0           MOVX    @DPTR,A
   \   000449   85..82       MOV     DPL,?V12
   \   00044C   85..83       MOV     DPH,?V13
   \   00044F   A3           INC     DPTR
   \   000450   A3           INC     DPTR
   \   000451   E0           MOVX    A,@DPTR
   \   000452   F8           MOV     R0,A
   \   000453   A3           INC     DPTR
   \   000454   E0           MOVX    A,@DPTR
   \   000455   F9           MOV     R1,A
   \   000456   85..82       MOV     DPL,?V2
   \   000459   85..83       MOV     DPH,?V3
   \   00045C   A3           INC     DPTR
   \   00045D   A3           INC     DPTR
   \   00045E   E8           MOV     A,R0
   \   00045F   F0           MOVX    @DPTR,A
   \   000460   A3           INC     DPTR
   \   000461   E9           MOV     A,R1
   \   000462   F0           MOVX    @DPTR,A
   \   000463   E5..         MOV     A,?V8
   \   000465   C0E0         PUSH    A
   \   000467   85..82       MOV     DPL,?V2
   \   00046A   85..83       MOV     DPH,?V3
   \   00046D   A3           INC     DPTR
   \   00046E   A3           INC     DPTR
   \   00046F   A3           INC     DPTR
   \   000470   A3           INC     DPTR
   \   000471   D0E0         POP     A
   \   000473   F0           MOVX    @DPTR,A
   \   000474   E5..         MOV     A,?V7
   \   000476   C0E0         PUSH    A
   \   000478   85..82       MOV     DPL,?V2
   \   00047B   85..83       MOV     DPH,?V3
   \   00047E   A3           INC     DPTR
   \   00047F   A3           INC     DPTR
   \   000480   A3           INC     DPTR
   \   000481   A3           INC     DPTR
   \   000482   A3           INC     DPTR
   \   000483   A3           INC     DPTR
   \   000484   A3           INC     DPTR
   \   000485   D0E0         POP     A
   \   000487   F0           MOVX    @DPTR,A
   \   000488   E5..         MOV     A,?V8
   \   00048A   6060         JZ      ??ZDO_ProcessMatchDescReq_22
   \   00048C   E5..         MOV     A,?V2
   \   00048E   240A         ADD     A,#0xa
   \   000490   F8           MOV     R0,A
   \   000491   E4           CLR     A
   \   000492   35..         ADDC    A,?V3
   \   000494   F9           MOV     R1,A
   \   000495   85..82       MOV     DPL,?V2
   \   000498   85..83       MOV     DPH,?V3
   \   00049B   A3           INC     DPTR
   \   00049C   A3           INC     DPTR
   \   00049D   A3           INC     DPTR
   \   00049E   A3           INC     DPTR
   \   00049F   A3           INC     DPTR
   \   0004A0   E8           MOV     A,R0
   \   0004A1   F0           MOVX    @DPTR,A
   \   0004A2   A3           INC     DPTR
   \   0004A3   E9           MOV     A,R1
   \   0004A4   F0           MOVX    @DPTR,A
   \   0004A5                ; Setup parameters for call to function osal_memcpy
   \   0004A5   7403         MOV     A,#0x3
   \   0004A7   12....       LCALL   ?XSTACK_DISP0_8
   \   0004AA   E0           MOVX    A,@DPTR
   \   0004AB   F5..         MOV     ?V4,A
   \   0004AD   A3           INC     DPTR
   \   0004AE   E0           MOVX    A,@DPTR
   \   0004AF   F5..         MOV     ?V5,A
   \   0004B1   75..00       MOV     ?V6,#0x0
   \   0004B4   78..         MOV     R0,#?V4
   \   0004B6   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0004B9   AC..         MOV     R4,?V8
   \   0004BB   7D00         MOV     R5,#0x0
   \   0004BD   EC           MOV     A,R4
   \   0004BE   75F002       MOV     B,#0x2
   \   0004C1   A4           MUL     AB
   \   0004C2   CC           XCH     A,R4
   \   0004C3   A8F0         MOV     R0,B
   \   0004C5   75F000       MOV     B,#0x0
   \   0004C8   A4           MUL     AB
   \   0004C9   28           ADD     A,R0
   \   0004CA   F8           MOV     R0,A
   \   0004CB   75F002       MOV     B,#0x2
   \   0004CE   ED           MOV     A,R5
   \   0004CF   A4           MUL     AB
   \   0004D0   28           ADD     A,R0
   \   0004D1   FD           MOV     R5,A
   \   0004D2   85..82       MOV     DPL,?V2
   \   0004D5   85..83       MOV     DPH,?V3
   \   0004D8   A3           INC     DPTR
   \   0004D9   A3           INC     DPTR
   \   0004DA   A3           INC     DPTR
   \   0004DB   A3           INC     DPTR
   \   0004DC   A3           INC     DPTR
   \   0004DD   E0           MOVX    A,@DPTR
   \   0004DE   FA           MOV     R2,A
   \   0004DF   A3           INC     DPTR
   \   0004E0   E0           MOVX    A,@DPTR
   \   0004E1   FB           MOV     R3,A
   \   0004E2   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0004E5   7403         MOV     A,#0x3
   \   0004E7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0004EA   8012         SJMP    ??ZDO_ProcessMatchDescReq_23
   \                     ??ZDO_ProcessMatchDescReq_22:
   \   0004EC   85..82       MOV     DPL,?V2
   \   0004EF   85..83       MOV     DPH,?V3
   \   0004F2   A3           INC     DPTR
   \   0004F3   A3           INC     DPTR
   \   0004F4   A3           INC     DPTR
   \   0004F5   A3           INC     DPTR
   \   0004F6   A3           INC     DPTR
   \   0004F7   7400         MOV     A,#0x0
   \   0004F9   F0           MOVX    @DPTR,A
   \   0004FA   A3           INC     DPTR
   \   0004FB   7400         MOV     A,#0x0
   \   0004FD   F0           MOVX    @DPTR,A
   \                     ??ZDO_ProcessMatchDescReq_23:
   \   0004FE   E5..         MOV     A,?V7
   \   000500   7003         JNZ     $+5
   \   000502   02....       LJMP    ??ZDO_ProcessMatchDescReq_10 & 0xFFFF
   \   000505   A8..         MOV     R0,?V8
   \   000507   7900         MOV     R1,#0x0
   \   000509   E8           MOV     A,R0
   \   00050A   75F002       MOV     B,#0x2
   \   00050D   A4           MUL     AB
   \   00050E   C8           XCH     A,R0
   \   00050F   AAF0         MOV     R2,B
   \   000511   75F000       MOV     B,#0x0
   \   000514   A4           MUL     AB
   \   000515   2A           ADD     A,R2
   \   000516   FA           MOV     R2,A
   \   000517   75F002       MOV     B,#0x2
   \   00051A   E9           MOV     A,R1
   \   00051B   A4           MUL     AB
   \   00051C   2A           ADD     A,R2
   \   00051D   F9           MOV     R1,A
   \   00051E   E5..         MOV     A,?V2
   \   000520   28           ADD     A,R0
   \   000521   F8           MOV     R0,A
   \   000522   E5..         MOV     A,?V3
   \   000524   39           ADDC    A,R1
   \   000525   F9           MOV     R1,A
   \   000526   E8           MOV     A,R0
   \   000527   240A         ADD     A,#0xa
   \   000529   F8           MOV     R0,A
   \   00052A   5001         JNC     ??ZDO_ProcessMatchDescReq_24
   \   00052C   09           INC     R1
   \                     ??ZDO_ProcessMatchDescReq_24:
   \   00052D   85..82       MOV     DPL,?V2
   \   000530   85..83       MOV     DPH,?V3
   \   000533   A3           INC     DPTR
   \   000534   A3           INC     DPTR
   \   000535   A3           INC     DPTR
   \   000536   A3           INC     DPTR
   \   000537   A3           INC     DPTR
   \   000538   A3           INC     DPTR
   \   000539   A3           INC     DPTR
   \   00053A   A3           INC     DPTR
   \   00053B   E8           MOV     A,R0
   \   00053C   F0           MOVX    @DPTR,A
   \   00053D   A3           INC     DPTR
   \   00053E   E9           MOV     A,R1
   \   00053F   F0           MOVX    @DPTR,A
   \   000540                ; Setup parameters for call to function osal_memcpy
   \   000540   7401         MOV     A,#0x1
   \   000542   12....       LCALL   ?XSTACK_DISP0_8
   \   000545   E0           MOVX    A,@DPTR
   \   000546   F5..         MOV     ?V4,A
   \   000548   A3           INC     DPTR
   \   000549   E0           MOVX    A,@DPTR
   \   00054A   F5..         MOV     ?V5,A
   \   00054C   75..00       MOV     ?V6,#0x0
   \   00054F   78..         MOV     R0,#?V4
   \   000551   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000554   AC..         MOV     R4,?V7
   \   000556   7D00         MOV     R5,#0x0
   \   000558   EC           MOV     A,R4
   \   000559   75F002       MOV     B,#0x2
   \   00055C   A4           MUL     AB
   \   00055D   CC           XCH     A,R4
   \   00055E   A8F0         MOV     R0,B
   \   000560   75F000       MOV     B,#0x0
   \   000563   A4           MUL     AB
   \   000564   28           ADD     A,R0
   \   000565   F8           MOV     R0,A
   \   000566   75F002       MOV     B,#0x2
   \   000569   ED           MOV     A,R5
   \   00056A   A4           MUL     AB
   \   00056B   28           ADD     A,R0
   \   00056C   FD           MOV     R5,A
   \   00056D   85..82       MOV     DPL,?V2
   \   000570   85..83       MOV     DPH,?V3
   \   000573   A3           INC     DPTR
   \   000574   A3           INC     DPTR
   \   000575   A3           INC     DPTR
   \   000576   A3           INC     DPTR
   \   000577   A3           INC     DPTR
   \   000578   A3           INC     DPTR
   \   000579   A3           INC     DPTR
   \   00057A   A3           INC     DPTR
   \   00057B   E0           MOVX    A,@DPTR
   \   00057C   FA           MOV     R2,A
   \   00057D   A3           INC     DPTR
   \   00057E   E0           MOVX    A,@DPTR
   \   00057F   FB           MOV     R3,A
   \   000580   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000583   7403         MOV     A,#0x3
   \   000585   12....       LCALL   ?DEALLOC_XSTACK8
   \   000588   02....       LJMP    ??ZDO_ProcessMatchDescReq_11 & 0xFFFF
    927            }
    928          
    929            if ( epCnt )
   \                     ??ZDO_ProcessMatchDescReq_15:
   \   00058B   85..82       MOV     DPL,?XSP + 0
   \   00058E   85..83       MOV     DPH,?XSP + 1
   \   000591   E0           MOVX    A,@DPTR
   \   000592   605E         JZ      ??ZDO_ProcessMatchDescReq_25
    930            {
    931              // Send the message if at least one match found.
    932              if ( ZSuccess == ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_SUCCESS,
    933                        ZDAppNwkAddr.addr.shortAddr, epCnt, (uint8 *)ZDOBuildBuf, inMsg->SecurityUse ) )
   \   000594                ; Setup parameters for call to function ZDP_EPRsp
   \   000594   E5..         MOV     A,?V12
   \   000596   240E         ADD     A,#0xe
   \   000598   F582         MOV     DPL,A
   \   00059A   E4           CLR     A
   \   00059B   35..         ADDC    A,?V13
   \   00059D   F583         MOV     DPH,A
   \   00059F   E0           MOVX    A,@DPTR
   \   0005A0   F5..         MOV     ?V0,A
   \   0005A2   78..         MOV     R0,#?V0
   \   0005A4   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0005A7   75....       MOV     ?V0,#ZDOBuildBuf & 0xff
   \   0005AA   75....       MOV     ?V1,#(ZDOBuildBuf >> 8) & 0xff
   \   0005AD   78..         MOV     R0,#?V0
   \   0005AF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0005B2   7403         MOV     A,#0x3
   \   0005B4   12....       LCALL   ?XSTACK_DISP0_8
   \   0005B7   E0           MOVX    A,@DPTR
   \   0005B8   F5..         MOV     ?V0,A
   \   0005BA   78..         MOV     R0,#?V0
   \   0005BC   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0005BF   90....       MOV     DPTR,#ZDAppNwkAddr
   \   0005C2   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0005C5   75..00       MOV     ?V0,#0x0
   \   0005C8   78..         MOV     R0,#?V0
   \   0005CA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0005CD   E5..         MOV     A,?V12
   \   0005CF   2402         ADD     A,#0x2
   \   0005D1   FC           MOV     R4,A
   \   0005D2   E4           CLR     A
   \   0005D3   35..         ADDC    A,?V13
   \   0005D5   FD           MOV     R5,A
   \   0005D6   E5..         MOV     A,?V12
   \   0005D8   240F         ADD     A,#0xf
   \   0005DA   F582         MOV     DPL,A
   \   0005DC   E4           CLR     A
   \   0005DD   35..         ADDC    A,?V13
   \   0005DF   F583         MOV     DPH,A
   \   0005E1   E0           MOVX    A,@DPTR
   \   0005E2   F9           MOV     R1,A
   \   0005E3   7A06         MOV     R2,#0x6
   \   0005E5   7B80         MOV     R3,#-0x80
   \   0005E7   12....       LCALL   `??ZDP_EPRsp::?relay`; Banked call to: ZDP_EPRsp
   \   0005EA   7407         MOV     A,#0x7
   \   0005EC   12....       LCALL   ?DEALLOC_XSTACK8
   \   0005EF   E9           MOV     A,R1
   \   0005F0   8061         SJMP    ??ZDO_ProcessMatchDescReq_26
    934              {
    935          #if defined( LCD_SUPPORTED )
    936                HalLcdWriteScreen( "Match Desc Req", "Rsp Sent" );
    937          #endif
    938              }
    939            }
    940            else
    941            {
    942              // No match found
    943              if (ADDR_NOT_BCAST == NLME_IsAddressBroadcast(aoi))
   \                     ??ZDO_ProcessMatchDescReq_25:
   \   0005F2                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   0005F2   EE           MOV     A,R6
   \   0005F3   FA           MOV     R2,A
   \   0005F4   EF           MOV     A,R7
   \   0005F5   FB           MOV     R3,A
   \   0005F6   12....       LCALL   `??NLME_IsAddressBroadcast::?relay`; Banked call to: NLME_IsAddressBroadcast
   \   0005F9   E9           MOV     A,R1
   \   0005FA   7057         JNZ     ??ZDO_ProcessMatchDescReq_26
    944              {
    945                // send response message with match length = 0
    946                ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_SUCCESS,
    947                                  ZDAppNwkAddr.addr.shortAddr, 0, (uint8 *)ZDOBuildBuf, inMsg->SecurityUse );
   \   0005FC                ; Setup parameters for call to function ZDP_EPRsp
   \   0005FC   E5..         MOV     A,?V12
   \   0005FE   240E         ADD     A,#0xe
   \   000600   F582         MOV     DPL,A
   \   000602   E4           CLR     A
   \   000603   35..         ADDC    A,?V13
   \   000605   F583         MOV     DPH,A
   \   000607   E0           MOVX    A,@DPTR
   \   000608   F5..         MOV     ?V0,A
   \   00060A   78..         MOV     R0,#?V0
   \   00060C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00060F   75....       MOV     ?V0,#ZDOBuildBuf & 0xff
   \   000612   75....       MOV     ?V1,#(ZDOBuildBuf >> 8) & 0xff
   \   000615   78..         MOV     R0,#?V0
   \   000617   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00061A   75..00       MOV     ?V0,#0x0
   \   00061D   78..         MOV     R0,#?V0
   \   00061F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000622   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000625   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000628   75..00       MOV     ?V0,#0x0
   \   00062B   78..         MOV     R0,#?V0
   \   00062D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000630   E5..         MOV     A,?V12
   \   000632   2402         ADD     A,#0x2
   \   000634   FC           MOV     R4,A
   \   000635   E4           CLR     A
   \   000636   35..         ADDC    A,?V13
   \   000638   FD           MOV     R5,A
   \   000639   E5..         MOV     A,?V12
   \   00063B   240F         ADD     A,#0xf
   \   00063D   F582         MOV     DPL,A
   \   00063F   E4           CLR     A
   \   000640   35..         ADDC    A,?V13
   \   000642   F583         MOV     DPH,A
   \   000644   E0           MOVX    A,@DPTR
   \   000645   F9           MOV     R1,A
   \   000646   7A06         MOV     R2,#0x6
   \   000648   7B80         MOV     R3,#-0x80
   \   00064A   12....       LCALL   `??ZDP_EPRsp::?relay`; Banked call to: ZDP_EPRsp
   \   00064D   7407         MOV     A,#0x7
   \   00064F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000652   E9           MOV     A,R1
    948          #if defined( LCD_SUPPORTED )
    949                HalLcdWriteScreen( "Match Desc Req", "Rsp Non Matched" );
    950          #endif
    951              }
    952              else
    953              {
    954                // no response mesage for broadcast message
    955          #if defined( LCD_SUPPORTED )
    956                HalLcdWriteScreen( "Match Desc Req", "Non Matched" );
    957          #endif
    958              }
    959            }
    960          
    961            if ( inClusters != NULL )
   \                     ??ZDO_ProcessMatchDescReq_26:
   \   000653   7403         MOV     A,#0x3
   \   000655   12....       LCALL   ?XSTACK_DISP0_8
   \   000658   E0           MOVX    A,@DPTR
   \   000659   F8           MOV     R0,A
   \   00065A   A3           INC     DPTR
   \   00065B   E0           MOVX    A,@DPTR
   \   00065C   F9           MOV     R1,A
   \   00065D   E8           MOV     A,R0
   \   00065E   49           ORL     A,R1
   \   00065F   600D         JZ      ??ZDO_ProcessMatchDescReq_27
    962            {
    963              osal_mem_free( inClusters );
   \   000661                ; Setup parameters for call to function osal_mem_free
   \   000661   7403         MOV     A,#0x3
   \   000663   12....       LCALL   ?XSTACK_DISP0_8
   \   000666   E0           MOVX    A,@DPTR
   \   000667   FA           MOV     R2,A
   \   000668   A3           INC     DPTR
   \   000669   E0           MOVX    A,@DPTR
   \   00066A   FB           MOV     R3,A
   \   00066B   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    964            }
    965          
    966            if ( outClusters != NULL )
   \                     ??ZDO_ProcessMatchDescReq_27:
   \   00066E   7401         MOV     A,#0x1
   \   000670   12....       LCALL   ?XSTACK_DISP0_8
   \   000673   E0           MOVX    A,@DPTR
   \   000674   F8           MOV     R0,A
   \   000675   A3           INC     DPTR
   \   000676   E0           MOVX    A,@DPTR
   \   000677   F9           MOV     R1,A
   \   000678   E8           MOV     A,R0
   \   000679   49           ORL     A,R1
   \   00067A   600D         JZ      ??ZDO_ProcessMatchDescReq_2
    967            {
    968              osal_mem_free( outClusters );
   \   00067C                ; Setup parameters for call to function osal_mem_free
   \   00067C   7401         MOV     A,#0x1
   \   00067E   12....       LCALL   ?XSTACK_DISP0_8
   \   000681   E0           MOVX    A,@DPTR
   \   000682   FA           MOV     R2,A
   \   000683   A3           INC     DPTR
   \   000684   E0           MOVX    A,@DPTR
   \   000685   FB           MOV     R3,A
   \   000686   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    969            }
    970          }
   \                     ??ZDO_ProcessMatchDescReq_2:
   \   000689   7407         MOV     A,#0x7
   \   00068B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00068E   7F10         MOV     R7,#0x10
   \   000690   02....       LJMP    ?BANKED_LEAVE_XDATA
    971          
    972          #if defined ( REFLECTOR )
    973          /*********************************************************************
    974           * @fn      ZDO_ProcessBindUnbindReq()
    975           *
    976           * @brief   Called to process a Bind or Unbind Request message.
    977           *
    978           * @param   inMsg  - incoming message (request)
    979           * @param   pReq - place to put parsed information
    980           *
    981           * @return  none
    982           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    983          void ZDO_ProcessBindUnbindReq( zdoIncomingMsg_t *inMsg, ZDO_BindUnbindReq_t *pReq )
   \                     ZDO_ProcessBindUnbindReq:
    984          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
    985            zAddrType_t SourceAddr;       // Binding Source addres
    986            byte bindStat;
    987          
    988            SourceAddr.addrMode = Addr64Bit;
   \   000012   740B         MOV     A,#0xb
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   7403         MOV     A,#0x3
   \   000019   F0           MOVX    @DPTR,A
    989            osal_cpyExtAddr( SourceAddr.addr.extAddr, pReq->srcAddress );
   \   00001A                ; Setup parameters for call to function sAddrExtCpy
   \   00001A   EE           MOV     A,R6
   \   00001B   FC           MOV     R4,A
   \   00001C   EF           MOV     A,R7
   \   00001D   FD           MOV     R5,A
   \   00001E   7403         MOV     A,#0x3
   \   000020   12....       LCALL   ?XSTACK_DISP101_8
   \   000023   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    990          
    991            // If the local device is not the primary binding cache
    992            // check the src address of the bind request.
    993            // If it is not the local device's extended address
    994            // discard the request.
    995            if ( !osal_ExtAddrEqual( SourceAddr.addr.extAddr, NLME_GetExtAddr()) ||
    996                  (pReq->dstAddress.addrMode != Addr64Bit &&
    997                   pReq->dstAddress.addrMode != AddrGroup) )
   \   000026                ; Setup parameters for call to function NLME_GetExtAddr
   \   000026   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   000029   8A..         MOV     ?V2,R2
   \   00002B   8B..         MOV     ?V3,R3
   \   00002D   AC..         MOV     R4,?V2
   \   00002F   AD..         MOV     R5,?V3
   \   000031                ; Setup parameters for call to function sAddrExtCmp
   \   000031   7403         MOV     A,#0x3
   \   000033   12....       LCALL   ?XSTACK_DISP101_8
   \   000036   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000039   E9           MOV     A,R1
   \   00003A   601C         JZ      ??ZDO_ProcessBindUnbindReq_0
   \   00003C   EE           MOV     A,R6
   \   00003D   2413         ADD     A,#0x13
   \   00003F   F582         MOV     DPL,A
   \   000041   E4           CLR     A
   \   000042   3F           ADDC    A,R7
   \   000043   F583         MOV     DPH,A
   \   000045   E0           MOVX    A,@DPTR
   \   000046   6403         XRL     A,#0x3
   \   000048   601A         JZ      ??ZDO_ProcessBindUnbindReq_1
   \   00004A   EE           MOV     A,R6
   \   00004B   2413         ADD     A,#0x13
   \   00004D   F582         MOV     DPL,A
   \   00004F   E4           CLR     A
   \   000050   3F           ADDC    A,R7
   \   000051   F583         MOV     DPH,A
   \   000053   E0           MOVX    A,@DPTR
   \   000054   6401         XRL     A,#0x1
   \   000056   600C         JZ      ??ZDO_ProcessBindUnbindReq_1
    998            {
    999              bindStat = ZDP_NOT_SUPPORTED;
   \                     ??ZDO_ProcessBindUnbindReq_0:
   \   000058   85..82       MOV     DPL,?XSP + 0
   \   00005B   85..83       MOV     DPH,?XSP + 1
   \   00005E   7484         MOV     A,#-0x7c
   \   000060   F0           MOVX    @DPTR,A
   \   000061   02....       LJMP    ??ZDO_ProcessBindUnbindReq_2 & 0xFFFF
   1000            }
   1001            else
   1002            {
   1003              // Check source & destination endpoints
   1004              if ( (pReq->srcEndpoint == 0 || pReq->srcEndpoint > MAX_ENDPOINTS)
   1005                  || (( pReq->dstAddress.addrMode == Addr64Bit ) &&
   1006                      (pReq->dstEndpoint == 0 || pReq->dstEndpoint > MAX_ENDPOINTS)) )
   \                     ??ZDO_ProcessBindUnbindReq_1:
   \   000064   8E82         MOV     DPL,R6
   \   000066   8F83         MOV     DPH,R7
   \   000068   A3           INC     DPTR
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   A3           INC     DPTR
   \   000070   E0           MOVX    A,@DPTR
   \   000071   6039         JZ      ??ZDO_ProcessBindUnbindReq_3
   \   000073   8E82         MOV     DPL,R6
   \   000075   8F83         MOV     DPH,R7
   \   000077   A3           INC     DPTR
   \   000078   A3           INC     DPTR
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   A3           INC     DPTR
   \   00007C   A3           INC     DPTR
   \   00007D   A3           INC     DPTR
   \   00007E   A3           INC     DPTR
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   64FF         XRL     A,#0xff
   \   000082   6028         JZ      ??ZDO_ProcessBindUnbindReq_3
   \   000084   EE           MOV     A,R6
   \   000085   2413         ADD     A,#0x13
   \   000087   F582         MOV     DPL,A
   \   000089   E4           CLR     A
   \   00008A   3F           ADDC    A,R7
   \   00008B   F583         MOV     DPH,A
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   6403         XRL     A,#0x3
   \   000090   7026         JNZ     ??ZDO_ProcessBindUnbindReq_4
   \   000092   EE           MOV     A,R6
   \   000093   2414         ADD     A,#0x14
   \   000095   F582         MOV     DPL,A
   \   000097   E4           CLR     A
   \   000098   3F           ADDC    A,R7
   \   000099   F583         MOV     DPH,A
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   600E         JZ      ??ZDO_ProcessBindUnbindReq_3
   \   00009E   EE           MOV     A,R6
   \   00009F   2414         ADD     A,#0x14
   \   0000A1   F582         MOV     DPL,A
   \   0000A3   E4           CLR     A
   \   0000A4   3F           ADDC    A,R7
   \   0000A5   F583         MOV     DPH,A
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   64FF         XRL     A,#0xff
   \   0000AA   700C         JNZ     ??ZDO_ProcessBindUnbindReq_4
   1007              {
   1008                bindStat = ZDP_INVALID_EP;
   \                     ??ZDO_ProcessBindUnbindReq_3:
   \   0000AC   85..82       MOV     DPL,?XSP + 0
   \   0000AF   85..83       MOV     DPH,?XSP + 1
   \   0000B2   7482         MOV     A,#-0x7e
   \   0000B4   F0           MOVX    @DPTR,A
   \   0000B5   02....       LJMP    ??ZDO_ProcessBindUnbindReq_2 & 0xFFFF
   1009              }
   1010              else
   1011              {
   1012                if ( inMsg->clusterID == Bind_req )
   \                     ??ZDO_ProcessBindUnbindReq_4:
   \   0000B8   E5..         MOV     A,?V0
   \   0000BA   240C         ADD     A,#0xc
   \   0000BC   F582         MOV     DPL,A
   \   0000BE   E4           CLR     A
   \   0000BF   35..         ADDC    A,?V1
   \   0000C1   F583         MOV     DPH,A
   \   0000C3   E0           MOVX    A,@DPTR
   \   0000C4   6421         XRL     A,#0x21
   \   0000C6   7004         JNZ     ??ZDO_ProcessBindUnbindReq_5
   \   0000C8   A3           INC     DPTR
   \   0000C9   E0           MOVX    A,@DPTR
   \   0000CA   6400         XRL     A,#0x0
   \                     ??ZDO_ProcessBindUnbindReq_5:
   \   0000CC   6003         JZ      $+5
   \   0000CE   02....       LJMP    ??ZDO_ProcessBindUnbindReq_6 & 0xFFFF
   1013                {
   1014                  // Assume the table is full
   1015                  bindStat = ZDP_TABLE_FULL;
   \   0000D1   85..82       MOV     DPL,?XSP + 0
   \   0000D4   85..83       MOV     DPH,?XSP + 1
   \   0000D7   748C         MOV     A,#-0x74
   \   0000D9   F0           MOVX    @DPTR,A
   1016          
   1017          #if defined( APP_TP ) || defined( APP_TP2 )
   1018                  // For ZigBee Conformance Testing
   1019                  if ( bindNumOfEntries() < gNWK_MAX_BINDING_ENTRIES )
   1020          #endif
   1021                  {
   1022          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
   1023                    uint16 nwkAddr;
   1024          
   1025                    // Verifies that a valid NWK address exists for the device
   1026                    // before creating a Binding entry. If NWK address does not
   1027                    // exist the request is sent out and the BindReq is saved, to
   1028                    // create the Bind Entry once the NwkAddrRsp is received
   1029                    if ( ( pReq->dstAddress.addrMode == Addr64Bit ) &&
   1030                         ( APSME_LookupNwkAddr( pReq->dstAddress.addr.extAddr, &nwkAddr ) == FALSE ) )
   \   0000DA   EE           MOV     A,R6
   \   0000DB   2413         ADD     A,#0x13
   \   0000DD   F582         MOV     DPL,A
   \   0000DF   E4           CLR     A
   \   0000E0   3F           ADDC    A,R7
   \   0000E1   F583         MOV     DPH,A
   \   0000E3   E0           MOVX    A,@DPTR
   \   0000E4   6403         XRL     A,#0x3
   \   0000E6   6003         JZ      $+5
   \   0000E8   02....       LJMP    ??ZDO_ProcessBindUnbindReq_7 & 0xFFFF
   \   0000EB                ; Setup parameters for call to function APSME_LookupNwkAddr
   \   0000EB   7401         MOV     A,#0x1
   \   0000ED   12....       LCALL   ?XSTACK_DISP102_8
   \   0000F0   EE           MOV     A,R6
   \   0000F1   240B         ADD     A,#0xb
   \   0000F3   FA           MOV     R2,A
   \   0000F4   E4           CLR     A
   \   0000F5   3F           ADDC    A,R7
   \   0000F6   FB           MOV     R3,A
   \   0000F7   12....       LCALL   `??APSME_LookupNwkAddr::?relay`; Banked call to: APSME_LookupNwkAddr
   \   0000FA   E9           MOV     A,R1
   \   0000FB   6003         JZ      $+5
   \   0000FD   02....       LJMP    ??ZDO_ProcessBindUnbindReq_7 & 0xFFFF
   1031                    {
   1032                      // find an empty bind slot in the pending Bind Req list
   1033                      ZDO_PendingBindReq_t *pPendingBind;
   1034          
   1035                      if ( ( pPendingBind = ZDApp_GetEmptyPendingBindReq() ) != NULL )
   \   000100                ; Setup parameters for call to function ZDApp_GetEmptyPendingBindReq
   \   000100   12....       LCALL   `??ZDApp_GetEmptyPendingBindReq::?relay`; Banked call to: ZDApp_GetEmptyPendingBindReq
   \   000103   8A..         MOV     ?V2,R2
   \   000105   8B..         MOV     ?V3,R3
   \   000107   A8..         MOV     R0,?V2
   \   000109   A9..         MOV     R1,?V3
   \   00010B   88..         MOV     ?V2,R0
   \   00010D   89..         MOV     ?V3,R1
   \   00010F   E8           MOV     A,R0
   \   000110   49           ORL     A,R1
   \   000111   7003         JNZ     $+5
   \   000113   02....       LJMP    ??ZDO_ProcessBindUnbindReq_2 & 0xFFFF
   1036                      {
   1037                        // copy the received request into the empty slot and all required info
   1038                        osal_memcpy( &(pPendingBind->bindReq), pReq, sizeof( ZDO_BindUnbindReq_t ) );
   \   000116                ; Setup parameters for call to function osal_memcpy
   \   000116   8E..         MOV     ?V4,R6
   \   000118   8F..         MOV     ?V5,R7
   \   00011A   75..00       MOV     ?V6,#0x0
   \   00011D   78..         MOV     R0,#?V4
   \   00011F   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000122   7C15         MOV     R4,#0x15
   \   000124   7D00         MOV     R5,#0x0
   \   000126   AA..         MOV     R2,?V2
   \   000128   AB..         MOV     R3,?V3
   \   00012A   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00012D   7403         MOV     A,#0x3
   \   00012F   12....       LCALL   ?DEALLOC_XSTACK8
   1039          
   1040                        pPendingBind->srcAddr = inMsg->srcAddr;
   \   000132   85..82       MOV     DPL,?V0
   \   000135   85..83       MOV     DPH,?V1
   \   000138   A3           INC     DPTR
   \   000139   A3           INC     DPTR
   \   00013A   E5..         MOV     A,?V2
   \   00013C   2415         ADD     A,#0x15
   \   00013E   FC           MOV     R4,A
   \   00013F   E4           CLR     A
   \   000140   35..         ADDC    A,?V3
   \   000142   FD           MOV     R5,A
   \   000143   7409         MOV     A,#0x9
   \   000145   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   1041                        pPendingBind->securityUse = inMsg->SecurityUse;
   \   000148   E5..         MOV     A,?V0
   \   00014A   240E         ADD     A,#0xe
   \   00014C   F582         MOV     DPL,A
   \   00014E   E4           CLR     A
   \   00014F   35..         ADDC    A,?V1
   \   000151   F583         MOV     DPH,A
   \   000153   E0           MOVX    A,@DPTR
   \   000154   C0E0         PUSH    A
   \   000156   E5..         MOV     A,?V2
   \   000158   241E         ADD     A,#0x1e
   \   00015A   F582         MOV     DPL,A
   \   00015C   E4           CLR     A
   \   00015D   35..         ADDC    A,?V3
   \   00015F   F583         MOV     DPH,A
   \   000161   D0E0         POP     A
   \   000163   F0           MOVX    @DPTR,A
   1042                        pPendingBind->transSeq = inMsg->TransSeq;
   \   000164   E5..         MOV     A,?V0
   \   000166   240F         ADD     A,#0xf
   \   000168   F582         MOV     DPL,A
   \   00016A   E4           CLR     A
   \   00016B   35..         ADDC    A,?V1
   \   00016D   F583         MOV     DPH,A
   \   00016F   E0           MOVX    A,@DPTR
   \   000170   C0E0         PUSH    A
   \   000172   E5..         MOV     A,?V2
   \   000174   241F         ADD     A,#0x1f
   \   000176   F582         MOV     DPL,A
   \   000178   E4           CLR     A
   \   000179   35..         ADDC    A,?V3
   \   00017B   F583         MOV     DPH,A
   \   00017D   D0E0         POP     A
   \   00017F   F0           MOVX    @DPTR,A
   1043                        pPendingBind->age = MAX_TIME_ADDR_REQ;
   \   000180   E5..         MOV     A,?V2
   \   000182   2420         ADD     A,#0x20
   \   000184   F582         MOV     DPL,A
   \   000186   E4           CLR     A
   \   000187   35..         ADDC    A,?V3
   \   000189   F583         MOV     DPH,A
   \   00018B   7405         MOV     A,#0x5
   \   00018D   F0           MOVX    @DPTR,A
   1044          
   1045                        // create an entry in Address Manager
   1046                        ( void )bindAddrIndexGet( &(pReq->dstAddress) );
   \   00018E                ; Setup parameters for call to function bindAddrIndexGet
   \   00018E   EE           MOV     A,R6
   \   00018F   240B         ADD     A,#0xb
   \   000191   FA           MOV     R2,A
   \   000192   E4           CLR     A
   \   000193   3F           ADDC    A,R7
   \   000194   FB           MOV     R3,A
   \   000195   12....       LCALL   `??bindAddrIndexGet::?relay`; Banked call to: bindAddrIndexGet
   \   000198   8A..         MOV     ?V2,R2
   \   00019A   8B..         MOV     ?V3,R3
   \   00019C   85....       MOV     ?V0,?V2
   \   00019F   85....       MOV     ?V1,?V3
   1047          
   1048                        ZDP_NwkAddrReq( pReq->dstAddress.addr.extAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   \   0001A2                ; Setup parameters for call to function ZDP_NwkAddrReq
   \   0001A2   7D00         MOV     R5,#0x0
   \   0001A4   7C00         MOV     R4,#0x0
   \   0001A6   7900         MOV     R1,#0x0
   \   0001A8   EE           MOV     A,R6
   \   0001A9   240B         ADD     A,#0xb
   \   0001AB   FA           MOV     R2,A
   \   0001AC   E4           CLR     A
   \   0001AD   3F           ADDC    A,R7
   \   0001AE   FB           MOV     R3,A
   \   0001AF   12....       LCALL   `??ZDP_NwkAddrReq::?relay`; Banked call to: ZDP_NwkAddrReq
   \   0001B2   E9           MOV     A,R1
   1049          
   1050                        osal_start_timerEx( ZDAppTaskID, ZDO_PENDING_BIND_REQ_EVT,
   1051                                            AGE_OUT_PEND_BIND_REQ_DELAY );
   \   0001B3                ; Setup parameters for call to function osal_start_timerEx
   \   0001B3   90....       MOV     DPTR,#__Constant_3e8
   \   0001B6   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0001B9   7A00         MOV     R2,#0x0
   \   0001BB   7B10         MOV     R3,#0x10
   \   0001BD   90....       MOV     DPTR,#ZDAppTaskID
   \   0001C0   E0           MOVX    A,@DPTR
   \   0001C1   F9           MOV     R1,A
   \   0001C2   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0001C5   7404         MOV     A,#0x4
   \   0001C7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001CA   E9           MOV     A,R1
   1052                        return;
   \   0001CB   02....       LJMP    ??ZDO_ProcessBindUnbindReq_8 & 0xFFFF
   1053                      }
   1054                    }
   1055                    // Add Bind entry
   1056                    else if ( APSME_BindRequest( pReq->srcEndpoint, pReq->clusterID,
   1057                                                 &(pReq->dstAddress), pReq->dstEndpoint ) == ZSuccess )
   \                     ??ZDO_ProcessBindUnbindReq_7:
   \   0001CE                ; Setup parameters for call to function APSME_BindRequest
   \   0001CE   EE           MOV     A,R6
   \   0001CF   2414         ADD     A,#0x14
   \   0001D1   F582         MOV     DPL,A
   \   0001D3   E4           CLR     A
   \   0001D4   3F           ADDC    A,R7
   \   0001D5   F583         MOV     DPH,A
   \   0001D7   E0           MOVX    A,@DPTR
   \   0001D8   F5..         MOV     ?V2,A
   \   0001DA   78..         MOV     R0,#?V2
   \   0001DC   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001DF   EE           MOV     A,R6
   \   0001E0   240B         ADD     A,#0xb
   \   0001E2   FC           MOV     R4,A
   \   0001E3   E4           CLR     A
   \   0001E4   3F           ADDC    A,R7
   \   0001E5   FD           MOV     R5,A
   \   0001E6   8E82         MOV     DPL,R6
   \   0001E8   8F83         MOV     DPH,R7
   \   0001EA   A3           INC     DPTR
   \   0001EB   A3           INC     DPTR
   \   0001EC   A3           INC     DPTR
   \   0001ED   A3           INC     DPTR
   \   0001EE   A3           INC     DPTR
   \   0001EF   A3           INC     DPTR
   \   0001F0   A3           INC     DPTR
   \   0001F1   A3           INC     DPTR
   \   0001F2   A3           INC     DPTR
   \   0001F3   E0           MOVX    A,@DPTR
   \   0001F4   FA           MOV     R2,A
   \   0001F5   A3           INC     DPTR
   \   0001F6   E0           MOVX    A,@DPTR
   \   0001F7   FB           MOV     R3,A
   \   0001F8   8E82         MOV     DPL,R6
   \   0001FA   8F83         MOV     DPH,R7
   \   0001FC   A3           INC     DPTR
   \   0001FD   A3           INC     DPTR
   \   0001FE   A3           INC     DPTR
   \   0001FF   A3           INC     DPTR
   \   000200   A3           INC     DPTR
   \   000201   A3           INC     DPTR
   \   000202   A3           INC     DPTR
   \   000203   A3           INC     DPTR
   \   000204   E0           MOVX    A,@DPTR
   \   000205   F9           MOV     R1,A
   \   000206   12....       LCALL   `??APSME_BindRequest::?relay`; Banked call to: APSME_BindRequest
   \   000209   7401         MOV     A,#0x1
   \   00020B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00020E   E9           MOV     A,R1
   \   00020F   7068         JNZ     ??ZDO_ProcessBindUnbindReq_2
   1058                    {
   1059                      // valid entry
   1060                      bindStat = ZDP_SUCCESS;
   \   000211   85..82       MOV     DPL,?XSP + 0
   \   000214   85..83       MOV     DPH,?XSP + 1
   \   000217   7400         MOV     A,#0x0
   \   000219   F0           MOVX    @DPTR,A
   1061          
   1062                      // Notify to save info into NV
   1063                      ZDApp_NVUpdate();
   \   00021A                ; Setup parameters for call to function ZDApp_NVUpdate
   \   00021A   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   \   00021D   805A         SJMP    ??ZDO_ProcessBindUnbindReq_2
   1064                    }
   1065          #else // ZDP_BIND_SKIP_VALIDATION  is defined
   1066                    // Create binding entry first independently of existance of  valid NWK addres
   1067                    // if NWK address does not exist a request is sent out
   1068                    if ( APSME_BindRequest( pReq->srcEndpoint, pReq->clusterID,
   1069                                   &(pReq->dstAddress), pReq->dstEndpoint ) == ZSuccess )
   1070                    {
   1071                      uint16 nwkAddr;
   1072          
   1073                      // valid entry
   1074                      bindStat = ZDP_SUCCESS;
   1075          
   1076                      // Notify to save info into NV
   1077                      ZDApp_NVUpdate();
   1078          
   1079                      // Check for the destination address
   1080                      if ( pReq->dstAddress.addrMode == Addr64Bit )
   1081                      {
   1082                        if ( APSME_LookupNwkAddr( pReq->dstAddress.addr.extAddr, &nwkAddr ) == FALSE )
   1083                        {
   1084                          ZDP_NwkAddrReq( pReq->dstAddress.addr.extAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   1085                        }
   1086                      }
   1087                    }
   1088          #endif
   1089                  }
   1090                }
   1091                else // Unbind_req
   1092                {
   1093                  if ( APSME_UnBindRequest( pReq->srcEndpoint, pReq->clusterID,
   1094                                 &(pReq->dstAddress), pReq->dstEndpoint ) == ZSuccess )
   \                     ??ZDO_ProcessBindUnbindReq_6:
   \   00021F                ; Setup parameters for call to function APSME_UnBindRequest
   \   00021F   EE           MOV     A,R6
   \   000220   2414         ADD     A,#0x14
   \   000222   F582         MOV     DPL,A
   \   000224   E4           CLR     A
   \   000225   3F           ADDC    A,R7
   \   000226   F583         MOV     DPH,A
   \   000228   E0           MOVX    A,@DPTR
   \   000229   F5..         MOV     ?V2,A
   \   00022B   78..         MOV     R0,#?V2
   \   00022D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000230   EE           MOV     A,R6
   \   000231   240B         ADD     A,#0xb
   \   000233   FC           MOV     R4,A
   \   000234   E4           CLR     A
   \   000235   3F           ADDC    A,R7
   \   000236   FD           MOV     R5,A
   \   000237   8E82         MOV     DPL,R6
   \   000239   8F83         MOV     DPH,R7
   \   00023B   A3           INC     DPTR
   \   00023C   A3           INC     DPTR
   \   00023D   A3           INC     DPTR
   \   00023E   A3           INC     DPTR
   \   00023F   A3           INC     DPTR
   \   000240   A3           INC     DPTR
   \   000241   A3           INC     DPTR
   \   000242   A3           INC     DPTR
   \   000243   A3           INC     DPTR
   \   000244   E0           MOVX    A,@DPTR
   \   000245   FA           MOV     R2,A
   \   000246   A3           INC     DPTR
   \   000247   E0           MOVX    A,@DPTR
   \   000248   FB           MOV     R3,A
   \   000249   8E82         MOV     DPL,R6
   \   00024B   8F83         MOV     DPH,R7
   \   00024D   A3           INC     DPTR
   \   00024E   A3           INC     DPTR
   \   00024F   A3           INC     DPTR
   \   000250   A3           INC     DPTR
   \   000251   A3           INC     DPTR
   \   000252   A3           INC     DPTR
   \   000253   A3           INC     DPTR
   \   000254   A3           INC     DPTR
   \   000255   E0           MOVX    A,@DPTR
   \   000256   F9           MOV     R1,A
   \   000257   12....       LCALL   `??APSME_UnBindRequest::?relay`; Banked call to: APSME_UnBindRequest
   \   00025A   7401         MOV     A,#0x1
   \   00025C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00025F   E9           MOV     A,R1
   \   000260   700E         JNZ     ??ZDO_ProcessBindUnbindReq_9
   1095                  {
   1096                    bindStat = ZDP_SUCCESS;
   \   000262   85..82       MOV     DPL,?XSP + 0
   \   000265   85..83       MOV     DPH,?XSP + 1
   \   000268   7400         MOV     A,#0x0
   \   00026A   F0           MOVX    @DPTR,A
   1097          
   1098                    // Notify to save info into NV
   1099                    ZDApp_NVUpdate();
   \   00026B                ; Setup parameters for call to function ZDApp_NVUpdate
   \   00026B   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   \   00026E   8009         SJMP    ??ZDO_ProcessBindUnbindReq_2
   1100                  }
   1101                  else
   1102                    bindStat = ZDP_NO_ENTRY;
   \                     ??ZDO_ProcessBindUnbindReq_9:
   \   000270   85..82       MOV     DPL,?XSP + 0
   \   000273   85..83       MOV     DPH,?XSP + 1
   \   000276   7488         MOV     A,#-0x78
   \   000278   F0           MOVX    @DPTR,A
   1103                }
   1104              }
   1105            }
   1106          
   1107            // Send back a response message
   1108            ZDP_SendData( &(inMsg->TransSeq), &(inMsg->srcAddr),
   1109                         (inMsg->clusterID | ZDO_RESPONSE_BIT), 1, &bindStat,
   1110                         inMsg->SecurityUse );
   \                     ??ZDO_ProcessBindUnbindReq_2:
   \   000279                ; Setup parameters for call to function ZDP_SendData
   \   000279   E5..         MOV     A,?V0
   \   00027B   240E         ADD     A,#0xe
   \   00027D   F582         MOV     DPL,A
   \   00027F   E4           CLR     A
   \   000280   35..         ADDC    A,?V1
   \   000282   F583         MOV     DPH,A
   \   000284   E0           MOVX    A,@DPTR
   \   000285   F5..         MOV     ?V2,A
   \   000287   78..         MOV     R0,#?V2
   \   000289   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00028C   7401         MOV     A,#0x1
   \   00028E   12....       LCALL   ?XSTACK_DISP100_8
   \   000291   88..         MOV     ?V2,R0
   \   000293   89..         MOV     ?V3,R1
   \   000295   78..         MOV     R0,#?V2
   \   000297   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00029A   E5..         MOV     A,?V0
   \   00029C   240C         ADD     A,#0xc
   \   00029E   F582         MOV     DPL,A
   \   0002A0   E4           CLR     A
   \   0002A1   35..         ADDC    A,?V1
   \   0002A3   F583         MOV     DPH,A
   \   0002A5   E0           MOVX    A,@DPTR
   \   0002A6   4400         ORL     A,#0x0
   \   0002A8   F5..         MOV     ?V2,A
   \   0002AA   A3           INC     DPTR
   \   0002AB   E0           MOVX    A,@DPTR
   \   0002AC   4480         ORL     A,#0x80
   \   0002AE   F5..         MOV     ?V3,A
   \   0002B0   78..         MOV     R0,#?V2
   \   0002B2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002B5   7901         MOV     R1,#0x1
   \   0002B7   E5..         MOV     A,?V0
   \   0002B9   2402         ADD     A,#0x2
   \   0002BB   FC           MOV     R4,A
   \   0002BC   E4           CLR     A
   \   0002BD   35..         ADDC    A,?V1
   \   0002BF   FD           MOV     R5,A
   \   0002C0   E5..         MOV     A,?V0
   \   0002C2   240F         ADD     A,#0xf
   \   0002C4   FA           MOV     R2,A
   \   0002C5   E4           CLR     A
   \   0002C6   35..         ADDC    A,?V1
   \   0002C8   FB           MOV     R3,A
   \   0002C9   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   0002CC   7405         MOV     A,#0x5
   \   0002CE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002D1   E9           MOV     A,R1
   1111          }
   \                     ??ZDO_ProcessBindUnbindReq_8:
   \   0002D2   740C         MOV     A,#0xc
   \   0002D4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002D7   7F07         MOV     R7,#0x7
   \   0002D9   02....       LJMP    ?BANKED_LEAVE_XDATA
   1112          #endif // REFLECTOR
   1113          
   1114          /*********************************************************************
   1115           * @fn      ZDO_UpdateAddrManager
   1116           *
   1117           * @brief   Update the Address Manager.
   1118           *
   1119           * @param   nwkAddr - network address
   1120           * @param   extAddr - extended address
   1121           *
   1122           * @return  none
   1123           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1124          void ZDO_UpdateAddrManager( uint16 nwkAddr, uint8 *extAddr )
   \                     ZDO_UpdateAddrManager:
   1125          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 13
   \   000004   74F3         MOV     A,#-0xd
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   1126            AddrMgrEntry_t addrEntry;
   1127          
   1128            // Update the address manager
   1129            addrEntry.user = ADDRMGR_USER_DEFAULT;
   \   000009   85..82       MOV     DPL,?XSP + 0
   \   00000C   85..83       MOV     DPH,?XSP + 1
   \   00000F   7400         MOV     A,#0x0
   \   000011   F0           MOVX    @DPTR,A
   1130            addrEntry.nwkAddr = nwkAddr;
   \   000012   7401         MOV     A,#0x1
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   EA           MOV     A,R2
   \   000018   F0           MOVX    @DPTR,A
   \   000019   A3           INC     DPTR
   \   00001A   EB           MOV     A,R3
   \   00001B   F0           MOVX    @DPTR,A
   1131            AddrMgrExtAddrSet( addrEntry.extAddr, extAddr );
   \   00001C                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   00001C   7403         MOV     A,#0x3
   \   00001E   12....       LCALL   ?XSTACK_DISP0_8
   \   000021   AA82         MOV     R2,DPL
   \   000023   AB83         MOV     R3,DPH
   \   000025   12....       LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   1132            AddrMgrEntryUpdate( &addrEntry );
   \   000028                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000028   AA..         MOV     R2,?XSP + 0
   \   00002A   AB..         MOV     R3,?XSP + 1
   \   00002C   12....       LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   \   00002F   E9           MOV     A,R1
   1133          }
   \   000030   740D         MOV     A,#0xd
   \   000032   12....       LCALL   ?DEALLOC_XSTACK8
   \   000035   D083         POP     DPH
   \   000037   D082         POP     DPL
   \   000039   02....       LJMP    ?BRET
   1134          
   1135          /*********************************************************************
   1136           * @fn      ZDO_ProcessServerDiscReq
   1137           *
   1138           * @brief   Process the Server_Discovery_req message.
   1139           *
   1140           * @param   inMsg  - incoming message (request)
   1141           *
   1142           * @return  none
   1143           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1144          void ZDO_ProcessServerDiscReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessServerDiscReq:
   1145          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   1146            uint16 serverMask = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \   000009   EE           MOV     A,R6
   \   00000A   2413         ADD     A,#0x13
   \   00000C   F582         MOV     DPL,A
   \   00000E   E4           CLR     A
   \   00000F   3F           ADDC    A,R7
   \   000010   F583         MOV     DPH,A
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F8           MOV     R0,A
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F583         MOV     DPH,A
   \   000018   8882         MOV     DPL,R0
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   FA           MOV     R2,A
   \   00001C   7B00         MOV     R3,#0x0
   \   00001E   EE           MOV     A,R6
   \   00001F   2413         ADD     A,#0x13
   \   000021   F582         MOV     DPL,A
   \   000023   E4           CLR     A
   \   000024   3F           ADDC    A,R7
   \   000025   F583         MOV     DPH,A
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F8           MOV     R0,A
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F583         MOV     DPH,A
   \   00002D   8882         MOV     DPL,R0
   \   00002F   A3           INC     DPTR
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F8           MOV     R0,A
   \   000032   7900         MOV     R1,#0x0
   \   000034   E4           CLR     A
   \   000035   C8           XCH     A,R0
   \   000036   F9           MOV     R1,A
   \   000037   EA           MOV     A,R2
   \   000038   28           ADD     A,R0
   \   000039   F8           MOV     R0,A
   \   00003A   EB           MOV     A,R3
   \   00003B   39           ADDC    A,R1
   \   00003C   F9           MOV     R1,A
   1147            uint16 matchMask = serverMask & ZDO_Config_Node_Descriptor.ServerMask;
   \   00003D   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 8
   \   000040   E0           MOVX    A,@DPTR
   \   000041   58           ANL     A,R0
   \   000042   F5..         MOV     ?V0,A
   \   000044   A3           INC     DPTR
   \   000045   E0           MOVX    A,@DPTR
   \   000046   59           ANL     A,R1
   \   000047   F5..         MOV     ?V1,A
   1148          
   1149            if ( matchMask )
   \   000049   E5..         MOV     A,?V0
   \   00004B   45..         ORL     A,?V1
   \   00004D   6033         JZ      ??ZDO_ProcessServerDiscReq_0
   1150            {
   1151              ZDP_ServerDiscRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSUCCESS,
   1152                          ZDAppNwkAddr.addr.shortAddr, matchMask, inMsg->SecurityUse );
   \   00004F                ; Setup parameters for call to function ZDP_ServerDiscRsp
   \   00004F   78..         MOV     R0,#?V0
   \   000051   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000054   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000057   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00005A   EE           MOV     A,R6
   \   00005B   240E         ADD     A,#0xe
   \   00005D   F582         MOV     DPL,A
   \   00005F   E4           CLR     A
   \   000060   3F           ADDC    A,R7
   \   000061   F583         MOV     DPH,A
   \   000063   E0           MOVX    A,@DPTR
   \   000064   FD           MOV     R5,A
   \   000065   7C00         MOV     R4,#0x0
   \   000067   EE           MOV     A,R6
   \   000068   2402         ADD     A,#0x2
   \   00006A   FA           MOV     R2,A
   \   00006B   E4           CLR     A
   \   00006C   3F           ADDC    A,R7
   \   00006D   FB           MOV     R3,A
   \   00006E   EE           MOV     A,R6
   \   00006F   240F         ADD     A,#0xf
   \   000071   F582         MOV     DPL,A
   \   000073   E4           CLR     A
   \   000074   3F           ADDC    A,R7
   \   000075   F583         MOV     DPH,A
   \   000077   E0           MOVX    A,@DPTR
   \   000078   F9           MOV     R1,A
   \   000079   12....       LCALL   `??ZDP_ServerDiscRsp::?relay`; Banked call to: ZDP_ServerDiscRsp
   \   00007C   7404         MOV     A,#0x4
   \   00007E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000081   E9           MOV     A,R1
   1153            }
   1154          }
   \                     ??ZDO_ProcessServerDiscReq_0:
   \   000082   7F02         MOV     R7,#0x2
   \   000084   02....       LJMP    ?BANKED_LEAVE_XDATA
   1155          
   1156          #if defined ( ZIGBEE_CHILD_AGING )
   1157          /*********************************************************************
   1158           * @fn          ZDO_ProcessEndDeviceTimeoutReq
   1159           *
   1160           * @brief       This function processes and responds to the
   1161           *              End_Device_Timeout_Req message.
   1162           *
   1163           * @param       inMsg  - incoming message (request)
   1164           *
   1165           * @return      none
   1166           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1167          void ZDO_ProcessEndDeviceTimeoutReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessEndDeviceTimeoutReq:
   1168          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1169            uint8 stat = ZDP_SUCCESS;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   7400         MOV     A,#0x0
   \   000016   F0           MOVX    @DPTR,A
   1170            uint8 *ieee = NULL;
   \   000017   7A00         MOV     R2,#0x0
   \   000019   7B00         MOV     R3,#0x0
   1171            uint16 reqTimeout;
   1172          
   1173            // Only process this message if Child Table Management is enabled OR
   1174            // If message was broadcast OR multicast OR
   1175            // if the NWK src and the MAC src are not the same) drop message
   1176            if ( ( zgChildAgingEnable == FALSE ) ||
   1177                 ( inMsg->wasBroadcast == TRUE ) ||
   1178                 ( inMsg->srcAddr.addr.shortAddr != inMsg->macSrcAddr ) )
   \   00001B   90....       MOV     DPTR,#zgChildAgingEnable
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   602B         JZ      ??ZDO_ProcessEndDeviceTimeoutReq_0
   \   000021   EE           MOV     A,R6
   \   000022   240B         ADD     A,#0xb
   \   000024   F582         MOV     DPL,A
   \   000026   E4           CLR     A
   \   000027   3F           ADDC    A,R7
   \   000028   F583         MOV     DPH,A
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   6401         XRL     A,#0x1
   \   00002D   601D         JZ      ??ZDO_ProcessEndDeviceTimeoutReq_0
   \   00002F   8E82         MOV     DPL,R6
   \   000031   8F83         MOV     DPH,R7
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   E0           MOVX    A,@DPTR
   \   000036   F8           MOV     R0,A
   \   000037   A3           INC     DPTR
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F9           MOV     R1,A
   \   00003A   EE           MOV     A,R6
   \   00003B   2415         ADD     A,#0x15
   \   00003D   F582         MOV     DPL,A
   \   00003F   E4           CLR     A
   \   000040   3F           ADDC    A,R7
   \   000041   F583         MOV     DPH,A
   \   000043   E0           MOVX    A,@DPTR
   \   000044   68           XRL     A,R0
   \   000045   7003         JNZ     ??ZDO_ProcessEndDeviceTimeoutReq_1
   \   000047   A3           INC     DPTR
   \   000048   E0           MOVX    A,@DPTR
   \   000049   69           XRL     A,R1
   \                     ??ZDO_ProcessEndDeviceTimeoutReq_1:
   \   00004A   6003         JZ      ??ZDO_ProcessEndDeviceTimeoutReq_2
   1179            {
   1180              // the message does not come from a child, drop it
   1181              return;
   \                     ??ZDO_ProcessEndDeviceTimeoutReq_0:
   \   00004C   02....       LJMP    ??ZDO_ProcessEndDeviceTimeoutReq_3 & 0xFFFF
   1182            }
   1183          
   1184            ieee = inMsg->asdu;
   \                     ??ZDO_ProcessEndDeviceTimeoutReq_2:
   \   00004F   EE           MOV     A,R6
   \   000050   2413         ADD     A,#0x13
   \   000052   F582         MOV     DPL,A
   \   000054   E4           CLR     A
   \   000055   3F           ADDC    A,R7
   \   000056   F583         MOV     DPH,A
   \   000058   E0           MOVX    A,@DPTR
   \   000059   FA           MOV     R2,A
   \   00005A   A3           INC     DPTR
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   FB           MOV     R3,A
   1185          
   1186            reqTimeout = BUILD_UINT16( inMsg->asdu[Z_EXTADDR_LEN], inMsg->asdu[Z_EXTADDR_LEN+1] );
   \   00005D   EE           MOV     A,R6
   \   00005E   2413         ADD     A,#0x13
   \   000060   F582         MOV     DPL,A
   \   000062   E4           CLR     A
   \   000063   3F           ADDC    A,R7
   \   000064   F583         MOV     DPH,A
   \   000066   E0           MOVX    A,@DPTR
   \   000067   F8           MOV     R0,A
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   C8           XCH     A,R0
   \   00006B   2408         ADD     A,#0x8
   \   00006D   F582         MOV     DPL,A
   \   00006F   C8           XCH     A,R0
   \   000070   3400         ADDC    A,#0x0
   \   000072   F583         MOV     DPH,A
   \   000074   E0           MOVX    A,@DPTR
   \   000075   FC           MOV     R4,A
   \   000076   7D00         MOV     R5,#0x0
   \   000078   EE           MOV     A,R6
   \   000079   2413         ADD     A,#0x13
   \   00007B   F582         MOV     DPL,A
   \   00007D   E4           CLR     A
   \   00007E   3F           ADDC    A,R7
   \   00007F   F583         MOV     DPH,A
   \   000081   E0           MOVX    A,@DPTR
   \   000082   F8           MOV     R0,A
   \   000083   A3           INC     DPTR
   \   000084   E0           MOVX    A,@DPTR
   \   000085   C8           XCH     A,R0
   \   000086   2409         ADD     A,#0x9
   \   000088   F582         MOV     DPL,A
   \   00008A   C8           XCH     A,R0
   \   00008B   3400         ADDC    A,#0x0
   \   00008D   F583         MOV     DPH,A
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   F8           MOV     R0,A
   \   000091   7900         MOV     R1,#0x0
   \   000093   E4           CLR     A
   \   000094   C8           XCH     A,R0
   \   000095   F9           MOV     R1,A
   \   000096   EC           MOV     A,R4
   \   000097   28           ADD     A,R0
   \   000098   F5..         MOV     ?V0,A
   \   00009A   ED           MOV     A,R5
   \   00009B   39           ADDC    A,R1
   \   00009C   F5..         MOV     ?V1,A
   1187          
   1188            if ( ( ( reqTimeout < ZDO_MIN_REQ_TIMEOUT ) || ( reqTimeout > ZDO_MAX_REQ_TIMEOUT ) ) ||
   1189                 ( ZSTACK_END_DEVICE_BUILD ) )
   \   00009E   E5..         MOV     A,?V0
   \   0000A0   45..         ORL     A,?V1
   \   0000A2   6013         JZ      ??ZDO_ProcessEndDeviceTimeoutReq_4
   \   0000A4   C3           CLR     C
   \   0000A5   E5..         MOV     A,?V0
   \   0000A7   9471         SUBB    A,#0x71
   \   0000A9   E5..         MOV     A,?V1
   \   0000AB   9408         SUBB    A,#0x8
   \   0000AD   5008         JNC     ??ZDO_ProcessEndDeviceTimeoutReq_4
   \   0000AF   90....       MOV     DPTR,#zgDeviceLogicalType
   \   0000B2   E0           MOVX    A,@DPTR
   \   0000B3   6402         XRL     A,#0x2
   \   0000B5   700B         JNZ     ??ZDO_ProcessEndDeviceTimeoutReq_5
   1190            {
   1191              stat = ZDP_INVALID_REQTYPE;
   \                     ??ZDO_ProcessEndDeviceTimeoutReq_4:
   \   0000B7   85..82       MOV     DPL,?XSP + 0
   \   0000BA   85..83       MOV     DPH,?XSP + 1
   \   0000BD   7480         MOV     A,#-0x80
   \   0000BF   F0           MOVX    @DPTR,A
   \   0000C0   805A         SJMP    ??ZDO_ProcessEndDeviceTimeoutReq_6
   1192            }
   1193            else
   1194            {
   1195              associated_devices_t *pAssoc;
   1196          
   1197              if ( ( ( pAssoc = AssocGetWithExt( ieee ) ) != NULL ) &&
   1198                   ( ( pAssoc->nodeRelation >= CHILD_RFD ) &&
   1199                     ( pAssoc->nodeRelation <= CHILD_RFD_RX_IDLE ) ) )
   \                     ??ZDO_ProcessEndDeviceTimeoutReq_5:
   \   0000C2                ; Setup parameters for call to function AssocGetWithExt
   \   0000C2   12....       LCALL   `??AssocGetWithExt::?relay`; Banked call to: AssocGetWithExt
   \   0000C5   8A..         MOV     ?V2,R2
   \   0000C7   8B..         MOV     ?V3,R3
   \   0000C9   AA..         MOV     R2,?V2
   \   0000CB   AB..         MOV     R3,?V3
   \   0000CD   EA           MOV     A,R2
   \   0000CE   F8           MOV     R0,A
   \   0000CF   EB           MOV     A,R3
   \   0000D0   F9           MOV     R1,A
   \   0000D1   EA           MOV     A,R2
   \   0000D2   4B           ORL     A,R3
   \   0000D3   603E         JZ      ??ZDO_ProcessEndDeviceTimeoutReq_7
   \   0000D5   8882         MOV     DPL,R0
   \   0000D7   8983         MOV     DPH,R1
   \   0000D9   A3           INC     DPTR
   \   0000DA   A3           INC     DPTR
   \   0000DB   A3           INC     DPTR
   \   0000DC   A3           INC     DPTR
   \   0000DD   E0           MOVX    A,@DPTR
   \   0000DE   6033         JZ      ??ZDO_ProcessEndDeviceTimeoutReq_7
   \   0000E0   8882         MOV     DPL,R0
   \   0000E2   8983         MOV     DPH,R1
   \   0000E4   A3           INC     DPTR
   \   0000E5   A3           INC     DPTR
   \   0000E6   A3           INC     DPTR
   \   0000E7   A3           INC     DPTR
   \   0000E8   E0           MOVX    A,@DPTR
   \   0000E9   C3           CLR     C
   \   0000EA   9403         SUBB    A,#0x3
   \   0000EC   5025         JNC     ??ZDO_ProcessEndDeviceTimeoutReq_7
   1200              {
   1201                pAssoc->timeoutCounter = reqTimeout;
   \   0000EE   E8           MOV     A,R0
   \   0000EF   2412         ADD     A,#0x12
   \   0000F1   F582         MOV     DPL,A
   \   0000F3   E4           CLR     A
   \   0000F4   39           ADDC    A,R1
   \   0000F5   F583         MOV     DPH,A
   \   0000F7   E5..         MOV     A,?V0
   \   0000F9   F0           MOVX    @DPTR,A
   \   0000FA   A3           INC     DPTR
   \   0000FB   E5..         MOV     A,?V1
   \   0000FD   F0           MOVX    @DPTR,A
   1202                pAssoc->endDevKaTimeout = reqTimeout;
   \   0000FE   E8           MOV     A,R0
   \   0000FF   2414         ADD     A,#0x14
   \   000101   F582         MOV     DPL,A
   \   000103   E4           CLR     A
   \   000104   39           ADDC    A,R1
   \   000105   F583         MOV     DPH,A
   \   000107   E5..         MOV     A,?V0
   \   000109   F0           MOVX    @DPTR,A
   \   00010A   A3           INC     DPTR
   \   00010B   E5..         MOV     A,?V1
   \   00010D   F0           MOVX    @DPTR,A
   1203          
   1204                // Set event to save NV
   1205                ZDApp_NVUpdate();
   \   00010E                ; Setup parameters for call to function ZDApp_NVUpdate
   \   00010E   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   \   000111   8009         SJMP    ??ZDO_ProcessEndDeviceTimeoutReq_6
   1206              }
   1207              else
   1208              {
   1209                stat = ZDP_DEVICE_NOT_FOUND;
   \                     ??ZDO_ProcessEndDeviceTimeoutReq_7:
   \   000113   85..82       MOV     DPL,?XSP + 0
   \   000116   85..83       MOV     DPH,?XSP + 1
   \   000119   7481         MOV     A,#-0x7f
   \   00011B   F0           MOVX    @DPTR,A
   1210              }
   1211          
   1212            }
   1213          
   1214            ZDP_EndDeviceTimeoutRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat,
   1215                                     inMsg->SecurityUse );
   \                     ??ZDO_ProcessEndDeviceTimeoutReq_6:
   \   00011C                ; Setup parameters for call to function ZDP_SendData
   \   00011C   EE           MOV     A,R6
   \   00011D   240E         ADD     A,#0xe
   \   00011F   F582         MOV     DPL,A
   \   000121   E4           CLR     A
   \   000122   3F           ADDC    A,R7
   \   000123   F583         MOV     DPH,A
   \   000125   E0           MOVX    A,@DPTR
   \   000126   F5..         MOV     ?V0,A
   \   000128   78..         MOV     R0,#?V0
   \   00012A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00012D   7401         MOV     A,#0x1
   \   00012F   12....       LCALL   ?XSTACK_DISP100_8
   \   000132   88..         MOV     ?V0,R0
   \   000134   89..         MOV     ?V1,R1
   \   000136   78..         MOV     R0,#?V0
   \   000138   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00013B   75..1F       MOV     ?V0,#0x1f
   \   00013E   75..80       MOV     ?V1,#-0x80
   \   000141   78..         MOV     R0,#?V0
   \   000143   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000146   7901         MOV     R1,#0x1
   \   000148   EE           MOV     A,R6
   \   000149   2402         ADD     A,#0x2
   \   00014B   FC           MOV     R4,A
   \   00014C   E4           CLR     A
   \   00014D   3F           ADDC    A,R7
   \   00014E   FD           MOV     R5,A
   \   00014F   EE           MOV     A,R6
   \   000150   240F         ADD     A,#0xf
   \   000152   FA           MOV     R2,A
   \   000153   E4           CLR     A
   \   000154   3F           ADDC    A,R7
   \   000155   FB           MOV     R3,A
   \   000156   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   000159   7405         MOV     A,#0x5
   \   00015B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00015E   E9           MOV     A,R1
   1216          }
   \                     ??ZDO_ProcessEndDeviceTimeoutReq_3:
   \   00015F   7401         MOV     A,#0x1
   \   000161   12....       LCALL   ?DEALLOC_XSTACK8
   \   000164   7F04         MOV     R7,#0x4
   \   000166   02....       LJMP    ?BANKED_LEAVE_XDATA
   1217          #endif // ZIGBEE_CHILD_AGING
   1218          
   1219          /*********************************************************************
   1220           * Call Back Functions from APS  - API
   1221           */
   1222          
   1223          /*********************************************************************
   1224           * @fn          ZDO_EndDeviceTimeoutCB
   1225           *
   1226           * @brief       This function handles the binding timer for the End
   1227           *              Device Bind command.
   1228           *
   1229           * @param       none
   1230           *
   1231           * @return      none
   1232           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1233          void ZDO_EndDeviceTimeoutCB( void )
   \                     ZDO_EndDeviceTimeoutCB:
   1234          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1235          #if defined ( REFLECTOR )
   1236            byte stat;
   1237            if ( ZDO_EDBind )
   \   000004   90....       MOV     DPTR,#ZDO_EDBind
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F8           MOV     R0,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F9           MOV     R1,A
   \   00000C   E8           MOV     A,R0
   \   00000D   49           ORL     A,R1
   \   00000E   6045         JZ      ??ZDO_EndDeviceTimeoutCB_0
   1238            {
   1239              stat = ZDO_EDBind->status;
   \   000010   90....       MOV     DPTR,#ZDO_EDBind
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F8           MOV     R0,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   C8           XCH     A,R0
   \   000018   2416         ADD     A,#0x16
   \   00001A   F582         MOV     DPL,A
   \   00001C   C8           XCH     A,R0
   \   00001D   3400         ADDC    A,#0x0
   \   00001F   F583         MOV     DPH,A
   \   000021   E0           MOVX    A,@DPTR
   \   000022   FC           MOV     R4,A
   1240          
   1241              // Send the response message to the first sent
   1242              ZDO_SendEDBindRsp( ZDO_EDBind->SrcTransSeq, &(ZDO_EDBind->SrcAddr),
   1243                                  stat, ZDO_EDBind->SecurityUse );
   \   000023                ; Setup parameters for call to function ZDO_SendEDBindRsp
   \   000023   90....       MOV     DPTR,#ZDO_EDBind
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F8           MOV     R0,A
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   C8           XCH     A,R0
   \   00002B   2415         ADD     A,#0x15
   \   00002D   F582         MOV     DPL,A
   \   00002F   C8           XCH     A,R0
   \   000030   3400         ADDC    A,#0x0
   \   000032   F583         MOV     DPH,A
   \   000034   E0           MOVX    A,@DPTR
   \   000035   FD           MOV     R5,A
   \   000036   90....       MOV     DPTR,#ZDO_EDBind
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   2401         ADD     A,#0x1
   \   00003C   FA           MOV     R2,A
   \   00003D   A3           INC     DPTR
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   3400         ADDC    A,#0x0
   \   000041   FB           MOV     R3,A
   \   000042   90....       MOV     DPTR,#ZDO_EDBind
   \   000045   E0           MOVX    A,@DPTR
   \   000046   F8           MOV     R0,A
   \   000047   A3           INC     DPTR
   \   000048   E0           MOVX    A,@DPTR
   \   000049   F583         MOV     DPH,A
   \   00004B   8882         MOV     DPL,R0
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   F9           MOV     R1,A
   \   00004F   12....       LCALL   `??ZDO_SendEDBindRsp::?relay`; Banked call to: ZDO_SendEDBindRsp
   1244          
   1245              ZDO_RemoveEndDeviceBind();
   \   000052                ; Setup parameters for call to function ZDO_RemoveEndDeviceBind
   \   000052   12....       LCALL   `??ZDO_RemoveEndDeviceBind::?relay`; Banked call to: ZDO_RemoveEndDeviceBind
   1246            }
   1247          #endif  // REFLECTOR
   1248          }
   \                     ??ZDO_EndDeviceTimeoutCB_0:
   \   000055   D083         POP     DPH
   \   000057   D082         POP     DPL
   \   000059   02....       LJMP    ?BRET
   1249          
   1250          /*********************************************************************
   1251           * Optional Management Messages
   1252           */
   1253          
   1254          /*********************************************************************
   1255           * @fn          ZDO_ProcessMgmtLqiReq
   1256           *
   1257           * @brief       This function handles parsing the incoming Management
   1258           *              LQI request and generate the response.
   1259           *
   1260           *   Note:      This function will limit the number of items returned
   1261           *              to ZDO_MAX_LQI_ITEMS items.
   1262           *
   1263           * @param       inMsg - incoming message (request)
   1264           *
   1265           * @return      none
   1266           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1267          void ZDO_ProcessMgmtLqiReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtLqiReq:
   1268          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 37
   \   000005   74DB         MOV     A,#-0x25
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V12,R2
   \   00000C   8B..         MOV     ?V13,R3
   1269            byte x;
   1270            byte index;
   1271            byte numItems;
   1272            byte maxItems;
   1273            ZDP_MgmtLqiItem_t* table = NULL;
   \   00000E   75..00       MOV     ?V10,#0x0
   \   000011   75..00       MOV     ?V11,#0x0
   1274            ZDP_MgmtLqiItem_t* item;
   1275            neighborEntry_t    entry;
   1276            byte aItems;
   1277            associated_devices_t *aDevice;
   1278            AddrMgrEntry_t  nwkEntry;
   1279            uint8 StartIndex = inMsg->asdu[0];
   \   000014   E5..         MOV     A,?V12
   \   000016   2413         ADD     A,#0x13
   \   000018   F582         MOV     DPL,A
   \   00001A   E4           CLR     A
   \   00001B   35..         ADDC    A,?V13
   \   00001D   F583         MOV     DPH,A
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F8           MOV     R0,A
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F583         MOV     DPH,A
   \   000025   8882         MOV     DPL,R0
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F5..         MOV     ?V5,A
   1280          
   1281            // Get the number of neighbor items
   1282            NLME_GetRequest( nwkNumNeighborTableEntries, 0, &maxItems );
   \   00002A                ; Setup parameters for call to function NLME_GetRequest
   \   00002A   AC..         MOV     R4,?XSP + 0
   \   00002C   AD..         MOV     R5,?XSP + 1
   \   00002E   7A00         MOV     R2,#0x0
   \   000030   7B00         MOV     R3,#0x0
   \   000032   799C         MOV     R1,#-0x64
   \   000034   12....       LCALL   `??NLME_GetRequest::?relay`; Banked call to: NLME_GetRequest
   \   000037   E9           MOV     A,R1
   1283          
   1284            // Get the number of associated items
   1285            aItems = (uint8)AssocCount( PARENT, CHILD_FFD_RX_IDLE );
   \   000038                ; Setup parameters for call to function AssocCount
   \   000038   7A04         MOV     R2,#0x4
   \   00003A   7900         MOV     R1,#0x0
   \   00003C   12....       LCALL   `??AssocCount::?relay`; Banked call to: AssocCount
   \   00003F   EA           MOV     A,R2
   \   000040   F5..         MOV     ?V4,A
   1286          
   1287            // Total number of items
   1288            maxItems += aItems;
   \   000042   85..82       MOV     DPL,?XSP + 0
   \   000045   85..83       MOV     DPH,?XSP + 1
   \   000048   E0           MOVX    A,@DPTR
   \   000049   25..         ADD     A,?V4
   \   00004B   F0           MOVX    @DPTR,A
   1289          
   1290            // Start with the supplied index
   1291            if ( maxItems > StartIndex )
   \   00004C   85..82       MOV     DPL,?XSP + 0
   \   00004F   85..83       MOV     DPH,?XSP + 1
   \   000052   E0           MOVX    A,@DPTR
   \   000053   F8           MOV     R0,A
   \   000054   E5..         MOV     A,?V5
   \   000056   C3           CLR     C
   \   000057   98           SUBB    A,R0
   \   000058   4003         JC      $+5
   \   00005A   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_0 & 0xFFFF
   1292            {
   1293              numItems = maxItems - StartIndex;
   \   00005D   85..82       MOV     DPL,?XSP + 0
   \   000060   85..83       MOV     DPH,?XSP + 1
   \   000063   E0           MOVX    A,@DPTR
   \   000064   C3           CLR     C
   \   000065   95..         SUBB    A,?V5
   \   000067   F5..         MOV     ?V1,A
   1294          
   1295              // limit the size of the list
   1296              if ( numItems > ZDO_MAX_LQI_ITEMS )
   \   000069   E5..         MOV     A,?V1
   \   00006B   C3           CLR     C
   \   00006C   9404         SUBB    A,#0x4
   \   00006E   4003         JC      ??ZDO_ProcessMgmtLqiReq_1
   1297                numItems = ZDO_MAX_LQI_ITEMS;
   \   000070   75..03       MOV     ?V1,#0x3
   1298          
   1299              // Allocate the memory to build the table
   1300              table = (ZDP_MgmtLqiItem_t*)osal_mem_alloc( (short)
   1301                        ( numItems * sizeof( ZDP_MgmtLqiItem_t ) ) );
   \                     ??ZDO_ProcessMgmtLqiReq_1:
   \   000073                ; Setup parameters for call to function osal_mem_alloc
   \   000073   AA..         MOV     R2,?V1
   \   000075   7B00         MOV     R3,#0x0
   \   000077   EA           MOV     A,R2
   \   000078   75F01A       MOV     B,#0x1a
   \   00007B   A4           MUL     AB
   \   00007C   CA           XCH     A,R2
   \   00007D   A8F0         MOV     R0,B
   \   00007F   75F000       MOV     B,#0x0
   \   000082   A4           MUL     AB
   \   000083   28           ADD     A,R0
   \   000084   F8           MOV     R0,A
   \   000085   75F01A       MOV     B,#0x1a
   \   000088   EB           MOV     A,R3
   \   000089   A4           MUL     AB
   \   00008A   28           ADD     A,R0
   \   00008B   FB           MOV     R3,A
   \   00008C   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00008F   8A..         MOV     ?V2,R2
   \   000091   8B..         MOV     ?V3,R3
   \   000093   85....       MOV     ?V10,?V2
   \   000096   85....       MOV     ?V11,?V3
   1302          
   1303              if ( table != NULL )
   \   000099   E5..         MOV     A,?V10
   \   00009B   45..         ORL     A,?V11
   \   00009D   7003         JNZ     $+5
   \   00009F   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_2 & 0xFFFF
   1304              {
   1305                x = 0;
   \   0000A2   75..00       MOV     ?V6,#0x0
   1306                item = table;
   \   0000A5   AE..         MOV     R6,?V10
   \   0000A7   AF..         MOV     R7,?V11
   1307                index = StartIndex;
   \   0000A9   85....       MOV     ?V0,?V5
   \   0000AC   8021         SJMP    ??ZDO_ProcessMgmtLqiReq_3
   1308          
   1309                // Loop through associated items and build list
   1310                for ( ; x < numItems; x++ )
   1311                {
   1312                  if ( index < aItems )
   1313                  {
   1314                    // get next associated device
   1315                    aDevice = AssocFindDevice( index++ );
   1316          
   1317                    // set basic fields
   1318                    item->panID   = _NIB.nwkPanId;
   1319                    osal_cpyExtAddr( item->extPanID, _NIB.extendedPANID );
   1320                    item->nwkAddr = aDevice->shortAddr;
   1321                    item->permit  = ZDP_MGMT_BOOL_UNKNOWN;
   1322                    item->depth   = 0xFF;
   1323                    item->lqi     = aDevice->linkInfo.rxLqi;
   1324          
   1325                    // set extented address
   1326                    nwkEntry.user    = ADDRMGR_USER_DEFAULT;
   1327                    nwkEntry.nwkAddr = aDevice->shortAddr;
   1328          
   1329                    if ( AddrMgrEntryLookupNwk( &nwkEntry ) == TRUE )
   1330                    {
   1331                      osal_cpyExtAddr( item->extAddr, nwkEntry.extAddr );
   1332                    }
   1333                    else
   1334                    {
   1335                      osal_memset( item->extAddr, 0xFF, Z_EXTADDR_LEN );
   1336                    }
   1337          
   1338                    // use association info to set other fields
   1339                    if ( aDevice->nodeRelation == PARENT )
   1340                    {
   1341                      if (  aDevice->shortAddr == 0 )
   1342                      {
   1343                        item->devType = ZDP_MGMT_DT_COORD;
   1344                        item->depth = 0;
   1345                      }
   1346                      else
   1347                      {
   1348                        item->devType = ZDP_MGMT_DT_ROUTER;
   1349                        item->depth = _NIB.nodeDepth - 1;
   1350                      }
   1351          
   1352                      item->rxOnIdle = ZDP_MGMT_BOOL_UNKNOWN;
   1353                      item->relation = ZDP_MGMT_REL_PARENT;
   1354                    }
   1355                    else
   1356                    {
   1357                      // If not parent, then it's a child
   1358                      item->depth = _NIB.nodeDepth + 1;
   1359          
   1360                      if ( aDevice->nodeRelation < CHILD_FFD )
   1361                      {
   1362                        item->devType = ZDP_MGMT_DT_ENDDEV;
   1363          
   1364                        if ( aDevice->nodeRelation == CHILD_RFD )
   1365                        {
   1366                          item->rxOnIdle = FALSE;
   1367                        }
   1368                        else
   1369                        {
   1370                          item->rxOnIdle = TRUE;
   1371                        }
   1372                      }
   1373                      else
   1374                      {
   1375                        item->devType = ZDP_MGMT_DT_ROUTER;
   1376          
   1377                        if ( aDevice->nodeRelation == CHILD_FFD )
   1378                        {
   1379                          item->rxOnIdle = FALSE;
   1380                        }
   1381                        else
   1382                        {
   1383                          item->rxOnIdle = TRUE;
   \                     ??ZDO_ProcessMgmtLqiReq_4:
   \   0000AE   EE           MOV     A,R6
   \   0000AF   2415         ADD     A,#0x15
   \   0000B1   F582         MOV     DPL,A
   \   0000B3   E4           CLR     A
   \   0000B4   3F           ADDC    A,R7
   \   0000B5   F583         MOV     DPH,A
   \   0000B7   7401         MOV     A,#0x1
   \   0000B9   F0           MOVX    @DPTR,A
   1384                        }
   1385                      }
   1386          
   1387                      item->relation = ZDP_MGMT_REL_CHILD;
   \                     ??ZDO_ProcessMgmtLqiReq_5:
   \   0000BA   EE           MOV     A,R6
   \   0000BB   2416         ADD     A,#0x16
   \   0000BD   F582         MOV     DPL,A
   \   0000BF   E4           CLR     A
   \   0000C0   3F           ADDC    A,R7
   \   0000C1   F583         MOV     DPH,A
   \   0000C3   7401         MOV     A,#0x1
   \   0000C5   F0           MOVX    @DPTR,A
   1388                    }
   1389          
   1390                    item++;
   \                     ??ZDO_ProcessMgmtLqiReq_6:
   \   0000C6   EE           MOV     A,R6
   \   0000C7   241A         ADD     A,#0x1a
   \   0000C9   FE           MOV     R6,A
   \   0000CA   5001         JNC     ??ZDO_ProcessMgmtLqiReq_7
   \   0000CC   0F           INC     R7
   \                     ??ZDO_ProcessMgmtLqiReq_7:
   \   0000CD   05..         INC     ?V6
   \                     ??ZDO_ProcessMgmtLqiReq_3:
   \   0000CF   E5..         MOV     A,?V6
   \   0000D1   C3           CLR     C
   \   0000D2   95..         SUBB    A,?V1
   \   0000D4   4003         JC      $+5
   \   0000D6   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_8 & 0xFFFF
   \   0000D9   E5..         MOV     A,?V0
   \   0000DB   C3           CLR     C
   \   0000DC   95..         SUBB    A,?V4
   \   0000DE   4003         JC      $+5
   \   0000E0   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_9 & 0xFFFF
   \   0000E3                ; Setup parameters for call to function AssocFindDevice
   \   0000E3   AA..         MOV     R2,?V0
   \   0000E5   7B00         MOV     R3,#0x0
   \   0000E7   12....       LCALL   `??AssocFindDevice::?relay`; Banked call to: AssocFindDevice
   \   0000EA   8A..         MOV     ?V8,R2
   \   0000EC   8B..         MOV     ?V9,R3
   \   0000EE   85....       MOV     ?V2,?V8
   \   0000F1   85....       MOV     ?V3,?V9
   \   0000F4   05..         INC     ?V0
   \   0000F6   90....       MOV     DPTR,#_NIB + 33
   \   0000F9   E0           MOVX    A,@DPTR
   \   0000FA   F8           MOV     R0,A
   \   0000FB   A3           INC     DPTR
   \   0000FC   E0           MOVX    A,@DPTR
   \   0000FD   F9           MOV     R1,A
   \   0000FE   8E82         MOV     DPL,R6
   \   000100   8F83         MOV     DPH,R7
   \   000102   E8           MOV     A,R0
   \   000103   F0           MOVX    @DPTR,A
   \   000104   A3           INC     DPTR
   \   000105   E9           MOV     A,R1
   \   000106   F0           MOVX    @DPTR,A
   \   000107                ; Setup parameters for call to function sAddrExtCpy
   \   000107   7C..         MOV     R4,#(_NIB + 53) & 0xff
   \   000109   7D..         MOV     R5,#((_NIB + 53) >> 8) & 0xff
   \   00010B   EE           MOV     A,R6
   \   00010C   2402         ADD     A,#0x2
   \   00010E   FA           MOV     R2,A
   \   00010F   E4           CLR     A
   \   000110   3F           ADDC    A,R7
   \   000111   FB           MOV     R3,A
   \   000112   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000115   85..82       MOV     DPL,?V2
   \   000118   85..83       MOV     DPH,?V3
   \   00011B   E0           MOVX    A,@DPTR
   \   00011C   F8           MOV     R0,A
   \   00011D   A3           INC     DPTR
   \   00011E   E0           MOVX    A,@DPTR
   \   00011F   F9           MOV     R1,A
   \   000120   EE           MOV     A,R6
   \   000121   2412         ADD     A,#0x12
   \   000123   F582         MOV     DPL,A
   \   000125   E4           CLR     A
   \   000126   3F           ADDC    A,R7
   \   000127   F583         MOV     DPH,A
   \   000129   E8           MOV     A,R0
   \   00012A   F0           MOVX    @DPTR,A
   \   00012B   A3           INC     DPTR
   \   00012C   E9           MOV     A,R1
   \   00012D   F0           MOVX    @DPTR,A
   \   00012E   EE           MOV     A,R6
   \   00012F   2417         ADD     A,#0x17
   \   000131   F582         MOV     DPL,A
   \   000133   E4           CLR     A
   \   000134   3F           ADDC    A,R7
   \   000135   F583         MOV     DPH,A
   \   000137   7402         MOV     A,#0x2
   \   000139   F0           MOVX    @DPTR,A
   \   00013A   EE           MOV     A,R6
   \   00013B   2418         ADD     A,#0x18
   \   00013D   F582         MOV     DPL,A
   \   00013F   E4           CLR     A
   \   000140   3F           ADDC    A,R7
   \   000141   F583         MOV     DPH,A
   \   000143   74FF         MOV     A,#-0x1
   \   000145   F0           MOVX    @DPTR,A
   \   000146   85..82       MOV     DPL,?V2
   \   000149   85..83       MOV     DPH,?V3
   \   00014C   A3           INC     DPTR
   \   00014D   A3           INC     DPTR
   \   00014E   A3           INC     DPTR
   \   00014F   A3           INC     DPTR
   \   000150   A3           INC     DPTR
   \   000151   A3           INC     DPTR
   \   000152   A3           INC     DPTR
   \   000153   A3           INC     DPTR
   \   000154   A3           INC     DPTR
   \   000155   A3           INC     DPTR
   \   000156   E0           MOVX    A,@DPTR
   \   000157   C0E0         PUSH    A
   \   000159   EE           MOV     A,R6
   \   00015A   2419         ADD     A,#0x19
   \   00015C   F582         MOV     DPL,A
   \   00015E   E4           CLR     A
   \   00015F   3F           ADDC    A,R7
   \   000160   F583         MOV     DPH,A
   \   000162   D0E0         POP     A
   \   000164   F0           MOVX    @DPTR,A
   \   000165   7401         MOV     A,#0x1
   \   000167   12....       LCALL   ?XSTACK_DISP0_8
   \   00016A   7400         MOV     A,#0x0
   \   00016C   F0           MOVX    @DPTR,A
   \   00016D   85..82       MOV     DPL,?V2
   \   000170   85..83       MOV     DPH,?V3
   \   000173   E0           MOVX    A,@DPTR
   \   000174   F8           MOV     R0,A
   \   000175   A3           INC     DPTR
   \   000176   E0           MOVX    A,@DPTR
   \   000177   F9           MOV     R1,A
   \   000178   7402         MOV     A,#0x2
   \   00017A   12....       LCALL   ?XSTACK_DISP0_8
   \   00017D   E8           MOV     A,R0
   \   00017E   F0           MOVX    @DPTR,A
   \   00017F   A3           INC     DPTR
   \   000180   E9           MOV     A,R1
   \   000181   F0           MOVX    @DPTR,A
   \   000182                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   000182   7401         MOV     A,#0x1
   \   000184   12....       LCALL   ?XSTACK_DISP101_8
   \   000187   12....       LCALL   `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
   \   00018A   E9           MOV     A,R1
   \   00018B   6401         XRL     A,#0x1
   \   00018D   7015         JNZ     ??ZDO_ProcessMgmtLqiReq_10
   \   00018F                ; Setup parameters for call to function sAddrExtCpy
   \   00018F   7404         MOV     A,#0x4
   \   000191   12....       LCALL   ?XSTACK_DISP0_8
   \   000194   AC82         MOV     R4,DPL
   \   000196   AD83         MOV     R5,DPH
   \   000198   EE           MOV     A,R6
   \   000199   240A         ADD     A,#0xa
   \   00019B   FA           MOV     R2,A
   \   00019C   E4           CLR     A
   \   00019D   3F           ADDC    A,R7
   \   00019E   FB           MOV     R3,A
   \   00019F   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0001A2   8010         SJMP    ??ZDO_ProcessMgmtLqiReq_11
   \                     ??ZDO_ProcessMgmtLqiReq_10:
   \   0001A4                ; Setup parameters for call to function osal_memset
   \   0001A4   7C08         MOV     R4,#0x8
   \   0001A6   7D00         MOV     R5,#0x0
   \   0001A8   79FF         MOV     R1,#-0x1
   \   0001AA   EE           MOV     A,R6
   \   0001AB   240A         ADD     A,#0xa
   \   0001AD   FA           MOV     R2,A
   \   0001AE   E4           CLR     A
   \   0001AF   3F           ADDC    A,R7
   \   0001B0   FB           MOV     R3,A
   \   0001B1   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   \                     ??ZDO_ProcessMgmtLqiReq_11:
   \   0001B4   85..82       MOV     DPL,?V2
   \   0001B7   85..83       MOV     DPH,?V3
   \   0001BA   A3           INC     DPTR
   \   0001BB   A3           INC     DPTR
   \   0001BC   A3           INC     DPTR
   \   0001BD   A3           INC     DPTR
   \   0001BE   E0           MOVX    A,@DPTR
   \   0001BF   7064         JNZ     ??ZDO_ProcessMgmtLqiReq_12
   \   0001C1   85..82       MOV     DPL,?V2
   \   0001C4   85..83       MOV     DPH,?V3
   \   0001C7   E0           MOVX    A,@DPTR
   \   0001C8   F8           MOV     R0,A
   \   0001C9   A3           INC     DPTR
   \   0001CA   E0           MOVX    A,@DPTR
   \   0001CB   F9           MOV     R1,A
   \   0001CC   E8           MOV     A,R0
   \   0001CD   49           ORL     A,R1
   \   0001CE   701A         JNZ     ??ZDO_ProcessMgmtLqiReq_13
   \   0001D0   EE           MOV     A,R6
   \   0001D1   2414         ADD     A,#0x14
   \   0001D3   F582         MOV     DPL,A
   \   0001D5   E4           CLR     A
   \   0001D6   3F           ADDC    A,R7
   \   0001D7   F583         MOV     DPH,A
   \   0001D9   7400         MOV     A,#0x0
   \   0001DB   F0           MOVX    @DPTR,A
   \   0001DC   EE           MOV     A,R6
   \   0001DD   2418         ADD     A,#0x18
   \   0001DF   F582         MOV     DPL,A
   \   0001E1   E4           CLR     A
   \   0001E2   3F           ADDC    A,R7
   \   0001E3   F583         MOV     DPH,A
   \   0001E5   7400         MOV     A,#0x0
   \   0001E7   F0           MOVX    @DPTR,A
   \   0001E8   8020         SJMP    ??ZDO_ProcessMgmtLqiReq_14
   \                     ??ZDO_ProcessMgmtLqiReq_13:
   \   0001EA   EE           MOV     A,R6
   \   0001EB   2414         ADD     A,#0x14
   \   0001ED   F582         MOV     DPL,A
   \   0001EF   E4           CLR     A
   \   0001F0   3F           ADDC    A,R7
   \   0001F1   F583         MOV     DPH,A
   \   0001F3   7401         MOV     A,#0x1
   \   0001F5   F0           MOVX    @DPTR,A
   \   0001F6   90....       MOV     DPTR,#_NIB + 52
   \   0001F9   E0           MOVX    A,@DPTR
   \   0001FA   24FF         ADD     A,#-0x1
   \   0001FC   C0E0         PUSH    A
   \   0001FE   EE           MOV     A,R6
   \   0001FF   2418         ADD     A,#0x18
   \   000201   F582         MOV     DPL,A
   \   000203   E4           CLR     A
   \   000204   3F           ADDC    A,R7
   \   000205   F583         MOV     DPH,A
   \   000207   D0E0         POP     A
   \   000209   F0           MOVX    @DPTR,A
   \                     ??ZDO_ProcessMgmtLqiReq_14:
   \   00020A   EE           MOV     A,R6
   \   00020B   2415         ADD     A,#0x15
   \   00020D   F582         MOV     DPL,A
   \   00020F   E4           CLR     A
   \   000210   3F           ADDC    A,R7
   \   000211   F583         MOV     DPH,A
   \   000213   7402         MOV     A,#0x2
   \   000215   F0           MOVX    @DPTR,A
   \   000216   EE           MOV     A,R6
   \   000217   2416         ADD     A,#0x16
   \   000219   F582         MOV     DPL,A
   \   00021B   E4           CLR     A
   \   00021C   3F           ADDC    A,R7
   \   00021D   F583         MOV     DPH,A
   \   00021F   7400         MOV     A,#0x0
   \   000221   F0           MOVX    @DPTR,A
   \   000222   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_6 & 0xFFFF
   \                     ??ZDO_ProcessMgmtLqiReq_12:
   \   000225   90....       MOV     DPTR,#_NIB + 52
   \   000228   E0           MOVX    A,@DPTR
   \   000229   2401         ADD     A,#0x1
   \   00022B   C0E0         PUSH    A
   \   00022D   EE           MOV     A,R6
   \   00022E   2418         ADD     A,#0x18
   \   000230   F582         MOV     DPL,A
   \   000232   E4           CLR     A
   \   000233   3F           ADDC    A,R7
   \   000234   F583         MOV     DPH,A
   \   000236   D0E0         POP     A
   \   000238   F0           MOVX    @DPTR,A
   \   000239   85..82       MOV     DPL,?V2
   \   00023C   85..83       MOV     DPH,?V3
   \   00023F   A3           INC     DPTR
   \   000240   A3           INC     DPTR
   \   000241   A3           INC     DPTR
   \   000242   A3           INC     DPTR
   \   000243   E0           MOVX    A,@DPTR
   \   000244   C3           CLR     C
   \   000245   9403         SUBB    A,#0x3
   \   000247   5039         JNC     ??ZDO_ProcessMgmtLqiReq_15
   \   000249   EE           MOV     A,R6
   \   00024A   2414         ADD     A,#0x14
   \   00024C   F582         MOV     DPL,A
   \   00024E   E4           CLR     A
   \   00024F   3F           ADDC    A,R7
   \   000250   F583         MOV     DPH,A
   \   000252   7402         MOV     A,#0x2
   \   000254   F0           MOVX    @DPTR,A
   \   000255   85..82       MOV     DPL,?V2
   \   000258   85..83       MOV     DPH,?V3
   \   00025B   A3           INC     DPTR
   \   00025C   A3           INC     DPTR
   \   00025D   A3           INC     DPTR
   \   00025E   A3           INC     DPTR
   \   00025F   E0           MOVX    A,@DPTR
   \   000260   6401         XRL     A,#0x1
   \   000262   700F         JNZ     ??ZDO_ProcessMgmtLqiReq_16
   \   000264   EE           MOV     A,R6
   \   000265   2415         ADD     A,#0x15
   \   000267   F582         MOV     DPL,A
   \   000269   E4           CLR     A
   \   00026A   3F           ADDC    A,R7
   \   00026B   F583         MOV     DPH,A
   \   00026D   7400         MOV     A,#0x0
   \   00026F   F0           MOVX    @DPTR,A
   \   000270   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_5 & 0xFFFF
   \                     ??ZDO_ProcessMgmtLqiReq_16:
   \   000273   EE           MOV     A,R6
   \   000274   2415         ADD     A,#0x15
   \   000276   F582         MOV     DPL,A
   \   000278   E4           CLR     A
   \   000279   3F           ADDC    A,R7
   \   00027A   F583         MOV     DPH,A
   \   00027C   7401         MOV     A,#0x1
   \   00027E   F0           MOVX    @DPTR,A
   \   00027F   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_5 & 0xFFFF
   \                     ??ZDO_ProcessMgmtLqiReq_15:
   \   000282   EE           MOV     A,R6
   \   000283   2414         ADD     A,#0x14
   \   000285   F582         MOV     DPL,A
   \   000287   E4           CLR     A
   \   000288   3F           ADDC    A,R7
   \   000289   F583         MOV     DPH,A
   \   00028B   7401         MOV     A,#0x1
   \   00028D   F0           MOVX    @DPTR,A
   \   00028E   85..82       MOV     DPL,?V2
   \   000291   85..83       MOV     DPH,?V3
   \   000294   A3           INC     DPTR
   \   000295   A3           INC     DPTR
   \   000296   A3           INC     DPTR
   \   000297   A3           INC     DPTR
   \   000298   E0           MOVX    A,@DPTR
   \   000299   6403         XRL     A,#0x3
   \   00029B   6003         JZ      $+5
   \   00029D   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_4 & 0xFFFF
   \   0002A0   EE           MOV     A,R6
   \   0002A1   2415         ADD     A,#0x15
   \   0002A3   F582         MOV     DPL,A
   \   0002A5   E4           CLR     A
   \   0002A6   3F           ADDC    A,R7
   \   0002A7   F583         MOV     DPH,A
   \   0002A9   7400         MOV     A,#0x0
   \   0002AB   F0           MOVX    @DPTR,A
   \   0002AC   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_5 & 0xFFFF
   1391                  }
   1392                  else
   1393                  {
   1394                    if ( StartIndex <= aItems )
   \                     ??ZDO_ProcessMgmtLqiReq_9:
   \   0002AF   E5..         MOV     A,?V4
   \   0002B1   C3           CLR     C
   \   0002B2   95..         SUBB    A,?V5
   \   0002B4   4005         JC      ??ZDO_ProcessMgmtLqiReq_17
   1395                      // Start with 1st neighbor
   1396                      index = 0;
   \   0002B6   75..00       MOV     ?V0,#0x0
   \   0002B9   801E         SJMP    ??ZDO_ProcessMgmtLqiReq_8
   1397                    else
   1398                      // Start with >1st neighbor
   1399                      index = StartIndex - aItems;
   \                     ??ZDO_ProcessMgmtLqiReq_17:
   \   0002BB   E5..         MOV     A,?V5
   \   0002BD   C3           CLR     C
   \   0002BE   95..         SUBB    A,?V4
   \   0002C0   F5..         MOV     ?V0,A
   1400                    break;
   \   0002C2   8015         SJMP    ??ZDO_ProcessMgmtLqiReq_8
   1401                  }
   1402                }
   1403          
   1404                // Loop through neighbor items and finish list
   1405                for ( ; x < numItems; x++ )
   1406                {
   1407                  // Add next neighbor table item
   1408                  NLME_GetRequest( nwkNeighborTable, index++, &entry );
   1409          
   1410                  // set ZDP_MgmtLqiItem_t fields
   1411                  item->panID    = entry.panId;
   1412                  osal_cpyExtAddr( item->extPanID, _NIB.extendedPANID );
   1413                  osal_memset( item->extAddr, 0xFF, Z_EXTADDR_LEN );
   1414                  item->nwkAddr  = entry.neighborAddress;
   1415                  item->rxOnIdle = ZDP_MGMT_BOOL_UNKNOWN;
   1416                  item->relation = ZDP_MGMT_REL_UNKNOWN;
   1417                  item->permit   = ZDP_MGMT_BOOL_UNKNOWN;
   1418                  item->depth    = 0xFF;
   1419                  item->lqi      = entry.linkInfo.rxLqi;
   1420          
   1421                  if ( item->nwkAddr == 0 )
   1422                  {
   1423                    item->devType = ZDP_MGMT_DT_COORD;
   1424                  }
   1425                  else
   1426                  {
   1427                    item->devType = ZDP_MGMT_DT_ROUTER;
   \                     ??ZDO_ProcessMgmtLqiReq_18:
   \   0002C4   EE           MOV     A,R6
   \   0002C5   2414         ADD     A,#0x14
   \   0002C7   F582         MOV     DPL,A
   \   0002C9   E4           CLR     A
   \   0002CA   3F           ADDC    A,R7
   \   0002CB   F583         MOV     DPH,A
   \   0002CD   7401         MOV     A,#0x1
   \   0002CF   F0           MOVX    @DPTR,A
   1428                  }
   1429          
   1430                  item++;
   \                     ??ZDO_ProcessMgmtLqiReq_19:
   \   0002D0   EE           MOV     A,R6
   \   0002D1   241A         ADD     A,#0x1a
   \   0002D3   FE           MOV     R6,A
   \   0002D4   5001         JNC     ??ZDO_ProcessMgmtLqiReq_20
   \   0002D6   0F           INC     R7
   \                     ??ZDO_ProcessMgmtLqiReq_20:
   \   0002D7   05..         INC     ?V6
   \                     ??ZDO_ProcessMgmtLqiReq_8:
   \   0002D9   E5..         MOV     A,?V6
   \   0002DB   C3           CLR     C
   \   0002DC   95..         SUBB    A,?V1
   \   0002DE   4003         JC      $+5
   \   0002E0   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_2 & 0xFFFF
   \   0002E3                ; Setup parameters for call to function NLME_GetRequest
   \   0002E3   740E         MOV     A,#0xe
   \   0002E5   12....       LCALL   ?XSTACK_DISP102_8
   \   0002E8   AA..         MOV     R2,?V0
   \   0002EA   7B00         MOV     R3,#0x0
   \   0002EC   7987         MOV     R1,#-0x79
   \   0002EE   12....       LCALL   `??NLME_GetRequest::?relay`; Banked call to: NLME_GetRequest
   \   0002F1   E9           MOV     A,R1
   \   0002F2   05..         INC     ?V0
   \   0002F4   7418         MOV     A,#0x18
   \   0002F6   12....       LCALL   ?XSTACK_DISP0_8
   \   0002F9   E0           MOVX    A,@DPTR
   \   0002FA   F8           MOV     R0,A
   \   0002FB   A3           INC     DPTR
   \   0002FC   E0           MOVX    A,@DPTR
   \   0002FD   F9           MOV     R1,A
   \   0002FE   8E82         MOV     DPL,R6
   \   000300   8F83         MOV     DPH,R7
   \   000302   E8           MOV     A,R0
   \   000303   F0           MOVX    @DPTR,A
   \   000304   A3           INC     DPTR
   \   000305   E9           MOV     A,R1
   \   000306   F0           MOVX    @DPTR,A
   \   000307                ; Setup parameters for call to function sAddrExtCpy
   \   000307   7C..         MOV     R4,#(_NIB + 53) & 0xff
   \   000309   7D..         MOV     R5,#((_NIB + 53) >> 8) & 0xff
   \   00030B   EE           MOV     A,R6
   \   00030C   2402         ADD     A,#0x2
   \   00030E   FA           MOV     R2,A
   \   00030F   E4           CLR     A
   \   000310   3F           ADDC    A,R7
   \   000311   FB           MOV     R3,A
   \   000312   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000315                ; Setup parameters for call to function osal_memset
   \   000315   7C08         MOV     R4,#0x8
   \   000317   7D00         MOV     R5,#0x0
   \   000319   79FF         MOV     R1,#-0x1
   \   00031B   EE           MOV     A,R6
   \   00031C   240A         ADD     A,#0xa
   \   00031E   FA           MOV     R2,A
   \   00031F   E4           CLR     A
   \   000320   3F           ADDC    A,R7
   \   000321   FB           MOV     R3,A
   \   000322   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   \   000325   740E         MOV     A,#0xe
   \   000327   12....       LCALL   ?XSTACK_DISP0_8
   \   00032A   E0           MOVX    A,@DPTR
   \   00032B   F8           MOV     R0,A
   \   00032C   A3           INC     DPTR
   \   00032D   E0           MOVX    A,@DPTR
   \   00032E   F9           MOV     R1,A
   \   00032F   EE           MOV     A,R6
   \   000330   2412         ADD     A,#0x12
   \   000332   F582         MOV     DPL,A
   \   000334   E4           CLR     A
   \   000335   3F           ADDC    A,R7
   \   000336   F583         MOV     DPH,A
   \   000338   E8           MOV     A,R0
   \   000339   F0           MOVX    @DPTR,A
   \   00033A   A3           INC     DPTR
   \   00033B   E9           MOV     A,R1
   \   00033C   F0           MOVX    @DPTR,A
   \   00033D   EE           MOV     A,R6
   \   00033E   2415         ADD     A,#0x15
   \   000340   F582         MOV     DPL,A
   \   000342   E4           CLR     A
   \   000343   3F           ADDC    A,R7
   \   000344   F583         MOV     DPH,A
   \   000346   7402         MOV     A,#0x2
   \   000348   F0           MOVX    @DPTR,A
   \   000349   EE           MOV     A,R6
   \   00034A   2416         ADD     A,#0x16
   \   00034C   F582         MOV     DPL,A
   \   00034E   E4           CLR     A
   \   00034F   3F           ADDC    A,R7
   \   000350   F583         MOV     DPH,A
   \   000352   7403         MOV     A,#0x3
   \   000354   F0           MOVX    @DPTR,A
   \   000355   EE           MOV     A,R6
   \   000356   2417         ADD     A,#0x17
   \   000358   F582         MOV     DPL,A
   \   00035A   E4           CLR     A
   \   00035B   3F           ADDC    A,R7
   \   00035C   F583         MOV     DPH,A
   \   00035E   7402         MOV     A,#0x2
   \   000360   F0           MOVX    @DPTR,A
   \   000361   EE           MOV     A,R6
   \   000362   2418         ADD     A,#0x18
   \   000364   F582         MOV     DPL,A
   \   000366   E4           CLR     A
   \   000367   3F           ADDC    A,R7
   \   000368   F583         MOV     DPH,A
   \   00036A   74FF         MOV     A,#-0x1
   \   00036C   F0           MOVX    @DPTR,A
   \   00036D   741D         MOV     A,#0x1d
   \   00036F   12....       LCALL   ?XSTACK_DISP0_8
   \   000372   E0           MOVX    A,@DPTR
   \   000373   C0E0         PUSH    A
   \   000375   EE           MOV     A,R6
   \   000376   2419         ADD     A,#0x19
   \   000378   F582         MOV     DPL,A
   \   00037A   E4           CLR     A
   \   00037B   3F           ADDC    A,R7
   \   00037C   F583         MOV     DPH,A
   \   00037E   D0E0         POP     A
   \   000380   F0           MOVX    @DPTR,A
   \   000381   EE           MOV     A,R6
   \   000382   2412         ADD     A,#0x12
   \   000384   F582         MOV     DPL,A
   \   000386   E4           CLR     A
   \   000387   3F           ADDC    A,R7
   \   000388   F583         MOV     DPH,A
   \   00038A   E0           MOVX    A,@DPTR
   \   00038B   F8           MOV     R0,A
   \   00038C   A3           INC     DPTR
   \   00038D   E0           MOVX    A,@DPTR
   \   00038E   F9           MOV     R1,A
   \   00038F   E8           MOV     A,R0
   \   000390   49           ORL     A,R1
   \   000391   6003         JZ      $+5
   \   000393   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_18 & 0xFFFF
   \   000396   EE           MOV     A,R6
   \   000397   2414         ADD     A,#0x14
   \   000399   F582         MOV     DPL,A
   \   00039B   E4           CLR     A
   \   00039C   3F           ADDC    A,R7
   \   00039D   F583         MOV     DPH,A
   \   00039F   7400         MOV     A,#0x0
   \   0003A1   F0           MOVX    @DPTR,A
   \   0003A2   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_19 & 0xFFFF
   1431                }
   1432              }
   1433            }
   1434            else
   1435            {
   1436              numItems = 0;
   \                     ??ZDO_ProcessMgmtLqiReq_0:
   \   0003A5   75..00       MOV     ?V1,#0x0
   1437            }
   1438          
   1439            // Send response
   1440            ZDP_MgmtLqiRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSuccess, maxItems,
   1441                            StartIndex, numItems, table, false );
   \                     ??ZDO_ProcessMgmtLqiReq_2:
   \   0003A8                ; Setup parameters for call to function ZDP_MgmtLqiRsp
   \   0003A8   75..00       MOV     ?V2,#0x0
   \   0003AB   78..         MOV     R0,#?V2
   \   0003AD   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0003B0   78..         MOV     R0,#?V10
   \   0003B2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0003B5   E5..         MOV     A,?V1
   \   0003B7   F5..         MOV     ?V1,A
   \   0003B9   78..         MOV     R0,#?V1
   \   0003BB   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0003BE   E5..         MOV     A,?V5
   \   0003C0   F5..         MOV     ?V1,A
   \   0003C2   78..         MOV     R0,#?V1
   \   0003C4   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0003C7   7405         MOV     A,#0x5
   \   0003C9   12....       LCALL   ?XSTACK_DISP0_8
   \   0003CC   E0           MOVX    A,@DPTR
   \   0003CD   FD           MOV     R5,A
   \   0003CE   7C00         MOV     R4,#0x0
   \   0003D0   E5..         MOV     A,?V12
   \   0003D2   2402         ADD     A,#0x2
   \   0003D4   FA           MOV     R2,A
   \   0003D5   E4           CLR     A
   \   0003D6   35..         ADDC    A,?V13
   \   0003D8   FB           MOV     R3,A
   \   0003D9   E5..         MOV     A,?V12
   \   0003DB   240F         ADD     A,#0xf
   \   0003DD   F582         MOV     DPL,A
   \   0003DF   E4           CLR     A
   \   0003E0   35..         ADDC    A,?V13
   \   0003E2   F583         MOV     DPH,A
   \   0003E4   E0           MOVX    A,@DPTR
   \   0003E5   F9           MOV     R1,A
   \   0003E6   12....       LCALL   `??ZDP_MgmtLqiRsp::?relay`; Banked call to: ZDP_MgmtLqiRsp
   \   0003E9   7405         MOV     A,#0x5
   \   0003EB   12....       LCALL   ?DEALLOC_XSTACK8
   \   0003EE   E9           MOV     A,R1
   1442          
   1443            if ( table )
   \   0003EF   E5..         MOV     A,?V10
   \   0003F1   45..         ORL     A,?V11
   \   0003F3   6007         JZ      ??ZDO_ProcessMgmtLqiReq_21
   1444            {
   1445              osal_mem_free( table );
   \   0003F5                ; Setup parameters for call to function osal_mem_free
   \   0003F5   AA..         MOV     R2,?V10
   \   0003F7   AB..         MOV     R3,?V11
   \   0003F9   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1446            }
   1447          }
   \                     ??ZDO_ProcessMgmtLqiReq_21:
   \   0003FC   7425         MOV     A,#0x25
   \   0003FE   12....       LCALL   ?DEALLOC_XSTACK8
   \   000401   7F0E         MOV     R7,#0xe
   \   000403   02....       LJMP    ?BANKED_LEAVE_XDATA
   1448          
   1449          /*********************************************************************
   1450           * @fn          ZDO_ProcessMgmtNwkDiscReq
   1451           *
   1452           * @brief       This function handles parsing the incoming Management
   1453           *              Network Discover request and starts the request.
   1454           *
   1455           * @param       inMsg - incoming message (request)
   1456           *
   1457           * @return      none
   1458           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1459          void ZDO_ProcessMgmtNwkDiscReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtNwkDiscReq:
   1460          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV     A,#-0x7
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   1461            NLME_ScanFields_t scan;
   1462            uint8             index;
   1463            uint8             *msg;
   1464          
   1465            msg = inMsg->asdu;
   \   00000E   E5..         MOV     A,?V0
   \   000010   2413         ADD     A,#0x13
   \   000012   F582         MOV     DPL,A
   \   000014   E4           CLR     A
   \   000015   35..         ADDC    A,?V1
   \   000017   F583         MOV     DPH,A
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   FE           MOV     R6,A
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   FF           MOV     R7,A
   1466            scan.channels = osal_build_uint32( msg, 4 );
   \   00001E                ; Setup parameters for call to function osal_build_uint32
   \   00001E   7904         MOV     R1,#0x4
   \   000020   EE           MOV     A,R6
   \   000021   FA           MOV     R2,A
   \   000022   EF           MOV     A,R7
   \   000023   FB           MOV     R3,A
   \   000024   12....       LCALL   `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   000027   EA           MOV     A,R2
   \   000028   F8           MOV     R0,A
   \   000029   EB           MOV     A,R3
   \   00002A   F9           MOV     R1,A
   \   00002B   EC           MOV     A,R4
   \   00002C   FA           MOV     R2,A
   \   00002D   ED           MOV     A,R5
   \   00002E   FB           MOV     R3,A
   \   00002F   85..82       MOV     DPL,?XSP + 0
   \   000032   85..83       MOV     DPH,?XSP + 1
   \   000035   12....       LCALL   ?XSTORE_R0123
   1467            msg += 4;
   \   000038   EE           MOV     A,R6
   \   000039   2404         ADD     A,#0x4
   \   00003B   FE           MOV     R6,A
   \   00003C   5001         JNC     ??ZDO_ProcessMgmtNwkDiscReq_0
   \   00003E   0F           INC     R7
   1468            scan.duration = *msg++;
   \                     ??ZDO_ProcessMgmtNwkDiscReq_0:
   \   00003F   8E82         MOV     DPL,R6
   \   000041   8F83         MOV     DPH,R7
   \   000043   E0           MOVX    A,@DPTR
   \   000044   C0E0         PUSH    A
   \   000046   7404         MOV     A,#0x4
   \   000048   12....       LCALL   ?XSTACK_DISP0_8
   \   00004B   D0E0         POP     A
   \   00004D   F0           MOVX    @DPTR,A
   \   00004E   8E82         MOV     DPL,R6
   \   000050   8F83         MOV     DPH,R7
   \   000052   A3           INC     DPTR
   \   000053   AE82         MOV     R6,DPL
   \   000055   AF83         MOV     R7,DPH
   1469            index         = *msg;
   \   000057   8E82         MOV     DPL,R6
   \   000059   8F83         MOV     DPH,R7
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   F8           MOV     R0,A
   1470            scan.scanType = ZMAC_ACTIVE_SCAN;
   \   00005D   7405         MOV     A,#0x5
   \   00005F   12....       LCALL   ?XSTACK_DISP0_8
   \   000062   7401         MOV     A,#0x1
   \   000064   F0           MOVX    @DPTR,A
   1471            scan.scanApp  = NLME_DISC_SCAN;
   \   000065   7406         MOV     A,#0x6
   \   000067   12....       LCALL   ?XSTACK_DISP0_8
   \   00006A   7401         MOV     A,#0x1
   \   00006C   F0           MOVX    @DPTR,A
   1472          
   1473            // Save off the information to be used for the response
   1474            zdappMgmtNwkDiscReqInProgress          = true;
   \   00006D   90....       MOV     DPTR,#zdappMgmtNwkDiscReqInProgress
   \   000070   7401         MOV     A,#0x1
   \   000072   F0           MOVX    @DPTR,A
   1475            zdappMgmtNwkDiscRspAddr.addrMode       = Addr16Bit;
   \   000073   90....       MOV     DPTR,#zdappMgmtNwkDiscRspAddr + 8
   \   000076   7402         MOV     A,#0x2
   \   000078   F0           MOVX    @DPTR,A
   1476            zdappMgmtNwkDiscRspAddr.addr.shortAddr = inMsg->srcAddr.addr.shortAddr;
   \   000079   85..82       MOV     DPL,?V0
   \   00007C   85..83       MOV     DPH,?V1
   \   00007F   A3           INC     DPTR
   \   000080   A3           INC     DPTR
   \   000081   E0           MOVX    A,@DPTR
   \   000082   FA           MOV     R2,A
   \   000083   A3           INC     DPTR
   \   000084   E0           MOVX    A,@DPTR
   \   000085   FB           MOV     R3,A
   \   000086   90....       MOV     DPTR,#zdappMgmtNwkDiscRspAddr
   \   000089   EA           MOV     A,R2
   \   00008A   F0           MOVX    @DPTR,A
   \   00008B   A3           INC     DPTR
   \   00008C   EB           MOV     A,R3
   \   00008D   F0           MOVX    @DPTR,A
   1477            zdappMgmtNwkDiscStartIndex             = index;
   \   00008E   E8           MOV     A,R0
   \   00008F   90....       MOV     DPTR,#zdappMgmtNwkDiscStartIndex
   \   000092   F0           MOVX    @DPTR,A
   1478            zdappMgmtNwkDiscRspTransSeq            = inMsg->TransSeq;
   \   000093   E5..         MOV     A,?V0
   \   000095   240F         ADD     A,#0xf
   \   000097   F582         MOV     DPL,A
   \   000099   E4           CLR     A
   \   00009A   35..         ADDC    A,?V1
   \   00009C   F583         MOV     DPH,A
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   90....       MOV     DPTR,#zdappMgmtNwkDiscRspTransSeq
   \   0000A2   F0           MOVX    @DPTR,A
   1479          
   1480            if ( NLME_NwkDiscReq2( &scan ) != ZSuccess )
   \   0000A3                ; Setup parameters for call to function NLME_NwkDiscReq2
   \   0000A3   AA..         MOV     R2,?XSP + 0
   \   0000A5   AB..         MOV     R3,?XSP + 1
   \   0000A7   12....       LCALL   `??NLME_NwkDiscReq2::?relay`; Banked call to: NLME_NwkDiscReq2
   \   0000AA   E9           MOV     A,R1
   \   0000AB   6003         JZ      ??ZDO_ProcessMgmtNwkDiscReq_1
   1481            {
   1482              NLME_NwkDiscTerm();
   \   0000AD                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   0000AD   12....       LCALL   `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
   1483          
   1484              // zdappMgmtNwkDiscReqInProgress will be reset in the confirm callback
   1485            }
   1486          }
   \                     ??ZDO_ProcessMgmtNwkDiscReq_1:
   \   0000B0   7407         MOV     A,#0x7
   \   0000B2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B5   7F02         MOV     R7,#0x2
   \   0000B7   02....       LJMP    ?BANKED_LEAVE_XDATA
   1487          
   1488          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
   1489          /*********************************************************************
   1490           * @fn          ZDO_FinishProcessingMgmtNwkDiscReq
   1491           *
   1492           * @brief       This function finishes the processing of the Management
   1493           *              Network Discover Request and generates the response.
   1494           *
   1495           *   Note:      This function will limit the number of items returned
   1496           *              to ZDO_MAX_NWKDISC_ITEMS items.
   1497           *
   1498           * @param       ResultCountSrcAddr - source of the request
   1499           * @param       msg - pointer to incoming message
   1500           * @param       SecurityUse -
   1501           *
   1502           * @return      none
   1503           */
   1504          void ZDO_FinishProcessingMgmtNwkDiscReq( void )
   1505          {
   1506            byte count, i, ResultCount = 0;
   1507            networkDesc_t *newDesc = NULL, *pList, *NetworkList;
   1508          
   1509            NetworkList = nwk_getNwkDescList();
   1510          
   1511            // Count the number of nwk descriptors in the list
   1512            pList = nwk_getNwkDescList();
   1513            while (pList)
   1514            {
   1515              ResultCount++;
   1516              pList = pList->nextDesc;
   1517            }
   1518          
   1519            if ( ZSTACK_ROUTER_BUILD )
   1520            {
   1521              // Look for my PanID.
   1522              pList = nwk_getNwkDescList();
   1523              while ( pList )
   1524              {
   1525                if ( pList->panId == _NIB.nwkPanId )
   1526                {
   1527                  break;
   1528                }
   1529          
   1530          
   1531                if ( !pList->nextDesc )
   1532                {
   1533                  break;
   1534                }
   1535                pList = pList->nextDesc;
   1536              }
   1537          
   1538          
   1539              // If my Pan not present (query to a star network ZC or an isolated ZR?),
   1540              // prepend it.
   1541              if ( !pList || (pList->panId != _NIB.nwkPanId) )
   1542              {
   1543                newDesc = (networkDesc_t *)osal_mem_alloc( sizeof( networkDesc_t ) );
   1544                if ( newDesc )
   1545                {
   1546                  byte pJoin;
   1547          
   1548                  newDesc->panId = _NIB.nwkPanId;
   1549                  newDesc->logicalChannel = _NIB.nwkLogicalChannel;
   1550                  newDesc->version = NLME_GetProtocolVersion();
   1551                  newDesc->stackProfile = zgStackProfile;
   1552          
   1553                  //Extended PanID
   1554                  osal_cpyExtAddr( newDesc->extendedPANID, _NIB.extendedPANID);
   1555          
   1556                  ZMacGetReq( ZMacAssociationPermit, &pJoin );
   1557                  newDesc->chosenRouter = ((pJoin) ? ZDAppNwkAddr.addr.shortAddr :
   1558                                                     INVALID_NODE_ADDR);
   1559          
   1560                  newDesc->nextDesc = NetworkList;
   1561                  NetworkList = newDesc;
   1562                  ResultCount++;
   1563                }
   1564              }
   1565            }
   1566          
   1567            // Calc the count and apply a max count.
   1568            if ( zdappMgmtNwkDiscStartIndex > ResultCount )
   1569            {
   1570              count = 0;
   1571            }
   1572            else
   1573            {
   1574              count = ResultCount - zdappMgmtNwkDiscStartIndex;
   1575              if ( count > ZDO_MAX_NWKDISC_ITEMS )
   1576              {
   1577                count = ZDO_MAX_NWKDISC_ITEMS;
   1578              }
   1579          
   1580              // Move the list pointer up to the start index.
   1581              for ( i = 0; i < zdappMgmtNwkDiscStartIndex; i++ )
   1582              {
   1583                NetworkList = NetworkList->nextDesc;
   1584              }
   1585            }
   1586          
   1587            ZDP_MgmtNwkDiscRsp( zdappMgmtNwkDiscRspTransSeq,
   1588                               &zdappMgmtNwkDiscRspAddr, ZSuccess, ResultCount,
   1589                                zdappMgmtNwkDiscStartIndex,
   1590                                count,
   1591                                NetworkList,
   1592                                false );
   1593          
   1594            if ( ZSTACK_ROUTER_BUILD )
   1595            {
   1596              if ( newDesc != NULL )
   1597              {
   1598                osal_mem_free( newDesc );
   1599              }
   1600            }
   1601          
   1602            NLME_NwkDiscTerm();
   1603          }
   1604          #endif
   1605          
   1606          /*********************************************************************
   1607           * @fn          ZDO_ProcessMgmtRtgReq
   1608           *
   1609           * @brief       This function finishes the processing of the Management
   1610           *              Routing Request and generates the response.
   1611           *
   1612           *   Note:      This function will limit the number of items returned
   1613           *              to ZDO_MAX_RTG_ITEMS items.
   1614           *
   1615           * @param       inMsg - incoming message (request)
   1616           *
   1617           * @return      none
   1618           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1619          void ZDO_ProcessMgmtRtgReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtRtgReq:
   1620          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V2,R2
   \   00000C   8B..         MOV     ?V3,R3
   1621            byte x;
   1622            byte maxNumItems;
   1623            byte numItems = 0;
   \   00000E   7E00         MOV     R6,#0x0
   1624            uint8 *pBuf = NULL;
   \   000010   75..00       MOV     ?V6,#0x0
   \   000013   75..00       MOV     ?V7,#0x0
   1625            rtgItem_t *pList;
   1626            uint8 StartIndex = inMsg->asdu[0];
   \   000016   E5..         MOV     A,?V2
   \   000018   2413         ADD     A,#0x13
   \   00001A   F582         MOV     DPL,A
   \   00001C   E4           CLR     A
   \   00001D   35..         ADDC    A,?V3
   \   00001F   F583         MOV     DPH,A
   \   000021   E0           MOVX    A,@DPTR
   \   000022   F8           MOV     R0,A
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F583         MOV     DPH,A
   \   000027   8882         MOV     DPL,R0
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   FF           MOV     R7,A
   1627          
   1628            // Get the number of table items
   1629            NLME_GetRequest( nwkNumRoutingTableEntries, 0, &maxNumItems );
   \   00002B                ; Setup parameters for call to function NLME_GetRequest
   \   00002B   AC..         MOV     R4,?XSP + 0
   \   00002D   AD..         MOV     R5,?XSP + 1
   \   00002F   7A00         MOV     R2,#0x0
   \   000031   7B00         MOV     R3,#0x0
   \   000033   799D         MOV     R1,#-0x63
   \   000035   12....       LCALL   `??NLME_GetRequest::?relay`; Banked call to: NLME_GetRequest
   \   000038   E9           MOV     A,R1
   1630          
   1631            if ( maxNumItems > StartIndex )
   \   000039   85..82       MOV     DPL,?XSP + 0
   \   00003C   85..83       MOV     DPH,?XSP + 1
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   F8           MOV     R0,A
   \   000041   EF           MOV     A,R7
   \   000042   C3           CLR     C
   \   000043   98           SUBB    A,R0
   \   000044   4003         JC      $+5
   \   000046   02....       LJMP    ??ZDO_ProcessMgmtRtgReq_0 & 0xFFFF
   1632            {
   1633              numItems = maxNumItems - StartIndex;    // Start at the passed in index
   \   000049   85..82       MOV     DPL,?XSP + 0
   \   00004C   85..83       MOV     DPH,?XSP + 1
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   C3           CLR     C
   \   000051   9F           SUBB    A,R7
   \   000052   FE           MOV     R6,A
   1634          
   1635              // limit the size of the list
   1636              if ( numItems > ZDO_MAX_RTG_ITEMS )
   \   000053   EE           MOV     A,R6
   \   000054   C3           CLR     C
   \   000055   940B         SUBB    A,#0xb
   \   000057   4002         JC      ??ZDO_ProcessMgmtRtgReq_1
   1637              {
   1638                numItems = ZDO_MAX_RTG_ITEMS;
   \   000059   7E0A         MOV     R6,#0xa
   1639              }
   1640          
   1641              // Allocate the memory to build the table
   1642              pBuf = osal_mem_alloc( (short)(sizeof( rtgItem_t ) * numItems) );
   \                     ??ZDO_ProcessMgmtRtgReq_1:
   \   00005B                ; Setup parameters for call to function osal_mem_alloc
   \   00005B   EE           MOV     A,R6
   \   00005C   FA           MOV     R2,A
   \   00005D   7B00         MOV     R3,#0x0
   \   00005F   EA           MOV     A,R2
   \   000060   75F007       MOV     B,#0x7
   \   000063   A4           MUL     AB
   \   000064   CA           XCH     A,R2
   \   000065   A8F0         MOV     R0,B
   \   000067   75F000       MOV     B,#0x0
   \   00006A   A4           MUL     AB
   \   00006B   28           ADD     A,R0
   \   00006C   F8           MOV     R0,A
   \   00006D   75F007       MOV     B,#0x7
   \   000070   EB           MOV     A,R3
   \   000071   A4           MUL     AB
   \   000072   28           ADD     A,R0
   \   000073   FB           MOV     R3,A
   \   000074   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000077   8A..         MOV     ?V0,R2
   \   000079   8B..         MOV     ?V1,R3
   \   00007B   85....       MOV     ?V6,?V0
   \   00007E   85....       MOV     ?V7,?V1
   1643          
   1644              if ( pBuf != NULL )
   \   000081   E5..         MOV     A,?V6
   \   000083   45..         ORL     A,?V7
   \   000085   7003         JNZ     $+5
   \   000087   02....       LJMP    ??ZDO_ProcessMgmtRtgReq_2 & 0xFFFF
   1645              {
   1646                // Convert buffer to list
   1647                pList = (rtgItem_t *)pBuf;
   \   00008A   85....       MOV     ?V0,?V6
   \   00008D   85....       MOV     ?V1,?V7
   1648          
   1649                // Loop through items and build list
   1650                for ( x = 0; x < numItems; x++ )
   \   000090   75..00       MOV     ?V4,#0x0
   \   000093   801A         SJMP    ??ZDO_ProcessMgmtRtgReq_3
   1651                {
   1652                  NLME_GetRequest( nwkRoutingTable, (uint16)(x + StartIndex), (void*)pList );
   1653          
   1654                  // Remap the status to the RoutingTableList Record Format defined in the ZigBee spec
   1655                  switch( pList->status )
   1656                  {
   1657                    case RT_ACTIVE:
   1658                      pList->status = ZDO_MGMT_RTG_ENTRY_ACTIVE;
   1659                      break;
   1660          
   1661                    case RT_DISC:
   1662                      pList->status = ZDO_MGMT_RTG_ENTRY_DISCOVERY_UNDERWAY;
   1663                      break;
   1664          
   1665                    case RT_LINK_FAIL:
   1666                      pList->status = ZDO_MGMT_RTG_ENTRY_DISCOVERY_FAILED;
   1667                      break;
   1668          
   1669                    case RT_INIT:
   1670                    case RT_REPAIR:
   1671                    default:
   1672                      pList->status = ZDO_MGMT_RTG_ENTRY_INACTIVE;
   \                     ??ZDO_ProcessMgmtRtgReq_4:
   \   000095   85..82       MOV     DPL,?V0
   \   000098   85..83       MOV     DPH,?V1
   \   00009B   A3           INC     DPTR
   \   00009C   A3           INC     DPTR
   \   00009D   A3           INC     DPTR
   \   00009E   A3           INC     DPTR
   \   00009F   A3           INC     DPTR
   \   0000A0   7403         MOV     A,#0x3
   \   0000A2   F0           MOVX    @DPTR,A
   1673                      break;
   1674                  }
   1675          
   1676                  // Increment pointer to next record
   1677                  pList++;
   \                     ??ZDO_ProcessMgmtRtgReq_5:
   \   0000A3   E5..         MOV     A,?V0
   \   0000A5   2407         ADD     A,#0x7
   \   0000A7   F5..         MOV     ?V0,A
   \   0000A9   5002         JNC     ??ZDO_ProcessMgmtRtgReq_6
   \   0000AB   05..         INC     ?V1
   \                     ??ZDO_ProcessMgmtRtgReq_6:
   \   0000AD   05..         INC     ?V4
   \                     ??ZDO_ProcessMgmtRtgReq_3:
   \   0000AF   E5..         MOV     A,?V4
   \   0000B1   C3           CLR     C
   \   0000B2   9E           SUBB    A,R6
   \   0000B3   5061         JNC     ??ZDO_ProcessMgmtRtgReq_0
   \   0000B5                ; Setup parameters for call to function NLME_GetRequest
   \   0000B5   AC..         MOV     R4,?V0
   \   0000B7   AD..         MOV     R5,?V1
   \   0000B9   A8..         MOV     R0,?V4
   \   0000BB   7900         MOV     R1,#0x0
   \   0000BD   EF           MOV     A,R7
   \   0000BE   FA           MOV     R2,A
   \   0000BF   7B00         MOV     R3,#0x0
   \   0000C1   E8           MOV     A,R0
   \   0000C2   2A           ADD     A,R2
   \   0000C3   FA           MOV     R2,A
   \   0000C4   E9           MOV     A,R1
   \   0000C5   3B           ADDC    A,R3
   \   0000C6   FB           MOV     R3,A
   \   0000C7   798B         MOV     R1,#-0x75
   \   0000C9   12....       LCALL   `??NLME_GetRequest::?relay`; Banked call to: NLME_GetRequest
   \   0000CC   E9           MOV     A,R1
   \   0000CD   85..82       MOV     DPL,?V0
   \   0000D0   85..83       MOV     DPH,?V1
   \   0000D3   A3           INC     DPTR
   \   0000D4   A3           INC     DPTR
   \   0000D5   A3           INC     DPTR
   \   0000D6   A3           INC     DPTR
   \   0000D7   A3           INC     DPTR
   \   0000D8   E0           MOVX    A,@DPTR
   \   0000D9   14           DEC     A
   \   0000DA   6008         JZ      ??ZDO_ProcessMgmtRtgReq_7
   \   0000DC   14           DEC     A
   \   0000DD   6015         JZ      ??ZDO_ProcessMgmtRtgReq_8
   \   0000DF   14           DEC     A
   \   0000E0   6022         JZ      ??ZDO_ProcessMgmtRtgReq_9
   \   0000E2   80B1         SJMP    ??ZDO_ProcessMgmtRtgReq_4
   \                     ??ZDO_ProcessMgmtRtgReq_7:
   \   0000E4   85..82       MOV     DPL,?V0
   \   0000E7   85..83       MOV     DPH,?V1
   \   0000EA   A3           INC     DPTR
   \   0000EB   A3           INC     DPTR
   \   0000EC   A3           INC     DPTR
   \   0000ED   A3           INC     DPTR
   \   0000EE   A3           INC     DPTR
   \   0000EF   7400         MOV     A,#0x0
   \   0000F1   F0           MOVX    @DPTR,A
   \   0000F2   80AF         SJMP    ??ZDO_ProcessMgmtRtgReq_5
   \                     ??ZDO_ProcessMgmtRtgReq_8:
   \   0000F4   85..82       MOV     DPL,?V0
   \   0000F7   85..83       MOV     DPH,?V1
   \   0000FA   A3           INC     DPTR
   \   0000FB   A3           INC     DPTR
   \   0000FC   A3           INC     DPTR
   \   0000FD   A3           INC     DPTR
   \   0000FE   A3           INC     DPTR
   \   0000FF   7401         MOV     A,#0x1
   \   000101   F0           MOVX    @DPTR,A
   \   000102   809F         SJMP    ??ZDO_ProcessMgmtRtgReq_5
   \                     ??ZDO_ProcessMgmtRtgReq_9:
   \   000104   85..82       MOV     DPL,?V0
   \   000107   85..83       MOV     DPH,?V1
   \   00010A   A3           INC     DPTR
   \   00010B   A3           INC     DPTR
   \   00010C   A3           INC     DPTR
   \   00010D   A3           INC     DPTR
   \   00010E   A3           INC     DPTR
   \   00010F   7402         MOV     A,#0x2
   \   000111   F0           MOVX    @DPTR,A
   \   000112   808F         SJMP    ??ZDO_ProcessMgmtRtgReq_5
   1678                }
   1679              }
   1680              else
   1681              {
   1682                numItems = 0;
   \                     ??ZDO_ProcessMgmtRtgReq_2:
   \   000114   7E00         MOV     R6,#0x0
   1683              }
   1684            }
   1685          
   1686            // Send response
   1687            ZDP_MgmtRtgRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSuccess, maxNumItems, StartIndex, numItems,
   1688                                  (rtgItem_t *)pBuf, false );
   \                     ??ZDO_ProcessMgmtRtgReq_0:
   \   000116                ; Setup parameters for call to function ZDP_MgmtRtgRsp
   \   000116   75..00       MOV     ?V0,#0x0
   \   000119   78..         MOV     R0,#?V0
   \   00011B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00011E   78..         MOV     R0,#?V6
   \   000120   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000123   EE           MOV     A,R6
   \   000124   F5..         MOV     ?V0,A
   \   000126   78..         MOV     R0,#?V0
   \   000128   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00012B   EF           MOV     A,R7
   \   00012C   F5..         MOV     ?V0,A
   \   00012E   78..         MOV     R0,#?V0
   \   000130   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000133   7405         MOV     A,#0x5
   \   000135   12....       LCALL   ?XSTACK_DISP0_8
   \   000138   E0           MOVX    A,@DPTR
   \   000139   FD           MOV     R5,A
   \   00013A   7C00         MOV     R4,#0x0
   \   00013C   E5..         MOV     A,?V2
   \   00013E   2402         ADD     A,#0x2
   \   000140   FA           MOV     R2,A
   \   000141   E4           CLR     A
   \   000142   35..         ADDC    A,?V3
   \   000144   FB           MOV     R3,A
   \   000145   E5..         MOV     A,?V2
   \   000147   240F         ADD     A,#0xf
   \   000149   F582         MOV     DPL,A
   \   00014B   E4           CLR     A
   \   00014C   35..         ADDC    A,?V3
   \   00014E   F583         MOV     DPH,A
   \   000150   E0           MOVX    A,@DPTR
   \   000151   F9           MOV     R1,A
   \   000152   12....       LCALL   `??ZDP_MgmtRtgRsp::?relay`; Banked call to: ZDP_MgmtRtgRsp
   \   000155   7405         MOV     A,#0x5
   \   000157   12....       LCALL   ?DEALLOC_XSTACK8
   \   00015A   E9           MOV     A,R1
   1689          
   1690            if ( pBuf != NULL )
   \   00015B   E5..         MOV     A,?V6
   \   00015D   45..         ORL     A,?V7
   \   00015F   6007         JZ      ??ZDO_ProcessMgmtRtgReq_10
   1691            {
   1692              osal_mem_free( pBuf );
   \   000161                ; Setup parameters for call to function osal_mem_free
   \   000161   AA..         MOV     R2,?V6
   \   000163   AB..         MOV     R3,?V7
   \   000165   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1693            }
   1694          }
   \                     ??ZDO_ProcessMgmtRtgReq_10:
   \   000168   7401         MOV     A,#0x1
   \   00016A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00016D   7F08         MOV     R7,#0x8
   \   00016F   02....       LJMP    ?BANKED_LEAVE_XDATA
   1695          
   1696          /*********************************************************************
   1697           * @fn          ZDO_ProcessMgmtBindReq
   1698           *
   1699           * @brief       This function finishes the processing of the Management
   1700           *              Bind Request and generates the response.
   1701           *
   1702           *   Note:      This function will limit the number of items returned
   1703           *              to ZDO_MAX_BIND_ITEMS items.
   1704           *
   1705           * @param       inMsg - incoming message (request)
   1706           *
   1707           * @return      none
   1708           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1709          void ZDO_ProcessMgmtBindReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtBindReq:
   1710          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V4,R2
   \   00000C   8B..         MOV     ?V5,R3
   1711          #if defined ( REFLECTOR )
   1712            byte x;
   1713            uint16 maxNumItems;
   1714            uint16 numItems;
   1715            uint8 *pBuf = NULL;
   \   00000E   75..00       MOV     ?V8,#0x0
   \   000011   75..00       MOV     ?V9,#0x0
   1716            apsBindingItem_t *pList;
   1717            uint8 StartIndex = inMsg->asdu[0];
   \   000014   E5..         MOV     A,?V4
   \   000016   2413         ADD     A,#0x13
   \   000018   F582         MOV     DPL,A
   \   00001A   E4           CLR     A
   \   00001B   35..         ADDC    A,?V5
   \   00001D   F583         MOV     DPH,A
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F8           MOV     R0,A
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F583         MOV     DPH,A
   \   000025   8882         MOV     DPL,R0
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F5..         MOV     ?V2,A
   1718            uint8 status;
   1719          
   1720            // Get the number of table items
   1721            APSME_GetRequest( apsNumBindingTableEntries, 0, (byte*)(&maxNumItems) );
   \   00002A                ; Setup parameters for call to function APSME_GetRequest
   \   00002A   AC..         MOV     R4,?XSP + 0
   \   00002C   AD..         MOV     R5,?XSP + 1
   \   00002E   7A00         MOV     R2,#0x0
   \   000030   7B00         MOV     R3,#0x0
   \   000032   79A3         MOV     R1,#-0x5d
   \   000034   12....       LCALL   `??APSME_GetRequest::?relay`; Banked call to: APSME_GetRequest
   \   000037   E9           MOV     A,R1
   1722          
   1723            if ( maxNumItems > StartIndex )
   \   000038   A8..         MOV     R0,?V2
   \   00003A   7900         MOV     R1,#0x0
   \   00003C   85..82       MOV     DPL,?XSP + 0
   \   00003F   85..83       MOV     DPH,?XSP + 1
   \   000042   E0           MOVX    A,@DPTR
   \   000043   FA           MOV     R2,A
   \   000044   A3           INC     DPTR
   \   000045   E0           MOVX    A,@DPTR
   \   000046   FB           MOV     R3,A
   \   000047   C3           CLR     C
   \   000048   E8           MOV     A,R0
   \   000049   9A           SUBB    A,R2
   \   00004A   E9           MOV     A,R1
   \   00004B   9B           SUBB    A,R3
   \   00004C   5014         JNC     ??ZDO_ProcessMgmtBindReq_0
   1724            {
   1725              numItems = maxNumItems - StartIndex;    // Start at the passed in index
   \   00004E   85..82       MOV     DPL,?XSP + 0
   \   000051   85..83       MOV     DPH,?XSP + 1
   \   000054   A8..         MOV     R0,?V2
   \   000056   7900         MOV     R1,#0x0
   \   000058   E0           MOVX    A,@DPTR
   \   000059   C3           CLR     C
   \   00005A   98           SUBB    A,R0
   \   00005B   FE           MOV     R6,A
   \   00005C   A3           INC     DPTR
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   99           SUBB    A,R1
   \   00005F   FF           MOV     R7,A
   \   000060   8004         SJMP    ??ZDO_ProcessMgmtBindReq_1
   1726            }
   1727            else
   1728            {
   1729              numItems = 0;
   \                     ??ZDO_ProcessMgmtBindReq_0:
   \   000062   7E00         MOV     R6,#0x0
   \   000064   7F00         MOV     R7,#0x0
   1730            }
   1731          
   1732            // limit the size of the list
   1733            if ( numItems > ZDO_MAX_BIND_ITEMS )
   \                     ??ZDO_ProcessMgmtBindReq_1:
   \   000066   C3           CLR     C
   \   000067   EE           MOV     A,R6
   \   000068   9404         SUBB    A,#0x4
   \   00006A   EF           MOV     A,R7
   \   00006B   9400         SUBB    A,#0x0
   \   00006D   4004         JC      ??ZDO_ProcessMgmtBindReq_2
   1734            {
   1735              numItems = ZDO_MAX_BIND_ITEMS;
   \   00006F   7E03         MOV     R6,#0x3
   \   000071   7F00         MOV     R7,#0x0
   1736            }
   1737          
   1738            // Allocate the memory to build the table
   1739            if ( numItems && (pBuf = osal_mem_alloc( sizeof( apsBindingItem_t ) * numItems )) )
   \                     ??ZDO_ProcessMgmtBindReq_2:
   \   000073   EE           MOV     A,R6
   \   000074   4F           ORL     A,R7
   \   000075   6069         JZ      ??ZDO_ProcessMgmtBindReq_3
   \   000077                ; Setup parameters for call to function osal_mem_alloc
   \   000077   EE           MOV     A,R6
   \   000078   FA           MOV     R2,A
   \   000079   EF           MOV     A,R7
   \   00007A   FB           MOV     R3,A
   \   00007B   EA           MOV     A,R2
   \   00007C   75F015       MOV     B,#0x15
   \   00007F   A4           MUL     AB
   \   000080   CA           XCH     A,R2
   \   000081   A8F0         MOV     R0,B
   \   000083   75F000       MOV     B,#0x0
   \   000086   A4           MUL     AB
   \   000087   28           ADD     A,R0
   \   000088   F8           MOV     R0,A
   \   000089   75F015       MOV     B,#0x15
   \   00008C   EB           MOV     A,R3
   \   00008D   A4           MUL     AB
   \   00008E   28           ADD     A,R0
   \   00008F   FB           MOV     R3,A
   \   000090   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000093   8A..         MOV     ?V0,R2
   \   000095   8B..         MOV     ?V1,R3
   \   000097   85....       MOV     ?V8,?V0
   \   00009A   85....       MOV     ?V9,?V1
   \   00009D   E5..         MOV     A,?V8
   \   00009F   45..         ORL     A,?V9
   \   0000A1   603D         JZ      ??ZDO_ProcessMgmtBindReq_3
   1740            {
   1741              status = ZSuccess;
   \   0000A3   75..00       MOV     ?V3,#0x0
   1742          
   1743              // Convert buffer to list
   1744              pList = (apsBindingItem_t *)pBuf;
   \   0000A6   85....       MOV     ?V0,?V8
   \   0000A9   85....       MOV     ?V1,?V9
   1745          
   1746              // Loop through items and build list
   1747              for ( x = 0; x < numItems; x++ )
   \   0000AC   75..00       MOV     ?V6,#0x0
   \                     ??ZDO_ProcessMgmtBindReq_4:
   \   0000AF   A8..         MOV     R0,?V6
   \   0000B1   7900         MOV     R1,#0x0
   \   0000B3   C3           CLR     C
   \   0000B4   E8           MOV     A,R0
   \   0000B5   9E           SUBB    A,R6
   \   0000B6   E9           MOV     A,R1
   \   0000B7   9F           SUBB    A,R7
   \   0000B8   502D         JNC     ??ZDO_ProcessMgmtBindReq_5
   1748              {
   1749                APSME_GetRequest( apsBindingTable, (x + StartIndex), (void*)pList );
   \   0000BA                ; Setup parameters for call to function APSME_GetRequest
   \   0000BA   AC..         MOV     R4,?V0
   \   0000BC   AD..         MOV     R5,?V1
   \   0000BE   AA..         MOV     R2,?V6
   \   0000C0   7B00         MOV     R3,#0x0
   \   0000C2   A8..         MOV     R0,?V2
   \   0000C4   7900         MOV     R1,#0x0
   \   0000C6   EA           MOV     A,R2
   \   0000C7   28           ADD     A,R0
   \   0000C8   FA           MOV     R2,A
   \   0000C9   EB           MOV     A,R3
   \   0000CA   39           ADDC    A,R1
   \   0000CB   FB           MOV     R3,A
   \   0000CC   79A2         MOV     R1,#-0x5e
   \   0000CE   12....       LCALL   `??APSME_GetRequest::?relay`; Banked call to: APSME_GetRequest
   \   0000D1   E9           MOV     A,R1
   1750                pList++;
   \   0000D2   E5..         MOV     A,?V0
   \   0000D4   2415         ADD     A,#0x15
   \   0000D6   F5..         MOV     ?V0,A
   \   0000D8   5002         JNC     ??ZDO_ProcessMgmtBindReq_6
   \   0000DA   05..         INC     ?V1
   1751              }
   \                     ??ZDO_ProcessMgmtBindReq_6:
   \   0000DC   05..         INC     ?V6
   \   0000DE   80CF         SJMP    ??ZDO_ProcessMgmtBindReq_4
   1752          
   1753            }
   1754            else
   1755            {
   1756              status = ZDP_NOT_PERMITTED;
   \                     ??ZDO_ProcessMgmtBindReq_3:
   \   0000E0   75..8B       MOV     ?V3,#-0x75
   1757              numItems = 0;
   \   0000E3   7E00         MOV     R6,#0x0
   \   0000E5   7F00         MOV     R7,#0x0
   1758            }
   1759          
   1760            // Send response
   1761            ZDP_MgmtBindRsp( inMsg->TransSeq, &(inMsg->srcAddr), status, (byte)maxNumItems, StartIndex,
   1762                             (byte)numItems, (apsBindingItem_t *)pBuf, false );
   \                     ??ZDO_ProcessMgmtBindReq_5:
   \   0000E7                ; Setup parameters for call to function ZDP_MgmtBindRsp
   \   0000E7   75..00       MOV     ?V0,#0x0
   \   0000EA   78..         MOV     R0,#?V0
   \   0000EC   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000EF   78..         MOV     R0,#?V8
   \   0000F1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F4   EE           MOV     A,R6
   \   0000F5   F5..         MOV     ?V0,A
   \   0000F7   78..         MOV     R0,#?V0
   \   0000F9   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000FC   E5..         MOV     A,?V2
   \   0000FE   F5..         MOV     ?V0,A
   \   000100   78..         MOV     R0,#?V0
   \   000102   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000105   7405         MOV     A,#0x5
   \   000107   12....       LCALL   ?XSTACK_DISP0_8
   \   00010A   E0           MOVX    A,@DPTR
   \   00010B   F8           MOV     R0,A
   \   00010C   A3           INC     DPTR
   \   00010D   E0           MOVX    A,@DPTR
   \   00010E   F9           MOV     R1,A
   \   00010F   E8           MOV     A,R0
   \   000110   FD           MOV     R5,A
   \   000111   AC..         MOV     R4,?V3
   \   000113   E5..         MOV     A,?V4
   \   000115   2402         ADD     A,#0x2
   \   000117   FA           MOV     R2,A
   \   000118   E4           CLR     A
   \   000119   35..         ADDC    A,?V5
   \   00011B   FB           MOV     R3,A
   \   00011C   E5..         MOV     A,?V4
   \   00011E   240F         ADD     A,#0xf
   \   000120   F582         MOV     DPL,A
   \   000122   E4           CLR     A
   \   000123   35..         ADDC    A,?V5
   \   000125   F583         MOV     DPH,A
   \   000127   E0           MOVX    A,@DPTR
   \   000128   F9           MOV     R1,A
   \   000129   12....       LCALL   `??ZDP_MgmtBindRsp::?relay`; Banked call to: ZDP_MgmtBindRsp
   \   00012C   7405         MOV     A,#0x5
   \   00012E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000131   E9           MOV     A,R1
   1763          
   1764            if ( pBuf )
   \   000132   E5..         MOV     A,?V8
   \   000134   45..         ORL     A,?V9
   \   000136   6007         JZ      ??ZDO_ProcessMgmtBindReq_7
   1765            {
   1766              osal_mem_free( pBuf );
   \   000138                ; Setup parameters for call to function osal_mem_free
   \   000138   AA..         MOV     R2,?V8
   \   00013A   AB..         MOV     R3,?V9
   \   00013C   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1767            }
   1768          #else
   1769            (void)inMsg;
   1770          #endif
   1771          }
   \                     ??ZDO_ProcessMgmtBindReq_7:
   \   00013F   7402         MOV     A,#0x2
   \   000141   12....       LCALL   ?DEALLOC_XSTACK8
   \   000144   7F0A         MOV     R7,#0xa
   \   000146   02....       LJMP    ?BANKED_LEAVE_XDATA
   1772          
   1773          /*********************************************************************
   1774           * @fn          ZDO_ProcessMgmtDirectJoinReq
   1775           *
   1776           * @brief       This function finishes the processing of the Management
   1777           *              Direct Join Request and generates the response.
   1778           *
   1779           * @param       inMsg - incoming message (request)
   1780           *
   1781           * @return      none
   1782           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1783          void ZDO_ProcessMgmtDirectJoinReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtDirectJoinReq:
   1784          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1785            uint8 *deviceAddr;
   1786            uint8 capInfo;
   1787            uint8 stat;
   1788          
   1789            // Parse the message
   1790            deviceAddr = inMsg->asdu;
   \   00000E   EE           MOV     A,R6
   \   00000F   2413         ADD     A,#0x13
   \   000011   F582         MOV     DPL,A
   \   000013   E4           CLR     A
   \   000014   3F           ADDC    A,R7
   \   000015   F583         MOV     DPH,A
   \   000017   E0           MOVX    A,@DPTR
   \   000018   FA           MOV     R2,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   FB           MOV     R3,A
   1791            capInfo = inMsg->asdu[Z_EXTADDR_LEN];
   \   00001C   EE           MOV     A,R6
   \   00001D   2413         ADD     A,#0x13
   \   00001F   F582         MOV     DPL,A
   \   000021   E4           CLR     A
   \   000022   3F           ADDC    A,R7
   \   000023   F583         MOV     DPH,A
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F8           MOV     R0,A
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   C8           XCH     A,R0
   \   00002A   2408         ADD     A,#0x8
   \   00002C   F582         MOV     DPL,A
   \   00002E   C8           XCH     A,R0
   \   00002F   3400         ADDC    A,#0x0
   \   000031   F583         MOV     DPH,A
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F9           MOV     R1,A
   1792          
   1793            stat = (byte) NLME_DirectJoinRequest( deviceAddr, capInfo );
   \   000035                ; Setup parameters for call to function NLME_DirectJoinRequest
   \   000035   12....       LCALL   `??NLME_DirectJoinRequest::?relay`; Banked call to: NLME_DirectJoinRequest
   \   000038   E9           MOV     A,R1
   \   000039   C0E0         PUSH    A
   \   00003B   85..82       MOV     DPL,?XSP + 0
   \   00003E   85..83       MOV     DPH,?XSP + 1
   \   000041   D0E0         POP     A
   \   000043   F0           MOVX    @DPTR,A
   1794          
   1795            ZDP_MgmtDirectJoinRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat, false );
   \   000044                ; Setup parameters for call to function ZDP_SendData
   \   000044   75..00       MOV     ?V0,#0x0
   \   000047   78..         MOV     R0,#?V0
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00004C   7401         MOV     A,#0x1
   \   00004E   12....       LCALL   ?XSTACK_DISP100_8
   \   000051   88..         MOV     ?V0,R0
   \   000053   89..         MOV     ?V1,R1
   \   000055   78..         MOV     R0,#?V0
   \   000057   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005A   75..35       MOV     ?V0,#0x35
   \   00005D   75..80       MOV     ?V1,#-0x80
   \   000060   78..         MOV     R0,#?V0
   \   000062   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000065   7901         MOV     R1,#0x1
   \   000067   EE           MOV     A,R6
   \   000068   2402         ADD     A,#0x2
   \   00006A   FC           MOV     R4,A
   \   00006B   E4           CLR     A
   \   00006C   3F           ADDC    A,R7
   \   00006D   FD           MOV     R5,A
   \   00006E   EE           MOV     A,R6
   \   00006F   240F         ADD     A,#0xf
   \   000071   FA           MOV     R2,A
   \   000072   E4           CLR     A
   \   000073   3F           ADDC    A,R7
   \   000074   FB           MOV     R3,A
   \   000075   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   000078   7405         MOV     A,#0x5
   \   00007A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007D   E9           MOV     A,R1
   1796          }
   \   00007E   7401         MOV     A,#0x1
   \   000080   12....       LCALL   ?DEALLOC_XSTACK8
   \   000083   7F02         MOV     R7,#0x2
   \   000085   02....       LJMP    ?BANKED_LEAVE_XDATA
   1797          
   1798          /*********************************************************************
   1799           * @fn          ZDO_ProcessMgmtLeaveReq
   1800           *
   1801           * @brief       This function processes a Management Leave Request
   1802           *              and generates the response.
   1803           *
   1804           * @param       inMsg - incoming message (request)
   1805           *
   1806           * @return      none
   1807           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1808          void ZDO_ProcessMgmtLeaveReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtLeaveReq:
   1809          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV     A,#-0x6
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   1810            NLME_LeaveReq_t req;
   1811            ZStatus_t       status;
   1812            uint8           option;
   1813            uint8 *msg = inMsg->asdu;
   \   00000E   E5..         MOV     A,?V0
   \   000010   2413         ADD     A,#0x13
   \   000012   F582         MOV     DPL,A
   \   000014   E4           CLR     A
   \   000015   35..         ADDC    A,?V1
   \   000017   F583         MOV     DPH,A
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   FE           MOV     R6,A
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   FF           MOV     R7,A
   1814          
   1815            if ( ( AddrMgrExtAddrValid( msg ) == FALSE                 ) ||
   1816                 ( osal_ExtAddrEqual( msg, NLME_GetExtAddr() ) == TRUE )    )
   \   00001E                ; Setup parameters for call to function AddrMgrExtAddrValid
   \   00001E   EE           MOV     A,R6
   \   00001F   FA           MOV     R2,A
   \   000020   EF           MOV     A,R7
   \   000021   FB           MOV     R3,A
   \   000022   12....       LCALL   `??AddrMgrExtAddrValid::?relay`; Banked call to: AddrMgrExtAddrValid
   \   000025   E9           MOV     A,R1
   \   000026   6017         JZ      ??ZDO_ProcessMgmtLeaveReq_0
   \   000028                ; Setup parameters for call to function NLME_GetExtAddr
   \   000028   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   00002B   8A..         MOV     ?V2,R2
   \   00002D   8B..         MOV     ?V3,R3
   \   00002F   AC..         MOV     R4,?V2
   \   000031   AD..         MOV     R5,?V3
   \   000033                ; Setup parameters for call to function sAddrExtCmp
   \   000033   EE           MOV     A,R6
   \   000034   FA           MOV     R2,A
   \   000035   EF           MOV     A,R7
   \   000036   FB           MOV     R3,A
   \   000037   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   00003A   E9           MOV     A,R1
   \   00003B   6401         XRL     A,#0x1
   \   00003D   700E         JNZ     ??ZDO_ProcessMgmtLeaveReq_1
   1817            {
   1818              // Remove this device
   1819              req.extAddr = NULL;
   \                     ??ZDO_ProcessMgmtLeaveReq_0:
   \   00003F   7401         MOV     A,#0x1
   \   000041   12....       LCALL   ?XSTACK_DISP0_8
   \   000044   7400         MOV     A,#0x0
   \   000046   F0           MOVX    @DPTR,A
   \   000047   A3           INC     DPTR
   \   000048   7400         MOV     A,#0x0
   \   00004A   F0           MOVX    @DPTR,A
   \   00004B   800A         SJMP    ??ZDO_ProcessMgmtLeaveReq_2
   1820            }
   1821            else
   1822            {
   1823              // Remove child device
   1824              req.extAddr = msg;
   \                     ??ZDO_ProcessMgmtLeaveReq_1:
   \   00004D   7401         MOV     A,#0x1
   \   00004F   12....       LCALL   ?XSTACK_DISP0_8
   \   000052   EE           MOV     A,R6
   \   000053   F0           MOVX    @DPTR,A
   \   000054   A3           INC     DPTR
   \   000055   EF           MOV     A,R7
   \   000056   F0           MOVX    @DPTR,A
   1825            }
   1826          
   1827            option = msg[Z_EXTADDR_LEN];
   \                     ??ZDO_ProcessMgmtLeaveReq_2:
   \   000057   8E82         MOV     DPL,R6
   \   000059   8F83         MOV     DPH,R7
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   E0           MOVX    A,@DPTR
   \   000064   F8           MOV     R0,A
   1828            if ( option & ZDP_MGMT_LEAVE_REQ_RC )
   \   000065   E8           MOV     A,R0
   \   000066   A2E6         MOV     C,0xE0 /* A   */.6
   \   000068   5008         JNC     ??ZDO_ProcessMgmtLeaveReq_3
   1829            {
   1830              req.removeChildren = TRUE;
   \   00006A   7403         MOV     A,#0x3
   \   00006C   12....       LCALL   ?XSTACK_DISP0_8
   \   00006F   7401         MOV     A,#0x1
   \   000071   F0           MOVX    @DPTR,A
   1831            }
   1832          
   1833            if ( option & ZDP_MGMT_LEAVE_REQ_REJOIN )
   \                     ??ZDO_ProcessMgmtLeaveReq_3:
   \   000072   E8           MOV     A,R0
   \   000073   A2E7         MOV     C,0xE0 /* A   */.7
   \   000075   5008         JNC     ??ZDO_ProcessMgmtLeaveReq_4
   1834            {
   1835               req.rejoin = TRUE;
   \   000077   7404         MOV     A,#0x4
   \   000079   12....       LCALL   ?XSTACK_DISP0_8
   \   00007C   7401         MOV     A,#0x1
   \   00007E   F0           MOVX    @DPTR,A
   1836            }
   1837          
   1838            req.silent = FALSE;
   \                     ??ZDO_ProcessMgmtLeaveReq_4:
   \   00007F   7405         MOV     A,#0x5
   \   000081   12....       LCALL   ?XSTACK_DISP0_8
   \   000084   7400         MOV     A,#0x0
   \   000086   F0           MOVX    @DPTR,A
   1839          
   1840            status = NLME_LeaveReq( &req );
   \   000087                ; Setup parameters for call to function NLME_LeaveReq
   \   000087   7401         MOV     A,#0x1
   \   000089   12....       LCALL   ?XSTACK_DISP101_8
   \   00008C   12....       LCALL   `??NLME_LeaveReq::?relay`; Banked call to: NLME_LeaveReq
   \   00008F   E9           MOV     A,R1
   \   000090   C0E0         PUSH    A
   \   000092   85..82       MOV     DPL,?XSP + 0
   \   000095   85..83       MOV     DPH,?XSP + 1
   \   000098   D0E0         POP     A
   \   00009A   F0           MOVX    @DPTR,A
   1841          
   1842            if ( ZG_BUILD_ENDDEVICE_TYPE )
   1843            {
   1844              // Stop polling and get ready to reset
   1845              NLME_SetPollRate( 0 );
   \   00009B                ; Setup parameters for call to function NLME_SetPollRate
   \   00009B   7A00         MOV     R2,#0x0
   \   00009D   7B00         MOV     R3,#0x0
   \   00009F   12....       LCALL   `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   1846            }
   1847          
   1848            ZDP_MgmtLeaveRsp( inMsg->TransSeq, &(inMsg->srcAddr), status, FALSE );
   \   0000A2                ; Setup parameters for call to function ZDP_SendData
   \   0000A2   75..00       MOV     ?V2,#0x0
   \   0000A5   78..         MOV     R0,#?V2
   \   0000A7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000AA   7401         MOV     A,#0x1
   \   0000AC   12....       LCALL   ?XSTACK_DISP100_8
   \   0000AF   88..         MOV     ?V2,R0
   \   0000B1   89..         MOV     ?V3,R1
   \   0000B3   78..         MOV     R0,#?V2
   \   0000B5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B8   75..34       MOV     ?V2,#0x34
   \   0000BB   75..80       MOV     ?V3,#-0x80
   \   0000BE   78..         MOV     R0,#?V2
   \   0000C0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C3   7901         MOV     R1,#0x1
   \   0000C5   E5..         MOV     A,?V0
   \   0000C7   2402         ADD     A,#0x2
   \   0000C9   FC           MOV     R4,A
   \   0000CA   E4           CLR     A
   \   0000CB   35..         ADDC    A,?V1
   \   0000CD   FD           MOV     R5,A
   \   0000CE   E5..         MOV     A,?V0
   \   0000D0   240F         ADD     A,#0xf
   \   0000D2   FA           MOV     R2,A
   \   0000D3   E4           CLR     A
   \   0000D4   35..         ADDC    A,?V1
   \   0000D6   FB           MOV     R3,A
   \   0000D7   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   0000DA   7405         MOV     A,#0x5
   \   0000DC   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000DF   E9           MOV     A,R1
   1849          }
   \   0000E0   7406         MOV     A,#0x6
   \   0000E2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E5   7F04         MOV     R7,#0x4
   \   0000E7   02....       LJMP    ?BANKED_LEAVE_XDATA
   1850          
   1851          
   1852          /*********************************************************************
   1853           * @fn          ZDO_ProcessMgmtPermitJoinReq
   1854           *
   1855           * @brief       This function processes a Management Permit Join Request
   1856           *              and generates the response.
   1857           *
   1858           * @param       inMsg - incoming message (request)
   1859           *
   1860           * @return      none
   1861           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1862          void ZDO_ProcessMgmtPermitJoinReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtPermitJoinReq:
   1863          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1864            uint8 stat;
   1865            uint8 duration;
   1866            uint8 tcsig;
   1867          
   1868            duration = inMsg->asdu[ZDP_MGMT_PERMIT_JOIN_REQ_DURATION];
   \   00000E   EE           MOV     A,R6
   \   00000F   2413         ADD     A,#0x13
   \   000011   F582         MOV     DPL,A
   \   000013   E4           CLR     A
   \   000014   3F           ADDC    A,R7
   \   000015   F583         MOV     DPH,A
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F8           MOV     R0,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F583         MOV     DPH,A
   \   00001D   8882         MOV     DPL,R0
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F9           MOV     R1,A
   1869            tcsig    = inMsg->asdu[ZDP_MGMT_PERMIT_JOIN_REQ_TC_SIG];
   \   000021   EE           MOV     A,R6
   \   000022   2413         ADD     A,#0x13
   \   000024   F582         MOV     DPL,A
   \   000026   E4           CLR     A
   \   000027   3F           ADDC    A,R7
   \   000028   F583         MOV     DPH,A
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F8           MOV     R0,A
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F583         MOV     DPH,A
   \   000030   8882         MOV     DPL,R0
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F5..         MOV     ?V0,A
   1870          
   1871            // Set the network layer permit join duration
   1872            stat = (byte) NLME_PermitJoiningRequest( duration );
   \   000036                ; Setup parameters for call to function NLME_PermitJoiningRequest
   \   000036   12....       LCALL   `??NLME_PermitJoiningRequest::?relay`; Banked call to: NLME_PermitJoiningRequest
   \   000039   E9           MOV     A,R1
   \   00003A   C0E0         PUSH    A
   \   00003C   85..82       MOV     DPL,?XSP + 0
   \   00003F   85..83       MOV     DPH,?XSP + 1
   \   000042   D0E0         POP     A
   \   000044   F0           MOVX    @DPTR,A
   1873          
   1874            // Handle the Trust Center Significance
   1875            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1876            {
   1877              if ( tcsig == TRUE )
   1878              {
   1879                ZDSecMgrPermitJoining( duration );
   1880              }
   1881            }
   1882          
   1883            // Send a response if unicast
   1884            if ( !inMsg->wasBroadcast )
   \   000045   EE           MOV     A,R6
   \   000046   240B         ADD     A,#0xb
   \   000048   F582         MOV     DPL,A
   \   00004A   E4           CLR     A
   \   00004B   3F           ADDC    A,R7
   \   00004C   F583         MOV     DPH,A
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   703A         JNZ     ??ZDO_ProcessMgmtPermitJoinReq_0
   1885            {
   1886              ZDP_MgmtPermitJoinRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat, false );
   \   000051                ; Setup parameters for call to function ZDP_SendData
   \   000051   75..00       MOV     ?V0,#0x0
   \   000054   78..         MOV     R0,#?V0
   \   000056   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000059   7401         MOV     A,#0x1
   \   00005B   12....       LCALL   ?XSTACK_DISP100_8
   \   00005E   88..         MOV     ?V0,R0
   \   000060   89..         MOV     ?V1,R1
   \   000062   78..         MOV     R0,#?V0
   \   000064   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000067   75..36       MOV     ?V0,#0x36
   \   00006A   75..80       MOV     ?V1,#-0x80
   \   00006D   78..         MOV     R0,#?V0
   \   00006F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000072   7901         MOV     R1,#0x1
   \   000074   EE           MOV     A,R6
   \   000075   2402         ADD     A,#0x2
   \   000077   FC           MOV     R4,A
   \   000078   E4           CLR     A
   \   000079   3F           ADDC    A,R7
   \   00007A   FD           MOV     R5,A
   \   00007B   EE           MOV     A,R6
   \   00007C   240F         ADD     A,#0xf
   \   00007E   FA           MOV     R2,A
   \   00007F   E4           CLR     A
   \   000080   3F           ADDC    A,R7
   \   000081   FB           MOV     R3,A
   \   000082   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   000085   7405         MOV     A,#0x5
   \   000087   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008A   E9           MOV     A,R1
   1887            }
   1888          }
   \                     ??ZDO_ProcessMgmtPermitJoinReq_0:
   \   00008B   7401         MOV     A,#0x1
   \   00008D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000090   7F02         MOV     R7,#0x2
   \   000092   02....       LJMP    ?BANKED_LEAVE_XDATA
   1889          
   1890          /*
   1891           * This function stub allows the next higher layer to be notified of
   1892           * a permit joining timeout.
   1893           */
   1894          /*********************************************************************
   1895           * @fn          ZDO_ProcessMgmtPermitJoinTimeout
   1896           *
   1897           * @brief       This function stub allows the next higher layer to be
   1898           *              notified of a permit joining timeout. Currently, this
   1899           *              directly bypasses the APS layer.
   1900           *
   1901           * @param       none
   1902           *
   1903           * @return      none
   1904           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1905          void ZDO_ProcessMgmtPermitJoinTimeout( void )
   \                     NLME_PermitJoiningTimeout:
   1906          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1907            #if defined( ZDO_MGMT_PERMIT_JOIN_RESPONSE )
   1908            // Currently, only the ZDSecMgr needs to be notified
   1909            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1910            {
   1911              ZDSecMgrPermitJoiningTimeout();
   1912            }
   1913            #endif
   1914          }
   \   000000   02....       LJMP    ?BRET
   1915          
   1916          /*********************************************************************
   1917           * @fn          ZDO_ProcessUserDescReq
   1918           *
   1919           * @brief       This function finishes the processing of the User
   1920           *              Descriptor Request and generates the response.
   1921           *
   1922           * @param       inMsg - incoming message (request)
   1923           *
   1924           * @return      none
   1925           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1926          void ZDO_ProcessUserDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessUserDescReq:
   1927          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1928            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \   00000E   EE           MOV     A,R6
   \   00000F   2413         ADD     A,#0x13
   \   000011   F582         MOV     DPL,A
   \   000013   E4           CLR     A
   \   000014   3F           ADDC    A,R7
   \   000015   F583         MOV     DPH,A
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F8           MOV     R0,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F583         MOV     DPH,A
   \   00001D   8882         MOV     DPL,R0
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   FA           MOV     R2,A
   \   000021   7B00         MOV     R3,#0x0
   \   000023   EE           MOV     A,R6
   \   000024   2413         ADD     A,#0x13
   \   000026   F582         MOV     DPL,A
   \   000028   E4           CLR     A
   \   000029   3F           ADDC    A,R7
   \   00002A   F583         MOV     DPH,A
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F8           MOV     R0,A
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F583         MOV     DPH,A
   \   000032   8882         MOV     DPL,R0
   \   000034   A3           INC     DPTR
   \   000035   E0           MOVX    A,@DPTR
   \   000036   F8           MOV     R0,A
   \   000037   7900         MOV     R1,#0x0
   \   000039   E4           CLR     A
   \   00003A   C8           XCH     A,R0
   \   00003B   F9           MOV     R1,A
   \   00003C   EA           MOV     A,R2
   \   00003D   28           ADD     A,R0
   \   00003E   F5..         MOV     ?V0,A
   \   000040   EB           MOV     A,R3
   \   000041   39           ADDC    A,R1
   \   000042   F5..         MOV     ?V1,A
   1929            UserDescriptorFormat_t userDesc;
   1930          
   1931            if ( (aoi == ZDAppNwkAddr.addr.shortAddr) && (ZSUCCESS == osal_nv_read(
   1932                       ZCD_NV_USERDESC, 0, sizeof(UserDescriptorFormat_t), &userDesc )) )
   \   000044   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000047   E0           MOVX    A,@DPTR
   \   000048   65..         XRL     A,?V0
   \   00004A   7004         JNZ     ??ZDO_ProcessUserDescReq_0
   \   00004C   A3           INC     DPTR
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   65..         XRL     A,?V1
   \                     ??ZDO_ProcessUserDescReq_0:
   \   000050   7062         JNZ     ??ZDO_ProcessUserDescReq_1
   \   000052                ; Setup parameters for call to function osal_nv_read
   \   000052   A8..         MOV     R0,?XSP + 0
   \   000054   A9..         MOV     R1,?XSP + 1
   \   000056   88..         MOV     ?V2,R0
   \   000058   89..         MOV     ?V3,R1
   \   00005A   78..         MOV     R0,#?V2
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005F   75..11       MOV     ?V2,#0x11
   \   000062   75..00       MOV     ?V3,#0x0
   \   000065   78..         MOV     R0,#?V2
   \   000067   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006A   7C00         MOV     R4,#0x0
   \   00006C   7D00         MOV     R5,#0x0
   \   00006E   7A81         MOV     R2,#-0x7f
   \   000070   7B00         MOV     R3,#0x0
   \   000072   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000075   7404         MOV     A,#0x4
   \   000077   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007A   E9           MOV     A,R1
   \   00007B   7037         JNZ     ??ZDO_ProcessUserDescReq_1
   1933            {
   1934              ZDP_UserDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), aoi, &userDesc, false );
   \   00007D                ; Setup parameters for call to function ZDP_UserDescRsp
   \   00007D   75..00       MOV     ?V2,#0x0
   \   000080   78..         MOV     R0,#?V2
   \   000082   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000085   7401         MOV     A,#0x1
   \   000087   12....       LCALL   ?XSTACK_DISP100_8
   \   00008A   88..         MOV     ?V2,R0
   \   00008C   89..         MOV     ?V3,R1
   \   00008E   78..         MOV     R0,#?V2
   \   000090   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000093   AC..         MOV     R4,?V0
   \   000095   AD..         MOV     R5,?V1
   \   000097   EE           MOV     A,R6
   \   000098   2402         ADD     A,#0x2
   \   00009A   FA           MOV     R2,A
   \   00009B   E4           CLR     A
   \   00009C   3F           ADDC    A,R7
   \   00009D   FB           MOV     R3,A
   \   00009E   EE           MOV     A,R6
   \   00009F   240F         ADD     A,#0xf
   \   0000A1   F582         MOV     DPL,A
   \   0000A3   E4           CLR     A
   \   0000A4   3F           ADDC    A,R7
   \   0000A5   F583         MOV     DPH,A
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   F9           MOV     R1,A
   \   0000A9   12....       LCALL   `??ZDP_UserDescRsp::?relay`; Banked call to: ZDP_UserDescRsp
   \   0000AC   7403         MOV     A,#0x3
   \   0000AE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B1   E9           MOV     A,R1
   \   0000B2   8038         SJMP    ??ZDO_ProcessUserDescReq_2
   1935            }
   1936            else
   1937            {
   1938              ZDP_GenericRsp(inMsg->TransSeq, &(inMsg->srcAddr),
   1939                     ZDP_NOT_SUPPORTED, aoi, User_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessUserDescReq_1:
   \   0000B4                ; Setup parameters for call to function ZDP_GenericRsp
   \   0000B4   75..11       MOV     ?V2,#0x11
   \   0000B7   75..80       MOV     ?V3,#-0x80
   \   0000BA   78..         MOV     R0,#?V2
   \   0000BC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000BF   78..         MOV     R0,#?V0
   \   0000C1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C4   EE           MOV     A,R6
   \   0000C5   240E         ADD     A,#0xe
   \   0000C7   F582         MOV     DPL,A
   \   0000C9   E4           CLR     A
   \   0000CA   3F           ADDC    A,R7
   \   0000CB   F583         MOV     DPH,A
   \   0000CD   E0           MOVX    A,@DPTR
   \   0000CE   FD           MOV     R5,A
   \   0000CF   7C84         MOV     R4,#-0x7c
   \   0000D1   EE           MOV     A,R6
   \   0000D2   2402         ADD     A,#0x2
   \   0000D4   FA           MOV     R2,A
   \   0000D5   E4           CLR     A
   \   0000D6   3F           ADDC    A,R7
   \   0000D7   FB           MOV     R3,A
   \   0000D8   EE           MOV     A,R6
   \   0000D9   240F         ADD     A,#0xf
   \   0000DB   F582         MOV     DPL,A
   \   0000DD   E4           CLR     A
   \   0000DE   3F           ADDC    A,R7
   \   0000DF   F583         MOV     DPH,A
   \   0000E1   E0           MOVX    A,@DPTR
   \   0000E2   F9           MOV     R1,A
   \   0000E3   12....       LCALL   `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
   \   0000E6   7404         MOV     A,#0x4
   \   0000E8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000EB   E9           MOV     A,R1
   1940            }
   1941          }
   \                     ??ZDO_ProcessUserDescReq_2:
   \   0000EC   7411         MOV     A,#0x11
   \   0000EE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000F1   7F04         MOV     R7,#0x4
   \   0000F3   02....       LJMP    ?BANKED_LEAVE_XDATA
   1942          
   1943          /*********************************************************************
   1944           * @fn          ZDO_ProcessUserDescSet
   1945           *
   1946           * @brief       This function finishes the processing of the User
   1947           *              Descriptor Set and generates the response.
   1948           *
   1949           * @param       inMsg - incoming message (request)
   1950           *
   1951           * @return      none
   1952           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1953          void ZDO_ProcessUserDescSet( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessUserDescSet:
   1954          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV     A,#-0x14
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1955            uint8 *msg;
   1956            uint16 aoi;
   1957            UserDescriptorFormat_t userDesc;
   1958            uint8 outMsg[3];
   1959            uint8 status;
   1960          
   1961            msg = inMsg->asdu;
   \   00000E   EE           MOV     A,R6
   \   00000F   2413         ADD     A,#0x13
   \   000011   F582         MOV     DPL,A
   \   000013   E4           CLR     A
   \   000014   3F           ADDC    A,R7
   \   000015   F583         MOV     DPH,A
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F8           MOV     R0,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F9           MOV     R1,A
   1962            aoi = BUILD_UINT16( msg[0], msg[1] );
   \   00001C   8882         MOV     DPL,R0
   \   00001E   8983         MOV     DPH,R1
   \   000020   E0           MOVX    A,@DPTR
   \   000021   FC           MOV     R4,A
   \   000022   7D00         MOV     R5,#0x0
   \   000024   8882         MOV     DPL,R0
   \   000026   8983         MOV     DPH,R1
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   FA           MOV     R2,A
   \   00002B   7B00         MOV     R3,#0x0
   \   00002D   E4           CLR     A
   \   00002E   CA           XCH     A,R2
   \   00002F   FB           MOV     R3,A
   \   000030   EC           MOV     A,R4
   \   000031   2A           ADD     A,R2
   \   000032   F5..         MOV     ?V0,A
   \   000034   ED           MOV     A,R5
   \   000035   3B           ADDC    A,R3
   \   000036   F5..         MOV     ?V1,A
   1963          
   1964            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \   000038   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   65..         XRL     A,?V0
   \   00003E   7004         JNZ     ??ZDO_ProcessUserDescSet_0
   \   000040   A3           INC     DPTR
   \   000041   E0           MOVX    A,@DPTR
   \   000042   65..         XRL     A,?V1
   \                     ??ZDO_ProcessUserDescSet_0:
   \   000044   6003         JZ      $+5
   \   000046   02....       LJMP    ??ZDO_ProcessUserDescSet_1 & 0xFFFF
   1965            {
   1966              userDesc.len = (msg[2] < AF_MAX_USER_DESCRIPTOR_LEN) ? msg[2] : AF_MAX_USER_DESCRIPTOR_LEN;
   \   000049   8882         MOV     DPL,R0
   \   00004B   8983         MOV     DPH,R1
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   C3           CLR     C
   \   000051   9410         SUBB    A,#0x10
   \   000053   5013         JNC     ??ZDO_ProcessUserDescSet_2
   \   000055   8882         MOV     DPL,R0
   \   000057   8983         MOV     DPH,R1
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   C0E0         PUSH    A
   \   00005E   7403         MOV     A,#0x3
   \   000060   12....       LCALL   ?XSTACK_DISP0_8
   \   000063   D0E0         POP     A
   \   000065   F0           MOVX    @DPTR,A
   \   000066   8008         SJMP    ??ZDO_ProcessUserDescSet_3
   \                     ??ZDO_ProcessUserDescSet_2:
   \   000068   7403         MOV     A,#0x3
   \   00006A   12....       LCALL   ?XSTACK_DISP0_8
   \   00006D   7410         MOV     A,#0x10
   \   00006F   F0           MOVX    @DPTR,A
   1967              msg ++;  // increment one for the length field
   \                     ??ZDO_ProcessUserDescSet_3:
   \   000070   8882         MOV     DPL,R0
   \   000072   8983         MOV     DPH,R1
   \   000074   A3           INC     DPTR
   \   000075   A882         MOV     R0,DPL
   \   000077   A983         MOV     R1,DPH
   1968          
   1969              osal_memcpy( userDesc.desc, &msg[2], userDesc.len );
   \   000079                ; Setup parameters for call to function osal_memcpy
   \   000079   8882         MOV     DPL,R0
   \   00007B   8983         MOV     DPH,R1
   \   00007D   A3           INC     DPTR
   \   00007E   A3           INC     DPTR
   \   00007F   A982         MOV     R1,DPL
   \   000081   AA83         MOV     R2,DPH
   \   000083   7B00         MOV     R3,#0x0
   \   000085   89..         MOV     ?V4,R1
   \   000087   8A..         MOV     ?V5,R2
   \   000089   8B..         MOV     ?V6,R3
   \   00008B   78..         MOV     R0,#?V4
   \   00008D   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000090   7406         MOV     A,#0x6
   \   000092   12....       LCALL   ?XSTACK_DISP0_8
   \   000095   E0           MOVX    A,@DPTR
   \   000096   FC           MOV     R4,A
   \   000097   7D00         MOV     R5,#0x0
   \   000099   7407         MOV     A,#0x7
   \   00009B   12....       LCALL   ?XSTACK_DISP0_8
   \   00009E   AA82         MOV     R2,DPL
   \   0000A0   AB83         MOV     R3,DPH
   \   0000A2   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000A5   7403         MOV     A,#0x3
   \   0000A7   12....       LCALL   ?DEALLOC_XSTACK8
   1970              osal_nv_write( ZCD_NV_USERDESC, 0, sizeof(UserDescriptorFormat_t), &userDesc );
   \   0000AA                ; Setup parameters for call to function osal_nv_write
   \   0000AA   7403         MOV     A,#0x3
   \   0000AC   12....       LCALL   ?XSTACK_DISP100_8
   \   0000AF   88..         MOV     ?V2,R0
   \   0000B1   89..         MOV     ?V3,R1
   \   0000B3   78..         MOV     R0,#?V2
   \   0000B5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B8   75..11       MOV     ?V2,#0x11
   \   0000BB   75..00       MOV     ?V3,#0x0
   \   0000BE   78..         MOV     R0,#?V2
   \   0000C0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C3   7C00         MOV     R4,#0x0
   \   0000C5   7D00         MOV     R5,#0x0
   \   0000C7   7A81         MOV     R2,#-0x7f
   \   0000C9   7B00         MOV     R3,#0x0
   \   0000CB   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000CE   7404         MOV     A,#0x4
   \   0000D0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D3   E9           MOV     A,R1
   1971              if ( userDesc.len != 0 )
   \   0000D4   7403         MOV     A,#0x3
   \   0000D6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D9   E0           MOVX    A,@DPTR
   \   0000DA   6009         JZ      ??ZDO_ProcessUserDescSet_4
   1972              {
   1973                ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
   \   0000DC   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   0000DF   E0           MOVX    A,@DPTR
   \   0000E0   D2E4         SETB    0xE0 /* A   */.4
   \   0000E2   F0           MOVX    @DPTR,A
   \   0000E3   8007         SJMP    ??ZDO_ProcessUserDescSet_5
   1974              }
   1975              else
   1976              {
   1977                ZDO_Config_Node_Descriptor.UserDescAvail = FALSE;
   \                     ??ZDO_ProcessUserDescSet_4:
   \   0000E5   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   0000E8   E0           MOVX    A,@DPTR
   \   0000E9   C2E4         CLR     0xE0 /* A   */.4
   \   0000EB   F0           MOVX    @DPTR,A
   1978              }
   1979          
   1980              status = ZDP_SUCCESS;
   \                     ??ZDO_ProcessUserDescSet_5:
   \   0000EC   85..82       MOV     DPL,?XSP + 0
   \   0000EF   85..83       MOV     DPH,?XSP + 1
   \   0000F2   7400         MOV     A,#0x0
   \   0000F4   F0           MOVX    @DPTR,A
   \   0000F5   8009         SJMP    ??ZDO_ProcessUserDescSet_6
   1981            }
   1982            else
   1983            {
   1984              status =  ZDP_NOT_SUPPORTED;
   \                     ??ZDO_ProcessUserDescSet_1:
   \   0000F7   85..82       MOV     DPL,?XSP + 0
   \   0000FA   85..83       MOV     DPH,?XSP + 1
   \   0000FD   7484         MOV     A,#-0x7c
   \   0000FF   F0           MOVX    @DPTR,A
   1985            }
   1986          
   1987            outMsg[0] = status;
   1988            outMsg[1] = LO_UINT16( aoi );
   \                     ??ZDO_ProcessUserDescSet_6:
   \   000100   E5..         MOV     A,?V0
   \   000102   C0E0         PUSH    A
   \   000104   7401         MOV     A,#0x1
   \   000106   12....       LCALL   ?XSTACK_DISP0_8
   \   000109   D0E0         POP     A
   \   00010B   F0           MOVX    @DPTR,A
   1989            outMsg[2] = LO_UINT16( aoi );
   \   00010C   E5..         MOV     A,?V0
   \   00010E   C0E0         PUSH    A
   \   000110   7402         MOV     A,#0x2
   \   000112   12....       LCALL   ?XSTACK_DISP0_8
   \   000115   D0E0         POP     A
   \   000117   F0           MOVX    @DPTR,A
   1990          
   1991            ZDP_SendData( &(inMsg->TransSeq), &(inMsg->srcAddr), User_Desc_conf, 3, outMsg,
   1992                         inMsg->SecurityUse );
   \   000118                ; Setup parameters for call to function ZDP_SendData
   \   000118   EE           MOV     A,R6
   \   000119   240E         ADD     A,#0xe
   \   00011B   F582         MOV     DPL,A
   \   00011D   E4           CLR     A
   \   00011E   3F           ADDC    A,R7
   \   00011F   F583         MOV     DPH,A
   \   000121   E0           MOVX    A,@DPTR
   \   000122   F5..         MOV     ?V0,A
   \   000124   78..         MOV     R0,#?V0
   \   000126   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000129   7401         MOV     A,#0x1
   \   00012B   12....       LCALL   ?XSTACK_DISP100_8
   \   00012E   88..         MOV     ?V0,R0
   \   000130   89..         MOV     ?V1,R1
   \   000132   78..         MOV     R0,#?V0
   \   000134   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000137   75..14       MOV     ?V0,#0x14
   \   00013A   75..80       MOV     ?V1,#-0x80
   \   00013D   78..         MOV     R0,#?V0
   \   00013F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000142   7903         MOV     R1,#0x3
   \   000144   EE           MOV     A,R6
   \   000145   2402         ADD     A,#0x2
   \   000147   FC           MOV     R4,A
   \   000148   E4           CLR     A
   \   000149   3F           ADDC    A,R7
   \   00014A   FD           MOV     R5,A
   \   00014B   EE           MOV     A,R6
   \   00014C   240F         ADD     A,#0xf
   \   00014E   FA           MOV     R2,A
   \   00014F   E4           CLR     A
   \   000150   3F           ADDC    A,R7
   \   000151   FB           MOV     R3,A
   \   000152   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   000155   7405         MOV     A,#0x5
   \   000157   12....       LCALL   ?DEALLOC_XSTACK8
   \   00015A   E9           MOV     A,R1
   1993          }
   \   00015B   7414         MOV     A,#0x14
   \   00015D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000160   7F07         MOV     R7,#0x7
   \   000162   02....       LJMP    ?BANKED_LEAVE_XDATA
   1994          
   1995          /*********************************************************************
   1996           * @fn          ZDO_ProcessDeviceAnnce
   1997           *
   1998           * @brief       This function processes a device annouce message.
   1999           *
   2000           * @param       inMsg - incoming message
   2001           *
   2002           * @return      none
   2003           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2004          void ZDO_ProcessDeviceAnnce( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessDeviceAnnce:
   2005          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 32
   \   000005   74E0         MOV     A,#-0x20
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   2006            ZDO_DeviceAnnce_t Annce;
   2007            AddrMgrEntry_t addrEntry;
   2008            uint8 parentExt[Z_EXTADDR_LEN];
   2009          
   2010            // Parse incoming message
   2011            ZDO_ParseDeviceAnnce( inMsg, &Annce );
   \   00000E                ; Setup parameters for call to function ZDO_ParseDeviceAnnce
   \   00000E   AC..         MOV     R4,?XSP + 0
   \   000010   AD..         MOV     R5,?XSP + 1
   \   000012   EE           MOV     A,R6
   \   000013   FA           MOV     R2,A
   \   000014   EF           MOV     A,R7
   \   000015   FB           MOV     R3,A
   \   000016   12....       LCALL   `??ZDO_ParseDeviceAnnce::?relay`; Banked call to: ZDO_ParseDeviceAnnce
   2012          
   2013            if ( ZSTACK_END_DEVICE_BUILD )
   \   000019   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   6402         XRL     A,#0x2
   \   00001F   7037         JNZ     ??ZDO_ProcessDeviceAnnce_0
   2014            {
   2015              // Make sure the message didn't come from myself - end device only
   2016              if ( osal_ExtAddrEqual( NLME_GetExtAddr(), Annce.extAddr ) && Annce.nwkAddr == NLME_GetShortAddr() )
   \   000021                ; Setup parameters for call to function NLME_GetExtAddr
   \   000021   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   000024   8A..         MOV     ?V0,R2
   \   000026   8B..         MOV     ?V1,R3
   \   000028   AA..         MOV     R2,?V0
   \   00002A   AB..         MOV     R3,?V1
   \   00002C                ; Setup parameters for call to function sAddrExtCmp
   \   00002C   7402         MOV     A,#0x2
   \   00002E   12....       LCALL   ?XSTACK_DISP0_8
   \   000031   AC82         MOV     R4,DPL
   \   000033   AD83         MOV     R5,DPH
   \   000035   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000038   E9           MOV     A,R1
   \   000039   601D         JZ      ??ZDO_ProcessDeviceAnnce_0
   \   00003B                ; Setup parameters for call to function NLME_GetShortAddr
   \   00003B   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00003E   8A..         MOV     ?V0,R2
   \   000040   8B..         MOV     ?V1,R3
   \   000042   A8..         MOV     R0,?V0
   \   000044   A9..         MOV     R1,?V1
   \   000046   85..82       MOV     DPL,?XSP + 0
   \   000049   85..83       MOV     DPH,?XSP + 1
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   68           XRL     A,R0
   \   00004E   7003         JNZ     ??ZDO_ProcessDeviceAnnce_1
   \   000050   A3           INC     DPTR
   \   000051   E0           MOVX    A,@DPTR
   \   000052   69           XRL     A,R1
   \                     ??ZDO_ProcessDeviceAnnce_1:
   \   000053   7003         JNZ     $+5
   \   000055   02....       LJMP    ??ZDO_ProcessDeviceAnnce_2 & 0xFFFF
   2017              {
   2018                return;
   2019              }
   2020            }
   2021          
   2022          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
   2023            // Clean up the neighbor table
   2024            nwkNeighborRemoveAllStranded();
   \                     ??ZDO_ProcessDeviceAnnce_0:
   \   000058                ; Setup parameters for call to function nwkNeighborRemoveAllStranded
   \   000058   12....       LCALL   `??nwkNeighborRemoveAllStranded::?relay`; Banked call to: nwkNeighborRemoveAllStranded
   2025          
   2026            // If address conflict is detected, no need to update the address manager
   2027            if ( NLME_CheckNewAddrSet( Annce.nwkAddr, Annce.extAddr )== ZFailure )
   \   00005B                ; Setup parameters for call to function NLME_CheckNewAddrSet
   \   00005B   7402         MOV     A,#0x2
   \   00005D   12....       LCALL   ?XSTACK_DISP0_8
   \   000060   AC82         MOV     R4,DPL
   \   000062   AD83         MOV     R5,DPH
   \   000064   85..82       MOV     DPL,?XSP + 0
   \   000067   85..83       MOV     DPH,?XSP + 1
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   FA           MOV     R2,A
   \   00006C   A3           INC     DPTR
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   FB           MOV     R3,A
   \   00006F   12....       LCALL   `??NLME_CheckNewAddrSet::?relay`; Banked call to: NLME_CheckNewAddrSet
   \   000072   E9           MOV     A,R1
   \   000073   6401         XRL     A,#0x1
   \   000075   7003         JNZ     $+5
   \   000077   02....       LJMP    ??ZDO_ProcessDeviceAnnce_2 & 0xFFFF
   2028            {
   2029              return;
   2030            }
   2031          #endif
   2032          
   2033          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
   2034            // Check for parent's address
   2035            NLME_GetCoordExtAddr( parentExt );
   \   00007A                ; Setup parameters for call to function NLME_GetCoordExtAddr
   \   00007A   7418         MOV     A,#0x18
   \   00007C   12....       LCALL   ?XSTACK_DISP101_8
   \   00007F   12....       LCALL   `??NLME_GetCoordExtAddr::?relay`; Banked call to: NLME_GetCoordExtAddr
   2036            if ( osal_ExtAddrEqual( parentExt, Annce.extAddr ) )
   \   000082                ; Setup parameters for call to function sAddrExtCmp
   \   000082   7402         MOV     A,#0x2
   \   000084   12....       LCALL   ?XSTACK_DISP0_8
   \   000087   AC82         MOV     R4,DPL
   \   000089   AD83         MOV     R5,DPH
   \   00008B   7418         MOV     A,#0x18
   \   00008D   12....       LCALL   ?XSTACK_DISP101_8
   \   000090   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000093   E9           MOV     A,R1
   \   000094   6037         JZ      ??ZDO_ProcessDeviceAnnce_3
   2037            {
   2038              if ( Annce.nwkAddr != NLME_GetCoordShortAddr() )
   \   000096                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   000096   12....       LCALL   `??NLME_GetCoordShortAddr::?relay`; Banked call to: NLME_GetCoordShortAddr
   \   000099   8A..         MOV     ?V0,R2
   \   00009B   8B..         MOV     ?V1,R3
   \   00009D   A8..         MOV     R0,?V0
   \   00009F   A9..         MOV     R1,?V1
   \   0000A1   85..82       MOV     DPL,?XSP + 0
   \   0000A4   85..83       MOV     DPH,?XSP + 1
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   68           XRL     A,R0
   \   0000A9   7003         JNZ     ??ZDO_ProcessDeviceAnnce_4
   \   0000AB   A3           INC     DPTR
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   69           XRL     A,R1
   \                     ??ZDO_ProcessDeviceAnnce_4:
   \   0000AE   601D         JZ      ??ZDO_ProcessDeviceAnnce_3
   2039              {
   2040                // Set the Parent's MAC's new short address
   2041                _NIB.nwkCoordAddress = Annce.nwkAddr;
   \   0000B0   85..82       MOV     DPL,?XSP + 0
   \   0000B3   85..83       MOV     DPH,?XSP + 1
   \   0000B6   E0           MOVX    A,@DPTR
   \   0000B7   F8           MOV     R0,A
   \   0000B8   A3           INC     DPTR
   \   0000B9   E0           MOVX    A,@DPTR
   \   0000BA   F9           MOV     R1,A
   \   0000BB   90....       MOV     DPTR,#_NIB + 23
   \   0000BE   E8           MOV     A,R0
   \   0000BF   F0           MOVX    @DPTR,A
   \   0000C0   A3           INC     DPTR
   \   0000C1   E9           MOV     A,R1
   \   0000C2   F0           MOVX    @DPTR,A
   2042                ZMacSetReq( ZMacCoordShortAddress, (byte*)&(_NIB.nwkCoordAddress) );
   \   0000C3                ; Setup parameters for call to function ZMacSetReq
   \   0000C3   7A..         MOV     R2,#(_NIB + 23) & 0xff
   \   0000C5   7B..         MOV     R3,#((_NIB + 23) >> 8) & 0xff
   \   0000C7   794B         MOV     R1,#0x4b
   \   0000C9   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   \   0000CC   E9           MOV     A,R1
   2043              }
   2044            }
   2045          
   2046            if ( ZSTACK_ROUTER_BUILD )
   \                     ??ZDO_ProcessDeviceAnnce_3:
   \   0000CD   90....       MOV     DPTR,#zgDeviceLogicalType
   \   0000D0   E0           MOVX    A,@DPTR
   \   0000D1   600B         JZ      ??ZDO_ProcessDeviceAnnce_5
   \   0000D3   90....       MOV     DPTR,#zgDeviceLogicalType
   \   0000D6   E0           MOVX    A,@DPTR
   \   0000D7   6401         XRL     A,#0x1
   \   0000D9   6003         JZ      $+5
   \   0000DB   02....       LJMP    ??ZDO_ProcessDeviceAnnce_6 & 0xFFFF
   2047            {
   2048              // If the device annce comes from a end device child that has moved
   2049              // to another parent, remove it from associated device list
   2050          
   2051              // If the dev annce is coming from other device's children,
   2052              // (The dev annce from its own children shall be unicast to itself,
   2053              // So check the mac destination address)
   2054              // Remove it from the associated device list. If it is not
   2055              // a child, no action will be taken in AssocRemove() anyway.
   2056              if ( inMsg->macDestAddr != NLME_GetShortAddr() )
   \                     ??ZDO_ProcessDeviceAnnce_5:
   \   0000DE                ; Setup parameters for call to function NLME_GetShortAddr
   \   0000DE   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   0000E1   8A..         MOV     ?V0,R2
   \   0000E3   8B..         MOV     ?V1,R3
   \   0000E5   A8..         MOV     R0,?V0
   \   0000E7   A9..         MOV     R1,?V1
   \   0000E9   EE           MOV     A,R6
   \   0000EA   2411         ADD     A,#0x11
   \   0000EC   F582         MOV     DPL,A
   \   0000EE   E4           CLR     A
   \   0000EF   3F           ADDC    A,R7
   \   0000F0   F583         MOV     DPH,A
   \   0000F2   E0           MOVX    A,@DPTR
   \   0000F3   68           XRL     A,R0
   \   0000F4   7003         JNZ     ??ZDO_ProcessDeviceAnnce_7
   \   0000F6   A3           INC     DPTR
   \   0000F7   E0           MOVX    A,@DPTR
   \   0000F8   69           XRL     A,R1
   \                     ??ZDO_ProcessDeviceAnnce_7:
   \   0000F9   606C         JZ      ??ZDO_ProcessDeviceAnnce_8
   2057              {
   2058                associated_devices_t *dev_ptr;
   2059          
   2060                // If it's an end device child
   2061                dev_ptr = AssocGetWithExt( Annce.extAddr );
   \   0000FB                ; Setup parameters for call to function AssocGetWithExt
   \   0000FB   7402         MOV     A,#0x2
   \   0000FD   12....       LCALL   ?XSTACK_DISP0_8
   \   000100   AA82         MOV     R2,DPL
   \   000102   AB83         MOV     R3,DPH
   \   000104   12....       LCALL   `??AssocGetWithExt::?relay`; Banked call to: AssocGetWithExt
   \   000107   8A..         MOV     ?V0,R2
   \   000109   8B..         MOV     ?V1,R3
   \   00010B   A8..         MOV     R0,?V0
   \   00010D   A9..         MOV     R1,?V1
   2062                if ( dev_ptr )
   \   00010F   E8           MOV     A,R0
   \   000110   49           ORL     A,R1
   \   000111   6027         JZ      ??ZDO_ProcessDeviceAnnce_9
   2063                {
   2064                  if ( dev_ptr->nodeRelation == CHILD_RFD ||
   2065                       dev_ptr->nodeRelation == CHILD_RFD_RX_IDLE )
   \   000113   8882         MOV     DPL,R0
   \   000115   8983         MOV     DPH,R1
   \   000117   A3           INC     DPTR
   \   000118   A3           INC     DPTR
   \   000119   A3           INC     DPTR
   \   00011A   A3           INC     DPTR
   \   00011B   E0           MOVX    A,@DPTR
   \   00011C   6401         XRL     A,#0x1
   \   00011E   600D         JZ      ??ZDO_ProcessDeviceAnnce_10
   \   000120   8882         MOV     DPL,R0
   \   000122   8983         MOV     DPH,R1
   \   000124   A3           INC     DPTR
   \   000125   A3           INC     DPTR
   \   000126   A3           INC     DPTR
   \   000127   A3           INC     DPTR
   \   000128   E0           MOVX    A,@DPTR
   \   000129   6402         XRL     A,#0x2
   \   00012B   700D         JNZ     ??ZDO_ProcessDeviceAnnce_9
   2066                  {
   2067                    AssocRemove( Annce.extAddr );
   \                     ??ZDO_ProcessDeviceAnnce_10:
   \   00012D                ; Setup parameters for call to function AssocRemove
   \   00012D   7402         MOV     A,#0x2
   \   00012F   12....       LCALL   ?XSTACK_DISP0_8
   \   000132   AA82         MOV     R2,DPL
   \   000134   AB83         MOV     R3,DPH
   \   000136   12....       LCALL   `??AssocRemove::?relay`; Banked call to: AssocRemove
   \   000139   E9           MOV     A,R1
   2068                  }
   2069                }
   2070          
   2071          #if defined ( ZIGBEE_CHILD_AGING )
   2072                // Remove the address from the SrcMatch table,
   2073                // just in case the device was aged out by Child Management Table process
   2074                if ( ( pNwkNotMyChildListDelete != NULL ) &&
   2075                     ( zgChildAgingEnable == TRUE ) )
   \                     ??ZDO_ProcessDeviceAnnce_9:
   \   00013A   90....       MOV     DPTR,#pNwkNotMyChildListDelete
   \   00013D   E0           MOVX    A,@DPTR
   \   00013E   F8           MOV     R0,A
   \   00013F   A3           INC     DPTR
   \   000140   E0           MOVX    A,@DPTR
   \   000141   F9           MOV     R1,A
   \   000142   E8           MOV     A,R0
   \   000143   49           ORL     A,R1
   \   000144   6021         JZ      ??ZDO_ProcessDeviceAnnce_8
   \   000146   90....       MOV     DPTR,#zgChildAgingEnable
   \   000149   E0           MOVX    A,@DPTR
   \   00014A   6401         XRL     A,#0x1
   \   00014C   7019         JNZ     ??ZDO_ProcessDeviceAnnce_8
   2076                {
   2077                  pNwkNotMyChildListDelete( Annce.nwkAddr );
   \   00014E                ; Setup parameters for indirect call
   \   00014E   85..82       MOV     DPL,?XSP + 0
   \   000151   85..83       MOV     DPH,?XSP + 1
   \   000154   E0           MOVX    A,@DPTR
   \   000155   FA           MOV     R2,A
   \   000156   A3           INC     DPTR
   \   000157   E0           MOVX    A,@DPTR
   \   000158   FB           MOV     R3,A
   \   000159   90....       MOV     DPTR,#pNwkNotMyChildListDelete
   \   00015C   E0           MOVX    A,@DPTR
   \   00015D   F8           MOV     R0,A
   \   00015E   A3           INC     DPTR
   \   00015F   E0           MOVX    A,@DPTR
   \   000160   F583         MOV     DPH,A
   \   000162   8882         MOV     DPL,R0
   \   000164   12....       LCALL   ?CALL_IND
   2078                }
   2079          #endif // ZIGBEE_CHILD_AGING
   2080              }
   2081          
   2082              if ( Annce.nwkAddr != NLME_GetShortAddr() )
   \                     ??ZDO_ProcessDeviceAnnce_8:
   \   000167                ; Setup parameters for call to function NLME_GetShortAddr
   \   000167   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00016A   8A..         MOV     ?V0,R2
   \   00016C   8B..         MOV     ?V1,R3
   \   00016E   A8..         MOV     R0,?V0
   \   000170   A9..         MOV     R1,?V1
   \   000172   85..82       MOV     DPL,?XSP + 0
   \   000175   85..83       MOV     DPH,?XSP + 1
   \   000178   E0           MOVX    A,@DPTR
   \   000179   68           XRL     A,R0
   \   00017A   7003         JNZ     ??ZDO_ProcessDeviceAnnce_11
   \   00017C   A3           INC     DPTR
   \   00017D   E0           MOVX    A,@DPTR
   \   00017E   69           XRL     A,R1
   \                     ??ZDO_ProcessDeviceAnnce_11:
   \   00017F   601D         JZ      ??ZDO_ProcessDeviceAnnce_6
   2083              {
   2084                // If an associated device is found with matched extended Address,
   2085                // update its short address
   2086                if ( AssocChangeNwkAddr( Annce.nwkAddr, Annce.extAddr ) )
   \   000181                ; Setup parameters for call to function AssocChangeNwkAddr
   \   000181   7402         MOV     A,#0x2
   \   000183   12....       LCALL   ?XSTACK_DISP0_8
   \   000186   AC82         MOV     R4,DPL
   \   000188   AD83         MOV     R5,DPH
   \   00018A   85..82       MOV     DPL,?XSP + 0
   \   00018D   85..83       MOV     DPH,?XSP + 1
   \   000190   E0           MOVX    A,@DPTR
   \   000191   FA           MOV     R2,A
   \   000192   A3           INC     DPTR
   \   000193   E0           MOVX    A,@DPTR
   \   000194   FB           MOV     R3,A
   \   000195   12....       LCALL   `??AssocChangeNwkAddr::?relay`; Banked call to: AssocChangeNwkAddr
   \   000198   E9           MOV     A,R1
   \   000199   6003         JZ      ??ZDO_ProcessDeviceAnnce_6
   2087                {
   2088                  // Set event to save NV
   2089                  ZDApp_NVUpdate();
   \   00019B                ; Setup parameters for call to function ZDApp_NVUpdate
   \   00019B   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   2090                }
   2091              }
   2092            }
   2093          
   2094            // Update the neighbor table
   2095            nwkNeighborUpdateNwkAddr( Annce.nwkAddr, Annce.extAddr );
   \                     ??ZDO_ProcessDeviceAnnce_6:
   \   00019E                ; Setup parameters for call to function nwkNeighborUpdateNwkAddr
   \   00019E   7402         MOV     A,#0x2
   \   0001A0   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A3   AC82         MOV     R4,DPL
   \   0001A5   AD83         MOV     R5,DPH
   \   0001A7   85..82       MOV     DPL,?XSP + 0
   \   0001AA   85..83       MOV     DPH,?XSP + 1
   \   0001AD   E0           MOVX    A,@DPTR
   \   0001AE   FA           MOV     R2,A
   \   0001AF   A3           INC     DPTR
   \   0001B0   E0           MOVX    A,@DPTR
   \   0001B1   FB           MOV     R3,A
   \   0001B2   12....       LCALL   `??nwkNeighborUpdateNwkAddr::?relay`; Banked call to: nwkNeighborUpdateNwkAddr
   2096          
   2097            // Assume that the device has moved, remove existing routing entries
   2098            RTG_RemoveRtgEntry( Annce.nwkAddr, 0 );
   \   0001B5                ; Setup parameters for call to function RTG_RemoveRtgEntry
   \   0001B5   7900         MOV     R1,#0x0
   \   0001B7   85..82       MOV     DPL,?XSP + 0
   \   0001BA   85..83       MOV     DPH,?XSP + 1
   \   0001BD   E0           MOVX    A,@DPTR
   \   0001BE   FA           MOV     R2,A
   \   0001BF   A3           INC     DPTR
   \   0001C0   E0           MOVX    A,@DPTR
   \   0001C1   FB           MOV     R3,A
   \   0001C2   12....       LCALL   `??RTG_RemoveRtgEntry::?relay`; Banked call to: RTG_RemoveRtgEntry
   \   0001C5   E9           MOV     A,R1
   2099          
   2100          #endif // ZIGBEE_STOCHASTIC_ADDRESSING
   2101          
   2102            // Fill in the extended address in address manager if we don't have it already.
   2103            addrEntry.user = ADDRMGR_USER_DEFAULT;
   \   0001C6   740B         MOV     A,#0xb
   \   0001C8   12....       LCALL   ?XSTACK_DISP0_8
   \   0001CB   7400         MOV     A,#0x0
   \   0001CD   F0           MOVX    @DPTR,A
   2104            addrEntry.nwkAddr = Annce.nwkAddr;
   \   0001CE   85..82       MOV     DPL,?XSP + 0
   \   0001D1   85..83       MOV     DPH,?XSP + 1
   \   0001D4   E0           MOVX    A,@DPTR
   \   0001D5   F8           MOV     R0,A
   \   0001D6   A3           INC     DPTR
   \   0001D7   E0           MOVX    A,@DPTR
   \   0001D8   F9           MOV     R1,A
   \   0001D9   740C         MOV     A,#0xc
   \   0001DB   12....       LCALL   ?XSTACK_DISP0_8
   \   0001DE   E8           MOV     A,R0
   \   0001DF   F0           MOVX    @DPTR,A
   \   0001E0   A3           INC     DPTR
   \   0001E1   E9           MOV     A,R1
   \   0001E2   F0           MOVX    @DPTR,A
   2105            if ( AddrMgrEntryLookupNwk( &addrEntry ) )
   \   0001E3                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   0001E3   740B         MOV     A,#0xb
   \   0001E5   12....       LCALL   ?XSTACK_DISP101_8
   \   0001E8   12....       LCALL   `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
   \   0001EB   E9           MOV     A,R1
   \   0001EC   6040         JZ      ??ZDO_ProcessDeviceAnnce_12
   2106            {
   2107              osal_memset( parentExt, 0, Z_EXTADDR_LEN );
   \   0001EE                ; Setup parameters for call to function osal_memset
   \   0001EE   7C08         MOV     R4,#0x8
   \   0001F0   7D00         MOV     R5,#0x0
   \   0001F2   7900         MOV     R1,#0x0
   \   0001F4   7418         MOV     A,#0x18
   \   0001F6   12....       LCALL   ?XSTACK_DISP101_8
   \   0001F9   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2108              if ( osal_ExtAddrEqual( parentExt, addrEntry.extAddr ) )
   \   0001FC                ; Setup parameters for call to function sAddrExtCmp
   \   0001FC   740E         MOV     A,#0xe
   \   0001FE   12....       LCALL   ?XSTACK_DISP0_8
   \   000201   AC82         MOV     R4,DPL
   \   000203   AD83         MOV     R5,DPH
   \   000205   7418         MOV     A,#0x18
   \   000207   12....       LCALL   ?XSTACK_DISP101_8
   \   00020A   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   00020D   E9           MOV     A,R1
   \   00020E   601E         JZ      ??ZDO_ProcessDeviceAnnce_12
   2109              {
   2110                AddrMgrExtAddrSet( addrEntry.extAddr, Annce.extAddr );
   \   000210                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000210   7402         MOV     A,#0x2
   \   000212   12....       LCALL   ?XSTACK_DISP0_8
   \   000215   AC82         MOV     R4,DPL
   \   000217   AD83         MOV     R5,DPH
   \   000219   740E         MOV     A,#0xe
   \   00021B   12....       LCALL   ?XSTACK_DISP0_8
   \   00021E   AA82         MOV     R2,DPL
   \   000220   AB83         MOV     R3,DPH
   \   000222   12....       LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   2111                AddrMgrEntryUpdate( &addrEntry );
   \   000225                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000225   740B         MOV     A,#0xb
   \   000227   12....       LCALL   ?XSTACK_DISP101_8
   \   00022A   12....       LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   \   00022D   E9           MOV     A,R1
   2112              }
   2113            }
   2114          
   2115            // Update the short address in address manager if it's been changed
   2116            AddrMgrExtAddrSet( addrEntry.extAddr, Annce.extAddr );
   \                     ??ZDO_ProcessDeviceAnnce_12:
   \   00022E                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   00022E   7402         MOV     A,#0x2
   \   000230   12....       LCALL   ?XSTACK_DISP0_8
   \   000233   AC82         MOV     R4,DPL
   \   000235   AD83         MOV     R5,DPH
   \   000237   740E         MOV     A,#0xe
   \   000239   12....       LCALL   ?XSTACK_DISP0_8
   \   00023C   AA82         MOV     R2,DPL
   \   00023E   AB83         MOV     R3,DPH
   \   000240   12....       LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   2117            if ( AddrMgrEntryLookupExt( &addrEntry ) )
   \   000243                ; Setup parameters for call to function AddrMgrEntryLookupExt
   \   000243   740B         MOV     A,#0xb
   \   000245   12....       LCALL   ?XSTACK_DISP101_8
   \   000248   12....       LCALL   `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
   \   00024B   E9           MOV     A,R1
   \   00024C   6037         JZ      ??ZDO_ProcessDeviceAnnce_2
   2118            {
   2119              if ( addrEntry.nwkAddr != Annce.nwkAddr )
   \   00024E   740C         MOV     A,#0xc
   \   000250   12....       LCALL   ?XSTACK_DISP0_8
   \   000253   E0           MOVX    A,@DPTR
   \   000254   F8           MOV     R0,A
   \   000255   A3           INC     DPTR
   \   000256   E0           MOVX    A,@DPTR
   \   000257   F9           MOV     R1,A
   \   000258   85..82       MOV     DPL,?XSP + 0
   \   00025B   85..83       MOV     DPH,?XSP + 1
   \   00025E   E0           MOVX    A,@DPTR
   \   00025F   68           XRL     A,R0
   \   000260   7003         JNZ     ??ZDO_ProcessDeviceAnnce_13
   \   000262   A3           INC     DPTR
   \   000263   E0           MOVX    A,@DPTR
   \   000264   69           XRL     A,R1
   \                     ??ZDO_ProcessDeviceAnnce_13:
   \   000265   601E         JZ      ??ZDO_ProcessDeviceAnnce_2
   2120              {
   2121                addrEntry.nwkAddr = Annce.nwkAddr;
   \   000267   85..82       MOV     DPL,?XSP + 0
   \   00026A   85..83       MOV     DPH,?XSP + 1
   \   00026D   E0           MOVX    A,@DPTR
   \   00026E   F8           MOV     R0,A
   \   00026F   A3           INC     DPTR
   \   000270   E0           MOVX    A,@DPTR
   \   000271   F9           MOV     R1,A
   \   000272   740C         MOV     A,#0xc
   \   000274   12....       LCALL   ?XSTACK_DISP0_8
   \   000277   E8           MOV     A,R0
   \   000278   F0           MOVX    @DPTR,A
   \   000279   A3           INC     DPTR
   \   00027A   E9           MOV     A,R1
   \   00027B   F0           MOVX    @DPTR,A
   2122                AddrMgrEntryUpdate( &addrEntry );
   \   00027C                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   00027C   740B         MOV     A,#0xb
   \   00027E   12....       LCALL   ?XSTACK_DISP101_8
   \   000281   12....       LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   \   000284   E9           MOV     A,R1
   2123              }
   2124            }
   2125          }
   \                     ??ZDO_ProcessDeviceAnnce_2:
   \   000285   7420         MOV     A,#0x20
   \   000287   12....       LCALL   ?DEALLOC_XSTACK8
   \   00028A   7F02         MOV     R7,#0x2
   \   00028C   02....       LJMP    ?BANKED_LEAVE_XDATA
   2126          
   2127          /*********************************************************************
   2128           * @fn          ZDO_BuildSimpleDescBuf
   2129           *
   2130           * @brief       Build a byte sequence representation of a Simple Descriptor.
   2131           *
   2132           * @param       buf  - pointer to a byte array big enough for data.
   2133           * @param       desc - SimpleDescriptionFormat_t *
   2134           *
   2135           * @return      none
   2136           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2137          void ZDO_BuildSimpleDescBuf( uint8 *buf, SimpleDescriptionFormat_t *desc )
   \                     ZDO_BuildSimpleDescBuf:
   2138          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2139            byte cnt;
   2140            uint16 *ptr;
   2141          
   2142            *buf++ = desc->EndPoint;
   \   000005   8C82         MOV     DPL,R4
   \   000007   8D83         MOV     DPH,R5
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   C0E0         PUSH    A
   \   00000C   8A82         MOV     DPL,R2
   \   00000E   8B83         MOV     DPH,R3
   \   000010   D0E0         POP     A
   \   000012   F0           MOVX    @DPTR,A
   \   000013   8A82         MOV     DPL,R2
   \   000015   8B83         MOV     DPH,R3
   \   000017   A3           INC     DPTR
   \   000018   AA82         MOV     R2,DPL
   \   00001A   AB83         MOV     R3,DPH
   2143            *buf++ = HI_UINT16( desc->AppProfId );
   \   00001C   8C82         MOV     DPL,R4
   \   00001E   8D83         MOV     DPH,R5
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   F8           MOV     R0,A
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F9           MOV     R1,A
   \   000026   E4           CLR     A
   \   000027   C9           XCH     A,R1
   \   000028   F8           MOV     R0,A
   \   000029   E8           MOV     A,R0
   \   00002A   C0E0         PUSH    A
   \   00002C   8A82         MOV     DPL,R2
   \   00002E   8B83         MOV     DPH,R3
   \   000030   D0E0         POP     A
   \   000032   F0           MOVX    @DPTR,A
   \   000033   8A82         MOV     DPL,R2
   \   000035   8B83         MOV     DPH,R3
   \   000037   A3           INC     DPTR
   \   000038   AA82         MOV     R2,DPL
   \   00003A   AB83         MOV     R3,DPH
   2144            *buf++ = LO_UINT16( desc->AppProfId );
   \   00003C   8C82         MOV     DPL,R4
   \   00003E   8D83         MOV     DPH,R5
   \   000040   A3           INC     DPTR
   \   000041   E0           MOVX    A,@DPTR
   \   000042   F8           MOV     R0,A
   \   000043   A3           INC     DPTR
   \   000044   E0           MOVX    A,@DPTR
   \   000045   F9           MOV     R1,A
   \   000046   E8           MOV     A,R0
   \   000047   C0E0         PUSH    A
   \   000049   8A82         MOV     DPL,R2
   \   00004B   8B83         MOV     DPH,R3
   \   00004D   D0E0         POP     A
   \   00004F   F0           MOVX    @DPTR,A
   \   000050   8A82         MOV     DPL,R2
   \   000052   8B83         MOV     DPH,R3
   \   000054   A3           INC     DPTR
   \   000055   AA82         MOV     R2,DPL
   \   000057   AB83         MOV     R3,DPH
   2145            *buf++ = HI_UINT16( desc->AppDeviceId );
   \   000059   8C82         MOV     DPL,R4
   \   00005B   8D83         MOV     DPH,R5
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   A3           INC     DPTR
   \   000060   E0           MOVX    A,@DPTR
   \   000061   F8           MOV     R0,A
   \   000062   A3           INC     DPTR
   \   000063   E0           MOVX    A,@DPTR
   \   000064   F9           MOV     R1,A
   \   000065   E4           CLR     A
   \   000066   C9           XCH     A,R1
   \   000067   F8           MOV     R0,A
   \   000068   E8           MOV     A,R0
   \   000069   C0E0         PUSH    A
   \   00006B   8A82         MOV     DPL,R2
   \   00006D   8B83         MOV     DPH,R3
   \   00006F   D0E0         POP     A
   \   000071   F0           MOVX    @DPTR,A
   \   000072   8A82         MOV     DPL,R2
   \   000074   8B83         MOV     DPH,R3
   \   000076   A3           INC     DPTR
   \   000077   AA82         MOV     R2,DPL
   \   000079   AB83         MOV     R3,DPH
   2146            *buf++ = LO_UINT16( desc->AppDeviceId );
   \   00007B   8C82         MOV     DPL,R4
   \   00007D   8D83         MOV     DPH,R5
   \   00007F   A3           INC     DPTR
   \   000080   A3           INC     DPTR
   \   000081   A3           INC     DPTR
   \   000082   E0           MOVX    A,@DPTR
   \   000083   F8           MOV     R0,A
   \   000084   A3           INC     DPTR
   \   000085   E0           MOVX    A,@DPTR
   \   000086   F9           MOV     R1,A
   \   000087   E8           MOV     A,R0
   \   000088   C0E0         PUSH    A
   \   00008A   8A82         MOV     DPL,R2
   \   00008C   8B83         MOV     DPH,R3
   \   00008E   D0E0         POP     A
   \   000090   F0           MOVX    @DPTR,A
   \   000091   8A82         MOV     DPL,R2
   \   000093   8B83         MOV     DPH,R3
   \   000095   A3           INC     DPTR
   \   000096   AA82         MOV     R2,DPL
   \   000098   AB83         MOV     R3,DPH
   2147          
   2148            *buf++ = (byte)(desc->AppDevVer << 4);
   \   00009A   8C82         MOV     DPL,R4
   \   00009C   8D83         MOV     DPH,R5
   \   00009E   A3           INC     DPTR
   \   00009F   A3           INC     DPTR
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   A3           INC     DPTR
   \   0000A3   E0           MOVX    A,@DPTR
   \   0000A4   C4           SWAP    A
   \   0000A5   54F0         ANL     A,#0xf0
   \   0000A7   C0E0         PUSH    A
   \   0000A9   8A82         MOV     DPL,R2
   \   0000AB   8B83         MOV     DPH,R3
   \   0000AD   D0E0         POP     A
   \   0000AF   F0           MOVX    @DPTR,A
   \   0000B0   8A82         MOV     DPL,R2
   \   0000B2   8B83         MOV     DPH,R3
   \   0000B4   A3           INC     DPTR
   \   0000B5   AA82         MOV     R2,DPL
   \   0000B7   AB83         MOV     R3,DPH
   2149          
   2150            *buf++ = desc->AppNumInClusters;
   \   0000B9   8C82         MOV     DPL,R4
   \   0000BB   8D83         MOV     DPH,R5
   \   0000BD   A3           INC     DPTR
   \   0000BE   A3           INC     DPTR
   \   0000BF   A3           INC     DPTR
   \   0000C0   A3           INC     DPTR
   \   0000C1   A3           INC     DPTR
   \   0000C2   A3           INC     DPTR
   \   0000C3   E0           MOVX    A,@DPTR
   \   0000C4   C0E0         PUSH    A
   \   0000C6   8A82         MOV     DPL,R2
   \   0000C8   8B83         MOV     DPH,R3
   \   0000CA   D0E0         POP     A
   \   0000CC   F0           MOVX    @DPTR,A
   \   0000CD   8A82         MOV     DPL,R2
   \   0000CF   8B83         MOV     DPH,R3
   \   0000D1   A3           INC     DPTR
   \   0000D2   AA82         MOV     R2,DPL
   \   0000D4   AB83         MOV     R3,DPH
   2151            ptr = desc->pAppInClusterList;
   \   0000D6   8C82         MOV     DPL,R4
   \   0000D8   8D83         MOV     DPH,R5
   \   0000DA   A3           INC     DPTR
   \   0000DB   A3           INC     DPTR
   \   0000DC   A3           INC     DPTR
   \   0000DD   A3           INC     DPTR
   \   0000DE   A3           INC     DPTR
   \   0000DF   A3           INC     DPTR
   \   0000E0   A3           INC     DPTR
   \   0000E1   E0           MOVX    A,@DPTR
   \   0000E2   F8           MOV     R0,A
   \   0000E3   A3           INC     DPTR
   \   0000E4   E0           MOVX    A,@DPTR
   \   0000E5   F9           MOV     R1,A
   2152            for ( cnt = 0; cnt < desc->AppNumInClusters; ptr++, cnt++ )
   \   0000E6   7E00         MOV     R6,#0x0
   \   0000E8   804B         SJMP    ??ZDO_BuildSimpleDescBuf_0
   2153            {
   2154              *buf++ = HI_UINT16( *ptr );
   \                     ??ZDO_BuildSimpleDescBuf_1:
   \   0000EA   8882         MOV     DPL,R0
   \   0000EC   8983         MOV     DPH,R1
   \   0000EE   E0           MOVX    A,@DPTR
   \   0000EF   F5..         MOV     ?V0,A
   \   0000F1   A3           INC     DPTR
   \   0000F2   E0           MOVX    A,@DPTR
   \   0000F3   F5..         MOV     ?V1,A
   \   0000F5   E4           CLR     A
   \   0000F6   C5..         XCH     A,?V1
   \   0000F8   F5..         MOV     ?V0,A
   \   0000FA   E5..         MOV     A,?V0
   \   0000FC   C0E0         PUSH    A
   \   0000FE   8A82         MOV     DPL,R2
   \   000100   8B83         MOV     DPH,R3
   \   000102   D0E0         POP     A
   \   000104   F0           MOVX    @DPTR,A
   \   000105   8A82         MOV     DPL,R2
   \   000107   8B83         MOV     DPH,R3
   \   000109   A3           INC     DPTR
   \   00010A   AA82         MOV     R2,DPL
   \   00010C   AB83         MOV     R3,DPH
   2155              *buf++ = LO_UINT16( *ptr );
   \   00010E   8882         MOV     DPL,R0
   \   000110   8983         MOV     DPH,R1
   \   000112   E0           MOVX    A,@DPTR
   \   000113   F5..         MOV     ?V0,A
   \   000115   A3           INC     DPTR
   \   000116   E0           MOVX    A,@DPTR
   \   000117   F5..         MOV     ?V1,A
   \   000119   E5..         MOV     A,?V0
   \   00011B   C0E0         PUSH    A
   \   00011D   8A82         MOV     DPL,R2
   \   00011F   8B83         MOV     DPH,R3
   \   000121   D0E0         POP     A
   \   000123   F0           MOVX    @DPTR,A
   \   000124   8A82         MOV     DPL,R2
   \   000126   8B83         MOV     DPH,R3
   \   000128   A3           INC     DPTR
   \   000129   AA82         MOV     R2,DPL
   \   00012B   AB83         MOV     R3,DPH
   2156            }
   \   00012D   E8           MOV     A,R0
   \   00012E   2402         ADD     A,#0x2
   \   000130   F8           MOV     R0,A
   \   000131   5001         JNC     ??ZDO_BuildSimpleDescBuf_2
   \   000133   09           INC     R1
   \                     ??ZDO_BuildSimpleDescBuf_2:
   \   000134   0E           INC     R6
   \                     ??ZDO_BuildSimpleDescBuf_0:
   \   000135   8C82         MOV     DPL,R4
   \   000137   8D83         MOV     DPH,R5
   \   000139   A3           INC     DPTR
   \   00013A   A3           INC     DPTR
   \   00013B   A3           INC     DPTR
   \   00013C   A3           INC     DPTR
   \   00013D   A3           INC     DPTR
   \   00013E   A3           INC     DPTR
   \   00013F   E0           MOVX    A,@DPTR
   \   000140   FF           MOV     R7,A
   \   000141   EE           MOV     A,R6
   \   000142   C3           CLR     C
   \   000143   9F           SUBB    A,R7
   \   000144   40A4         JC      ??ZDO_BuildSimpleDescBuf_1
   2157          
   2158            *buf++ = desc->AppNumOutClusters;
   \   000146   8C82         MOV     DPL,R4
   \   000148   8D83         MOV     DPH,R5
   \   00014A   A3           INC     DPTR
   \   00014B   A3           INC     DPTR
   \   00014C   A3           INC     DPTR
   \   00014D   A3           INC     DPTR
   \   00014E   A3           INC     DPTR
   \   00014F   A3           INC     DPTR
   \   000150   A3           INC     DPTR
   \   000151   A3           INC     DPTR
   \   000152   A3           INC     DPTR
   \   000153   E0           MOVX    A,@DPTR
   \   000154   C0E0         PUSH    A
   \   000156   8A82         MOV     DPL,R2
   \   000158   8B83         MOV     DPH,R3
   \   00015A   D0E0         POP     A
   \   00015C   F0           MOVX    @DPTR,A
   \   00015D   8A82         MOV     DPL,R2
   \   00015F   8B83         MOV     DPH,R3
   \   000161   A3           INC     DPTR
   \   000162   AA82         MOV     R2,DPL
   \   000164   AB83         MOV     R3,DPH
   2159            ptr = desc->pAppOutClusterList;
   \   000166   8C82         MOV     DPL,R4
   \   000168   8D83         MOV     DPH,R5
   \   00016A   A3           INC     DPTR
   \   00016B   A3           INC     DPTR
   \   00016C   A3           INC     DPTR
   \   00016D   A3           INC     DPTR
   \   00016E   A3           INC     DPTR
   \   00016F   A3           INC     DPTR
   \   000170   A3           INC     DPTR
   \   000171   A3           INC     DPTR
   \   000172   A3           INC     DPTR
   \   000173   A3           INC     DPTR
   \   000174   E0           MOVX    A,@DPTR
   \   000175   F8           MOV     R0,A
   \   000176   A3           INC     DPTR
   \   000177   E0           MOVX    A,@DPTR
   \   000178   F9           MOV     R1,A
   2160            for ( cnt = 0; cnt < desc->AppNumOutClusters; ptr++, cnt++ )
   \   000179   7E00         MOV     R6,#0x0
   \   00017B   804B         SJMP    ??ZDO_BuildSimpleDescBuf_3
   2161            {
   2162              *buf++ = HI_UINT16( *ptr );
   \                     ??ZDO_BuildSimpleDescBuf_4:
   \   00017D   8882         MOV     DPL,R0
   \   00017F   8983         MOV     DPH,R1
   \   000181   E0           MOVX    A,@DPTR
   \   000182   F5..         MOV     ?V0,A
   \   000184   A3           INC     DPTR
   \   000185   E0           MOVX    A,@DPTR
   \   000186   F5..         MOV     ?V1,A
   \   000188   E4           CLR     A
   \   000189   C5..         XCH     A,?V1
   \   00018B   F5..         MOV     ?V0,A
   \   00018D   E5..         MOV     A,?V0
   \   00018F   C0E0         PUSH    A
   \   000191   8A82         MOV     DPL,R2
   \   000193   8B83         MOV     DPH,R3
   \   000195   D0E0         POP     A
   \   000197   F0           MOVX    @DPTR,A
   \   000198   8A82         MOV     DPL,R2
   \   00019A   8B83         MOV     DPH,R3
   \   00019C   A3           INC     DPTR
   \   00019D   AA82         MOV     R2,DPL
   \   00019F   AB83         MOV     R3,DPH
   2163              *buf++ = LO_UINT16( *ptr );
   \   0001A1   8882         MOV     DPL,R0
   \   0001A3   8983         MOV     DPH,R1
   \   0001A5   E0           MOVX    A,@DPTR
   \   0001A6   F5..         MOV     ?V0,A
   \   0001A8   A3           INC     DPTR
   \   0001A9   E0           MOVX    A,@DPTR
   \   0001AA   F5..         MOV     ?V1,A
   \   0001AC   E5..         MOV     A,?V0
   \   0001AE   C0E0         PUSH    A
   \   0001B0   8A82         MOV     DPL,R2
   \   0001B2   8B83         MOV     DPH,R3
   \   0001B4   D0E0         POP     A
   \   0001B6   F0           MOVX    @DPTR,A
   \   0001B7   8A82         MOV     DPL,R2
   \   0001B9   8B83         MOV     DPH,R3
   \   0001BB   A3           INC     DPTR
   \   0001BC   AA82         MOV     R2,DPL
   \   0001BE   AB83         MOV     R3,DPH
   2164            }
   \   0001C0   E8           MOV     A,R0
   \   0001C1   2402         ADD     A,#0x2
   \   0001C3   F8           MOV     R0,A
   \   0001C4   5001         JNC     ??ZDO_BuildSimpleDescBuf_5
   \   0001C6   09           INC     R1
   \                     ??ZDO_BuildSimpleDescBuf_5:
   \   0001C7   0E           INC     R6
   \                     ??ZDO_BuildSimpleDescBuf_3:
   \   0001C8   8C82         MOV     DPL,R4
   \   0001CA   8D83         MOV     DPH,R5
   \   0001CC   A3           INC     DPTR
   \   0001CD   A3           INC     DPTR
   \   0001CE   A3           INC     DPTR
   \   0001CF   A3           INC     DPTR
   \   0001D0   A3           INC     DPTR
   \   0001D1   A3           INC     DPTR
   \   0001D2   A3           INC     DPTR
   \   0001D3   A3           INC     DPTR
   \   0001D4   A3           INC     DPTR
   \   0001D5   E0           MOVX    A,@DPTR
   \   0001D6   FF           MOV     R7,A
   \   0001D7   EE           MOV     A,R6
   \   0001D8   C3           CLR     C
   \   0001D9   9F           SUBB    A,R7
   \   0001DA   40A1         JC      ??ZDO_BuildSimpleDescBuf_4
   2165          }
   \   0001DC   7F02         MOV     R7,#0x2
   \   0001DE   02....       LJMP    ?BANKED_LEAVE_XDATA
   2166          
   2167          #if ( ZG_BUILD_COORDINATOR_TYPE )
   2168          /*********************************************************************
   2169           * @fn      ZDO_MatchEndDeviceBind()
   2170           *
   2171           * @brief
   2172           *
   2173           *   Called to match end device binding requests
   2174           *
   2175           * @param  bindReq  - binding request information
   2176           * @param  SecurityUse - Security enable/disable
   2177           *
   2178           * @return  none
   2179           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2180          void ZDO_MatchEndDeviceBind( ZDEndDeviceBind_t *bindReq )
   \                     ZDO_MatchEndDeviceBind:
   2181          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   2182            zAddrType_t dstAddr;
   2183            uint8 sendRsp = FALSE;
   \   00000E   75..00       MOV     ?V0,#0x0
   2184            uint8 status;
   2185          
   2186            // Is this the first request?
   2187            if ( matchED == NULL )
   \   000011   90....       MOV     DPTR,#matchED
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F8           MOV     R0,A
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F9           MOV     R1,A
   \   000019   E8           MOV     A,R0
   \   00001A   49           ORL     A,R1
   \   00001B   6003         JZ      $+5
   \   00001D   02....       LJMP    ??ZDO_MatchEndDeviceBind_0 & 0xFFFF
   2188            {
   2189              // Create match info structure
   2190              matchED = (ZDMatchEndDeviceBind_t *)osal_mem_alloc( sizeof ( ZDMatchEndDeviceBind_t ) );
   \   000020                ; Setup parameters for call to function osal_mem_alloc
   \   000020   7A37         MOV     R2,#0x37
   \   000022   7B00         MOV     R3,#0x0
   \   000024   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000027   90....       MOV     DPTR,#matchED
   \   00002A   EA           MOV     A,R2
   \   00002B   F0           MOVX    @DPTR,A
   \   00002C   A3           INC     DPTR
   \   00002D   EB           MOV     A,R3
   \   00002E   F0           MOVX    @DPTR,A
   2191              if ( matchED )
   \   00002F   90....       MOV     DPTR,#matchED
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F8           MOV     R0,A
   \   000034   A3           INC     DPTR
   \   000035   E0           MOVX    A,@DPTR
   \   000036   F9           MOV     R1,A
   \   000037   E8           MOV     A,R0
   \   000038   49           ORL     A,R1
   \   000039   6031         JZ      ??ZDO_MatchEndDeviceBind_1
   2192              {
   2193                // Clear the structure
   2194                osal_memset( (uint8 *)matchED, 0, sizeof ( ZDMatchEndDeviceBind_t ) );
   \   00003B                ; Setup parameters for call to function osal_memset
   \   00003B   7C37         MOV     R4,#0x37
   \   00003D   7D00         MOV     R5,#0x0
   \   00003F   7900         MOV     R1,#0x0
   \   000041   90....       MOV     DPTR,#matchED
   \   000044   E0           MOVX    A,@DPTR
   \   000045   FA           MOV     R2,A
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   FB           MOV     R3,A
   \   000049   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2195          
   2196                // Copy the first request's information
   2197                if ( !ZDO_CopyMatchInfo( &(matchED->ed1), bindReq ) )
   \   00004C                ; Setup parameters for call to function ZDO_CopyMatchInfo
   \   00004C   EE           MOV     A,R6
   \   00004D   FC           MOV     R4,A
   \   00004E   EF           MOV     A,R7
   \   00004F   FD           MOV     R5,A
   \   000050   90....       MOV     DPTR,#matchED
   \   000053   E0           MOVX    A,@DPTR
   \   000054   FA           MOV     R2,A
   \   000055   A3           INC     DPTR
   \   000056   E0           MOVX    A,@DPTR
   \   000057   FB           MOV     R3,A
   \   000058   12....       LCALL   `??ZDO_CopyMatchInfo::?relay`; Banked call to: ZDO_CopyMatchInfo
   \   00005B   E9           MOV     A,R1
   \   00005C   701A         JNZ     ??ZDO_MatchEndDeviceBind_2
   2198                {
   2199                  status = ZDP_NO_ENTRY;
   \   00005E   85..82       MOV     DPL,?XSP + 0
   \   000061   85..83       MOV     DPH,?XSP + 1
   \   000064   7488         MOV     A,#-0x78
   \   000066   F0           MOVX    @DPTR,A
   2200                  sendRsp = TRUE;
   \   000067   75..01       MOV     ?V0,#0x1
   \   00006A   800C         SJMP    ??ZDO_MatchEndDeviceBind_2
   2201                }
   2202              }
   2203              else
   2204              {
   2205                status = ZDP_NO_ENTRY;
   \                     ??ZDO_MatchEndDeviceBind_1:
   \   00006C   85..82       MOV     DPL,?XSP + 0
   \   00006F   85..83       MOV     DPH,?XSP + 1
   \   000072   7488         MOV     A,#-0x78
   \   000074   F0           MOVX    @DPTR,A
   2206                sendRsp = TRUE;
   \   000075   75..01       MOV     ?V0,#0x1
   2207              }
   2208          
   2209              if ( !sendRsp )
   \                     ??ZDO_MatchEndDeviceBind_2:
   \   000078   E5..         MOV     A,?V0
   \   00007A   6003         JZ      $+5
   \   00007C   02....       LJMP    ??ZDO_MatchEndDeviceBind_3 & 0xFFFF
   2210              {
   2211                // Set into the correct state
   2212                matchED->state = ZDMATCH_WAIT_REQ;
   \   00007F   90....       MOV     DPTR,#matchED
   \   000082   E0           MOVX    A,@DPTR
   \   000083   F8           MOV     R0,A
   \   000084   A3           INC     DPTR
   \   000085   E0           MOVX    A,@DPTR
   \   000086   C8           XCH     A,R0
   \   000087   242E         ADD     A,#0x2e
   \   000089   F582         MOV     DPL,A
   \   00008B   C8           XCH     A,R0
   \   00008C   3400         ADDC    A,#0x0
   \   00008E   F583         MOV     DPH,A
   \   000090   7401         MOV     A,#0x1
   \   000092   F0           MOVX    @DPTR,A
   2213          
   2214                // Setup the timeout
   2215                APS_SetEndDeviceBindTimeout( AIB_MaxBindingTime, ZDO_EndDeviceBindMatchTimeoutCB );
   \   000093                ; Setup parameters for call to function APS_SetEndDeviceBindTimeout
   \   000093   7C..         MOV     R4,#`??ZDO_EndDeviceBindMatchTimeoutCB::?relay` & 0xff
   \   000095   7D..         MOV     R5,#(`??ZDO_EndDeviceBindMatchTimeoutCB::?relay` >> 8) & 0xff
   \   000097   90....       MOV     DPTR,#AIB_MaxBindingTime
   \   00009A   E0           MOVX    A,@DPTR
   \   00009B   FA           MOV     R2,A
   \   00009C   A3           INC     DPTR
   \   00009D   E0           MOVX    A,@DPTR
   \   00009E   FB           MOV     R3,A
   \   00009F   12....       LCALL   `??APS_SetEndDeviceBindTimeout::?relay`; Banked call to: APS_SetEndDeviceBindTimeout
   \   0000A2   02....       LJMP    ??ZDO_MatchEndDeviceBind_3 & 0xFFFF
   2216              }
   2217            }
   2218            else
   2219            {
   2220                matchED->state = ZDMATCH_SENDING_BINDS;
   \                     ??ZDO_MatchEndDeviceBind_0:
   \   0000A5   90....       MOV     DPTR,#matchED
   \   0000A8   E0           MOVX    A,@DPTR
   \   0000A9   F8           MOV     R0,A
   \   0000AA   A3           INC     DPTR
   \   0000AB   E0           MOVX    A,@DPTR
   \   0000AC   C8           XCH     A,R0
   \   0000AD   242E         ADD     A,#0x2e
   \   0000AF   F582         MOV     DPL,A
   \   0000B1   C8           XCH     A,R0
   \   0000B2   3400         ADDC    A,#0x0
   \   0000B4   F583         MOV     DPH,A
   \   0000B6   7402         MOV     A,#0x2
   \   0000B8   F0           MOVX    @DPTR,A
   2221          
   2222                // Copy the 2nd request's information
   2223                if ( !ZDO_CopyMatchInfo( &(matchED->ed2), bindReq ) )
   \   0000B9                ; Setup parameters for call to function ZDO_CopyMatchInfo
   \   0000B9   EE           MOV     A,R6
   \   0000BA   FC           MOV     R4,A
   \   0000BB   EF           MOV     A,R7
   \   0000BC   FD           MOV     R5,A
   \   0000BD   90....       MOV     DPTR,#matchED
   \   0000C0   E0           MOVX    A,@DPTR
   \   0000C1   2417         ADD     A,#0x17
   \   0000C3   FA           MOV     R2,A
   \   0000C4   A3           INC     DPTR
   \   0000C5   E0           MOVX    A,@DPTR
   \   0000C6   3400         ADDC    A,#0x0
   \   0000C8   FB           MOV     R3,A
   \   0000C9   12....       LCALL   `??ZDO_CopyMatchInfo::?relay`; Banked call to: ZDO_CopyMatchInfo
   \   0000CC   E9           MOV     A,R1
   \   0000CD   700C         JNZ     ??ZDO_MatchEndDeviceBind_4
   2224                {
   2225                  status = ZDP_NO_ENTRY;
   \   0000CF   85..82       MOV     DPL,?XSP + 0
   \   0000D2   85..83       MOV     DPH,?XSP + 1
   \   0000D5   7488         MOV     A,#-0x78
   \   0000D7   F0           MOVX    @DPTR,A
   2226                  sendRsp = TRUE;
   \   0000D8   75..01       MOV     ?V0,#0x1
   2227                }
   2228          
   2229                // Make a source match for ed1
   2230                matchED->ed1numMatched = ZDO_CompareClusterLists(
   2231                            matchED->ed1.numOutClusters, matchED->ed1.outClusters,
   2232                            matchED->ed2.numInClusters, matchED->ed2.inClusters, ZDOBuildBuf );
   \                     ??ZDO_MatchEndDeviceBind_4:
   \   0000DB                ; Setup parameters for call to function ZDO_CompareClusterLists
   \   0000DB   75....       MOV     ?V2,#ZDOBuildBuf & 0xff
   \   0000DE   75....       MOV     ?V3,#(ZDOBuildBuf >> 8) & 0xff
   \   0000E1   78..         MOV     R0,#?V2
   \   0000E3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E6   90....       MOV     DPTR,#matchED
   \   0000E9   E0           MOVX    A,@DPTR
   \   0000EA   F8           MOV     R0,A
   \   0000EB   A3           INC     DPTR
   \   0000EC   E0           MOVX    A,@DPTR
   \   0000ED   C8           XCH     A,R0
   \   0000EE   2429         ADD     A,#0x29
   \   0000F0   F582         MOV     DPL,A
   \   0000F2   C8           XCH     A,R0
   \   0000F3   3400         ADDC    A,#0x0
   \   0000F5   F583         MOV     DPH,A
   \   0000F7   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000FA   90....       MOV     DPTR,#matchED
   \   0000FD   E0           MOVX    A,@DPTR
   \   0000FE   F8           MOV     R0,A
   \   0000FF   A3           INC     DPTR
   \   000100   E0           MOVX    A,@DPTR
   \   000101   C8           XCH     A,R0
   \   000102   2428         ADD     A,#0x28
   \   000104   F582         MOV     DPL,A
   \   000106   C8           XCH     A,R0
   \   000107   3400         ADDC    A,#0x0
   \   000109   F583         MOV     DPH,A
   \   00010B   E0           MOVX    A,@DPTR
   \   00010C   FC           MOV     R4,A
   \   00010D   90....       MOV     DPTR,#matchED
   \   000110   E0           MOVX    A,@DPTR
   \   000111   F8           MOV     R0,A
   \   000112   A3           INC     DPTR
   \   000113   E0           MOVX    A,@DPTR
   \   000114   C8           XCH     A,R0
   \   000115   2415         ADD     A,#0x15
   \   000117   F582         MOV     DPL,A
   \   000119   C8           XCH     A,R0
   \   00011A   3400         ADDC    A,#0x0
   \   00011C   F583         MOV     DPH,A
   \   00011E   E0           MOVX    A,@DPTR
   \   00011F   FA           MOV     R2,A
   \   000120   A3           INC     DPTR
   \   000121   E0           MOVX    A,@DPTR
   \   000122   FB           MOV     R3,A
   \   000123   90....       MOV     DPTR,#matchED
   \   000126   E0           MOVX    A,@DPTR
   \   000127   F8           MOV     R0,A
   \   000128   A3           INC     DPTR
   \   000129   E0           MOVX    A,@DPTR
   \   00012A   C8           XCH     A,R0
   \   00012B   2414         ADD     A,#0x14
   \   00012D   F582         MOV     DPL,A
   \   00012F   C8           XCH     A,R0
   \   000130   3400         ADDC    A,#0x0
   \   000132   F583         MOV     DPH,A
   \   000134   E0           MOVX    A,@DPTR
   \   000135   F9           MOV     R1,A
   \   000136   12....       LCALL   `??ZDO_CompareClusterLists::?relay`; Banked call to: ZDO_CompareClusterLists
   \   000139   7404         MOV     A,#0x4
   \   00013B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00013E   E9           MOV     A,R1
   \   00013F   C0E0         PUSH    A
   \   000141   90....       MOV     DPTR,#matchED
   \   000144   E0           MOVX    A,@DPTR
   \   000145   F8           MOV     R0,A
   \   000146   A3           INC     DPTR
   \   000147   E0           MOVX    A,@DPTR
   \   000148   C8           XCH     A,R0
   \   000149   2431         ADD     A,#0x31
   \   00014B   F582         MOV     DPL,A
   \   00014D   C8           XCH     A,R0
   \   00014E   3400         ADDC    A,#0x0
   \   000150   F583         MOV     DPH,A
   \   000152   D0E0         POP     A
   \   000154   F0           MOVX    @DPTR,A
   2233                if ( matchED->ed1numMatched )
   \   000155   90....       MOV     DPTR,#matchED
   \   000158   E0           MOVX    A,@DPTR
   \   000159   F8           MOV     R0,A
   \   00015A   A3           INC     DPTR
   \   00015B   E0           MOVX    A,@DPTR
   \   00015C   C8           XCH     A,R0
   \   00015D   2431         ADD     A,#0x31
   \   00015F   F582         MOV     DPL,A
   \   000161   C8           XCH     A,R0
   \   000162   3400         ADDC    A,#0x0
   \   000164   F583         MOV     DPH,A
   \   000166   E0           MOVX    A,@DPTR
   \   000167   7003         JNZ     $+5
   \   000169   02....       LJMP    ??ZDO_MatchEndDeviceBind_5 & 0xFFFF
   2234                {
   2235                  // Save the match list
   2236                  matchED->ed1Matched = osal_mem_alloc( (short)(matchED->ed1numMatched * sizeof ( uint16 )) );
   \   00016C                ; Setup parameters for call to function osal_mem_alloc
   \   00016C   90....       MOV     DPTR,#matchED
   \   00016F   E0           MOVX    A,@DPTR
   \   000170   F8           MOV     R0,A
   \   000171   A3           INC     DPTR
   \   000172   E0           MOVX    A,@DPTR
   \   000173   C8           XCH     A,R0
   \   000174   2431         ADD     A,#0x31
   \   000176   F582         MOV     DPL,A
   \   000178   C8           XCH     A,R0
   \   000179   3400         ADDC    A,#0x0
   \   00017B   F583         MOV     DPH,A
   \   00017D   E0           MOVX    A,@DPTR
   \   00017E   FA           MOV     R2,A
   \   00017F   7B00         MOV     R3,#0x0
   \   000181   EA           MOV     A,R2
   \   000182   75F002       MOV     B,#0x2
   \   000185   A4           MUL     AB
   \   000186   CA           XCH     A,R2
   \   000187   A8F0         MOV     R0,B
   \   000189   75F000       MOV     B,#0x0
   \   00018C   A4           MUL     AB
   \   00018D   28           ADD     A,R0
   \   00018E   F8           MOV     R0,A
   \   00018F   75F002       MOV     B,#0x2
   \   000192   EB           MOV     A,R3
   \   000193   A4           MUL     AB
   \   000194   28           ADD     A,R0
   \   000195   FB           MOV     R3,A
   \   000196   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000199   8A..         MOV     ?V2,R2
   \   00019B   8B..         MOV     ?V3,R3
   \   00019D   A8..         MOV     R0,?V2
   \   00019F   A9..         MOV     R1,?V3
   \   0001A1   90....       MOV     DPTR,#matchED
   \   0001A4   E0           MOVX    A,@DPTR
   \   0001A5   FA           MOV     R2,A
   \   0001A6   A3           INC     DPTR
   \   0001A7   E0           MOVX    A,@DPTR
   \   0001A8   CA           XCH     A,R2
   \   0001A9   2432         ADD     A,#0x32
   \   0001AB   F582         MOV     DPL,A
   \   0001AD   CA           XCH     A,R2
   \   0001AE   3400         ADDC    A,#0x0
   \   0001B0   F583         MOV     DPH,A
   \   0001B2   E8           MOV     A,R0
   \   0001B3   F0           MOVX    @DPTR,A
   \   0001B4   A3           INC     DPTR
   \   0001B5   E9           MOV     A,R1
   \   0001B6   F0           MOVX    @DPTR,A
   2237                  if ( matchED->ed1Matched )
   \   0001B7   90....       MOV     DPTR,#matchED
   \   0001BA   E0           MOVX    A,@DPTR
   \   0001BB   F8           MOV     R0,A
   \   0001BC   A3           INC     DPTR
   \   0001BD   E0           MOVX    A,@DPTR
   \   0001BE   C8           XCH     A,R0
   \   0001BF   2432         ADD     A,#0x32
   \   0001C1   F582         MOV     DPL,A
   \   0001C3   C8           XCH     A,R0
   \   0001C4   3400         ADDC    A,#0x0
   \   0001C6   F583         MOV     DPH,A
   \   0001C8   E0           MOVX    A,@DPTR
   \   0001C9   F8           MOV     R0,A
   \   0001CA   A3           INC     DPTR
   \   0001CB   E0           MOVX    A,@DPTR
   \   0001CC   F9           MOV     R1,A
   \   0001CD   E8           MOV     A,R0
   \   0001CE   49           ORL     A,R1
   \   0001CF   6058         JZ      ??ZDO_MatchEndDeviceBind_6
   2238                  {
   2239                    osal_memcpy( matchED->ed1Matched, ZDOBuildBuf, (matchED->ed1numMatched * sizeof ( uint16 )) );
   \   0001D1                ; Setup parameters for call to function osal_memcpy
   \   0001D1   75....       MOV     ?V4,#ZDOBuildBuf & 0xff
   \   0001D4   75....       MOV     ?V5,#(ZDOBuildBuf >> 8) & 0xff
   \   0001D7   75..00       MOV     ?V6,#0x0
   \   0001DA   78..         MOV     R0,#?V4
   \   0001DC   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0001DF   90....       MOV     DPTR,#matchED
   \   0001E2   E0           MOVX    A,@DPTR
   \   0001E3   F8           MOV     R0,A
   \   0001E4   A3           INC     DPTR
   \   0001E5   E0           MOVX    A,@DPTR
   \   0001E6   C8           XCH     A,R0
   \   0001E7   2431         ADD     A,#0x31
   \   0001E9   F582         MOV     DPL,A
   \   0001EB   C8           XCH     A,R0
   \   0001EC   3400         ADDC    A,#0x0
   \   0001EE   F583         MOV     DPH,A
   \   0001F0   E0           MOVX    A,@DPTR
   \   0001F1   FC           MOV     R4,A
   \   0001F2   7D00         MOV     R5,#0x0
   \   0001F4   EC           MOV     A,R4
   \   0001F5   75F002       MOV     B,#0x2
   \   0001F8   A4           MUL     AB
   \   0001F9   CC           XCH     A,R4
   \   0001FA   A8F0         MOV     R0,B
   \   0001FC   75F000       MOV     B,#0x0
   \   0001FF   A4           MUL     AB
   \   000200   28           ADD     A,R0
   \   000201   F8           MOV     R0,A
   \   000202   75F002       MOV     B,#0x2
   \   000205   ED           MOV     A,R5
   \   000206   A4           MUL     AB
   \   000207   28           ADD     A,R0
   \   000208   FD           MOV     R5,A
   \   000209   90....       MOV     DPTR,#matchED
   \   00020C   E0           MOVX    A,@DPTR
   \   00020D   F8           MOV     R0,A
   \   00020E   A3           INC     DPTR
   \   00020F   E0           MOVX    A,@DPTR
   \   000210   C8           XCH     A,R0
   \   000211   2432         ADD     A,#0x32
   \   000213   F582         MOV     DPL,A
   \   000215   C8           XCH     A,R0
   \   000216   3400         ADDC    A,#0x0
   \   000218   F583         MOV     DPH,A
   \   00021A   E0           MOVX    A,@DPTR
   \   00021B   FA           MOV     R2,A
   \   00021C   A3           INC     DPTR
   \   00021D   E0           MOVX    A,@DPTR
   \   00021E   FB           MOV     R3,A
   \   00021F   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000222   7403         MOV     A,#0x3
   \   000224   12....       LCALL   ?DEALLOC_XSTACK8
   \   000227   800C         SJMP    ??ZDO_MatchEndDeviceBind_5
   2240                  }
   2241                  else
   2242                  {
   2243                    // Allocation error, stop
   2244                    status = ZDP_NO_ENTRY;
   \                     ??ZDO_MatchEndDeviceBind_6:
   \   000229   85..82       MOV     DPL,?XSP + 0
   \   00022C   85..83       MOV     DPH,?XSP + 1
   \   00022F   7488         MOV     A,#-0x78
   \   000231   F0           MOVX    @DPTR,A
   2245                    sendRsp = TRUE;
   \   000232   75..01       MOV     ?V0,#0x1
   2246                  }
   2247                }
   2248          
   2249                // Make a source match for ed2
   2250                matchED->ed2numMatched = ZDO_CompareClusterLists(
   2251                            matchED->ed2.numOutClusters, matchED->ed2.outClusters,
   2252                            matchED->ed1.numInClusters, matchED->ed1.inClusters, ZDOBuildBuf );
   \                     ??ZDO_MatchEndDeviceBind_5:
   \   000235                ; Setup parameters for call to function ZDO_CompareClusterLists
   \   000235   75....       MOV     ?V2,#ZDOBuildBuf & 0xff
   \   000238   75....       MOV     ?V3,#(ZDOBuildBuf >> 8) & 0xff
   \   00023B   78..         MOV     R0,#?V2
   \   00023D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000240   90....       MOV     DPTR,#matchED
   \   000243   E0           MOVX    A,@DPTR
   \   000244   F8           MOV     R0,A
   \   000245   A3           INC     DPTR
   \   000246   E0           MOVX    A,@DPTR
   \   000247   C8           XCH     A,R0
   \   000248   2412         ADD     A,#0x12
   \   00024A   F582         MOV     DPL,A
   \   00024C   C8           XCH     A,R0
   \   00024D   3400         ADDC    A,#0x0
   \   00024F   F583         MOV     DPH,A
   \   000251   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000254   90....       MOV     DPTR,#matchED
   \   000257   E0           MOVX    A,@DPTR
   \   000258   F8           MOV     R0,A
   \   000259   A3           INC     DPTR
   \   00025A   E0           MOVX    A,@DPTR
   \   00025B   C8           XCH     A,R0
   \   00025C   2411         ADD     A,#0x11
   \   00025E   F582         MOV     DPL,A
   \   000260   C8           XCH     A,R0
   \   000261   3400         ADDC    A,#0x0
   \   000263   F583         MOV     DPH,A
   \   000265   E0           MOVX    A,@DPTR
   \   000266   FC           MOV     R4,A
   \   000267   90....       MOV     DPTR,#matchED
   \   00026A   E0           MOVX    A,@DPTR
   \   00026B   F8           MOV     R0,A
   \   00026C   A3           INC     DPTR
   \   00026D   E0           MOVX    A,@DPTR
   \   00026E   C8           XCH     A,R0
   \   00026F   242C         ADD     A,#0x2c
   \   000271   F582         MOV     DPL,A
   \   000273   C8           XCH     A,R0
   \   000274   3400         ADDC    A,#0x0
   \   000276   F583         MOV     DPH,A
   \   000278   E0           MOVX    A,@DPTR
   \   000279   FA           MOV     R2,A
   \   00027A   A3           INC     DPTR
   \   00027B   E0           MOVX    A,@DPTR
   \   00027C   FB           MOV     R3,A
   \   00027D   90....       MOV     DPTR,#matchED
   \   000280   E0           MOVX    A,@DPTR
   \   000281   F8           MOV     R0,A
   \   000282   A3           INC     DPTR
   \   000283   E0           MOVX    A,@DPTR
   \   000284   C8           XCH     A,R0
   \   000285   242B         ADD     A,#0x2b
   \   000287   F582         MOV     DPL,A
   \   000289   C8           XCH     A,R0
   \   00028A   3400         ADDC    A,#0x0
   \   00028C   F583         MOV     DPH,A
   \   00028E   E0           MOVX    A,@DPTR
   \   00028F   F9           MOV     R1,A
   \   000290   12....       LCALL   `??ZDO_CompareClusterLists::?relay`; Banked call to: ZDO_CompareClusterLists
   \   000293   7404         MOV     A,#0x4
   \   000295   12....       LCALL   ?DEALLOC_XSTACK8
   \   000298   E9           MOV     A,R1
   \   000299   F8           MOV     R0,A
   \   00029A   E8           MOV     A,R0
   \   00029B   C0E0         PUSH    A
   \   00029D   90....       MOV     DPTR,#matchED
   \   0002A0   E0           MOVX    A,@DPTR
   \   0002A1   F8           MOV     R0,A
   \   0002A2   A3           INC     DPTR
   \   0002A3   E0           MOVX    A,@DPTR
   \   0002A4   C8           XCH     A,R0
   \   0002A5   2434         ADD     A,#0x34
   \   0002A7   F582         MOV     DPL,A
   \   0002A9   C8           XCH     A,R0
   \   0002AA   3400         ADDC    A,#0x0
   \   0002AC   F583         MOV     DPH,A
   \   0002AE   D0E0         POP     A
   \   0002B0   F0           MOVX    @DPTR,A
   2253                if ( matchED->ed2numMatched )
   \   0002B1   90....       MOV     DPTR,#matchED
   \   0002B4   E0           MOVX    A,@DPTR
   \   0002B5   F8           MOV     R0,A
   \   0002B6   A3           INC     DPTR
   \   0002B7   E0           MOVX    A,@DPTR
   \   0002B8   C8           XCH     A,R0
   \   0002B9   2434         ADD     A,#0x34
   \   0002BB   F582         MOV     DPL,A
   \   0002BD   C8           XCH     A,R0
   \   0002BE   3400         ADDC    A,#0x0
   \   0002C0   F583         MOV     DPH,A
   \   0002C2   E0           MOVX    A,@DPTR
   \   0002C3   7003         JNZ     $+5
   \   0002C5   02....       LJMP    ??ZDO_MatchEndDeviceBind_7 & 0xFFFF
   2254                {
   2255                  // Save the match list
   2256                  matchED->ed2Matched = osal_mem_alloc( (short)(matchED->ed2numMatched * sizeof ( uint16 )) );
   \   0002C8                ; Setup parameters for call to function osal_mem_alloc
   \   0002C8   90....       MOV     DPTR,#matchED
   \   0002CB   E0           MOVX    A,@DPTR
   \   0002CC   F8           MOV     R0,A
   \   0002CD   A3           INC     DPTR
   \   0002CE   E0           MOVX    A,@DPTR
   \   0002CF   C8           XCH     A,R0
   \   0002D0   2434         ADD     A,#0x34
   \   0002D2   F582         MOV     DPL,A
   \   0002D4   C8           XCH     A,R0
   \   0002D5   3400         ADDC    A,#0x0
   \   0002D7   F583         MOV     DPH,A
   \   0002D9   E0           MOVX    A,@DPTR
   \   0002DA   FA           MOV     R2,A
   \   0002DB   7B00         MOV     R3,#0x0
   \   0002DD   EA           MOV     A,R2
   \   0002DE   75F002       MOV     B,#0x2
   \   0002E1   A4           MUL     AB
   \   0002E2   CA           XCH     A,R2
   \   0002E3   A8F0         MOV     R0,B
   \   0002E5   75F000       MOV     B,#0x0
   \   0002E8   A4           MUL     AB
   \   0002E9   28           ADD     A,R0
   \   0002EA   F8           MOV     R0,A
   \   0002EB   75F002       MOV     B,#0x2
   \   0002EE   EB           MOV     A,R3
   \   0002EF   A4           MUL     AB
   \   0002F0   28           ADD     A,R0
   \   0002F1   FB           MOV     R3,A
   \   0002F2   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0002F5   8A..         MOV     ?V2,R2
   \   0002F7   8B..         MOV     ?V3,R3
   \   0002F9   A8..         MOV     R0,?V2
   \   0002FB   A9..         MOV     R1,?V3
   \   0002FD   90....       MOV     DPTR,#matchED
   \   000300   E0           MOVX    A,@DPTR
   \   000301   FA           MOV     R2,A
   \   000302   A3           INC     DPTR
   \   000303   E0           MOVX    A,@DPTR
   \   000304   CA           XCH     A,R2
   \   000305   2435         ADD     A,#0x35
   \   000307   F582         MOV     DPL,A
   \   000309   CA           XCH     A,R2
   \   00030A   3400         ADDC    A,#0x0
   \   00030C   F583         MOV     DPH,A
   \   00030E   E8           MOV     A,R0
   \   00030F   F0           MOVX    @DPTR,A
   \   000310   A3           INC     DPTR
   \   000311   E9           MOV     A,R1
   \   000312   F0           MOVX    @DPTR,A
   2257                  if ( matchED->ed2Matched )
   \   000313   90....       MOV     DPTR,#matchED
   \   000316   E0           MOVX    A,@DPTR
   \   000317   F8           MOV     R0,A
   \   000318   A3           INC     DPTR
   \   000319   E0           MOVX    A,@DPTR
   \   00031A   C8           XCH     A,R0
   \   00031B   2435         ADD     A,#0x35
   \   00031D   F582         MOV     DPL,A
   \   00031F   C8           XCH     A,R0
   \   000320   3400         ADDC    A,#0x0
   \   000322   F583         MOV     DPH,A
   \   000324   E0           MOVX    A,@DPTR
   \   000325   F8           MOV     R0,A
   \   000326   A3           INC     DPTR
   \   000327   E0           MOVX    A,@DPTR
   \   000328   F9           MOV     R1,A
   \   000329   E8           MOV     A,R0
   \   00032A   49           ORL     A,R1
   \   00032B   6058         JZ      ??ZDO_MatchEndDeviceBind_8
   2258                  {
   2259                    osal_memcpy( matchED->ed2Matched, ZDOBuildBuf, (matchED->ed2numMatched * sizeof ( uint16 )) );
   \   00032D                ; Setup parameters for call to function osal_memcpy
   \   00032D   75....       MOV     ?V4,#ZDOBuildBuf & 0xff
   \   000330   75....       MOV     ?V5,#(ZDOBuildBuf >> 8) & 0xff
   \   000333   75..00       MOV     ?V6,#0x0
   \   000336   78..         MOV     R0,#?V4
   \   000338   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00033B   90....       MOV     DPTR,#matchED
   \   00033E   E0           MOVX    A,@DPTR
   \   00033F   F8           MOV     R0,A
   \   000340   A3           INC     DPTR
   \   000341   E0           MOVX    A,@DPTR
   \   000342   C8           XCH     A,R0
   \   000343   2434         ADD     A,#0x34
   \   000345   F582         MOV     DPL,A
   \   000347   C8           XCH     A,R0
   \   000348   3400         ADDC    A,#0x0
   \   00034A   F583         MOV     DPH,A
   \   00034C   E0           MOVX    A,@DPTR
   \   00034D   FC           MOV     R4,A
   \   00034E   7D00         MOV     R5,#0x0
   \   000350   EC           MOV     A,R4
   \   000351   75F002       MOV     B,#0x2
   \   000354   A4           MUL     AB
   \   000355   CC           XCH     A,R4
   \   000356   A8F0         MOV     R0,B
   \   000358   75F000       MOV     B,#0x0
   \   00035B   A4           MUL     AB
   \   00035C   28           ADD     A,R0
   \   00035D   F8           MOV     R0,A
   \   00035E   75F002       MOV     B,#0x2
   \   000361   ED           MOV     A,R5
   \   000362   A4           MUL     AB
   \   000363   28           ADD     A,R0
   \   000364   FD           MOV     R5,A
   \   000365   90....       MOV     DPTR,#matchED
   \   000368   E0           MOVX    A,@DPTR
   \   000369   F8           MOV     R0,A
   \   00036A   A3           INC     DPTR
   \   00036B   E0           MOVX    A,@DPTR
   \   00036C   C8           XCH     A,R0
   \   00036D   2435         ADD     A,#0x35
   \   00036F   F582         MOV     DPL,A
   \   000371   C8           XCH     A,R0
   \   000372   3400         ADDC    A,#0x0
   \   000374   F583         MOV     DPH,A
   \   000376   E0           MOVX    A,@DPTR
   \   000377   FA           MOV     R2,A
   \   000378   A3           INC     DPTR
   \   000379   E0           MOVX    A,@DPTR
   \   00037A   FB           MOV     R3,A
   \   00037B   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00037E   7403         MOV     A,#0x3
   \   000380   12....       LCALL   ?DEALLOC_XSTACK8
   \   000383   800C         SJMP    ??ZDO_MatchEndDeviceBind_7
   2260                  }
   2261                  else
   2262                  {
   2263                    // Allocation error, stop
   2264                    status = ZDP_NO_ENTRY;
   \                     ??ZDO_MatchEndDeviceBind_8:
   \   000385   85..82       MOV     DPL,?XSP + 0
   \   000388   85..83       MOV     DPH,?XSP + 1
   \   00038B   7488         MOV     A,#-0x78
   \   00038D   F0           MOVX    @DPTR,A
   2265                    sendRsp = TRUE;
   \   00038E   75..01       MOV     ?V0,#0x1
   2266                  }
   2267                }
   2268          
   2269                if ( (sendRsp == FALSE) && (matchED->ed1numMatched || matchED->ed2numMatched) )
   \                     ??ZDO_MatchEndDeviceBind_7:
   \   000391   E5..         MOV     A,?V0
   \   000393   7034         JNZ     ??ZDO_MatchEndDeviceBind_9
   \   000395   90....       MOV     DPTR,#matchED
   \   000398   E0           MOVX    A,@DPTR
   \   000399   F8           MOV     R0,A
   \   00039A   A3           INC     DPTR
   \   00039B   E0           MOVX    A,@DPTR
   \   00039C   C8           XCH     A,R0
   \   00039D   2431         ADD     A,#0x31
   \   00039F   F582         MOV     DPL,A
   \   0003A1   C8           XCH     A,R0
   \   0003A2   3400         ADDC    A,#0x0
   \   0003A4   F583         MOV     DPH,A
   \   0003A6   E0           MOVX    A,@DPTR
   \   0003A7   7014         JNZ     ??ZDO_MatchEndDeviceBind_10
   \   0003A9   90....       MOV     DPTR,#matchED
   \   0003AC   E0           MOVX    A,@DPTR
   \   0003AD   F8           MOV     R0,A
   \   0003AE   A3           INC     DPTR
   \   0003AF   E0           MOVX    A,@DPTR
   \   0003B0   C8           XCH     A,R0
   \   0003B1   2434         ADD     A,#0x34
   \   0003B3   F582         MOV     DPL,A
   \   0003B5   C8           XCH     A,R0
   \   0003B6   3400         ADDC    A,#0x0
   \   0003B8   F583         MOV     DPH,A
   \   0003BA   E0           MOVX    A,@DPTR
   \   0003BB   600C         JZ      ??ZDO_MatchEndDeviceBind_9
   2270                {
   2271                  // Do the first unbind/bind state
   2272                  ZDMatchSendState( ZDMATCH_REASON_START, ZDP_SUCCESS, 0 );
   \                     ??ZDO_MatchEndDeviceBind_10:
   \   0003BD                ; Setup parameters for call to function ZDMatchSendState
   \   0003BD   7B00         MOV     R3,#0x0
   \   0003BF   7A00         MOV     R2,#0x0
   \   0003C1   7900         MOV     R1,#0x0
   \   0003C3   12....       LCALL   `??ZDMatchSendState::?relay`; Banked call to: ZDMatchSendState
   \   0003C6   E9           MOV     A,R1
   \   0003C7   800C         SJMP    ??ZDO_MatchEndDeviceBind_3
   2273                }
   2274                else
   2275                {
   2276                  status = ZDP_NO_MATCH;
   \                     ??ZDO_MatchEndDeviceBind_9:
   \   0003C9   85..82       MOV     DPL,?XSP + 0
   \   0003CC   85..83       MOV     DPH,?XSP + 1
   \   0003CF   7486         MOV     A,#-0x7a
   \   0003D1   F0           MOVX    @DPTR,A
   2277                  sendRsp = TRUE;
   \   0003D2   75..01       MOV     ?V0,#0x1
   2278                }
   2279            }
   2280          
   2281            if ( sendRsp )
   \                     ??ZDO_MatchEndDeviceBind_3:
   \   0003D5   E5..         MOV     A,?V0
   \   0003D7   7003         JNZ     $+5
   \   0003D9   02....       LJMP    ??ZDO_MatchEndDeviceBind_11 & 0xFFFF
   2282            {
   2283              // send response to this requester
   2284              dstAddr.addrMode = Addr16Bit;
   \   0003DC   7409         MOV     A,#0x9
   \   0003DE   12....       LCALL   ?XSTACK_DISP0_8
   \   0003E1   7402         MOV     A,#0x2
   \   0003E3   F0           MOVX    @DPTR,A
   2285              dstAddr.addr.shortAddr = bindReq->srcAddr;
   \   0003E4   8E82         MOV     DPL,R6
   \   0003E6   8F83         MOV     DPH,R7
   \   0003E8   A3           INC     DPTR
   \   0003E9   A3           INC     DPTR
   \   0003EA   E0           MOVX    A,@DPTR
   \   0003EB   F8           MOV     R0,A
   \   0003EC   A3           INC     DPTR
   \   0003ED   E0           MOVX    A,@DPTR
   \   0003EE   F9           MOV     R1,A
   \   0003EF   7401         MOV     A,#0x1
   \   0003F1   12....       LCALL   ?XSTACK_DISP0_8
   \   0003F4   E8           MOV     A,R0
   \   0003F5   F0           MOVX    @DPTR,A
   \   0003F6   A3           INC     DPTR
   \   0003F7   E9           MOV     A,R1
   \   0003F8   F0           MOVX    @DPTR,A
   2286              ZDP_EndDeviceBindRsp( bindReq->TransSeq, &dstAddr, status, bindReq->SecurityUse );
   \   0003F9                ; Setup parameters for call to function ZDP_SendData
   \   0003F9   8E82         MOV     DPL,R6
   \   0003FB   8F83         MOV     DPH,R7
   \   0003FD   A3           INC     DPTR
   \   0003FE   E0           MOVX    A,@DPTR
   \   0003FF   F5..         MOV     ?V0,A
   \   000401   78..         MOV     R0,#?V0
   \   000403   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000406   7401         MOV     A,#0x1
   \   000408   12....       LCALL   ?XSTACK_DISP100_8
   \   00040B   88..         MOV     ?V0,R0
   \   00040D   89..         MOV     ?V1,R1
   \   00040F   78..         MOV     R0,#?V0
   \   000411   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000414   75..20       MOV     ?V0,#0x20
   \   000417   75..80       MOV     ?V1,#-0x80
   \   00041A   78..         MOV     R0,#?V0
   \   00041C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00041F   7901         MOV     R1,#0x1
   \   000421   7406         MOV     A,#0x6
   \   000423   12....       LCALL   ?XSTACK_DISP102_8
   \   000426   EE           MOV     A,R6
   \   000427   FA           MOV     R2,A
   \   000428   EF           MOV     A,R7
   \   000429   FB           MOV     R3,A
   \   00042A   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   00042D   7405         MOV     A,#0x5
   \   00042F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000432   E9           MOV     A,R1
   2287          
   2288              if ( matchED->state == ZDMATCH_SENDING_BINDS )
   \   000433   90....       MOV     DPTR,#matchED
   \   000436   E0           MOVX    A,@DPTR
   \   000437   F8           MOV     R0,A
   \   000438   A3           INC     DPTR
   \   000439   E0           MOVX    A,@DPTR
   \   00043A   C8           XCH     A,R0
   \   00043B   242E         ADD     A,#0x2e
   \   00043D   F582         MOV     DPL,A
   \   00043F   C8           XCH     A,R0
   \   000440   3400         ADDC    A,#0x0
   \   000442   F583         MOV     DPH,A
   \   000444   E0           MOVX    A,@DPTR
   \   000445   6402         XRL     A,#0x2
   \   000447   7069         JNZ     ??ZDO_MatchEndDeviceBind_12
   2289              {
   2290                // send response to first requester
   2291                dstAddr.addrMode = Addr16Bit;
   \   000449   7409         MOV     A,#0x9
   \   00044B   12....       LCALL   ?XSTACK_DISP0_8
   \   00044E   7402         MOV     A,#0x2
   \   000450   F0           MOVX    @DPTR,A
   2292                dstAddr.addr.shortAddr = matchED->ed1.srcAddr;
   \   000451   90....       MOV     DPTR,#matchED
   \   000454   E0           MOVX    A,@DPTR
   \   000455   F8           MOV     R0,A
   \   000456   A3           INC     DPTR
   \   000457   E0           MOVX    A,@DPTR
   \   000458   F583         MOV     DPH,A
   \   00045A   8882         MOV     DPL,R0
   \   00045C   A3           INC     DPTR
   \   00045D   A3           INC     DPTR
   \   00045E   E0           MOVX    A,@DPTR
   \   00045F   F8           MOV     R0,A
   \   000460   A3           INC     DPTR
   \   000461   E0           MOVX    A,@DPTR
   \   000462   F9           MOV     R1,A
   \   000463   7401         MOV     A,#0x1
   \   000465   12....       LCALL   ?XSTACK_DISP0_8
   \   000468   E8           MOV     A,R0
   \   000469   F0           MOVX    @DPTR,A
   \   00046A   A3           INC     DPTR
   \   00046B   E9           MOV     A,R1
   \   00046C   F0           MOVX    @DPTR,A
   2293                ZDP_EndDeviceBindRsp( matchED->ed1.TransSeq, &dstAddr, status, matchED->ed1.SecurityUse );
   \   00046D                ; Setup parameters for call to function ZDP_SendData
   \   00046D   90....       MOV     DPTR,#matchED
   \   000470   E0           MOVX    A,@DPTR
   \   000471   F8           MOV     R0,A
   \   000472   A3           INC     DPTR
   \   000473   E0           MOVX    A,@DPTR
   \   000474   F583         MOV     DPH,A
   \   000476   8882         MOV     DPL,R0
   \   000478   A3           INC     DPTR
   \   000479   E0           MOVX    A,@DPTR
   \   00047A   F5..         MOV     ?V0,A
   \   00047C   78..         MOV     R0,#?V0
   \   00047E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000481   7401         MOV     A,#0x1
   \   000483   12....       LCALL   ?XSTACK_DISP100_8
   \   000486   88..         MOV     ?V0,R0
   \   000488   89..         MOV     ?V1,R1
   \   00048A   78..         MOV     R0,#?V0
   \   00048C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00048F   75..20       MOV     ?V0,#0x20
   \   000492   75..80       MOV     ?V1,#-0x80
   \   000495   78..         MOV     R0,#?V0
   \   000497   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00049A   7901         MOV     R1,#0x1
   \   00049C   7406         MOV     A,#0x6
   \   00049E   12....       LCALL   ?XSTACK_DISP102_8
   \   0004A1   90....       MOV     DPTR,#matchED
   \   0004A4   E0           MOVX    A,@DPTR
   \   0004A5   FA           MOV     R2,A
   \   0004A6   A3           INC     DPTR
   \   0004A7   E0           MOVX    A,@DPTR
   \   0004A8   FB           MOV     R3,A
   \   0004A9   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   0004AC   7405         MOV     A,#0x5
   \   0004AE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0004B1   E9           MOV     A,R1
   2294              }
   2295          
   2296              // Process ended - release memory used
   2297              ZDO_RemoveMatchMemory();
   \                     ??ZDO_MatchEndDeviceBind_12:
   \   0004B2                ; Setup parameters for call to function ZDO_RemoveMatchMemory
   \   0004B2   12....       LCALL   `??ZDO_RemoveMatchMemory::?relay`; Banked call to: ZDO_RemoveMatchMemory
   2298            }
   2299          }
   \                     ??ZDO_MatchEndDeviceBind_11:
   \   0004B5   740A         MOV     A,#0xa
   \   0004B7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0004BA   7F07         MOV     R7,#0x7
   \   0004BC   02....       LJMP    ?BANKED_LEAVE_XDATA
   2300          
   2301          /*********************************************************************
   2302           * @fn      ZDO_RemoveMatchMemory()
   2303           *
   2304           * @brief   Called to clear the memory used for the end device bind.
   2305           *
   2306           * @param  none
   2307           *
   2308           * @return  none
   2309           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2310          static void ZDO_RemoveMatchMemory( void )
   \                     ZDO_RemoveMatchMemory:
   2311          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2312            if ( matchED != NULL )
   \   000004   90....       MOV     DPTR,#matchED
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F8           MOV     R0,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F9           MOV     R1,A
   \   00000C   E8           MOV     A,R0
   \   00000D   49           ORL     A,R1
   \   00000E   7003         JNZ     $+5
   \   000010   02....       LJMP    ??ZDO_RemoveMatchMemory_0 & 0xFFFF
   2313            {
   2314              if ( matchED->ed2Matched != NULL )
   \   000013   90....       MOV     DPTR,#matchED
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F8           MOV     R0,A
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   C8           XCH     A,R0
   \   00001B   2435         ADD     A,#0x35
   \   00001D   F582         MOV     DPL,A
   \   00001F   C8           XCH     A,R0
   \   000020   3400         ADDC    A,#0x0
   \   000022   F583         MOV     DPH,A
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F8           MOV     R0,A
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F9           MOV     R1,A
   \   000029   E8           MOV     A,R0
   \   00002A   49           ORL     A,R1
   \   00002B   6019         JZ      ??ZDO_RemoveMatchMemory_1
   2315              {
   2316                osal_mem_free( matchED->ed2Matched );
   \   00002D                ; Setup parameters for call to function osal_mem_free
   \   00002D   90....       MOV     DPTR,#matchED
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F8           MOV     R0,A
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   C8           XCH     A,R0
   \   000035   2435         ADD     A,#0x35
   \   000037   F582         MOV     DPL,A
   \   000039   C8           XCH     A,R0
   \   00003A   3400         ADDC    A,#0x0
   \   00003C   F583         MOV     DPH,A
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   FA           MOV     R2,A
   \   000040   A3           INC     DPTR
   \   000041   E0           MOVX    A,@DPTR
   \   000042   FB           MOV     R3,A
   \   000043   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2317              }
   2318              if ( matchED->ed1Matched != NULL )
   \                     ??ZDO_RemoveMatchMemory_1:
   \   000046   90....       MOV     DPTR,#matchED
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   F8           MOV     R0,A
   \   00004B   A3           INC     DPTR
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   C8           XCH     A,R0
   \   00004E   2432         ADD     A,#0x32
   \   000050   F582         MOV     DPL,A
   \   000052   C8           XCH     A,R0
   \   000053   3400         ADDC    A,#0x0
   \   000055   F583         MOV     DPH,A
   \   000057   E0           MOVX    A,@DPTR
   \   000058   F8           MOV     R0,A
   \   000059   A3           INC     DPTR
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   F9           MOV     R1,A
   \   00005C   E8           MOV     A,R0
   \   00005D   49           ORL     A,R1
   \   00005E   6019         JZ      ??ZDO_RemoveMatchMemory_2
   2319              {
   2320                osal_mem_free( matchED->ed1Matched );
   \   000060                ; Setup parameters for call to function osal_mem_free
   \   000060   90....       MOV     DPTR,#matchED
   \   000063   E0           MOVX    A,@DPTR
   \   000064   F8           MOV     R0,A
   \   000065   A3           INC     DPTR
   \   000066   E0           MOVX    A,@DPTR
   \   000067   C8           XCH     A,R0
   \   000068   2432         ADD     A,#0x32
   \   00006A   F582         MOV     DPL,A
   \   00006C   C8           XCH     A,R0
   \   00006D   3400         ADDC    A,#0x0
   \   00006F   F583         MOV     DPH,A
   \   000071   E0           MOVX    A,@DPTR
   \   000072   FA           MOV     R2,A
   \   000073   A3           INC     DPTR
   \   000074   E0           MOVX    A,@DPTR
   \   000075   FB           MOV     R3,A
   \   000076   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2321              }
   2322              if ( matchED->ed1.inClusters != NULL )
   \                     ??ZDO_RemoveMatchMemory_2:
   \   000079   90....       MOV     DPTR,#matchED
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   F8           MOV     R0,A
   \   00007E   A3           INC     DPTR
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   C8           XCH     A,R0
   \   000081   2412         ADD     A,#0x12
   \   000083   F582         MOV     DPL,A
   \   000085   C8           XCH     A,R0
   \   000086   3400         ADDC    A,#0x0
   \   000088   F583         MOV     DPH,A
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   F8           MOV     R0,A
   \   00008C   A3           INC     DPTR
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   F9           MOV     R1,A
   \   00008F   E8           MOV     A,R0
   \   000090   49           ORL     A,R1
   \   000091   6019         JZ      ??ZDO_RemoveMatchMemory_3
   2323              {
   2324                osal_mem_free( matchED->ed1.inClusters );
   \   000093                ; Setup parameters for call to function osal_mem_free
   \   000093   90....       MOV     DPTR,#matchED
   \   000096   E0           MOVX    A,@DPTR
   \   000097   F8           MOV     R0,A
   \   000098   A3           INC     DPTR
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   C8           XCH     A,R0
   \   00009B   2412         ADD     A,#0x12
   \   00009D   F582         MOV     DPL,A
   \   00009F   C8           XCH     A,R0
   \   0000A0   3400         ADDC    A,#0x0
   \   0000A2   F583         MOV     DPH,A
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   FA           MOV     R2,A
   \   0000A6   A3           INC     DPTR
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   FB           MOV     R3,A
   \   0000A9   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2325              }
   2326              if ( matchED->ed1.outClusters != NULL )
   \                     ??ZDO_RemoveMatchMemory_3:
   \   0000AC   90....       MOV     DPTR,#matchED
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   F8           MOV     R0,A
   \   0000B1   A3           INC     DPTR
   \   0000B2   E0           MOVX    A,@DPTR
   \   0000B3   C8           XCH     A,R0
   \   0000B4   2415         ADD     A,#0x15
   \   0000B6   F582         MOV     DPL,A
   \   0000B8   C8           XCH     A,R0
   \   0000B9   3400         ADDC    A,#0x0
   \   0000BB   F583         MOV     DPH,A
   \   0000BD   E0           MOVX    A,@DPTR
   \   0000BE   F8           MOV     R0,A
   \   0000BF   A3           INC     DPTR
   \   0000C0   E0           MOVX    A,@DPTR
   \   0000C1   F9           MOV     R1,A
   \   0000C2   E8           MOV     A,R0
   \   0000C3   49           ORL     A,R1
   \   0000C4   6019         JZ      ??ZDO_RemoveMatchMemory_4
   2327              {
   2328                osal_mem_free( matchED->ed1.outClusters );
   \   0000C6                ; Setup parameters for call to function osal_mem_free
   \   0000C6   90....       MOV     DPTR,#matchED
   \   0000C9   E0           MOVX    A,@DPTR
   \   0000CA   F8           MOV     R0,A
   \   0000CB   A3           INC     DPTR
   \   0000CC   E0           MOVX    A,@DPTR
   \   0000CD   C8           XCH     A,R0
   \   0000CE   2415         ADD     A,#0x15
   \   0000D0   F582         MOV     DPL,A
   \   0000D2   C8           XCH     A,R0
   \   0000D3   3400         ADDC    A,#0x0
   \   0000D5   F583         MOV     DPH,A
   \   0000D7   E0           MOVX    A,@DPTR
   \   0000D8   FA           MOV     R2,A
   \   0000D9   A3           INC     DPTR
   \   0000DA   E0           MOVX    A,@DPTR
   \   0000DB   FB           MOV     R3,A
   \   0000DC   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2329              }
   2330              if ( matchED->ed2.inClusters != NULL )
   \                     ??ZDO_RemoveMatchMemory_4:
   \   0000DF   90....       MOV     DPTR,#matchED
   \   0000E2   E0           MOVX    A,@DPTR
   \   0000E3   F8           MOV     R0,A
   \   0000E4   A3           INC     DPTR
   \   0000E5   E0           MOVX    A,@DPTR
   \   0000E6   C8           XCH     A,R0
   \   0000E7   2429         ADD     A,#0x29
   \   0000E9   F582         MOV     DPL,A
   \   0000EB   C8           XCH     A,R0
   \   0000EC   3400         ADDC    A,#0x0
   \   0000EE   F583         MOV     DPH,A
   \   0000F0   E0           MOVX    A,@DPTR
   \   0000F1   F8           MOV     R0,A
   \   0000F2   A3           INC     DPTR
   \   0000F3   E0           MOVX    A,@DPTR
   \   0000F4   F9           MOV     R1,A
   \   0000F5   E8           MOV     A,R0
   \   0000F6   49           ORL     A,R1
   \   0000F7   6019         JZ      ??ZDO_RemoveMatchMemory_5
   2331              {
   2332                osal_mem_free( matchED->ed2.inClusters );
   \   0000F9                ; Setup parameters for call to function osal_mem_free
   \   0000F9   90....       MOV     DPTR,#matchED
   \   0000FC   E0           MOVX    A,@DPTR
   \   0000FD   F8           MOV     R0,A
   \   0000FE   A3           INC     DPTR
   \   0000FF   E0           MOVX    A,@DPTR
   \   000100   C8           XCH     A,R0
   \   000101   2429         ADD     A,#0x29
   \   000103   F582         MOV     DPL,A
   \   000105   C8           XCH     A,R0
   \   000106   3400         ADDC    A,#0x0
   \   000108   F583         MOV     DPH,A
   \   00010A   E0           MOVX    A,@DPTR
   \   00010B   FA           MOV     R2,A
   \   00010C   A3           INC     DPTR
   \   00010D   E0           MOVX    A,@DPTR
   \   00010E   FB           MOV     R3,A
   \   00010F   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2333              }
   2334              if ( matchED->ed2.outClusters != NULL )
   \                     ??ZDO_RemoveMatchMemory_5:
   \   000112   90....       MOV     DPTR,#matchED
   \   000115   E0           MOVX    A,@DPTR
   \   000116   F8           MOV     R0,A
   \   000117   A3           INC     DPTR
   \   000118   E0           MOVX    A,@DPTR
   \   000119   C8           XCH     A,R0
   \   00011A   242C         ADD     A,#0x2c
   \   00011C   F582         MOV     DPL,A
   \   00011E   C8           XCH     A,R0
   \   00011F   3400         ADDC    A,#0x0
   \   000121   F583         MOV     DPH,A
   \   000123   E0           MOVX    A,@DPTR
   \   000124   F8           MOV     R0,A
   \   000125   A3           INC     DPTR
   \   000126   E0           MOVX    A,@DPTR
   \   000127   F9           MOV     R1,A
   \   000128   E8           MOV     A,R0
   \   000129   49           ORL     A,R1
   \   00012A   6019         JZ      ??ZDO_RemoveMatchMemory_6
   2335              {
   2336                osal_mem_free( matchED->ed2.outClusters );
   \   00012C                ; Setup parameters for call to function osal_mem_free
   \   00012C   90....       MOV     DPTR,#matchED
   \   00012F   E0           MOVX    A,@DPTR
   \   000130   F8           MOV     R0,A
   \   000131   A3           INC     DPTR
   \   000132   E0           MOVX    A,@DPTR
   \   000133   C8           XCH     A,R0
   \   000134   242C         ADD     A,#0x2c
   \   000136   F582         MOV     DPL,A
   \   000138   C8           XCH     A,R0
   \   000139   3400         ADDC    A,#0x0
   \   00013B   F583         MOV     DPH,A
   \   00013D   E0           MOVX    A,@DPTR
   \   00013E   FA           MOV     R2,A
   \   00013F   A3           INC     DPTR
   \   000140   E0           MOVX    A,@DPTR
   \   000141   FB           MOV     R3,A
   \   000142   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2337              }
   2338          
   2339              osal_mem_free( matchED );
   \                     ??ZDO_RemoveMatchMemory_6:
   \   000145                ; Setup parameters for call to function osal_mem_free
   \   000145   90....       MOV     DPTR,#matchED
   \   000148   E0           MOVX    A,@DPTR
   \   000149   FA           MOV     R2,A
   \   00014A   A3           INC     DPTR
   \   00014B   E0           MOVX    A,@DPTR
   \   00014C   FB           MOV     R3,A
   \   00014D   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2340              matchED = (ZDMatchEndDeviceBind_t *)NULL;
   \   000150   90....       MOV     DPTR,#matchED
   \   000153   7400         MOV     A,#0x0
   \   000155   F0           MOVX    @DPTR,A
   \   000156   A3           INC     DPTR
   \   000157   7400         MOV     A,#0x0
   \   000159   F0           MOVX    @DPTR,A
   2341            }
   2342          }
   \                     ??ZDO_RemoveMatchMemory_0:
   \   00015A   D083         POP     DPH
   \   00015C   D082         POP     DPL
   \   00015E   02....       LJMP    ?BRET
   2343          
   2344          /*********************************************************************
   2345           * @fn      ZDO_CopyMatchInfo()
   2346           *
   2347           * @brief   Called to copy memory used for the end device bind.
   2348           *
   2349           * @param  srcReq - source information
   2350           * @param  dstReq - destination location
   2351           *
   2352           * @return  TRUE if copy was successful.
   2353           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2354          static uint8 ZDO_CopyMatchInfo( ZDEndDeviceBind_t *destReq, ZDEndDeviceBind_t *srcReq )
   \                     ZDO_CopyMatchInfo:
   2355          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
   2356            uint8 allOK = TRUE;
   \   00000D   75..01       MOV     ?V2,#0x1
   2357          
   2358            // Copy bind information into the match info structure
   2359            osal_memcpy( (uint8 *)destReq, srcReq, sizeof ( ZDEndDeviceBind_t ) );
   \   000010                ; Setup parameters for call to function osal_memcpy
   \   000010   85....       MOV     ?V4,?V0
   \   000013   85....       MOV     ?V5,?V1
   \   000016   75..00       MOV     ?V6,#0x0
   \   000019   78..         MOV     R0,#?V4
   \   00001B   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00001E   7C17         MOV     R4,#0x17
   \   000020   7D00         MOV     R5,#0x0
   \   000022   EE           MOV     A,R6
   \   000023   FA           MOV     R2,A
   \   000024   EF           MOV     A,R7
   \   000025   FB           MOV     R3,A
   \   000026   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000029   7403         MOV     A,#0x3
   \   00002B   12....       LCALL   ?DEALLOC_XSTACK8
   2360          
   2361            // Initialize the destination cluster pointers
   2362            destReq->inClusters = NULL;
   \   00002E   EE           MOV     A,R6
   \   00002F   2412         ADD     A,#0x12
   \   000031   F582         MOV     DPL,A
   \   000033   E4           CLR     A
   \   000034   3F           ADDC    A,R7
   \   000035   F583         MOV     DPH,A
   \   000037   7400         MOV     A,#0x0
   \   000039   F0           MOVX    @DPTR,A
   \   00003A   A3           INC     DPTR
   \   00003B   7400         MOV     A,#0x0
   \   00003D   F0           MOVX    @DPTR,A
   2363            destReq->outClusters = NULL;
   \   00003E   EE           MOV     A,R6
   \   00003F   2415         ADD     A,#0x15
   \   000041   F582         MOV     DPL,A
   \   000043   E4           CLR     A
   \   000044   3F           ADDC    A,R7
   \   000045   F583         MOV     DPH,A
   \   000047   7400         MOV     A,#0x0
   \   000049   F0           MOVX    @DPTR,A
   \   00004A   A3           INC     DPTR
   \   00004B   7400         MOV     A,#0x0
   \   00004D   F0           MOVX    @DPTR,A
   2364          
   2365            // Copy input cluster IDs
   2366            if ( srcReq->numInClusters )
   \   00004E   E5..         MOV     A,?V0
   \   000050   2411         ADD     A,#0x11
   \   000052   F582         MOV     DPL,A
   \   000054   E4           CLR     A
   \   000055   35..         ADDC    A,?V1
   \   000057   F583         MOV     DPH,A
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   7003         JNZ     $+5
   \   00005C   02....       LJMP    ??ZDO_CopyMatchInfo_0 & 0xFFFF
   2367            {
   2368              destReq->inClusters = osal_mem_alloc( (short)(srcReq->numInClusters * sizeof ( uint16 )) );
   \   00005F                ; Setup parameters for call to function osal_mem_alloc
   \   00005F   E5..         MOV     A,?V0
   \   000061   2411         ADD     A,#0x11
   \   000063   F582         MOV     DPL,A
   \   000065   E4           CLR     A
   \   000066   35..         ADDC    A,?V1
   \   000068   F583         MOV     DPH,A
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   FA           MOV     R2,A
   \   00006C   7B00         MOV     R3,#0x0
   \   00006E   EA           MOV     A,R2
   \   00006F   75F002       MOV     B,#0x2
   \   000072   A4           MUL     AB
   \   000073   CA           XCH     A,R2
   \   000074   A8F0         MOV     R0,B
   \   000076   75F000       MOV     B,#0x0
   \   000079   A4           MUL     AB
   \   00007A   28           ADD     A,R0
   \   00007B   F8           MOV     R0,A
   \   00007C   75F002       MOV     B,#0x2
   \   00007F   EB           MOV     A,R3
   \   000080   A4           MUL     AB
   \   000081   28           ADD     A,R0
   \   000082   FB           MOV     R3,A
   \   000083   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000086   EE           MOV     A,R6
   \   000087   2412         ADD     A,#0x12
   \   000089   F582         MOV     DPL,A
   \   00008B   E4           CLR     A
   \   00008C   3F           ADDC    A,R7
   \   00008D   F583         MOV     DPH,A
   \   00008F   EA           MOV     A,R2
   \   000090   F0           MOVX    @DPTR,A
   \   000091   A3           INC     DPTR
   \   000092   EB           MOV     A,R3
   \   000093   F0           MOVX    @DPTR,A
   2369              if ( destReq->inClusters )
   \   000094   EE           MOV     A,R6
   \   000095   2412         ADD     A,#0x12
   \   000097   F582         MOV     DPL,A
   \   000099   E4           CLR     A
   \   00009A   3F           ADDC    A,R7
   \   00009B   F583         MOV     DPH,A
   \   00009D   E0           MOVX    A,@DPTR
   \   00009E   F8           MOV     R0,A
   \   00009F   A3           INC     DPTR
   \   0000A0   E0           MOVX    A,@DPTR
   \   0000A1   F9           MOV     R1,A
   \   0000A2   E8           MOV     A,R0
   \   0000A3   49           ORL     A,R1
   \   0000A4   6056         JZ      ??ZDO_CopyMatchInfo_1
   2370              {
   2371                // Copy the clusters
   2372                osal_memcpy( (uint8*)(destReq->inClusters), (uint8 *)(srcReq->inClusters),
   2373                                (srcReq->numInClusters * sizeof ( uint16 )) );
   \   0000A6                ; Setup parameters for call to function osal_memcpy
   \   0000A6   E5..         MOV     A,?V0
   \   0000A8   2412         ADD     A,#0x12
   \   0000AA   F582         MOV     DPL,A
   \   0000AC   E4           CLR     A
   \   0000AD   35..         ADDC    A,?V1
   \   0000AF   F583         MOV     DPH,A
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   F5..         MOV     ?V4,A
   \   0000B4   A3           INC     DPTR
   \   0000B5   E0           MOVX    A,@DPTR
   \   0000B6   F5..         MOV     ?V5,A
   \   0000B8   75..00       MOV     ?V6,#0x0
   \   0000BB   78..         MOV     R0,#?V4
   \   0000BD   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000C0   E5..         MOV     A,?V0
   \   0000C2   2411         ADD     A,#0x11
   \   0000C4   F582         MOV     DPL,A
   \   0000C6   E4           CLR     A
   \   0000C7   35..         ADDC    A,?V1
   \   0000C9   F583         MOV     DPH,A
   \   0000CB   E0           MOVX    A,@DPTR
   \   0000CC   FC           MOV     R4,A
   \   0000CD   7D00         MOV     R5,#0x0
   \   0000CF   EC           MOV     A,R4
   \   0000D0   75F002       MOV     B,#0x2
   \   0000D3   A4           MUL     AB
   \   0000D4   CC           XCH     A,R4
   \   0000D5   A8F0         MOV     R0,B
   \   0000D7   75F000       MOV     B,#0x0
   \   0000DA   A4           MUL     AB
   \   0000DB   28           ADD     A,R0
   \   0000DC   F8           MOV     R0,A
   \   0000DD   75F002       MOV     B,#0x2
   \   0000E0   ED           MOV     A,R5
   \   0000E1   A4           MUL     AB
   \   0000E2   28           ADD     A,R0
   \   0000E3   FD           MOV     R5,A
   \   0000E4   EE           MOV     A,R6
   \   0000E5   2412         ADD     A,#0x12
   \   0000E7   F582         MOV     DPL,A
   \   0000E9   E4           CLR     A
   \   0000EA   3F           ADDC    A,R7
   \   0000EB   F583         MOV     DPH,A
   \   0000ED   E0           MOVX    A,@DPTR
   \   0000EE   FA           MOV     R2,A
   \   0000EF   A3           INC     DPTR
   \   0000F0   E0           MOVX    A,@DPTR
   \   0000F1   FB           MOV     R3,A
   \   0000F2   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000F5   7403         MOV     A,#0x3
   \   0000F7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000FA   8003         SJMP    ??ZDO_CopyMatchInfo_0
   2374              }
   2375              else
   2376              {
   2377                allOK = FALSE;
   \                     ??ZDO_CopyMatchInfo_1:
   \   0000FC   75..00       MOV     ?V2,#0x0
   2378              }
   2379            }
   2380          
   2381            // Copy output cluster IDs
   2382            if ( srcReq->numOutClusters )
   \                     ??ZDO_CopyMatchInfo_0:
   \   0000FF   E5..         MOV     A,?V0
   \   000101   2414         ADD     A,#0x14
   \   000103   F582         MOV     DPL,A
   \   000105   E4           CLR     A
   \   000106   35..         ADDC    A,?V1
   \   000108   F583         MOV     DPH,A
   \   00010A   E0           MOVX    A,@DPTR
   \   00010B   7003         JNZ     $+5
   \   00010D   02....       LJMP    ??ZDO_CopyMatchInfo_2 & 0xFFFF
   2383            {
   2384              destReq->outClusters = osal_mem_alloc( (short)(srcReq->numOutClusters * sizeof ( uint16 )) );
   \   000110                ; Setup parameters for call to function osal_mem_alloc
   \   000110   E5..         MOV     A,?V0
   \   000112   2414         ADD     A,#0x14
   \   000114   F582         MOV     DPL,A
   \   000116   E4           CLR     A
   \   000117   35..         ADDC    A,?V1
   \   000119   F583         MOV     DPH,A
   \   00011B   E0           MOVX    A,@DPTR
   \   00011C   FA           MOV     R2,A
   \   00011D   7B00         MOV     R3,#0x0
   \   00011F   EA           MOV     A,R2
   \   000120   75F002       MOV     B,#0x2
   \   000123   A4           MUL     AB
   \   000124   CA           XCH     A,R2
   \   000125   A8F0         MOV     R0,B
   \   000127   75F000       MOV     B,#0x0
   \   00012A   A4           MUL     AB
   \   00012B   28           ADD     A,R0
   \   00012C   F8           MOV     R0,A
   \   00012D   75F002       MOV     B,#0x2
   \   000130   EB           MOV     A,R3
   \   000131   A4           MUL     AB
   \   000132   28           ADD     A,R0
   \   000133   FB           MOV     R3,A
   \   000134   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000137   EE           MOV     A,R6
   \   000138   2415         ADD     A,#0x15
   \   00013A   F582         MOV     DPL,A
   \   00013C   E4           CLR     A
   \   00013D   3F           ADDC    A,R7
   \   00013E   F583         MOV     DPH,A
   \   000140   EA           MOV     A,R2
   \   000141   F0           MOVX    @DPTR,A
   \   000142   A3           INC     DPTR
   \   000143   EB           MOV     A,R3
   \   000144   F0           MOVX    @DPTR,A
   2385              if ( destReq->outClusters )
   \   000145   EE           MOV     A,R6
   \   000146   2415         ADD     A,#0x15
   \   000148   F582         MOV     DPL,A
   \   00014A   E4           CLR     A
   \   00014B   3F           ADDC    A,R7
   \   00014C   F583         MOV     DPH,A
   \   00014E   E0           MOVX    A,@DPTR
   \   00014F   F8           MOV     R0,A
   \   000150   A3           INC     DPTR
   \   000151   E0           MOVX    A,@DPTR
   \   000152   F9           MOV     R1,A
   \   000153   E8           MOV     A,R0
   \   000154   49           ORL     A,R1
   \   000155   6056         JZ      ??ZDO_CopyMatchInfo_3
   2386              {
   2387                // Copy the clusters
   2388                osal_memcpy( (uint8 *)(destReq->outClusters), (uint8 *)(srcReq->outClusters),
   2389                                (srcReq->numOutClusters * sizeof ( uint16 )) );
   \   000157                ; Setup parameters for call to function osal_memcpy
   \   000157   E5..         MOV     A,?V0
   \   000159   2415         ADD     A,#0x15
   \   00015B   F582         MOV     DPL,A
   \   00015D   E4           CLR     A
   \   00015E   35..         ADDC    A,?V1
   \   000160   F583         MOV     DPH,A
   \   000162   E0           MOVX    A,@DPTR
   \   000163   F5..         MOV     ?V4,A
   \   000165   A3           INC     DPTR
   \   000166   E0           MOVX    A,@DPTR
   \   000167   F5..         MOV     ?V5,A
   \   000169   75..00       MOV     ?V6,#0x0
   \   00016C   78..         MOV     R0,#?V4
   \   00016E   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000171   E5..         MOV     A,?V0
   \   000173   2414         ADD     A,#0x14
   \   000175   F582         MOV     DPL,A
   \   000177   E4           CLR     A
   \   000178   35..         ADDC    A,?V1
   \   00017A   F583         MOV     DPH,A
   \   00017C   E0           MOVX    A,@DPTR
   \   00017D   FC           MOV     R4,A
   \   00017E   7D00         MOV     R5,#0x0
   \   000180   EC           MOV     A,R4
   \   000181   75F002       MOV     B,#0x2
   \   000184   A4           MUL     AB
   \   000185   CC           XCH     A,R4
   \   000186   A8F0         MOV     R0,B
   \   000188   75F000       MOV     B,#0x0
   \   00018B   A4           MUL     AB
   \   00018C   28           ADD     A,R0
   \   00018D   F8           MOV     R0,A
   \   00018E   75F002       MOV     B,#0x2
   \   000191   ED           MOV     A,R5
   \   000192   A4           MUL     AB
   \   000193   28           ADD     A,R0
   \   000194   FD           MOV     R5,A
   \   000195   EE           MOV     A,R6
   \   000196   2415         ADD     A,#0x15
   \   000198   F582         MOV     DPL,A
   \   00019A   E4           CLR     A
   \   00019B   3F           ADDC    A,R7
   \   00019C   F583         MOV     DPH,A
   \   00019E   E0           MOVX    A,@DPTR
   \   00019F   FA           MOV     R2,A
   \   0001A0   A3           INC     DPTR
   \   0001A1   E0           MOVX    A,@DPTR
   \   0001A2   FB           MOV     R3,A
   \   0001A3   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0001A6   7403         MOV     A,#0x3
   \   0001A8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001AB   8003         SJMP    ??ZDO_CopyMatchInfo_2
   2390              }
   2391              else
   2392              {
   2393                allOK = FALSE;
   \                     ??ZDO_CopyMatchInfo_3:
   \   0001AD   75..00       MOV     ?V2,#0x0
   2394              }
   2395            }
   2396          
   2397            if ( allOK == FALSE )
   \                     ??ZDO_CopyMatchInfo_2:
   \   0001B0   E5..         MOV     A,?V2
   \   0001B2   7046         JNZ     ??ZDO_CopyMatchInfo_4
   2398            {
   2399              if ( destReq->inClusters != NULL )
   \   0001B4   EE           MOV     A,R6
   \   0001B5   2412         ADD     A,#0x12
   \   0001B7   F582         MOV     DPL,A
   \   0001B9   E4           CLR     A
   \   0001BA   3F           ADDC    A,R7
   \   0001BB   F583         MOV     DPH,A
   \   0001BD   E0           MOVX    A,@DPTR
   \   0001BE   F8           MOV     R0,A
   \   0001BF   A3           INC     DPTR
   \   0001C0   E0           MOVX    A,@DPTR
   \   0001C1   F9           MOV     R1,A
   \   0001C2   E8           MOV     A,R0
   \   0001C3   49           ORL     A,R1
   \   0001C4   6011         JZ      ??ZDO_CopyMatchInfo_5
   2400              {
   2401                osal_mem_free( destReq->inClusters );
   \   0001C6                ; Setup parameters for call to function osal_mem_free
   \   0001C6   EE           MOV     A,R6
   \   0001C7   2412         ADD     A,#0x12
   \   0001C9   F582         MOV     DPL,A
   \   0001CB   E4           CLR     A
   \   0001CC   3F           ADDC    A,R7
   \   0001CD   F583         MOV     DPH,A
   \   0001CF   E0           MOVX    A,@DPTR
   \   0001D0   FA           MOV     R2,A
   \   0001D1   A3           INC     DPTR
   \   0001D2   E0           MOVX    A,@DPTR
   \   0001D3   FB           MOV     R3,A
   \   0001D4   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2402              }
   2403              if ( destReq->outClusters != NULL )
   \                     ??ZDO_CopyMatchInfo_5:
   \   0001D7   EE           MOV     A,R6
   \   0001D8   2415         ADD     A,#0x15
   \   0001DA   F582         MOV     DPL,A
   \   0001DC   E4           CLR     A
   \   0001DD   3F           ADDC    A,R7
   \   0001DE   F583         MOV     DPH,A
   \   0001E0   E0           MOVX    A,@DPTR
   \   0001E1   F8           MOV     R0,A
   \   0001E2   A3           INC     DPTR
   \   0001E3   E0           MOVX    A,@DPTR
   \   0001E4   F9           MOV     R1,A
   \   0001E5   E8           MOV     A,R0
   \   0001E6   49           ORL     A,R1
   \   0001E7   6011         JZ      ??ZDO_CopyMatchInfo_4
   2404              {
   2405                osal_mem_free( destReq->outClusters );
   \   0001E9                ; Setup parameters for call to function osal_mem_free
   \   0001E9   EE           MOV     A,R6
   \   0001EA   2415         ADD     A,#0x15
   \   0001EC   F582         MOV     DPL,A
   \   0001EE   E4           CLR     A
   \   0001EF   3F           ADDC    A,R7
   \   0001F0   F583         MOV     DPH,A
   \   0001F2   E0           MOVX    A,@DPTR
   \   0001F3   FA           MOV     R2,A
   \   0001F4   A3           INC     DPTR
   \   0001F5   E0           MOVX    A,@DPTR
   \   0001F6   FB           MOV     R3,A
   \   0001F7   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2406              }
   2407            }
   2408          
   2409            return ( allOK );
   \                     ??ZDO_CopyMatchInfo_4:
   \   0001FA   A9..         MOV     R1,?V2
   \   0001FC   7F07         MOV     R7,#0x7
   \   0001FE   02....       LJMP    ?BANKED_LEAVE_XDATA
   2410          }
   2411          
   2412          /*********************************************************************
   2413           * @fn      ZDMatchSendState()
   2414           *
   2415           * @brief   State machine for the End device match message algorithm.
   2416           *
   2417           * @param  reason - state of algoritm
   2418           * @param  status - initial message status
   2419           * @param  TransSeq - next transaction sequence number
   2420           *
   2421           * @return  FALSE if error and we are not currently matching, TRUE
   2422           *          if success.
   2423           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2424          uint8 ZDMatchSendState( uint8 reason, uint8 status, uint8 TransSeq )
   \                     ZDMatchSendState:
   2425          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 19
   \   000005   74ED         MOV     A,#-0x13
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V3,R1
   \   00000C   8A..         MOV     ?V6,R2
   \   00000E   8B..         MOV     ?V7,R3
   2426            uint8 *dstIEEEAddr = NULL;
   \   000010   75..00       MOV     ?V4,#0x0
   \   000013   75..00       MOV     ?V5,#0x0
   2427            uint8 dstEP = 0xFF;
   \   000016   75..FF       MOV     ?V2,#-0x1
   2428            zAddrType_t dstAddr;
   2429            zAddrType_t destinationAddr;
   2430            uint16 msgType;
   2431            uint16 clusterID = 0xFFFF;
   \   000019   75..FF       MOV     ?V8,#-0x1
   \   00001C   75..FF       MOV     ?V9,#-0x1
   2432            ZDEndDeviceBind_t *ed = NULL;
   \   00001F   75..00       MOV     ?V0,#0x0
   \   000022   75..00       MOV     ?V1,#0x0
   2433            uint8 rspStatus = ZDP_SUCCESS;
   \   000025   85..82       MOV     DPL,?XSP + 0
   \   000028   85..83       MOV     DPH,?XSP + 1
   \   00002B   7400         MOV     A,#0x0
   \   00002D   F0           MOVX    @DPTR,A
   2434          
   2435            if ( matchED == NULL )
   \   00002E   90....       MOV     DPTR,#matchED
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F8           MOV     R0,A
   \   000033   A3           INC     DPTR
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F9           MOV     R1,A
   \   000036   E8           MOV     A,R0
   \   000037   49           ORL     A,R1
   \   000038   7005         JNZ     ??ZDMatchSendState_0
   2436            {
   2437              return ( FALSE );
   \   00003A   7900         MOV     R1,#0x0
   \   00003C   02....       LJMP    ??ZDMatchSendState_1 & 0xFFFF
   2438            }
   2439          
   2440            // Check sequence number
   2441            if ( reason == ZDMATCH_REASON_BIND_RSP || reason == ZDMATCH_REASON_UNBIND_RSP )
   \                     ??ZDMatchSendState_0:
   \   00003F   7403         MOV     A,#0x3
   \   000041   65..         XRL     A,?V3
   \   000043   6006         JZ      ??ZDMatchSendState_2
   \   000045   7402         MOV     A,#0x2
   \   000047   65..         XRL     A,?V3
   \   000049   701B         JNZ     ??ZDMatchSendState_3
   2442            {
   2443              if ( TransSeq != matchED->transSeq )
   \                     ??ZDMatchSendState_2:
   \   00004B   90....       MOV     DPTR,#matchED
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   F8           MOV     R0,A
   \   000050   A3           INC     DPTR
   \   000051   E0           MOVX    A,@DPTR
   \   000052   C8           XCH     A,R0
   \   000053   2430         ADD     A,#0x30
   \   000055   F582         MOV     DPL,A
   \   000057   C8           XCH     A,R0
   \   000058   3400         ADDC    A,#0x0
   \   00005A   F583         MOV     DPH,A
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   65..         XRL     A,?V7
   \   00005F   6005         JZ      ??ZDMatchSendState_3
   2444              {
   2445                return( FALSE ); // ignore the message
   \   000061   7900         MOV     R1,#0x0
   \   000063   02....       LJMP    ??ZDMatchSendState_1 & 0xFFFF
   2446              }
   2447            }
   2448          
   2449            // turn off timer
   2450            APS_SetEndDeviceBindTimeout( 0, ZDO_EndDeviceBindMatchTimeoutCB );
   \                     ??ZDMatchSendState_3:
   \   000066                ; Setup parameters for call to function APS_SetEndDeviceBindTimeout
   \   000066   7C..         MOV     R4,#`??ZDO_EndDeviceBindMatchTimeoutCB::?relay` & 0xff
   \   000068   7D..         MOV     R5,#(`??ZDO_EndDeviceBindMatchTimeoutCB::?relay` >> 8) & 0xff
   \   00006A   7A00         MOV     R2,#0x0
   \   00006C   7B00         MOV     R3,#0x0
   \   00006E   12....       LCALL   `??APS_SetEndDeviceBindTimeout::?relay`; Banked call to: APS_SetEndDeviceBindTimeout
   2451          
   2452            if ( reason == ZDMATCH_REASON_TIMEOUT )
   \   000071   7401         MOV     A,#0x1
   \   000073   65..         XRL     A,?V3
   \   000075   7009         JNZ     ??ZDMatchSendState_4
   2453            {
   2454              rspStatus = ZDP_TIMEOUT;    // The process will stop
   \   000077   85..82       MOV     DPL,?XSP + 0
   \   00007A   85..83       MOV     DPH,?XSP + 1
   \   00007D   7485         MOV     A,#-0x7b
   \   00007F   F0           MOVX    @DPTR,A
   2455            }
   2456          
   2457            if ( reason == ZDMATCH_REASON_START || reason == ZDMATCH_REASON_BIND_RSP )
   \                     ??ZDMatchSendState_4:
   \   000080   E5..         MOV     A,?V3
   \   000082   6006         JZ      ??ZDMatchSendState_5
   \   000084   7403         MOV     A,#0x3
   \   000086   65..         XRL     A,?V3
   \   000088   702D         JNZ     ??ZDMatchSendState_6
   2458            {
   2459              matchED->sending = ZDMATCH_SENDING_UNBIND;
   \                     ??ZDMatchSendState_5:
   \   00008A   90....       MOV     DPTR,#matchED
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   F8           MOV     R0,A
   \   00008F   A3           INC     DPTR
   \   000090   E0           MOVX    A,@DPTR
   \   000091   C8           XCH     A,R0
   \   000092   242F         ADD     A,#0x2f
   \   000094   F582         MOV     DPL,A
   \   000096   C8           XCH     A,R0
   \   000097   3400         ADDC    A,#0x0
   \   000099   F583         MOV     DPH,A
   \   00009B   7401         MOV     A,#0x1
   \   00009D   F0           MOVX    @DPTR,A
   2460          
   2461              if ( reason == ZDMATCH_REASON_BIND_RSP && status != ZDP_SUCCESS )
   \   00009E   7403         MOV     A,#0x3
   \   0000A0   65..         XRL     A,?V3
   \   0000A2   7047         JNZ     ??ZDMatchSendState_7
   \   0000A4   E5..         MOV     A,?V6
   \   0000A6   6043         JZ      ??ZDMatchSendState_7
   2462              {
   2463                rspStatus = status;
   \   0000A8   E5..         MOV     A,?V6
   \   0000AA   C0E0         PUSH    A
   \   0000AC   85..82       MOV     DPL,?XSP + 0
   \   0000AF   85..83       MOV     DPH,?XSP + 1
   \   0000B2   D0E0         POP     A
   \   0000B4   F0           MOVX    @DPTR,A
   \   0000B5   8034         SJMP    ??ZDMatchSendState_7
   2464              }
   2465            }
   2466            else if ( reason == ZDMATCH_REASON_UNBIND_RSP )
   \                     ??ZDMatchSendState_6:
   \   0000B7   7402         MOV     A,#0x2
   \   0000B9   65..         XRL     A,?V3
   \   0000BB   702E         JNZ     ??ZDMatchSendState_7
   2467            {
   2468              if ( status == ZDP_SUCCESS )
   \   0000BD   E5..         MOV     A,?V6
   \   0000BF   7016         JNZ     ??ZDMatchSendState_8
   2469              {
   2470                matchED->sending = ZDMATCH_SENDING_UNBIND;
   \   0000C1   90....       MOV     DPTR,#matchED
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   F8           MOV     R0,A
   \   0000C6   A3           INC     DPTR
   \   0000C7   E0           MOVX    A,@DPTR
   \   0000C8   C8           XCH     A,R0
   \   0000C9   242F         ADD     A,#0x2f
   \   0000CB   F582         MOV     DPL,A
   \   0000CD   C8           XCH     A,R0
   \   0000CE   3400         ADDC    A,#0x0
   \   0000D0   F583         MOV     DPH,A
   \   0000D2   7401         MOV     A,#0x1
   \   0000D4   F0           MOVX    @DPTR,A
   \   0000D5   8014         SJMP    ??ZDMatchSendState_7
   2471              }
   2472              else
   2473              {
   2474                matchED->sending = ZDMATCH_SENDING_BIND;
   \                     ??ZDMatchSendState_8:
   \   0000D7   90....       MOV     DPTR,#matchED
   \   0000DA   E0           MOVX    A,@DPTR
   \   0000DB   F8           MOV     R0,A
   \   0000DC   A3           INC     DPTR
   \   0000DD   E0           MOVX    A,@DPTR
   \   0000DE   C8           XCH     A,R0
   \   0000DF   242F         ADD     A,#0x2f
   \   0000E1   F582         MOV     DPL,A
   \   0000E3   C8           XCH     A,R0
   \   0000E4   3400         ADDC    A,#0x0
   \   0000E6   F583         MOV     DPH,A
   \   0000E8   7402         MOV     A,#0x2
   \   0000EA   F0           MOVX    @DPTR,A
   2475              }
   2476            }
   2477          
   2478            if ( reason != ZDMATCH_REASON_START && matchED->sending == ZDMATCH_SENDING_UNBIND )
   \                     ??ZDMatchSendState_7:
   \   0000EB   E5..         MOV     A,?V3
   \   0000ED   606A         JZ      ??ZDMatchSendState_9
   \   0000EF   90....       MOV     DPTR,#matchED
   \   0000F2   E0           MOVX    A,@DPTR
   \   0000F3   F8           MOV     R0,A
   \   0000F4   A3           INC     DPTR
   \   0000F5   E0           MOVX    A,@DPTR
   \   0000F6   C8           XCH     A,R0
   \   0000F7   242F         ADD     A,#0x2f
   \   0000F9   F582         MOV     DPL,A
   \   0000FB   C8           XCH     A,R0
   \   0000FC   3400         ADDC    A,#0x0
   \   0000FE   F583         MOV     DPH,A
   \   000100   E0           MOVX    A,@DPTR
   \   000101   6401         XRL     A,#0x1
   \   000103   7054         JNZ     ??ZDMatchSendState_9
   2479            {
   2480              // Move to the next cluster ID
   2481              if ( matchED->ed1numMatched )
   \   000105   90....       MOV     DPTR,#matchED
   \   000108   E0           MOVX    A,@DPTR
   \   000109   F8           MOV     R0,A
   \   00010A   A3           INC     DPTR
   \   00010B   E0           MOVX    A,@DPTR
   \   00010C   C8           XCH     A,R0
   \   00010D   2431         ADD     A,#0x31
   \   00010F   F582         MOV     DPL,A
   \   000111   C8           XCH     A,R0
   \   000112   3400         ADDC    A,#0x0
   \   000114   F583         MOV     DPH,A
   \   000116   E0           MOVX    A,@DPTR
   \   000117   6017         JZ      ??ZDMatchSendState_10
   2482              {
   2483                matchED->ed1numMatched--;
   \   000119   90....       MOV     DPTR,#matchED
   \   00011C   E0           MOVX    A,@DPTR
   \   00011D   F8           MOV     R0,A
   \   00011E   A3           INC     DPTR
   \   00011F   E0           MOVX    A,@DPTR
   \   000120   C8           XCH     A,R0
   \   000121   2431         ADD     A,#0x31
   \   000123   F582         MOV     DPL,A
   \   000125   C8           XCH     A,R0
   \   000126   3400         ADDC    A,#0x0
   \   000128   F583         MOV     DPH,A
   \   00012A   E0           MOVX    A,@DPTR
   \   00012B   24FF         ADD     A,#-0x1
   \   00012D   F0           MOVX    @DPTR,A
   \   00012E   8029         SJMP    ??ZDMatchSendState_9
   2484              }
   2485              else if ( matchED->ed2numMatched )
   \                     ??ZDMatchSendState_10:
   \   000130   90....       MOV     DPTR,#matchED
   \   000133   E0           MOVX    A,@DPTR
   \   000134   F8           MOV     R0,A
   \   000135   A3           INC     DPTR
   \   000136   E0           MOVX    A,@DPTR
   \   000137   C8           XCH     A,R0
   \   000138   2434         ADD     A,#0x34
   \   00013A   F582         MOV     DPL,A
   \   00013C   C8           XCH     A,R0
   \   00013D   3400         ADDC    A,#0x0
   \   00013F   F583         MOV     DPH,A
   \   000141   E0           MOVX    A,@DPTR
   \   000142   6015         JZ      ??ZDMatchSendState_9
   2486              {
   2487                matchED->ed2numMatched--;
   \   000144   90....       MOV     DPTR,#matchED
   \   000147   E0           MOVX    A,@DPTR
   \   000148   F8           MOV     R0,A
   \   000149   A3           INC     DPTR
   \   00014A   E0           MOVX    A,@DPTR
   \   00014B   C8           XCH     A,R0
   \   00014C   2434         ADD     A,#0x34
   \   00014E   F582         MOV     DPL,A
   \   000150   C8           XCH     A,R0
   \   000151   3400         ADDC    A,#0x0
   \   000153   F583         MOV     DPH,A
   \   000155   E0           MOVX    A,@DPTR
   \   000156   24FF         ADD     A,#-0x1
   \   000158   F0           MOVX    @DPTR,A
   2488              }
   2489            }
   2490          
   2491            // What message do we send now
   2492            if ( matchED->ed1numMatched )
   \                     ??ZDMatchSendState_9:
   \   000159   90....       MOV     DPTR,#matchED
   \   00015C   E0           MOVX    A,@DPTR
   \   00015D   F8           MOV     R0,A
   \   00015E   A3           INC     DPTR
   \   00015F   E0           MOVX    A,@DPTR
   \   000160   C8           XCH     A,R0
   \   000161   2431         ADD     A,#0x31
   \   000163   F582         MOV     DPL,A
   \   000165   C8           XCH     A,R0
   \   000166   3400         ADDC    A,#0x0
   \   000168   F583         MOV     DPH,A
   \   00016A   E0           MOVX    A,@DPTR
   \   00016B   7003         JNZ     $+5
   \   00016D   02....       LJMP    ??ZDMatchSendState_11 & 0xFFFF
   2493            {
   2494              ed = &(matchED->ed1);
   \   000170   90....       MOV     DPTR,#matchED
   \   000173   E0           MOVX    A,@DPTR
   \   000174   F5..         MOV     ?V0,A
   \   000176   A3           INC     DPTR
   \   000177   E0           MOVX    A,@DPTR
   \   000178   F5..         MOV     ?V1,A
   2495              clusterID = matchED->ed1Matched[matchED->ed1numMatched-1];
   \   00017A   90....       MOV     DPTR,#matchED
   \   00017D   E0           MOVX    A,@DPTR
   \   00017E   F8           MOV     R0,A
   \   00017F   A3           INC     DPTR
   \   000180   E0           MOVX    A,@DPTR
   \   000181   C8           XCH     A,R0
   \   000182   2431         ADD     A,#0x31
   \   000184   F582         MOV     DPL,A
   \   000186   C8           XCH     A,R0
   \   000187   3400         ADDC    A,#0x0
   \   000189   F583         MOV     DPH,A
   \   00018B   E0           MOVX    A,@DPTR
   \   00018C   F8           MOV     R0,A
   \   00018D   7900         MOV     R1,#0x0
   \   00018F   E8           MOV     A,R0
   \   000190   75F002       MOV     B,#0x2
   \   000193   A4           MUL     AB
   \   000194   C8           XCH     A,R0
   \   000195   AAF0         MOV     R2,B
   \   000197   75F000       MOV     B,#0x0
   \   00019A   A4           MUL     AB
   \   00019B   2A           ADD     A,R2
   \   00019C   FA           MOV     R2,A
   \   00019D   75F002       MOV     B,#0x2
   \   0001A0   E9           MOV     A,R1
   \   0001A1   A4           MUL     AB
   \   0001A2   2A           ADD     A,R2
   \   0001A3   F9           MOV     R1,A
   \   0001A4   90....       MOV     DPTR,#matchED
   \   0001A7   E0           MOVX    A,@DPTR
   \   0001A8   FA           MOV     R2,A
   \   0001A9   A3           INC     DPTR
   \   0001AA   E0           MOVX    A,@DPTR
   \   0001AB   CA           XCH     A,R2
   \   0001AC   2432         ADD     A,#0x32
   \   0001AE   F582         MOV     DPL,A
   \   0001B0   CA           XCH     A,R2
   \   0001B1   3400         ADDC    A,#0x0
   \   0001B3   F583         MOV     DPH,A
   \   0001B5   E0           MOVX    A,@DPTR
   \   0001B6   28           ADD     A,R0
   \   0001B7   F8           MOV     R0,A
   \   0001B8   A3           INC     DPTR
   \   0001B9   E0           MOVX    A,@DPTR
   \   0001BA   39           ADDC    A,R1
   \   0001BB   F9           MOV     R1,A
   \   0001BC   E8           MOV     A,R0
   \   0001BD   24FE         ADD     A,#-0x2
   \   0001BF   F582         MOV     DPL,A
   \   0001C1   E9           MOV     A,R1
   \   0001C2   34FF         ADDC    A,#-0x1
   \   0001C4   F583         MOV     DPH,A
   \   0001C6   E0           MOVX    A,@DPTR
   \   0001C7   F5..         MOV     ?V8,A
   \   0001C9   A3           INC     DPTR
   \   0001CA   E0           MOVX    A,@DPTR
   \   0001CB   F5..         MOV     ?V9,A
   2496              dstIEEEAddr = matchED->ed2.ieeeAddr;
   \   0001CD   90....       MOV     DPTR,#matchED
   \   0001D0   E0           MOVX    A,@DPTR
   \   0001D1   241D         ADD     A,#0x1d
   \   0001D3   F5..         MOV     ?V4,A
   \   0001D5   A3           INC     DPTR
   \   0001D6   E0           MOVX    A,@DPTR
   \   0001D7   3400         ADDC    A,#0x0
   \   0001D9   F5..         MOV     ?V5,A
   2497              dstEP = matchED->ed2.endpoint;
   \   0001DB   90....       MOV     DPTR,#matchED
   \   0001DE   E0           MOVX    A,@DPTR
   \   0001DF   F8           MOV     R0,A
   \   0001E0   A3           INC     DPTR
   \   0001E1   E0           MOVX    A,@DPTR
   \   0001E2   C8           XCH     A,R0
   \   0001E3   2425         ADD     A,#0x25
   \   0001E5   F582         MOV     DPL,A
   \   0001E7   C8           XCH     A,R0
   \   0001E8   3400         ADDC    A,#0x0
   \   0001EA   F583         MOV     DPH,A
   \   0001EC   E0           MOVX    A,@DPTR
   \   0001ED   F5..         MOV     ?V2,A
   \   0001EF   02....       LJMP    ??ZDMatchSendState_12 & 0xFFFF
   2498            }
   2499            else if ( matchED->ed2numMatched )
   \                     ??ZDMatchSendState_11:
   \   0001F2   90....       MOV     DPTR,#matchED
   \   0001F5   E0           MOVX    A,@DPTR
   \   0001F6   F8           MOV     R0,A
   \   0001F7   A3           INC     DPTR
   \   0001F8   E0           MOVX    A,@DPTR
   \   0001F9   C8           XCH     A,R0
   \   0001FA   2434         ADD     A,#0x34
   \   0001FC   F582         MOV     DPL,A
   \   0001FE   C8           XCH     A,R0
   \   0001FF   3400         ADDC    A,#0x0
   \   000201   F583         MOV     DPH,A
   \   000203   E0           MOVX    A,@DPTR
   \   000204   7003         JNZ     $+5
   \   000206   02....       LJMP    ??ZDMatchSendState_12 & 0xFFFF
   2500            {
   2501              ed = &(matchED->ed2);
   \   000209   90....       MOV     DPTR,#matchED
   \   00020C   E0           MOVX    A,@DPTR
   \   00020D   2417         ADD     A,#0x17
   \   00020F   F5..         MOV     ?V0,A
   \   000211   A3           INC     DPTR
   \   000212   E0           MOVX    A,@DPTR
   \   000213   3400         ADDC    A,#0x0
   \   000215   F5..         MOV     ?V1,A
   2502              clusterID = matchED->ed2Matched[matchED->ed2numMatched-1];
   \   000217   90....       MOV     DPTR,#matchED
   \   00021A   E0           MOVX    A,@DPTR
   \   00021B   F8           MOV     R0,A
   \   00021C   A3           INC     DPTR
   \   00021D   E0           MOVX    A,@DPTR
   \   00021E   C8           XCH     A,R0
   \   00021F   2434         ADD     A,#0x34
   \   000221   F582         MOV     DPL,A
   \   000223   C8           XCH     A,R0
   \   000224   3400         ADDC    A,#0x0
   \   000226   F583         MOV     DPH,A
   \   000228   E0           MOVX    A,@DPTR
   \   000229   F8           MOV     R0,A
   \   00022A   7900         MOV     R1,#0x0
   \   00022C   E8           MOV     A,R0
   \   00022D   75F002       MOV     B,#0x2
   \   000230   A4           MUL     AB
   \   000231   C8           XCH     A,R0
   \   000232   AAF0         MOV     R2,B
   \   000234   75F000       MOV     B,#0x0
   \   000237   A4           MUL     AB
   \   000238   2A           ADD     A,R2
   \   000239   FA           MOV     R2,A
   \   00023A   75F002       MOV     B,#0x2
   \   00023D   E9           MOV     A,R1
   \   00023E   A4           MUL     AB
   \   00023F   2A           ADD     A,R2
   \   000240   F9           MOV     R1,A
   \   000241   90....       MOV     DPTR,#matchED
   \   000244   E0           MOVX    A,@DPTR
   \   000245   FA           MOV     R2,A
   \   000246   A3           INC     DPTR
   \   000247   E0           MOVX    A,@DPTR
   \   000248   CA           XCH     A,R2
   \   000249   2435         ADD     A,#0x35
   \   00024B   F582         MOV     DPL,A
   \   00024D   CA           XCH     A,R2
   \   00024E   3400         ADDC    A,#0x0
   \   000250   F583         MOV     DPH,A
   \   000252   E0           MOVX    A,@DPTR
   \   000253   28           ADD     A,R0
   \   000254   F8           MOV     R0,A
   \   000255   A3           INC     DPTR
   \   000256   E0           MOVX    A,@DPTR
   \   000257   39           ADDC    A,R1
   \   000258   F9           MOV     R1,A
   \   000259   E8           MOV     A,R0
   \   00025A   24FE         ADD     A,#-0x2
   \   00025C   F582         MOV     DPL,A
   \   00025E   E9           MOV     A,R1
   \   00025F   34FF         ADDC    A,#-0x1
   \   000261   F583         MOV     DPH,A
   \   000263   E0           MOVX    A,@DPTR
   \   000264   F5..         MOV     ?V8,A
   \   000266   A3           INC     DPTR
   \   000267   E0           MOVX    A,@DPTR
   \   000268   F5..         MOV     ?V9,A
   2503              dstIEEEAddr = matchED->ed1.ieeeAddr;
   \   00026A   90....       MOV     DPTR,#matchED
   \   00026D   E0           MOVX    A,@DPTR
   \   00026E   2406         ADD     A,#0x6
   \   000270   F5..         MOV     ?V4,A
   \   000272   A3           INC     DPTR
   \   000273   E0           MOVX    A,@DPTR
   \   000274   3400         ADDC    A,#0x0
   \   000276   F5..         MOV     ?V5,A
   2504              dstEP = matchED->ed1.endpoint;
   \   000278   90....       MOV     DPTR,#matchED
   \   00027B   E0           MOVX    A,@DPTR
   \   00027C   F8           MOV     R0,A
   \   00027D   A3           INC     DPTR
   \   00027E   E0           MOVX    A,@DPTR
   \   00027F   C8           XCH     A,R0
   \   000280   240E         ADD     A,#0xe
   \   000282   F582         MOV     DPL,A
   \   000284   C8           XCH     A,R0
   \   000285   3400         ADDC    A,#0x0
   \   000287   F583         MOV     DPH,A
   \   000289   E0           MOVX    A,@DPTR
   \   00028A   F5..         MOV     ?V2,A
   2505            }
   2506          
   2507            dstAddr.addrMode = Addr16Bit;
   \                     ??ZDMatchSendState_12:
   \   00028C   7409         MOV     A,#0x9
   \   00028E   12....       LCALL   ?XSTACK_DISP0_8
   \   000291   7402         MOV     A,#0x2
   \   000293   F0           MOVX    @DPTR,A
   2508          
   2509            // Send the next message
   2510            if ( (rspStatus == ZDP_SUCCESS) && ed )
   \   000294   85..82       MOV     DPL,?XSP + 0
   \   000297   85..83       MOV     DPH,?XSP + 1
   \   00029A   E0           MOVX    A,@DPTR
   \   00029B   6003         JZ      $+5
   \   00029D   02....       LJMP    ??ZDMatchSendState_13 & 0xFFFF
   \   0002A0   E5..         MOV     A,?V0
   \   0002A2   45..         ORL     A,?V1
   \   0002A4   7003         JNZ     $+5
   \   0002A6   02....       LJMP    ??ZDMatchSendState_13 & 0xFFFF
   2511            {
   2512              // Send unbind/bind message to source
   2513              if ( matchED->sending == ZDMATCH_SENDING_UNBIND )
   \   0002A9   90....       MOV     DPTR,#matchED
   \   0002AC   E0           MOVX    A,@DPTR
   \   0002AD   F8           MOV     R0,A
   \   0002AE   A3           INC     DPTR
   \   0002AF   E0           MOVX    A,@DPTR
   \   0002B0   C8           XCH     A,R0
   \   0002B1   242F         ADD     A,#0x2f
   \   0002B3   F582         MOV     DPL,A
   \   0002B5   C8           XCH     A,R0
   \   0002B6   3400         ADDC    A,#0x0
   \   0002B8   F583         MOV     DPH,A
   \   0002BA   E0           MOVX    A,@DPTR
   \   0002BB   6401         XRL     A,#0x1
   \   0002BD   7006         JNZ     ??ZDMatchSendState_14
   2514              {
   2515                msgType = Unbind_req;
   \   0002BF   7E22         MOV     R6,#0x22
   \   0002C1   7F00         MOV     R7,#0x0
   \   0002C3   8004         SJMP    ??ZDMatchSendState_15
   2516              }
   2517              else
   2518              {
   2519                msgType = Bind_req;
   \                     ??ZDMatchSendState_14:
   \   0002C5   7E21         MOV     R6,#0x21
   \   0002C7   7F00         MOV     R7,#0x0
   2520              }
   2521          
   2522              dstAddr.addr.shortAddr = ed->srcAddr;
   \                     ??ZDMatchSendState_15:
   \   0002C9   85..82       MOV     DPL,?V0
   \   0002CC   85..83       MOV     DPH,?V1
   \   0002CF   A3           INC     DPTR
   \   0002D0   A3           INC     DPTR
   \   0002D1   E0           MOVX    A,@DPTR
   \   0002D2   F8           MOV     R0,A
   \   0002D3   A3           INC     DPTR
   \   0002D4   E0           MOVX    A,@DPTR
   \   0002D5   F9           MOV     R1,A
   \   0002D6   7401         MOV     A,#0x1
   \   0002D8   12....       LCALL   ?XSTACK_DISP0_8
   \   0002DB   E8           MOV     A,R0
   \   0002DC   F0           MOVX    @DPTR,A
   \   0002DD   A3           INC     DPTR
   \   0002DE   E9           MOV     A,R1
   \   0002DF   F0           MOVX    @DPTR,A
   2523          
   2524              // Save off the transaction sequence number
   2525              matchED->transSeq = ZDP_TransID;
   \   0002E0   90....       MOV     DPTR,#ZDP_TransID
   \   0002E3   E0           MOVX    A,@DPTR
   \   0002E4   C0E0         PUSH    A
   \   0002E6   90....       MOV     DPTR,#matchED
   \   0002E9   E0           MOVX    A,@DPTR
   \   0002EA   F8           MOV     R0,A
   \   0002EB   A3           INC     DPTR
   \   0002EC   E0           MOVX    A,@DPTR
   \   0002ED   C8           XCH     A,R0
   \   0002EE   2430         ADD     A,#0x30
   \   0002F0   F582         MOV     DPL,A
   \   0002F2   C8           XCH     A,R0
   \   0002F3   3400         ADDC    A,#0x0
   \   0002F5   F583         MOV     DPH,A
   \   0002F7   D0E0         POP     A
   \   0002F9   F0           MOVX    @DPTR,A
   2526          
   2527              destinationAddr.addrMode = Addr64Bit;
   \   0002FA   7412         MOV     A,#0x12
   \   0002FC   12....       LCALL   ?XSTACK_DISP0_8
   \   0002FF   7403         MOV     A,#0x3
   \   000301   F0           MOVX    @DPTR,A
   2528              osal_cpyExtAddr( destinationAddr.addr.extAddr, dstIEEEAddr );
   \   000302                ; Setup parameters for call to function sAddrExtCpy
   \   000302   AC..         MOV     R4,?V4
   \   000304   AD..         MOV     R5,?V5
   \   000306   740A         MOV     A,#0xa
   \   000308   12....       LCALL   ?XSTACK_DISP101_8
   \   00030B   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2529          
   2530              ZDP_BindUnbindReq( msgType, &dstAddr, ed->ieeeAddr, ed->endpoint, clusterID,
   2531                  &destinationAddr, dstEP, ed->SecurityUse );
   \   00030E                ; Setup parameters for call to function ZDP_BindUnbindReq
   \   00030E   85..82       MOV     DPL,?V0
   \   000311   85..83       MOV     DPH,?V1
   \   000314   A3           INC     DPTR
   \   000315   E0           MOVX    A,@DPTR
   \   000316   F5..         MOV     ?V4,A
   \   000318   78..         MOV     R0,#?V4
   \   00031A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00031D   E5..         MOV     A,?V2
   \   00031F   F5..         MOV     ?V2,A
   \   000321   78..         MOV     R0,#?V2
   \   000323   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000326   740C         MOV     A,#0xc
   \   000328   12....       LCALL   ?XSTACK_DISP100_8
   \   00032B   88..         MOV     ?V4,R0
   \   00032D   89..         MOV     ?V5,R1
   \   00032F   78..         MOV     R0,#?V4
   \   000331   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000334   78..         MOV     R0,#?V8
   \   000336   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000339   E5..         MOV     A,?V0
   \   00033B   2406         ADD     A,#0x6
   \   00033D   F5..         MOV     ?V4,A
   \   00033F   E4           CLR     A
   \   000340   35..         ADDC    A,?V1
   \   000342   F5..         MOV     ?V5,A
   \   000344   78..         MOV     R0,#?V4
   \   000346   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000349   E5..         MOV     A,?V0
   \   00034B   240E         ADD     A,#0xe
   \   00034D   F582         MOV     DPL,A
   \   00034F   E4           CLR     A
   \   000350   35..         ADDC    A,?V1
   \   000352   F583         MOV     DPH,A
   \   000354   E0           MOVX    A,@DPTR
   \   000355   F9           MOV     R1,A
   \   000356   7409         MOV     A,#0x9
   \   000358   12....       LCALL   ?XSTACK_DISP102_8
   \   00035B   EE           MOV     A,R6
   \   00035C   FA           MOV     R2,A
   \   00035D   EF           MOV     A,R7
   \   00035E   FB           MOV     R3,A
   \   00035F   12....       LCALL   `??ZDP_BindUnbindReq::?relay`; Banked call to: ZDP_BindUnbindReq
   \   000362   7408         MOV     A,#0x8
   \   000364   12....       LCALL   ?DEALLOC_XSTACK8
   \   000367   E9           MOV     A,R1
   2532          
   2533              // Set timeout for response
   2534              APS_SetEndDeviceBindTimeout( AIB_MaxBindingTime, ZDO_EndDeviceBindMatchTimeoutCB );
   \   000368                ; Setup parameters for call to function APS_SetEndDeviceBindTimeout
   \   000368   7C..         MOV     R4,#`??ZDO_EndDeviceBindMatchTimeoutCB::?relay` & 0xff
   \   00036A   7D..         MOV     R5,#(`??ZDO_EndDeviceBindMatchTimeoutCB::?relay` >> 8) & 0xff
   \   00036C   90....       MOV     DPTR,#AIB_MaxBindingTime
   \   00036F   E0           MOVX    A,@DPTR
   \   000370   FA           MOV     R2,A
   \   000371   A3           INC     DPTR
   \   000372   E0           MOVX    A,@DPTR
   \   000373   FB           MOV     R3,A
   \   000374   12....       LCALL   `??APS_SetEndDeviceBindTimeout::?relay`; Banked call to: APS_SetEndDeviceBindTimeout
   \   000377   02....       LJMP    ??ZDMatchSendState_16 & 0xFFFF
   2535            }
   2536            else
   2537            {
   2538              // Send the response messages to requesting devices
   2539              // send response to first requester
   2540              dstAddr.addr.shortAddr = matchED->ed1.srcAddr;
   \                     ??ZDMatchSendState_13:
   \   00037A   90....       MOV     DPTR,#matchED
   \   00037D   E0           MOVX    A,@DPTR
   \   00037E   F8           MOV     R0,A
   \   00037F   A3           INC     DPTR
   \   000380   E0           MOVX    A,@DPTR
   \   000381   F583         MOV     DPH,A
   \   000383   8882         MOV     DPL,R0
   \   000385   A3           INC     DPTR
   \   000386   A3           INC     DPTR
   \   000387   E0           MOVX    A,@DPTR
   \   000388   F8           MOV     R0,A
   \   000389   A3           INC     DPTR
   \   00038A   E0           MOVX    A,@DPTR
   \   00038B   F9           MOV     R1,A
   \   00038C   7401         MOV     A,#0x1
   \   00038E   12....       LCALL   ?XSTACK_DISP0_8
   \   000391   E8           MOV     A,R0
   \   000392   F0           MOVX    @DPTR,A
   \   000393   A3           INC     DPTR
   \   000394   E9           MOV     A,R1
   \   000395   F0           MOVX    @DPTR,A
   2541              ZDP_EndDeviceBindRsp( matchED->ed1.TransSeq, &dstAddr, rspStatus, matchED->ed1.SecurityUse );
   \   000396                ; Setup parameters for call to function ZDP_SendData
   \   000396   90....       MOV     DPTR,#matchED
   \   000399   E0           MOVX    A,@DPTR
   \   00039A   F8           MOV     R0,A
   \   00039B   A3           INC     DPTR
   \   00039C   E0           MOVX    A,@DPTR
   \   00039D   F583         MOV     DPH,A
   \   00039F   8882         MOV     DPL,R0
   \   0003A1   A3           INC     DPTR
   \   0003A2   E0           MOVX    A,@DPTR
   \   0003A3   F5..         MOV     ?V0,A
   \   0003A5   78..         MOV     R0,#?V0
   \   0003A7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0003AA   7401         MOV     A,#0x1
   \   0003AC   12....       LCALL   ?XSTACK_DISP100_8
   \   0003AF   88..         MOV     ?V0,R0
   \   0003B1   89..         MOV     ?V1,R1
   \   0003B3   78..         MOV     R0,#?V0
   \   0003B5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0003B8   75..20       MOV     ?V0,#0x20
   \   0003BB   75..80       MOV     ?V1,#-0x80
   \   0003BE   78..         MOV     R0,#?V0
   \   0003C0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0003C3   7901         MOV     R1,#0x1
   \   0003C5   7406         MOV     A,#0x6
   \   0003C7   12....       LCALL   ?XSTACK_DISP102_8
   \   0003CA   90....       MOV     DPTR,#matchED
   \   0003CD   E0           MOVX    A,@DPTR
   \   0003CE   FA           MOV     R2,A
   \   0003CF   A3           INC     DPTR
   \   0003D0   E0           MOVX    A,@DPTR
   \   0003D1   FB           MOV     R3,A
   \   0003D2   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   0003D5   7405         MOV     A,#0x5
   \   0003D7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0003DA   E9           MOV     A,R1
   2542          
   2543              // send response to second requester
   2544              if ( matchED->state == ZDMATCH_SENDING_BINDS )
   \   0003DB   90....       MOV     DPTR,#matchED
   \   0003DE   E0           MOVX    A,@DPTR
   \   0003DF   F8           MOV     R0,A
   \   0003E0   A3           INC     DPTR
   \   0003E1   E0           MOVX    A,@DPTR
   \   0003E2   C8           XCH     A,R0
   \   0003E3   242E         ADD     A,#0x2e
   \   0003E5   F582         MOV     DPL,A
   \   0003E7   C8           XCH     A,R0
   \   0003E8   3400         ADDC    A,#0x0
   \   0003EA   F583         MOV     DPH,A
   \   0003EC   E0           MOVX    A,@DPTR
   \   0003ED   6402         XRL     A,#0x2
   \   0003EF   706E         JNZ     ??ZDMatchSendState_17
   2545              {
   2546                dstAddr.addr.shortAddr = matchED->ed2.srcAddr;
   \   0003F1   90....       MOV     DPTR,#matchED
   \   0003F4   E0           MOVX    A,@DPTR
   \   0003F5   F8           MOV     R0,A
   \   0003F6   A3           INC     DPTR
   \   0003F7   E0           MOVX    A,@DPTR
   \   0003F8   C8           XCH     A,R0
   \   0003F9   2419         ADD     A,#0x19
   \   0003FB   F582         MOV     DPL,A
   \   0003FD   C8           XCH     A,R0
   \   0003FE   3400         ADDC    A,#0x0
   \   000400   F583         MOV     DPH,A
   \   000402   E0           MOVX    A,@DPTR
   \   000403   F8           MOV     R0,A
   \   000404   A3           INC     DPTR
   \   000405   E0           MOVX    A,@DPTR
   \   000406   F9           MOV     R1,A
   \   000407   7401         MOV     A,#0x1
   \   000409   12....       LCALL   ?XSTACK_DISP0_8
   \   00040C   E8           MOV     A,R0
   \   00040D   F0           MOVX    @DPTR,A
   \   00040E   A3           INC     DPTR
   \   00040F   E9           MOV     A,R1
   \   000410   F0           MOVX    @DPTR,A
   2547                ZDP_EndDeviceBindRsp( matchED->ed2.TransSeq, &dstAddr, rspStatus, matchED->ed2.SecurityUse );
   \   000411                ; Setup parameters for call to function ZDP_SendData
   \   000411   90....       MOV     DPTR,#matchED
   \   000414   E0           MOVX    A,@DPTR
   \   000415   F8           MOV     R0,A
   \   000416   A3           INC     DPTR
   \   000417   E0           MOVX    A,@DPTR
   \   000418   C8           XCH     A,R0
   \   000419   2418         ADD     A,#0x18
   \   00041B   F582         MOV     DPL,A
   \   00041D   C8           XCH     A,R0
   \   00041E   3400         ADDC    A,#0x0
   \   000420   F583         MOV     DPH,A
   \   000422   E0           MOVX    A,@DPTR
   \   000423   F5..         MOV     ?V0,A
   \   000425   78..         MOV     R0,#?V0
   \   000427   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00042A   7401         MOV     A,#0x1
   \   00042C   12....       LCALL   ?XSTACK_DISP100_8
   \   00042F   88..         MOV     ?V0,R0
   \   000431   89..         MOV     ?V1,R1
   \   000433   78..         MOV     R0,#?V0
   \   000435   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000438   75..20       MOV     ?V0,#0x20
   \   00043B   75..80       MOV     ?V1,#-0x80
   \   00043E   78..         MOV     R0,#?V0
   \   000440   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000443   7901         MOV     R1,#0x1
   \   000445   7406         MOV     A,#0x6
   \   000447   12....       LCALL   ?XSTACK_DISP102_8
   \   00044A   90....       MOV     DPTR,#matchED
   \   00044D   E0           MOVX    A,@DPTR
   \   00044E   2417         ADD     A,#0x17
   \   000450   FA           MOV     R2,A
   \   000451   A3           INC     DPTR
   \   000452   E0           MOVX    A,@DPTR
   \   000453   3400         ADDC    A,#0x0
   \   000455   FB           MOV     R3,A
   \   000456   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   000459   7405         MOV     A,#0x5
   \   00045B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00045E   E9           MOV     A,R1
   2548              }
   2549          
   2550              // Process ended - release memory used
   2551              ZDO_RemoveMatchMemory();
   \                     ??ZDMatchSendState_17:
   \   00045F                ; Setup parameters for call to function ZDO_RemoveMatchMemory
   \   00045F   12....       LCALL   `??ZDO_RemoveMatchMemory::?relay`; Banked call to: ZDO_RemoveMatchMemory
   2552            }
   2553          
   2554            return ( TRUE );
   \                     ??ZDMatchSendState_16:
   \   000462   7901         MOV     R1,#0x1
   \                     ??ZDMatchSendState_1:
   \   000464   7413         MOV     A,#0x13
   \   000466   12....       LCALL   ?DEALLOC_XSTACK8
   \   000469   7F0A         MOV     R7,#0xa
   \   00046B   02....       LJMP    ?BANKED_LEAVE_XDATA
   2555          }
   2556          
   2557          /*********************************************************************
   2558           * @fn      ZDO_EndDeviceBindMatchTimeoutCB()
   2559           *
   2560           * @brief   End device bind timeout.
   2561           *
   2562           * @param  none
   2563           *
   2564           * @return  none
   2565           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2566          static void ZDO_EndDeviceBindMatchTimeoutCB( void )
   \                     ZDO_EndDeviceBindMatchTimeoutCB:
   2567          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2568            ZDMatchSendState( ZDMATCH_REASON_TIMEOUT, ZDP_TIMEOUT, 0 );
   \   000004                ; Setup parameters for call to function ZDMatchSendState
   \   000004   7B00         MOV     R3,#0x0
   \   000006   7A85         MOV     R2,#-0x7b
   \   000008   7901         MOV     R1,#0x1
   \   00000A   12....       LCALL   `??ZDMatchSendState::?relay`; Banked call to: ZDMatchSendState
   \   00000D   E9           MOV     A,R1
   2569          }
   \   00000E   D083         POP     DPH
   \   000010   D082         POP     DPL
   \   000012   02....       LJMP    ?BRET
   2570          #endif // ZG_BUILD_COORDINATOR_TYPE
   2571          
   2572          /*********************************************************************
   2573           * ZDO MESSAGE PARSING API FUNCTIONS
   2574           */
   2575          
   2576          /*********************************************************************
   2577           * @fn          ZDO_ParseEndDeviceBindReq
   2578           *
   2579           * @brief       This function parses the End_Device_Bind_req message.
   2580           *
   2581           *     NOTE:  The clusters lists in bindReq are allocated in this
   2582           *            function and must be freed by that calling function.
   2583           *
   2584           * @param       inMsg  - incoming message (request)
   2585           * @param       bindReq - pointer to place to parse message to
   2586           *
   2587           * @return      none
   2588           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2589          void ZDO_ParseEndDeviceBindReq( zdoIncomingMsg_t *inMsg, ZDEndDeviceBind_t *bindReq )
   \                     ZDO_ParseEndDeviceBindReq:
   2590          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV     ?V0,R4
   \   000007   8D..         MOV     ?V1,R5
   2591            uint8 *msg;
   2592          
   2593            // Parse the message
   2594            bindReq->TransSeq = inMsg->TransSeq;
   \   000009   EA           MOV     A,R2
   \   00000A   240F         ADD     A,#0xf
   \   00000C   F582         MOV     DPL,A
   \   00000E   E4           CLR     A
   \   00000F   3B           ADDC    A,R3
   \   000010   F583         MOV     DPH,A
   \   000012   E0           MOVX    A,@DPTR
   \   000013   C0E0         PUSH    A
   \   000015   85..82       MOV     DPL,?V0
   \   000018   85..83       MOV     DPH,?V1
   \   00001B   D0E0         POP     A
   \   00001D   F0           MOVX    @DPTR,A
   2595            bindReq->srcAddr = inMsg->srcAddr.addr.shortAddr;
   \   00001E   8A82         MOV     DPL,R2
   \   000020   8B83         MOV     DPH,R3
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F8           MOV     R0,A
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F9           MOV     R1,A
   \   000029   85..82       MOV     DPL,?V0
   \   00002C   85..83       MOV     DPH,?V1
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   E8           MOV     A,R0
   \   000032   F0           MOVX    @DPTR,A
   \   000033   A3           INC     DPTR
   \   000034   E9           MOV     A,R1
   \   000035   F0           MOVX    @DPTR,A
   2596            bindReq->SecurityUse = inMsg->SecurityUse;
   \   000036   EA           MOV     A,R2
   \   000037   240E         ADD     A,#0xe
   \   000039   F582         MOV     DPL,A
   \   00003B   E4           CLR     A
   \   00003C   3B           ADDC    A,R3
   \   00003D   F583         MOV     DPH,A
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   C0E0         PUSH    A
   \   000042   85..82       MOV     DPL,?V0
   \   000045   85..83       MOV     DPH,?V1
   \   000048   A3           INC     DPTR
   \   000049   D0E0         POP     A
   \   00004B   F0           MOVX    @DPTR,A
   2597            msg = inMsg->asdu;
   \   00004C   EA           MOV     A,R2
   \   00004D   2413         ADD     A,#0x13
   \   00004F   F582         MOV     DPL,A
   \   000051   E4           CLR     A
   \   000052   3B           ADDC    A,R3
   \   000053   F583         MOV     DPH,A
   \   000055   E0           MOVX    A,@DPTR
   \   000056   FE           MOV     R6,A
   \   000057   A3           INC     DPTR
   \   000058   E0           MOVX    A,@DPTR
   \   000059   FF           MOV     R7,A
   2598          
   2599            bindReq->localCoordinator = BUILD_UINT16( msg[0], msg[1] );
   \   00005A   8E82         MOV     DPL,R6
   \   00005C   8F83         MOV     DPH,R7
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   FA           MOV     R2,A
   \   000060   7B00         MOV     R3,#0x0
   \   000062   8E82         MOV     DPL,R6
   \   000064   8F83         MOV     DPH,R7
   \   000066   A3           INC     DPTR
   \   000067   E0           MOVX    A,@DPTR
   \   000068   F8           MOV     R0,A
   \   000069   7900         MOV     R1,#0x0
   \   00006B   E4           CLR     A
   \   00006C   C8           XCH     A,R0
   \   00006D   F9           MOV     R1,A
   \   00006E   EA           MOV     A,R2
   \   00006F   28           ADD     A,R0
   \   000070   F8           MOV     R0,A
   \   000071   EB           MOV     A,R3
   \   000072   39           ADDC    A,R1
   \   000073   F9           MOV     R1,A
   \   000074   85..82       MOV     DPL,?V0
   \   000077   85..83       MOV     DPH,?V1
   \   00007A   A3           INC     DPTR
   \   00007B   A3           INC     DPTR
   \   00007C   A3           INC     DPTR
   \   00007D   A3           INC     DPTR
   \   00007E   E8           MOV     A,R0
   \   00007F   F0           MOVX    @DPTR,A
   \   000080   A3           INC     DPTR
   \   000081   E9           MOV     A,R1
   \   000082   F0           MOVX    @DPTR,A
   2600            msg += 2;
   \   000083   EE           MOV     A,R6
   \   000084   2402         ADD     A,#0x2
   \   000086   FE           MOV     R6,A
   \   000087   5001         JNC     ??ZDO_ParseEndDeviceBindReq_0
   \   000089   0F           INC     R7
   2601          
   2602            osal_cpyExtAddr( bindReq->ieeeAddr, msg );
   \                     ??ZDO_ParseEndDeviceBindReq_0:
   \   00008A                ; Setup parameters for call to function sAddrExtCpy
   \   00008A   EE           MOV     A,R6
   \   00008B   FC           MOV     R4,A
   \   00008C   EF           MOV     A,R7
   \   00008D   FD           MOV     R5,A
   \   00008E   E5..         MOV     A,?V0
   \   000090   2406         ADD     A,#0x6
   \   000092   FA           MOV     R2,A
   \   000093   E4           CLR     A
   \   000094   35..         ADDC    A,?V1
   \   000096   FB           MOV     R3,A
   \   000097   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2603            msg += Z_EXTADDR_LEN;
   \   00009A   EE           MOV     A,R6
   \   00009B   2408         ADD     A,#0x8
   \   00009D   FE           MOV     R6,A
   \   00009E   5001         JNC     ??ZDO_ParseEndDeviceBindReq_1
   \   0000A0   0F           INC     R7
   2604          
   2605            bindReq->endpoint = *msg++;
   \                     ??ZDO_ParseEndDeviceBindReq_1:
   \   0000A1   8E82         MOV     DPL,R6
   \   0000A3   8F83         MOV     DPH,R7
   \   0000A5   E0           MOVX    A,@DPTR
   \   0000A6   C0E0         PUSH    A
   \   0000A8   E5..         MOV     A,?V0
   \   0000AA   240E         ADD     A,#0xe
   \   0000AC   F582         MOV     DPL,A
   \   0000AE   E4           CLR     A
   \   0000AF   35..         ADDC    A,?V1
   \   0000B1   F583         MOV     DPH,A
   \   0000B3   D0E0         POP     A
   \   0000B5   F0           MOVX    @DPTR,A
   \   0000B6   8E82         MOV     DPL,R6
   \   0000B8   8F83         MOV     DPH,R7
   \   0000BA   A3           INC     DPTR
   \   0000BB   AE82         MOV     R6,DPL
   \   0000BD   AF83         MOV     R7,DPH
   2606            bindReq->profileID = BUILD_UINT16( msg[0], msg[1] );
   \   0000BF   8E82         MOV     DPL,R6
   \   0000C1   8F83         MOV     DPH,R7
   \   0000C3   E0           MOVX    A,@DPTR
   \   0000C4   FA           MOV     R2,A
   \   0000C5   7B00         MOV     R3,#0x0
   \   0000C7   8E82         MOV     DPL,R6
   \   0000C9   8F83         MOV     DPH,R7
   \   0000CB   A3           INC     DPTR
   \   0000CC   E0           MOVX    A,@DPTR
   \   0000CD   F8           MOV     R0,A
   \   0000CE   7900         MOV     R1,#0x0
   \   0000D0   E4           CLR     A
   \   0000D1   C8           XCH     A,R0
   \   0000D2   F9           MOV     R1,A
   \   0000D3   EA           MOV     A,R2
   \   0000D4   28           ADD     A,R0
   \   0000D5   F8           MOV     R0,A
   \   0000D6   EB           MOV     A,R3
   \   0000D7   39           ADDC    A,R1
   \   0000D8   F9           MOV     R1,A
   \   0000D9   E5..         MOV     A,?V0
   \   0000DB   240F         ADD     A,#0xf
   \   0000DD   F582         MOV     DPL,A
   \   0000DF   E4           CLR     A
   \   0000E0   35..         ADDC    A,?V1
   \   0000E2   F583         MOV     DPH,A
   \   0000E4   E8           MOV     A,R0
   \   0000E5   F0           MOVX    @DPTR,A
   \   0000E6   A3           INC     DPTR
   \   0000E7   E9           MOV     A,R1
   \   0000E8   F0           MOVX    @DPTR,A
   2607            msg += 2;
   \   0000E9   EE           MOV     A,R6
   \   0000EA   2402         ADD     A,#0x2
   \   0000EC   FE           MOV     R6,A
   \   0000ED   5001         JNC     ??ZDO_ParseEndDeviceBindReq_2
   \   0000EF   0F           INC     R7
   2608          
   2609            bindReq->inClusters = NULL;
   \                     ??ZDO_ParseEndDeviceBindReq_2:
   \   0000F0   E5..         MOV     A,?V0
   \   0000F2   2412         ADD     A,#0x12
   \   0000F4   F582         MOV     DPL,A
   \   0000F6   E4           CLR     A
   \   0000F7   35..         ADDC    A,?V1
   \   0000F9   F583         MOV     DPH,A
   \   0000FB   7400         MOV     A,#0x0
   \   0000FD   F0           MOVX    @DPTR,A
   \   0000FE   A3           INC     DPTR
   \   0000FF   7400         MOV     A,#0x0
   \   000101   F0           MOVX    @DPTR,A
   2610            bindReq->outClusters = NULL;
   \   000102   E5..         MOV     A,?V0
   \   000104   2415         ADD     A,#0x15
   \   000106   F582         MOV     DPL,A
   \   000108   E4           CLR     A
   \   000109   35..         ADDC    A,?V1
   \   00010B   F583         MOV     DPH,A
   \   00010D   7400         MOV     A,#0x0
   \   00010F   F0           MOVX    @DPTR,A
   \   000110   A3           INC     DPTR
   \   000111   7400         MOV     A,#0x0
   \   000113   F0           MOVX    @DPTR,A
   2611          
   2612            if ((bindReq->numInClusters = *msg++) &&
   2613                (bindReq->inClusters = (uint16*)osal_mem_alloc( (bindReq->numInClusters * sizeof( uint16 )))))
   \   000114   8E82         MOV     DPL,R6
   \   000116   8F83         MOV     DPH,R7
   \   000118   E0           MOVX    A,@DPTR
   \   000119   C0E0         PUSH    A
   \   00011B   E5..         MOV     A,?V0
   \   00011D   2411         ADD     A,#0x11
   \   00011F   F582         MOV     DPL,A
   \   000121   E4           CLR     A
   \   000122   35..         ADDC    A,?V1
   \   000124   F583         MOV     DPH,A
   \   000126   D0E0         POP     A
   \   000128   F0           MOVX    @DPTR,A
   \   000129   8E82         MOV     DPL,R6
   \   00012B   8F83         MOV     DPH,R7
   \   00012D   A3           INC     DPTR
   \   00012E   AE82         MOV     R6,DPL
   \   000130   AF83         MOV     R7,DPH
   \   000132   E5..         MOV     A,?V0
   \   000134   2411         ADD     A,#0x11
   \   000136   F582         MOV     DPL,A
   \   000138   E4           CLR     A
   \   000139   35..         ADDC    A,?V1
   \   00013B   F583         MOV     DPH,A
   \   00013D   E0           MOVX    A,@DPTR
   \   00013E   6079         JZ      ??ZDO_ParseEndDeviceBindReq_3
   \   000140                ; Setup parameters for call to function osal_mem_alloc
   \   000140   E5..         MOV     A,?V0
   \   000142   2411         ADD     A,#0x11
   \   000144   F582         MOV     DPL,A
   \   000146   E4           CLR     A
   \   000147   35..         ADDC    A,?V1
   \   000149   F583         MOV     DPH,A
   \   00014B   E0           MOVX    A,@DPTR
   \   00014C   FA           MOV     R2,A
   \   00014D   7B00         MOV     R3,#0x0
   \   00014F   EA           MOV     A,R2
   \   000150   75F002       MOV     B,#0x2
   \   000153   A4           MUL     AB
   \   000154   CA           XCH     A,R2
   \   000155   A8F0         MOV     R0,B
   \   000157   75F000       MOV     B,#0x0
   \   00015A   A4           MUL     AB
   \   00015B   28           ADD     A,R0
   \   00015C   F8           MOV     R0,A
   \   00015D   75F002       MOV     B,#0x2
   \   000160   EB           MOV     A,R3
   \   000161   A4           MUL     AB
   \   000162   28           ADD     A,R0
   \   000163   FB           MOV     R3,A
   \   000164   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000167   E5..         MOV     A,?V0
   \   000169   2412         ADD     A,#0x12
   \   00016B   F582         MOV     DPL,A
   \   00016D   E4           CLR     A
   \   00016E   35..         ADDC    A,?V1
   \   000170   F583         MOV     DPH,A
   \   000172   EA           MOV     A,R2
   \   000173   F0           MOVX    @DPTR,A
   \   000174   A3           INC     DPTR
   \   000175   EB           MOV     A,R3
   \   000176   F0           MOVX    @DPTR,A
   \   000177   E5..         MOV     A,?V0
   \   000179   2412         ADD     A,#0x12
   \   00017B   F582         MOV     DPL,A
   \   00017D   E4           CLR     A
   \   00017E   35..         ADDC    A,?V1
   \   000180   F583         MOV     DPH,A
   \   000182   E0           MOVX    A,@DPTR
   \   000183   F8           MOV     R0,A
   \   000184   A3           INC     DPTR
   \   000185   E0           MOVX    A,@DPTR
   \   000186   F9           MOV     R1,A
   \   000187   E8           MOV     A,R0
   \   000188   49           ORL     A,R1
   \   000189   602E         JZ      ??ZDO_ParseEndDeviceBindReq_3
   2614            {
   2615              msg = ZDO_ConvertOTAClusters( bindReq->numInClusters, msg, bindReq->inClusters );
   \   00018B                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   00018B   E5..         MOV     A,?V0
   \   00018D   2412         ADD     A,#0x12
   \   00018F   F582         MOV     DPL,A
   \   000191   E4           CLR     A
   \   000192   35..         ADDC    A,?V1
   \   000194   F583         MOV     DPH,A
   \   000196   E0           MOVX    A,@DPTR
   \   000197   FC           MOV     R4,A
   \   000198   A3           INC     DPTR
   \   000199   E0           MOVX    A,@DPTR
   \   00019A   FD           MOV     R5,A
   \   00019B   EE           MOV     A,R6
   \   00019C   FA           MOV     R2,A
   \   00019D   EF           MOV     A,R7
   \   00019E   FB           MOV     R3,A
   \   00019F   E5..         MOV     A,?V0
   \   0001A1   2411         ADD     A,#0x11
   \   0001A3   F582         MOV     DPL,A
   \   0001A5   E4           CLR     A
   \   0001A6   35..         ADDC    A,?V1
   \   0001A8   F583         MOV     DPH,A
   \   0001AA   E0           MOVX    A,@DPTR
   \   0001AB   F9           MOV     R1,A
   \   0001AC   12....       LCALL   `??ZDO_ConvertOTAClusters::?relay`; Banked call to: ZDO_ConvertOTAClusters
   \   0001AF   8A..         MOV     ?V2,R2
   \   0001B1   8B..         MOV     ?V3,R3
   \   0001B3   AE..         MOV     R6,?V2
   \   0001B5   AF..         MOV     R7,?V3
   \   0001B7   800E         SJMP    ??ZDO_ParseEndDeviceBindReq_4
   2616            }
   2617            else
   2618            {
   2619              bindReq->numInClusters = 0;
   \                     ??ZDO_ParseEndDeviceBindReq_3:
   \   0001B9   E5..         MOV     A,?V0
   \   0001BB   2411         ADD     A,#0x11
   \   0001BD   F582         MOV     DPL,A
   \   0001BF   E4           CLR     A
   \   0001C0   35..         ADDC    A,?V1
   \   0001C2   F583         MOV     DPH,A
   \   0001C4   7400         MOV     A,#0x0
   \   0001C6   F0           MOVX    @DPTR,A
   2620            }
   2621          
   2622            if ((bindReq->numOutClusters = *msg++) &&
   2623                (bindReq->outClusters = (uint16*)osal_mem_alloc((bindReq->numOutClusters * sizeof(uint16)))))
   \                     ??ZDO_ParseEndDeviceBindReq_4:
   \   0001C7   8E82         MOV     DPL,R6
   \   0001C9   8F83         MOV     DPH,R7
   \   0001CB   E0           MOVX    A,@DPTR
   \   0001CC   C0E0         PUSH    A
   \   0001CE   E5..         MOV     A,?V0
   \   0001D0   2414         ADD     A,#0x14
   \   0001D2   F582         MOV     DPL,A
   \   0001D4   E4           CLR     A
   \   0001D5   35..         ADDC    A,?V1
   \   0001D7   F583         MOV     DPH,A
   \   0001D9   D0E0         POP     A
   \   0001DB   F0           MOVX    @DPTR,A
   \   0001DC   8E82         MOV     DPL,R6
   \   0001DE   8F83         MOV     DPH,R7
   \   0001E0   A3           INC     DPTR
   \   0001E1   AE82         MOV     R6,DPL
   \   0001E3   AF83         MOV     R7,DPH
   \   0001E5   E5..         MOV     A,?V0
   \   0001E7   2414         ADD     A,#0x14
   \   0001E9   F582         MOV     DPL,A
   \   0001EB   E4           CLR     A
   \   0001EC   35..         ADDC    A,?V1
   \   0001EE   F583         MOV     DPH,A
   \   0001F0   E0           MOVX    A,@DPTR
   \   0001F1   6079         JZ      ??ZDO_ParseEndDeviceBindReq_5
   \   0001F3                ; Setup parameters for call to function osal_mem_alloc
   \   0001F3   E5..         MOV     A,?V0
   \   0001F5   2414         ADD     A,#0x14
   \   0001F7   F582         MOV     DPL,A
   \   0001F9   E4           CLR     A
   \   0001FA   35..         ADDC    A,?V1
   \   0001FC   F583         MOV     DPH,A
   \   0001FE   E0           MOVX    A,@DPTR
   \   0001FF   FA           MOV     R2,A
   \   000200   7B00         MOV     R3,#0x0
   \   000202   EA           MOV     A,R2
   \   000203   75F002       MOV     B,#0x2
   \   000206   A4           MUL     AB
   \   000207   CA           XCH     A,R2
   \   000208   A8F0         MOV     R0,B
   \   00020A   75F000       MOV     B,#0x0
   \   00020D   A4           MUL     AB
   \   00020E   28           ADD     A,R0
   \   00020F   F8           MOV     R0,A
   \   000210   75F002       MOV     B,#0x2
   \   000213   EB           MOV     A,R3
   \   000214   A4           MUL     AB
   \   000215   28           ADD     A,R0
   \   000216   FB           MOV     R3,A
   \   000217   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00021A   E5..         MOV     A,?V0
   \   00021C   2415         ADD     A,#0x15
   \   00021E   F582         MOV     DPL,A
   \   000220   E4           CLR     A
   \   000221   35..         ADDC    A,?V1
   \   000223   F583         MOV     DPH,A
   \   000225   EA           MOV     A,R2
   \   000226   F0           MOVX    @DPTR,A
   \   000227   A3           INC     DPTR
   \   000228   EB           MOV     A,R3
   \   000229   F0           MOVX    @DPTR,A
   \   00022A   E5..         MOV     A,?V0
   \   00022C   2415         ADD     A,#0x15
   \   00022E   F582         MOV     DPL,A
   \   000230   E4           CLR     A
   \   000231   35..         ADDC    A,?V1
   \   000233   F583         MOV     DPH,A
   \   000235   E0           MOVX    A,@DPTR
   \   000236   F8           MOV     R0,A
   \   000237   A3           INC     DPTR
   \   000238   E0           MOVX    A,@DPTR
   \   000239   F9           MOV     R1,A
   \   00023A   E8           MOV     A,R0
   \   00023B   49           ORL     A,R1
   \   00023C   602E         JZ      ??ZDO_ParseEndDeviceBindReq_5
   2624            {
   2625              msg = ZDO_ConvertOTAClusters( bindReq->numOutClusters, msg, bindReq->outClusters );
   \   00023E                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   00023E   E5..         MOV     A,?V0
   \   000240   2415         ADD     A,#0x15
   \   000242   F582         MOV     DPL,A
   \   000244   E4           CLR     A
   \   000245   35..         ADDC    A,?V1
   \   000247   F583         MOV     DPH,A
   \   000249   E0           MOVX    A,@DPTR
   \   00024A   FC           MOV     R4,A
   \   00024B   A3           INC     DPTR
   \   00024C   E0           MOVX    A,@DPTR
   \   00024D   FD           MOV     R5,A
   \   00024E   EE           MOV     A,R6
   \   00024F   FA           MOV     R2,A
   \   000250   EF           MOV     A,R7
   \   000251   FB           MOV     R3,A
   \   000252   E5..         MOV     A,?V0
   \   000254   2414         ADD     A,#0x14
   \   000256   F582         MOV     DPL,A
   \   000258   E4           CLR     A
   \   000259   35..         ADDC    A,?V1
   \   00025B   F583         MOV     DPH,A
   \   00025D   E0           MOVX    A,@DPTR
   \   00025E   F9           MOV     R1,A
   \   00025F   12....       LCALL   `??ZDO_ConvertOTAClusters::?relay`; Banked call to: ZDO_ConvertOTAClusters
   \   000262   8A..         MOV     ?V0,R2
   \   000264   8B..         MOV     ?V1,R3
   \   000266   AE..         MOV     R6,?V0
   \   000268   AF..         MOV     R7,?V1
   \   00026A   800E         SJMP    ??ZDO_ParseEndDeviceBindReq_6
   2626            }
   2627            else
   2628            {
   2629              bindReq->numOutClusters = 0;
   \                     ??ZDO_ParseEndDeviceBindReq_5:
   \   00026C   E5..         MOV     A,?V0
   \   00026E   2414         ADD     A,#0x14
   \   000270   F582         MOV     DPL,A
   \   000272   E4           CLR     A
   \   000273   35..         ADDC    A,?V1
   \   000275   F583         MOV     DPH,A
   \   000277   7400         MOV     A,#0x0
   \   000279   F0           MOVX    @DPTR,A
   2630            }
   2631          }
   \                     ??ZDO_ParseEndDeviceBindReq_6:
   \   00027A   7F04         MOV     R7,#0x4
   \   00027C   02....       LJMP    ?BANKED_LEAVE_XDATA
   2632          
   2633          /*********************************************************************
   2634           * @fn          ZDO_ParseBindUnbindReq
   2635           *
   2636           * @brief       This function parses the Bind_req or Unbind_req message.
   2637           *
   2638           * @param       inMsg  - incoming message (request)
   2639           * @param       pReq - place to put parsed information
   2640           *
   2641           * @return      none
   2642           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2643          void ZDO_ParseBindUnbindReq( zdoIncomingMsg_t *inMsg, ZDO_BindUnbindReq_t *pReq )
   \                     ZDO_ParseBindUnbindReq:
   2644          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV     ?V0,R4
   \   000007   8D..         MOV     ?V1,R5
   2645            uint8 *msg;
   2646          
   2647            msg = inMsg->asdu;
   \   000009   EA           MOV     A,R2
   \   00000A   2413         ADD     A,#0x13
   \   00000C   F582         MOV     DPL,A
   \   00000E   E4           CLR     A
   \   00000F   3B           ADDC    A,R3
   \   000010   F583         MOV     DPH,A
   \   000012   E0           MOVX    A,@DPTR
   \   000013   FE           MOV     R6,A
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   FF           MOV     R7,A
   2648            osal_cpyExtAddr( pReq->srcAddress, msg );
   \   000017                ; Setup parameters for call to function sAddrExtCpy
   \   000017   EE           MOV     A,R6
   \   000018   FC           MOV     R4,A
   \   000019   EF           MOV     A,R7
   \   00001A   FD           MOV     R5,A
   \   00001B   AA..         MOV     R2,?V0
   \   00001D   AB..         MOV     R3,?V1
   \   00001F   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2649            msg += Z_EXTADDR_LEN;
   \   000022   EE           MOV     A,R6
   \   000023   2408         ADD     A,#0x8
   \   000025   FE           MOV     R6,A
   \   000026   5001         JNC     ??ZDO_ParseBindUnbindReq_0
   \   000028   0F           INC     R7
   2650            pReq->srcEndpoint = *msg++;
   \                     ??ZDO_ParseBindUnbindReq_0:
   \   000029   8E82         MOV     DPL,R6
   \   00002B   8F83         MOV     DPH,R7
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   C0E0         PUSH    A
   \   000030   85..82       MOV     DPL,?V0
   \   000033   85..83       MOV     DPH,?V1
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   A3           INC     DPTR
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   D0E0         POP     A
   \   000040   F0           MOVX    @DPTR,A
   \   000041   8E82         MOV     DPL,R6
   \   000043   8F83         MOV     DPH,R7
   \   000045   A3           INC     DPTR
   \   000046   AE82         MOV     R6,DPL
   \   000048   AF83         MOV     R7,DPH
   2651            pReq->clusterID = BUILD_UINT16( msg[0], msg[1] );
   \   00004A   8E82         MOV     DPL,R6
   \   00004C   8F83         MOV     DPH,R7
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   FA           MOV     R2,A
   \   000050   7B00         MOV     R3,#0x0
   \   000052   8E82         MOV     DPL,R6
   \   000054   8F83         MOV     DPH,R7
   \   000056   A3           INC     DPTR
   \   000057   E0           MOVX    A,@DPTR
   \   000058   F8           MOV     R0,A
   \   000059   7900         MOV     R1,#0x0
   \   00005B   E4           CLR     A
   \   00005C   C8           XCH     A,R0
   \   00005D   F9           MOV     R1,A
   \   00005E   EA           MOV     A,R2
   \   00005F   28           ADD     A,R0
   \   000060   F8           MOV     R0,A
   \   000061   EB           MOV     A,R3
   \   000062   39           ADDC    A,R1
   \   000063   F9           MOV     R1,A
   \   000064   85..82       MOV     DPL,?V0
   \   000067   85..83       MOV     DPH,?V1
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   A3           INC     DPTR
   \   000070   A3           INC     DPTR
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   E8           MOV     A,R0
   \   000074   F0           MOVX    @DPTR,A
   \   000075   A3           INC     DPTR
   \   000076   E9           MOV     A,R1
   \   000077   F0           MOVX    @DPTR,A
   2652            msg += 2;
   \   000078   EE           MOV     A,R6
   \   000079   2402         ADD     A,#0x2
   \   00007B   FE           MOV     R6,A
   \   00007C   5001         JNC     ??ZDO_ParseBindUnbindReq_1
   \   00007E   0F           INC     R7
   2653            pReq->dstAddress.addrMode = *msg++;
   \                     ??ZDO_ParseBindUnbindReq_1:
   \   00007F   8E82         MOV     DPL,R6
   \   000081   8F83         MOV     DPH,R7
   \   000083   E0           MOVX    A,@DPTR
   \   000084   C0E0         PUSH    A
   \   000086   E5..         MOV     A,?V0
   \   000088   2413         ADD     A,#0x13
   \   00008A   F582         MOV     DPL,A
   \   00008C   E4           CLR     A
   \   00008D   35..         ADDC    A,?V1
   \   00008F   F583         MOV     DPH,A
   \   000091   D0E0         POP     A
   \   000093   F0           MOVX    @DPTR,A
   \   000094   8E82         MOV     DPL,R6
   \   000096   8F83         MOV     DPH,R7
   \   000098   A3           INC     DPTR
   \   000099   AE82         MOV     R6,DPL
   \   00009B   AF83         MOV     R7,DPH
   2654            if ( pReq->dstAddress.addrMode == Addr64Bit )
   \   00009D   E5..         MOV     A,?V0
   \   00009F   2413         ADD     A,#0x13
   \   0000A1   F582         MOV     DPL,A
   \   0000A3   E4           CLR     A
   \   0000A4   35..         ADDC    A,?V1
   \   0000A6   F583         MOV     DPH,A
   \   0000A8   E0           MOVX    A,@DPTR
   \   0000A9   6403         XRL     A,#0x3
   \   0000AB   702E         JNZ     ??ZDO_ParseBindUnbindReq_2
   2655            {
   2656              osal_cpyExtAddr( pReq->dstAddress.addr.extAddr, msg );
   \   0000AD                ; Setup parameters for call to function sAddrExtCpy
   \   0000AD   EE           MOV     A,R6
   \   0000AE   FC           MOV     R4,A
   \   0000AF   EF           MOV     A,R7
   \   0000B0   FD           MOV     R5,A
   \   0000B1   E5..         MOV     A,?V0
   \   0000B3   240B         ADD     A,#0xb
   \   0000B5   FA           MOV     R2,A
   \   0000B6   E4           CLR     A
   \   0000B7   35..         ADDC    A,?V1
   \   0000B9   FB           MOV     R3,A
   \   0000BA   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2657              msg += Z_EXTADDR_LEN;
   \   0000BD   EE           MOV     A,R6
   \   0000BE   2408         ADD     A,#0x8
   \   0000C0   FE           MOV     R6,A
   \   0000C1   5001         JNC     ??ZDO_ParseBindUnbindReq_3
   \   0000C3   0F           INC     R7
   2658              pReq->dstEndpoint = *msg;
   \                     ??ZDO_ParseBindUnbindReq_3:
   \   0000C4   8E82         MOV     DPL,R6
   \   0000C6   8F83         MOV     DPH,R7
   \   0000C8   E0           MOVX    A,@DPTR
   \   0000C9   C0E0         PUSH    A
   \   0000CB   E5..         MOV     A,?V0
   \   0000CD   2414         ADD     A,#0x14
   \   0000CF   F582         MOV     DPL,A
   \   0000D1   E4           CLR     A
   \   0000D2   35..         ADDC    A,?V1
   \   0000D4   F583         MOV     DPH,A
   \   0000D6   D0E0         POP     A
   \   0000D8   F0           MOVX    @DPTR,A
   \   0000D9   802A         SJMP    ??ZDO_ParseBindUnbindReq_4
   2659            }
   2660            else
   2661            {
   2662              // copy group address
   2663              pReq->dstAddress.addr.shortAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseBindUnbindReq_2:
   \   0000DB   8E82         MOV     DPL,R6
   \   0000DD   8F83         MOV     DPH,R7
   \   0000DF   E0           MOVX    A,@DPTR
   \   0000E0   FA           MOV     R2,A
   \   0000E1   7B00         MOV     R3,#0x0
   \   0000E3   8E82         MOV     DPL,R6
   \   0000E5   8F83         MOV     DPH,R7
   \   0000E7   A3           INC     DPTR
   \   0000E8   E0           MOVX    A,@DPTR
   \   0000E9   F8           MOV     R0,A
   \   0000EA   7900         MOV     R1,#0x0
   \   0000EC   E4           CLR     A
   \   0000ED   C8           XCH     A,R0
   \   0000EE   F9           MOV     R1,A
   \   0000EF   EA           MOV     A,R2
   \   0000F0   28           ADD     A,R0
   \   0000F1   F8           MOV     R0,A
   \   0000F2   EB           MOV     A,R3
   \   0000F3   39           ADDC    A,R1
   \   0000F4   F9           MOV     R1,A
   \   0000F5   E5..         MOV     A,?V0
   \   0000F7   240B         ADD     A,#0xb
   \   0000F9   F582         MOV     DPL,A
   \   0000FB   E4           CLR     A
   \   0000FC   35..         ADDC    A,?V1
   \   0000FE   F583         MOV     DPH,A
   \   000100   E8           MOV     A,R0
   \   000101   F0           MOVX    @DPTR,A
   \   000102   A3           INC     DPTR
   \   000103   E9           MOV     A,R1
   \   000104   F0           MOVX    @DPTR,A
   2664            }
   2665          }
   \                     ??ZDO_ParseBindUnbindReq_4:
   \   000105   7F02         MOV     R7,#0x2
   \   000107   02....       LJMP    ?BANKED_LEAVE_XDATA
   2666          
   2667          /*********************************************************************
   2668           * @fn      ZDO_ParseAddrRsp
   2669           *
   2670           * @brief   Turns the inMsg (incoming message) into the out parsed
   2671           *          structure.
   2672           *
   2673           * @param   inMsg - incoming message
   2674           *
   2675           * @return  pointer to parsed structures.  This structure was
   2676           *          allocated using osal_mem_alloc, so it must be freed
   2677           *          by the calling function [osal_mem_free()].
   2678           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2679          ZDO_NwkIEEEAddrResp_t *ZDO_ParseAddrRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseAddrRsp:
   2680          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2681            ZDO_NwkIEEEAddrResp_t *rsp;
   2682            uint8 *msg;
   2683            byte cnt = 0;
   \   000009   75..00       MOV     ?V2,#0x0
   2684          
   2685            // Calculate the number of items in the list
   2686            if ( inMsg->asduLen > (1 + Z_EXTADDR_LEN + 2) )
   \   00000C   EE           MOV     A,R6
   \   00000D   2410         ADD     A,#0x10
   \   00000F   F582         MOV     DPL,A
   \   000011   E4           CLR     A
   \   000012   3F           ADDC    A,R7
   \   000013   F583         MOV     DPH,A
   \   000015   E0           MOVX    A,@DPTR
   \   000016   C3           CLR     C
   \   000017   940C         SUBB    A,#0xc
   \   000019   401C         JC      ??ZDO_ParseAddrRsp_0
   2687            {
   2688              cnt = inMsg->asdu[1 + Z_EXTADDR_LEN + 2];
   \   00001B   EE           MOV     A,R6
   \   00001C   2413         ADD     A,#0x13
   \   00001E   F582         MOV     DPL,A
   \   000020   E4           CLR     A
   \   000021   3F           ADDC    A,R7
   \   000022   F583         MOV     DPH,A
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F8           MOV     R0,A
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   C8           XCH     A,R0
   \   000029   240B         ADD     A,#0xb
   \   00002B   F582         MOV     DPL,A
   \   00002D   C8           XCH     A,R0
   \   00002E   3400         ADDC    A,#0x0
   \   000030   F583         MOV     DPH,A
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F5..         MOV     ?V2,A
   \   000035   8003         SJMP    ??ZDO_ParseAddrRsp_1
   2689            }
   2690            else
   2691            {
   2692              cnt = 0;
   \                     ??ZDO_ParseAddrRsp_0:
   \   000037   75..00       MOV     ?V2,#0x0
   2693            }
   2694          
   2695            // Make buffer
   2696            rsp = (ZDO_NwkIEEEAddrResp_t *)osal_mem_alloc( sizeof(ZDO_NwkIEEEAddrResp_t) + (cnt * sizeof ( uint16 )) );
   \                     ??ZDO_ParseAddrRsp_1:
   \   00003A                ; Setup parameters for call to function osal_mem_alloc
   \   00003A   A8..         MOV     R0,?V2
   \   00003C   7900         MOV     R1,#0x0
   \   00003E   E8           MOV     A,R0
   \   00003F   75F002       MOV     B,#0x2
   \   000042   A4           MUL     AB
   \   000043   C8           XCH     A,R0
   \   000044   AAF0         MOV     R2,B
   \   000046   75F000       MOV     B,#0x0
   \   000049   A4           MUL     AB
   \   00004A   2A           ADD     A,R2
   \   00004B   FA           MOV     R2,A
   \   00004C   75F002       MOV     B,#0x2
   \   00004F   E9           MOV     A,R1
   \   000050   A4           MUL     AB
   \   000051   2A           ADD     A,R2
   \   000052   F9           MOV     R1,A
   \   000053   E8           MOV     A,R0
   \   000054   240D         ADD     A,#0xd
   \   000056   FA           MOV     R2,A
   \   000057   E4           CLR     A
   \   000058   39           ADDC    A,R1
   \   000059   FB           MOV     R3,A
   \   00005A   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00005D   8A..         MOV     ?V4,R2
   \   00005F   8B..         MOV     ?V5,R3
   \   000061   85....       MOV     ?V0,?V4
   \   000064   85....       MOV     ?V1,?V5
   2697          
   2698            if ( rsp )
   \   000067   E5..         MOV     A,?V0
   \   000069   45..         ORL     A,?V1
   \   00006B   7003         JNZ     $+5
   \   00006D   02....       LJMP    ??ZDO_ParseAddrRsp_2 & 0xFFFF
   2699            {
   2700              msg = inMsg->asdu;
   \   000070   EE           MOV     A,R6
   \   000071   2413         ADD     A,#0x13
   \   000073   F582         MOV     DPL,A
   \   000075   E4           CLR     A
   \   000076   3F           ADDC    A,R7
   \   000077   F583         MOV     DPH,A
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   FE           MOV     R6,A
   \   00007B   A3           INC     DPTR
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   FF           MOV     R7,A
   2701          
   2702              rsp->status = *msg++;
   \   00007E   8E82         MOV     DPL,R6
   \   000080   8F83         MOV     DPH,R7
   \   000082   E0           MOVX    A,@DPTR
   \   000083   C0E0         PUSH    A
   \   000085   85..82       MOV     DPL,?V0
   \   000088   85..83       MOV     DPH,?V1
   \   00008B   D0E0         POP     A
   \   00008D   F0           MOVX    @DPTR,A
   \   00008E   8E82         MOV     DPL,R6
   \   000090   8F83         MOV     DPH,R7
   \   000092   A3           INC     DPTR
   \   000093   AE82         MOV     R6,DPL
   \   000095   AF83         MOV     R7,DPH
   2703              if ( rsp->status == ZDO_SUCCESS )
   \   000097   85..82       MOV     DPL,?V0
   \   00009A   85..83       MOV     DPH,?V1
   \   00009D   E0           MOVX    A,@DPTR
   \   00009E   6003         JZ      $+5
   \   0000A0   02....       LJMP    ??ZDO_ParseAddrRsp_2 & 0xFFFF
   2704              {
   2705                osal_cpyExtAddr( rsp->extAddr, msg );
   \   0000A3                ; Setup parameters for call to function sAddrExtCpy
   \   0000A3   EE           MOV     A,R6
   \   0000A4   FC           MOV     R4,A
   \   0000A5   EF           MOV     A,R7
   \   0000A6   FD           MOV     R5,A
   \   0000A7   E5..         MOV     A,?V0
   \   0000A9   2403         ADD     A,#0x3
   \   0000AB   FA           MOV     R2,A
   \   0000AC   E4           CLR     A
   \   0000AD   35..         ADDC    A,?V1
   \   0000AF   FB           MOV     R3,A
   \   0000B0   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2706                msg += Z_EXTADDR_LEN;
   \   0000B3   EE           MOV     A,R6
   \   0000B4   2408         ADD     A,#0x8
   \   0000B6   FE           MOV     R6,A
   \   0000B7   5001         JNC     ??ZDO_ParseAddrRsp_3
   \   0000B9   0F           INC     R7
   2707                rsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseAddrRsp_3:
   \   0000BA   8E82         MOV     DPL,R6
   \   0000BC   8F83         MOV     DPH,R7
   \   0000BE   E0           MOVX    A,@DPTR
   \   0000BF   FA           MOV     R2,A
   \   0000C0   7B00         MOV     R3,#0x0
   \   0000C2   8E82         MOV     DPL,R6
   \   0000C4   8F83         MOV     DPH,R7
   \   0000C6   A3           INC     DPTR
   \   0000C7   E0           MOVX    A,@DPTR
   \   0000C8   F8           MOV     R0,A
   \   0000C9   7900         MOV     R1,#0x0
   \   0000CB   E4           CLR     A
   \   0000CC   C8           XCH     A,R0
   \   0000CD   F9           MOV     R1,A
   \   0000CE   EA           MOV     A,R2
   \   0000CF   28           ADD     A,R0
   \   0000D0   F8           MOV     R0,A
   \   0000D1   EB           MOV     A,R3
   \   0000D2   39           ADDC    A,R1
   \   0000D3   F9           MOV     R1,A
   \   0000D4   85..82       MOV     DPL,?V0
   \   0000D7   85..83       MOV     DPH,?V1
   \   0000DA   A3           INC     DPTR
   \   0000DB   E8           MOV     A,R0
   \   0000DC   F0           MOVX    @DPTR,A
   \   0000DD   A3           INC     DPTR
   \   0000DE   E9           MOV     A,R1
   \   0000DF   F0           MOVX    @DPTR,A
   2708          
   2709                msg += 2;
   \   0000E0   EE           MOV     A,R6
   \   0000E1   2402         ADD     A,#0x2
   \   0000E3   FE           MOV     R6,A
   \   0000E4   5001         JNC     ??ZDO_ParseAddrRsp_4
   \   0000E6   0F           INC     R7
   2710                rsp->numAssocDevs = 0;
   \                     ??ZDO_ParseAddrRsp_4:
   \   0000E7   E5..         MOV     A,?V0
   \   0000E9   240B         ADD     A,#0xb
   \   0000EB   F582         MOV     DPL,A
   \   0000ED   E4           CLR     A
   \   0000EE   35..         ADDC    A,?V1
   \   0000F0   F583         MOV     DPH,A
   \   0000F2   7400         MOV     A,#0x0
   \   0000F4   F0           MOVX    @DPTR,A
   2711          
   2712                // StartIndex field is only present if NumAssocDev field is non-zero.
   2713                if ( cnt > 0 )
   \   0000F5   E5..         MOV     A,?V2
   \   0000F7   7003         JNZ     $+5
   \   0000F9   02....       LJMP    ??ZDO_ParseAddrRsp_2 & 0xFFFF
   2714                {
   2715                  uint16 *pList = &(rsp->devList[0]);
   \   0000FC   E5..         MOV     A,?V0
   \   0000FE   240D         ADD     A,#0xd
   \   000100   F8           MOV     R0,A
   \   000101   E4           CLR     A
   \   000102   35..         ADDC    A,?V1
   \   000104   F9           MOV     R1,A
   2716                  byte n = cnt;
   \   000105   85....       MOV     ?V3,?V2
   2717          
   2718                  rsp->numAssocDevs = *msg++;
   \   000108   8E82         MOV     DPL,R6
   \   00010A   8F83         MOV     DPH,R7
   \   00010C   E0           MOVX    A,@DPTR
   \   00010D   C0E0         PUSH    A
   \   00010F   E5..         MOV     A,?V0
   \   000111   240B         ADD     A,#0xb
   \   000113   F582         MOV     DPL,A
   \   000115   E4           CLR     A
   \   000116   35..         ADDC    A,?V1
   \   000118   F583         MOV     DPH,A
   \   00011A   D0E0         POP     A
   \   00011C   F0           MOVX    @DPTR,A
   \   00011D   8E82         MOV     DPL,R6
   \   00011F   8F83         MOV     DPH,R7
   \   000121   A3           INC     DPTR
   \   000122   AE82         MOV     R6,DPL
   \   000124   AF83         MOV     R7,DPH
   2719                  rsp->startIndex = *msg++;
   \   000126   8E82         MOV     DPL,R6
   \   000128   8F83         MOV     DPH,R7
   \   00012A   E0           MOVX    A,@DPTR
   \   00012B   C0E0         PUSH    A
   \   00012D   E5..         MOV     A,?V0
   \   00012F   240C         ADD     A,#0xc
   \   000131   F582         MOV     DPL,A
   \   000133   E4           CLR     A
   \   000134   35..         ADDC    A,?V1
   \   000136   F583         MOV     DPH,A
   \   000138   D0E0         POP     A
   \   00013A   F0           MOVX    @DPTR,A
   \   00013B   8E82         MOV     DPL,R6
   \   00013D   8F83         MOV     DPH,R7
   \   00013F   A3           INC     DPTR
   \   000140   AE82         MOV     R6,DPL
   \   000142   AF83         MOV     R7,DPH
   \   000144   8033         SJMP    ??ZDO_ParseAddrRsp_5
   2720          
   2721                  while ( n != 0 )
   2722                  {
   2723                    *pList++ = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseAddrRsp_6:
   \   000146   8E82         MOV     DPL,R6
   \   000148   8F83         MOV     DPH,R7
   \   00014A   E0           MOVX    A,@DPTR
   \   00014B   FC           MOV     R4,A
   \   00014C   7D00         MOV     R5,#0x0
   \   00014E   8E82         MOV     DPL,R6
   \   000150   8F83         MOV     DPH,R7
   \   000152   A3           INC     DPTR
   \   000153   E0           MOVX    A,@DPTR
   \   000154   FA           MOV     R2,A
   \   000155   7B00         MOV     R3,#0x0
   \   000157   E4           CLR     A
   \   000158   CA           XCH     A,R2
   \   000159   FB           MOV     R3,A
   \   00015A   EC           MOV     A,R4
   \   00015B   2A           ADD     A,R2
   \   00015C   FA           MOV     R2,A
   \   00015D   ED           MOV     A,R5
   \   00015E   3B           ADDC    A,R3
   \   00015F   FB           MOV     R3,A
   \   000160   8882         MOV     DPL,R0
   \   000162   8983         MOV     DPH,R1
   \   000164   EA           MOV     A,R2
   \   000165   F0           MOVX    @DPTR,A
   \   000166   A3           INC     DPTR
   \   000167   EB           MOV     A,R3
   \   000168   F0           MOVX    @DPTR,A
   \   000169   E8           MOV     A,R0
   \   00016A   2402         ADD     A,#0x2
   \   00016C   F8           MOV     R0,A
   \   00016D   5001         JNC     ??ZDO_ParseAddrRsp_7
   \   00016F   09           INC     R1
   2724                    msg += sizeof( uint16 );
   \                     ??ZDO_ParseAddrRsp_7:
   \   000170   EE           MOV     A,R6
   \   000171   2402         ADD     A,#0x2
   \   000173   FE           MOV     R6,A
   \   000174   5001         JNC     ??ZDO_ParseAddrRsp_8
   \   000176   0F           INC     R7
   2725                    n--;
   \                     ??ZDO_ParseAddrRsp_8:
   \   000177   15..         DEC     ?V3
   2726                  }
   \                     ??ZDO_ParseAddrRsp_5:
   \   000179   E5..         MOV     A,?V3
   \   00017B   70C9         JNZ     ??ZDO_ParseAddrRsp_6
   2727                }
   2728              }
   2729            }
   2730          
   2731            return ( rsp );
   \                     ??ZDO_ParseAddrRsp_2:
   \   00017D   AA..         MOV     R2,?V0
   \   00017F   AB..         MOV     R3,?V1
   \   000181   7F06         MOV     R7,#0x6
   \   000183   02....       LJMP    ?BANKED_LEAVE_XDATA
   2732          }
   2733          
   2734          /*********************************************************************
   2735           * @fn          ZDO_ParseNodeDescRsp
   2736           *
   2737           * @brief       This function parses the Node_Desc_rsp message.
   2738           *
   2739           * @param       inMsg - incoming message
   2740           * @param       pNDRsp - place to parse the message into
   2741           *
   2742           * @return      none
   2743           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2744          void ZDO_ParseNodeDescRsp( zdoIncomingMsg_t *inMsg, ZDO_NodeDescRsp_t *pNDRsp )
   \                     ZDO_ParseNodeDescRsp:
   2745          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2746            uint8 *msg;
   2747          
   2748            msg = inMsg->asdu;
   \   000005   EA           MOV     A,R2
   \   000006   2413         ADD     A,#0x13
   \   000008   F582         MOV     DPL,A
   \   00000A   E4           CLR     A
   \   00000B   3B           ADDC    A,R3
   \   00000C   F583         MOV     DPH,A
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F8           MOV     R0,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F9           MOV     R1,A
   2749          
   2750            pNDRsp->status = *msg++;
   \   000013   8882         MOV     DPL,R0
   \   000015   8983         MOV     DPH,R1
   \   000017   E0           MOVX    A,@DPTR
   \   000018   C0E0         PUSH    A
   \   00001A   8C82         MOV     DPL,R4
   \   00001C   8D83         MOV     DPH,R5
   \   00001E   D0E0         POP     A
   \   000020   F0           MOVX    @DPTR,A
   \   000021   8882         MOV     DPL,R0
   \   000023   8983         MOV     DPH,R1
   \   000025   A3           INC     DPTR
   \   000026   A882         MOV     R0,DPL
   \   000028   A983         MOV     R1,DPH
   2751            pNDRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \   00002A   8882         MOV     DPL,R0
   \   00002C   8983         MOV     DPH,R1
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   FE           MOV     R6,A
   \   000030   7F00         MOV     R7,#0x0
   \   000032   8882         MOV     DPL,R0
   \   000034   8983         MOV     DPH,R1
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   FA           MOV     R2,A
   \   000039   7B00         MOV     R3,#0x0
   \   00003B   E4           CLR     A
   \   00003C   CA           XCH     A,R2
   \   00003D   FB           MOV     R3,A
   \   00003E   EE           MOV     A,R6
   \   00003F   2A           ADD     A,R2
   \   000040   FA           MOV     R2,A
   \   000041   EF           MOV     A,R7
   \   000042   3B           ADDC    A,R3
   \   000043   FB           MOV     R3,A
   \   000044   8C82         MOV     DPL,R4
   \   000046   8D83         MOV     DPH,R5
   \   000048   A3           INC     DPTR
   \   000049   EA           MOV     A,R2
   \   00004A   F0           MOVX    @DPTR,A
   \   00004B   A3           INC     DPTR
   \   00004C   EB           MOV     A,R3
   \   00004D   F0           MOVX    @DPTR,A
   2752          
   2753            if ( pNDRsp->status == ZDP_SUCCESS )
   \   00004E   8C82         MOV     DPL,R4
   \   000050   8D83         MOV     DPH,R5
   \   000052   E0           MOVX    A,@DPTR
   \   000053   6003         JZ      $+5
   \   000055   02....       LJMP    ??ZDO_ParseNodeDescRsp_0 & 0xFFFF
   2754            {
   2755              msg += 2;
   \   000058   E8           MOV     A,R0
   \   000059   2402         ADD     A,#0x2
   \   00005B   F8           MOV     R0,A
   \   00005C   5001         JNC     ??ZDO_ParseNodeDescRsp_1
   \   00005E   09           INC     R1
   2756              pNDRsp->nodeDesc.LogicalType = *msg & 0x07;
   \                     ??ZDO_ParseNodeDescRsp_1:
   \   00005F   8882         MOV     DPL,R0
   \   000061   8983         MOV     DPH,R1
   \   000063   E0           MOVX    A,@DPTR
   \   000064   5407         ANL     A,#0x7
   \   000066   FA           MOV     R2,A
   \   000067   8C82         MOV     DPL,R4
   \   000069   8D83         MOV     DPH,R5
   \   00006B   A3           INC     DPTR
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   54F8         ANL     A,#0xf8
   \   000071   F0           MOVX    @DPTR,A
   \   000072   7407         MOV     A,#0x7
   \   000074   5A           ANL     A,R2
   \   000075   FA           MOV     R2,A
   \   000076   8C82         MOV     DPL,R4
   \   000078   8D83         MOV     DPH,R5
   \   00007A   A3           INC     DPTR
   \   00007B   A3           INC     DPTR
   \   00007C   A3           INC     DPTR
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   4A           ORL     A,R2
   \   00007F   F0           MOVX    @DPTR,A
   2757          
   2758              pNDRsp->nodeDesc.ComplexDescAvail = ( *msg & 0x08 ) >> 3;
   \   000080   8882         MOV     DPL,R0
   \   000082   8983         MOV     DPH,R1
   \   000084   E0           MOVX    A,@DPTR
   \   000085   A2E3         MOV     C,0xE0 /* A   */.3
   \   000087   E4           CLR     A
   \   000088   33           RLC     A
   \   000089   FA           MOV     R2,A
   \   00008A   8C82         MOV     DPL,R4
   \   00008C   8D83         MOV     DPH,R5
   \   00008E   A3           INC     DPTR
   \   00008F   A3           INC     DPTR
   \   000090   A3           INC     DPTR
   \   000091   EA           MOV     A,R2
   \   000092   A2E0         MOV     C,0xE0 /* A   */.0
   \   000094   E0           MOVX    A,@DPTR
   \   000095   92E3         MOV     0xE0 /* A   */.3,C
   \   000097   F0           MOVX    @DPTR,A
   2759              pNDRsp->nodeDesc.UserDescAvail = ( *msg & 0x10 ) >> 4;
   \   000098   8882         MOV     DPL,R0
   \   00009A   8983         MOV     DPH,R1
   \   00009C   E0           MOVX    A,@DPTR
   \   00009D   A2E4         MOV     C,0xE0 /* A   */.4
   \   00009F   E4           CLR     A
   \   0000A0   33           RLC     A
   \   0000A1   FA           MOV     R2,A
   \   0000A2   8C82         MOV     DPL,R4
   \   0000A4   8D83         MOV     DPH,R5
   \   0000A6   A3           INC     DPTR
   \   0000A7   A3           INC     DPTR
   \   0000A8   A3           INC     DPTR
   \   0000A9   EA           MOV     A,R2
   \   0000AA   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   92E4         MOV     0xE0 /* A   */.4,C
   \   0000AF   F0           MOVX    @DPTR,A
   2760          
   2761              msg++;  // Reserved bits.
   \   0000B0   8882         MOV     DPL,R0
   \   0000B2   8983         MOV     DPH,R1
   \   0000B4   A3           INC     DPTR
   \   0000B5   A882         MOV     R0,DPL
   \   0000B7   A983         MOV     R1,DPH
   2762              pNDRsp->nodeDesc.FrequencyBand = (*msg >> 3) & 0x1f;
   \   0000B9   8882         MOV     DPL,R0
   \   0000BB   8983         MOV     DPH,R1
   \   0000BD   E0           MOVX    A,@DPTR
   \   0000BE   13           RRC     A
   \   0000BF   13           RRC     A
   \   0000C0   13           RRC     A
   \   0000C1   541F         ANL     A,#0x1f
   \   0000C3   FA           MOV     R2,A
   \   0000C4   8C82         MOV     DPL,R4
   \   0000C6   8D83         MOV     DPH,R5
   \   0000C8   A3           INC     DPTR
   \   0000C9   A3           INC     DPTR
   \   0000CA   A3           INC     DPTR
   \   0000CB   A3           INC     DPTR
   \   0000CC   E0           MOVX    A,@DPTR
   \   0000CD   5407         ANL     A,#0x7
   \   0000CF   F0           MOVX    @DPTR,A
   \   0000D0   EA           MOV     A,R2
   \   0000D1   33           RLC     A
   \   0000D2   33           RLC     A
   \   0000D3   33           RLC     A
   \   0000D4   54F8         ANL     A,#0xf8
   \   0000D6   FA           MOV     R2,A
   \   0000D7   8C82         MOV     DPL,R4
   \   0000D9   8D83         MOV     DPH,R5
   \   0000DB   A3           INC     DPTR
   \   0000DC   A3           INC     DPTR
   \   0000DD   A3           INC     DPTR
   \   0000DE   A3           INC     DPTR
   \   0000DF   E0           MOVX    A,@DPTR
   \   0000E0   4A           ORL     A,R2
   \   0000E1   F0           MOVX    @DPTR,A
   2763              pNDRsp->nodeDesc.APSFlags = *msg++ & 0x07;
   \   0000E2   8882         MOV     DPL,R0
   \   0000E4   8983         MOV     DPH,R1
   \   0000E6   E0           MOVX    A,@DPTR
   \   0000E7   5407         ANL     A,#0x7
   \   0000E9   FA           MOV     R2,A
   \   0000EA   8882         MOV     DPL,R0
   \   0000EC   8983         MOV     DPH,R1
   \   0000EE   A3           INC     DPTR
   \   0000EF   A882         MOV     R0,DPL
   \   0000F1   A983         MOV     R1,DPH
   \   0000F3   8C82         MOV     DPL,R4
   \   0000F5   8D83         MOV     DPH,R5
   \   0000F7   A3           INC     DPTR
   \   0000F8   A3           INC     DPTR
   \   0000F9   A3           INC     DPTR
   \   0000FA   A3           INC     DPTR
   \   0000FB   E0           MOVX    A,@DPTR
   \   0000FC   54F8         ANL     A,#0xf8
   \   0000FE   F0           MOVX    @DPTR,A
   \   0000FF   7407         MOV     A,#0x7
   \   000101   5A           ANL     A,R2
   \   000102   FA           MOV     R2,A
   \   000103   8C82         MOV     DPL,R4
   \   000105   8D83         MOV     DPH,R5
   \   000107   A3           INC     DPTR
   \   000108   A3           INC     DPTR
   \   000109   A3           INC     DPTR
   \   00010A   A3           INC     DPTR
   \   00010B   E0           MOVX    A,@DPTR
   \   00010C   4A           ORL     A,R2
   \   00010D   F0           MOVX    @DPTR,A
   2764              pNDRsp->nodeDesc.CapabilityFlags = *msg++;
   \   00010E   8882         MOV     DPL,R0
   \   000110   8983         MOV     DPH,R1
   \   000112   E0           MOVX    A,@DPTR
   \   000113   C0E0         PUSH    A
   \   000115   8C82         MOV     DPL,R4
   \   000117   8D83         MOV     DPH,R5
   \   000119   A3           INC     DPTR
   \   00011A   A3           INC     DPTR
   \   00011B   A3           INC     DPTR
   \   00011C   A3           INC     DPTR
   \   00011D   A3           INC     DPTR
   \   00011E   D0E0         POP     A
   \   000120   F0           MOVX    @DPTR,A
   \   000121   8882         MOV     DPL,R0
   \   000123   8983         MOV     DPH,R1
   \   000125   A3           INC     DPTR
   \   000126   A882         MOV     R0,DPL
   \   000128   A983         MOV     R1,DPH
   2765              pNDRsp->nodeDesc.ManufacturerCode[0] = *msg++;
   \   00012A   8882         MOV     DPL,R0
   \   00012C   8983         MOV     DPH,R1
   \   00012E   E0           MOVX    A,@DPTR
   \   00012F   C0E0         PUSH    A
   \   000131   8C82         MOV     DPL,R4
   \   000133   8D83         MOV     DPH,R5
   \   000135   A3           INC     DPTR
   \   000136   A3           INC     DPTR
   \   000137   A3           INC     DPTR
   \   000138   A3           INC     DPTR
   \   000139   A3           INC     DPTR
   \   00013A   A3           INC     DPTR
   \   00013B   D0E0         POP     A
   \   00013D   F0           MOVX    @DPTR,A
   \   00013E   8882         MOV     DPL,R0
   \   000140   8983         MOV     DPH,R1
   \   000142   A3           INC     DPTR
   \   000143   A882         MOV     R0,DPL
   \   000145   A983         MOV     R1,DPH
   2766              pNDRsp->nodeDesc.ManufacturerCode[1] = *msg++;
   \   000147   8882         MOV     DPL,R0
   \   000149   8983         MOV     DPH,R1
   \   00014B   E0           MOVX    A,@DPTR
   \   00014C   C0E0         PUSH    A
   \   00014E   8C82         MOV     DPL,R4
   \   000150   8D83         MOV     DPH,R5
   \   000152   A3           INC     DPTR
   \   000153   A3           INC     DPTR
   \   000154   A3           INC     DPTR
   \   000155   A3           INC     DPTR
   \   000156   A3           INC     DPTR
   \   000157   A3           INC     DPTR
   \   000158   A3           INC     DPTR
   \   000159   D0E0         POP     A
   \   00015B   F0           MOVX    @DPTR,A
   \   00015C   8882         MOV     DPL,R0
   \   00015E   8983         MOV     DPH,R1
   \   000160   A3           INC     DPTR
   \   000161   A882         MOV     R0,DPL
   \   000163   A983         MOV     R1,DPH
   2767              pNDRsp->nodeDesc.MaxBufferSize = *msg++;
   \   000165   8882         MOV     DPL,R0
   \   000167   8983         MOV     DPH,R1
   \   000169   E0           MOVX    A,@DPTR
   \   00016A   C0E0         PUSH    A
   \   00016C   8C82         MOV     DPL,R4
   \   00016E   8D83         MOV     DPH,R5
   \   000170   A3           INC     DPTR
   \   000171   A3           INC     DPTR
   \   000172   A3           INC     DPTR
   \   000173   A3           INC     DPTR
   \   000174   A3           INC     DPTR
   \   000175   A3           INC     DPTR
   \   000176   A3           INC     DPTR
   \   000177   A3           INC     DPTR
   \   000178   D0E0         POP     A
   \   00017A   F0           MOVX    @DPTR,A
   \   00017B   8882         MOV     DPL,R0
   \   00017D   8983         MOV     DPH,R1
   \   00017F   A3           INC     DPTR
   \   000180   A882         MOV     R0,DPL
   \   000182   A983         MOV     R1,DPH
   2768              pNDRsp->nodeDesc.MaxInTransferSize[0] = *msg++;
   \   000184   8882         MOV     DPL,R0
   \   000186   8983         MOV     DPH,R1
   \   000188   E0           MOVX    A,@DPTR
   \   000189   C0E0         PUSH    A
   \   00018B   8C82         MOV     DPL,R4
   \   00018D   8D83         MOV     DPH,R5
   \   00018F   A3           INC     DPTR
   \   000190   A3           INC     DPTR
   \   000191   A3           INC     DPTR
   \   000192   A3           INC     DPTR
   \   000193   A3           INC     DPTR
   \   000194   A3           INC     DPTR
   \   000195   A3           INC     DPTR
   \   000196   A3           INC     DPTR
   \   000197   A3           INC     DPTR
   \   000198   D0E0         POP     A
   \   00019A   F0           MOVX    @DPTR,A
   \   00019B   8882         MOV     DPL,R0
   \   00019D   8983         MOV     DPH,R1
   \   00019F   A3           INC     DPTR
   \   0001A0   A882         MOV     R0,DPL
   \   0001A2   A983         MOV     R1,DPH
   2769              pNDRsp->nodeDesc.MaxInTransferSize[1] = *msg++;
   \   0001A4   8882         MOV     DPL,R0
   \   0001A6   8983         MOV     DPH,R1
   \   0001A8   E0           MOVX    A,@DPTR
   \   0001A9   C0E0         PUSH    A
   \   0001AB   8C82         MOV     DPL,R4
   \   0001AD   8D83         MOV     DPH,R5
   \   0001AF   A3           INC     DPTR
   \   0001B0   A3           INC     DPTR
   \   0001B1   A3           INC     DPTR
   \   0001B2   A3           INC     DPTR
   \   0001B3   A3           INC     DPTR
   \   0001B4   A3           INC     DPTR
   \   0001B5   A3           INC     DPTR
   \   0001B6   A3           INC     DPTR
   \   0001B7   A3           INC     DPTR
   \   0001B8   A3           INC     DPTR
   \   0001B9   D0E0         POP     A
   \   0001BB   F0           MOVX    @DPTR,A
   \   0001BC   8882         MOV     DPL,R0
   \   0001BE   8983         MOV     DPH,R1
   \   0001C0   A3           INC     DPTR
   \   0001C1   A882         MOV     R0,DPL
   \   0001C3   A983         MOV     R1,DPH
   2770              pNDRsp->nodeDesc.ServerMask = BUILD_UINT16( msg[0], msg[1] );
   \   0001C5   8882         MOV     DPL,R0
   \   0001C7   8983         MOV     DPH,R1
   \   0001C9   E0           MOVX    A,@DPTR
   \   0001CA   FE           MOV     R6,A
   \   0001CB   7F00         MOV     R7,#0x0
   \   0001CD   8882         MOV     DPL,R0
   \   0001CF   8983         MOV     DPH,R1
   \   0001D1   A3           INC     DPTR
   \   0001D2   E0           MOVX    A,@DPTR
   \   0001D3   FA           MOV     R2,A
   \   0001D4   7B00         MOV     R3,#0x0
   \   0001D6   E4           CLR     A
   \   0001D7   CA           XCH     A,R2
   \   0001D8   FB           MOV     R3,A
   \   0001D9   EE           MOV     A,R6
   \   0001DA   2A           ADD     A,R2
   \   0001DB   FA           MOV     R2,A
   \   0001DC   EF           MOV     A,R7
   \   0001DD   3B           ADDC    A,R3
   \   0001DE   FB           MOV     R3,A
   \   0001DF   EC           MOV     A,R4
   \   0001E0   240B         ADD     A,#0xb
   \   0001E2   F582         MOV     DPL,A
   \   0001E4   E4           CLR     A
   \   0001E5   3D           ADDC    A,R5
   \   0001E6   F583         MOV     DPH,A
   \   0001E8   EA           MOV     A,R2
   \   0001E9   F0           MOVX    @DPTR,A
   \   0001EA   A3           INC     DPTR
   \   0001EB   EB           MOV     A,R3
   \   0001EC   F0           MOVX    @DPTR,A
   2771              msg += 2;
   \   0001ED   E8           MOV     A,R0
   \   0001EE   2402         ADD     A,#0x2
   \   0001F0   F8           MOV     R0,A
   \   0001F1   5001         JNC     ??ZDO_ParseNodeDescRsp_2
   \   0001F3   09           INC     R1
   2772              pNDRsp->nodeDesc.MaxOutTransferSize[0] = *msg++;
   \                     ??ZDO_ParseNodeDescRsp_2:
   \   0001F4   8882         MOV     DPL,R0
   \   0001F6   8983         MOV     DPH,R1
   \   0001F8   E0           MOVX    A,@DPTR
   \   0001F9   C0E0         PUSH    A
   \   0001FB   EC           MOV     A,R4
   \   0001FC   240D         ADD     A,#0xd
   \   0001FE   F582         MOV     DPL,A
   \   000200   E4           CLR     A
   \   000201   3D           ADDC    A,R5
   \   000202   F583         MOV     DPH,A
   \   000204   D0E0         POP     A
   \   000206   F0           MOVX    @DPTR,A
   \   000207   8882         MOV     DPL,R0
   \   000209   8983         MOV     DPH,R1
   \   00020B   A3           INC     DPTR
   \   00020C   A882         MOV     R0,DPL
   \   00020E   A983         MOV     R1,DPH
   2773              pNDRsp->nodeDesc.MaxOutTransferSize[1] = *msg++;
   \   000210   8882         MOV     DPL,R0
   \   000212   8983         MOV     DPH,R1
   \   000214   E0           MOVX    A,@DPTR
   \   000215   C0E0         PUSH    A
   \   000217   EC           MOV     A,R4
   \   000218   240E         ADD     A,#0xe
   \   00021A   F582         MOV     DPL,A
   \   00021C   E4           CLR     A
   \   00021D   3D           ADDC    A,R5
   \   00021E   F583         MOV     DPH,A
   \   000220   D0E0         POP     A
   \   000222   F0           MOVX    @DPTR,A
   \   000223   8882         MOV     DPL,R0
   \   000225   8983         MOV     DPH,R1
   \   000227   A3           INC     DPTR
   \   000228   A882         MOV     R0,DPL
   \   00022A   A983         MOV     R1,DPH
   2774              pNDRsp->nodeDesc.DescriptorCapability = *msg;
   \   00022C   8882         MOV     DPL,R0
   \   00022E   8983         MOV     DPH,R1
   \   000230   E0           MOVX    A,@DPTR
   \   000231   C0E0         PUSH    A
   \   000233   EC           MOV     A,R4
   \   000234   240F         ADD     A,#0xf
   \   000236   F582         MOV     DPL,A
   \   000238   E4           CLR     A
   \   000239   3D           ADDC    A,R5
   \   00023A   F583         MOV     DPH,A
   \   00023C   D0E0         POP     A
   \   00023E   F0           MOVX    @DPTR,A
   2775            }
   2776          }
   \                     ??ZDO_ParseNodeDescRsp_0:
   \   00023F   7F01         MOV     R7,#0x1
   \   000241   02....       LJMP    ?BANKED_LEAVE_XDATA
   2777          
   2778          /*********************************************************************
   2779           * @fn          ZDO_ParsePowerDescRsp
   2780           *
   2781           * @brief       This function parses the Power_Desc_rsp message.
   2782           *
   2783           * @param       inMsg  - incoming message
   2784           * @param       pNPRsp - place to parse the message into
   2785           *
   2786           * @return      none
   2787           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2788          void ZDO_ParsePowerDescRsp( zdoIncomingMsg_t *inMsg, ZDO_PowerRsp_t *pNPRsp )
   \                     ZDO_ParsePowerDescRsp:
   2789          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2790            uint8 *msg;
   2791          
   2792            msg = inMsg->asdu;
   \   000005   EA           MOV     A,R2
   \   000006   2413         ADD     A,#0x13
   \   000008   F582         MOV     DPL,A
   \   00000A   E4           CLR     A
   \   00000B   3B           ADDC    A,R3
   \   00000C   F583         MOV     DPH,A
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   FA           MOV     R2,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   FB           MOV     R3,A
   2793            pNPRsp->status = *msg++;
   \   000013   8A82         MOV     DPL,R2
   \   000015   8B83         MOV     DPH,R3
   \   000017   E0           MOVX    A,@DPTR
   \   000018   C0E0         PUSH    A
   \   00001A   8C82         MOV     DPL,R4
   \   00001C   8D83         MOV     DPH,R5
   \   00001E   D0E0         POP     A
   \   000020   F0           MOVX    @DPTR,A
   \   000021   8A82         MOV     DPL,R2
   \   000023   8B83         MOV     DPH,R3
   \   000025   A3           INC     DPTR
   \   000026   AA82         MOV     R2,DPL
   \   000028   AB83         MOV     R3,DPH
   2794            pNPRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \   00002A   8A82         MOV     DPL,R2
   \   00002C   8B83         MOV     DPH,R3
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   FE           MOV     R6,A
   \   000030   7F00         MOV     R7,#0x0
   \   000032   8A82         MOV     DPL,R2
   \   000034   8B83         MOV     DPH,R3
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   F8           MOV     R0,A
   \   000039   7900         MOV     R1,#0x0
   \   00003B   E4           CLR     A
   \   00003C   C8           XCH     A,R0
   \   00003D   F9           MOV     R1,A
   \   00003E   EE           MOV     A,R6
   \   00003F   28           ADD     A,R0
   \   000040   F8           MOV     R0,A
   \   000041   EF           MOV     A,R7
   \   000042   39           ADDC    A,R1
   \   000043   F9           MOV     R1,A
   \   000044   8C82         MOV     DPL,R4
   \   000046   8D83         MOV     DPH,R5
   \   000048   A3           INC     DPTR
   \   000049   E8           MOV     A,R0
   \   00004A   F0           MOVX    @DPTR,A
   \   00004B   A3           INC     DPTR
   \   00004C   E9           MOV     A,R1
   \   00004D   F0           MOVX    @DPTR,A
   2795          
   2796            if ( pNPRsp->status == ZDP_SUCCESS )
   \   00004E   8C82         MOV     DPL,R4
   \   000050   8D83         MOV     DPH,R5
   \   000052   E0           MOVX    A,@DPTR
   \   000053   6003         JZ      $+5
   \   000055   02....       LJMP    ??ZDO_ParsePowerDescRsp_0 & 0xFFFF
   2797            {
   2798              msg += 2;
   \   000058   EA           MOV     A,R2
   \   000059   2402         ADD     A,#0x2
   \   00005B   FA           MOV     R2,A
   \   00005C   5001         JNC     ??ZDO_ParsePowerDescRsp_1
   \   00005E   0B           INC     R3
   2799              pNPRsp->pwrDesc.AvailablePowerSources = *msg >> 4;
   \                     ??ZDO_ParsePowerDescRsp_1:
   \   00005F   8A82         MOV     DPL,R2
   \   000061   8B83         MOV     DPH,R3
   \   000063   E0           MOVX    A,@DPTR
   \   000064   C4           SWAP    A
   \   000065   540F         ANL     A,#0xf
   \   000067   F5..         MOV     ?V0,A
   \   000069   75..00       MOV     ?V1,#0x0
   \   00006C   8C82         MOV     DPL,R4
   \   00006E   8D83         MOV     DPH,R5
   \   000070   A3           INC     DPTR
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   E0           MOVX    A,@DPTR
   \   000074   540F         ANL     A,#0xf
   \   000076   F0           MOVX    @DPTR,A
   \   000077   A3           INC     DPTR
   \   000078   E0           MOVX    A,@DPTR
   \   000079   54FF         ANL     A,#0xff
   \   00007B   F0           MOVX    @DPTR,A
   \   00007C   7404         MOV     A,#0x4
   \   00007E   78..         MOV     R0,#?V0
   \   000080   12....       LCALL   ?S_SHL
   \   000083   E5..         MOV     A,?V0
   \   000085   54F0         ANL     A,#0xf0
   \   000087   F8           MOV     R0,A
   \   000088   E5..         MOV     A,?V1
   \   00008A   5400         ANL     A,#0x0
   \   00008C   F9           MOV     R1,A
   \   00008D   8C82         MOV     DPL,R4
   \   00008F   8D83         MOV     DPH,R5
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   A3           INC     DPTR
   \   000094   E0           MOVX    A,@DPTR
   \   000095   48           ORL     A,R0
   \   000096   F0           MOVX    @DPTR,A
   \   000097   A3           INC     DPTR
   \   000098   E0           MOVX    A,@DPTR
   \   000099   49           ORL     A,R1
   \   00009A   F0           MOVX    @DPTR,A
   2800              pNPRsp->pwrDesc.PowerMode = *msg++ & 0x0F;
   \   00009B   8A82         MOV     DPL,R2
   \   00009D   8B83         MOV     DPH,R3
   \   00009F   E0           MOVX    A,@DPTR
   \   0000A0   F8           MOV     R0,A
   \   0000A1   7900         MOV     R1,#0x0
   \   0000A3   E8           MOV     A,R0
   \   0000A4   540F         ANL     A,#0xf
   \   0000A6   F8           MOV     R0,A
   \   0000A7   E9           MOV     A,R1
   \   0000A8   5400         ANL     A,#0x0
   \   0000AA   F9           MOV     R1,A
   \   0000AB   8A82         MOV     DPL,R2
   \   0000AD   8B83         MOV     DPH,R3
   \   0000AF   A3           INC     DPTR
   \   0000B0   AA82         MOV     R2,DPL
   \   0000B2   AB83         MOV     R3,DPH
   \   0000B4   8C82         MOV     DPL,R4
   \   0000B6   8D83         MOV     DPH,R5
   \   0000B8   A3           INC     DPTR
   \   0000B9   A3           INC     DPTR
   \   0000BA   A3           INC     DPTR
   \   0000BB   E0           MOVX    A,@DPTR
   \   0000BC   54F0         ANL     A,#0xf0
   \   0000BE   F0           MOVX    @DPTR,A
   \   0000BF   A3           INC     DPTR
   \   0000C0   E0           MOVX    A,@DPTR
   \   0000C1   54FF         ANL     A,#0xff
   \   0000C3   F0           MOVX    @DPTR,A
   \   0000C4   E8           MOV     A,R0
   \   0000C5   540F         ANL     A,#0xf
   \   0000C7   F8           MOV     R0,A
   \   0000C8   E9           MOV     A,R1
   \   0000C9   5400         ANL     A,#0x0
   \   0000CB   F9           MOV     R1,A
   \   0000CC   8C82         MOV     DPL,R4
   \   0000CE   8D83         MOV     DPH,R5
   \   0000D0   A3           INC     DPTR
   \   0000D1   A3           INC     DPTR
   \   0000D2   A3           INC     DPTR
   \   0000D3   E0           MOVX    A,@DPTR
   \   0000D4   48           ORL     A,R0
   \   0000D5   F0           MOVX    @DPTR,A
   \   0000D6   A3           INC     DPTR
   \   0000D7   E0           MOVX    A,@DPTR
   \   0000D8   49           ORL     A,R1
   \   0000D9   F0           MOVX    @DPTR,A
   2801              pNPRsp->pwrDesc.CurrentPowerSourceLevel = *msg >> 4;
   \   0000DA   8A82         MOV     DPL,R2
   \   0000DC   8B83         MOV     DPH,R3
   \   0000DE   E0           MOVX    A,@DPTR
   \   0000DF   C4           SWAP    A
   \   0000E0   540F         ANL     A,#0xf
   \   0000E2   F5..         MOV     ?V0,A
   \   0000E4   75..00       MOV     ?V1,#0x0
   \   0000E7   8C82         MOV     DPL,R4
   \   0000E9   8D83         MOV     DPH,R5
   \   0000EB   A3           INC     DPTR
   \   0000EC   A3           INC     DPTR
   \   0000ED   A3           INC     DPTR
   \   0000EE   E0           MOVX    A,@DPTR
   \   0000EF   54FF         ANL     A,#0xff
   \   0000F1   F0           MOVX    @DPTR,A
   \   0000F2   A3           INC     DPTR
   \   0000F3   E0           MOVX    A,@DPTR
   \   0000F4   540F         ANL     A,#0xf
   \   0000F6   F0           MOVX    @DPTR,A
   \   0000F7   740C         MOV     A,#0xc
   \   0000F9   78..         MOV     R0,#?V0
   \   0000FB   12....       LCALL   ?S_SHL
   \   0000FE   8C82         MOV     DPL,R4
   \   000100   8D83         MOV     DPH,R5
   \   000102   A3           INC     DPTR
   \   000103   A3           INC     DPTR
   \   000104   A3           INC     DPTR
   \   000105   E0           MOVX    A,@DPTR
   \   000106   45..         ORL     A,?V0
   \   000108   F0           MOVX    @DPTR,A
   \   000109   A3           INC     DPTR
   \   00010A   E0           MOVX    A,@DPTR
   \   00010B   45..         ORL     A,?V1
   \   00010D   F0           MOVX    @DPTR,A
   2802              pNPRsp->pwrDesc.CurrentPowerSource = *msg++ & 0x0F;
   \   00010E   8A82         MOV     DPL,R2
   \   000110   8B83         MOV     DPH,R3
   \   000112   E0           MOVX    A,@DPTR
   \   000113   F8           MOV     R0,A
   \   000114   7900         MOV     R1,#0x0
   \   000116   E8           MOV     A,R0
   \   000117   540F         ANL     A,#0xf
   \   000119   F8           MOV     R0,A
   \   00011A   E9           MOV     A,R1
   \   00011B   5400         ANL     A,#0x0
   \   00011D   F9           MOV     R1,A
   \   00011E   8A82         MOV     DPL,R2
   \   000120   8B83         MOV     DPH,R3
   \   000122   A3           INC     DPTR
   \   000123   AA82         MOV     R2,DPL
   \   000125   AB83         MOV     R3,DPH
   \   000127   8C82         MOV     DPL,R4
   \   000129   8D83         MOV     DPH,R5
   \   00012B   A3           INC     DPTR
   \   00012C   A3           INC     DPTR
   \   00012D   A3           INC     DPTR
   \   00012E   E0           MOVX    A,@DPTR
   \   00012F   54FF         ANL     A,#0xff
   \   000131   F0           MOVX    @DPTR,A
   \   000132   A3           INC     DPTR
   \   000133   E0           MOVX    A,@DPTR
   \   000134   54F0         ANL     A,#0xf0
   \   000136   F0           MOVX    @DPTR,A
   \   000137   E4           CLR     A
   \   000138   C8           XCH     A,R0
   \   000139   F9           MOV     R1,A
   \   00013A   E8           MOV     A,R0
   \   00013B   5400         ANL     A,#0x0
   \   00013D   F8           MOV     R0,A
   \   00013E   E9           MOV     A,R1
   \   00013F   540F         ANL     A,#0xf
   \   000141   F9           MOV     R1,A
   \   000142   8C82         MOV     DPL,R4
   \   000144   8D83         MOV     DPH,R5
   \   000146   A3           INC     DPTR
   \   000147   A3           INC     DPTR
   \   000148   A3           INC     DPTR
   \   000149   E0           MOVX    A,@DPTR
   \   00014A   48           ORL     A,R0
   \   00014B   F0           MOVX    @DPTR,A
   \   00014C   A3           INC     DPTR
   \   00014D   E0           MOVX    A,@DPTR
   \   00014E   49           ORL     A,R1
   \   00014F   F0           MOVX    @DPTR,A
   2803            }
   2804          }
   \                     ??ZDO_ParsePowerDescRsp_0:
   \   000150   7F02         MOV     R7,#0x2
   \   000152   02....       LJMP    ?BANKED_LEAVE_XDATA
   2805          
   2806          /*********************************************************************
   2807           * @fn          ZDO_ParseSimpleDescRsp
   2808           *
   2809           * @brief       This function parse the Simple_Desc_rsp message.
   2810           *
   2811           *   NOTE: The pAppInClusterList and pAppOutClusterList fields
   2812           *         in the SimpleDescriptionFormat_t structure are allocated
   2813           *         and the calling function needs to free [osal_msg_free()]
   2814           *         these buffers.
   2815           *
   2816           * @param       inMsg  - incoming message
   2817           * @param       pSimpleDescRsp - place to parse the message into
   2818           *
   2819           * @return      none
   2820           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2821          void ZDO_ParseSimpleDescRsp( zdoIncomingMsg_t *inMsg, ZDO_SimpleDescRsp_t *pSimpleDescRsp )
   \                     ZDO_ParseSimpleDescRsp:
   2822          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2823            uint8 *msg;
   2824          
   2825            msg = inMsg->asdu;
   \   000005   EA           MOV     A,R2
   \   000006   2413         ADD     A,#0x13
   \   000008   F582         MOV     DPL,A
   \   00000A   E4           CLR     A
   \   00000B   3B           ADDC    A,R3
   \   00000C   F583         MOV     DPH,A
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   FA           MOV     R2,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   FB           MOV     R3,A
   2826            pSimpleDescRsp->status = *msg++;
   \   000013   8A82         MOV     DPL,R2
   \   000015   8B83         MOV     DPH,R3
   \   000017   E0           MOVX    A,@DPTR
   \   000018   C0E0         PUSH    A
   \   00001A   8C82         MOV     DPL,R4
   \   00001C   8D83         MOV     DPH,R5
   \   00001E   D0E0         POP     A
   \   000020   F0           MOVX    @DPTR,A
   \   000021   8A82         MOV     DPL,R2
   \   000023   8B83         MOV     DPH,R3
   \   000025   A3           INC     DPTR
   \   000026   AA82         MOV     R2,DPL
   \   000028   AB83         MOV     R3,DPH
   2827            pSimpleDescRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \   00002A   8A82         MOV     DPL,R2
   \   00002C   8B83         MOV     DPH,R3
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   FE           MOV     R6,A
   \   000030   7F00         MOV     R7,#0x0
   \   000032   8A82         MOV     DPL,R2
   \   000034   8B83         MOV     DPH,R3
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   F8           MOV     R0,A
   \   000039   7900         MOV     R1,#0x0
   \   00003B   E4           CLR     A
   \   00003C   C8           XCH     A,R0
   \   00003D   F9           MOV     R1,A
   \   00003E   EE           MOV     A,R6
   \   00003F   28           ADD     A,R0
   \   000040   F8           MOV     R0,A
   \   000041   EF           MOV     A,R7
   \   000042   39           ADDC    A,R1
   \   000043   F9           MOV     R1,A
   \   000044   8C82         MOV     DPL,R4
   \   000046   8D83         MOV     DPH,R5
   \   000048   A3           INC     DPTR
   \   000049   E8           MOV     A,R0
   \   00004A   F0           MOVX    @DPTR,A
   \   00004B   A3           INC     DPTR
   \   00004C   E9           MOV     A,R1
   \   00004D   F0           MOVX    @DPTR,A
   2828            msg += sizeof ( uint16 );
   \   00004E   EA           MOV     A,R2
   \   00004F   2402         ADD     A,#0x2
   \   000051   FA           MOV     R2,A
   \   000052   5001         JNC     ??ZDO_ParseSimpleDescRsp_0
   \   000054   0B           INC     R3
   2829            msg++; // Skip past the length field.
   \                     ??ZDO_ParseSimpleDescRsp_0:
   \   000055   8A82         MOV     DPL,R2
   \   000057   8B83         MOV     DPH,R3
   \   000059   A3           INC     DPTR
   \   00005A   AA82         MOV     R2,DPL
   \   00005C   AB83         MOV     R3,DPH
   2830          
   2831            if ( pSimpleDescRsp->status == ZDP_SUCCESS )
   \   00005E   8C82         MOV     DPL,R4
   \   000060   8D83         MOV     DPH,R5
   \   000062   E0           MOVX    A,@DPTR
   \   000063   700B         JNZ     ??ZDO_ParseSimpleDescRsp_1
   2832            {
   2833              ZDO_ParseSimpleDescBuf( msg, &(pSimpleDescRsp->simpleDesc) );
   \   000065                ; Setup parameters for call to function ZDO_ParseSimpleDescBuf
   \   000065   EC           MOV     A,R4
   \   000066   2403         ADD     A,#0x3
   \   000068   FC           MOV     R4,A
   \   000069   5001         JNC     ??ZDO_ParseSimpleDescRsp_2
   \   00006B   0D           INC     R5
   \                     ??ZDO_ParseSimpleDescRsp_2:
   \   00006C   12....       LCALL   `??ZDO_ParseSimpleDescBuf::?relay`; Banked call to: ZDO_ParseSimpleDescBuf
   \   00006F   E9           MOV     A,R1
   2834            }
   2835          }
   \                     ??ZDO_ParseSimpleDescRsp_1:
   \   000070   7F01         MOV     R7,#0x1
   \   000072   02....       LJMP    ?BANKED_LEAVE_XDATA
   2836          
   2837          /*********************************************************************
   2838           * @fn          ZDO_ParseEPListRsp
   2839           *
   2840           * @brief       This parse the Active_EP_rsp or Match_Desc_rsp message.
   2841           *
   2842           * @param       inMsg  - incoming message
   2843           *
   2844           * @return      none
   2845           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2846          ZDO_ActiveEndpointRsp_t *ZDO_ParseEPListRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseEPListRsp:
   2847          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   2848            ZDO_ActiveEndpointRsp_t *pRsp;
   2849            uint8 *msg;
   2850            uint8 Status;
   2851            uint8 cnt;
   2852          
   2853            msg = inMsg->asdu;
   \   000005   EA           MOV     A,R2
   \   000006   2413         ADD     A,#0x13
   \   000008   F582         MOV     DPL,A
   \   00000A   E4           CLR     A
   \   00000B   3B           ADDC    A,R3
   \   00000C   F583         MOV     DPH,A
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   FE           MOV     R6,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   FF           MOV     R7,A
   2854            Status = *msg++;
   \   000013   8E82         MOV     DPL,R6
   \   000015   8F83         MOV     DPH,R7
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F5..         MOV     ?V3,A
   \   00001A   8E82         MOV     DPL,R6
   \   00001C   8F83         MOV     DPH,R7
   \   00001E   A3           INC     DPTR
   \   00001F   AE82         MOV     R6,DPL
   \   000021   AF83         MOV     R7,DPH
   2855            cnt = msg[2];
   \   000023   8E82         MOV     DPL,R6
   \   000025   8F83         MOV     DPH,R7
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F5..         MOV     ?V2,A
   2856          
   2857            pRsp = (ZDO_ActiveEndpointRsp_t *)osal_mem_alloc( sizeof(  ZDO_ActiveEndpointRsp_t ) + cnt );
   \   00002C                ; Setup parameters for call to function osal_mem_alloc
   \   00002C   A8..         MOV     R0,?V2
   \   00002E   7900         MOV     R1,#0x0
   \   000030   E8           MOV     A,R0
   \   000031   2404         ADD     A,#0x4
   \   000033   FA           MOV     R2,A
   \   000034   E4           CLR     A
   \   000035   39           ADDC    A,R1
   \   000036   FB           MOV     R3,A
   \   000037   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00003A   8A..         MOV     ?V4,R2
   \   00003C   8B..         MOV     ?V5,R3
   \   00003E   85....       MOV     ?V0,?V4
   \   000041   85....       MOV     ?V1,?V5
   2858            if ( pRsp )
   \   000044   E5..         MOV     A,?V0
   \   000046   45..         ORL     A,?V1
   \   000048   6074         JZ      ??ZDO_ParseEPListRsp_0
   2859            {
   2860              pRsp->status = Status;
   \   00004A   E5..         MOV     A,?V3
   \   00004C   C0E0         PUSH    A
   \   00004E   85..82       MOV     DPL,?V0
   \   000051   85..83       MOV     DPH,?V1
   \   000054   D0E0         POP     A
   \   000056   F0           MOVX    @DPTR,A
   2861              pRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \   000057   8E82         MOV     DPL,R6
   \   000059   8F83         MOV     DPH,R7
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   FA           MOV     R2,A
   \   00005D   7B00         MOV     R3,#0x0
   \   00005F   8E82         MOV     DPL,R6
   \   000061   8F83         MOV     DPH,R7
   \   000063   A3           INC     DPTR
   \   000064   E0           MOVX    A,@DPTR
   \   000065   F8           MOV     R0,A
   \   000066   7900         MOV     R1,#0x0
   \   000068   E4           CLR     A
   \   000069   C8           XCH     A,R0
   \   00006A   F9           MOV     R1,A
   \   00006B   EA           MOV     A,R2
   \   00006C   28           ADD     A,R0
   \   00006D   F8           MOV     R0,A
   \   00006E   EB           MOV     A,R3
   \   00006F   39           ADDC    A,R1
   \   000070   F9           MOV     R1,A
   \   000071   85..82       MOV     DPL,?V0
   \   000074   85..83       MOV     DPH,?V1
   \   000077   A3           INC     DPTR
   \   000078   E8           MOV     A,R0
   \   000079   F0           MOVX    @DPTR,A
   \   00007A   A3           INC     DPTR
   \   00007B   E9           MOV     A,R1
   \   00007C   F0           MOVX    @DPTR,A
   2862              msg += sizeof( uint16 );
   \   00007D   EE           MOV     A,R6
   \   00007E   2402         ADD     A,#0x2
   \   000080   FE           MOV     R6,A
   \   000081   5001         JNC     ??ZDO_ParseEPListRsp_1
   \   000083   0F           INC     R7
   2863              pRsp->cnt = cnt;
   \                     ??ZDO_ParseEPListRsp_1:
   \   000084   E5..         MOV     A,?V2
   \   000086   C0E0         PUSH    A
   \   000088   85..82       MOV     DPL,?V0
   \   00008B   85..83       MOV     DPH,?V1
   \   00008E   A3           INC     DPTR
   \   00008F   A3           INC     DPTR
   \   000090   A3           INC     DPTR
   \   000091   D0E0         POP     A
   \   000093   F0           MOVX    @DPTR,A
   2864              msg++; // pass cnt
   \   000094   8E82         MOV     DPL,R6
   \   000096   8F83         MOV     DPH,R7
   \   000098   A3           INC     DPTR
   \   000099   AE82         MOV     R6,DPL
   \   00009B   AF83         MOV     R7,DPH
   2865              osal_memcpy( pRsp->epList, msg, cnt );
   \   00009D                ; Setup parameters for call to function osal_memcpy
   \   00009D   8E..         MOV     ?V4,R6
   \   00009F   8F..         MOV     ?V5,R7
   \   0000A1   75..00       MOV     ?V6,#0x0
   \   0000A4   78..         MOV     R0,#?V4
   \   0000A6   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000A9   AC..         MOV     R4,?V2
   \   0000AB   7D00         MOV     R5,#0x0
   \   0000AD   E5..         MOV     A,?V0
   \   0000AF   2404         ADD     A,#0x4
   \   0000B1   FA           MOV     R2,A
   \   0000B2   E4           CLR     A
   \   0000B3   35..         ADDC    A,?V1
   \   0000B5   FB           MOV     R3,A
   \   0000B6   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000B9   7403         MOV     A,#0x3
   \   0000BB   12....       LCALL   ?DEALLOC_XSTACK8
   2866            }
   2867          
   2868            return ( pRsp );
   \                     ??ZDO_ParseEPListRsp_0:
   \   0000BE   AA..         MOV     R2,?V0
   \   0000C0   AB..         MOV     R3,?V1
   \   0000C2   7F07         MOV     R7,#0x7
   \   0000C4   02....       LJMP    ?BANKED_LEAVE_XDATA
   2869          }
   2870          
   2871          /*********************************************************************
   2872           * @fn          ZDO_ParseServerDiscRsp
   2873           *
   2874           * @brief       Parse the Server_Discovery_rsp message.
   2875           *
   2876           * @param       inMsg - incoming message.
   2877           * @param       pRsp - place to put the parsed information.
   2878           *
   2879           * @return      none
   2880           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2881          void ZDO_ParseServerDiscRsp( zdoIncomingMsg_t *inMsg, ZDO_ServerDiscRsp_t *pRsp )
   \                     ZDO_ParseServerDiscRsp:
   2882          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2883            pRsp->status = inMsg->asdu[0];
   \   000005   EA           MOV     A,R2
   \   000006   2413         ADD     A,#0x13
   \   000008   F582         MOV     DPL,A
   \   00000A   E4           CLR     A
   \   00000B   3B           ADDC    A,R3
   \   00000C   F583         MOV     DPH,A
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F8           MOV     R0,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F583         MOV     DPH,A
   \   000014   8882         MOV     DPL,R0
   \   000016   E0           MOVX    A,@DPTR
   \   000017   C0E0         PUSH    A
   \   000019   8C82         MOV     DPL,R4
   \   00001B   8D83         MOV     DPH,R5
   \   00001D   D0E0         POP     A
   \   00001F   F0           MOVX    @DPTR,A
   2884            pRsp->serverMask = BUILD_UINT16( inMsg->asdu[1], inMsg->asdu[2] );
   \   000020   EA           MOV     A,R2
   \   000021   2413         ADD     A,#0x13
   \   000023   F582         MOV     DPL,A
   \   000025   E4           CLR     A
   \   000026   3B           ADDC    A,R3
   \   000027   F583         MOV     DPH,A
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F8           MOV     R0,A
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F583         MOV     DPH,A
   \   00002F   8882         MOV     DPL,R0
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   FE           MOV     R6,A
   \   000034   7F00         MOV     R7,#0x0
   \   000036   EA           MOV     A,R2
   \   000037   2413         ADD     A,#0x13
   \   000039   F582         MOV     DPL,A
   \   00003B   E4           CLR     A
   \   00003C   3B           ADDC    A,R3
   \   00003D   F583         MOV     DPH,A
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   F8           MOV     R0,A
   \   000041   A3           INC     DPTR
   \   000042   E0           MOVX    A,@DPTR
   \   000043   F583         MOV     DPH,A
   \   000045   8882         MOV     DPL,R0
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   F8           MOV     R0,A
   \   00004B   7900         MOV     R1,#0x0
   \   00004D   E4           CLR     A
   \   00004E   C8           XCH     A,R0
   \   00004F   F9           MOV     R1,A
   \   000050   EE           MOV     A,R6
   \   000051   28           ADD     A,R0
   \   000052   F8           MOV     R0,A
   \   000053   EF           MOV     A,R7
   \   000054   39           ADDC    A,R1
   \   000055   F9           MOV     R1,A
   \   000056   8C82         MOV     DPL,R4
   \   000058   8D83         MOV     DPH,R5
   \   00005A   A3           INC     DPTR
   \   00005B   E8           MOV     A,R0
   \   00005C   F0           MOVX    @DPTR,A
   \   00005D   A3           INC     DPTR
   \   00005E   E9           MOV     A,R1
   \   00005F   F0           MOVX    @DPTR,A
   2885          }
   \   000060   7F01         MOV     R7,#0x1
   \   000062   02....       LJMP    ?BANKED_LEAVE_XDATA
   2886          
   2887          /*********************************************************************
   2888           * @fn          ZDO_ParseMgmtLqiRsp
   2889           *
   2890           * @brief       This function parses the incoming Management
   2891           *              LQI response
   2892           *
   2893           * @param       inMsg - incoming message
   2894           *
   2895           * @return      a pointer to parsed response structure (NULL if not allocated).
   2896           *          This structure was allocated using osal_mem_alloc, so it must be freed
   2897           *          by the calling function [osal_mem_free()].
   2898           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2899          ZDO_MgmtLqiRsp_t *ZDO_ParseMgmtLqiRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtLqiRsp:
   2900          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   2901            ZDO_MgmtLqiRsp_t *pRsp;
   2902            uint8 status;
   2903            uint8 startIndex = 0;
   \   000005   75..00       MOV     ?V5,#0x0
   2904            uint8 neighborLqiCount = 0;
   \   000008   75..00       MOV     ?V4,#0x0
   2905            uint8 neighborLqiEntries = 0;
   \   00000B   75..00       MOV     ?V6,#0x0
   2906            uint8 *msg;
   2907          
   2908            msg = inMsg->asdu;
   \   00000E   EA           MOV     A,R2
   \   00000F   2413         ADD     A,#0x13
   \   000011   F582         MOV     DPL,A
   \   000013   E4           CLR     A
   \   000014   3B           ADDC    A,R3
   \   000015   F583         MOV     DPH,A
   \   000017   E0           MOVX    A,@DPTR
   \   000018   FE           MOV     R6,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   FF           MOV     R7,A
   2909          
   2910            status = *msg++;
   \   00001C   8E82         MOV     DPL,R6
   \   00001E   8F83         MOV     DPH,R7
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V7,A
   \   000023   8E82         MOV     DPL,R6
   \   000025   8F83         MOV     DPH,R7
   \   000027   A3           INC     DPTR
   \   000028   AE82         MOV     R6,DPL
   \   00002A   AF83         MOV     R7,DPH
   2911            if ( status == ZSuccess )
   \   00002C   E5..         MOV     A,?V7
   \   00002E   7030         JNZ     ??ZDO_ParseMgmtLqiRsp_0
   2912            {
   2913              neighborLqiEntries = *msg++;
   \   000030   8E82         MOV     DPL,R6
   \   000032   8F83         MOV     DPH,R7
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F5..         MOV     ?V6,A
   \   000037   8E82         MOV     DPL,R6
   \   000039   8F83         MOV     DPH,R7
   \   00003B   A3           INC     DPTR
   \   00003C   AE82         MOV     R6,DPL
   \   00003E   AF83         MOV     R7,DPH
   2914              startIndex = *msg++;
   \   000040   8E82         MOV     DPL,R6
   \   000042   8F83         MOV     DPH,R7
   \   000044   E0           MOVX    A,@DPTR
   \   000045   F5..         MOV     ?V5,A
   \   000047   8E82         MOV     DPL,R6
   \   000049   8F83         MOV     DPH,R7
   \   00004B   A3           INC     DPTR
   \   00004C   AE82         MOV     R6,DPL
   \   00004E   AF83         MOV     R7,DPH
   2915              neighborLqiCount = *msg++;
   \   000050   8E82         MOV     DPL,R6
   \   000052   8F83         MOV     DPH,R7
   \   000054   E0           MOVX    A,@DPTR
   \   000055   F5..         MOV     ?V4,A
   \   000057   8E82         MOV     DPL,R6
   \   000059   8F83         MOV     DPH,R7
   \   00005B   A3           INC     DPTR
   \   00005C   AE82         MOV     R6,DPL
   \   00005E   AF83         MOV     R7,DPH
   2916            }
   2917          
   2918            // Allocate a buffer big enough to handle the list.
   2919            pRsp = (ZDO_MgmtLqiRsp_t *)osal_mem_alloc(
   2920                      sizeof( ZDO_MgmtLqiRsp_t ) + (neighborLqiCount * sizeof( ZDP_MgmtLqiItem_t )) );
   \                     ??ZDO_ParseMgmtLqiRsp_0:
   \   000060                ; Setup parameters for call to function osal_mem_alloc
   \   000060   A8..         MOV     R0,?V4
   \   000062   7900         MOV     R1,#0x0
   \   000064   E8           MOV     A,R0
   \   000065   75F01A       MOV     B,#0x1a
   \   000068   A4           MUL     AB
   \   000069   C8           XCH     A,R0
   \   00006A   AAF0         MOV     R2,B
   \   00006C   75F000       MOV     B,#0x0
   \   00006F   A4           MUL     AB
   \   000070   2A           ADD     A,R2
   \   000071   FA           MOV     R2,A
   \   000072   75F01A       MOV     B,#0x1a
   \   000075   E9           MOV     A,R1
   \   000076   A4           MUL     AB
   \   000077   2A           ADD     A,R2
   \   000078   F9           MOV     R1,A
   \   000079   E8           MOV     A,R0
   \   00007A   2404         ADD     A,#0x4
   \   00007C   FA           MOV     R2,A
   \   00007D   E4           CLR     A
   \   00007E   39           ADDC    A,R1
   \   00007F   FB           MOV     R3,A
   \   000080   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000083   8A..         MOV     ?V0,R2
   \   000085   8B..         MOV     ?V1,R3
   \   000087   85....       MOV     ?V2,?V0
   \   00008A   85....       MOV     ?V3,?V1
   2921            if ( pRsp )
   \   00008D   E5..         MOV     A,?V2
   \   00008F   45..         ORL     A,?V3
   \   000091   7003         JNZ     $+5
   \   000093   02....       LJMP    ??ZDO_ParseMgmtLqiRsp_1 & 0xFFFF
   2922            {
   2923              uint8 x;
   2924              ZDP_MgmtLqiItem_t *pList = pRsp->list;
   \   000096   E5..         MOV     A,?V2
   \   000098   2404         ADD     A,#0x4
   \   00009A   F5..         MOV     ?V0,A
   \   00009C   E4           CLR     A
   \   00009D   35..         ADDC    A,?V3
   \   00009F   F5..         MOV     ?V1,A
   2925              pRsp->status = status;
   \   0000A1   E5..         MOV     A,?V7
   \   0000A3   C0E0         PUSH    A
   \   0000A5   85..82       MOV     DPL,?V2
   \   0000A8   85..83       MOV     DPH,?V3
   \   0000AB   D0E0         POP     A
   \   0000AD   F0           MOVX    @DPTR,A
   2926              pRsp->neighborLqiEntries = neighborLqiEntries;
   \   0000AE   E5..         MOV     A,?V6
   \   0000B0   C0E0         PUSH    A
   \   0000B2   85..82       MOV     DPL,?V2
   \   0000B5   85..83       MOV     DPH,?V3
   \   0000B8   A3           INC     DPTR
   \   0000B9   D0E0         POP     A
   \   0000BB   F0           MOVX    @DPTR,A
   2927              pRsp->startIndex = startIndex;
   \   0000BC   E5..         MOV     A,?V5
   \   0000BE   C0E0         PUSH    A
   \   0000C0   85..82       MOV     DPL,?V2
   \   0000C3   85..83       MOV     DPH,?V3
   \   0000C6   A3           INC     DPTR
   \   0000C7   A3           INC     DPTR
   \   0000C8   D0E0         POP     A
   \   0000CA   F0           MOVX    @DPTR,A
   2928              pRsp->neighborLqiCount = neighborLqiCount;
   \   0000CB   E5..         MOV     A,?V4
   \   0000CD   C0E0         PUSH    A
   \   0000CF   85..82       MOV     DPL,?V2
   \   0000D2   85..83       MOV     DPH,?V3
   \   0000D5   A3           INC     DPTR
   \   0000D6   A3           INC     DPTR
   \   0000D7   A3           INC     DPTR
   \   0000D8   D0E0         POP     A
   \   0000DA   F0           MOVX    @DPTR,A
   2929          
   2930              for ( x = 0; x < neighborLqiCount; x++ )
   \   0000DB   75..00       MOV     ?V5,#0x0
   \   0000DE   02....       LJMP    ??ZDO_ParseMgmtLqiRsp_2 & 0xFFFF
   2931              {
   2932                uint8 tmp;
   2933          
   2934                pList->panID = 0; // This isn't in the record, why is it in the structure?
   \                     ??ZDO_ParseMgmtLqiRsp_3:
   \   0000E1   85..82       MOV     DPL,?V0
   \   0000E4   85..83       MOV     DPH,?V1
   \   0000E7   7400         MOV     A,#0x0
   \   0000E9   F0           MOVX    @DPTR,A
   \   0000EA   A3           INC     DPTR
   \   0000EB   7400         MOV     A,#0x0
   \   0000ED   F0           MOVX    @DPTR,A
   2935                osal_cpyExtAddr(pList->extPanID, msg);   //Copy extended PAN ID
   \   0000EE                ; Setup parameters for call to function sAddrExtCpy
   \   0000EE   EE           MOV     A,R6
   \   0000EF   FC           MOV     R4,A
   \   0000F0   EF           MOV     A,R7
   \   0000F1   FD           MOV     R5,A
   \   0000F2   E5..         MOV     A,?V0
   \   0000F4   2402         ADD     A,#0x2
   \   0000F6   FA           MOV     R2,A
   \   0000F7   E4           CLR     A
   \   0000F8   35..         ADDC    A,?V1
   \   0000FA   FB           MOV     R3,A
   \   0000FB   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2936                msg += Z_EXTADDR_LEN;
   \   0000FE   EE           MOV     A,R6
   \   0000FF   2408         ADD     A,#0x8
   \   000101   FE           MOV     R6,A
   \   000102   5001         JNC     ??ZDO_ParseMgmtLqiRsp_4
   \   000104   0F           INC     R7
   2937          
   2938                osal_cpyExtAddr(pList->extAddr, msg);   //Copy extended address
   \                     ??ZDO_ParseMgmtLqiRsp_4:
   \   000105                ; Setup parameters for call to function sAddrExtCpy
   \   000105   EE           MOV     A,R6
   \   000106   FC           MOV     R4,A
   \   000107   EF           MOV     A,R7
   \   000108   FD           MOV     R5,A
   \   000109   E5..         MOV     A,?V0
   \   00010B   240A         ADD     A,#0xa
   \   00010D   FA           MOV     R2,A
   \   00010E   E4           CLR     A
   \   00010F   35..         ADDC    A,?V1
   \   000111   FB           MOV     R3,A
   \   000112   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2939                msg += Z_EXTADDR_LEN;
   \   000115   EE           MOV     A,R6
   \   000116   2408         ADD     A,#0x8
   \   000118   FE           MOV     R6,A
   \   000119   5001         JNC     ??ZDO_ParseMgmtLqiRsp_5
   \   00011B   0F           INC     R7
   2940          
   2941                pList->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtLqiRsp_5:
   \   00011C   8E82         MOV     DPL,R6
   \   00011E   8F83         MOV     DPH,R7
   \   000120   E0           MOVX    A,@DPTR
   \   000121   FA           MOV     R2,A
   \   000122   7B00         MOV     R3,#0x0
   \   000124   8E82         MOV     DPL,R6
   \   000126   8F83         MOV     DPH,R7
   \   000128   A3           INC     DPTR
   \   000129   E0           MOVX    A,@DPTR
   \   00012A   F8           MOV     R0,A
   \   00012B   7900         MOV     R1,#0x0
   \   00012D   E4           CLR     A
   \   00012E   C8           XCH     A,R0
   \   00012F   F9           MOV     R1,A
   \   000130   EA           MOV     A,R2
   \   000131   28           ADD     A,R0
   \   000132   F8           MOV     R0,A
   \   000133   EB           MOV     A,R3
   \   000134   39           ADDC    A,R1
   \   000135   F9           MOV     R1,A
   \   000136   E5..         MOV     A,?V0
   \   000138   2412         ADD     A,#0x12
   \   00013A   F582         MOV     DPL,A
   \   00013C   E4           CLR     A
   \   00013D   35..         ADDC    A,?V1
   \   00013F   F583         MOV     DPH,A
   \   000141   E8           MOV     A,R0
   \   000142   F0           MOVX    @DPTR,A
   \   000143   A3           INC     DPTR
   \   000144   E9           MOV     A,R1
   \   000145   F0           MOVX    @DPTR,A
   2942                msg += 2;
   \   000146   EE           MOV     A,R6
   \   000147   2402         ADD     A,#0x2
   \   000149   FE           MOV     R6,A
   \   00014A   5001         JNC     ??ZDO_ParseMgmtLqiRsp_6
   \   00014C   0F           INC     R7
   2943          
   2944                tmp = *msg++;
   \                     ??ZDO_ParseMgmtLqiRsp_6:
   \   00014D   8E82         MOV     DPL,R6
   \   00014F   8F83         MOV     DPH,R7
   \   000151   E0           MOVX    A,@DPTR
   \   000152   F8           MOV     R0,A
   \   000153   8E82         MOV     DPL,R6
   \   000155   8F83         MOV     DPH,R7
   \   000157   A3           INC     DPTR
   \   000158   AE82         MOV     R6,DPL
   \   00015A   AF83         MOV     R7,DPH
   2945                pList->devType = tmp & 0x03;
   \   00015C   7403         MOV     A,#0x3
   \   00015E   58           ANL     A,R0
   \   00015F   C0E0         PUSH    A
   \   000161   E5..         MOV     A,?V0
   \   000163   2414         ADD     A,#0x14
   \   000165   F582         MOV     DPL,A
   \   000167   E4           CLR     A
   \   000168   35..         ADDC    A,?V1
   \   00016A   F583         MOV     DPH,A
   \   00016C   D0E0         POP     A
   \   00016E   F0           MOVX    @DPTR,A
   2946                pList->rxOnIdle = (tmp >> 2) & 0x03;
   \   00016F   E8           MOV     A,R0
   \   000170   13           RRC     A
   \   000171   13           RRC     A
   \   000172   543F         ANL     A,#0x3f
   \   000174   5403         ANL     A,#0x3
   \   000176   C0E0         PUSH    A
   \   000178   E5..         MOV     A,?V0
   \   00017A   2415         ADD     A,#0x15
   \   00017C   F582         MOV     DPL,A
   \   00017E   E4           CLR     A
   \   00017F   35..         ADDC    A,?V1
   \   000181   F583         MOV     DPH,A
   \   000183   D0E0         POP     A
   \   000185   F0           MOVX    @DPTR,A
   2947                pList->relation = (tmp >> 4) & 0x07;
   \   000186   E8           MOV     A,R0
   \   000187   C4           SWAP    A
   \   000188   540F         ANL     A,#0xf
   \   00018A   5407         ANL     A,#0x7
   \   00018C   C0E0         PUSH    A
   \   00018E   E5..         MOV     A,?V0
   \   000190   2416         ADD     A,#0x16
   \   000192   F582         MOV     DPL,A
   \   000194   E4           CLR     A
   \   000195   35..         ADDC    A,?V1
   \   000197   F583         MOV     DPH,A
   \   000199   D0E0         POP     A
   \   00019B   F0           MOVX    @DPTR,A
   2948          
   2949                pList->permit = (*msg++) & 0x03;
   \   00019C   8E82         MOV     DPL,R6
   \   00019E   8F83         MOV     DPH,R7
   \   0001A0   E0           MOVX    A,@DPTR
   \   0001A1   5403         ANL     A,#0x3
   \   0001A3   C0E0         PUSH    A
   \   0001A5   E5..         MOV     A,?V0
   \   0001A7   2417         ADD     A,#0x17
   \   0001A9   F582         MOV     DPL,A
   \   0001AB   E4           CLR     A
   \   0001AC   35..         ADDC    A,?V1
   \   0001AE   F583         MOV     DPH,A
   \   0001B0   D0E0         POP     A
   \   0001B2   F0           MOVX    @DPTR,A
   \   0001B3   8E82         MOV     DPL,R6
   \   0001B5   8F83         MOV     DPH,R7
   \   0001B7   A3           INC     DPTR
   \   0001B8   AE82         MOV     R6,DPL
   \   0001BA   AF83         MOV     R7,DPH
   2950          
   2951                pList->depth = *msg++;
   \   0001BC   8E82         MOV     DPL,R6
   \   0001BE   8F83         MOV     DPH,R7
   \   0001C0   E0           MOVX    A,@DPTR
   \   0001C1   C0E0         PUSH    A
   \   0001C3   E5..         MOV     A,?V0
   \   0001C5   2418         ADD     A,#0x18
   \   0001C7   F582         MOV     DPL,A
   \   0001C9   E4           CLR     A
   \   0001CA   35..         ADDC    A,?V1
   \   0001CC   F583         MOV     DPH,A
   \   0001CE   D0E0         POP     A
   \   0001D0   F0           MOVX    @DPTR,A
   \   0001D1   8E82         MOV     DPL,R6
   \   0001D3   8F83         MOV     DPH,R7
   \   0001D5   A3           INC     DPTR
   \   0001D6   AE82         MOV     R6,DPL
   \   0001D8   AF83         MOV     R7,DPH
   2952          
   2953                pList->lqi = *msg++;
   \   0001DA   8E82         MOV     DPL,R6
   \   0001DC   8F83         MOV     DPH,R7
   \   0001DE   E0           MOVX    A,@DPTR
   \   0001DF   C0E0         PUSH    A
   \   0001E1   E5..         MOV     A,?V0
   \   0001E3   2419         ADD     A,#0x19
   \   0001E5   F582         MOV     DPL,A
   \   0001E7   E4           CLR     A
   \   0001E8   35..         ADDC    A,?V1
   \   0001EA   F583         MOV     DPH,A
   \   0001EC   D0E0         POP     A
   \   0001EE   F0           MOVX    @DPTR,A
   \   0001EF   8E82         MOV     DPL,R6
   \   0001F1   8F83         MOV     DPH,R7
   \   0001F3   A3           INC     DPTR
   \   0001F4   AE82         MOV     R6,DPL
   \   0001F6   AF83         MOV     R7,DPH
   2954                pList++;
   \   0001F8   E5..         MOV     A,?V0
   \   0001FA   241A         ADD     A,#0x1a
   \   0001FC   F5..         MOV     ?V0,A
   \   0001FE   5002         JNC     ??ZDO_ParseMgmtLqiRsp_7
   \   000200   05..         INC     ?V1
   2955              }
   \                     ??ZDO_ParseMgmtLqiRsp_7:
   \   000202   05..         INC     ?V5
   \                     ??ZDO_ParseMgmtLqiRsp_2:
   \   000204   E5..         MOV     A,?V5
   \   000206   C3           CLR     C
   \   000207   95..         SUBB    A,?V4
   \   000209   5003         JNC     $+5
   \   00020B   02....       LJMP    ??ZDO_ParseMgmtLqiRsp_3 & 0xFFFF
   2956            }
   2957          
   2958            return ( pRsp );
   \                     ??ZDO_ParseMgmtLqiRsp_1:
   \   00020E   AA..         MOV     R2,?V2
   \   000210   AB..         MOV     R3,?V3
   \   000212   7F08         MOV     R7,#0x8
   \   000214   02....       LJMP    ?BANKED_LEAVE_XDATA
   2959          }
   2960          
   2961          /*********************************************************************
   2962           * @fn          ZDO_ParseMgmNwkDiscRsp
   2963           *
   2964           * @brief       This function parses the incoming Management
   2965           *              Network Discover response.
   2966           *
   2967           * @param       inMsg - incoming message
   2968           *
   2969           * @return      pointer to parsed response.  This structure was
   2970           *          allocated using osal_mem_alloc, so it must be freed
   2971           *          by the calling function [osal_mem_free()].
   2972           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2973          ZDO_MgmNwkDiscRsp_t *ZDO_ParseMgmNwkDiscRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmNwkDiscRsp:
   2974          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   2975            ZDO_MgmNwkDiscRsp_t *pRsp;
   2976            uint8 status;
   2977            uint8 networkCount = 0;
   \   000005   75..00       MOV     ?V1,#0x0
   2978            uint8 startIndex = 0;
   \   000008   75..00       MOV     ?V0,#0x0
   2979            uint8 networkListCount = 0;
   \   00000B   75..00       MOV     ?V4,#0x0
   2980            uint8 *msg;
   2981          
   2982            msg = inMsg->asdu;
   \   00000E   EA           MOV     A,R2
   \   00000F   2413         ADD     A,#0x13
   \   000011   F582         MOV     DPL,A
   \   000013   E4           CLR     A
   \   000014   3B           ADDC    A,R3
   \   000015   F583         MOV     DPH,A
   \   000017   E0           MOVX    A,@DPTR
   \   000018   FE           MOV     R6,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   FF           MOV     R7,A
   2983            status = *msg++;
   \   00001C   8E82         MOV     DPL,R6
   \   00001E   8F83         MOV     DPH,R7
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V5,A
   \   000023   8E82         MOV     DPL,R6
   \   000025   8F83         MOV     DPH,R7
   \   000027   A3           INC     DPTR
   \   000028   AE82         MOV     R6,DPL
   \   00002A   AF83         MOV     R7,DPH
   2984          
   2985            if ( status == ZSuccess )
   \   00002C   E5..         MOV     A,?V5
   \   00002E   7030         JNZ     ??ZDO_ParseMgmNwkDiscRsp_0
   2986            {
   2987              networkCount = *msg++;
   \   000030   8E82         MOV     DPL,R6
   \   000032   8F83         MOV     DPH,R7
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F5..         MOV     ?V1,A
   \   000037   8E82         MOV     DPL,R6
   \   000039   8F83         MOV     DPH,R7
   \   00003B   A3           INC     DPTR
   \   00003C   AE82         MOV     R6,DPL
   \   00003E   AF83         MOV     R7,DPH
   2988              startIndex = *msg++;
   \   000040   8E82         MOV     DPL,R6
   \   000042   8F83         MOV     DPH,R7
   \   000044   E0           MOVX    A,@DPTR
   \   000045   F5..         MOV     ?V0,A
   \   000047   8E82         MOV     DPL,R6
   \   000049   8F83         MOV     DPH,R7
   \   00004B   A3           INC     DPTR
   \   00004C   AE82         MOV     R6,DPL
   \   00004E   AF83         MOV     R7,DPH
   2989              networkListCount = *msg++;
   \   000050   8E82         MOV     DPL,R6
   \   000052   8F83         MOV     DPH,R7
   \   000054   E0           MOVX    A,@DPTR
   \   000055   F5..         MOV     ?V4,A
   \   000057   8E82         MOV     DPL,R6
   \   000059   8F83         MOV     DPH,R7
   \   00005B   A3           INC     DPTR
   \   00005C   AE82         MOV     R6,DPL
   \   00005E   AF83         MOV     R7,DPH
   2990            }
   2991          
   2992            // Allocate a buffer big enough to handle the list.
   2993            pRsp = (ZDO_MgmNwkDiscRsp_t *)osal_mem_alloc( sizeof( ZDO_MgmNwkDiscRsp_t )
   2994                                            + (networkListCount * sizeof( mgmtNwkDiscItem_t )) );
   \                     ??ZDO_ParseMgmNwkDiscRsp_0:
   \   000060                ; Setup parameters for call to function osal_mem_alloc
   \   000060   A8..         MOV     R0,?V4
   \   000062   7900         MOV     R1,#0x0
   \   000064   E8           MOV     A,R0
   \   000065   75F010       MOV     B,#0x10
   \   000068   A4           MUL     AB
   \   000069   C8           XCH     A,R0
   \   00006A   AAF0         MOV     R2,B
   \   00006C   75F000       MOV     B,#0x0
   \   00006F   A4           MUL     AB
   \   000070   2A           ADD     A,R2
   \   000071   FA           MOV     R2,A
   \   000072   75F010       MOV     B,#0x10
   \   000075   E9           MOV     A,R1
   \   000076   A4           MUL     AB
   \   000077   2A           ADD     A,R2
   \   000078   F9           MOV     R1,A
   \   000079   E8           MOV     A,R0
   \   00007A   2404         ADD     A,#0x4
   \   00007C   FA           MOV     R2,A
   \   00007D   E4           CLR     A
   \   00007E   39           ADDC    A,R1
   \   00007F   FB           MOV     R3,A
   \   000080   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000083   8A..         MOV     ?V6,R2
   \   000085   8B..         MOV     ?V7,R3
   \   000087   85....       MOV     ?V2,?V6
   \   00008A   85....       MOV     ?V3,?V7
   2995            if ( pRsp )
   \   00008D   E5..         MOV     A,?V2
   \   00008F   45..         ORL     A,?V3
   \   000091   7003         JNZ     $+5
   \   000093   02....       LJMP    ??ZDO_ParseMgmNwkDiscRsp_1 & 0xFFFF
   2996            {
   2997              uint8 x;
   2998              mgmtNwkDiscItem_t *pList;
   2999          
   3000              pRsp->status = status;
   \   000096   E5..         MOV     A,?V5
   \   000098   C0E0         PUSH    A
   \   00009A   85..82       MOV     DPL,?V2
   \   00009D   85..83       MOV     DPH,?V3
   \   0000A0   D0E0         POP     A
   \   0000A2   F0           MOVX    @DPTR,A
   3001              pRsp->networkCount = networkCount;
   \   0000A3   E5..         MOV     A,?V1
   \   0000A5   C0E0         PUSH    A
   \   0000A7   85..82       MOV     DPL,?V2
   \   0000AA   85..83       MOV     DPH,?V3
   \   0000AD   A3           INC     DPTR
   \   0000AE   D0E0         POP     A
   \   0000B0   F0           MOVX    @DPTR,A
   3002              pRsp->startIndex = startIndex;
   \   0000B1   E5..         MOV     A,?V0
   \   0000B3   C0E0         PUSH    A
   \   0000B5   85..82       MOV     DPL,?V2
   \   0000B8   85..83       MOV     DPH,?V3
   \   0000BB   A3           INC     DPTR
   \   0000BC   A3           INC     DPTR
   \   0000BD   D0E0         POP     A
   \   0000BF   F0           MOVX    @DPTR,A
   3003              pRsp->networkListCount = networkListCount;
   \   0000C0   E5..         MOV     A,?V4
   \   0000C2   C0E0         PUSH    A
   \   0000C4   85..82       MOV     DPL,?V2
   \   0000C7   85..83       MOV     DPH,?V3
   \   0000CA   A3           INC     DPTR
   \   0000CB   A3           INC     DPTR
   \   0000CC   A3           INC     DPTR
   \   0000CD   D0E0         POP     A
   \   0000CF   F0           MOVX    @DPTR,A
   3004              pList = pRsp->list;
   \   0000D0   E5..         MOV     A,?V2
   \   0000D2   2404         ADD     A,#0x4
   \   0000D4   F5..         MOV     ?V0,A
   \   0000D6   E4           CLR     A
   \   0000D7   35..         ADDC    A,?V3
   \   0000D9   F5..         MOV     ?V1,A
   3005          
   3006              for ( x = 0; x < networkListCount; x++ )
   \   0000DB   75..00       MOV     ?V5,#0x0
   \   0000DE   02....       LJMP    ??ZDO_ParseMgmNwkDiscRsp_2 & 0xFFFF
   3007              {
   3008                osal_cpyExtAddr(pList->extendedPANID, msg);   //Copy extended PAN ID
   \                     ??ZDO_ParseMgmNwkDiscRsp_3:
   \   0000E1                ; Setup parameters for call to function sAddrExtCpy
   \   0000E1   EE           MOV     A,R6
   \   0000E2   FC           MOV     R4,A
   \   0000E3   EF           MOV     A,R7
   \   0000E4   FD           MOV     R5,A
   \   0000E5   AA..         MOV     R2,?V0
   \   0000E7   AB..         MOV     R3,?V1
   \   0000E9   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   3009                pList->PANId = BUILD_UINT16( msg[0], msg[1] );
   \   0000EC   8E82         MOV     DPL,R6
   \   0000EE   8F83         MOV     DPH,R7
   \   0000F0   E0           MOVX    A,@DPTR
   \   0000F1   FA           MOV     R2,A
   \   0000F2   7B00         MOV     R3,#0x0
   \   0000F4   8E82         MOV     DPL,R6
   \   0000F6   8F83         MOV     DPH,R7
   \   0000F8   A3           INC     DPTR
   \   0000F9   E0           MOVX    A,@DPTR
   \   0000FA   F8           MOV     R0,A
   \   0000FB   7900         MOV     R1,#0x0
   \   0000FD   E4           CLR     A
   \   0000FE   C8           XCH     A,R0
   \   0000FF   F9           MOV     R1,A
   \   000100   EA           MOV     A,R2
   \   000101   28           ADD     A,R0
   \   000102   F8           MOV     R0,A
   \   000103   EB           MOV     A,R3
   \   000104   39           ADDC    A,R1
   \   000105   F9           MOV     R1,A
   \   000106   85..82       MOV     DPL,?V0
   \   000109   85..83       MOV     DPH,?V1
   \   00010C   A3           INC     DPTR
   \   00010D   A3           INC     DPTR
   \   00010E   A3           INC     DPTR
   \   00010F   A3           INC     DPTR
   \   000110   A3           INC     DPTR
   \   000111   A3           INC     DPTR
   \   000112   A3           INC     DPTR
   \   000113   A3           INC     DPTR
   \   000114   E8           MOV     A,R0
   \   000115   F0           MOVX    @DPTR,A
   \   000116   A3           INC     DPTR
   \   000117   E9           MOV     A,R1
   \   000118   F0           MOVX    @DPTR,A
   3010                msg += Z_EXTADDR_LEN;
   \   000119   EE           MOV     A,R6
   \   00011A   2408         ADD     A,#0x8
   \   00011C   FE           MOV     R6,A
   \   00011D   5001         JNC     ??ZDO_ParseMgmNwkDiscRsp_4
   \   00011F   0F           INC     R7
   3011          
   3012                pList->logicalChannel = *msg++;
   \                     ??ZDO_ParseMgmNwkDiscRsp_4:
   \   000120   8E82         MOV     DPL,R6
   \   000122   8F83         MOV     DPH,R7
   \   000124   E0           MOVX    A,@DPTR
   \   000125   C0E0         PUSH    A
   \   000127   85..82       MOV     DPL,?V0
   \   00012A   85..83       MOV     DPH,?V1
   \   00012D   A3           INC     DPTR
   \   00012E   A3           INC     DPTR
   \   00012F   A3           INC     DPTR
   \   000130   A3           INC     DPTR
   \   000131   A3           INC     DPTR
   \   000132   A3           INC     DPTR
   \   000133   A3           INC     DPTR
   \   000134   A3           INC     DPTR
   \   000135   A3           INC     DPTR
   \   000136   A3           INC     DPTR
   \   000137   D0E0         POP     A
   \   000139   F0           MOVX    @DPTR,A
   \   00013A   8E82         MOV     DPL,R6
   \   00013C   8F83         MOV     DPH,R7
   \   00013E   A3           INC     DPTR
   \   00013F   AE82         MOV     R6,DPL
   \   000141   AF83         MOV     R7,DPH
   3013                pList->stackProfile = (*msg) & 0x0F;
   \   000143   8E82         MOV     DPL,R6
   \   000145   8F83         MOV     DPH,R7
   \   000147   E0           MOVX    A,@DPTR
   \   000148   540F         ANL     A,#0xf
   \   00014A   C0E0         PUSH    A
   \   00014C   E5..         MOV     A,?V0
   \   00014E   240B         ADD     A,#0xb
   \   000150   F582         MOV     DPL,A
   \   000152   E4           CLR     A
   \   000153   35..         ADDC    A,?V1
   \   000155   F583         MOV     DPH,A
   \   000157   D0E0         POP     A
   \   000159   F0           MOVX    @DPTR,A
   3014                pList->version = (*msg++ >> 4) & 0x0F;
   \   00015A   8E82         MOV     DPL,R6
   \   00015C   8F83         MOV     DPH,R7
   \   00015E   E0           MOVX    A,@DPTR
   \   00015F   C4           SWAP    A
   \   000160   540F         ANL     A,#0xf
   \   000162   C0E0         PUSH    A
   \   000164   E5..         MOV     A,?V0
   \   000166   240C         ADD     A,#0xc
   \   000168   F582         MOV     DPL,A
   \   00016A   E4           CLR     A
   \   00016B   35..         ADDC    A,?V1
   \   00016D   F583         MOV     DPH,A
   \   00016F   D0E0         POP     A
   \   000171   F0           MOVX    @DPTR,A
   \   000172   8E82         MOV     DPL,R6
   \   000174   8F83         MOV     DPH,R7
   \   000176   A3           INC     DPTR
   \   000177   AE82         MOV     R6,DPL
   \   000179   AF83         MOV     R7,DPH
   3015                pList->beaconOrder = (*msg) & 0x0F;
   \   00017B   8E82         MOV     DPL,R6
   \   00017D   8F83         MOV     DPH,R7
   \   00017F   E0           MOVX    A,@DPTR
   \   000180   540F         ANL     A,#0xf
   \   000182   C0E0         PUSH    A
   \   000184   E5..         MOV     A,?V0
   \   000186   240D         ADD     A,#0xd
   \   000188   F582         MOV     DPL,A
   \   00018A   E4           CLR     A
   \   00018B   35..         ADDC    A,?V1
   \   00018D   F583         MOV     DPH,A
   \   00018F   D0E0         POP     A
   \   000191   F0           MOVX    @DPTR,A
   3016                pList->superFrameOrder = (*msg++ >> 4) & 0x0F;
   \   000192   8E82         MOV     DPL,R6
   \   000194   8F83         MOV     DPH,R7
   \   000196   E0           MOVX    A,@DPTR
   \   000197   C4           SWAP    A
   \   000198   540F         ANL     A,#0xf
   \   00019A   C0E0         PUSH    A
   \   00019C   E5..         MOV     A,?V0
   \   00019E   240E         ADD     A,#0xe
   \   0001A0   F582         MOV     DPL,A
   \   0001A2   E4           CLR     A
   \   0001A3   35..         ADDC    A,?V1
   \   0001A5   F583         MOV     DPH,A
   \   0001A7   D0E0         POP     A
   \   0001A9   F0           MOVX    @DPTR,A
   \   0001AA   8E82         MOV     DPL,R6
   \   0001AC   8F83         MOV     DPH,R7
   \   0001AE   A3           INC     DPTR
   \   0001AF   AE82         MOV     R6,DPL
   \   0001B1   AF83         MOV     R7,DPH
   3017                pList->permitJoining = *msg++;
   \   0001B3   8E82         MOV     DPL,R6
   \   0001B5   8F83         MOV     DPH,R7
   \   0001B7   E0           MOVX    A,@DPTR
   \   0001B8   C0E0         PUSH    A
   \   0001BA   E5..         MOV     A,?V0
   \   0001BC   240F         ADD     A,#0xf
   \   0001BE   F582         MOV     DPL,A
   \   0001C0   E4           CLR     A
   \   0001C1   35..         ADDC    A,?V1
   \   0001C3   F583         MOV     DPH,A
   \   0001C5   D0E0         POP     A
   \   0001C7   F0           MOVX    @DPTR,A
   \   0001C8   8E82         MOV     DPL,R6
   \   0001CA   8F83         MOV     DPH,R7
   \   0001CC   A3           INC     DPTR
   \   0001CD   AE82         MOV     R6,DPL
   \   0001CF   AF83         MOV     R7,DPH
   3018                pList++;
   \   0001D1   E5..         MOV     A,?V0
   \   0001D3   2410         ADD     A,#0x10
   \   0001D5   F5..         MOV     ?V0,A
   \   0001D7   5002         JNC     ??ZDO_ParseMgmNwkDiscRsp_5
   \   0001D9   05..         INC     ?V1
   3019              }
   \                     ??ZDO_ParseMgmNwkDiscRsp_5:
   \   0001DB   05..         INC     ?V5
   \                     ??ZDO_ParseMgmNwkDiscRsp_2:
   \   0001DD   E5..         MOV     A,?V5
   \   0001DF   C3           CLR     C
   \   0001E0   95..         SUBB    A,?V4
   \   0001E2   5003         JNC     $+5
   \   0001E4   02....       LJMP    ??ZDO_ParseMgmNwkDiscRsp_3 & 0xFFFF
   3020            }
   3021          
   3022            return ( pRsp );
   \                     ??ZDO_ParseMgmNwkDiscRsp_1:
   \   0001E7   AA..         MOV     R2,?V2
   \   0001E9   AB..         MOV     R3,?V3
   \   0001EB   7F08         MOV     R7,#0x8
   \   0001ED   02....       LJMP    ?BANKED_LEAVE_XDATA
   3023          }
   3024          
   3025          /*********************************************************************
   3026           * @fn          ZDO_ParseMgmtRtgRsp
   3027           *
   3028           * @brief       This function parses the incoming Management
   3029           *              Routing response.
   3030           *
   3031           * @param       inMsg - incoming message
   3032           *
   3033           * @return      a pointer to parsed response structure (NULL if not allocated).
   3034           *          This structure was allocated using osal_mem_alloc, so it must be freed
   3035           *          by the calling function [osal_mem_free()].
   3036           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3037          ZDO_MgmtRtgRsp_t *ZDO_ParseMgmtRtgRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtRtgRsp:
   3038          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   3039            ZDO_MgmtRtgRsp_t *pRsp;
   3040            uint8 status;
   3041            uint8 rtgCount = 0;
   \   000005   75..00       MOV     ?V2,#0x0
   3042            uint8 startIndex = 0;
   \   000008   75..00       MOV     ?V1,#0x0
   3043            uint8 rtgListCount = 0;
   \   00000B   75..00       MOV     ?V0,#0x0
   3044            uint8 *msg;
   3045          
   3046            msg = inMsg->asdu;
   \   00000E   EA           MOV     A,R2
   \   00000F   2413         ADD     A,#0x13
   \   000011   F582         MOV     DPL,A
   \   000013   E4           CLR     A
   \   000014   3B           ADDC    A,R3
   \   000015   F583         MOV     DPH,A
   \   000017   E0           MOVX    A,@DPTR
   \   000018   FE           MOV     R6,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   FF           MOV     R7,A
   3047          
   3048            status = *msg++;
   \   00001C   8E82         MOV     DPL,R6
   \   00001E   8F83         MOV     DPH,R7
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V3,A
   \   000023   8E82         MOV     DPL,R6
   \   000025   8F83         MOV     DPH,R7
   \   000027   A3           INC     DPTR
   \   000028   AE82         MOV     R6,DPL
   \   00002A   AF83         MOV     R7,DPH
   3049            if ( status == ZSuccess )
   \   00002C   E5..         MOV     A,?V3
   \   00002E   7030         JNZ     ??ZDO_ParseMgmtRtgRsp_0
   3050            {
   3051              rtgCount = *msg++;
   \   000030   8E82         MOV     DPL,R6
   \   000032   8F83         MOV     DPH,R7
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F5..         MOV     ?V2,A
   \   000037   8E82         MOV     DPL,R6
   \   000039   8F83         MOV     DPH,R7
   \   00003B   A3           INC     DPTR
   \   00003C   AE82         MOV     R6,DPL
   \   00003E   AF83         MOV     R7,DPH
   3052              startIndex = *msg++;
   \   000040   8E82         MOV     DPL,R6
   \   000042   8F83         MOV     DPH,R7
   \   000044   E0           MOVX    A,@DPTR
   \   000045   F5..         MOV     ?V1,A
   \   000047   8E82         MOV     DPL,R6
   \   000049   8F83         MOV     DPH,R7
   \   00004B   A3           INC     DPTR
   \   00004C   AE82         MOV     R6,DPL
   \   00004E   AF83         MOV     R7,DPH
   3053              rtgListCount = *msg++;
   \   000050   8E82         MOV     DPL,R6
   \   000052   8F83         MOV     DPH,R7
   \   000054   E0           MOVX    A,@DPTR
   \   000055   F5..         MOV     ?V0,A
   \   000057   8E82         MOV     DPL,R6
   \   000059   8F83         MOV     DPH,R7
   \   00005B   A3           INC     DPTR
   \   00005C   AE82         MOV     R6,DPL
   \   00005E   AF83         MOV     R7,DPH
   3054            }
   3055          
   3056            // Allocate a buffer big enough to handle the list
   3057            pRsp = (ZDO_MgmtRtgRsp_t *)osal_mem_alloc(
   3058                    sizeof( ZDO_MgmtRtgRsp_t ) + (rtgListCount * sizeof( rtgItem_t )) );
   \                     ??ZDO_ParseMgmtRtgRsp_0:
   \   000060                ; Setup parameters for call to function osal_mem_alloc
   \   000060   A8..         MOV     R0,?V0
   \   000062   7900         MOV     R1,#0x0
   \   000064   E8           MOV     A,R0
   \   000065   75F007       MOV     B,#0x7
   \   000068   A4           MUL     AB
   \   000069   C8           XCH     A,R0
   \   00006A   AAF0         MOV     R2,B
   \   00006C   75F000       MOV     B,#0x0
   \   00006F   A4           MUL     AB
   \   000070   2A           ADD     A,R2
   \   000071   FA           MOV     R2,A
   \   000072   75F007       MOV     B,#0x7
   \   000075   E9           MOV     A,R1
   \   000076   A4           MUL     AB
   \   000077   2A           ADD     A,R2
   \   000078   F9           MOV     R1,A
   \   000079   E8           MOV     A,R0
   \   00007A   2404         ADD     A,#0x4
   \   00007C   FA           MOV     R2,A
   \   00007D   E4           CLR     A
   \   00007E   39           ADDC    A,R1
   \   00007F   FB           MOV     R3,A
   \   000080   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000083   8A..         MOV     ?V4,R2
   \   000085   8B..         MOV     ?V5,R3
   \   000087   AA..         MOV     R2,?V4
   \   000089   AB..         MOV     R3,?V5
   3059            if ( pRsp )
   \   00008B   EA           MOV     A,R2
   \   00008C   4B           ORL     A,R3
   \   00008D   7003         JNZ     $+5
   \   00008F   02....       LJMP    ??ZDO_ParseMgmtRtgRsp_1 & 0xFFFF
   3060            {
   3061              uint8 x;
   3062              rtgItem_t *pList = pRsp->list;
   \   000092   EA           MOV     A,R2
   \   000093   2404         ADD     A,#0x4
   \   000095   F8           MOV     R0,A
   \   000096   E4           CLR     A
   \   000097   3B           ADDC    A,R3
   \   000098   F9           MOV     R1,A
   3063              pRsp->status = status;
   \   000099   E5..         MOV     A,?V3
   \   00009B   C0E0         PUSH    A
   \   00009D   8A82         MOV     DPL,R2
   \   00009F   8B83         MOV     DPH,R3
   \   0000A1   D0E0         POP     A
   \   0000A3   F0           MOVX    @DPTR,A
   3064              pRsp->rtgCount = rtgCount;
   \   0000A4   E5..         MOV     A,?V2
   \   0000A6   C0E0         PUSH    A
   \   0000A8   8A82         MOV     DPL,R2
   \   0000AA   8B83         MOV     DPH,R3
   \   0000AC   A3           INC     DPTR
   \   0000AD   D0E0         POP     A
   \   0000AF   F0           MOVX    @DPTR,A
   3065              pRsp->startIndex = startIndex;
   \   0000B0   E5..         MOV     A,?V1
   \   0000B2   C0E0         PUSH    A
   \   0000B4   8A82         MOV     DPL,R2
   \   0000B6   8B83         MOV     DPH,R3
   \   0000B8   A3           INC     DPTR
   \   0000B9   A3           INC     DPTR
   \   0000BA   D0E0         POP     A
   \   0000BC   F0           MOVX    @DPTR,A
   3066              pRsp->rtgListCount = rtgListCount;
   \   0000BD   E5..         MOV     A,?V0
   \   0000BF   C0E0         PUSH    A
   \   0000C1   8A82         MOV     DPL,R2
   \   0000C3   8B83         MOV     DPH,R3
   \   0000C5   A3           INC     DPTR
   \   0000C6   A3           INC     DPTR
   \   0000C7   A3           INC     DPTR
   \   0000C8   D0E0         POP     A
   \   0000CA   F0           MOVX    @DPTR,A
   3067          
   3068              for ( x = 0; x < rtgListCount; x++ )
   \   0000CB   75..00       MOV     ?V1,#0x0
   \   0000CE   02....       LJMP    ??ZDO_ParseMgmtRtgRsp_2 & 0xFFFF
   3069              {
   3070                uint8 statOpt;
   3071          
   3072                pList->dstAddress = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtRtgRsp_3:
   \   0000D1   8E82         MOV     DPL,R6
   \   0000D3   8F83         MOV     DPH,R7
   \   0000D5   E0           MOVX    A,@DPTR
   \   0000D6   F5..         MOV     ?V2,A
   \   0000D8   75..00       MOV     ?V3,#0x0
   \   0000DB   8E82         MOV     DPL,R6
   \   0000DD   8F83         MOV     DPH,R7
   \   0000DF   A3           INC     DPTR
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   FC           MOV     R4,A
   \   0000E2   7D00         MOV     R5,#0x0
   \   0000E4   E4           CLR     A
   \   0000E5   CC           XCH     A,R4
   \   0000E6   FD           MOV     R5,A
   \   0000E7   E5..         MOV     A,?V2
   \   0000E9   2C           ADD     A,R4
   \   0000EA   FC           MOV     R4,A
   \   0000EB   E5..         MOV     A,?V3
   \   0000ED   3D           ADDC    A,R5
   \   0000EE   FD           MOV     R5,A
   \   0000EF   8882         MOV     DPL,R0
   \   0000F1   8983         MOV     DPH,R1
   \   0000F3   EC           MOV     A,R4
   \   0000F4   F0           MOVX    @DPTR,A
   \   0000F5   A3           INC     DPTR
   \   0000F6   ED           MOV     A,R5
   \   0000F7   F0           MOVX    @DPTR,A
   3073                msg += 2;
   \   0000F8   EE           MOV     A,R6
   \   0000F9   2402         ADD     A,#0x2
   \   0000FB   FE           MOV     R6,A
   \   0000FC   5001         JNC     ??ZDO_ParseMgmtRtgRsp_4
   \   0000FE   0F           INC     R7
   3074                statOpt = *msg++;
   \                     ??ZDO_ParseMgmtRtgRsp_4:
   \   0000FF   8E82         MOV     DPL,R6
   \   000101   8F83         MOV     DPH,R7
   \   000103   E0           MOVX    A,@DPTR
   \   000104   FC           MOV     R4,A
   \   000105   8E82         MOV     DPL,R6
   \   000107   8F83         MOV     DPH,R7
   \   000109   A3           INC     DPTR
   \   00010A   AE82         MOV     R6,DPL
   \   00010C   AF83         MOV     R7,DPH
   3075                pList->status = (statOpt & 0x07);
   \   00010E   7407         MOV     A,#0x7
   \   000110   5C           ANL     A,R4
   \   000111   C0E0         PUSH    A
   \   000113   8882         MOV     DPL,R0
   \   000115   8983         MOV     DPH,R1
   \   000117   A3           INC     DPTR
   \   000118   A3           INC     DPTR
   \   000119   A3           INC     DPTR
   \   00011A   A3           INC     DPTR
   \   00011B   A3           INC     DPTR
   \   00011C   D0E0         POP     A
   \   00011E   F0           MOVX    @DPTR,A
   3076                pList->options = ((statOpt >> 3) & 0x07);
   \   00011F   EC           MOV     A,R4
   \   000120   13           RRC     A
   \   000121   13           RRC     A
   \   000122   13           RRC     A
   \   000123   541F         ANL     A,#0x1f
   \   000125   5407         ANL     A,#0x7
   \   000127   C0E0         PUSH    A
   \   000129   8882         MOV     DPL,R0
   \   00012B   8983         MOV     DPH,R1
   \   00012D   A3           INC     DPTR
   \   00012E   A3           INC     DPTR
   \   00012F   A3           INC     DPTR
   \   000130   A3           INC     DPTR
   \   000131   A3           INC     DPTR
   \   000132   A3           INC     DPTR
   \   000133   D0E0         POP     A
   \   000135   F0           MOVX    @DPTR,A
   3077                pList->nextHopAddress = BUILD_UINT16( msg[0], msg[1] );
   \   000136   8E82         MOV     DPL,R6
   \   000138   8F83         MOV     DPH,R7
   \   00013A   E0           MOVX    A,@DPTR
   \   00013B   F5..         MOV     ?V2,A
   \   00013D   75..00       MOV     ?V3,#0x0
   \   000140   8E82         MOV     DPL,R6
   \   000142   8F83         MOV     DPH,R7
   \   000144   A3           INC     DPTR
   \   000145   E0           MOVX    A,@DPTR
   \   000146   FC           MOV     R4,A
   \   000147   7D00         MOV     R5,#0x0
   \   000149   E4           CLR     A
   \   00014A   CC           XCH     A,R4
   \   00014B   FD           MOV     R5,A
   \   00014C   E5..         MOV     A,?V2
   \   00014E   2C           ADD     A,R4
   \   00014F   FC           MOV     R4,A
   \   000150   E5..         MOV     A,?V3
   \   000152   3D           ADDC    A,R5
   \   000153   FD           MOV     R5,A
   \   000154   8882         MOV     DPL,R0
   \   000156   8983         MOV     DPH,R1
   \   000158   A3           INC     DPTR
   \   000159   A3           INC     DPTR
   \   00015A   EC           MOV     A,R4
   \   00015B   F0           MOVX    @DPTR,A
   \   00015C   A3           INC     DPTR
   \   00015D   ED           MOV     A,R5
   \   00015E   F0           MOVX    @DPTR,A
   3078                msg += 2;
   \   00015F   EE           MOV     A,R6
   \   000160   2402         ADD     A,#0x2
   \   000162   FE           MOV     R6,A
   \   000163   5001         JNC     ??ZDO_ParseMgmtRtgRsp_5
   \   000165   0F           INC     R7
   3079                pList++;
   \                     ??ZDO_ParseMgmtRtgRsp_5:
   \   000166   E8           MOV     A,R0
   \   000167   2407         ADD     A,#0x7
   \   000169   F8           MOV     R0,A
   \   00016A   5001         JNC     ??ZDO_ParseMgmtRtgRsp_6
   \   00016C   09           INC     R1
   3080              }
   \                     ??ZDO_ParseMgmtRtgRsp_6:
   \   00016D   05..         INC     ?V1
   \                     ??ZDO_ParseMgmtRtgRsp_2:
   \   00016F   E5..         MOV     A,?V1
   \   000171   C3           CLR     C
   \   000172   95..         SUBB    A,?V0
   \   000174   5003         JNC     $+5
   \   000176   02....       LJMP    ??ZDO_ParseMgmtRtgRsp_3 & 0xFFFF
   3081            }
   3082          
   3083            return ( pRsp );
   \                     ??ZDO_ParseMgmtRtgRsp_1:
   \   000179   7F06         MOV     R7,#0x6
   \   00017B   02....       LJMP    ?BANKED_LEAVE_XDATA
   3084          }
   3085          
   3086          /*********************************************************************
   3087           * @fn          ZDO_ParseMgmtBindRsp
   3088           *
   3089           * @brief       This function parses the incoming Management
   3090           *              Binding response.
   3091           *
   3092           * @param       inMsg - pointer to message to parse
   3093           *
   3094           * @return      a pointer to parsed response structure (NULL if not allocated).
   3095           *          This structure was allocated using osal_mem_alloc, so it must be freed
   3096           *          by the calling function [osal_mem_free()].
   3097           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3098          ZDO_MgmtBindRsp_t *ZDO_ParseMgmtBindRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtBindRsp:
   3099          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   3100            ZDO_MgmtBindRsp_t *pRsp;
   3101            uint8 status;
   3102            uint8 bindingCount = 0;
   \   000005   75..00       MOV     ?V6,#0x0
   3103            uint8 startIndex = 0;
   \   000008   75..00       MOV     ?V5,#0x0
   3104            uint8 bindingListCount = 0;
   \   00000B   75..00       MOV     ?V4,#0x0
   3105            uint8 *msg;
   3106          
   3107            msg = inMsg->asdu;
   \   00000E   EA           MOV     A,R2
   \   00000F   2413         ADD     A,#0x13
   \   000011   F582         MOV     DPL,A
   \   000013   E4           CLR     A
   \   000014   3B           ADDC    A,R3
   \   000015   F583         MOV     DPH,A
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F5..         MOV     ?V2,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V3,A
   3108          
   3109            status = *msg++;
   \   00001E   85..82       MOV     DPL,?V2
   \   000021   85..83       MOV     DPH,?V3
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F5..         MOV     ?V7,A
   \   000027   85..82       MOV     DPL,?V2
   \   00002A   85..83       MOV     DPH,?V3
   \   00002D   A3           INC     DPTR
   \   00002E   8582..       MOV     ?V2,DPL
   \   000031   8583..       MOV     ?V3,DPH
   3110            if ( status == ZSuccess )
   \   000034   E5..         MOV     A,?V7
   \   000036   7042         JNZ     ??ZDO_ParseMgmtBindRsp_0
   3111            {
   3112              bindingCount = *msg++;
   \   000038   85..82       MOV     DPL,?V2
   \   00003B   85..83       MOV     DPH,?V3
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   F5..         MOV     ?V6,A
   \   000041   85..82       MOV     DPL,?V2
   \   000044   85..83       MOV     DPH,?V3
   \   000047   A3           INC     DPTR
   \   000048   8582..       MOV     ?V2,DPL
   \   00004B   8583..       MOV     ?V3,DPH
   3113              startIndex = *msg++;
   \   00004E   85..82       MOV     DPL,?V2
   \   000051   85..83       MOV     DPH,?V3
   \   000054   E0           MOVX    A,@DPTR
   \   000055   F5..         MOV     ?V5,A
   \   000057   85..82       MOV     DPL,?V2
   \   00005A   85..83       MOV     DPH,?V3
   \   00005D   A3           INC     DPTR
   \   00005E   8582..       MOV     ?V2,DPL
   \   000061   8583..       MOV     ?V3,DPH
   3114              bindingListCount = *msg++;
   \   000064   85..82       MOV     DPL,?V2
   \   000067   85..83       MOV     DPH,?V3
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   F5..         MOV     ?V4,A
   \   00006D   85..82       MOV     DPL,?V2
   \   000070   85..83       MOV     DPH,?V3
   \   000073   A3           INC     DPTR
   \   000074   8582..       MOV     ?V2,DPL
   \   000077   8583..       MOV     ?V3,DPH
   3115            }
   3116          
   3117            // Allocate a buffer big enough to handle the list
   3118            pRsp = (ZDO_MgmtBindRsp_t *)osal_mem_alloc(
   3119                    (sizeof ( ZDO_MgmtBindRsp_t ) + (bindingListCount * sizeof( apsBindingItem_t ))) );
   \                     ??ZDO_ParseMgmtBindRsp_0:
   \   00007A                ; Setup parameters for call to function osal_mem_alloc
   \   00007A   A8..         MOV     R0,?V4
   \   00007C   7900         MOV     R1,#0x0
   \   00007E   E8           MOV     A,R0
   \   00007F   75F015       MOV     B,#0x15
   \   000082   A4           MUL     AB
   \   000083   C8           XCH     A,R0
   \   000084   AAF0         MOV     R2,B
   \   000086   75F000       MOV     B,#0x0
   \   000089   A4           MUL     AB
   \   00008A   2A           ADD     A,R2
   \   00008B   FA           MOV     R2,A
   \   00008C   75F015       MOV     B,#0x15
   \   00008F   E9           MOV     A,R1
   \   000090   A4           MUL     AB
   \   000091   2A           ADD     A,R2
   \   000092   F9           MOV     R1,A
   \   000093   E8           MOV     A,R0
   \   000094   2404         ADD     A,#0x4
   \   000096   FA           MOV     R2,A
   \   000097   E4           CLR     A
   \   000098   39           ADDC    A,R1
   \   000099   FB           MOV     R3,A
   \   00009A   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00009D   8A..         MOV     ?V8,R2
   \   00009F   8B..         MOV     ?V9,R3
   \   0000A1   85....       MOV     ?V0,?V8
   \   0000A4   85....       MOV     ?V1,?V9
   3120            if ( pRsp )
   \   0000A7   E5..         MOV     A,?V0
   \   0000A9   45..         ORL     A,?V1
   \   0000AB   7003         JNZ     $+5
   \   0000AD   02....       LJMP    ??ZDO_ParseMgmtBindRsp_1 & 0xFFFF
   3121            {
   3122              uint8 x;
   3123              apsBindingItem_t *pList = pRsp->list;
   \   0000B0   E5..         MOV     A,?V0
   \   0000B2   2404         ADD     A,#0x4
   \   0000B4   FE           MOV     R6,A
   \   0000B5   E4           CLR     A
   \   0000B6   35..         ADDC    A,?V1
   \   0000B8   FF           MOV     R7,A
   3124              pRsp->status = status;
   \   0000B9   E5..         MOV     A,?V7
   \   0000BB   C0E0         PUSH    A
   \   0000BD   85..82       MOV     DPL,?V0
   \   0000C0   85..83       MOV     DPH,?V1
   \   0000C3   D0E0         POP     A
   \   0000C5   F0           MOVX    @DPTR,A
   3125              pRsp->bindingCount = bindingCount;
   \   0000C6   E5..         MOV     A,?V6
   \   0000C8   C0E0         PUSH    A
   \   0000CA   85..82       MOV     DPL,?V0
   \   0000CD   85..83       MOV     DPH,?V1
   \   0000D0   A3           INC     DPTR
   \   0000D1   D0E0         POP     A
   \   0000D3   F0           MOVX    @DPTR,A
   3126              pRsp->startIndex = startIndex;
   \   0000D4   E5..         MOV     A,?V5
   \   0000D6   C0E0         PUSH    A
   \   0000D8   85..82       MOV     DPL,?V0
   \   0000DB   85..83       MOV     DPH,?V1
   \   0000DE   A3           INC     DPTR
   \   0000DF   A3           INC     DPTR
   \   0000E0   D0E0         POP     A
   \   0000E2   F0           MOVX    @DPTR,A
   3127              pRsp->bindingListCount = bindingListCount;
   \   0000E3   E5..         MOV     A,?V4
   \   0000E5   C0E0         PUSH    A
   \   0000E7   85..82       MOV     DPL,?V0
   \   0000EA   85..83       MOV     DPH,?V1
   \   0000ED   A3           INC     DPTR
   \   0000EE   A3           INC     DPTR
   \   0000EF   A3           INC     DPTR
   \   0000F0   D0E0         POP     A
   \   0000F2   F0           MOVX    @DPTR,A
   3128          
   3129              for ( x = 0; x < bindingListCount; x++ )
   \   0000F3   75..00       MOV     ?V5,#0x0
   \   0000F6   803F         SJMP    ??ZDO_ParseMgmtBindRsp_2
   3130              {
   3131                osal_cpyExtAddr( pList->srcAddr, msg );
   3132                msg += Z_EXTADDR_LEN;
   3133                pList->srcEP = *msg++;
   3134          
   3135                // Get the Cluster ID
   3136          
   3137                pList->clusterID = BUILD_UINT16( msg[0], msg[1] );
   3138                msg += 2;
   3139                pList->dstAddr.addrMode = *msg++;
   3140                if ( pList->dstAddr.addrMode == Addr64Bit )
   3141                {
   3142                  osal_cpyExtAddr( pList->dstAddr.addr.extAddr, msg );
   3143                  msg += Z_EXTADDR_LEN;
   3144                  pList->dstEP = *msg++;
   3145                }
   3146                else
   3147                {
   3148                  pList->dstAddr.addr.shortAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtBindRsp_3:
   \   0000F8   85..82       MOV     DPL,?V2
   \   0000FB   85..83       MOV     DPH,?V3
   \   0000FE   E0           MOVX    A,@DPTR
   \   0000FF   FA           MOV     R2,A
   \   000100   7B00         MOV     R3,#0x0
   \   000102   85..82       MOV     DPL,?V2
   \   000105   85..83       MOV     DPH,?V3
   \   000108   A3           INC     DPTR
   \   000109   E0           MOVX    A,@DPTR
   \   00010A   F8           MOV     R0,A
   \   00010B   7900         MOV     R1,#0x0
   \   00010D   E4           CLR     A
   \   00010E   C8           XCH     A,R0
   \   00010F   F9           MOV     R1,A
   \   000110   EA           MOV     A,R2
   \   000111   28           ADD     A,R0
   \   000112   F8           MOV     R0,A
   \   000113   EB           MOV     A,R3
   \   000114   39           ADDC    A,R1
   \   000115   F9           MOV     R1,A
   \   000116   EE           MOV     A,R6
   \   000117   240B         ADD     A,#0xb
   \   000119   F582         MOV     DPL,A
   \   00011B   E4           CLR     A
   \   00011C   3F           ADDC    A,R7
   \   00011D   F583         MOV     DPH,A
   \   00011F   E8           MOV     A,R0
   \   000120   F0           MOVX    @DPTR,A
   \   000121   A3           INC     DPTR
   \   000122   E9           MOV     A,R1
   \   000123   F0           MOVX    @DPTR,A
   3149                  msg += 2;
   \   000124   E5..         MOV     A,?V2
   \   000126   2402         ADD     A,#0x2
   \   000128   F5..         MOV     ?V2,A
   \   00012A   5002         JNC     ??ZDO_ParseMgmtBindRsp_4
   \   00012C   05..         INC     ?V3
   3150                }
   3151          
   3152                pList++;
   \                     ??ZDO_ParseMgmtBindRsp_4:
   \   00012E   EE           MOV     A,R6
   \   00012F   2415         ADD     A,#0x15
   \   000131   FE           MOV     R6,A
   \   000132   5001         JNC     ??ZDO_ParseMgmtBindRsp_5
   \   000134   0F           INC     R7
   \                     ??ZDO_ParseMgmtBindRsp_5:
   \   000135   05..         INC     ?V5
   \                     ??ZDO_ParseMgmtBindRsp_2:
   \   000137   E5..         MOV     A,?V5
   \   000139   C3           CLR     C
   \   00013A   95..         SUBB    A,?V4
   \   00013C   4003         JC      $+5
   \   00013E   02....       LJMP    ??ZDO_ParseMgmtBindRsp_1 & 0xFFFF
   \   000141                ; Setup parameters for call to function sAddrExtCpy
   \   000141   AC..         MOV     R4,?V2
   \   000143   AD..         MOV     R5,?V3
   \   000145   EE           MOV     A,R6
   \   000146   FA           MOV     R2,A
   \   000147   EF           MOV     A,R7
   \   000148   FB           MOV     R3,A
   \   000149   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00014C   E5..         MOV     A,?V2
   \   00014E   2408         ADD     A,#0x8
   \   000150   F5..         MOV     ?V2,A
   \   000152   5002         JNC     ??ZDO_ParseMgmtBindRsp_6
   \   000154   05..         INC     ?V3
   \                     ??ZDO_ParseMgmtBindRsp_6:
   \   000156   85..82       MOV     DPL,?V2
   \   000159   85..83       MOV     DPH,?V3
   \   00015C   E0           MOVX    A,@DPTR
   \   00015D   C0E0         PUSH    A
   \   00015F   8E82         MOV     DPL,R6
   \   000161   8F83         MOV     DPH,R7
   \   000163   A3           INC     DPTR
   \   000164   A3           INC     DPTR
   \   000165   A3           INC     DPTR
   \   000166   A3           INC     DPTR
   \   000167   A3           INC     DPTR
   \   000168   A3           INC     DPTR
   \   000169   A3           INC     DPTR
   \   00016A   A3           INC     DPTR
   \   00016B   D0E0         POP     A
   \   00016D   F0           MOVX    @DPTR,A
   \   00016E   85..82       MOV     DPL,?V2
   \   000171   85..83       MOV     DPH,?V3
   \   000174   A3           INC     DPTR
   \   000175   8582..       MOV     ?V2,DPL
   \   000178   8583..       MOV     ?V3,DPH
   \   00017B   85..82       MOV     DPL,?V2
   \   00017E   85..83       MOV     DPH,?V3
   \   000181   E0           MOVX    A,@DPTR
   \   000182   FA           MOV     R2,A
   \   000183   7B00         MOV     R3,#0x0
   \   000185   85..82       MOV     DPL,?V2
   \   000188   85..83       MOV     DPH,?V3
   \   00018B   A3           INC     DPTR
   \   00018C   E0           MOVX    A,@DPTR
   \   00018D   F8           MOV     R0,A
   \   00018E   7900         MOV     R1,#0x0
   \   000190   E4           CLR     A
   \   000191   C8           XCH     A,R0
   \   000192   F9           MOV     R1,A
   \   000193   EA           MOV     A,R2
   \   000194   28           ADD     A,R0
   \   000195   F8           MOV     R0,A
   \   000196   EB           MOV     A,R3
   \   000197   39           ADDC    A,R1
   \   000198   F9           MOV     R1,A
   \   000199   8E82         MOV     DPL,R6
   \   00019B   8F83         MOV     DPH,R7
   \   00019D   A3           INC     DPTR
   \   00019E   A3           INC     DPTR
   \   00019F   A3           INC     DPTR
   \   0001A0   A3           INC     DPTR
   \   0001A1   A3           INC     DPTR
   \   0001A2   A3           INC     DPTR
   \   0001A3   A3           INC     DPTR
   \   0001A4   A3           INC     DPTR
   \   0001A5   A3           INC     DPTR
   \   0001A6   E8           MOV     A,R0
   \   0001A7   F0           MOVX    @DPTR,A
   \   0001A8   A3           INC     DPTR
   \   0001A9   E9           MOV     A,R1
   \   0001AA   F0           MOVX    @DPTR,A
   \   0001AB   E5..         MOV     A,?V2
   \   0001AD   2402         ADD     A,#0x2
   \   0001AF   F5..         MOV     ?V2,A
   \   0001B1   5002         JNC     ??ZDO_ParseMgmtBindRsp_7
   \   0001B3   05..         INC     ?V3
   \                     ??ZDO_ParseMgmtBindRsp_7:
   \   0001B5   85..82       MOV     DPL,?V2
   \   0001B8   85..83       MOV     DPH,?V3
   \   0001BB   E0           MOVX    A,@DPTR
   \   0001BC   C0E0         PUSH    A
   \   0001BE   EE           MOV     A,R6
   \   0001BF   2413         ADD     A,#0x13
   \   0001C1   F582         MOV     DPL,A
   \   0001C3   E4           CLR     A
   \   0001C4   3F           ADDC    A,R7
   \   0001C5   F583         MOV     DPH,A
   \   0001C7   D0E0         POP     A
   \   0001C9   F0           MOVX    @DPTR,A
   \   0001CA   85..82       MOV     DPL,?V2
   \   0001CD   85..83       MOV     DPH,?V3
   \   0001D0   A3           INC     DPTR
   \   0001D1   8582..       MOV     ?V2,DPL
   \   0001D4   8583..       MOV     ?V3,DPH
   \   0001D7   EE           MOV     A,R6
   \   0001D8   2413         ADD     A,#0x13
   \   0001DA   F582         MOV     DPL,A
   \   0001DC   E4           CLR     A
   \   0001DD   3F           ADDC    A,R7
   \   0001DE   F583         MOV     DPH,A
   \   0001E0   E0           MOVX    A,@DPTR
   \   0001E1   6403         XRL     A,#0x3
   \   0001E3   6003         JZ      $+5
   \   0001E5   02....       LJMP    ??ZDO_ParseMgmtBindRsp_3 & 0xFFFF
   \   0001E8                ; Setup parameters for call to function sAddrExtCpy
   \   0001E8   AC..         MOV     R4,?V2
   \   0001EA   AD..         MOV     R5,?V3
   \   0001EC   EE           MOV     A,R6
   \   0001ED   240B         ADD     A,#0xb
   \   0001EF   FA           MOV     R2,A
   \   0001F0   E4           CLR     A
   \   0001F1   3F           ADDC    A,R7
   \   0001F2   FB           MOV     R3,A
   \   0001F3   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0001F6   E5..         MOV     A,?V2
   \   0001F8   2408         ADD     A,#0x8
   \   0001FA   F5..         MOV     ?V2,A
   \   0001FC   5002         JNC     ??ZDO_ParseMgmtBindRsp_8
   \   0001FE   05..         INC     ?V3
   \                     ??ZDO_ParseMgmtBindRsp_8:
   \   000200   85..82       MOV     DPL,?V2
   \   000203   85..83       MOV     DPH,?V3
   \   000206   E0           MOVX    A,@DPTR
   \   000207   C0E0         PUSH    A
   \   000209   EE           MOV     A,R6
   \   00020A   2414         ADD     A,#0x14
   \   00020C   F582         MOV     DPL,A
   \   00020E   E4           CLR     A
   \   00020F   3F           ADDC    A,R7
   \   000210   F583         MOV     DPH,A
   \   000212   D0E0         POP     A
   \   000214   F0           MOVX    @DPTR,A
   \   000215   85..82       MOV     DPL,?V2
   \   000218   85..83       MOV     DPH,?V3
   \   00021B   A3           INC     DPTR
   \   00021C   8582..       MOV     ?V2,DPL
   \   00021F   8583..       MOV     ?V3,DPH
   \   000222   02....       LJMP    ??ZDO_ParseMgmtBindRsp_4 & 0xFFFF
   3153              }
   3154            }
   3155          
   3156            return ( pRsp );
   \                     ??ZDO_ParseMgmtBindRsp_1:
   \   000225   AA..         MOV     R2,?V0
   \   000227   AB..         MOV     R3,?V1
   \   000229   7F0A         MOV     R7,#0xa
   \   00022B   02....       LJMP    ?BANKED_LEAVE_XDATA
   3157          }
   3158          
   3159          /*********************************************************************
   3160           * @fn          ZDO_ParseUserDescRsp
   3161           *
   3162           * @brief       This function parses the incoming User
   3163           *              Descriptor Response.
   3164           *
   3165           * @param       inMsg - incoming response message
   3166           *
   3167           * @return      a pointer to parsed response structure (NULL if not allocated).
   3168           *          This structure was allocated using osal_mem_alloc, so it must be freed
   3169           *          by the calling function [osal_mem_free()].
   3170           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3171          ZDO_UserDescRsp_t *ZDO_ParseUserDescRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseUserDescRsp:
   3172          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   3173            ZDO_UserDescRsp_t *pRsp;
   3174            uint8 *msg;
   3175            uint8 descLen = 0;
   \   000005   75..00       MOV     ?V2,#0x0
   3176          
   3177            msg = inMsg->asdu;
   \   000008   EA           MOV     A,R2
   \   000009   2413         ADD     A,#0x13
   \   00000B   F582         MOV     DPL,A
   \   00000D   E4           CLR     A
   \   00000E   3B           ADDC    A,R3
   \   00000F   F583         MOV     DPH,A
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F8           MOV     R0,A
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F9           MOV     R1,A
   \   000016   88..         MOV     ?V0,R0
   \   000018   89..         MOV     ?V1,R1
   3178          
   3179            if ( msg[0] == ZSuccess )
   \   00001A   85..82       MOV     DPL,?V0
   \   00001D   85..83       MOV     DPH,?V1
   \   000020   E0           MOVX    A,@DPTR
   \   000021   700C         JNZ     ??ZDO_ParseUserDescRsp_0
   3180            {
   3181              descLen = msg[3];
   \   000023   85..82       MOV     DPL,?V0
   \   000026   85..83       MOV     DPH,?V1
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F5..         MOV     ?V2,A
   3182            }
   3183          
   3184            pRsp = (ZDO_UserDescRsp_t *)osal_mem_alloc( sizeof ( ZDO_UserDescRsp_t ) + descLen );
   \                     ??ZDO_ParseUserDescRsp_0:
   \   00002F                ; Setup parameters for call to function osal_mem_alloc
   \   00002F   A8..         MOV     R0,?V2
   \   000031   7900         MOV     R1,#0x0
   \   000033   E8           MOV     A,R0
   \   000034   2404         ADD     A,#0x4
   \   000036   FA           MOV     R2,A
   \   000037   E4           CLR     A
   \   000038   39           ADDC    A,R1
   \   000039   FB           MOV     R3,A
   \   00003A   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00003D   8A..         MOV     ?V4,R2
   \   00003F   8B..         MOV     ?V5,R3
   \   000041   AE..         MOV     R6,?V4
   \   000043   AF..         MOV     R7,?V5
   3185            if ( pRsp )
   \   000045   EE           MOV     A,R6
   \   000046   4F           ORL     A,R7
   \   000047   6077         JZ      ??ZDO_ParseUserDescRsp_1
   3186            {
   3187              pRsp->status = msg[0];
   \   000049   85..82       MOV     DPL,?V0
   \   00004C   85..83       MOV     DPH,?V1
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   C0E0         PUSH    A
   \   000052   8E82         MOV     DPL,R6
   \   000054   8F83         MOV     DPH,R7
   \   000056   D0E0         POP     A
   \   000058   F0           MOVX    @DPTR,A
   3188              pRsp->nwkAddr = BUILD_UINT16( msg[1], msg[2] );
   \   000059   85..82       MOV     DPL,?V0
   \   00005C   85..83       MOV     DPH,?V1
   \   00005F   A3           INC     DPTR
   \   000060   E0           MOVX    A,@DPTR
   \   000061   FA           MOV     R2,A
   \   000062   7B00         MOV     R3,#0x0
   \   000064   85..82       MOV     DPL,?V0
   \   000067   85..83       MOV     DPH,?V1
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   F8           MOV     R0,A
   \   00006E   7900         MOV     R1,#0x0
   \   000070   E4           CLR     A
   \   000071   C8           XCH     A,R0
   \   000072   F9           MOV     R1,A
   \   000073   EA           MOV     A,R2
   \   000074   28           ADD     A,R0
   \   000075   F8           MOV     R0,A
   \   000076   EB           MOV     A,R3
   \   000077   39           ADDC    A,R1
   \   000078   F9           MOV     R1,A
   \   000079   8E82         MOV     DPL,R6
   \   00007B   8F83         MOV     DPH,R7
   \   00007D   A3           INC     DPTR
   \   00007E   E8           MOV     A,R0
   \   00007F   F0           MOVX    @DPTR,A
   \   000080   A3           INC     DPTR
   \   000081   E9           MOV     A,R1
   \   000082   F0           MOVX    @DPTR,A
   3189              pRsp->length = descLen;
   \   000083   E5..         MOV     A,?V2
   \   000085   C0E0         PUSH    A
   \   000087   8E82         MOV     DPL,R6
   \   000089   8F83         MOV     DPH,R7
   \   00008B   A3           INC     DPTR
   \   00008C   A3           INC     DPTR
   \   00008D   A3           INC     DPTR
   \   00008E   D0E0         POP     A
   \   000090   F0           MOVX    @DPTR,A
   3190              if ( descLen )
   \   000091   E5..         MOV     A,?V2
   \   000093   602B         JZ      ??ZDO_ParseUserDescRsp_1
   3191              {
   3192                osal_memcpy( pRsp->desc, &msg[4], descLen );
   \   000095                ; Setup parameters for call to function osal_memcpy
   \   000095   E5..         MOV     A,?V0
   \   000097   2404         ADD     A,#0x4
   \   000099   F5..         MOV     ?V0,A
   \   00009B   5002         JNC     ??ZDO_ParseUserDescRsp_2
   \   00009D   05..         INC     ?V1
   \                     ??ZDO_ParseUserDescRsp_2:
   \   00009F   85....       MOV     ?V4,?V0
   \   0000A2   85....       MOV     ?V5,?V1
   \   0000A5   75..00       MOV     ?V6,#0x0
   \   0000A8   78..         MOV     R0,#?V4
   \   0000AA   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000AD   AC..         MOV     R4,?V2
   \   0000AF   7D00         MOV     R5,#0x0
   \   0000B1   EE           MOV     A,R6
   \   0000B2   2404         ADD     A,#0x4
   \   0000B4   FA           MOV     R2,A
   \   0000B5   E4           CLR     A
   \   0000B6   3F           ADDC    A,R7
   \   0000B7   FB           MOV     R3,A
   \   0000B8   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000BB   7403         MOV     A,#0x3
   \   0000BD   12....       LCALL   ?DEALLOC_XSTACK8
   3193              }
   3194            }
   3195          
   3196            return ( pRsp );
   \                     ??ZDO_ParseUserDescRsp_1:
   \   0000C0   EE           MOV     A,R6
   \   0000C1   FA           MOV     R2,A
   \   0000C2   EF           MOV     A,R7
   \   0000C3   FB           MOV     R3,A
   \   0000C4   7F07         MOV     R7,#0x7
   \   0000C6   02....       LJMP    ?BANKED_LEAVE_XDATA
   3197          }
   3198          
   3199          /*********************************************************************
   3200           * @fn          ZDO_ParseSimpleDescBuf
   3201           *
   3202           * @brief       Parse a byte sequence representation of a Simple Descriptor.
   3203           *
   3204           * @param       buf  - pointer to a byte array representing a Simple Desc.
   3205           * @param       desc - SimpleDescriptionFormat_t *
   3206           *
   3207           *              This routine allocates storage for the cluster IDs because
   3208           *              they are 16-bit and need to be aligned to be properly processed.
   3209           *              This routine returns non-zero if an allocation fails.
   3210           *
   3211           *              NOTE: This means that the caller or user of the input structure
   3212           *                    is responsible for freeing the memory
   3213           *
   3214           * @return      0: success
   3215           *              1: failure due to malloc failure.
   3216           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3217          uint8 ZDO_ParseSimpleDescBuf( uint8 *buf, SimpleDescriptionFormat_t *desc )
   \                     ZDO_ParseSimpleDescBuf:
   3218          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
   3219            uint8 num, i;
   3220          
   3221            desc->EndPoint = *buf++;
   \   00000D   8E82         MOV     DPL,R6
   \   00000F   8F83         MOV     DPH,R7
   \   000011   E0           MOVX    A,@DPTR
   \   000012   C0E0         PUSH    A
   \   000014   85..82       MOV     DPL,?V0
   \   000017   85..83       MOV     DPH,?V1
   \   00001A   D0E0         POP     A
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   8E82         MOV     DPL,R6
   \   00001F   8F83         MOV     DPH,R7
   \   000021   A3           INC     DPTR
   \   000022   AE82         MOV     R6,DPL
   \   000024   AF83         MOV     R7,DPH
   3222            desc->AppProfId = BUILD_UINT16( buf[0], buf[1] );
   \   000026   8E82         MOV     DPL,R6
   \   000028   8F83         MOV     DPH,R7
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   FA           MOV     R2,A
   \   00002C   7B00         MOV     R3,#0x0
   \   00002E   8E82         MOV     DPL,R6
   \   000030   8F83         MOV     DPH,R7
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F8           MOV     R0,A
   \   000035   7900         MOV     R1,#0x0
   \   000037   E4           CLR     A
   \   000038   C8           XCH     A,R0
   \   000039   F9           MOV     R1,A
   \   00003A   EA           MOV     A,R2
   \   00003B   28           ADD     A,R0
   \   00003C   F8           MOV     R0,A
   \   00003D   EB           MOV     A,R3
   \   00003E   39           ADDC    A,R1
   \   00003F   F9           MOV     R1,A
   \   000040   85..82       MOV     DPL,?V0
   \   000043   85..83       MOV     DPH,?V1
   \   000046   A3           INC     DPTR
   \   000047   E8           MOV     A,R0
   \   000048   F0           MOVX    @DPTR,A
   \   000049   A3           INC     DPTR
   \   00004A   E9           MOV     A,R1
   \   00004B   F0           MOVX    @DPTR,A
   3223            buf += 2;
   \   00004C   EE           MOV     A,R6
   \   00004D   2402         ADD     A,#0x2
   \   00004F   FE           MOV     R6,A
   \   000050   5001         JNC     ??ZDO_ParseSimpleDescBuf_0
   \   000052   0F           INC     R7
   3224            desc->AppDeviceId = BUILD_UINT16( buf[0], buf[1] );
   \                     ??ZDO_ParseSimpleDescBuf_0:
   \   000053   8E82         MOV     DPL,R6
   \   000055   8F83         MOV     DPH,R7
   \   000057   E0           MOVX    A,@DPTR
   \   000058   FA           MOV     R2,A
   \   000059   7B00         MOV     R3,#0x0
   \   00005B   8E82         MOV     DPL,R6
   \   00005D   8F83         MOV     DPH,R7
   \   00005F   A3           INC     DPTR
   \   000060   E0           MOVX    A,@DPTR
   \   000061   F8           MOV     R0,A
   \   000062   7900         MOV     R1,#0x0
   \   000064   E4           CLR     A
   \   000065   C8           XCH     A,R0
   \   000066   F9           MOV     R1,A
   \   000067   EA           MOV     A,R2
   \   000068   28           ADD     A,R0
   \   000069   F8           MOV     R0,A
   \   00006A   EB           MOV     A,R3
   \   00006B   39           ADDC    A,R1
   \   00006C   F9           MOV     R1,A
   \   00006D   85..82       MOV     DPL,?V0
   \   000070   85..83       MOV     DPH,?V1
   \   000073   A3           INC     DPTR
   \   000074   A3           INC     DPTR
   \   000075   A3           INC     DPTR
   \   000076   E8           MOV     A,R0
   \   000077   F0           MOVX    @DPTR,A
   \   000078   A3           INC     DPTR
   \   000079   E9           MOV     A,R1
   \   00007A   F0           MOVX    @DPTR,A
   3225            buf += 2;
   \   00007B   EE           MOV     A,R6
   \   00007C   2402         ADD     A,#0x2
   \   00007E   FE           MOV     R6,A
   \   00007F   5001         JNC     ??ZDO_ParseSimpleDescBuf_1
   \   000081   0F           INC     R7
   3226            desc->AppDevVer = *buf >> 4;
   \                     ??ZDO_ParseSimpleDescBuf_1:
   \   000082   8E82         MOV     DPL,R6
   \   000084   8F83         MOV     DPH,R7
   \   000086   E0           MOVX    A,@DPTR
   \   000087   C4           SWAP    A
   \   000088   540F         ANL     A,#0xf
   \   00008A   F8           MOV     R0,A
   \   00008B   85..82       MOV     DPL,?V0
   \   00008E   85..83       MOV     DPH,?V1
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   E0           MOVX    A,@DPTR
   \   000097   54F0         ANL     A,#0xf0
   \   000099   F0           MOVX    @DPTR,A
   \   00009A   740F         MOV     A,#0xf
   \   00009C   58           ANL     A,R0
   \   00009D   F8           MOV     R0,A
   \   00009E   85..82       MOV     DPL,?V0
   \   0000A1   85..83       MOV     DPH,?V1
   \   0000A4   A3           INC     DPTR
   \   0000A5   A3           INC     DPTR
   \   0000A6   A3           INC     DPTR
   \   0000A7   A3           INC     DPTR
   \   0000A8   A3           INC     DPTR
   \   0000A9   E0           MOVX    A,@DPTR
   \   0000AA   48           ORL     A,R0
   \   0000AB   F0           MOVX    @DPTR,A
   3227          
   3228            desc->Reserved = 0;
   \   0000AC   85..82       MOV     DPL,?V0
   \   0000AF   85..83       MOV     DPH,?V1
   \   0000B2   A3           INC     DPTR
   \   0000B3   A3           INC     DPTR
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   E0           MOVX    A,@DPTR
   \   0000B8   540F         ANL     A,#0xf
   \   0000BA   F0           MOVX    @DPTR,A
   3229            buf++;
   \   0000BB   8E82         MOV     DPL,R6
   \   0000BD   8F83         MOV     DPH,R7
   \   0000BF   A3           INC     DPTR
   \   0000C0   AE82         MOV     R6,DPL
   \   0000C2   AF83         MOV     R7,DPH
   3230          
   3231            // move in input cluster list (if any). allocate aligned memory.
   3232            num = desc->AppNumInClusters = *buf++;
   \   0000C4   8E82         MOV     DPL,R6
   \   0000C6   8F83         MOV     DPH,R7
   \   0000C8   E0           MOVX    A,@DPTR
   \   0000C9   F8           MOV     R0,A
   \   0000CA   8E82         MOV     DPL,R6
   \   0000CC   8F83         MOV     DPH,R7
   \   0000CE   A3           INC     DPTR
   \   0000CF   AE82         MOV     R6,DPL
   \   0000D1   AF83         MOV     R7,DPH
   \   0000D3   E8           MOV     A,R0
   \   0000D4   C0E0         PUSH    A
   \   0000D6   85..82       MOV     DPL,?V0
   \   0000D9   85..83       MOV     DPH,?V1
   \   0000DC   A3           INC     DPTR
   \   0000DD   A3           INC     DPTR
   \   0000DE   A3           INC     DPTR
   \   0000DF   A3           INC     DPTR
   \   0000E0   A3           INC     DPTR
   \   0000E1   A3           INC     DPTR
   \   0000E2   D0E0         POP     A
   \   0000E4   F0           MOVX    @DPTR,A
   \   0000E5   88..         MOV     ?V2,R0
   3233            if ( num )
   \   0000E7   E5..         MOV     A,?V2
   \   0000E9   7003         JNZ     $+5
   \   0000EB   02....       LJMP    ??ZDO_ParseSimpleDescBuf_2 & 0xFFFF
   3234            {
   3235              if (!(desc->pAppInClusterList = (uint16 *)osal_mem_alloc(num*sizeof(uint16))))
   \   0000EE                ; Setup parameters for call to function osal_mem_alloc
   \   0000EE   AA..         MOV     R2,?V2
   \   0000F0   7B00         MOV     R3,#0x0
   \   0000F2   EA           MOV     A,R2
   \   0000F3   75F002       MOV     B,#0x2
   \   0000F6   A4           MUL     AB
   \   0000F7   CA           XCH     A,R2
   \   0000F8   A8F0         MOV     R0,B
   \   0000FA   75F000       MOV     B,#0x0
   \   0000FD   A4           MUL     AB
   \   0000FE   28           ADD     A,R0
   \   0000FF   F8           MOV     R0,A
   \   000100   75F002       MOV     B,#0x2
   \   000103   EB           MOV     A,R3
   \   000104   A4           MUL     AB
   \   000105   28           ADD     A,R0
   \   000106   FB           MOV     R3,A
   \   000107   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00010A   85..82       MOV     DPL,?V0
   \   00010D   85..83       MOV     DPH,?V1
   \   000110   A3           INC     DPTR
   \   000111   A3           INC     DPTR
   \   000112   A3           INC     DPTR
   \   000113   A3           INC     DPTR
   \   000114   A3           INC     DPTR
   \   000115   A3           INC     DPTR
   \   000116   A3           INC     DPTR
   \   000117   EA           MOV     A,R2
   \   000118   F0           MOVX    @DPTR,A
   \   000119   A3           INC     DPTR
   \   00011A   EB           MOV     A,R3
   \   00011B   F0           MOVX    @DPTR,A
   \   00011C   85..82       MOV     DPL,?V0
   \   00011F   85..83       MOV     DPH,?V1
   \   000122   A3           INC     DPTR
   \   000123   A3           INC     DPTR
   \   000124   A3           INC     DPTR
   \   000125   A3           INC     DPTR
   \   000126   A3           INC     DPTR
   \   000127   A3           INC     DPTR
   \   000128   A3           INC     DPTR
   \   000129   E0           MOVX    A,@DPTR
   \   00012A   F8           MOV     R0,A
   \   00012B   A3           INC     DPTR
   \   00012C   E0           MOVX    A,@DPTR
   \   00012D   F9           MOV     R1,A
   \   00012E   E8           MOV     A,R0
   \   00012F   49           ORL     A,R1
   \   000130   7005         JNZ     ??ZDO_ParseSimpleDescBuf_3
   3236              {
   3237                // malloc failed. we're done.
   3238                return 1;
   \   000132   7901         MOV     R1,#0x1
   \   000134   02....       LJMP    ??ZDO_ParseSimpleDescBuf_4 & 0xFFFF
   3239              }
   3240              for (i=0; i<num; ++i)
   \                     ??ZDO_ParseSimpleDescBuf_3:
   \   000137   7A00         MOV     R2,#0x0
   \   000139   8057         SJMP    ??ZDO_ParseSimpleDescBuf_5
   3241              {
   3242                desc->pAppInClusterList[i] = BUILD_UINT16( buf[0], buf[1] );
   \                     ??ZDO_ParseSimpleDescBuf_6:
   \   00013B   8E82         MOV     DPL,R6
   \   00013D   8F83         MOV     DPH,R7
   \   00013F   E0           MOVX    A,@DPTR
   \   000140   FC           MOV     R4,A
   \   000141   7D00         MOV     R5,#0x0
   \   000143   8E82         MOV     DPL,R6
   \   000145   8F83         MOV     DPH,R7
   \   000147   A3           INC     DPTR
   \   000148   E0           MOVX    A,@DPTR
   \   000149   F8           MOV     R0,A
   \   00014A   7900         MOV     R1,#0x0
   \   00014C   E4           CLR     A
   \   00014D   C8           XCH     A,R0
   \   00014E   F9           MOV     R1,A
   \   00014F   EC           MOV     A,R4
   \   000150   28           ADD     A,R0
   \   000151   FC           MOV     R4,A
   \   000152   ED           MOV     A,R5
   \   000153   39           ADDC    A,R1
   \   000154   FD           MOV     R5,A
   \   000155   EA           MOV     A,R2
   \   000156   F8           MOV     R0,A
   \   000157   7900         MOV     R1,#0x0
   \   000159   E8           MOV     A,R0
   \   00015A   75F002       MOV     B,#0x2
   \   00015D   A4           MUL     AB
   \   00015E   C8           XCH     A,R0
   \   00015F   ABF0         MOV     R3,B
   \   000161   75F000       MOV     B,#0x0
   \   000164   A4           MUL     AB
   \   000165   2B           ADD     A,R3
   \   000166   FB           MOV     R3,A
   \   000167   75F002       MOV     B,#0x2
   \   00016A   E9           MOV     A,R1
   \   00016B   A4           MUL     AB
   \   00016C   2B           ADD     A,R3
   \   00016D   F9           MOV     R1,A
   \   00016E   85..82       MOV     DPL,?V0
   \   000171   85..83       MOV     DPH,?V1
   \   000174   A3           INC     DPTR
   \   000175   A3           INC     DPTR
   \   000176   A3           INC     DPTR
   \   000177   A3           INC     DPTR
   \   000178   A3           INC     DPTR
   \   000179   A3           INC     DPTR
   \   00017A   A3           INC     DPTR
   \   00017B   E0           MOVX    A,@DPTR
   \   00017C   28           ADD     A,R0
   \   00017D   FB           MOV     R3,A
   \   00017E   A3           INC     DPTR
   \   00017F   E0           MOVX    A,@DPTR
   \   000180   39           ADDC    A,R1
   \   000181   8B82         MOV     DPL,R3
   \   000183   F583         MOV     DPH,A
   \   000185   EC           MOV     A,R4
   \   000186   F0           MOVX    @DPTR,A
   \   000187   A3           INC     DPTR
   \   000188   ED           MOV     A,R5
   \   000189   F0           MOVX    @DPTR,A
   3243                buf += 2;
   \   00018A   EE           MOV     A,R6
   \   00018B   2402         ADD     A,#0x2
   \   00018D   FE           MOV     R6,A
   \   00018E   5001         JNC     ??ZDO_ParseSimpleDescBuf_7
   \   000190   0F           INC     R7
   3244              }
   \                     ??ZDO_ParseSimpleDescBuf_7:
   \   000191   0A           INC     R2
   \                     ??ZDO_ParseSimpleDescBuf_5:
   \   000192   EA           MOV     A,R2
   \   000193   C3           CLR     C
   \   000194   95..         SUBB    A,?V2
   \   000196   40A3         JC      ??ZDO_ParseSimpleDescBuf_6
   3245            }
   3246          
   3247            // move in output cluster list (if any). allocate aligned memory.
   3248            num = desc->AppNumOutClusters = *buf++;
   \                     ??ZDO_ParseSimpleDescBuf_2:
   \   000198   8E82         MOV     DPL,R6
   \   00019A   8F83         MOV     DPH,R7
   \   00019C   E0           MOVX    A,@DPTR
   \   00019D   F8           MOV     R0,A
   \   00019E   8E82         MOV     DPL,R6
   \   0001A0   8F83         MOV     DPH,R7
   \   0001A2   A3           INC     DPTR
   \   0001A3   AE82         MOV     R6,DPL
   \   0001A5   AF83         MOV     R7,DPH
   \   0001A7   E8           MOV     A,R0
   \   0001A8   C0E0         PUSH    A
   \   0001AA   85..82       MOV     DPL,?V0
   \   0001AD   85..83       MOV     DPH,?V1
   \   0001B0   A3           INC     DPTR
   \   0001B1   A3           INC     DPTR
   \   0001B2   A3           INC     DPTR
   \   0001B3   A3           INC     DPTR
   \   0001B4   A3           INC     DPTR
   \   0001B5   A3           INC     DPTR
   \   0001B6   A3           INC     DPTR
   \   0001B7   A3           INC     DPTR
   \   0001B8   A3           INC     DPTR
   \   0001B9   D0E0         POP     A
   \   0001BB   F0           MOVX    @DPTR,A
   \   0001BC   88..         MOV     ?V2,R0
   3249            if (num)
   \   0001BE   E5..         MOV     A,?V2
   \   0001C0   7003         JNZ     $+5
   \   0001C2   02....       LJMP    ??ZDO_ParseSimpleDescBuf_8 & 0xFFFF
   3250            {
   3251              if (!(desc->pAppOutClusterList = (uint16 *)osal_mem_alloc(num*sizeof(uint16))))
   \   0001C5                ; Setup parameters for call to function osal_mem_alloc
   \   0001C5   AA..         MOV     R2,?V2
   \   0001C7   7B00         MOV     R3,#0x0
   \   0001C9   EA           MOV     A,R2
   \   0001CA   75F002       MOV     B,#0x2
   \   0001CD   A4           MUL     AB
   \   0001CE   CA           XCH     A,R2
   \   0001CF   A8F0         MOV     R0,B
   \   0001D1   75F000       MOV     B,#0x0
   \   0001D4   A4           MUL     AB
   \   0001D5   28           ADD     A,R0
   \   0001D6   F8           MOV     R0,A
   \   0001D7   75F002       MOV     B,#0x2
   \   0001DA   EB           MOV     A,R3
   \   0001DB   A4           MUL     AB
   \   0001DC   28           ADD     A,R0
   \   0001DD   FB           MOV     R3,A
   \   0001DE   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0001E1   85..82       MOV     DPL,?V0
   \   0001E4   85..83       MOV     DPH,?V1
   \   0001E7   A3           INC     DPTR
   \   0001E8   A3           INC     DPTR
   \   0001E9   A3           INC     DPTR
   \   0001EA   A3           INC     DPTR
   \   0001EB   A3           INC     DPTR
   \   0001EC   A3           INC     DPTR
   \   0001ED   A3           INC     DPTR
   \   0001EE   A3           INC     DPTR
   \   0001EF   A3           INC     DPTR
   \   0001F0   A3           INC     DPTR
   \   0001F1   EA           MOV     A,R2
   \   0001F2   F0           MOVX    @DPTR,A
   \   0001F3   A3           INC     DPTR
   \   0001F4   EB           MOV     A,R3
   \   0001F5   F0           MOVX    @DPTR,A
   \   0001F6   85..82       MOV     DPL,?V0
   \   0001F9   85..83       MOV     DPH,?V1
   \   0001FC   A3           INC     DPTR
   \   0001FD   A3           INC     DPTR
   \   0001FE   A3           INC     DPTR
   \   0001FF   A3           INC     DPTR
   \   000200   A3           INC     DPTR
   \   000201   A3           INC     DPTR
   \   000202   A3           INC     DPTR
   \   000203   A3           INC     DPTR
   \   000204   A3           INC     DPTR
   \   000205   A3           INC     DPTR
   \   000206   E0           MOVX    A,@DPTR
   \   000207   F8           MOV     R0,A
   \   000208   A3           INC     DPTR
   \   000209   E0           MOVX    A,@DPTR
   \   00020A   F9           MOV     R1,A
   \   00020B   E8           MOV     A,R0
   \   00020C   49           ORL     A,R1
   \   00020D   7043         JNZ     ??ZDO_ParseSimpleDescBuf_9
   3252              {
   3253                // malloc failed. free input cluster list memory if there is any
   3254                if ( desc->pAppInClusterList != NULL )
   \   00020F   85..82       MOV     DPL,?V0
   \   000212   85..83       MOV     DPH,?V1
   \   000215   A3           INC     DPTR
   \   000216   A3           INC     DPTR
   \   000217   A3           INC     DPTR
   \   000218   A3           INC     DPTR
   \   000219   A3           INC     DPTR
   \   00021A   A3           INC     DPTR
   \   00021B   A3           INC     DPTR
   \   00021C   E0           MOVX    A,@DPTR
   \   00021D   F8           MOV     R0,A
   \   00021E   A3           INC     DPTR
   \   00021F   E0           MOVX    A,@DPTR
   \   000220   F9           MOV     R1,A
   \   000221   E8           MOV     A,R0
   \   000222   49           ORL     A,R1
   \   000223   6029         JZ      ??ZDO_ParseSimpleDescBuf_10
   3255                {
   3256                  osal_mem_free(desc->pAppInClusterList);
   \   000225                ; Setup parameters for call to function osal_mem_free
   \   000225   85..82       MOV     DPL,?V0
   \   000228   85..83       MOV     DPH,?V1
   \   00022B   A3           INC     DPTR
   \   00022C   A3           INC     DPTR
   \   00022D   A3           INC     DPTR
   \   00022E   A3           INC     DPTR
   \   00022F   A3           INC     DPTR
   \   000230   A3           INC     DPTR
   \   000231   A3           INC     DPTR
   \   000232   E0           MOVX    A,@DPTR
   \   000233   FA           MOV     R2,A
   \   000234   A3           INC     DPTR
   \   000235   E0           MOVX    A,@DPTR
   \   000236   FB           MOV     R3,A
   \   000237   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   3257          
   3258                  desc->pAppInClusterList = NULL;
   \   00023A   85..82       MOV     DPL,?V0
   \   00023D   85..83       MOV     DPH,?V1
   \   000240   A3           INC     DPTR
   \   000241   A3           INC     DPTR
   \   000242   A3           INC     DPTR
   \   000243   A3           INC     DPTR
   \   000244   A3           INC     DPTR
   \   000245   A3           INC     DPTR
   \   000246   A3           INC     DPTR
   \   000247   7400         MOV     A,#0x0
   \   000249   F0           MOVX    @DPTR,A
   \   00024A   A3           INC     DPTR
   \   00024B   7400         MOV     A,#0x0
   \   00024D   F0           MOVX    @DPTR,A
   3259                }
   3260                return 1;
   \                     ??ZDO_ParseSimpleDescBuf_10:
   \   00024E   7901         MOV     R1,#0x1
   \   000250   8066         SJMP    ??ZDO_ParseSimpleDescBuf_4
   3261              }
   3262              for (i=0; i<num; ++i)
   \                     ??ZDO_ParseSimpleDescBuf_9:
   \   000252   7A00         MOV     R2,#0x0
   \   000254   805A         SJMP    ??ZDO_ParseSimpleDescBuf_11
   3263              {
   3264                desc->pAppOutClusterList[i] = BUILD_UINT16( buf[0], buf[1] );
   \                     ??ZDO_ParseSimpleDescBuf_12:
   \   000256   8E82         MOV     DPL,R6
   \   000258   8F83         MOV     DPH,R7
   \   00025A   E0           MOVX    A,@DPTR
   \   00025B   FC           MOV     R4,A
   \   00025C   7D00         MOV     R5,#0x0
   \   00025E   8E82         MOV     DPL,R6
   \   000260   8F83         MOV     DPH,R7
   \   000262   A3           INC     DPTR
   \   000263   E0           MOVX    A,@DPTR
   \   000264   F8           MOV     R0,A
   \   000265   7900         MOV     R1,#0x0
   \   000267   E4           CLR     A
   \   000268   C8           XCH     A,R0
   \   000269   F9           MOV     R1,A
   \   00026A   EC           MOV     A,R4
   \   00026B   28           ADD     A,R0
   \   00026C   FC           MOV     R4,A
   \   00026D   ED           MOV     A,R5
   \   00026E   39           ADDC    A,R1
   \   00026F   FD           MOV     R5,A
   \   000270   EA           MOV     A,R2
   \   000271   F8           MOV     R0,A
   \   000272   7900         MOV     R1,#0x0
   \   000274   E8           MOV     A,R0
   \   000275   75F002       MOV     B,#0x2
   \   000278   A4           MUL     AB
   \   000279   C8           XCH     A,R0
   \   00027A   ABF0         MOV     R3,B
   \   00027C   75F000       MOV     B,#0x0
   \   00027F   A4           MUL     AB
   \   000280   2B           ADD     A,R3
   \   000281   FB           MOV     R3,A
   \   000282   75F002       MOV     B,#0x2
   \   000285   E9           MOV     A,R1
   \   000286   A4           MUL     AB
   \   000287   2B           ADD     A,R3
   \   000288   F9           MOV     R1,A
   \   000289   85..82       MOV     DPL,?V0
   \   00028C   85..83       MOV     DPH,?V1
   \   00028F   A3           INC     DPTR
   \   000290   A3           INC     DPTR
   \   000291   A3           INC     DPTR
   \   000292   A3           INC     DPTR
   \   000293   A3           INC     DPTR
   \   000294   A3           INC     DPTR
   \   000295   A3           INC     DPTR
   \   000296   A3           INC     DPTR
   \   000297   A3           INC     DPTR
   \   000298   A3           INC     DPTR
   \   000299   E0           MOVX    A,@DPTR
   \   00029A   28           ADD     A,R0
   \   00029B   FB           MOV     R3,A
   \   00029C   A3           INC     DPTR
   \   00029D   E0           MOVX    A,@DPTR
   \   00029E   39           ADDC    A,R1
   \   00029F   8B82         MOV     DPL,R3
   \   0002A1   F583         MOV     DPH,A
   \   0002A3   EC           MOV     A,R4
   \   0002A4   F0           MOVX    @DPTR,A
   \   0002A5   A3           INC     DPTR
   \   0002A6   ED           MOV     A,R5
   \   0002A7   F0           MOVX    @DPTR,A
   3265                buf += 2;
   \   0002A8   EE           MOV     A,R6
   \   0002A9   2402         ADD     A,#0x2
   \   0002AB   FE           MOV     R6,A
   \   0002AC   5001         JNC     ??ZDO_ParseSimpleDescBuf_13
   \   0002AE   0F           INC     R7
   3266              }
   \                     ??ZDO_ParseSimpleDescBuf_13:
   \   0002AF   0A           INC     R2
   \                     ??ZDO_ParseSimpleDescBuf_11:
   \   0002B0   EA           MOV     A,R2
   \   0002B1   C3           CLR     C
   \   0002B2   95..         SUBB    A,?V2
   \   0002B4   40A0         JC      ??ZDO_ParseSimpleDescBuf_12
   3267            }
   3268            return 0;
   \                     ??ZDO_ParseSimpleDescBuf_8:
   \   0002B6   7900         MOV     R1,#0x0
   \                     ??ZDO_ParseSimpleDescBuf_4:
   \   0002B8   7F03         MOV     R7,#0x3
   \   0002BA   02....       LJMP    ?BANKED_LEAVE_XDATA
   3269          }
   3270          
   3271          /*********************************************************************
   3272           * @fn          ZDO_ParseDeviceAnnce
   3273           *
   3274           * @brief       Parse a Device Announce message.
   3275           *
   3276           * @param       inMsg - Incoming message
   3277           * @param       pAnnce - place to put the parsed information
   3278           *
   3279           * @return      none
   3280           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3281          void ZDO_ParseDeviceAnnce( zdoIncomingMsg_t *inMsg, ZDO_DeviceAnnce_t *pAnnce )
   \                     ZDO_ParseDeviceAnnce:
   3282          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV     ?V0,R4
   \   000007   8D..         MOV     ?V1,R5
   3283            uint8 *msg;
   3284          
   3285            // Parse incoming message
   3286            msg = inMsg->asdu;
   \   000009   EA           MOV     A,R2
   \   00000A   2413         ADD     A,#0x13
   \   00000C   F582         MOV     DPL,A
   \   00000E   E4           CLR     A
   \   00000F   3B           ADDC    A,R3
   \   000010   F583         MOV     DPH,A
   \   000012   E0           MOVX    A,@DPTR
   \   000013   FE           MOV     R6,A
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   FF           MOV     R7,A
   3287            pAnnce->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \   000017   8E82         MOV     DPL,R6
   \   000019   8F83         MOV     DPH,R7
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   FA           MOV     R2,A
   \   00001D   7B00         MOV     R3,#0x0
   \   00001F   8E82         MOV     DPL,R6
   \   000021   8F83         MOV     DPH,R7
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F8           MOV     R0,A
   \   000026   7900         MOV     R1,#0x0
   \   000028   E4           CLR     A
   \   000029   C8           XCH     A,R0
   \   00002A   F9           MOV     R1,A
   \   00002B   EA           MOV     A,R2
   \   00002C   28           ADD     A,R0
   \   00002D   F8           MOV     R0,A
   \   00002E   EB           MOV     A,R3
   \   00002F   39           ADDC    A,R1
   \   000030   F9           MOV     R1,A
   \   000031   85..82       MOV     DPL,?V0
   \   000034   85..83       MOV     DPH,?V1
   \   000037   E8           MOV     A,R0
   \   000038   F0           MOVX    @DPTR,A
   \   000039   A3           INC     DPTR
   \   00003A   E9           MOV     A,R1
   \   00003B   F0           MOVX    @DPTR,A
   3288            msg += 2;
   \   00003C   EE           MOV     A,R6
   \   00003D   2402         ADD     A,#0x2
   \   00003F   FE           MOV     R6,A
   \   000040   5001         JNC     ??ZDO_ParseDeviceAnnce_0
   \   000042   0F           INC     R7
   3289            osal_cpyExtAddr( pAnnce->extAddr, msg );
   \                     ??ZDO_ParseDeviceAnnce_0:
   \   000043                ; Setup parameters for call to function sAddrExtCpy
   \   000043   EE           MOV     A,R6
   \   000044   FC           MOV     R4,A
   \   000045   EF           MOV     A,R7
   \   000046   FD           MOV     R5,A
   \   000047   E5..         MOV     A,?V0
   \   000049   2402         ADD     A,#0x2
   \   00004B   FA           MOV     R2,A
   \   00004C   E4           CLR     A
   \   00004D   35..         ADDC    A,?V1
   \   00004F   FB           MOV     R3,A
   \   000050   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   3290            msg += Z_EXTADDR_LEN;
   \   000053   EE           MOV     A,R6
   \   000054   2408         ADD     A,#0x8
   \   000056   FE           MOV     R6,A
   \   000057   5001         JNC     ??ZDO_ParseDeviceAnnce_1
   \   000059   0F           INC     R7
   3291            pAnnce->capabilities = *msg;
   \                     ??ZDO_ParseDeviceAnnce_1:
   \   00005A   8E82         MOV     DPL,R6
   \   00005C   8F83         MOV     DPH,R7
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   C0E0         PUSH    A
   \   000061   85..82       MOV     DPL,?V0
   \   000064   85..83       MOV     DPH,?V1
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   A3           INC     DPTR
   \   000070   A3           INC     DPTR
   \   000071   D0E0         POP     A
   \   000073   F0           MOVX    @DPTR,A
   3292          }
   \   000074   7F02         MOV     R7,#0x2
   \   000076   02....       LJMP    ?BANKED_LEAVE_XDATA
   3293          
   3294          /*********************************************************************
   3295           * @fn          ZDO_ParseMgmtNwkUpdateNotify
   3296           *
   3297           * @brief       This function handles parsing of the incoming Management
   3298           *              Network Update notify.
   3299           *
   3300           * @param       inMsg - incoming message (request)
   3301           *
   3302           * @return      a pointer to parsed response structure (NULL if not allocated).
   3303           *          This structure was allocated using osal_mem_alloc, so it must be freed
   3304           *          by the calling function [osal_mem_free()].
   3305           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3306          ZDO_MgmtNwkUpdateNotify_t *ZDO_ParseMgmtNwkUpdateNotify( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtNwkUpdateNotify:
   3307          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   3308            uint8 status;
   3309            uint32 scannedChannels = 0;
   \   000005   75..00       MOV     ?V4,#0x0
   \   000008   75..00       MOV     ?V5,#0x0
   \   00000B   75..00       MOV     ?V6,#0x0
   \   00000E   75..00       MOV     ?V7,#0x0
   3310            uint16 totalTransmissions = 0;
   \   000011   75..00       MOV     ?V0,#0x0
   \   000014   75..00       MOV     ?V1,#0x0
   3311            uint16 transmissionFailures = 0;
   \   000017   75..00       MOV     ?V2,#0x0
   \   00001A   75..00       MOV     ?V3,#0x0
   3312            uint8 listCount = 0;
   \   00001D   75..00       MOV     ?V11,#0x0
   3313            uint8 *msg = inMsg->asdu;
   \   000020   EA           MOV     A,R2
   \   000021   2413         ADD     A,#0x13
   \   000023   F582         MOV     DPL,A
   \   000025   E4           CLR     A
   \   000026   3B           ADDC    A,R3
   \   000027   F583         MOV     DPH,A
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   FE           MOV     R6,A
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   FF           MOV     R7,A
   3314            ZDO_MgmtNwkUpdateNotify_t *pRsp;
   3315          
   3316            status = *msg++;
   \   00002E   8E82         MOV     DPL,R6
   \   000030   8F83         MOV     DPH,R7
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F5..         MOV     ?V10,A
   \   000035   8E82         MOV     DPL,R6
   \   000037   8F83         MOV     DPH,R7
   \   000039   A3           INC     DPTR
   \   00003A   AE82         MOV     R6,DPL
   \   00003C   AF83         MOV     R7,DPH
   3317            if ( status == ZSuccess )
   \   00003E   E5..         MOV     A,?V10
   \   000040   706E         JNZ     ??ZDO_ParseMgmtNwkUpdateNotify_0
   3318            {
   3319              scannedChannels = osal_build_uint32( msg, 4 );
   \   000042                ; Setup parameters for call to function osal_build_uint32
   \   000042   7904         MOV     R1,#0x4
   \   000044   EE           MOV     A,R6
   \   000045   FA           MOV     R2,A
   \   000046   EF           MOV     A,R7
   \   000047   FB           MOV     R3,A
   \   000048   12....       LCALL   `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   00004B   8A..         MOV     ?V4,R2
   \   00004D   8B..         MOV     ?V5,R3
   \   00004F   8C..         MOV     ?V6,R4
   \   000051   8D..         MOV     ?V7,R5
   3320              msg += 4;
   \   000053   EE           MOV     A,R6
   \   000054   2404         ADD     A,#0x4
   \   000056   FE           MOV     R6,A
   \   000057   5001         JNC     ??ZDO_ParseMgmtNwkUpdateNotify_1
   \   000059   0F           INC     R7
   3321              totalTransmissions = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_1:
   \   00005A   8E82         MOV     DPL,R6
   \   00005C   8F83         MOV     DPH,R7
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   FA           MOV     R2,A
   \   000060   7B00         MOV     R3,#0x0
   \   000062   8E82         MOV     DPL,R6
   \   000064   8F83         MOV     DPH,R7
   \   000066   A3           INC     DPTR
   \   000067   E0           MOVX    A,@DPTR
   \   000068   F8           MOV     R0,A
   \   000069   7900         MOV     R1,#0x0
   \   00006B   E4           CLR     A
   \   00006C   C8           XCH     A,R0
   \   00006D   F9           MOV     R1,A
   \   00006E   EA           MOV     A,R2
   \   00006F   28           ADD     A,R0
   \   000070   F5..         MOV     ?V0,A
   \   000072   EB           MOV     A,R3
   \   000073   39           ADDC    A,R1
   \   000074   F5..         MOV     ?V1,A
   3322              msg += 2;
   \   000076   EE           MOV     A,R6
   \   000077   2402         ADD     A,#0x2
   \   000079   FE           MOV     R6,A
   \   00007A   5001         JNC     ??ZDO_ParseMgmtNwkUpdateNotify_2
   \   00007C   0F           INC     R7
   3323              transmissionFailures = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_2:
   \   00007D   8E82         MOV     DPL,R6
   \   00007F   8F83         MOV     DPH,R7
   \   000081   E0           MOVX    A,@DPTR
   \   000082   FA           MOV     R2,A
   \   000083   7B00         MOV     R3,#0x0
   \   000085   8E82         MOV     DPL,R6
   \   000087   8F83         MOV     DPH,R7
   \   000089   A3           INC     DPTR
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   F8           MOV     R0,A
   \   00008C   7900         MOV     R1,#0x0
   \   00008E   E4           CLR     A
   \   00008F   C8           XCH     A,R0
   \   000090   F9           MOV     R1,A
   \   000091   EA           MOV     A,R2
   \   000092   28           ADD     A,R0
   \   000093   F5..         MOV     ?V2,A
   \   000095   EB           MOV     A,R3
   \   000096   39           ADDC    A,R1
   \   000097   F5..         MOV     ?V3,A
   3324              msg += 2;
   \   000099   EE           MOV     A,R6
   \   00009A   2402         ADD     A,#0x2
   \   00009C   FE           MOV     R6,A
   \   00009D   5001         JNC     ??ZDO_ParseMgmtNwkUpdateNotify_3
   \   00009F   0F           INC     R7
   3325              listCount = *msg++;
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_3:
   \   0000A0   8E82         MOV     DPL,R6
   \   0000A2   8F83         MOV     DPH,R7
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   F5..         MOV     ?V11,A
   \   0000A7   8E82         MOV     DPL,R6
   \   0000A9   8F83         MOV     DPH,R7
   \   0000AB   A3           INC     DPTR
   \   0000AC   AE82         MOV     R6,DPL
   \   0000AE   AF83         MOV     R7,DPH
   3326            }
   3327          
   3328            pRsp = (ZDO_MgmtNwkUpdateNotify_t *)osal_mem_alloc( sizeof ( ZDO_MgmtNwkUpdateNotify_t ) + listCount );
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_0:
   \   0000B0                ; Setup parameters for call to function osal_mem_alloc
   \   0000B0   A8..         MOV     R0,?V11
   \   0000B2   7900         MOV     R1,#0x0
   \   0000B4   E8           MOV     A,R0
   \   0000B5   240A         ADD     A,#0xa
   \   0000B7   FA           MOV     R2,A
   \   0000B8   E4           CLR     A
   \   0000B9   39           ADDC    A,R1
   \   0000BA   FB           MOV     R3,A
   \   0000BB   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000BE   8A..         MOV     ?V12,R2
   \   0000C0   8B..         MOV     ?V13,R3
   \   0000C2   85....       MOV     ?V8,?V12
   \   0000C5   85....       MOV     ?V9,?V13
   3329          
   3330            if ( pRsp )
   \   0000C8   E5..         MOV     A,?V8
   \   0000CA   45..         ORL     A,?V9
   \   0000CC   607A         JZ      ??ZDO_ParseMgmtNwkUpdateNotify_4
   3331            {
   3332              pRsp->status = status;
   \   0000CE   E5..         MOV     A,?V10
   \   0000D0   C0E0         PUSH    A
   \   0000D2   85..82       MOV     DPL,?V8
   \   0000D5   85..83       MOV     DPH,?V9
   \   0000D8   D0E0         POP     A
   \   0000DA   F0           MOVX    @DPTR,A
   3333              pRsp->scannedChannels = scannedChannels;
   \   0000DB   85..82       MOV     DPL,?V8
   \   0000DE   85..83       MOV     DPH,?V9
   \   0000E1   A3           INC     DPTR
   \   0000E2   78..         MOV     R0,#?V4
   \   0000E4   12....       LCALL   ?L_MOV_TO_X
   3334              pRsp->totalTransmissions = totalTransmissions;
   \   0000E7   85..82       MOV     DPL,?V8
   \   0000EA   85..83       MOV     DPH,?V9
   \   0000ED   A3           INC     DPTR
   \   0000EE   A3           INC     DPTR
   \   0000EF   A3           INC     DPTR
   \   0000F0   A3           INC     DPTR
   \   0000F1   A3           INC     DPTR
   \   0000F2   E5..         MOV     A,?V0
   \   0000F4   F0           MOVX    @DPTR,A
   \   0000F5   A3           INC     DPTR
   \   0000F6   E5..         MOV     A,?V1
   \   0000F8   F0           MOVX    @DPTR,A
   3335              pRsp->transmissionFailures = transmissionFailures;
   \   0000F9   85..82       MOV     DPL,?V8
   \   0000FC   85..83       MOV     DPH,?V9
   \   0000FF   A3           INC     DPTR
   \   000100   A3           INC     DPTR
   \   000101   A3           INC     DPTR
   \   000102   A3           INC     DPTR
   \   000103   A3           INC     DPTR
   \   000104   A3           INC     DPTR
   \   000105   A3           INC     DPTR
   \   000106   E5..         MOV     A,?V2
   \   000108   F0           MOVX    @DPTR,A
   \   000109   A3           INC     DPTR
   \   00010A   E5..         MOV     A,?V3
   \   00010C   F0           MOVX    @DPTR,A
   3336              pRsp->listCount = listCount;
   \   00010D   E5..         MOV     A,?V11
   \   00010F   C0E0         PUSH    A
   \   000111   85..82       MOV     DPL,?V8
   \   000114   85..83       MOV     DPH,?V9
   \   000117   A3           INC     DPTR
   \   000118   A3           INC     DPTR
   \   000119   A3           INC     DPTR
   \   00011A   A3           INC     DPTR
   \   00011B   A3           INC     DPTR
   \   00011C   A3           INC     DPTR
   \   00011D   A3           INC     DPTR
   \   00011E   A3           INC     DPTR
   \   00011F   A3           INC     DPTR
   \   000120   D0E0         POP     A
   \   000122   F0           MOVX    @DPTR,A
   3337          
   3338              // Allocate a buffer big enough to handle the list.
   3339              if ( listCount > 0 )
   \   000123   E5..         MOV     A,?V11
   \   000125   6021         JZ      ??ZDO_ParseMgmtNwkUpdateNotify_4
   3340              {
   3341                osal_memcpy( pRsp->energyValues, msg, listCount );
   \   000127                ; Setup parameters for call to function osal_memcpy
   \   000127   8E..         MOV     ?V0,R6
   \   000129   8F..         MOV     ?V1,R7
   \   00012B   75..00       MOV     ?V2,#0x0
   \   00012E   78..         MOV     R0,#?V0
   \   000130   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000133   AC..         MOV     R4,?V11
   \   000135   7D00         MOV     R5,#0x0
   \   000137   E5..         MOV     A,?V8
   \   000139   240A         ADD     A,#0xa
   \   00013B   FA           MOV     R2,A
   \   00013C   E4           CLR     A
   \   00013D   35..         ADDC    A,?V9
   \   00013F   FB           MOV     R3,A
   \   000140   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000143   7403         MOV     A,#0x3
   \   000145   12....       LCALL   ?DEALLOC_XSTACK8
   3342              }
   3343            }
   3344          
   3345            return ( pRsp );
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_4:
   \   000148   AA..         MOV     R2,?V8
   \   00014A   AB..         MOV     R3,?V9
   \   00014C   7F0E         MOV     R7,#0xe
   \   00014E   02....       LJMP    ?BANKED_LEAVE_XDATA
   3346          }
   3347          
   3348          /*********************************************************************
   3349           * @fn          ZDO_ParseMgmtNwkUpdateReq
   3350           *
   3351           * @brief       This function handles parsing the incoming Management
   3352           *              Network Update request and starts the request (if needed).
   3353           *
   3354           * @param       inMsg - incoming message (request)
   3355           * @param       pReq - pointer to place to parse message to
   3356           *
   3357           * @return      none
   3358           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3359          void ZDO_ParseMgmtNwkUpdateReq( zdoIncomingMsg_t *inMsg, ZDO_MgmtNwkUpdateReq_t *pReq )
   \                     ZDO_ParseMgmtNwkUpdateReq:
   3360          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV     ?V0,R4
   \   000007   8D..         MOV     ?V1,R5
   3361            uint8 *msg = inMsg->asdu;
   \   000009   EA           MOV     A,R2
   \   00000A   2413         ADD     A,#0x13
   \   00000C   F582         MOV     DPL,A
   \   00000E   E4           CLR     A
   \   00000F   3B           ADDC    A,R3
   \   000010   F583         MOV     DPH,A
   \   000012   E0           MOVX    A,@DPTR
   \   000013   FE           MOV     R6,A
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   FF           MOV     R7,A
   3362          
   3363            pReq->channelMask = osal_build_uint32( msg, 4 );
   \   000017                ; Setup parameters for call to function osal_build_uint32
   \   000017   7904         MOV     R1,#0x4
   \   000019   EE           MOV     A,R6
   \   00001A   FA           MOV     R2,A
   \   00001B   EF           MOV     A,R7
   \   00001C   FB           MOV     R3,A
   \   00001D   12....       LCALL   `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   000020   EA           MOV     A,R2
   \   000021   F8           MOV     R0,A
   \   000022   EB           MOV     A,R3
   \   000023   F9           MOV     R1,A
   \   000024   EC           MOV     A,R4
   \   000025   FA           MOV     R2,A
   \   000026   ED           MOV     A,R5
   \   000027   FB           MOV     R3,A
   \   000028   85..82       MOV     DPL,?V0
   \   00002B   85..83       MOV     DPH,?V1
   \   00002E   12....       LCALL   ?XSTORE_R0123
   3364            msg += 4;
   \   000031   EE           MOV     A,R6
   \   000032   2404         ADD     A,#0x4
   \   000034   FE           MOV     R6,A
   \   000035   5001         JNC     ??ZDO_ParseMgmtNwkUpdateReq_0
   \   000037   0F           INC     R7
   3365            pReq->scanDuration = *msg++;
   \                     ??ZDO_ParseMgmtNwkUpdateReq_0:
   \   000038   8E82         MOV     DPL,R6
   \   00003A   8F83         MOV     DPH,R7
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   C0E0         PUSH    A
   \   00003F   85..82       MOV     DPL,?V0
   \   000042   85..83       MOV     DPH,?V1
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   D0E0         POP     A
   \   00004B   F0           MOVX    @DPTR,A
   \   00004C   8E82         MOV     DPL,R6
   \   00004E   8F83         MOV     DPH,R7
   \   000050   A3           INC     DPTR
   \   000051   AE82         MOV     R6,DPL
   \   000053   AF83         MOV     R7,DPH
   3366          
   3367            if ( pReq->scanDuration <= 0x05 )
   \   000055   85..82       MOV     DPL,?V0
   \   000058   85..83       MOV     DPH,?V1
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   C3           CLR     C
   \   000061   9406         SUBB    A,#0x6
   \   000063   5017         JNC     ??ZDO_ParseMgmtNwkUpdateReq_1
   3368            {
   3369              // Request is to scan over channelMask
   3370              pReq->scanCount = *msg;
   \   000065   8E82         MOV     DPL,R6
   \   000067   8F83         MOV     DPH,R7
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   C0E0         PUSH    A
   \   00006C   85..82       MOV     DPL,?V0
   \   00006F   85..83       MOV     DPH,?V1
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   A3           INC     DPTR
   \   000075   A3           INC     DPTR
   \   000076   A3           INC     DPTR
   \   000077   D0E0         POP     A
   \   000079   F0           MOVX    @DPTR,A
   \   00007A   8078         SJMP    ??ZDO_ParseMgmtNwkUpdateReq_2
   3371            }
   3372            else if ( ( pReq->scanDuration == 0xFE ) || ( pReq->scanDuration == 0xFF ) )
   \                     ??ZDO_ParseMgmtNwkUpdateReq_1:
   \   00007C   85..82       MOV     DPL,?V0
   \   00007F   85..83       MOV     DPH,?V1
   \   000082   A3           INC     DPTR
   \   000083   A3           INC     DPTR
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   E0           MOVX    A,@DPTR
   \   000087   64FE         XRL     A,#0xfe
   \   000089   600F         JZ      ??ZDO_ParseMgmtNwkUpdateReq_3
   \   00008B   85..82       MOV     DPL,?V0
   \   00008E   85..83       MOV     DPH,?V1
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   E0           MOVX    A,@DPTR
   \   000096   64FF         XRL     A,#0xff
   \   000098   705A         JNZ     ??ZDO_ParseMgmtNwkUpdateReq_2
   3373            {
   3374              // Request is to change Channel (0xFE) or apsChannelMask and NwkManagerAddr (0xFF)
   3375              pReq->nwkUpdateId = *msg++;
   \                     ??ZDO_ParseMgmtNwkUpdateReq_3:
   \   00009A   8E82         MOV     DPL,R6
   \   00009C   8F83         MOV     DPH,R7
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   C0E0         PUSH    A
   \   0000A1   85..82       MOV     DPL,?V0
   \   0000A4   85..83       MOV     DPH,?V1
   \   0000A7   A3           INC     DPTR
   \   0000A8   A3           INC     DPTR
   \   0000A9   A3           INC     DPTR
   \   0000AA   A3           INC     DPTR
   \   0000AB   A3           INC     DPTR
   \   0000AC   A3           INC     DPTR
   \   0000AD   D0E0         POP     A
   \   0000AF   F0           MOVX    @DPTR,A
   \   0000B0   8E82         MOV     DPL,R6
   \   0000B2   8F83         MOV     DPH,R7
   \   0000B4   A3           INC     DPTR
   \   0000B5   AE82         MOV     R6,DPL
   \   0000B7   AF83         MOV     R7,DPH
   3376          
   3377              if ( pReq->scanDuration == 0xFF )
   \   0000B9   85..82       MOV     DPL,?V0
   \   0000BC   85..83       MOV     DPH,?V1
   \   0000BF   A3           INC     DPTR
   \   0000C0   A3           INC     DPTR
   \   0000C1   A3           INC     DPTR
   \   0000C2   A3           INC     DPTR
   \   0000C3   E0           MOVX    A,@DPTR
   \   0000C4   64FF         XRL     A,#0xff
   \   0000C6   702C         JNZ     ??ZDO_ParseMgmtNwkUpdateReq_2
   3378              {
   3379                pReq->nwkManagerAddr = BUILD_UINT16( msg[0], msg[1] );
   \   0000C8   8E82         MOV     DPL,R6
   \   0000CA   8F83         MOV     DPH,R7
   \   0000CC   E0           MOVX    A,@DPTR
   \   0000CD   FA           MOV     R2,A
   \   0000CE   7B00         MOV     R3,#0x0
   \   0000D0   8E82         MOV     DPL,R6
   \   0000D2   8F83         MOV     DPH,R7
   \   0000D4   A3           INC     DPTR
   \   0000D5   E0           MOVX    A,@DPTR
   \   0000D6   F8           MOV     R0,A
   \   0000D7   7900         MOV     R1,#0x0
   \   0000D9   E4           CLR     A
   \   0000DA   C8           XCH     A,R0
   \   0000DB   F9           MOV     R1,A
   \   0000DC   EA           MOV     A,R2
   \   0000DD   28           ADD     A,R0
   \   0000DE   F8           MOV     R0,A
   \   0000DF   EB           MOV     A,R3
   \   0000E0   39           ADDC    A,R1
   \   0000E1   F9           MOV     R1,A
   \   0000E2   85..82       MOV     DPL,?V0
   \   0000E5   85..83       MOV     DPH,?V1
   \   0000E8   A3           INC     DPTR
   \   0000E9   A3           INC     DPTR
   \   0000EA   A3           INC     DPTR
   \   0000EB   A3           INC     DPTR
   \   0000EC   A3           INC     DPTR
   \   0000ED   A3           INC     DPTR
   \   0000EE   A3           INC     DPTR
   \   0000EF   E8           MOV     A,R0
   \   0000F0   F0           MOVX    @DPTR,A
   \   0000F1   A3           INC     DPTR
   \   0000F2   E9           MOV     A,R1
   \   0000F3   F0           MOVX    @DPTR,A
   3380              }
   3381            }
   3382          }
   \                     ??ZDO_ParseMgmtNwkUpdateReq_2:
   \   0000F4   7F02         MOV     R7,#0x2
   \   0000F6   02....       LJMP    ?BANKED_LEAVE_XDATA
   3383          
   3384          /*********************************************************************
   3385           * @fn          ZDO_ParseEndDeviceTimeoutRsp
   3386           *
   3387           * @brief       Parse the End_Device_Timeout_rsp message.
   3388           *
   3389           * @param       inMsg - incoming message.
   3390           * @param       pRsp - place to put the parsed information.
   3391           *
   3392           * @return      none
   3393           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3394          void ZDO_ParseEndDeviceTimeoutRsp( zdoIncomingMsg_t *inMsg, uint16 *pRsp )
   \                     ZDO_ParseEndDeviceTimeoutRsp:
   3395          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3396            *pRsp = inMsg->asdu[0];
   \   000004   EA           MOV     A,R2
   \   000005   2413         ADD     A,#0x13
   \   000007   F582         MOV     DPL,A
   \   000009   E4           CLR     A
   \   00000A   3B           ADDC    A,R3
   \   00000B   F583         MOV     DPH,A
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F8           MOV     R0,A
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F583         MOV     DPH,A
   \   000013   8882         MOV     DPL,R0
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F8           MOV     R0,A
   \   000017   7900         MOV     R1,#0x0
   \   000019   8C82         MOV     DPL,R4
   \   00001B   8D83         MOV     DPH,R5
   \   00001D   E8           MOV     A,R0
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   A3           INC     DPTR
   \   000020   E9           MOV     A,R1
   \   000021   F0           MOVX    @DPTR,A
   3397          }
   \   000022   D083         POP     DPH
   \   000024   D082         POP     DPL
   \   000026   02....       LJMP    ?BRET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zdpExternalStateTaskID>`:
   \   000000   FFFF         DW -1

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDODeviceSetup::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDODeviceSetup

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_StartDevice::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_StartDevice

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zdoSendStateChangeMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zdoSendStateChangeMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_UpdateNwkStatus::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_UpdateNwkStatus

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_RemoveEndDeviceBind::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RemoveEndDeviceBind

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_SendEDBindRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SendEDBindRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_CompareClusterLists::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_CompareClusterLists

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_AnyClusterMatches::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_AnyClusterMatches

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessNodeDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessNodeDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessPowerDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessPowerDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessSimpleDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessSimpleDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessActiveEPReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessActiveEPReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ConvertOTAClusters::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ConvertOTAClusters

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMatchDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMatchDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessBindUnbindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessBindUnbindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_UpdateAddrManager::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_UpdateAddrManager

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessServerDiscReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessServerDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessEndDeviceTimeoutReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessEndDeviceTimeoutReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_EndDeviceTimeoutCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_EndDeviceTimeoutCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtLqiReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtLqiReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtNwkDiscReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtNwkDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtRtgReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtRtgReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtBindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtDirectJoinReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtDirectJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtLeaveReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtLeaveReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtPermitJoinReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtPermitJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??NLME_PermitJoiningTimeout::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    NLME_PermitJoiningTimeout

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessUserDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessUserDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessUserDescSet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessUserDescSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessDeviceAnnce::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessDeviceAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_BuildSimpleDescBuf::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_BuildSimpleDescBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_MatchEndDeviceBind::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_MatchEndDeviceBind

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_RemoveMatchMemory::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RemoveMatchMemory

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_CopyMatchInfo::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_CopyMatchInfo

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDMatchSendState::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDMatchSendState

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_EndDeviceBindMatchTimeoutCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_EndDeviceBindMatchTimeoutCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseEndDeviceBindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseEndDeviceBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseBindUnbindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseBindUnbindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseAddrRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseAddrRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseNodeDescRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseNodeDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParsePowerDescRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParsePowerDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseSimpleDescRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseSimpleDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseEPListRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseEPListRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseServerDiscRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseServerDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmtLqiRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtLqiRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmNwkDiscRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmNwkDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmtRtgRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtRtgRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmtBindRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtBindRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseUserDescRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseUserDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseSimpleDescBuf::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseSimpleDescBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseDeviceAnnce::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseDeviceAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmtNwkUpdateNotify::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtNwkUpdateNotify

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmtNwkUpdateReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtNwkUpdateReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseEndDeviceTimeoutRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseEndDeviceTimeoutRsp
   3398          
   3399          /*********************************************************************
   3400          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   NLME_PermitJoiningTimeout
      1     70   ZDMatchSendState
        0     37   -> APS_SetEndDeviceBindTimeout
        0     37   -> ZDO_RemoveMatchMemory
        0     45   -> ZDP_BindUnbindReq
        0     42   -> ZDP_SendData
        0     37   -> sAddrExtCpy
      2      0   ZDODeviceSetup
        2      0   -> APS_ReflectorInit
        2      0   -> NLME_CoordinatorInit
        2      0   -> NLME_DeviceJoiningInit
      0     46   ZDO_AnyClusterMatches
      1     10   ZDO_BuildSimpleDescBuf
      0     45   ZDO_CompareClusterLists
      0     42   ZDO_ConvertOTAClusters
      0     43   ZDO_CopyMatchInfo
        0     15   -> osal_mem_alloc
        0     15   -> osal_mem_free
        0     18   -> osal_memcpy
      2      0   ZDO_EndDeviceBindMatchTimeoutCB
        2      0   -> ZDMatchSendState
      2      0   ZDO_EndDeviceTimeoutCB
        2      0   -> ZDO_RemoveEndDeviceBind
        2      0   -> ZDO_SendEDBindRsp
      2      0   ZDO_Init
        2      0   -> ZDODeviceSetup
        2      0   -> sAddrExtCpy
      1     30   ZDO_MatchEndDeviceBind
        0     25   -> APS_SetEndDeviceBindTimeout
        0     25   -> ZDMatchSendState
        0     29   -> ZDO_CompareClusterLists
        0     25   -> ZDO_CopyMatchInfo
        0     25   -> ZDO_RemoveMatchMemory
        0     30   -> ZDP_SendData
        0     25   -> osal_mem_alloc
        0     28   -> osal_memcpy
        0     25   -> osal_memset
      1     14   ZDO_ParseAddrRsp
        0     14   -> osal_mem_alloc
        0     14   -> sAddrExtCpy
      1     10   ZDO_ParseBindUnbindReq
        0     10   -> sAddrExtCpy
      1     52   ZDO_ParseDeviceAnnce
        0     10   -> sAddrExtCpy
      1     18   ZDO_ParseEPListRsp
        0     15   -> osal_mem_alloc
        0     18   -> osal_memcpy
      1     12   ZDO_ParseEndDeviceBindReq
        0     12   -> ZDO_ConvertOTAClusters
        0     12   -> osal_mem_alloc
        0     12   -> sAddrExtCpy
      2      0   ZDO_ParseEndDeviceTimeoutRsp
      1     16   ZDO_ParseMgmNwkDiscRsp
        0     16   -> osal_mem_alloc
        0     16   -> sAddrExtCpy
      1     18   ZDO_ParseMgmtBindRsp
        0     18   -> osal_mem_alloc
        0     18   -> sAddrExtCpy
      1     16   ZDO_ParseMgmtLqiRsp
        0     16   -> osal_mem_alloc
        0     16   -> sAddrExtCpy
      1     25   ZDO_ParseMgmtNwkUpdateNotify
        0     22   -> osal_build_uint32
        0     22   -> osal_mem_alloc
        0     25   -> osal_memcpy
      1     10   ZDO_ParseMgmtNwkUpdateReq
        0     10   -> osal_build_uint32
      1     14   ZDO_ParseMgmtRtgRsp
        0     14   -> osal_mem_alloc
      1      9   ZDO_ParseNodeDescRsp
      1     10   ZDO_ParsePowerDescRsp
      1      9   ZDO_ParseServerDiscRsp
      1     20   ZDO_ParseSimpleDescBuf
        0     11   -> osal_mem_alloc
        0     11   -> osal_mem_free
      1      9   ZDO_ParseSimpleDescRsp
        0      9   -> ZDO_ParseSimpleDescBuf
      1     18   ZDO_ParseUserDescRsp
        0     15   -> osal_mem_alloc
        0     18   -> osal_memcpy
      0     21   ZDO_ProcessActiveEPReq
        0     14   -> NLME_GetShortAddr
        0     21   -> ZDP_EPRsp
        0     14   -> afEndPoints
        0     14   -> afNumEndPoints
      1     32   ZDO_ProcessBindUnbindReq
        0     28   -> APSME_BindRequest
        0     27   -> APSME_LookupNwkAddr
        0     28   -> APSME_UnBindRequest
        0     27   -> NLME_GetExtAddr
        0     27   -> ZDApp_GetEmptyPendingBindReq
        0     27   -> ZDApp_NVUpdate
        0     27   -> ZDP_NwkAddrReq
        0     32   -> ZDP_SendData
        0     27   -> bindAddrIndexGet
        0     30   -> osal_memcpy
        0     31   -> osal_start_timerEx
        0     27   -> sAddrExtCmp
        0     27   -> sAddrExtCpy
      0     42   ZDO_ProcessDeviceAnnce
        0     42   -> AddrMgrEntryLookupExt
        0     42   -> AddrMgrEntryLookupNwk
        0     42   -> AddrMgrEntryUpdate
        0     42   -> AddrMgrExtAddrSet
        0     42   -> AssocChangeNwkAddr
        0     42   -> AssocGetWithExt
        0     42   -> AssocRemove
        0     42   -> NLME_CheckNewAddrSet
        0     42   -> NLME_GetCoordExtAddr
        0     42   -> NLME_GetCoordShortAddr
        0     42   -> NLME_GetExtAddr
        0     42   -> NLME_GetShortAddr
        0     42   -> RTG_RemoveRtgEntry
        0     42   -> ZDApp_NVUpdate
        0     42   -> ZDO_ParseDeviceAnnce
        0     42   -> ZMacSetReq
        0     42   -> nwkNeighborRemoveAllStranded
        0     42   -> nwkNeighborUpdateNwkAddr
        0     42   -> osal_memset
        0     42   -> sAddrExtCmp
      0     18   ZDO_ProcessEndDeviceTimeoutReq
        0     13   -> AssocGetWithExt
        0     13   -> ZDApp_NVUpdate
        0     18   -> ZDP_SendData
      1     38   ZDO_ProcessMatchDescReq
        0     31   -> NLME_IsAddressBroadcast
        0     33   -> ZDO_AnyClusterMatches
        0     31   -> ZDO_ConvertOTAClusters
        0     38   -> ZDP_EPRsp
        0     31   -> osal_mem_alloc
        0     31   -> osal_mem_free
        0     34   -> osal_memcpy
        0     31   -> osal_msg_allocate
        0     31   -> osal_msg_send
      0     25   ZDO_ProcessMgmtBindReq
        0     20   -> APSME_GetRequest
        0     25   -> ZDP_MgmtBindRsp
        0     20   -> osal_mem_alloc
        0     20   -> osal_mem_free
      1     16   ZDO_ProcessMgmtDirectJoinReq
        0     11   -> NLME_DirectJoinRequest
        0     16   -> ZDP_SendData
      1     23   ZDO_ProcessMgmtLeaveReq
        0     18   -> AddrMgrExtAddrValid
        0     18   -> NLME_GetExtAddr
        0     18   -> NLME_LeaveReq
        0     18   -> NLME_SetPollRate
        0     23   -> ZDP_SendData
        0     18   -> sAddrExtCmp
      1     64   ZDO_ProcessMgmtLqiReq
        0     59   -> AddrMgrEntryLookupNwk
        0     59   -> AssocCount
        0     59   -> AssocFindDevice
        0     59   -> NLME_GetRequest
        0     64   -> ZDP_MgmtLqiRsp
        0     59   -> osal_mem_alloc
        0     59   -> osal_mem_free
        0     59   -> osal_memset
        0     59   -> sAddrExtCpy
      1     17   ZDO_ProcessMgmtNwkDiscReq
        0     17   -> NLME_NwkDiscReq2
        0     17   -> NLME_NwkDiscTerm
        0     17   -> osal_build_uint32
      1     16   ZDO_ProcessMgmtPermitJoinReq
        0     11   -> NLME_PermitJoiningRequest
        0     16   -> ZDP_SendData
      0     22   ZDO_ProcessMgmtRtgReq
        0     17   -> NLME_GetRequest
        0     22   -> ZDP_MgmtRtgRsp
        0     17   -> osal_mem_alloc
        0     17   -> osal_mem_free
      0     14   ZDO_ProcessNodeDescReq
        0     14   -> ZDP_GenericRsp
        0     12   -> ZDP_NodeDescMsg
      0     14   ZDO_ProcessPowerDescReq
        0     14   -> ZDP_GenericRsp
        0     12   -> ZDP_PowerDescMsg
      0     14   ZDO_ProcessServerDiscReq
        0     14   -> ZDP_ServerDiscRsp
      0     12   ZDO_ProcessSimpleDescReq
        0     12   -> ZDP_SimpleDescMsg
        0     12   -> afFindSimpleDesc
        0     12   -> osal_mem_free
      0     33   ZDO_ProcessUserDescReq
        0     33   -> ZDP_GenericRsp
        0     32   -> ZDP_UserDescRsp
        0     33   -> osal_nv_read
      1     40   ZDO_ProcessUserDescSet
        0     40   -> ZDP_SendData
        0     38   -> osal_memcpy
        0     39   -> osal_nv_write
      2      0   ZDO_RemoveEndDeviceBind
        2      0   -> osal_mem_free
      2     37   ZDO_RemoveMatchMemory
        2      0   -> osal_mem_free
      1     17   ZDO_SendEDBindRsp
        0     17   -> ZDP_SendData
      0     31   ZDO_StartDevice
        0     24   -> NLME_NetworkDiscoveryRequest
        0     31   -> NLME_NetworkFormationRequest
        0     24   -> NLME_OrphanJoinRequest
        0     24   -> NLME_StartRouterRequest
        0     24   -> nwk_ScanJoiningOrphan
        0     28   -> osal_start_timerEx
      2     13   ZDO_UpdateAddrManager
        2     13   -> AddrMgrEntryUpdate
        2     13   -> AddrMgrExtAddrSet
      0     12   ZDO_UpdateNwkStatus
        0     12   -> NLME_GetExtAddr
        0     12   -> NLME_GetShortAddr
        0     12   -> zdoSendStateChangeMsg
      1     23   zdoSendStateChangeMsg
        0     11   -> osal_msg_allocate
        0     11   -> osal_msg_find
        0     11   -> osal_msg_send
        0     11   -> osal_set_event


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Initializer for zdpExternalStateTaskID>
       3  NLME_PermitJoiningTimeout
       6  NLME_PermitJoiningTimeout::?relay
    1134  ZDMatchSendState
       6  ZDMatchSendState::?relay
      52  ZDOBuildBuf
      20  ZDODeviceSetup
       6  ZDODeviceSetup::?relay
     146  ZDO_AnyClusterMatches
       6  ZDO_AnyClusterMatches::?relay
     481  ZDO_BuildSimpleDescBuf
       6  ZDO_BuildSimpleDescBuf::?relay
     217  ZDO_CompareClusterLists
       6  ZDO_CompareClusterLists::?relay
     101  ZDO_ConvertOTAClusters
       6  ZDO_ConvertOTAClusters::?relay
     513  ZDO_CopyMatchInfo
       6  ZDO_CopyMatchInfo::?relay
       2  ZDO_EDBind
      21  ZDO_EndDeviceBindMatchTimeoutCB
       6  ZDO_EndDeviceBindMatchTimeoutCB::?relay
      92  ZDO_EndDeviceTimeoutCB
       6  ZDO_EndDeviceTimeoutCB::?relay
      35  ZDO_Init
       6  ZDO_Init::?relay
    1215  ZDO_MatchEndDeviceBind
       6  ZDO_MatchEndDeviceBind::?relay
     390  ZDO_ParseAddrRsp
       6  ZDO_ParseAddrRsp::?relay
     266  ZDO_ParseBindUnbindReq
       6  ZDO_ParseBindUnbindReq::?relay
     121  ZDO_ParseDeviceAnnce
       6  ZDO_ParseDeviceAnnce::?relay
     199  ZDO_ParseEPListRsp
       6  ZDO_ParseEPListRsp::?relay
     639  ZDO_ParseEndDeviceBindReq
       6  ZDO_ParseEndDeviceBindReq::?relay
      41  ZDO_ParseEndDeviceTimeoutRsp
       6  ZDO_ParseEndDeviceTimeoutRsp::?relay
     496  ZDO_ParseMgmNwkDiscRsp
       6  ZDO_ParseMgmNwkDiscRsp::?relay
     558  ZDO_ParseMgmtBindRsp
       6  ZDO_ParseMgmtBindRsp::?relay
     535  ZDO_ParseMgmtLqiRsp
       6  ZDO_ParseMgmtLqiRsp::?relay
     337  ZDO_ParseMgmtNwkUpdateNotify
       6  ZDO_ParseMgmtNwkUpdateNotify::?relay
     249  ZDO_ParseMgmtNwkUpdateReq
       6  ZDO_ParseMgmtNwkUpdateReq::?relay
     382  ZDO_ParseMgmtRtgRsp
       6  ZDO_ParseMgmtRtgRsp::?relay
     580  ZDO_ParseNodeDescRsp
       6  ZDO_ParseNodeDescRsp::?relay
     341  ZDO_ParsePowerDescRsp
       6  ZDO_ParsePowerDescRsp::?relay
     101  ZDO_ParseServerDiscRsp
       6  ZDO_ParseServerDiscRsp::?relay
     701  ZDO_ParseSimpleDescBuf
       6  ZDO_ParseSimpleDescBuf::?relay
     117  ZDO_ParseSimpleDescRsp
       6  ZDO_ParseSimpleDescRsp::?relay
     201  ZDO_ParseUserDescRsp
       6  ZDO_ParseUserDescRsp::?relay
     197  ZDO_ProcessActiveEPReq
       6  ZDO_ProcessActiveEPReq::?relay
     732  ZDO_ProcessBindUnbindReq
       6  ZDO_ProcessBindUnbindReq::?relay
     655  ZDO_ProcessDeviceAnnce
       6  ZDO_ProcessDeviceAnnce::?relay
     361  ZDO_ProcessEndDeviceTimeoutReq
       6  ZDO_ProcessEndDeviceTimeoutReq::?relay
    1683  ZDO_ProcessMatchDescReq
       6  ZDO_ProcessMatchDescReq::?relay
     329  ZDO_ProcessMgmtBindReq
       6  ZDO_ProcessMgmtBindReq::?relay
     136  ZDO_ProcessMgmtDirectJoinReq
       6  ZDO_ProcessMgmtDirectJoinReq::?relay
     234  ZDO_ProcessMgmtLeaveReq
       6  ZDO_ProcessMgmtLeaveReq::?relay
    1030  ZDO_ProcessMgmtLqiReq
       6  ZDO_ProcessMgmtLqiReq::?relay
     186  ZDO_ProcessMgmtNwkDiscReq
       6  ZDO_ProcessMgmtNwkDiscReq::?relay
     149  ZDO_ProcessMgmtPermitJoinReq
       6  ZDO_ProcessMgmtPermitJoinReq::?relay
     370  ZDO_ProcessMgmtRtgReq
       6  ZDO_ProcessMgmtRtgReq::?relay
     176  ZDO_ProcessNodeDescReq
       6  ZDO_ProcessNodeDescReq::?relay
     176  ZDO_ProcessPowerDescReq
       6  ZDO_ProcessPowerDescReq::?relay
     135  ZDO_ProcessServerDiscReq
       6  ZDO_ProcessServerDiscReq::?relay
     255  ZDO_ProcessSimpleDescReq
       6  ZDO_ProcessSimpleDescReq::?relay
     246  ZDO_ProcessUserDescReq
       6  ZDO_ProcessUserDescReq::?relay
     357  ZDO_ProcessUserDescSet
       6  ZDO_ProcessUserDescSet::?relay
     146  ZDO_RemoveEndDeviceBind
       6  ZDO_RemoveEndDeviceBind::?relay
     353  ZDO_RemoveMatchMemory
       6  ZDO_RemoveMatchMemory::?relay
      98  ZDO_SendEDBindRsp
       6  ZDO_SendEDBindRsp::?relay
     402  ZDO_StartDevice
       6  ZDO_StartDevice::?relay
      60  ZDO_UpdateAddrManager
       6  ZDO_UpdateAddrManager::?relay
     137  ZDO_UpdateNwkStatus
       6  ZDO_UpdateNwkStatus::?relay
       4  __Constant_3e8
       4  apsChannelMask
       1  discRetries
       2  matchED
       1  scanCnt
     125  zdoSendStateChangeMsg
       6  zdoSendStateChangeMsg::?relay
       2  zdpExternalStateTaskID

 
 18 960 bytes in segment BANKED_CODE
    330 bytes in segment BANK_RELAYS
      2 bytes in segment XDATA_I
      2 bytes in segment XDATA_ID
      4 bytes in segment XDATA_ROM_C
     62 bytes in segment XDATA_Z
 
 19 292 bytes of CODE  memory
      0 bytes of CONST memory (+ 4 bytes shared)
     64 bytes of XDATA memory

Errors: none
Warnings: none

###############################################################################
#
# IAR C/C++ Compiler V9.20.1.2476 for 8051                22/Feb/2017  14:31:43
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\koen\ZigBee-Code-WTWS\Components\services\saddr\saddr.c
#    Command line       =  
#        -f
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00002000 -DZDAPP_CONFIG_PAN_ID=0xABCD
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={'H', 'O', 'G', 'E', 'S',
#        'C', 'H', 'O', 'O', 'L', 'U', 'T', 'R', 'E', 'C', 'H'}"
#        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440
#        C:\Users\koen\ZigBee-Code-WTWS\Components\services\saddr\saddr.c -D
#        HOLD_AUTO_START -D BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D
#        NV_RESTORE -D HAL_UART=TRUE -lC
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\
#        -lA
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\
#        --diag_suppress Pe001,Pa010,Pe1665 -o
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\Obj\
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\Source\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ol --require_prototypes
#    List file          =  
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\saddr.lst
#    Object file        =  
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\Obj\saddr.r51
#
###############################################################################

C:\Users\koen\ZigBee-Code-WTWS\Components\services\saddr\saddr.c
      1          /****************************************************************************
      2            Filename:       saddr.c
      3            Revised:        $Date: 2013-06-13 09:40:13 -0700 (Thu, 13 Jun 2013) $
      4            Revision:       $Revision: 34575 $
      5          
      6            Description:    Zigbee and 802.15.4 device address utility functions.
      7          
      8          
      9            Copyright 2005-2013 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          ****************************************************************************/
     39          
     40          /****************************************************************************
     41           * INCLUDES
     42           */
     43          #include "hal_types.h"
     44          #include "OSAL.h"
     45          #include "saddr.h"
     46          
     47          #if defined( CC26XX )
     48            #include "flash_JT.h"
     49          #endif /* CC26XX */
     50          
     51          /****************************************************************************
     52           * @fn          sAddrCmp
     53           *
     54           * @brief       Compare two device addresses.
     55           *
     56           * input parameters
     57           *
     58           * @param       pAddr1        - Pointer to first address.
     59           * @param       pAddr2        - Pointer to second address.
     60           *
     61           * output parameters
     62           *
     63           * @return      TRUE if addresses are equal, FALSE otherwise
     64           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     65          bool sAddrCmp(const sAddr_t *pAddr1, const sAddr_t *pAddr2)
   \                     sAddrCmp:
     66          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     67            if (pAddr1->addrMode != pAddr2->addrMode)
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F8           MOV     R0,A
   \   000012   8C82         MOV     DPL,R4
   \   000014   8D83         MOV     DPH,R5
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   68           XRL     A,R0
   \   000020   6004         JZ      ??sAddrCmp_0
     68            {
     69              return FALSE;
   \   000022   7900         MOV     R1,#0x0
   \   000024   805A         SJMP    ??sAddrCmp_1
     70            }
     71            else if (pAddr1->addrMode == SADDR_MODE_NONE)
   \                     ??sAddrCmp_0:
   \   000026   8A82         MOV     DPL,R2
   \   000028   8B83         MOV     DPH,R3
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   7004         JNZ     ??sAddrCmp_2
     72            {
     73              return FALSE;
   \   000035   7900         MOV     R1,#0x0
   \   000037   8047         SJMP    ??sAddrCmp_1
     74            }
     75            else if (pAddr1->addrMode == SADDR_MODE_SHORT)
   \                     ??sAddrCmp_2:
   \   000039   8A82         MOV     DPL,R2
   \   00003B   8B83         MOV     DPH,R3
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   E0           MOVX    A,@DPTR
   \   000046   6402         XRL     A,#0x2
   \   000048   701E         JNZ     ??sAddrCmp_3
     76            {
     77              return (bool) (pAddr1->addr.shortAddr == pAddr2->addr.shortAddr);
   \   00004A   8A82         MOV     DPL,R2
   \   00004C   8B83         MOV     DPH,R3
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   F8           MOV     R0,A
   \   000050   A3           INC     DPTR
   \   000051   E0           MOVX    A,@DPTR
   \   000052   F9           MOV     R1,A
   \   000053   8C82         MOV     DPL,R4
   \   000055   8D83         MOV     DPH,R5
   \   000057   E0           MOVX    A,@DPTR
   \   000058   68           XRL     A,R0
   \   000059   7003         JNZ     ??sAddrCmp_4
   \   00005B   A3           INC     DPTR
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   69           XRL     A,R1
   \                     ??sAddrCmp_4:
   \   00005E   7004         JNZ     ??sAddrCmp_5
   \   000060   7901         MOV     R1,#0x1
   \   000062   801C         SJMP    ??sAddrCmp_1
   \                     ??sAddrCmp_5:
   \   000064   7900         MOV     R1,#0x0
   \   000066   8018         SJMP    ??sAddrCmp_1
     78            }
     79            else if (pAddr1->addrMode == SADDR_MODE_EXT)
   \                     ??sAddrCmp_3:
   \   000068   8A82         MOV     DPL,R2
   \   00006A   8B83         MOV     DPH,R3
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   A3           INC     DPTR
   \   000070   A3           INC     DPTR
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   E0           MOVX    A,@DPTR
   \   000075   6403         XRL     A,#0x3
   \   000077   7005         JNZ     ??sAddrCmp_6
     80            {
     81              return (sAddrExtCmp(pAddr1->addr.extAddr, pAddr2->addr.extAddr));
   \   000079                ; Setup parameters for call to function sAddrExtCmp
   \   000079   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   00007C   8002         SJMP    ??sAddrCmp_1
     82            }
     83            else
     84            {
     85              return FALSE;
   \                     ??sAddrCmp_6:
   \   00007E   7900         MOV     R1,#0x0
   \                     ??sAddrCmp_1:
   \   000080   D083         POP     DPH
   \   000082   D082         POP     DPL
   \   000084   02....       LJMP    ?BRET
     86            }
     87          }
     88          
     89          /****************************************************************************
     90           * @fn          sAddrIden
     91           *
     92           * @brief       Check if two device addresses are identical.
     93           *
     94           *              This routine is virtually the same as sAddrCmp, which is used
     95           *              to determine if two different addresses are the same. However,
     96           *              this routine can be used to determine if an address is the
     97           *              same as a previously stored address. The key difference is in
     98           *              the former case, if the address mode is "none", then the
     99           *              assumption is that the two addresses can not be the same. But
    100           *              in the latter case, the address mode itself is being compared.
    101           *              So two addresses can be identical even if the address mode is
    102           *              "none", as long as the address mode of both addresses being
    103           *              compared is "none".
    104           *
    105           * input parameters
    106           *
    107           * @param       pAddr1        - Pointer to first address.
    108           * @param       pAddr2        - Pointer to second address.
    109           *
    110           * output parameters
    111           *
    112           * @return      TRUE if addresses are identical, FALSE otherwise
    113           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    114          bool sAddrIden(const sAddr_t *pAddr1, const sAddr_t *pAddr2)
   \                     sAddrIden:
    115          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    116            // first check if the address modes are the same
    117            if (pAddr1->addrMode != pAddr2->addrMode)
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F8           MOV     R0,A
   \   000012   8C82         MOV     DPL,R4
   \   000014   8D83         MOV     DPH,R5
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   68           XRL     A,R0
   \   000020   6004         JZ      ??sAddrIden_0
    118            {
    119              // no, so no point in comparing any further
    120              return FALSE;
   \   000022   7900         MOV     R1,#0x0
   \   000024   805A         SJMP    ??sAddrIden_1
    121            }
    122            // the address modes are the same; check if there is no address
    123            else if (pAddr1->addrMode == SADDR_MODE_NONE)
   \                     ??sAddrIden_0:
   \   000026   8A82         MOV     DPL,R2
   \   000028   8B83         MOV     DPH,R3
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   7004         JNZ     ??sAddrIden_2
    124            {
    125              // no address, so no need to compare any further as both addresses have the
    126              // same address mode but no address, so they are identical
    127              return TRUE;
   \   000035   7901         MOV     R1,#0x1
   \   000037   8047         SJMP    ??sAddrIden_1
    128            }
    129            // there's an address; check if it is short
    130            else if (pAddr1->addrMode == SADDR_MODE_SHORT)
   \                     ??sAddrIden_2:
   \   000039   8A82         MOV     DPL,R2
   \   00003B   8B83         MOV     DPH,R3
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   E0           MOVX    A,@DPTR
   \   000046   6402         XRL     A,#0x2
   \   000048   701E         JNZ     ??sAddrIden_3
    131            {
    132              // compare short addresses
    133              return (bool) (pAddr1->addr.shortAddr == pAddr2->addr.shortAddr);
   \   00004A   8A82         MOV     DPL,R2
   \   00004C   8B83         MOV     DPH,R3
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   F8           MOV     R0,A
   \   000050   A3           INC     DPTR
   \   000051   E0           MOVX    A,@DPTR
   \   000052   F9           MOV     R1,A
   \   000053   8C82         MOV     DPL,R4
   \   000055   8D83         MOV     DPH,R5
   \   000057   E0           MOVX    A,@DPTR
   \   000058   68           XRL     A,R0
   \   000059   7003         JNZ     ??sAddrIden_4
   \   00005B   A3           INC     DPTR
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   69           XRL     A,R1
   \                     ??sAddrIden_4:
   \   00005E   7004         JNZ     ??sAddrIden_5
   \   000060   7901         MOV     R1,#0x1
   \   000062   801C         SJMP    ??sAddrIden_1
   \                     ??sAddrIden_5:
   \   000064   7900         MOV     R1,#0x0
   \   000066   8018         SJMP    ??sAddrIden_1
    134            }
    135            // there's an address; check if it is extended
    136            else if (pAddr1->addrMode == SADDR_MODE_EXT)
   \                     ??sAddrIden_3:
   \   000068   8A82         MOV     DPL,R2
   \   00006A   8B83         MOV     DPH,R3
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   A3           INC     DPTR
   \   000070   A3           INC     DPTR
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   E0           MOVX    A,@DPTR
   \   000075   6403         XRL     A,#0x3
   \   000077   7005         JNZ     ??sAddrIden_6
    137            {
    138              // compare extended addresses
    139              return (sAddrExtCmp(pAddr1->addr.extAddr, pAddr2->addr.extAddr));
   \   000079                ; Setup parameters for call to function sAddrExtCmp
   \   000079   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   00007C   8002         SJMP    ??sAddrIden_1
    140            }
    141            else // unknown error
    142            {
    143              return FALSE;
   \                     ??sAddrIden_6:
   \   00007E   7900         MOV     R1,#0x0
   \                     ??sAddrIden_1:
   \   000080   D083         POP     DPH
   \   000082   D082         POP     DPL
   \   000084   02....       LJMP    ?BRET
    144            }
    145          }
    146          
    147          /****************************************************************************
    148           * @fn          sAddrCpy
    149           *
    150           * @brief       Copy a device address.
    151           *
    152           * input parameters
    153           *
    154           * @param       pSrc         - Pointer to address to copy.
    155           *
    156           * output parameters
    157           *
    158           * @param       pDest        - Pointer to address of copy.
    159           *
    160           * @return      None.
    161           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    162          void sAddrCpy(sAddr_t *pDest, const sAddr_t *pSrc)
   \                     sAddrCpy:
    163          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    164            pDest->addrMode = pSrc->addrMode;
   \   000004   8C82         MOV     DPL,R4
   \   000006   8D83         MOV     DPH,R5
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   C0E0         PUSH    A
   \   000013   8A82         MOV     DPL,R2
   \   000015   8B83         MOV     DPH,R3
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   D0E0         POP     A
   \   000021   F0           MOVX    @DPTR,A
    165          
    166            if (pDest->addrMode == SADDR_MODE_EXT)
   \   000022   8A82         MOV     DPL,R2
   \   000024   8B83         MOV     DPH,R3
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   6403         XRL     A,#0x3
   \   000031   7005         JNZ     ??sAddrCpy_0
    167            {
    168              sAddrExtCpy(pDest->addr.extAddr, pSrc->addr.extAddr);
   \   000033                ; Setup parameters for call to function sAddrExtCpy
   \   000033   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000036   8012         SJMP    ??sAddrCpy_1
    169            }
    170            else
    171            {
    172              pDest->addr.shortAddr = pSrc->addr.shortAddr;
   \                     ??sAddrCpy_0:
   \   000038   8C82         MOV     DPL,R4
   \   00003A   8D83         MOV     DPH,R5
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   F8           MOV     R0,A
   \   00003E   A3           INC     DPTR
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   F9           MOV     R1,A
   \   000041   8A82         MOV     DPL,R2
   \   000043   8B83         MOV     DPH,R3
   \   000045   E8           MOV     A,R0
   \   000046   F0           MOVX    @DPTR,A
   \   000047   A3           INC     DPTR
   \   000048   E9           MOV     A,R1
   \   000049   F0           MOVX    @DPTR,A
    173            }
    174          }
   \                     ??sAddrCpy_1:
   \   00004A   D083         POP     DPH
   \   00004C   D082         POP     DPL
   \   00004E   02....       LJMP    ?BRET
    175          
    176          /****************************************************************************
    177           * @fn          sAddrExtCmp
    178           *
    179           * @brief       Compare two extended addresses.
    180           *
    181           * input parameters
    182           *
    183           * @param       pAddr1        - Pointer to first address.
    184           * @param       pAddr2        - Pointer to second address.
    185           *
    186           * output parameters
    187           *
    188           * @return      TRUE if addresses are equal, FALSE otherwise
    189           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    190          bool sAddrExtCmp(const uint8 * pAddr1, const uint8 * pAddr2)
   \                     sAddrExtCmp:
    191          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    192            uint8 i;
    193          
    194            for (i = SADDR_EXT_LEN; i != 0; i--)
   \   000005   75..08       MOV     ?V0,#0x8
   \   000008   8002         SJMP    ??sAddrExtCmp_0
   \                     ??sAddrExtCmp_1:
   \   00000A   15..         DEC     ?V0
   \                     ??sAddrExtCmp_0:
   \   00000C   E5..         MOV     A,?V0
   \   00000E   602C         JZ      ??sAddrExtCmp_2
    195            {
    196              if (*pAddr1++ != *pAddr2++)
   \   000010   EA           MOV     A,R2
   \   000011   FE           MOV     R6,A
   \   000012   EB           MOV     A,R3
   \   000013   FF           MOV     R7,A
   \   000014   8E82         MOV     DPL,R6
   \   000016   8F83         MOV     DPH,R7
   \   000018   A3           INC     DPTR
   \   000019   AA82         MOV     R2,DPL
   \   00001B   AB83         MOV     R3,DPH
   \   00001D   EC           MOV     A,R4
   \   00001E   F8           MOV     R0,A
   \   00001F   ED           MOV     A,R5
   \   000020   F9           MOV     R1,A
   \   000021   8882         MOV     DPL,R0
   \   000023   8983         MOV     DPH,R1
   \   000025   A3           INC     DPTR
   \   000026   AC82         MOV     R4,DPL
   \   000028   AD83         MOV     R5,DPH
   \   00002A   8E82         MOV     DPL,R6
   \   00002C   8F83         MOV     DPH,R7
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   FE           MOV     R6,A
   \   000030   8882         MOV     DPL,R0
   \   000032   8983         MOV     DPH,R1
   \   000034   E0           MOVX    A,@DPTR
   \   000035   6E           XRL     A,R6
   \   000036   60D2         JZ      ??sAddrExtCmp_1
    197              {
    198                return FALSE;
   \   000038   7900         MOV     R1,#0x0
   \   00003A   8002         SJMP    ??sAddrExtCmp_3
    199              }
    200            }
    201            return TRUE;
   \                     ??sAddrExtCmp_2:
   \   00003C   7901         MOV     R1,#0x1
   \                     ??sAddrExtCmp_3:
   \   00003E   7F02         MOV     R7,#0x2
   \   000040   02....       LJMP    ?BANKED_LEAVE_XDATA
    202          }
    203          
    204          /****************************************************************************
    205           * @fn          sAddrExtCpy
    206           *
    207           * @brief       Copy an extended address.
    208           *
    209           * input parameters
    210           *
    211           * @param       pSrc         - Pointer to address to copy.
    212           *
    213           * output parameters
    214           *
    215           * @param       pDest        - Pointer to address of copy.
    216           *
    217           * @return      pDest + SADDR_EXT_LEN.
    218           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    219          void *sAddrExtCpy(uint8 * pDest, const uint8 * pSrc)
   \                     sAddrExtCpy:
    220          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
    221            return osal_memcpy(pDest, pSrc, SADDR_EXT_LEN);
   \   000005                ; Setup parameters for call to function osal_memcpy
   \   000005   8C..         MOV     ?V0,R4
   \   000007   8D..         MOV     ?V1,R5
   \   000009   75..00       MOV     ?V2,#0x0
   \   00000C   78..         MOV     R0,#?V0
   \   00000E   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000011   7C08         MOV     R4,#0x8
   \   000013   7D00         MOV     R5,#0x0
   \   000015   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000018   7403         MOV     A,#0x3
   \   00001A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00001D   7F03         MOV     R7,#0x3
   \   00001F   02....       LJMP    ?BANKED_LEAVE_XDATA
    222          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??sAddrCmp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    sAddrCmp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??sAddrIden::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    sAddrIden

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??sAddrCpy::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    sAddrCpy

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??sAddrExtCmp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    sAddrExtCmp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??sAddrExtCpy::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    sAddrExtCpy
    223          
    224          
    225          
    226          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2      0   sAddrCmp
        2      0   -> sAddrExtCmp
      3      0   sAddrCpy
        2      0   -> sAddrExtCpy
      0     10   sAddrExtCmp
      0     14   sAddrExtCpy
        0     14   -> osal_memcpy
      2      0   sAddrIden
        2      0   -> sAddrExtCmp


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
     135  sAddrCmp
       6  sAddrCmp::?relay
      81  sAddrCpy
       6  sAddrCpy::?relay
      67  sAddrExtCmp
       6  sAddrExtCmp::?relay
      34  sAddrExtCpy
       6  sAddrExtCpy::?relay
     135  sAddrIden
       6  sAddrIden::?relay

 
 452 bytes in segment BANKED_CODE
  30 bytes in segment BANK_RELAYS
 
 482 bytes of CODE memory

Errors: none
Warnings: none

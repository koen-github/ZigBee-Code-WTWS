###############################################################################
#
# IAR C/C++ Compiler V9.20.1.2476 for 8051                22/Feb/2017  14:31:43
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\koen\ZigBee-Code-WTWS\Components\osal\mcu\cc2530\OSAL_Nv.c
#    Command line       =  
#        -f
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00002000 -DZDAPP_CONFIG_PAN_ID=0xABCD
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={'H', 'O', 'G', 'E', 'S',
#        'C', 'H', 'O', 'O', 'L', 'U', 'T', 'R', 'E', 'C', 'H'}"
#        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440
#        C:\Users\koen\ZigBee-Code-WTWS\Components\osal\mcu\cc2530\OSAL_Nv.c -D
#        HOLD_AUTO_START -D BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D
#        NV_RESTORE -D HAL_UART=TRUE -lC
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\
#        -lA
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\
#        --diag_suppress Pe001,Pa010,Pe1665 -o
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\Obj\
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\Source\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ol --require_prototypes
#    List file          =  
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\OSAL_Nv.lst
#    Object file        =  
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\Obj\OSAL_Nv.r51
#
###############################################################################

C:\Users\koen\ZigBee-Code-WTWS\Components\osal\mcu\cc2530\OSAL_Nv.c
      1          /******************************************************************************
      2            Filename:       OSAL_Nv.c
      3            Revised:        $Date: 2013-08-07 10:27:19 -0700 (Wed, 07 Aug 2013) $
      4            Revision:       $Revision: 34901 $
      5          
      6            Description:    This module contains the OSAL non-volatile memory functions.
      7          
      8          
      9            Copyright 2006-2013 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          ******************************************************************************/
     39          
     40          /******************************************************************************
     41            Notes:
     42              - A trick buried deep in initPage() requires that the MSB of the NV Item Id
     43                is to be reserved for use by this module.
     44          ******************************************************************************/
     45          
     46          /*********************************************************************
     47           * INCLUDES
     48           */
     49          
     50          #include "hal_adc.h"
     51          #include "hal_flash.h"
     52          #include "hal_types.h"
     53          #include "OSAL_Nv.h"
     54          #include "ZComDef.h"
     55          
     56          /*********************************************************************
     57           * CONSTANTS
     58           */
     59          
     60          #define OSAL_NV_PAGE_SIZE       HAL_FLASH_PAGE_SIZE
     61          #define OSAL_NV_PAGES_USED      HAL_NV_PAGE_CNT
     62          #define OSAL_NV_PAGE_BEG        HAL_NV_PAGE_BEG
     63          #define OSAL_NV_PAGE_END       (OSAL_NV_PAGE_BEG + OSAL_NV_PAGES_USED - 1)
     64          
     65          #define OSAL_NV_ACTIVE          0x00
     66          #define OSAL_NV_ERASED          0xFF
     67          #define OSAL_NV_ERASED_ID       0xFFFF
     68          #define OSAL_NV_ZEROED_ID       0x0000
     69          // Reserve MSB of Id to signal a search for the "old" source copy (new write interrupted/failed.)
     70          #define OSAL_NV_SOURCE_ID       0x8000
     71          
     72          // In case pages 0-1 are ever used, define a null page value.
     73          #define OSAL_NV_PAGE_NULL       0
     74          
     75          // In case item Id 0 is ever used, define a null item value.
     76          #define OSAL_NV_ITEM_NULL       0
     77          
     78          #define OSAL_NV_WORD_SIZE       HAL_FLASH_WORD_SIZE
     79          
     80          #define OSAL_NV_PAGE_HDR_OFFSET 0
     81          
     82          #define OSAL_NV_MAX_HOT         3

   \                                 In  segment XDATA_ROM_C, align 1
     83          static const uint16 hotIds[OSAL_NV_MAX_HOT] = {
   \                     hotIds:
   \   000000   8200         DW 130
   \   000002   3A00         DW 58
   \   000004   3B00         DW 59
     84            ZCD_NV_NWKKEY,
     85            ZCD_NV_NWK_ACTIVE_KEY_INFO,
     86            ZCD_NV_NWK_ALTERN_KEY_INFO,
     87          };
     88          
     89          /*********************************************************************
     90           * MACROS
     91           */
     92          
     93          #define OSAL_NV_CHECK_BUS_VOLTAGE  HalAdcCheckVdd(VDD_MIN_NV)
     94          
     95          #define OSAL_NV_DATA_SIZE( LEN )                      \
     96            (((LEN) >= ((uint16)(65536UL - OSAL_NV_WORD_SIZE))) ? \
     97                       ((uint16)(65536UL - OSAL_NV_WORD_SIZE))  : \
     98                       ((((LEN) + OSAL_NV_WORD_SIZE - 1) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE))
     99          
    100          #define OSAL_NV_ITEM_SIZE( LEN )                                         \
    101            (((LEN) >= ((uint16)(65536UL - OSAL_NV_WORD_SIZE - OSAL_NV_HDR_SIZE))) ? \
    102                       ((uint16)(65536UL - OSAL_NV_WORD_SIZE))                     : \
    103            (((((LEN) + OSAL_NV_WORD_SIZE - 1) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE) + OSAL_NV_HDR_SIZE))
    104          
    105          #define COMPACT_PAGE_CLEANUP( COM_PG ) st ( \
    106            /* In order to recover from a page compaction that is interrupted,\
    107             * the logic in osal_nv_init() depends upon the following order:\
    108             * 1. State of the target of compaction is changed to ePgInUse.\
    109             * 2. Compacted page is erased.\
    110             */\
    111            setPageUse( pgRes, TRUE );  /* Mark the reserve page as being in use. */\
    112            erasePage( (COM_PG) ); \
    113            \
    114            pgRes = (COM_PG);           /* Set the reserve page to be the newly erased page. */\
    115          )
    116          
    117          /*********************************************************************
    118           * TYPEDEFS
    119           */
    120          
    121          typedef struct
    122          {
    123            uint16 id;
    124            uint16 len;   // Enforce Flash-WORD size on len.
    125            uint16 chk;   // Byte-wise checksum of the 'len' data bytes of the item.
    126            uint16 stat;  // Item status.
    127          } osalNvHdr_t;
    128          // Struct member offsets.
    129          #define OSAL_NV_HDR_ID    0
    130          #define OSAL_NV_HDR_LEN   2
    131          #define OSAL_NV_HDR_CHK   4
    132          #define OSAL_NV_HDR_STAT  6
    133          
    134          #define OSAL_NV_HDR_ITEM  2  // Length of any item of a header struct.
    135          #define OSAL_NV_HDR_SIZE  8
    136          #define OSAL_NV_HDR_HALF (OSAL_NV_HDR_SIZE / 2)
    137          
    138          typedef struct
    139          {
    140            uint16 active;
    141            uint16 inUse;
    142            uint16 xfer;
    143            uint16 spare;
    144          } osalNvPgHdr_t;
    145          // Struct member offsets.
    146          #define OSAL_NV_PG_ACTIVE 0
    147          #define OSAL_NV_PG_INUSE  2
    148          #define OSAL_NV_PG_XFER   4
    149          #define OSAL_NV_PG_SPARE  6
    150          
    151          #define OSAL_NV_PAGE_HDR_SIZE  8
    152          #define OSAL_NV_PAGE_HDR_HALF (OSAL_NV_PAGE_HDR_SIZE / 2)
    153          
    154          typedef enum
    155          {
    156            eNvXfer,
    157            eNvZero
    158          } eNvHdrEnum;
    159          
    160          typedef enum
    161          {
    162            ePgActive,
    163            ePgInUse,
    164            ePgXfer,
    165            ePgSpare
    166          } ePgHdrEnum;
    167          
    168          /*********************************************************************
    169           * GLOBAL VARIABLES
    170           */
    171          
    172          #ifndef OAD_KEEP_NV_PAGES
    173          // When NV pages are to remain intact during OAD download,
    174          // the image itself should not include NV pages.
    175          #pragma location="ZIGNV_ADDRESS_SPACE"

   \                                 In  segment ZIGNV_ADDRESS_SPACE, align 1
    176          __no_init uint8 _nvBuf[OSAL_NV_PAGES_USED * OSAL_NV_PAGE_SIZE];
   \                     _nvBuf:
   \   000000                DS 12288
    177          #pragma required=_nvBuf
    178          #endif // OAD_KEEP_NV_PAGES
    179          
    180          /*********************************************************************
    181           * LOCAL VARIABLES
    182           */
    183          
    184          // Offset into the page of the first available erased space.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    185          static uint16 pgOff[OSAL_NV_PAGES_USED];
   \                     pgOff:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
   \   00000C                REQUIRE _nvBuf
    186          
    187          // Count of the bytes lost for the zeroed-out items.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    188          static uint16 pgLost[OSAL_NV_PAGES_USED];
   \                     pgLost:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    189          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    190          static uint8 pgRes;  // Page reserved for item compacting transfer.
   \                     pgRes:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    191          
    192          // Saving ~100 code bytes to move a uint8* parameter/return value from findItem() to a global.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    193          static uint8 findPg;
   \                     findPg:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    194          
    195          // NV page and offsets for hot items.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    196          static uint8 hotPg[OSAL_NV_MAX_HOT];
   \                     hotPg:
   \   000000                DS 3
   \   000003                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    197          static uint16 hotOff[OSAL_NV_MAX_HOT];
   \                     hotOff:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    198          
    199          /*********************************************************************
    200           * LOCAL FUNCTIONS
    201           */
    202          
    203          static uint8  initNV( void );
    204          
    205          static void   setPageUse( uint8 pg, uint8 inUse );
    206          static uint16 initPage( uint8 pg, uint16 id, uint8 findDups );
    207          static void   erasePage( uint8 pg );
    208          static uint8  compactPage( uint8 srcPg, uint16 skipId );
    209          
    210          static uint16 findItem( uint16 id );
    211          static uint8  initItem( uint8 flag, uint16 id, uint16 len, void *buf );
    212          static void   setItem( uint8 pg, uint16 offset, eNvHdrEnum stat );
    213          static uint16 setChk( uint8 pg, uint16 offset, uint16 chk );
    214          
    215          static uint16 calcChkB( uint16 len, uint8 *buf );
    216          static uint16 calcChkF( uint8 pg, uint16 offset, uint16 len );
    217          
    218          static void   writeWord( uint8 pg, uint16 offset, uint8 *buf );
    219          static void   writeWordH( uint8 pg, uint16 offset, uint8 *buf );
    220          static void   writeWordM( uint8 pg, uint16 offset, uint8 *buf, uint16 cnt );
    221          static void   writeBuf( uint8 pg, uint16 offset, uint16 len, uint8 *buf );
    222          static void   xferBuf( uint8 srcPg, uint16 srcOff, uint8 dstPg, uint16 dstOff, uint16 len );
    223          
    224          static uint8  writeItem( uint8 pg, uint16 id, uint16 len, void *buf, uint8 flag );
    225          static uint8  hotItem(uint16 id);
    226          static void   hotItemUpdate(uint8 pg, uint16 off, uint16 id);
    227          
    228          /*********************************************************************
    229           * @fn      initNV
    230           *
    231           * @brief   Initialize the NV flash pages.
    232           *
    233           * @param   none
    234           *
    235           * @return  TRUE
    236           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    237          static uint8 initNV( void )
   \                     initNV:
    238          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    239            osalNvPgHdr_t pgHdr;
    240            uint8 oldPg = OSAL_NV_PAGE_NULL;
   \   00000A   75..00       MOV     ?V0,#0x0
    241            uint8 findDups = FALSE;
   \   00000D   7F00         MOV     R7,#0x0
    242            uint8 pg;
    243          
    244            pgRes = OSAL_NV_PAGE_NULL;
   \   00000F   90....       MOV     DPTR,#pgRes
   \   000012   7400         MOV     A,#0x0
   \   000014   F0           MOVX    @DPTR,A
    245          
    246            for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
   \   000015   7E79         MOV     R6,#0x79
   \   000017   8013         SJMP    ??initNV_0
    247            {
    248              HalFlashRead(pg, OSAL_NV_PAGE_HDR_OFFSET, (uint8 *)(&pgHdr), OSAL_NV_HDR_SIZE);
    249          
    250              if ( pgHdr.active == OSAL_NV_ERASED_ID )
    251              {
    252                if ( pgRes == OSAL_NV_PAGE_NULL )
    253                {
    254                  pgRes = pg;
    255                }
    256                else
    257                {
    258                  setPageUse( pg, TRUE );
    259                }
    260              }
    261              // An Xfer from this page was in progress.
    262              else if ( pgHdr.xfer != OSAL_NV_ERASED_ID )
   \                     ??initNV_1:
   \   000019   7404         MOV     A,#0x4
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   64FF         XRL     A,#0xff
   \   000021   7004         JNZ     ??initNV_2
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   64FF         XRL     A,#0xff
   \                     ??initNV_2:
   \   000027   6002         JZ      ??initNV_3
    263              {
    264                oldPg = pg;
   \   000029   8E..         MOV     ?V0,R6
    265              }
   \                     ??initNV_3:
   \   00002B   0E           INC     R6
   \                     ??initNV_0:
   \   00002C   EE           MOV     A,R6
   \   00002D   C3           CLR     C
   \   00002E   947F         SUBB    A,#0x7f
   \   000030   5045         JNC     ??initNV_4
   \   000032                ; Setup parameters for call to function HalFlashRead
   \   000032   75..08       MOV     ?V2,#0x8
   \   000035   75..00       MOV     ?V3,#0x0
   \   000038   78..         MOV     R0,#?V2
   \   00003A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003D   7402         MOV     A,#0x2
   \   00003F   12....       LCALL   ?XSTACK_DISP102_8
   \   000042   7A00         MOV     R2,#0x0
   \   000044   7B00         MOV     R3,#0x0
   \   000046   EE           MOV     A,R6
   \   000047   F9           MOV     R1,A
   \   000048   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   00004B   7402         MOV     A,#0x2
   \   00004D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000050   85..82       MOV     DPL,?XSP + 0
   \   000053   85..83       MOV     DPH,?XSP + 1
   \   000056   E0           MOVX    A,@DPTR
   \   000057   64FF         XRL     A,#0xff
   \   000059   7004         JNZ     ??initNV_5
   \   00005B   A3           INC     DPTR
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   64FF         XRL     A,#0xff
   \                     ??initNV_5:
   \   00005F   70B8         JNZ     ??initNV_1
   \   000061   90....       MOV     DPTR,#pgRes
   \   000064   E0           MOVX    A,@DPTR
   \   000065   7007         JNZ     ??initNV_6
   \   000067   EE           MOV     A,R6
   \   000068   90....       MOV     DPTR,#pgRes
   \   00006B   F0           MOVX    @DPTR,A
   \   00006C   80BD         SJMP    ??initNV_3
   \                     ??initNV_6:
   \   00006E                ; Setup parameters for call to function setPageUse
   \   00006E   7A01         MOV     R2,#0x1
   \   000070   EE           MOV     A,R6
   \   000071   F9           MOV     R1,A
   \   000072   12....       LCALL   `??setPageUse::?relay`; Banked call to: setPageUse
   \   000075   80B4         SJMP    ??initNV_3
    266            }
    267          
    268            // If a page compaction was interrupted before the old page was erased.
    269            if ( oldPg != OSAL_NV_PAGE_NULL )
   \                     ??initNV_4:
   \   000077   E5..         MOV     A,?V0
   \   000079   6027         JZ      ??initNV_7
    270            {
    271              /* Interrupted compaction before the target of compaction was put in use;
    272               * so erase the target of compaction and start again.
    273               */
    274              if ( pgRes != OSAL_NV_PAGE_NULL )
   \   00007B   90....       MOV     DPTR,#pgRes
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   6014         JZ      ??initNV_8
    275              {
    276                erasePage( pgRes );
   \   000081                ; Setup parameters for call to function erasePage
   \   000081   90....       MOV     DPTR,#pgRes
   \   000084   E0           MOVX    A,@DPTR
   \   000085   F9           MOV     R1,A
   \   000086   12....       LCALL   `??erasePage::?relay`; Banked call to: erasePage
    277                (void)compactPage( oldPg, OSAL_NV_ITEM_NULL );
   \   000089                ; Setup parameters for call to function compactPage
   \   000089   7A00         MOV     R2,#0x0
   \   00008B   7B00         MOV     R3,#0x0
   \   00008D   A9..         MOV     R1,?V0
   \   00008F   12....       LCALL   `??compactPage::?relay`; Banked call to: compactPage
   \   000092   E9           MOV     A,R1
   \   000093   801B         SJMP    ??initNV_9
    278              }
    279              /* Interrupted compaction after the target of compaction was put in use,
    280               * but before the old page was erased; so erase it now and create a new reserve page.
    281               */
    282              else
    283              {
    284                erasePage( oldPg );
   \                     ??initNV_8:
   \   000095                ; Setup parameters for call to function erasePage
   \   000095   A9..         MOV     R1,?V0
   \   000097   12....       LCALL   `??erasePage::?relay`; Banked call to: erasePage
    285                pgRes = oldPg;
   \   00009A   E5..         MOV     A,?V0
   \   00009C   90....       MOV     DPTR,#pgRes
   \   00009F   F0           MOVX    @DPTR,A
   \   0000A0   800E         SJMP    ??initNV_9
    286              }
    287            }
    288            else if ( pgRes != OSAL_NV_PAGE_NULL )
   \                     ??initNV_7:
   \   0000A2   90....       MOV     DPTR,#pgRes
   \   0000A5   E0           MOVX    A,@DPTR
   \   0000A6   6008         JZ      ??initNV_9
    289            {
    290              erasePage( pgRes );  // The last page erase could have been interrupted by a power-cycle.
   \   0000A8                ; Setup parameters for call to function erasePage
   \   0000A8   90....       MOV     DPTR,#pgRes
   \   0000AB   E0           MOVX    A,@DPTR
   \   0000AC   F9           MOV     R1,A
   \   0000AD   12....       LCALL   `??erasePage::?relay`; Banked call to: erasePage
    291            }
    292            /* else if there is no reserve page, COMPACT_PAGE_CLEANUP() must have succeeded to put the old
    293             * reserve page (i.e. the target of the compacted items) into use but got interrupted by a reset
    294             * while trying to erase the page to be compacted. Such a page should only contain duplicate items
    295             * (i.e. all items will be marked 'Xfer') and thus should have the lost count equal to the page
    296             * size less the page header.
    297             */
    298          
    299            for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
   \                     ??initNV_9:
   \   0000B0   7E79         MOV     R6,#0x79
   \   0000B2   801A         SJMP    ??initNV_10
    300            {
    301              // Calculate page offset and lost bytes - any "old" item triggers an N^2 re-scan from start.
    302              if ( initPage( pg, OSAL_NV_ITEM_NULL, findDups ) != OSAL_NV_ITEM_NULL )
   \                     ??initNV_11:
   \   0000B4                ; Setup parameters for call to function initPage
   \   0000B4   EF           MOV     A,R7
   \   0000B5   FC           MOV     R4,A
   \   0000B6   7A00         MOV     R2,#0x0
   \   0000B8   7B00         MOV     R3,#0x0
   \   0000BA   EE           MOV     A,R6
   \   0000BB   F9           MOV     R1,A
   \   0000BC   12....       LCALL   `??initPage::?relay` ; Banked call to: initPage
   \   0000BF   8A..         MOV     ?V2,R2
   \   0000C1   8B..         MOV     ?V3,R3
   \   0000C3   E5..         MOV     A,?V2
   \   0000C5   45..         ORL     A,?V3
   \   0000C7   6004         JZ      ??initNV_12
    303              {
    304                findDups = TRUE;
   \   0000C9   7F01         MOV     R7,#0x1
    305                pg = (OSAL_NV_PAGE_BEG - 1);  // Pre-decrement so that loop increment will start over at zero.
   \   0000CB   7E78         MOV     R6,#0x78
    306                continue;
    307              }
    308            }
   \                     ??initNV_12:
   \   0000CD   0E           INC     R6
   \                     ??initNV_10:
   \   0000CE   EE           MOV     A,R6
   \   0000CF   C3           CLR     C
   \   0000D0   947F         SUBB    A,#0x7f
   \   0000D2   40E0         JC      ??initNV_11
    309          
    310            if (findDups)
   \   0000D4   EF           MOV     A,R7
   \   0000D5   601E         JZ      ??initNV_13
    311            {
    312              // Final pass to calculate page lost after invalidating duplicate items.
    313              for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
   \   0000D7   7E79         MOV     R6,#0x79
   \   0000D9   8014         SJMP    ??initNV_14
    314              {
    315                (void)initPage( pg, OSAL_NV_ITEM_NULL, FALSE );
   \                     ??initNV_15:
   \   0000DB                ; Setup parameters for call to function initPage
   \   0000DB   7C00         MOV     R4,#0x0
   \   0000DD   7A00         MOV     R2,#0x0
   \   0000DF   7B00         MOV     R3,#0x0
   \   0000E1   EE           MOV     A,R6
   \   0000E2   F9           MOV     R1,A
   \   0000E3   12....       LCALL   `??initPage::?relay` ; Banked call to: initPage
   \   0000E6   8A..         MOV     ?V2,R2
   \   0000E8   8B..         MOV     ?V3,R3
   \   0000EA   A8..         MOV     R0,?V2
   \   0000EC   A9..         MOV     R1,?V3
    316              }
   \   0000EE   0E           INC     R6
   \                     ??initNV_14:
   \   0000EF   EE           MOV     A,R6
   \   0000F0   C3           CLR     C
   \   0000F1   947F         SUBB    A,#0x7f
   \   0000F3   40E6         JC      ??initNV_15
    317            }
    318          
    319            if ( pgRes == OSAL_NV_PAGE_NULL )
   \                     ??initNV_13:
   \   0000F5   90....       MOV     DPTR,#pgRes
   \   0000F8   E0           MOVX    A,@DPTR
   \   0000F9   6003         JZ      $+5
   \   0000FB   02....       LJMP    ??initNV_16 & 0xFFFF
    320            {
    321              uint8 idx, mostLost = 0;
   \   0000FE   7E00         MOV     R6,#0x0
    322          
    323              for ( idx = 0; idx < OSAL_NV_PAGES_USED; idx++ )
   \   000100   7A00         MOV     R2,#0x0
   \   000102   805E         SJMP    ??initNV_17
    324              {
    325                // Is this the page that was compacted?
    326                if (pgLost[idx] == (OSAL_NV_PAGE_SIZE - OSAL_NV_PAGE_HDR_SIZE))
    327                {
    328                  mostLost = idx;
    329                  break;
    330                }
    331                /* This check is not expected to be necessary because the above test should always succeed
    332                 * with an early loop exit.
    333                 */
    334                else if (pgLost[idx] > pgLost[mostLost])
   \                     ??initNV_18:
   \   000104   EE           MOV     A,R6
   \   000105   F8           MOV     R0,A
   \   000106   7900         MOV     R1,#0x0
   \   000108   E8           MOV     A,R0
   \   000109   75F002       MOV     B,#0x2
   \   00010C   A4           MUL     AB
   \   00010D   C8           XCH     A,R0
   \   00010E   ABF0         MOV     R3,B
   \   000110   75F000       MOV     B,#0x0
   \   000113   A4           MUL     AB
   \   000114   2B           ADD     A,R3
   \   000115   FB           MOV     R3,A
   \   000116   75F002       MOV     B,#0x2
   \   000119   E9           MOV     A,R1
   \   00011A   A4           MUL     AB
   \   00011B   2B           ADD     A,R3
   \   00011C   F9           MOV     R1,A
   \   00011D   74..         MOV     A,#pgLost & 0xff
   \   00011F   28           ADD     A,R0
   \   000120   F582         MOV     DPL,A
   \   000122   74..         MOV     A,#(pgLost >> 8) & 0xff
   \   000124   39           ADDC    A,R1
   \   000125   F583         MOV     DPH,A
   \   000127   C082         PUSH    DPL
   \   000129   C083         PUSH    DPH
   \   00012B   EA           MOV     A,R2
   \   00012C   F8           MOV     R0,A
   \   00012D   7900         MOV     R1,#0x0
   \   00012F   E8           MOV     A,R0
   \   000130   75F002       MOV     B,#0x2
   \   000133   A4           MUL     AB
   \   000134   C8           XCH     A,R0
   \   000135   ABF0         MOV     R3,B
   \   000137   75F000       MOV     B,#0x0
   \   00013A   A4           MUL     AB
   \   00013B   2B           ADD     A,R3
   \   00013C   FB           MOV     R3,A
   \   00013D   75F002       MOV     B,#0x2
   \   000140   E9           MOV     A,R1
   \   000141   A4           MUL     AB
   \   000142   2B           ADD     A,R3
   \   000143   F9           MOV     R1,A
   \   000144   74..         MOV     A,#pgLost & 0xff
   \   000146   28           ADD     A,R0
   \   000147   F582         MOV     DPL,A
   \   000149   74..         MOV     A,#(pgLost >> 8) & 0xff
   \   00014B   39           ADDC    A,R1
   \   00014C   F583         MOV     DPH,A
   \   00014E   E0           MOVX    A,@DPTR
   \   00014F   F8           MOV     R0,A
   \   000150   A3           INC     DPTR
   \   000151   E0           MOVX    A,@DPTR
   \   000152   F9           MOV     R1,A
   \   000153   D083         POP     DPH
   \   000155   D082         POP     DPL
   \   000157   C3           CLR     C
   \   000158   E0           MOVX    A,@DPTR
   \   000159   98           SUBB    A,R0
   \   00015A   A3           INC     DPTR
   \   00015B   E0           MOVX    A,@DPTR
   \   00015C   99           SUBB    A,R1
   \   00015D   5002         JNC     ??initNV_19
    335                {
    336                  mostLost = idx;
   \   00015F   EA           MOV     A,R2
   \   000160   FE           MOV     R6,A
    337                }
   \                     ??initNV_19:
   \   000161   0A           INC     R2
   \                     ??initNV_17:
   \   000162   EA           MOV     A,R2
   \   000163   C3           CLR     C
   \   000164   9406         SUBB    A,#0x6
   \   000166   5033         JNC     ??initNV_20
   \   000168   EA           MOV     A,R2
   \   000169   F8           MOV     R0,A
   \   00016A   7900         MOV     R1,#0x0
   \   00016C   E8           MOV     A,R0
   \   00016D   75F002       MOV     B,#0x2
   \   000170   A4           MUL     AB
   \   000171   C8           XCH     A,R0
   \   000172   ABF0         MOV     R3,B
   \   000174   75F000       MOV     B,#0x0
   \   000177   A4           MUL     AB
   \   000178   2B           ADD     A,R3
   \   000179   FB           MOV     R3,A
   \   00017A   75F002       MOV     B,#0x2
   \   00017D   E9           MOV     A,R1
   \   00017E   A4           MUL     AB
   \   00017F   2B           ADD     A,R3
   \   000180   F9           MOV     R1,A
   \   000181   74..         MOV     A,#pgLost & 0xff
   \   000183   28           ADD     A,R0
   \   000184   F582         MOV     DPL,A
   \   000186   74..         MOV     A,#(pgLost >> 8) & 0xff
   \   000188   39           ADDC    A,R1
   \   000189   F583         MOV     DPH,A
   \   00018B   E0           MOVX    A,@DPTR
   \   00018C   64F8         XRL     A,#0xf8
   \   00018E   7004         JNZ     ??initNV_21
   \   000190   A3           INC     DPTR
   \   000191   E0           MOVX    A,@DPTR
   \   000192   6407         XRL     A,#0x7
   \                     ??initNV_21:
   \   000194   6003         JZ      $+5
   \   000196   02....       LJMP    ??initNV_18 & 0xFFFF
   \   000199   EA           MOV     A,R2
   \   00019A   FE           MOV     R6,A
    338              }
    339          
    340              pgRes = mostLost + OSAL_NV_PAGE_BEG;
   \                     ??initNV_20:
   \   00019B   7479         MOV     A,#0x79
   \   00019D   2E           ADD     A,R6
   \   00019E   90....       MOV     DPTR,#pgRes
   \   0001A1   F0           MOVX    @DPTR,A
    341              erasePage( pgRes );  // The last page erase had been interrupted by a power-cycle.
   \   0001A2                ; Setup parameters for call to function erasePage
   \   0001A2   90....       MOV     DPTR,#pgRes
   \   0001A5   E0           MOVX    A,@DPTR
   \   0001A6   F9           MOV     R1,A
   \   0001A7   12....       LCALL   `??erasePage::?relay`; Banked call to: erasePage
    342            }
    343          
    344            return TRUE;
   \                     ??initNV_16:
   \   0001AA   7901         MOV     R1,#0x1
   \   0001AC   7408         MOV     A,#0x8
   \   0001AE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001B1   7F04         MOV     R7,#0x4
   \   0001B3   02....       LJMP    ?BANKED_LEAVE_XDATA
    345          }
    346          
    347          /*********************************************************************
    348           * @fn      setPageUse
    349           *
    350           * @brief   Set page header active/inUse state according to 'inUse'.
    351           *
    352           * @param   pg - Valid NV page to verify and init.
    353           * @param   inUse - Boolean TRUE if inUse, FALSE if only active.
    354           *
    355           * @return  none
    356           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    357          static void setPageUse( uint8 pg, uint8 inUse )
   \                     setPageUse:
    358          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EA           MOV     A,R2
   \   00000D   FF           MOV     R7,A
    359            osalNvPgHdr_t pgHdr;
    360          
    361            pgHdr.active = OSAL_NV_ZEROED_ID;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   7400         MOV     A,#0x0
   \   000016   F0           MOVX    @DPTR,A
   \   000017   A3           INC     DPTR
   \   000018   7400         MOV     A,#0x0
   \   00001A   F0           MOVX    @DPTR,A
    362          
    363            if ( inUse )
   \   00001B   EF           MOV     A,R7
   \   00001C   600E         JZ      ??setPageUse_0
    364            {
    365              pgHdr.inUse = OSAL_NV_ZEROED_ID;
   \   00001E   7402         MOV     A,#0x2
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   7400         MOV     A,#0x0
   \   000025   F0           MOVX    @DPTR,A
   \   000026   A3           INC     DPTR
   \   000027   7400         MOV     A,#0x0
   \   000029   F0           MOVX    @DPTR,A
   \   00002A   800C         SJMP    ??setPageUse_1
    366            }
    367            else
    368            {
    369              pgHdr.inUse = OSAL_NV_ERASED_ID;
   \                     ??setPageUse_0:
   \   00002C   7402         MOV     A,#0x2
   \   00002E   12....       LCALL   ?XSTACK_DISP0_8
   \   000031   74FF         MOV     A,#-0x1
   \   000033   F0           MOVX    @DPTR,A
   \   000034   A3           INC     DPTR
   \   000035   74FF         MOV     A,#-0x1
   \   000037   F0           MOVX    @DPTR,A
    370            }
    371          
    372            writeWord( pg, OSAL_NV_PAGE_HDR_OFFSET, (uint8*)(&pgHdr) );
   \                     ??setPageUse_1:
   \   000038                ; Setup parameters for call to function writeWord
   \   000038   AC..         MOV     R4,?XSP + 0
   \   00003A   AD..         MOV     R5,?XSP + 1
   \   00003C   7A00         MOV     R2,#0x0
   \   00003E   7B00         MOV     R3,#0x0
   \   000040   EE           MOV     A,R6
   \   000041   F9           MOV     R1,A
   \   000042   12....       LCALL   `??writeWord::?relay`; Banked call to: writeWord
    373          }
   \   000045   7408         MOV     A,#0x8
   \   000047   12....       LCALL   ?DEALLOC_XSTACK8
   \   00004A   7F01         MOV     R7,#0x1
   \   00004C   02....       LJMP    ?BANKED_LEAVE_XDATA
    374          
    375          /*********************************************************************
    376           * @fn      initPage
    377           *
    378           * @brief   Walk the page items; calculate checksums, lost bytes & page offset.
    379           *
    380           * @param   pg - Valid NV page to verify and init.
    381           * @param   id - Valid NV item Id to use function as a "findItem".
    382           *               If set to NULL then just perform the page initialization.
    383           * @param   findDups - TRUE on recursive call from initNV() to find and zero-out duplicate items
    384           *                     left from a write that is interrupted by a reset/power-cycle.
    385           *                     FALSE otherwise.
    386           *
    387           * @return  If 'id' is non-NULL and good checksums are found, return the offset
    388           *          of the data corresponding to item Id; else OSAL_NV_ITEM_NULL.
    389           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    390          static uint16 initPage( uint8 pg, uint16 id, uint8 findDups )
   \                     initPage:
    391          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V2,R1
   \   00000C   8A..         MOV     ?V4,R2
   \   00000E   8B..         MOV     ?V5,R3
   \   000010   8C..         MOV     ?V3,R4
    392            uint16 offset = OSAL_NV_PAGE_HDR_SIZE;
   \   000012   7E08         MOV     R6,#0x8
   \   000014   7F00         MOV     R7,#0x0
    393            uint16 sz, lost = 0;
   \   000016   75..00       MOV     ?V0,#0x0
   \   000019   75..00       MOV     ?V1,#0x0
    394            osalNvHdr_t hdr;
    395          
    396            do
    397            {
    398              HalFlashRead(pg, offset, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \                     ??initPage_0:
   \   00001C                ; Setup parameters for call to function HalFlashRead
   \   00001C   75..08       MOV     ?V6,#0x8
   \   00001F   75..00       MOV     ?V7,#0x0
   \   000022   78..         MOV     R0,#?V6
   \   000024   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000027   7402         MOV     A,#0x2
   \   000029   12....       LCALL   ?XSTACK_DISP102_8
   \   00002C   EE           MOV     A,R6
   \   00002D   FA           MOV     R2,A
   \   00002E   EF           MOV     A,R7
   \   00002F   FB           MOV     R3,A
   \   000030   A9..         MOV     R1,?V2
   \   000032   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000035   7402         MOV     A,#0x2
   \   000037   12....       LCALL   ?DEALLOC_XSTACK8
    399          
    400              if ( hdr.id == OSAL_NV_ERASED_ID )
   \   00003A   85..82       MOV     DPL,?XSP + 0
   \   00003D   85..83       MOV     DPH,?XSP + 1
   \   000040   E0           MOVX    A,@DPTR
   \   000041   64FF         XRL     A,#0xff
   \   000043   7004         JNZ     ??initPage_1
   \   000045   A3           INC     DPTR
   \   000046   E0           MOVX    A,@DPTR
   \   000047   64FF         XRL     A,#0xff
   \                     ??initPage_1:
   \   000049   7003         JNZ     $+5
   \   00004B   02....       LJMP    ??initPage_2 & 0xFFFF
    401              {
    402                break;
    403              }
    404          
    405              // Get the actual size in bytes which is the ceiling(hdr.len)
    406              sz = OSAL_NV_DATA_SIZE( hdr.len );
   \   00004E   7402         MOV     A,#0x2
   \   000050   12....       LCALL   ?XSTACK_DISP0_8
   \   000053   C3           CLR     C
   \   000054   E0           MOVX    A,@DPTR
   \   000055   94FC         SUBB    A,#-0x4
   \   000057   A3           INC     DPTR
   \   000058   E0           MOVX    A,@DPTR
   \   000059   94FF         SUBB    A,#-0x1
   \   00005B   4008         JC      ??initPage_3
   \   00005D   75..FC       MOV     ?V6,#-0x4
   \   000060   75..FF       MOV     ?V7,#-0x1
   \   000063   8030         SJMP    ??initPage_4
   \                     ??initPage_3:
   \   000065   7402         MOV     A,#0x2
   \   000067   12....       LCALL   ?XSTACK_DISP0_8
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   2403         ADD     A,#0x3
   \   00006D   F5..         MOV     ?V6,A
   \   00006F   A3           INC     DPTR
   \   000070   E0           MOVX    A,@DPTR
   \   000071   3400         ADDC    A,#0x0
   \   000073   F5..         MOV     ?V7,A
   \   000075   7402         MOV     A,#0x2
   \   000077   78..         MOV     R0,#?V6
   \   000079   12....       LCALL   ?US_SHR
   \   00007C   E5..         MOV     A,?V6
   \   00007E   75F004       MOV     B,#0x4
   \   000081   A4           MUL     AB
   \   000082   C5..         XCH     A,?V6
   \   000084   A8F0         MOV     R0,B
   \   000086   75F000       MOV     B,#0x0
   \   000089   A4           MUL     AB
   \   00008A   28           ADD     A,R0
   \   00008B   F8           MOV     R0,A
   \   00008C   75F004       MOV     B,#0x4
   \   00008F   E5..         MOV     A,?V7
   \   000091   A4           MUL     AB
   \   000092   28           ADD     A,R0
   \   000093   F5..         MOV     ?V7,A
    407          
    408              // A bad 'len' write has blown away the rest of the page.
    409              if (sz > (OSAL_NV_PAGE_SIZE - OSAL_NV_HDR_SIZE - offset))
   \                     ??initPage_4:
   \   000095   74F8         MOV     A,#-0x8
   \   000097   C3           CLR     C
   \   000098   9E           SUBB    A,R6
   \   000099   F8           MOV     R0,A
   \   00009A   7407         MOV     A,#0x7
   \   00009C   9F           SUBB    A,R7
   \   00009D   F9           MOV     R1,A
   \   00009E   C3           CLR     C
   \   00009F   E8           MOV     A,R0
   \   0000A0   95..         SUBB    A,?V6
   \   0000A2   E9           MOV     A,R1
   \   0000A3   95..         SUBB    A,?V7
   \   0000A5   501E         JNC     ??initPage_5
    410              {
    411                lost += (OSAL_NV_PAGE_SIZE - offset);
   \   0000A7   E5..         MOV     A,?V0
   \   0000A9   2400         ADD     A,#0x0
   \   0000AB   F5..         MOV     ?V0,A
   \   0000AD   E5..         MOV     A,?V1
   \   0000AF   3408         ADDC    A,#0x8
   \   0000B1   F5..         MOV     ?V1,A
   \   0000B3   C3           CLR     C
   \   0000B4   E5..         MOV     A,?V0
   \   0000B6   9E           SUBB    A,R6
   \   0000B7   F5..         MOV     ?V0,A
   \   0000B9   E5..         MOV     A,?V1
   \   0000BB   9F           SUBB    A,R7
   \   0000BC   F5..         MOV     ?V1,A
    412                offset = OSAL_NV_PAGE_SIZE;
   \   0000BE   7E00         MOV     R6,#0x0
   \   0000C0   7F08         MOV     R7,#0x8
    413                break;
   \   0000C2   02....       LJMP    ??initPage_2 & 0xFFFF
    414              }
    415          
    416              offset += OSAL_NV_HDR_SIZE;
   \                     ??initPage_5:
   \   0000C5   EE           MOV     A,R6
   \   0000C6   2408         ADD     A,#0x8
   \   0000C8   FE           MOV     R6,A
   \   0000C9   EF           MOV     A,R7
   \   0000CA   3400         ADDC    A,#0x0
   \   0000CC   FF           MOV     R7,A
    417          
    418              if ( hdr.id != OSAL_NV_ZEROED_ID )
   \   0000CD   85..82       MOV     DPL,?XSP + 0
   \   0000D0   85..83       MOV     DPH,?XSP + 1
   \   0000D3   E0           MOVX    A,@DPTR
   \   0000D4   F8           MOV     R0,A
   \   0000D5   A3           INC     DPTR
   \   0000D6   E0           MOVX    A,@DPTR
   \   0000D7   F9           MOV     R1,A
   \   0000D8   E8           MOV     A,R0
   \   0000D9   49           ORL     A,R1
   \   0000DA   7003         JNZ     $+5
   \   0000DC   02....       LJMP    ??initPage_6 & 0xFFFF
    419              {
    420                /* This trick allows function to do double duty for findItem() without
    421                 * compromising its essential functionality at powerup initialization.
    422                 */
    423                if ( id != OSAL_NV_ITEM_NULL )
   \   0000DF   E5..         MOV     A,?V4
   \   0000E1   45..         ORL     A,?V5
   \   0000E3   6065         JZ      ??initPage_7
    424                {
    425                  /* This trick allows asking to find the old/transferred item in case
    426                   * of a successful new item write that gets interrupted before the
    427                   * old item can be zeroed out.
    428                   */
    429                  if ( (id & 0x7fff) == hdr.id )
   \   0000E5   E5..         MOV     A,?V4
   \   0000E7   54FF         ANL     A,#0xff
   \   0000E9   F8           MOV     R0,A
   \   0000EA   E5..         MOV     A,?V5
   \   0000EC   547F         ANL     A,#0x7f
   \   0000EE   F9           MOV     R1,A
   \   0000EF   85..82       MOV     DPL,?XSP + 0
   \   0000F2   85..83       MOV     DPH,?XSP + 1
   \   0000F5   E0           MOVX    A,@DPTR
   \   0000F6   68           XRL     A,R0
   \   0000F7   7003         JNZ     ??initPage_8
   \   0000F9   A3           INC     DPTR
   \   0000FA   E0           MOVX    A,@DPTR
   \   0000FB   69           XRL     A,R1
   \                     ??initPage_8:
   \   0000FC   6003         JZ      $+5
   \   0000FE   02....       LJMP    ??initPage_9 & 0xFFFF
    430                  {
    431                    if ( (((id & OSAL_NV_SOURCE_ID) == 0) && (hdr.stat == OSAL_NV_ERASED_ID)) ||
    432                         (((id & OSAL_NV_SOURCE_ID) != 0) && (hdr.stat != OSAL_NV_ERASED_ID)) )
   \   000101   E5..         MOV     A,?V4
   \   000103   5400         ANL     A,#0x0
   \   000105   F8           MOV     R0,A
   \   000106   E5..         MOV     A,?V5
   \   000108   5480         ANL     A,#0x80
   \   00010A   F9           MOV     R1,A
   \   00010B   E8           MOV     A,R0
   \   00010C   49           ORL     A,R1
   \   00010D   7010         JNZ     ??initPage_10
   \   00010F   7406         MOV     A,#0x6
   \   000111   12....       LCALL   ?XSTACK_DISP0_8
   \   000114   E0           MOVX    A,@DPTR
   \   000115   64FF         XRL     A,#0xff
   \   000117   7004         JNZ     ??initPage_11
   \   000119   A3           INC     DPTR
   \   00011A   E0           MOVX    A,@DPTR
   \   00011B   64FF         XRL     A,#0xff
   \                     ??initPage_11:
   \   00011D   6024         JZ      ??initPage_12
   \                     ??initPage_10:
   \   00011F   E5..         MOV     A,?V4
   \   000121   5400         ANL     A,#0x0
   \   000123   F8           MOV     R0,A
   \   000124   E5..         MOV     A,?V5
   \   000126   5480         ANL     A,#0x80
   \   000128   F9           MOV     R1,A
   \   000129   E8           MOV     A,R0
   \   00012A   49           ORL     A,R1
   \   00012B   7003         JNZ     $+5
   \   00012D   02....       LJMP    ??initPage_9 & 0xFFFF
   \   000130   7406         MOV     A,#0x6
   \   000132   12....       LCALL   ?XSTACK_DISP0_8
   \   000135   E0           MOVX    A,@DPTR
   \   000136   64FF         XRL     A,#0xff
   \   000138   7004         JNZ     ??initPage_13
   \   00013A   A3           INC     DPTR
   \   00013B   E0           MOVX    A,@DPTR
   \   00013C   64FF         XRL     A,#0xff
   \                     ??initPage_13:
   \   00013E   7003         JNZ     $+5
   \   000140   02....       LJMP    ??initPage_9 & 0xFFFF
    433                    {
    434                      return offset;
   \                     ??initPage_12:
   \   000143   EE           MOV     A,R6
   \   000144   FA           MOV     R2,A
   \   000145   EF           MOV     A,R7
   \   000146   FB           MOV     R3,A
   \   000147   02....       LJMP    ??initPage_14 & 0xFFFF
    435                    }
    436                  }
    437                }
    438                // When invoked from the osal_nv_init(), verify checksums and find & zero any duplicates.
    439                else
    440                {
    441                  if ( hdr.chk == calcChkF( pg, offset, hdr.len ) )
   \                     ??initPage_7:
   \   00014A                ; Setup parameters for call to function calcChkF
   \   00014A   7402         MOV     A,#0x2
   \   00014C   12....       LCALL   ?XSTACK_DISP0_8
   \   00014F   E0           MOVX    A,@DPTR
   \   000150   FC           MOV     R4,A
   \   000151   A3           INC     DPTR
   \   000152   E0           MOVX    A,@DPTR
   \   000153   FD           MOV     R5,A
   \   000154   EE           MOV     A,R6
   \   000155   FA           MOV     R2,A
   \   000156   EF           MOV     A,R7
   \   000157   FB           MOV     R3,A
   \   000158   A9..         MOV     R1,?V2
   \   00015A   12....       LCALL   `??calcChkF::?relay` ; Banked call to: calcChkF
   \   00015D   8A..         MOV     ?V8,R2
   \   00015F   8B..         MOV     ?V9,R3
   \   000161   A8..         MOV     R0,?V8
   \   000163   A9..         MOV     R1,?V9
   \   000165   7404         MOV     A,#0x4
   \   000167   12....       LCALL   ?XSTACK_DISP0_8
   \   00016A   E0           MOVX    A,@DPTR
   \   00016B   68           XRL     A,R0
   \   00016C   7003         JNZ     ??initPage_15
   \   00016E   A3           INC     DPTR
   \   00016F   E0           MOVX    A,@DPTR
   \   000170   69           XRL     A,R1
   \                     ??initPage_15:
   \   000171   7055         JNZ     ??initPage_16
    442                  {
    443                    if ( findDups )
   \   000173   E5..         MOV     A,?V3
   \   000175   603A         JZ      ??initPage_17
    444                    {
    445                      if ( hdr.stat == OSAL_NV_ERASED_ID )
   \   000177   7406         MOV     A,#0x6
   \   000179   12....       LCALL   ?XSTACK_DISP0_8
   \   00017C   E0           MOVX    A,@DPTR
   \   00017D   64FF         XRL     A,#0xff
   \   00017F   7004         JNZ     ??initPage_18
   \   000181   A3           INC     DPTR
   \   000182   E0           MOVX    A,@DPTR
   \   000183   64FF         XRL     A,#0xff
   \                     ??initPage_18:
   \   000185   7074         JNZ     ??initPage_9
    446                      {
    447                        /* The trick of setting the MSB of the item Id causes the logic
    448                         * immediately above to return a valid page only if the header 'stat'
    449                         * indicates that it was the older item being transferred.
    450                         */
    451                        uint16 off = findItem( (hdr.id | OSAL_NV_SOURCE_ID) );
   \   000187                ; Setup parameters for call to function findItem
   \   000187   85..82       MOV     DPL,?XSP + 0
   \   00018A   85..83       MOV     DPH,?XSP + 1
   \   00018D   E0           MOVX    A,@DPTR
   \   00018E   4400         ORL     A,#0x0
   \   000190   FA           MOV     R2,A
   \   000191   A3           INC     DPTR
   \   000192   E0           MOVX    A,@DPTR
   \   000193   4480         ORL     A,#0x80
   \   000195   FB           MOV     R3,A
   \   000196   12....       LCALL   `??findItem::?relay` ; Banked call to: findItem
   \   000199   8A..         MOV     ?V8,R2
   \   00019B   8B..         MOV     ?V9,R3
   \   00019D   AA..         MOV     R2,?V8
   \   00019F   AB..         MOV     R3,?V9
    452          
    453                        if ( off != OSAL_NV_ITEM_NULL )
   \   0001A1   EA           MOV     A,R2
   \   0001A2   4B           ORL     A,R3
   \   0001A3   6056         JZ      ??initPage_9
    454                        {
    455                          setItem( findPg, off, eNvZero );  // Mark old duplicate as invalid.
   \   0001A5                ; Setup parameters for call to function setItem
   \   0001A5   7C01         MOV     R4,#0x1
   \   0001A7   90....       MOV     DPTR,#findPg
   \   0001AA   E0           MOVX    A,@DPTR
   \   0001AB   F9           MOV     R1,A
   \   0001AC   12....       LCALL   `??setItem::?relay`  ; Banked call to: setItem
   \   0001AF   804A         SJMP    ??initPage_9
    456                        }
    457                      }
    458                    }
    459                    // Any "old" item immediately exits and triggers the N^2 exhaustive initialization.
    460                    else if ( hdr.stat != OSAL_NV_ERASED_ID )
   \                     ??initPage_17:
   \   0001B1   7406         MOV     A,#0x6
   \   0001B3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B6   E0           MOVX    A,@DPTR
   \   0001B7   64FF         XRL     A,#0xff
   \   0001B9   7004         JNZ     ??initPage_19
   \   0001BB   A3           INC     DPTR
   \   0001BC   E0           MOVX    A,@DPTR
   \   0001BD   64FF         XRL     A,#0xff
   \                     ??initPage_19:
   \   0001BF   603A         JZ      ??initPage_9
    461                    {
    462                      return OSAL_NV_ERASED_ID;
   \   0001C1   7AFF         MOV     R2,#-0x1
   \   0001C3   7BFF         MOV     R3,#-0x1
   \   0001C5   02....       LJMP    ??initPage_14 & 0xFFFF
    463                    }
    464                  }
    465                  else
    466                  {
    467                    setItem( pg, offset, eNvZero );  // Mark bad checksum as invalid.
   \                     ??initPage_16:
   \   0001C8                ; Setup parameters for call to function setItem
   \   0001C8   7C01         MOV     R4,#0x1
   \   0001CA   EE           MOV     A,R6
   \   0001CB   FA           MOV     R2,A
   \   0001CC   EF           MOV     A,R7
   \   0001CD   FB           MOV     R3,A
   \   0001CE   A9..         MOV     R1,?V2
   \   0001D0   12....       LCALL   `??setItem::?relay`  ; Banked call to: setItem
    468                    lost += (OSAL_NV_HDR_SIZE + sz);
   \   0001D3   E5..         MOV     A,?V6
   \   0001D5   2408         ADD     A,#0x8
   \   0001D7   F8           MOV     R0,A
   \   0001D8   E4           CLR     A
   \   0001D9   35..         ADDC    A,?V7
   \   0001DB   F9           MOV     R1,A
   \   0001DC   E5..         MOV     A,?V0
   \   0001DE   28           ADD     A,R0
   \   0001DF   F5..         MOV     ?V0,A
   \   0001E1   E5..         MOV     A,?V1
   \   0001E3   39           ADDC    A,R1
   \   0001E4   F5..         MOV     ?V1,A
   \   0001E6   8013         SJMP    ??initPage_9
    469                  }
    470                }
    471              }
    472              else
    473              {
    474                lost += (OSAL_NV_HDR_SIZE + sz);
   \                     ??initPage_6:
   \   0001E8   E5..         MOV     A,?V6
   \   0001EA   2408         ADD     A,#0x8
   \   0001EC   F8           MOV     R0,A
   \   0001ED   E4           CLR     A
   \   0001EE   35..         ADDC    A,?V7
   \   0001F0   F9           MOV     R1,A
   \   0001F1   E5..         MOV     A,?V0
   \   0001F3   28           ADD     A,R0
   \   0001F4   F5..         MOV     ?V0,A
   \   0001F6   E5..         MOV     A,?V1
   \   0001F8   39           ADDC    A,R1
   \   0001F9   F5..         MOV     ?V1,A
    475              }
    476              offset += sz;
   \                     ??initPage_9:
   \   0001FB   EE           MOV     A,R6
   \   0001FC   25..         ADD     A,?V6
   \   0001FE   FE           MOV     R6,A
   \   0001FF   EF           MOV     A,R7
   \   000200   35..         ADDC    A,?V7
   \   000202   FF           MOV     R7,A
    477          
    478            } while (offset < (OSAL_NV_PAGE_SIZE - OSAL_NV_HDR_SIZE));
   \   000203   C3           CLR     C
   \   000204   EE           MOV     A,R6
   \   000205   94F8         SUBB    A,#-0x8
   \   000207   EF           MOV     A,R7
   \   000208   9407         SUBB    A,#0x7
   \   00020A   5003         JNC     $+5
   \   00020C   02....       LJMP    ??initPage_0 & 0xFFFF
    479          
    480            pgOff[pg - OSAL_NV_PAGE_BEG] = offset;
   \                     ??initPage_2:
   \   00020F   A8..         MOV     R0,?V2
   \   000211   7900         MOV     R1,#0x0
   \   000213   E8           MOV     A,R0
   \   000214   75F002       MOV     B,#0x2
   \   000217   A4           MUL     AB
   \   000218   C8           XCH     A,R0
   \   000219   AAF0         MOV     R2,B
   \   00021B   75F000       MOV     B,#0x0
   \   00021E   A4           MUL     AB
   \   00021F   2A           ADD     A,R2
   \   000220   FA           MOV     R2,A
   \   000221   75F002       MOV     B,#0x2
   \   000224   E9           MOV     A,R1
   \   000225   A4           MUL     AB
   \   000226   2A           ADD     A,R2
   \   000227   F9           MOV     R1,A
   \   000228   74..         MOV     A,#(pgOff + 14) & 0xff
   \   00022A   28           ADD     A,R0
   \   00022B   F582         MOV     DPL,A
   \   00022D   74..         MOV     A,#((pgOff - 242) >> 8) & 0xff
   \   00022F   39           ADDC    A,R1
   \   000230   F583         MOV     DPH,A
   \   000232   EE           MOV     A,R6
   \   000233   F0           MOVX    @DPTR,A
   \   000234   A3           INC     DPTR
   \   000235   EF           MOV     A,R7
   \   000236   F0           MOVX    @DPTR,A
    481            pgLost[pg - OSAL_NV_PAGE_BEG] = lost;
   \   000237   A8..         MOV     R0,?V2
   \   000239   7900         MOV     R1,#0x0
   \   00023B   E8           MOV     A,R0
   \   00023C   75F002       MOV     B,#0x2
   \   00023F   A4           MUL     AB
   \   000240   C8           XCH     A,R0
   \   000241   AAF0         MOV     R2,B
   \   000243   75F000       MOV     B,#0x0
   \   000246   A4           MUL     AB
   \   000247   2A           ADD     A,R2
   \   000248   FA           MOV     R2,A
   \   000249   75F002       MOV     B,#0x2
   \   00024C   E9           MOV     A,R1
   \   00024D   A4           MUL     AB
   \   00024E   2A           ADD     A,R2
   \   00024F   F9           MOV     R1,A
   \   000250   74..         MOV     A,#(pgLost + 14) & 0xff
   \   000252   28           ADD     A,R0
   \   000253   F582         MOV     DPL,A
   \   000255   74..         MOV     A,#((pgLost - 242) >> 8) & 0xff
   \   000257   39           ADDC    A,R1
   \   000258   F583         MOV     DPH,A
   \   00025A   E5..         MOV     A,?V0
   \   00025C   F0           MOVX    @DPTR,A
   \   00025D   A3           INC     DPTR
   \   00025E   E5..         MOV     A,?V1
   \   000260   F0           MOVX    @DPTR,A
    482          
    483            return OSAL_NV_ITEM_NULL;
   \   000261   7A00         MOV     R2,#0x0
   \   000263   7B00         MOV     R3,#0x0
   \                     ??initPage_14:
   \   000265   7408         MOV     A,#0x8
   \   000267   12....       LCALL   ?DEALLOC_XSTACK8
   \   00026A   7F0A         MOV     R7,#0xa
   \   00026C   02....       LJMP    ?BANKED_LEAVE_XDATA
    484          }
    485          
    486          /*********************************************************************
    487           * @fn      erasePage
    488           *
    489           * @brief   Erases a page in Flash.
    490           *
    491           * @param   pg - Valid NV page to erase.
    492           *
    493           * @return  none
    494           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    495          static void erasePage( uint8 pg )
   \                     erasePage:
    496          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    497            HalFlashErase(pg);
   \   000007                ; Setup parameters for call to function HalFlashErase
   \   000007   EE           MOV     A,R6
   \   000008   F9           MOV     R1,A
   \   000009   12....       LCALL   `??HalFlashErase::?relay`; Banked call to: HalFlashErase
    498          
    499            pgOff[pg - OSAL_NV_PAGE_BEG] = OSAL_NV_PAGE_HDR_SIZE;
   \   00000C   EE           MOV     A,R6
   \   00000D   F8           MOV     R0,A
   \   00000E   7900         MOV     R1,#0x0
   \   000010   E8           MOV     A,R0
   \   000011   75F002       MOV     B,#0x2
   \   000014   A4           MUL     AB
   \   000015   C8           XCH     A,R0
   \   000016   AAF0         MOV     R2,B
   \   000018   75F000       MOV     B,#0x0
   \   00001B   A4           MUL     AB
   \   00001C   2A           ADD     A,R2
   \   00001D   FA           MOV     R2,A
   \   00001E   75F002       MOV     B,#0x2
   \   000021   E9           MOV     A,R1
   \   000022   A4           MUL     AB
   \   000023   2A           ADD     A,R2
   \   000024   F9           MOV     R1,A
   \   000025   74..         MOV     A,#(pgOff + 14) & 0xff
   \   000027   28           ADD     A,R0
   \   000028   F582         MOV     DPL,A
   \   00002A   74..         MOV     A,#((pgOff - 242) >> 8) & 0xff
   \   00002C   39           ADDC    A,R1
   \   00002D   F583         MOV     DPH,A
   \   00002F   7408         MOV     A,#0x8
   \   000031   F0           MOVX    @DPTR,A
   \   000032   A3           INC     DPTR
   \   000033   7400         MOV     A,#0x0
   \   000035   F0           MOVX    @DPTR,A
    500            pgLost[pg - OSAL_NV_PAGE_BEG] = 0;
   \   000036   EE           MOV     A,R6
   \   000037   F8           MOV     R0,A
   \   000038   7900         MOV     R1,#0x0
   \   00003A   E8           MOV     A,R0
   \   00003B   75F002       MOV     B,#0x2
   \   00003E   A4           MUL     AB
   \   00003F   C8           XCH     A,R0
   \   000040   AAF0         MOV     R2,B
   \   000042   75F000       MOV     B,#0x0
   \   000045   A4           MUL     AB
   \   000046   2A           ADD     A,R2
   \   000047   FA           MOV     R2,A
   \   000048   75F002       MOV     B,#0x2
   \   00004B   E9           MOV     A,R1
   \   00004C   A4           MUL     AB
   \   00004D   2A           ADD     A,R2
   \   00004E   F9           MOV     R1,A
   \   00004F   74..         MOV     A,#(pgLost + 14) & 0xff
   \   000051   28           ADD     A,R0
   \   000052   F582         MOV     DPL,A
   \   000054   74..         MOV     A,#((pgLost - 242) >> 8) & 0xff
   \   000056   39           ADDC    A,R1
   \   000057   F583         MOV     DPH,A
   \   000059   7400         MOV     A,#0x0
   \   00005B   F0           MOVX    @DPTR,A
   \   00005C   A3           INC     DPTR
   \   00005D   7400         MOV     A,#0x0
   \   00005F   F0           MOVX    @DPTR,A
    501          }
   \   000060   7F01         MOV     R7,#0x1
   \   000062   02....       LJMP    ?BANKED_LEAVE_XDATA
    502          
    503          /*********************************************************************
    504           * @fn      compactPage
    505           *
    506           * @brief   Compacts the page specified.
    507           *
    508           * @param   srcPg - Valid NV page to erase.
    509           * @param   skipId - Item Id to not compact.
    510           *
    511           * @return  TRUE if valid items from 'srcPg' are successully compacted onto the 'pgRes';
    512           *          FALSE otherwise.
    513           *          Note that on a failure, this could loop, re-erasing the 'pgRes' and re-compacting with
    514           *          the risk of infinitely looping on HAL flash failure.
    515           *          Worst case scenario: HAL flash starts failing in general, perhaps low Vdd?
    516           *          All page compactions will fail which will cause all osal_nv_write() calls to return
    517           *          NV_OPER_FAILED.
    518           *          Eventually, all pages in use may also be in the state of "pending compaction" where
    519           *          the page header member OSAL_NV_PG_XFER is zeroed out.
    520           *          During this "HAL flash brown-out", the code will run and OTA should work (until low Vdd
    521           *          causes an actual chip brown-out, of course.) Although no new NV items will be created
    522           *          or written, the last value written with a return value of SUCCESS can continue to be
    523           *          read successfully.
    524           *          If eventually HAL flash starts working again, all of the pages marked as
    525           *          "pending compaction" may or may not be eventually compacted. But, initNV() will
    526           *          deterministically clean-up one page pending compaction per power-cycle
    527           *          (if HAL flash is working.) Nevertheless, one erased reserve page will be maintained
    528           *          through such a scenario.
    529           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    530          static uint8 compactPage( uint8 srcPg, uint16 skipId )
   \                     compactPage:
    531          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0,R1
   \   00000C   8A..         MOV     ?V2,R2
   \   00000E   8B..         MOV     ?V3,R3
    532            uint16 srcOff;
    533            uint8 rtrn;
    534          
    535            // To minimize code size, only check for a clean page here where it's absolutely required.
    536            for (srcOff = 0; srcOff < OSAL_NV_PAGE_SIZE; srcOff++)
   \   000010   7E00         MOV     R6,#0x0
   \   000012   7F00         MOV     R7,#0x0
   \   000014   8005         SJMP    ??compactPage_0
   \                     ??compactPage_1:
   \   000016   0E           INC     R6
   \   000017   EE           MOV     A,R6
   \   000018   7001         JNZ     ??compactPage_0
   \   00001A   0F           INC     R7
   \                     ??compactPage_0:
   \   00001B   C3           CLR     C
   \   00001C   EE           MOV     A,R6
   \   00001D   9400         SUBB    A,#0x0
   \   00001F   EF           MOV     A,R7
   \   000020   9408         SUBB    A,#0x8
   \   000022   5039         JNC     ??compactPage_2
    537            {
    538              HalFlashRead(pgRes, srcOff, &rtrn, 1);
   \   000024                ; Setup parameters for call to function HalFlashRead
   \   000024   75..01       MOV     ?V4,#0x1
   \   000027   75..00       MOV     ?V5,#0x0
   \   00002A   78..         MOV     R0,#?V4
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002F   7402         MOV     A,#0x2
   \   000031   12....       LCALL   ?XSTACK_DISP102_8
   \   000034   EE           MOV     A,R6
   \   000035   FA           MOV     R2,A
   \   000036   EF           MOV     A,R7
   \   000037   FB           MOV     R3,A
   \   000038   90....       MOV     DPTR,#pgRes
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   F9           MOV     R1,A
   \   00003D   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000040   7402         MOV     A,#0x2
   \   000042   12....       LCALL   ?DEALLOC_XSTACK8
    539              if (rtrn != OSAL_NV_ERASED)
   \   000045   85..82       MOV     DPL,?XSP + 0
   \   000048   85..83       MOV     DPH,?XSP + 1
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   64FF         XRL     A,#0xff
   \   00004E   60C6         JZ      ??compactPage_1
    540              {
    541                erasePage(pgRes);
   \   000050                ; Setup parameters for call to function erasePage
   \   000050   90....       MOV     DPTR,#pgRes
   \   000053   E0           MOVX    A,@DPTR
   \   000054   F9           MOV     R1,A
   \   000055   12....       LCALL   `??erasePage::?relay`; Banked call to: erasePage
    542                return FALSE;
   \   000058   7900         MOV     R1,#0x0
   \   00005A   02....       LJMP    ??compactPage_3 & 0xFFFF
    543              }
    544            }
    545          
    546            srcOff = OSAL_NV_PAGE_HDR_SIZE;
   \                     ??compactPage_2:
   \   00005D   7E08         MOV     R6,#0x8
   \   00005F   7F00         MOV     R7,#0x0
    547            rtrn = TRUE;
   \   000061   85..82       MOV     DPL,?XSP + 0
   \   000064   85..83       MOV     DPH,?XSP + 1
   \   000067   7401         MOV     A,#0x1
   \   000069   F0           MOVX    @DPTR,A
   \   00006A   02....       LJMP    ??compactPage_4 & 0xFFFF
    548          
    549            while ( srcOff < (OSAL_NV_PAGE_SIZE - OSAL_NV_HDR_SIZE ) )
    550            {
    551              osalNvHdr_t hdr;
    552              uint16 sz, dstOff = pgOff[pgRes-OSAL_NV_PAGE_BEG];
    553          
    554              HalFlashRead(srcPg, srcOff, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
    555          
    556              if ( hdr.id == OSAL_NV_ERASED_ID )
    557              {
    558                break;
    559              }
    560          
    561              // Get the actual size in bytes which is the ceiling(hdr.len)
    562              sz = OSAL_NV_DATA_SIZE( hdr.len );
   \                     ??compactPage_5:
   \   00006D   7403         MOV     A,#0x3
   \   00006F   12....       LCALL   ?XSTACK_DISP0_8
   \   000072   C3           CLR     C
   \   000073   E0           MOVX    A,@DPTR
   \   000074   94FC         SUBB    A,#-0x4
   \   000076   A3           INC     DPTR
   \   000077   E0           MOVX    A,@DPTR
   \   000078   94FF         SUBB    A,#-0x1
   \   00007A   4008         JC      ??compactPage_6
   \   00007C   75..FC       MOV     ?V4,#-0x4
   \   00007F   75..FF       MOV     ?V5,#-0x1
   \   000082   8030         SJMP    ??compactPage_7
   \                     ??compactPage_6:
   \   000084   7403         MOV     A,#0x3
   \   000086   12....       LCALL   ?XSTACK_DISP0_8
   \   000089   E0           MOVX    A,@DPTR
   \   00008A   2403         ADD     A,#0x3
   \   00008C   F5..         MOV     ?V4,A
   \   00008E   A3           INC     DPTR
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   3400         ADDC    A,#0x0
   \   000092   F5..         MOV     ?V5,A
   \   000094   7402         MOV     A,#0x2
   \   000096   78..         MOV     R0,#?V4
   \   000098   12....       LCALL   ?US_SHR
   \   00009B   E5..         MOV     A,?V4
   \   00009D   75F004       MOV     B,#0x4
   \   0000A0   A4           MUL     AB
   \   0000A1   C5..         XCH     A,?V4
   \   0000A3   A8F0         MOV     R0,B
   \   0000A5   75F000       MOV     B,#0x0
   \   0000A8   A4           MUL     AB
   \   0000A9   28           ADD     A,R0
   \   0000AA   F8           MOV     R0,A
   \   0000AB   75F004       MOV     B,#0x4
   \   0000AE   E5..         MOV     A,?V5
   \   0000B0   A4           MUL     AB
   \   0000B1   28           ADD     A,R0
   \   0000B2   F5..         MOV     ?V5,A
    563          
    564              if ( sz > (OSAL_NV_PAGE_SIZE - OSAL_NV_HDR_SIZE - srcOff) )
   \                     ??compactPage_7:
   \   0000B4   74F8         MOV     A,#-0x8
   \   0000B6   C3           CLR     C
   \   0000B7   9E           SUBB    A,R6
   \   0000B8   F8           MOV     R0,A
   \   0000B9   7407         MOV     A,#0x7
   \   0000BB   9F           SUBB    A,R7
   \   0000BC   F9           MOV     R1,A
   \   0000BD   C3           CLR     C
   \   0000BE   E8           MOV     A,R0
   \   0000BF   95..         SUBB    A,?V4
   \   0000C1   E9           MOV     A,R1
   \   0000C2   95..         SUBB    A,?V5
   \   0000C4   5003         JNC     $+5
   \   0000C6   02....       LJMP    ??compactPage_8 & 0xFFFF
    565              {
    566                break;
    567              }
    568          
    569              if ( sz > (OSAL_NV_PAGE_SIZE - OSAL_NV_HDR_SIZE - dstOff) )
   \   0000C9   74F8         MOV     A,#-0x8
   \   0000CB   C3           CLR     C
   \   0000CC   95..         SUBB    A,?V6
   \   0000CE   F8           MOV     R0,A
   \   0000CF   7407         MOV     A,#0x7
   \   0000D1   95..         SUBB    A,?V7
   \   0000D3   F9           MOV     R1,A
   \   0000D4   C3           CLR     C
   \   0000D5   E8           MOV     A,R0
   \   0000D6   95..         SUBB    A,?V4
   \   0000D8   E9           MOV     A,R1
   \   0000D9   95..         SUBB    A,?V5
   \   0000DB   500C         JNC     ??compactPage_9
    570              {
    571                rtrn = FALSE;
   \   0000DD   85..82       MOV     DPL,?XSP + 0
   \   0000E0   85..83       MOV     DPH,?XSP + 1
   \   0000E3   7400         MOV     A,#0x0
   \   0000E5   F0           MOVX    @DPTR,A
    572                break;
   \   0000E6   02....       LJMP    ??compactPage_8 & 0xFFFF
    573              }
    574          
    575              srcOff += OSAL_NV_HDR_SIZE;
   \                     ??compactPage_9:
   \   0000E9   EE           MOV     A,R6
   \   0000EA   2408         ADD     A,#0x8
   \   0000EC   FE           MOV     R6,A
   \   0000ED   EF           MOV     A,R7
   \   0000EE   3400         ADDC    A,#0x0
   \   0000F0   FF           MOV     R7,A
    576          
    577              if ( (hdr.id != OSAL_NV_ZEROED_ID) && (hdr.id != skipId) )
   \   0000F1   7401         MOV     A,#0x1
   \   0000F3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F6   E0           MOVX    A,@DPTR
   \   0000F7   F8           MOV     R0,A
   \   0000F8   A3           INC     DPTR
   \   0000F9   E0           MOVX    A,@DPTR
   \   0000FA   F9           MOV     R1,A
   \   0000FB   E8           MOV     A,R0
   \   0000FC   49           ORL     A,R1
   \   0000FD   7003         JNZ     $+5
   \   0000FF   02....       LJMP    ??compactPage_10 & 0xFFFF
   \   000102   7401         MOV     A,#0x1
   \   000104   12....       LCALL   ?XSTACK_DISP0_8
   \   000107   E0           MOVX    A,@DPTR
   \   000108   65..         XRL     A,?V2
   \   00010A   7004         JNZ     ??compactPage_11
   \   00010C   A3           INC     DPTR
   \   00010D   E0           MOVX    A,@DPTR
   \   00010E   65..         XRL     A,?V3
   \                     ??compactPage_11:
   \   000110   7003         JNZ     $+5
   \   000112   02....       LJMP    ??compactPage_10 & 0xFFFF
    578              {
    579                if ( hdr.chk == calcChkF( srcPg, srcOff, hdr.len ) )
   \   000115                ; Setup parameters for call to function calcChkF
   \   000115   7403         MOV     A,#0x3
   \   000117   12....       LCALL   ?XSTACK_DISP0_8
   \   00011A   E0           MOVX    A,@DPTR
   \   00011B   FC           MOV     R4,A
   \   00011C   A3           INC     DPTR
   \   00011D   E0           MOVX    A,@DPTR
   \   00011E   FD           MOV     R5,A
   \   00011F   EE           MOV     A,R6
   \   000120   FA           MOV     R2,A
   \   000121   EF           MOV     A,R7
   \   000122   FB           MOV     R3,A
   \   000123   A9..         MOV     R1,?V0
   \   000125   12....       LCALL   `??calcChkF::?relay` ; Banked call to: calcChkF
   \   000128   8A..         MOV     ?V8,R2
   \   00012A   8B..         MOV     ?V9,R3
   \   00012C   A8..         MOV     R0,?V8
   \   00012E   A9..         MOV     R1,?V9
   \   000130   7405         MOV     A,#0x5
   \   000132   12....       LCALL   ?XSTACK_DISP0_8
   \   000135   E0           MOVX    A,@DPTR
   \   000136   68           XRL     A,R0
   \   000137   7003         JNZ     ??compactPage_12
   \   000139   A3           INC     DPTR
   \   00013A   E0           MOVX    A,@DPTR
   \   00013B   69           XRL     A,R1
   \                     ??compactPage_12:
   \   00013C   6003         JZ      $+5
   \   00013E   02....       LJMP    ??compactPage_10 & 0xFFFF
    580                {
    581                  /* Prevent excessive re-writes to item header caused by numerous, rapid, & successive
    582                   * OSAL_Nv interruptions caused by resets.
    583                   */
    584                  if ( hdr.stat == OSAL_NV_ERASED_ID )
   \   000141   7407         MOV     A,#0x7
   \   000143   12....       LCALL   ?XSTACK_DISP0_8
   \   000146   E0           MOVX    A,@DPTR
   \   000147   64FF         XRL     A,#0xff
   \   000149   7004         JNZ     ??compactPage_13
   \   00014B   A3           INC     DPTR
   \   00014C   E0           MOVX    A,@DPTR
   \   00014D   64FF         XRL     A,#0xff
   \                     ??compactPage_13:
   \   00014F   700B         JNZ     ??compactPage_14
    585                  {
    586                    setItem( srcPg, srcOff, eNvXfer );
   \   000151                ; Setup parameters for call to function setItem
   \   000151   7C00         MOV     R4,#0x0
   \   000153   EE           MOV     A,R6
   \   000154   FA           MOV     R2,A
   \   000155   EF           MOV     A,R7
   \   000156   FB           MOV     R3,A
   \   000157   A9..         MOV     R1,?V0
   \   000159   12....       LCALL   `??setItem::?relay`  ; Banked call to: setItem
    587                  }
    588          
    589                  if ( writeItem( pgRes, hdr.id, hdr.len, NULL, FALSE ) )
   \                     ??compactPage_14:
   \   00015C                ; Setup parameters for call to function writeItem
   \   00015C   75..00       MOV     ?V1,#0x0
   \   00015F   78..         MOV     R0,#?V1
   \   000161   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000164   E4           CLR     A
   \   000165   F5..         MOV     ?V8,A
   \   000167   F5..         MOV     ?V9,A
   \   000169   78..         MOV     R0,#?V8
   \   00016B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00016E   7406         MOV     A,#0x6
   \   000170   12....       LCALL   ?XSTACK_DISP0_8
   \   000173   E0           MOVX    A,@DPTR
   \   000174   FC           MOV     R4,A
   \   000175   A3           INC     DPTR
   \   000176   E0           MOVX    A,@DPTR
   \   000177   FD           MOV     R5,A
   \   000178   7404         MOV     A,#0x4
   \   00017A   12....       LCALL   ?XSTACK_DISP0_8
   \   00017D   E0           MOVX    A,@DPTR
   \   00017E   FA           MOV     R2,A
   \   00017F   A3           INC     DPTR
   \   000180   E0           MOVX    A,@DPTR
   \   000181   FB           MOV     R3,A
   \   000182   90....       MOV     DPTR,#pgRes
   \   000185   E0           MOVX    A,@DPTR
   \   000186   F9           MOV     R1,A
   \   000187   12....       LCALL   `??writeItem::?relay`; Banked call to: writeItem
   \   00018A   7403         MOV     A,#0x3
   \   00018C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00018F   E9           MOV     A,R1
   \   000190   7003         JNZ     $+5
   \   000192   02....       LJMP    ??compactPage_15 & 0xFFFF
    590                  {
    591                    dstOff += OSAL_NV_HDR_SIZE;
   \   000195   E5..         MOV     A,?V6
   \   000197   2408         ADD     A,#0x8
   \   000199   F5..         MOV     ?V6,A
   \   00019B   E5..         MOV     A,?V7
   \   00019D   3400         ADDC    A,#0x0
   \   00019F   F5..         MOV     ?V7,A
    592                    xferBuf( srcPg, srcOff, pgRes, dstOff, sz );
   \   0001A1                ; Setup parameters for call to function xferBuf
   \   0001A1   78..         MOV     R0,#?V4
   \   0001A3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001A6   78..         MOV     R0,#?V6
   \   0001A8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001AB   90....       MOV     DPTR,#pgRes
   \   0001AE   E0           MOVX    A,@DPTR
   \   0001AF   FC           MOV     R4,A
   \   0001B0   EE           MOV     A,R6
   \   0001B1   FA           MOV     R2,A
   \   0001B2   EF           MOV     A,R7
   \   0001B3   FB           MOV     R3,A
   \   0001B4   A9..         MOV     R1,?V0
   \   0001B6   12....       LCALL   `??xferBuf::?relay`  ; Banked call to: xferBuf
   \   0001B9   7404         MOV     A,#0x4
   \   0001BB   12....       LCALL   ?DEALLOC_XSTACK8
    593                    // Calculate and write the new checksum.
    594                    if (hdr.chk == calcChkF(pgRes, dstOff, hdr.len))
   \   0001BE                ; Setup parameters for call to function calcChkF
   \   0001BE   7403         MOV     A,#0x3
   \   0001C0   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C3   E0           MOVX    A,@DPTR
   \   0001C4   FC           MOV     R4,A
   \   0001C5   A3           INC     DPTR
   \   0001C6   E0           MOVX    A,@DPTR
   \   0001C7   FD           MOV     R5,A
   \   0001C8   AA..         MOV     R2,?V6
   \   0001CA   AB..         MOV     R3,?V7
   \   0001CC   90....       MOV     DPTR,#pgRes
   \   0001CF   E0           MOVX    A,@DPTR
   \   0001D0   F9           MOV     R1,A
   \   0001D1   12....       LCALL   `??calcChkF::?relay` ; Banked call to: calcChkF
   \   0001D4   8A..         MOV     ?V8,R2
   \   0001D6   8B..         MOV     ?V9,R3
   \   0001D8   A8..         MOV     R0,?V8
   \   0001DA   A9..         MOV     R1,?V9
   \   0001DC   7405         MOV     A,#0x5
   \   0001DE   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E1   E0           MOVX    A,@DPTR
   \   0001E2   68           XRL     A,R0
   \   0001E3   7003         JNZ     ??compactPage_16
   \   0001E5   A3           INC     DPTR
   \   0001E6   E0           MOVX    A,@DPTR
   \   0001E7   69           XRL     A,R1
   \                     ??compactPage_16:
   \   0001E8   6003         JZ      $+5
   \   0001EA   02....       LJMP    ??compactPage_17 & 0xFFFF
    595                    {
    596                      if ( hdr.chk != setChk( pgRes, dstOff, hdr.chk ) )
   \   0001ED                ; Setup parameters for call to function setChk
   \   0001ED   7405         MOV     A,#0x5
   \   0001EF   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F2   E0           MOVX    A,@DPTR
   \   0001F3   FC           MOV     R4,A
   \   0001F4   A3           INC     DPTR
   \   0001F5   E0           MOVX    A,@DPTR
   \   0001F6   FD           MOV     R5,A
   \   0001F7   AA..         MOV     R2,?V6
   \   0001F9   AB..         MOV     R3,?V7
   \   0001FB   90....       MOV     DPTR,#pgRes
   \   0001FE   E0           MOVX    A,@DPTR
   \   0001FF   F9           MOV     R1,A
   \   000200   12....       LCALL   `??setChk::?relay`   ; Banked call to: setChk
   \   000203   8A..         MOV     ?V8,R2
   \   000205   8B..         MOV     ?V9,R3
   \   000207   A8..         MOV     R0,?V8
   \   000209   A9..         MOV     R1,?V9
   \   00020B   7405         MOV     A,#0x5
   \   00020D   12....       LCALL   ?XSTACK_DISP0_8
   \   000210   E0           MOVX    A,@DPTR
   \   000211   68           XRL     A,R0
   \   000212   7003         JNZ     ??compactPage_18
   \   000214   A3           INC     DPTR
   \   000215   E0           MOVX    A,@DPTR
   \   000216   69           XRL     A,R1
   \                     ??compactPage_18:
   \   000217   600C         JZ      ??compactPage_19
    597                      {
    598                        rtrn = FALSE;
   \   000219   85..82       MOV     DPL,?XSP + 0
   \   00021C   85..83       MOV     DPH,?XSP + 1
   \   00021F   7400         MOV     A,#0x0
   \   000221   F0           MOVX    @DPTR,A
    599                        break;
   \   000222   02....       LJMP    ??compactPage_8 & 0xFFFF
    600                      }
    601                      else
    602                      {
    603                        hotItemUpdate(pgRes, dstOff, hdr.id);
   \                     ??compactPage_19:
   \   000225                ; Setup parameters for call to function hotItemUpdate
   \   000225   7401         MOV     A,#0x1
   \   000227   12....       LCALL   ?XSTACK_DISP0_8
   \   00022A   E0           MOVX    A,@DPTR
   \   00022B   FC           MOV     R4,A
   \   00022C   A3           INC     DPTR
   \   00022D   E0           MOVX    A,@DPTR
   \   00022E   FD           MOV     R5,A
   \   00022F   AA..         MOV     R2,?V6
   \   000231   AB..         MOV     R3,?V7
   \   000233   90....       MOV     DPTR,#pgRes
   \   000236   E0           MOVX    A,@DPTR
   \   000237   F9           MOV     R1,A
   \   000238   12....       LCALL   `??hotItemUpdate::?relay`; Banked call to: hotItemUpdate
    604                      }
    605                    }
    606                    else
    607                    {
    608                      rtrn = FALSE;
    609                      break;
    610                    }
    611                  }
    612                  else
    613                  {
    614                    rtrn = FALSE;
    615                    break;
    616                  }
    617                }
    618              }
    619          
    620              srcOff += sz;
   \                     ??compactPage_10:
   \   00023B   EE           MOV     A,R6
   \   00023C   25..         ADD     A,?V4
   \   00023E   FE           MOV     R6,A
   \   00023F   EF           MOV     A,R7
   \   000240   35..         ADDC    A,?V5
   \   000242   FF           MOV     R7,A
   \                     ??compactPage_4:
   \   000243   C3           CLR     C
   \   000244   EE           MOV     A,R6
   \   000245   94F8         SUBB    A,#-0x8
   \   000247   EF           MOV     A,R7
   \   000248   9407         SUBB    A,#0x7
   \   00024A   5074         JNC     ??compactPage_8
   \   00024C   90....       MOV     DPTR,#pgRes
   \   00024F   E0           MOVX    A,@DPTR
   \   000250   F8           MOV     R0,A
   \   000251   7900         MOV     R1,#0x0
   \   000253   E8           MOV     A,R0
   \   000254   75F002       MOV     B,#0x2
   \   000257   A4           MUL     AB
   \   000258   C8           XCH     A,R0
   \   000259   AAF0         MOV     R2,B
   \   00025B   75F000       MOV     B,#0x0
   \   00025E   A4           MUL     AB
   \   00025F   2A           ADD     A,R2
   \   000260   FA           MOV     R2,A
   \   000261   75F002       MOV     B,#0x2
   \   000264   E9           MOV     A,R1
   \   000265   A4           MUL     AB
   \   000266   2A           ADD     A,R2
   \   000267   F9           MOV     R1,A
   \   000268   74..         MOV     A,#(pgOff + 14) & 0xff
   \   00026A   28           ADD     A,R0
   \   00026B   F582         MOV     DPL,A
   \   00026D   74..         MOV     A,#((pgOff - 242) >> 8) & 0xff
   \   00026F   39           ADDC    A,R1
   \   000270   F583         MOV     DPH,A
   \   000272   E0           MOVX    A,@DPTR
   \   000273   F5..         MOV     ?V6,A
   \   000275   A3           INC     DPTR
   \   000276   E0           MOVX    A,@DPTR
   \   000277   F5..         MOV     ?V7,A
   \   000279                ; Setup parameters for call to function HalFlashRead
   \   000279   75..08       MOV     ?V4,#0x8
   \   00027C   75..00       MOV     ?V5,#0x0
   \   00027F   78..         MOV     R0,#?V4
   \   000281   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000284   7403         MOV     A,#0x3
   \   000286   12....       LCALL   ?XSTACK_DISP102_8
   \   000289   EE           MOV     A,R6
   \   00028A   FA           MOV     R2,A
   \   00028B   EF           MOV     A,R7
   \   00028C   FB           MOV     R3,A
   \   00028D   A9..         MOV     R1,?V0
   \   00028F   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000292   7402         MOV     A,#0x2
   \   000294   12....       LCALL   ?DEALLOC_XSTACK8
   \   000297   7401         MOV     A,#0x1
   \   000299   12....       LCALL   ?XSTACK_DISP0_8
   \   00029C   E0           MOVX    A,@DPTR
   \   00029D   64FF         XRL     A,#0xff
   \   00029F   7004         JNZ     ??compactPage_20
   \   0002A1   A3           INC     DPTR
   \   0002A2   E0           MOVX    A,@DPTR
   \   0002A3   64FF         XRL     A,#0xff
   \                     ??compactPage_20:
   \   0002A5   6003         JZ      $+5
   \   0002A7   02....       LJMP    ??compactPage_5 & 0xFFFF
   \   0002AA   8014         SJMP    ??compactPage_8
   \                     ??compactPage_17:
   \   0002AC   85..82       MOV     DPL,?XSP + 0
   \   0002AF   85..83       MOV     DPH,?XSP + 1
   \   0002B2   7400         MOV     A,#0x0
   \   0002B4   F0           MOVX    @DPTR,A
   \   0002B5   8009         SJMP    ??compactPage_8
   \                     ??compactPage_15:
   \   0002B7   85..82       MOV     DPL,?XSP + 0
   \   0002BA   85..83       MOV     DPH,?XSP + 1
   \   0002BD   7400         MOV     A,#0x0
   \   0002BF   F0           MOVX    @DPTR,A
    621            }
    622          
    623            if (rtrn == FALSE)
   \                     ??compactPage_8:
   \   0002C0   85..82       MOV     DPL,?XSP + 0
   \   0002C3   85..83       MOV     DPH,?XSP + 1
   \   0002C6   E0           MOVX    A,@DPTR
   \   0002C7   700A         JNZ     ??compactPage_21
    624            {
    625              erasePage(pgRes);
   \   0002C9                ; Setup parameters for call to function erasePage
   \   0002C9   90....       MOV     DPTR,#pgRes
   \   0002CC   E0           MOVX    A,@DPTR
   \   0002CD   F9           MOV     R1,A
   \   0002CE   12....       LCALL   `??erasePage::?relay`; Banked call to: erasePage
   \   0002D1   801B         SJMP    ??compactPage_22
    626            }
    627            else if (skipId == OSAL_NV_ITEM_NULL)
   \                     ??compactPage_21:
   \   0002D3   E5..         MOV     A,?V2
   \   0002D5   45..         ORL     A,?V3
   \   0002D7   7015         JNZ     ??compactPage_22
    628            {
    629              COMPACT_PAGE_CLEANUP(srcPg);
   \   0002D9                ; Setup parameters for call to function setPageUse
   \   0002D9   7A01         MOV     R2,#0x1
   \   0002DB   90....       MOV     DPTR,#pgRes
   \   0002DE   E0           MOVX    A,@DPTR
   \   0002DF   F9           MOV     R1,A
   \   0002E0   12....       LCALL   `??setPageUse::?relay`; Banked call to: setPageUse
   \   0002E3                ; Setup parameters for call to function erasePage
   \   0002E3   A9..         MOV     R1,?V0
   \   0002E5   12....       LCALL   `??erasePage::?relay`; Banked call to: erasePage
   \   0002E8   E5..         MOV     A,?V0
   \   0002EA   90....       MOV     DPTR,#pgRes
   \   0002ED   F0           MOVX    @DPTR,A
    630            }
    631            // else invoking function must cleanup.
    632          
    633            return rtrn;
   \                     ??compactPage_22:
   \   0002EE   85..82       MOV     DPL,?XSP + 0
   \   0002F1   85..83       MOV     DPH,?XSP + 1
   \   0002F4   E0           MOVX    A,@DPTR
   \   0002F5   F9           MOV     R1,A
   \                     ??compactPage_3:
   \   0002F6   7409         MOV     A,#0x9
   \   0002F8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002FB   7F0A         MOV     R7,#0xa
   \   0002FD   02....       LJMP    ?BANKED_LEAVE_XDATA
    634          }
    635          
    636          /*********************************************************************
    637           * @fn      findItem
    638           *
    639           * @brief   Find an item Id in NV and return the page and offset to its data.
    640           *
    641           * @param   id - Valid NV item Id.
    642           *
    643           * @return  Offset of data corresponding to item Id, if found;
    644           *          otherwise OSAL_NV_ITEM_NULL.
    645           *
    646           *          The page containing the item, if found;
    647           *          otherwise no valid assignment made - left equal to item Id.
    648           *
    649           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    650          static uint16 findItem( uint16 id )
   \                     findItem:
    651          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    652            uint16 off;
    653            uint8 pg;
    654          
    655            for ( pg = OSAL_NV_PAGE_BEG; pg <= OSAL_NV_PAGE_END; pg++ )
   \   000009   75..79       MOV     ?V0,#0x79
   \   00000C   8002         SJMP    ??findItem_0
   \                     ??findItem_1:
   \   00000E   05..         INC     ?V0
   \                     ??findItem_0:
   \   000010   E5..         MOV     A,?V0
   \   000012   C3           CLR     C
   \   000013   947F         SUBB    A,#0x7f
   \   000015   5023         JNC     ??findItem_2
    656            {
    657              if ( (off = initPage( pg, id, FALSE )) != OSAL_NV_ITEM_NULL )
   \   000017                ; Setup parameters for call to function initPage
   \   000017   7C00         MOV     R4,#0x0
   \   000019   EE           MOV     A,R6
   \   00001A   FA           MOV     R2,A
   \   00001B   EF           MOV     A,R7
   \   00001C   FB           MOV     R3,A
   \   00001D   A9..         MOV     R1,?V0
   \   00001F   12....       LCALL   `??initPage::?relay` ; Banked call to: initPage
   \   000022   8A..         MOV     ?V2,R2
   \   000024   8B..         MOV     ?V3,R3
   \   000026   A8..         MOV     R0,?V2
   \   000028   A9..         MOV     R1,?V3
   \   00002A   E8           MOV     A,R0
   \   00002B   FA           MOV     R2,A
   \   00002C   E9           MOV     A,R1
   \   00002D   FB           MOV     R3,A
   \   00002E   E8           MOV     A,R0
   \   00002F   49           ORL     A,R1
   \   000030   60DC         JZ      ??findItem_1
    658              {
    659                findPg = pg;
   \   000032   E5..         MOV     A,?V0
   \   000034   90....       MOV     DPTR,#findPg
   \   000037   F0           MOVX    @DPTR,A
    660                return off;
   \   000038   8023         SJMP    ??findItem_3
    661              }
    662            }
    663          
    664            // Now attempt to find the item as the "old" item of a failed/interrupted NV write.
    665            if ( (id & OSAL_NV_SOURCE_ID) == 0 )
   \                     ??findItem_2:
   \   00003A   EE           MOV     A,R6
   \   00003B   5400         ANL     A,#0x0
   \   00003D   F8           MOV     R0,A
   \   00003E   EF           MOV     A,R7
   \   00003F   5480         ANL     A,#0x80
   \   000041   F9           MOV     R1,A
   \   000042   E8           MOV     A,R0
   \   000043   49           ORL     A,R1
   \   000044   700D         JNZ     ??findItem_4
    666            {
    667              return findItem( id | OSAL_NV_SOURCE_ID );
   \   000046                ; Setup parameters for call to function findItem
   \   000046   EE           MOV     A,R6
   \   000047   4400         ORL     A,#0x0
   \   000049   FA           MOV     R2,A
   \   00004A   EF           MOV     A,R7
   \   00004B   4480         ORL     A,#0x80
   \   00004D   FB           MOV     R3,A
   \   00004E   12....       LCALL   `??findItem::?relay` ; Banked call to: findItem
   \   000051   800A         SJMP    ??findItem_3
    668            }
    669            else
    670            {
    671              findPg = OSAL_NV_PAGE_NULL;
   \                     ??findItem_4:
   \   000053   90....       MOV     DPTR,#findPg
   \   000056   7400         MOV     A,#0x0
   \   000058   F0           MOVX    @DPTR,A
    672              return OSAL_NV_ITEM_NULL;
   \   000059   7A00         MOV     R2,#0x0
   \   00005B   7B00         MOV     R3,#0x0
   \                     ??findItem_3:
   \   00005D   7F04         MOV     R7,#0x4
   \   00005F   02....       LJMP    ?BANKED_LEAVE_XDATA
    673            }
    674          }
    675          
    676          /*********************************************************************
    677           * @fn      initItem
    678           *
    679           * @brief   An NV item is created and initialized with the data passed to the function, if any.
    680           *
    681           * @param   flag - TRUE if the 'buf' parameter contains data for the call to writeItem().
    682           *                 (i.e. if invoked from osal_nv_item_init() ).
    683           *                 FALSE if writeItem() should just write the header and the 'buf' parameter
    684           *                 is ok to use as a return value of the page number to be cleaned with
    685           *                 COMPACT_PAGE_CLEANUP().
    686           *                 (i.e. if invoked from osal_nv_write() ).
    687           * @param   id  - Valid NV item Id.
    688           * @param   len - Item data length.
    689           * @param  *buf - Pointer to item initalization data. Set to NULL if none.
    690           *
    691           * @return  The OSAL Nv page number if item write and read back checksums ok;
    692           *          OSAL_NV_PAGE_NULL otherwise.
    693           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    694          static uint8 initItem( uint8 flag, uint16 id, uint16 len, void *buf )
   \                     initItem:
    695          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V2,R1
   \   00000C   8A..         MOV     ?V4,R2
   \   00000E   8B..         MOV     ?V5,R3
   \   000010   8C..         MOV     ?V0,R4
   \   000012   8D..         MOV     ?V1,R5
    696            uint16 sz = OSAL_NV_ITEM_SIZE( len );
   \   000014   C3           CLR     C
   \   000015   E5..         MOV     A,?V0
   \   000017   94F4         SUBB    A,#-0xc
   \   000019   E5..         MOV     A,?V1
   \   00001B   94FF         SUBB    A,#-0x1
   \   00001D   400F         JC      ??initItem_0
   \   00001F   85..82       MOV     DPL,?XSP + 0
   \   000022   85..83       MOV     DPH,?XSP + 1
   \   000025   74FC         MOV     A,#-0x4
   \   000027   F0           MOVX    @DPTR,A
   \   000028   A3           INC     DPTR
   \   000029   74FF         MOV     A,#-0x1
   \   00002B   F0           MOVX    @DPTR,A
   \   00002C   803F         SJMP    ??initItem_1
   \                     ??initItem_0:
   \   00002E   E5..         MOV     A,?V0
   \   000030   2403         ADD     A,#0x3
   \   000032   F5..         MOV     ?V6,A
   \   000034   E4           CLR     A
   \   000035   35..         ADDC    A,?V1
   \   000037   F5..         MOV     ?V7,A
   \   000039   7402         MOV     A,#0x2
   \   00003B   78..         MOV     R0,#?V6
   \   00003D   12....       LCALL   ?US_SHR
   \   000040   E5..         MOV     A,?V6
   \   000042   75F004       MOV     B,#0x4
   \   000045   A4           MUL     AB
   \   000046   C5..         XCH     A,?V6
   \   000048   A8F0         MOV     R0,B
   \   00004A   75F000       MOV     B,#0x0
   \   00004D   A4           MUL     AB
   \   00004E   28           ADD     A,R0
   \   00004F   F8           MOV     R0,A
   \   000050   75F004       MOV     B,#0x4
   \   000053   E5..         MOV     A,?V7
   \   000055   A4           MUL     AB
   \   000056   28           ADD     A,R0
   \   000057   F5..         MOV     ?V7,A
   \   000059   E5..         MOV     A,?V6
   \   00005B   2408         ADD     A,#0x8
   \   00005D   F8           MOV     R0,A
   \   00005E   E4           CLR     A
   \   00005F   35..         ADDC    A,?V7
   \   000061   F9           MOV     R1,A
   \   000062   85..82       MOV     DPL,?XSP + 0
   \   000065   85..83       MOV     DPH,?XSP + 1
   \   000068   E8           MOV     A,R0
   \   000069   F0           MOVX    @DPTR,A
   \   00006A   A3           INC     DPTR
   \   00006B   E9           MOV     A,R1
   \   00006C   F0           MOVX    @DPTR,A
    697            uint8 rtrn = OSAL_NV_PAGE_NULL;
   \                     ??initItem_1:
   \   00006D   7F00         MOV     R7,#0x0
    698            uint8 cnt = OSAL_NV_PAGES_USED;
   \   00006F   75..06       MOV     ?V3,#0x6
    699            uint8 pg = pgRes+1;  // Set to 1 after the reserve page to even wear across all available pages.
   \   000072   90....       MOV     DPTR,#pgRes
   \   000075   E0           MOVX    A,@DPTR
   \   000076   2401         ADD     A,#0x1
   \   000078   FE           MOV     R6,A
    700          
    701            do {
    702              if (pg >= OSAL_NV_PAGE_BEG+OSAL_NV_PAGES_USED)
   \                     ??initItem_2:
   \   000079   EE           MOV     A,R6
   \   00007A   C3           CLR     C
   \   00007B   947F         SUBB    A,#0x7f
   \   00007D   4002         JC      ??initItem_3
    703              {
    704                pg = OSAL_NV_PAGE_BEG;
   \   00007F   7E79         MOV     R6,#0x79
    705              }
    706              if ( pg != pgRes )
   \                     ??initItem_3:
   \   000081   90....       MOV     DPTR,#pgRes
   \   000084   E0           MOVX    A,@DPTR
   \   000085   6E           XRL     A,R6
   \   000086   6071         JZ      ??initItem_4
    707              {
    708                uint8 idx = pg - OSAL_NV_PAGE_BEG;
   \   000088   7487         MOV     A,#-0x79
   \   00008A   2E           ADD     A,R6
   \   00008B   FA           MOV     R2,A
    709                if ( sz <= (OSAL_NV_PAGE_SIZE - pgOff[idx] + pgLost[idx]) )
   \   00008C   EA           MOV     A,R2
   \   00008D   F8           MOV     R0,A
   \   00008E   7900         MOV     R1,#0x0
   \   000090   E8           MOV     A,R0
   \   000091   75F002       MOV     B,#0x2
   \   000094   A4           MUL     AB
   \   000095   C8           XCH     A,R0
   \   000096   ABF0         MOV     R3,B
   \   000098   75F000       MOV     B,#0x0
   \   00009B   A4           MUL     AB
   \   00009C   2B           ADD     A,R3
   \   00009D   FB           MOV     R3,A
   \   00009E   75F002       MOV     B,#0x2
   \   0000A1   E9           MOV     A,R1
   \   0000A2   A4           MUL     AB
   \   0000A3   2B           ADD     A,R3
   \   0000A4   F9           MOV     R1,A
   \   0000A5   74..         MOV     A,#pgOff & 0xff
   \   0000A7   28           ADD     A,R0
   \   0000A8   F582         MOV     DPL,A
   \   0000AA   74..         MOV     A,#(pgOff >> 8) & 0xff
   \   0000AC   39           ADDC    A,R1
   \   0000AD   F583         MOV     DPH,A
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   F8           MOV     R0,A
   \   0000B1   A3           INC     DPTR
   \   0000B2   E0           MOVX    A,@DPTR
   \   0000B3   F9           MOV     R1,A
   \   0000B4   7400         MOV     A,#0x0
   \   0000B6   C3           CLR     C
   \   0000B7   98           SUBB    A,R0
   \   0000B8   FC           MOV     R4,A
   \   0000B9   7408         MOV     A,#0x8
   \   0000BB   99           SUBB    A,R1
   \   0000BC   FD           MOV     R5,A
   \   0000BD   EA           MOV     A,R2
   \   0000BE   F8           MOV     R0,A
   \   0000BF   7900         MOV     R1,#0x0
   \   0000C1   E8           MOV     A,R0
   \   0000C2   75F002       MOV     B,#0x2
   \   0000C5   A4           MUL     AB
   \   0000C6   C8           XCH     A,R0
   \   0000C7   AAF0         MOV     R2,B
   \   0000C9   75F000       MOV     B,#0x0
   \   0000CC   A4           MUL     AB
   \   0000CD   2A           ADD     A,R2
   \   0000CE   FA           MOV     R2,A
   \   0000CF   75F002       MOV     B,#0x2
   \   0000D2   E9           MOV     A,R1
   \   0000D3   A4           MUL     AB
   \   0000D4   2A           ADD     A,R2
   \   0000D5   F9           MOV     R1,A
   \   0000D6   74..         MOV     A,#pgLost & 0xff
   \   0000D8   28           ADD     A,R0
   \   0000D9   F582         MOV     DPL,A
   \   0000DB   74..         MOV     A,#(pgLost >> 8) & 0xff
   \   0000DD   39           ADDC    A,R1
   \   0000DE   F583         MOV     DPH,A
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   2C           ADD     A,R4
   \   0000E2   FA           MOV     R2,A
   \   0000E3   A3           INC     DPTR
   \   0000E4   E0           MOVX    A,@DPTR
   \   0000E5   3D           ADDC    A,R5
   \   0000E6   FB           MOV     R3,A
   \   0000E7   85..82       MOV     DPL,?XSP + 0
   \   0000EA   85..83       MOV     DPH,?XSP + 1
   \   0000ED   E0           MOVX    A,@DPTR
   \   0000EE   F8           MOV     R0,A
   \   0000EF   A3           INC     DPTR
   \   0000F0   E0           MOVX    A,@DPTR
   \   0000F1   F9           MOV     R1,A
   \   0000F2   C3           CLR     C
   \   0000F3   EA           MOV     A,R2
   \   0000F4   98           SUBB    A,R0
   \   0000F5   EB           MOV     A,R3
   \   0000F6   99           SUBB    A,R1
   \   0000F7   500A         JNC     ??initItem_5
    710                {
    711                  break;
    712                }
    713              }
    714              pg++;
   \                     ??initItem_4:
   \   0000F9   0E           INC     R6
    715            } while (--cnt);
   \   0000FA   15..         DEC     ?V3
   \   0000FC   E5..         MOV     A,?V3
   \   0000FE   6003         JZ      $+5
   \   000100   02....       LJMP    ??initItem_2 & 0xFFFF
    716          
    717            if (cnt)
   \                     ??initItem_5:
   \   000103   E5..         MOV     A,?V3
   \   000105   7003         JNZ     $+5
   \   000107   02....       LJMP    ??initItem_6 & 0xFFFF
   \   00010A   741C         MOV     A,#0x1c
   \   00010C   12....       LCALL   ?XSTACK_DISP0_8
   \   00010F   E0           MOVX    A,@DPTR
   \   000110   F5..         MOV     ?V6,A
   \   000112   A3           INC     DPTR
   \   000113   E0           MOVX    A,@DPTR
   \   000114   F5..         MOV     ?V7,A
    718            {
    719              // Item fits if an old page is compacted.
    720              if ( sz > (OSAL_NV_PAGE_SIZE - pgOff[pg - OSAL_NV_PAGE_BEG]) )
   \   000116   EE           MOV     A,R6
   \   000117   F8           MOV     R0,A
   \   000118   7900         MOV     R1,#0x0
   \   00011A   E8           MOV     A,R0
   \   00011B   75F002       MOV     B,#0x2
   \   00011E   A4           MUL     AB
   \   00011F   C8           XCH     A,R0
   \   000120   AAF0         MOV     R2,B
   \   000122   75F000       MOV     B,#0x0
   \   000125   A4           MUL     AB
   \   000126   2A           ADD     A,R2
   \   000127   FA           MOV     R2,A
   \   000128   75F002       MOV     B,#0x2
   \   00012B   E9           MOV     A,R1
   \   00012C   A4           MUL     AB
   \   00012D   2A           ADD     A,R2
   \   00012E   F9           MOV     R1,A
   \   00012F   74..         MOV     A,#(pgOff + 14) & 0xff
   \   000131   28           ADD     A,R0
   \   000132   F582         MOV     DPL,A
   \   000134   74..         MOV     A,#((pgOff - 242) >> 8) & 0xff
   \   000136   39           ADDC    A,R1
   \   000137   F583         MOV     DPH,A
   \   000139   E0           MOVX    A,@DPTR
   \   00013A   F8           MOV     R0,A
   \   00013B   A3           INC     DPTR
   \   00013C   E0           MOVX    A,@DPTR
   \   00013D   F9           MOV     R1,A
   \   00013E   7400         MOV     A,#0x0
   \   000140   C3           CLR     C
   \   000141   98           SUBB    A,R0
   \   000142   FA           MOV     R2,A
   \   000143   7408         MOV     A,#0x8
   \   000145   99           SUBB    A,R1
   \   000146   FB           MOV     R3,A
   \   000147   85..82       MOV     DPL,?XSP + 0
   \   00014A   85..83       MOV     DPH,?XSP + 1
   \   00014D   E0           MOVX    A,@DPTR
   \   00014E   F8           MOV     R0,A
   \   00014F   A3           INC     DPTR
   \   000150   E0           MOVX    A,@DPTR
   \   000151   F9           MOV     R1,A
   \   000152   C3           CLR     C
   \   000153   EA           MOV     A,R2
   \   000154   98           SUBB    A,R0
   \   000155   EB           MOV     A,R3
   \   000156   99           SUBB    A,R1
   \   000157   4003         JC      $+5
   \   000159   02....       LJMP    ??initItem_7 & 0xFFFF
    721              {
    722                osalNvPgHdr_t pgHdr;
    723          
    724                /* Prevent excessive re-writes to page header caused by numerous, rapid, & successive
    725                 * OSAL_Nv interruptions caused by resets.
    726                 */
    727                HalFlashRead(pg, OSAL_NV_PAGE_HDR_OFFSET, (uint8 *)(&pgHdr), OSAL_NV_PAGE_HDR_SIZE);
   \   00015C                ; Setup parameters for call to function HalFlashRead
   \   00015C   75..08       MOV     ?V8,#0x8
   \   00015F   75..00       MOV     ?V9,#0x0
   \   000162   78..         MOV     R0,#?V8
   \   000164   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000167   7404         MOV     A,#0x4
   \   000169   12....       LCALL   ?XSTACK_DISP102_8
   \   00016C   7A00         MOV     R2,#0x0
   \   00016E   7B00         MOV     R3,#0x0
   \   000170   EE           MOV     A,R6
   \   000171   F9           MOV     R1,A
   \   000172   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000175   7402         MOV     A,#0x2
   \   000177   12....       LCALL   ?DEALLOC_XSTACK8
    728                if ( pgHdr.xfer == OSAL_NV_ERASED_ID )
   \   00017A   7406         MOV     A,#0x6
   \   00017C   12....       LCALL   ?XSTACK_DISP0_8
   \   00017F   E0           MOVX    A,@DPTR
   \   000180   64FF         XRL     A,#0xff
   \   000182   7004         JNZ     ??initItem_8
   \   000184   A3           INC     DPTR
   \   000185   E0           MOVX    A,@DPTR
   \   000186   64FF         XRL     A,#0xff
   \                     ??initItem_8:
   \   000188   701A         JNZ     ??initItem_9
    729                {
    730                  // Mark the old page as being in process of compaction.
    731                  sz = OSAL_NV_ZEROED_ID;
   \   00018A   85..82       MOV     DPL,?XSP + 0
   \   00018D   85..83       MOV     DPH,?XSP + 1
   \   000190   7400         MOV     A,#0x0
   \   000192   F0           MOVX    @DPTR,A
   \   000193   A3           INC     DPTR
   \   000194   7400         MOV     A,#0x0
   \   000196   F0           MOVX    @DPTR,A
    732                  writeWordH( pg, OSAL_NV_PG_XFER, (uint8*)(&sz) );
   \   000197                ; Setup parameters for call to function writeWordH
   \   000197   AC..         MOV     R4,?XSP + 0
   \   000199   AD..         MOV     R5,?XSP + 1
   \   00019B   7A04         MOV     R2,#0x4
   \   00019D   7B00         MOV     R3,#0x0
   \   00019F   EE           MOV     A,R6
   \   0001A0   F9           MOV     R1,A
   \   0001A1   12....       LCALL   `??writeWordH::?relay`; Banked call to: writeWordH
    733                }
    734          
    735                /* First the old page is compacted, then the new item will be the last one written to what
    736                 * had been the reserved page.
    737                 */
    738                if (compactPage( pg, id ))
   \                     ??initItem_9:
   \   0001A4                ; Setup parameters for call to function compactPage
   \   0001A4   AA..         MOV     R2,?V4
   \   0001A6   AB..         MOV     R3,?V5
   \   0001A8   EE           MOV     A,R6
   \   0001A9   F9           MOV     R1,A
   \   0001AA   12....       LCALL   `??compactPage::?relay`; Banked call to: compactPage
   \   0001AD   E9           MOV     A,R1
   \   0001AE   6078         JZ      ??initItem_6
    739                {
    740                  if ( writeItem( pgRes, id, len, buf, flag ) )
   \   0001B0                ; Setup parameters for call to function writeItem
   \   0001B0   E5..         MOV     A,?V2
   \   0001B2   F5..         MOV     ?V3,A
   \   0001B4   78..         MOV     R0,#?V3
   \   0001B6   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001B9   78..         MOV     R0,#?V6
   \   0001BB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001BE   AC..         MOV     R4,?V0
   \   0001C0   AD..         MOV     R5,?V1
   \   0001C2   AA..         MOV     R2,?V4
   \   0001C4   AB..         MOV     R3,?V5
   \   0001C6   90....       MOV     DPTR,#pgRes
   \   0001C9   E0           MOVX    A,@DPTR
   \   0001CA   F9           MOV     R1,A
   \   0001CB   12....       LCALL   `??writeItem::?relay`; Banked call to: writeItem
   \   0001CE   7403         MOV     A,#0x3
   \   0001D0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001D3   E9           MOV     A,R1
   \   0001D4   6005         JZ      ??initItem_10
    741                  {
    742                    rtrn = pgRes;
   \   0001D6   90....       MOV     DPTR,#pgRes
   \   0001D9   E0           MOVX    A,@DPTR
   \   0001DA   FF           MOV     R7,A
    743                  }
    744          
    745                  if ( flag == FALSE )
   \                     ??initItem_10:
   \   0001DB   E5..         MOV     A,?V2
   \   0001DD   700E         JNZ     ??initItem_11
    746                  {
    747                    /* Overload 'buf' as an OUT parameter to pass back to the calling function
    748                     * the old page to be cleaned up.
    749                     */
    750                    *(uint8 *)buf = pg;
   \   0001DF   EE           MOV     A,R6
   \   0001E0   C0E0         PUSH    A
   \   0001E2   85..82       MOV     DPL,?V6
   \   0001E5   85..83       MOV     DPH,?V7
   \   0001E8   D0E0         POP     A
   \   0001EA   F0           MOVX    @DPTR,A
   \   0001EB   803B         SJMP    ??initItem_6
    751                  }
    752                  else
    753                  {
    754                    /* Safe to do the compacted page cleanup even if writeItem() above failed because the
    755                     * item does not yet exist since this call with flag==TRUE is from osal_nv_item_init().
    756                     */
    757                    COMPACT_PAGE_CLEANUP( pg );
   \                     ??initItem_11:
   \   0001ED                ; Setup parameters for call to function setPageUse
   \   0001ED   7A01         MOV     R2,#0x1
   \   0001EF   90....       MOV     DPTR,#pgRes
   \   0001F2   E0           MOVX    A,@DPTR
   \   0001F3   F9           MOV     R1,A
   \   0001F4   12....       LCALL   `??setPageUse::?relay`; Banked call to: setPageUse
   \   0001F7                ; Setup parameters for call to function erasePage
   \   0001F7   EE           MOV     A,R6
   \   0001F8   F9           MOV     R1,A
   \   0001F9   12....       LCALL   `??erasePage::?relay`; Banked call to: erasePage
   \   0001FC   EE           MOV     A,R6
   \   0001FD   90....       MOV     DPTR,#pgRes
   \   000200   F0           MOVX    @DPTR,A
   \   000201   8025         SJMP    ??initItem_6
    758                  }
    759                }
    760              }
    761              else
    762              {
    763                if ( writeItem( pg, id, len, buf, flag ) )
   \                     ??initItem_7:
   \   000203                ; Setup parameters for call to function writeItem
   \   000203   E5..         MOV     A,?V2
   \   000205   F5..         MOV     ?V3,A
   \   000207   78..         MOV     R0,#?V3
   \   000209   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00020C   78..         MOV     R0,#?V6
   \   00020E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000211   AC..         MOV     R4,?V0
   \   000213   AD..         MOV     R5,?V1
   \   000215   AA..         MOV     R2,?V4
   \   000217   AB..         MOV     R3,?V5
   \   000219   EE           MOV     A,R6
   \   00021A   F9           MOV     R1,A
   \   00021B   12....       LCALL   `??writeItem::?relay`; Banked call to: writeItem
   \   00021E   7403         MOV     A,#0x3
   \   000220   12....       LCALL   ?DEALLOC_XSTACK8
   \   000223   E9           MOV     A,R1
   \   000224   6002         JZ      ??initItem_6
    764                {
    765                  rtrn = pg;
   \   000226   EE           MOV     A,R6
   \   000227   FF           MOV     R7,A
    766                }
    767              }
    768            }
    769          
    770            return rtrn;
   \                     ??initItem_6:
   \   000228   EF           MOV     A,R7
   \   000229   F9           MOV     R1,A
   \   00022A   740A         MOV     A,#0xa
   \   00022C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00022F   7F0A         MOV     R7,#0xa
   \   000231   02....       LJMP    ?BANKED_LEAVE_XDATA
    771          }
    772          
    773          /*********************************************************************
    774           * @fn      setItem
    775           *
    776           * @brief   Set an item Id or status to mark its state.
    777           *
    778           * @param   pg - Valid NV page.
    779           * @param   offset - Valid offset into the page of the item data - the header
    780           *                   offset is calculated from this.
    781           * @param   stat - Valid enum value for the item status.
    782           *
    783           * @return  none
    784           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    785          static void setItem( uint8 pg, uint16 offset, eNvHdrEnum stat )
   \                     setItem:
    786          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V1,R1
   \   00000C   8A..         MOV     ?V2,R2
   \   00000E   8B..         MOV     ?V3,R3
   \   000010   8C..         MOV     ?V0,R4
    787            osalNvHdr_t hdr;
    788          
    789            offset -= OSAL_NV_HDR_SIZE;
   \   000012   E5..         MOV     A,?V2
   \   000014   24F8         ADD     A,#-0x8
   \   000016   F5..         MOV     ?V2,A
   \   000018   E5..         MOV     A,?V3
   \   00001A   34FF         ADDC    A,#-0x1
   \   00001C   F5..         MOV     ?V3,A
    790            HalFlashRead(pg, offset, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \   00001E                ; Setup parameters for call to function HalFlashRead
   \   00001E   75..08       MOV     ?V4,#0x8
   \   000021   75..00       MOV     ?V5,#0x0
   \   000024   78..         MOV     R0,#?V4
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000029   7402         MOV     A,#0x2
   \   00002B   12....       LCALL   ?XSTACK_DISP102_8
   \   00002E   AA..         MOV     R2,?V2
   \   000030   AB..         MOV     R3,?V3
   \   000032   A9..         MOV     R1,?V1
   \   000034   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000037   7402         MOV     A,#0x2
   \   000039   12....       LCALL   ?DEALLOC_XSTACK8
    791          
    792            if ( stat == eNvXfer )
   \   00003C   E5..         MOV     A,?V0
   \   00003E   7025         JNZ     ??setItem_0
    793            {
    794              hdr.stat = OSAL_NV_ACTIVE;
   \   000040   7406         MOV     A,#0x6
   \   000042   12....       LCALL   ?XSTACK_DISP0_8
   \   000045   7400         MOV     A,#0x0
   \   000047   F0           MOVX    @DPTR,A
   \   000048   A3           INC     DPTR
   \   000049   7400         MOV     A,#0x0
   \   00004B   F0           MOVX    @DPTR,A
    795              /* Write status to flash. Total of 4 bytes written to Flash 
    796               * ( 2 bytes of checksum and 2 bytes of status) 
    797               */
    798              writeWord( pg, offset+OSAL_NV_HDR_CHK, (uint8*)(&(hdr.chk)) );
   \   00004C                ; Setup parameters for call to function writeWord
   \   00004C   7404         MOV     A,#0x4
   \   00004E   12....       LCALL   ?XSTACK_DISP0_8
   \   000051   AC82         MOV     R4,DPL
   \   000053   AD83         MOV     R5,DPH
   \   000055   E5..         MOV     A,?V2
   \   000057   2404         ADD     A,#0x4
   \   000059   FA           MOV     R2,A
   \   00005A   E4           CLR     A
   \   00005B   35..         ADDC    A,?V3
   \   00005D   FB           MOV     R3,A
   \   00005E   A9..         MOV     R1,?V1
   \   000060   12....       LCALL   `??writeWord::?relay`; Banked call to: writeWord
   \   000063   807D         SJMP    ??setItem_1
    799            }
    800            else // if ( stat == eNvZero )
    801            {
    802              uint16 sz = ((hdr.len + (OSAL_NV_WORD_SIZE-1)) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE +
    803                                                                                    OSAL_NV_HDR_SIZE;
   \                     ??setItem_0:
   \   000065   7402         MOV     A,#0x2
   \   000067   12....       LCALL   ?XSTACK_DISP0_8
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   2403         ADD     A,#0x3
   \   00006D   F5..         MOV     ?V4,A
   \   00006F   A3           INC     DPTR
   \   000070   E0           MOVX    A,@DPTR
   \   000071   3400         ADDC    A,#0x0
   \   000073   F5..         MOV     ?V5,A
   \   000075   7402         MOV     A,#0x2
   \   000077   78..         MOV     R0,#?V4
   \   000079   12....       LCALL   ?US_SHR
   \   00007C   E5..         MOV     A,?V4
   \   00007E   75F004       MOV     B,#0x4
   \   000081   A4           MUL     AB
   \   000082   C5..         XCH     A,?V4
   \   000084   A8F0         MOV     R0,B
   \   000086   75F000       MOV     B,#0x0
   \   000089   A4           MUL     AB
   \   00008A   28           ADD     A,R0
   \   00008B   F8           MOV     R0,A
   \   00008C   75F004       MOV     B,#0x4
   \   00008F   E5..         MOV     A,?V5
   \   000091   A4           MUL     AB
   \   000092   28           ADD     A,R0
   \   000093   F5..         MOV     ?V5,A
   \   000095   E5..         MOV     A,?V4
   \   000097   2408         ADD     A,#0x8
   \   000099   FE           MOV     R6,A
   \   00009A   E4           CLR     A
   \   00009B   35..         ADDC    A,?V5
   \   00009D   FF           MOV     R7,A
    804              hdr.id = 0;
   \   00009E   85..82       MOV     DPL,?XSP + 0
   \   0000A1   85..83       MOV     DPH,?XSP + 1
   \   0000A4   7400         MOV     A,#0x0
   \   0000A6   F0           MOVX    @DPTR,A
   \   0000A7   A3           INC     DPTR
   \   0000A8   7400         MOV     A,#0x0
   \   0000AA   F0           MOVX    @DPTR,A
    805              writeWord( pg, offset, (uint8 *)(&hdr) );
   \   0000AB                ; Setup parameters for call to function writeWord
   \   0000AB   AC..         MOV     R4,?XSP + 0
   \   0000AD   AD..         MOV     R5,?XSP + 1
   \   0000AF   AA..         MOV     R2,?V2
   \   0000B1   AB..         MOV     R3,?V3
   \   0000B3   A9..         MOV     R1,?V1
   \   0000B5   12....       LCALL   `??writeWord::?relay`; Banked call to: writeWord
    806              pgLost[pg-OSAL_NV_PAGE_BEG] += sz;
   \   0000B8   A8..         MOV     R0,?V1
   \   0000BA   7900         MOV     R1,#0x0
   \   0000BC   E8           MOV     A,R0
   \   0000BD   75F002       MOV     B,#0x2
   \   0000C0   A4           MUL     AB
   \   0000C1   C8           XCH     A,R0
   \   0000C2   AAF0         MOV     R2,B
   \   0000C4   75F000       MOV     B,#0x0
   \   0000C7   A4           MUL     AB
   \   0000C8   2A           ADD     A,R2
   \   0000C9   FA           MOV     R2,A
   \   0000CA   75F002       MOV     B,#0x2
   \   0000CD   E9           MOV     A,R1
   \   0000CE   A4           MUL     AB
   \   0000CF   2A           ADD     A,R2
   \   0000D0   F9           MOV     R1,A
   \   0000D1   74..         MOV     A,#(pgLost + 14) & 0xff
   \   0000D3   28           ADD     A,R0
   \   0000D4   F582         MOV     DPL,A
   \   0000D6   74..         MOV     A,#((pgLost - 242) >> 8) & 0xff
   \   0000D8   39           ADDC    A,R1
   \   0000D9   F583         MOV     DPH,A
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   2E           ADD     A,R6
   \   0000DD   F0           MOVX    @DPTR,A
   \   0000DE   A3           INC     DPTR
   \   0000DF   E0           MOVX    A,@DPTR
   \   0000E0   3F           ADDC    A,R7
   \   0000E1   F0           MOVX    @DPTR,A
    807            }
    808          }
   \                     ??setItem_1:
   \   0000E2   7408         MOV     A,#0x8
   \   0000E4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E7   7F06         MOV     R7,#0x6
   \   0000E9   02....       LJMP    ?BANKED_LEAVE_XDATA
    809          
    810          /*********************************************************************
    811           * @fn      setChk
    812           *
    813           * @brief   Set the item header checksum given the data buffer offset.
    814           *
    815           * @param   pg - Valid NV page.
    816           * @param   offset - Valid offset into the page of the item data - the header
    817           *                   offset is calculated from this.
    818           * @param   chk - The checksum to set.
    819           *
    820           * @return  The checksum read back.
    821           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    822          static uint16 setChk( uint8 pg, uint16 offset, uint16 chk )
   \                     setChk:
    823          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   EC           MOV     A,R4
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   ED           MOV     A,R5
   \   000014   F0           MOVX    @DPTR,A
   \   000015   89..         MOV     ?V0,R1
   \   000017   EA           MOV     A,R2
   \   000018   FE           MOV     R6,A
   \   000019   EB           MOV     A,R3
   \   00001A   FF           MOV     R7,A
    824            offset -= OSAL_NV_WORD_SIZE;
   \   00001B   EE           MOV     A,R6
   \   00001C   24FC         ADD     A,#-0x4
   \   00001E   FE           MOV     R6,A
   \   00001F   EF           MOV     A,R7
   \   000020   34FF         ADDC    A,#-0x1
   \   000022   FF           MOV     R7,A
    825            writeWordH( pg, offset, (uint8 *)&chk );
   \   000023                ; Setup parameters for call to function writeWordH
   \   000023   AC..         MOV     R4,?XSP + 0
   \   000025   AD..         MOV     R5,?XSP + 1
   \   000027   EE           MOV     A,R6
   \   000028   FA           MOV     R2,A
   \   000029   EF           MOV     A,R7
   \   00002A   FB           MOV     R3,A
   \   00002B   A9..         MOV     R1,?V0
   \   00002D   12....       LCALL   `??writeWordH::?relay`; Banked call to: writeWordH
    826            HalFlashRead( pg, offset, (uint8 *)(&chk), sizeof( chk ) );
   \   000030                ; Setup parameters for call to function HalFlashRead
   \   000030   75..02       MOV     ?V2,#0x2
   \   000033   75..00       MOV     ?V3,#0x0
   \   000036   78..         MOV     R0,#?V2
   \   000038   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003B   7402         MOV     A,#0x2
   \   00003D   12....       LCALL   ?XSTACK_DISP102_8
   \   000040   EE           MOV     A,R6
   \   000041   FA           MOV     R2,A
   \   000042   EF           MOV     A,R7
   \   000043   FB           MOV     R3,A
   \   000044   A9..         MOV     R1,?V0
   \   000046   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000049   7402         MOV     A,#0x2
   \   00004B   12....       LCALL   ?DEALLOC_XSTACK8
    827          
    828            return chk;
   \   00004E   85..82       MOV     DPL,?XSP + 0
   \   000051   85..83       MOV     DPH,?XSP + 1
   \   000054   E0           MOVX    A,@DPTR
   \   000055   FA           MOV     R2,A
   \   000056   A3           INC     DPTR
   \   000057   E0           MOVX    A,@DPTR
   \   000058   FB           MOV     R3,A
   \   000059   7402         MOV     A,#0x2
   \   00005B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005E   7F04         MOV     R7,#0x4
   \   000060   02....       LJMP    ?BANKED_LEAVE_XDATA
    829          }
    830          
    831          /*********************************************************************
    832           * @fn      calcChkB
    833           *
    834           * @brief   Calculates the data checksum over the 'buf' parameter.
    835           *
    836           * @param   len - Byte count of the data to be checksummed.
    837           * @param   buf - Data buffer to be checksummed.
    838           *
    839           * @return  Calculated checksum of the data bytes.
    840           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    841          static uint16 calcChkB( uint16 len, uint8 *buf )
   \                     calcChkB:
    842          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    843            uint8 fill = len % OSAL_NV_WORD_SIZE;
   \   000009   EE           MOV     A,R6
   \   00000A   F8           MOV     R0,A
   \   00000B   EF           MOV     A,R7
   \   00000C   F9           MOV     R1,A
   \   00000D   7A04         MOV     R2,#0x4
   \   00000F   7B00         MOV     R3,#0x0
   \   000011   12....       LCALL   ?US_DIV_MOD
   \   000014   EA           MOV     A,R2
   \   000015   F8           MOV     R0,A
    844            uint16 chk;
    845          
    846            if ( !buf )
   \   000016   EC           MOV     A,R4
   \   000017   4D           ORL     A,R5
   \   000018   701B         JNZ     ??calcChkB_0
    847            {
    848              chk = len * OSAL_NV_ERASED;
   \   00001A   EE           MOV     A,R6
   \   00001B   FA           MOV     R2,A
   \   00001C   EF           MOV     A,R7
   \   00001D   FB           MOV     R3,A
   \   00001E   EA           MOV     A,R2
   \   00001F   75F0FF       MOV     B,#-0x1
   \   000022   A4           MUL     AB
   \   000023   CA           XCH     A,R2
   \   000024   A9F0         MOV     R1,B
   \   000026   75F000       MOV     B,#0x0
   \   000029   A4           MUL     AB
   \   00002A   29           ADD     A,R1
   \   00002B   F9           MOV     R1,A
   \   00002C   75F0FF       MOV     B,#-0x1
   \   00002F   EB           MOV     A,R3
   \   000030   A4           MUL     AB
   \   000031   29           ADD     A,R1
   \   000032   FB           MOV     R3,A
   \   000033   8035         SJMP    ??calcChkB_1
    849            }
    850            else
    851            {
    852              chk = 0;
   \                     ??calcChkB_0:
   \   000035   7A00         MOV     R2,#0x0
   \   000037   7B00         MOV     R3,#0x0
   \   000039   801B         SJMP    ??calcChkB_2
    853              while ( len-- )
    854              {
    855                chk += *buf++;
   \                     ??calcChkB_3:
   \   00003B   8C82         MOV     DPL,R4
   \   00003D   8D83         MOV     DPH,R5
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   F5..         MOV     ?V0,A
   \   000042   75..00       MOV     ?V1,#0x0
   \   000045   EA           MOV     A,R2
   \   000046   25..         ADD     A,?V0
   \   000048   FA           MOV     R2,A
   \   000049   EB           MOV     A,R3
   \   00004A   35..         ADDC    A,?V1
   \   00004C   FB           MOV     R3,A
   \   00004D   8C82         MOV     DPL,R4
   \   00004F   8D83         MOV     DPH,R5
   \   000051   A3           INC     DPTR
   \   000052   AC82         MOV     R4,DPL
   \   000054   AD83         MOV     R5,DPH
    856              }
   \                     ??calcChkB_2:
   \   000056   8E..         MOV     ?V0,R6
   \   000058   8F..         MOV     ?V1,R7
   \   00005A   E5..         MOV     A,?V0
   \   00005C   24FF         ADD     A,#-0x1
   \   00005E   FE           MOV     R6,A
   \   00005F   E5..         MOV     A,?V1
   \   000061   34FF         ADDC    A,#-0x1
   \   000063   FF           MOV     R7,A
   \   000064   E5..         MOV     A,?V0
   \   000066   45..         ORL     A,?V1
   \   000068   70D1         JNZ     ??calcChkB_3
    857            }
    858          
    859            // calcChkF() will calculate over OSAL_NV_WORD_SIZE alignment.
    860            if ( fill )
   \                     ??calcChkB_1:
   \   00006A   E8           MOV     A,R0
   \   00006B   6026         JZ      ??calcChkB_4
    861            {
    862              chk += (OSAL_NV_WORD_SIZE - fill) * OSAL_NV_ERASED;
   \   00006D   7900         MOV     R1,#0x0
   \   00006F   7404         MOV     A,#0x4
   \   000071   C3           CLR     C
   \   000072   98           SUBB    A,R0
   \   000073   F8           MOV     R0,A
   \   000074   7400         MOV     A,#0x0
   \   000076   99           SUBB    A,R1
   \   000077   F9           MOV     R1,A
   \   000078   E8           MOV     A,R0
   \   000079   75F0FF       MOV     B,#-0x1
   \   00007C   A4           MUL     AB
   \   00007D   C8           XCH     A,R0
   \   00007E   ACF0         MOV     R4,B
   \   000080   75F000       MOV     B,#0x0
   \   000083   A4           MUL     AB
   \   000084   2C           ADD     A,R4
   \   000085   FC           MOV     R4,A
   \   000086   75F0FF       MOV     B,#-0x1
   \   000089   E9           MOV     A,R1
   \   00008A   A4           MUL     AB
   \   00008B   2C           ADD     A,R4
   \   00008C   F9           MOV     R1,A
   \   00008D   EA           MOV     A,R2
   \   00008E   28           ADD     A,R0
   \   00008F   FA           MOV     R2,A
   \   000090   EB           MOV     A,R3
   \   000091   39           ADDC    A,R1
   \   000092   FB           MOV     R3,A
    863            }
    864          
    865            return chk;
   \                     ??calcChkB_4:
   \   000093   7F02         MOV     R7,#0x2
   \   000095   02....       LJMP    ?BANKED_LEAVE_XDATA
    866          }
    867          
    868          /*********************************************************************
    869           * @fn      calcChkF
    870           *
    871           * @brief   Calculates the data checksum by reading the data bytes from NV.
    872           *
    873           * @param   pg - A valid NV Flash page.
    874           * @param   offset - A valid offset into the page.
    875           * @param   len - Byte count of the data to be checksummed.
    876           *
    877           * @return  Calculated checksum of the data bytes.
    878           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    879          static uint16 calcChkF( uint8 pg, uint16 offset, uint16 len )
   \                     calcChkF:
    880          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V4,R1
   \   00000C   8A..         MOV     ?V2,R2
   \   00000E   8B..         MOV     ?V3,R3
   \   000010   EC           MOV     A,R4
   \   000011   FE           MOV     R6,A
   \   000012   ED           MOV     A,R5
   \   000013   FF           MOV     R7,A
    881            uint16 chk = 0;
   \   000014   75..00       MOV     ?V0,#0x0
   \   000017   75..00       MOV     ?V1,#0x0
    882          
    883            len = (len + (OSAL_NV_WORD_SIZE-1)) / OSAL_NV_WORD_SIZE;
   \   00001A   EE           MOV     A,R6
   \   00001B   2403         ADD     A,#0x3
   \   00001D   F5..         MOV     ?V6,A
   \   00001F   E4           CLR     A
   \   000020   3F           ADDC    A,R7
   \   000021   F5..         MOV     ?V7,A
   \   000023   7402         MOV     A,#0x2
   \   000025   78..         MOV     R0,#?V6
   \   000027   12....       LCALL   ?US_SHR
   \   00002A   AE..         MOV     R6,?V6
   \   00002C   AF..         MOV     R7,?V7
    884          
    885            while ( len-- )
   \                     ??calcChkF_0:
   \   00002E   EE           MOV     A,R6
   \   00002F   F8           MOV     R0,A
   \   000030   EF           MOV     A,R7
   \   000031   F9           MOV     R1,A
   \   000032   E8           MOV     A,R0
   \   000033   24FF         ADD     A,#-0x1
   \   000035   FE           MOV     R6,A
   \   000036   E9           MOV     A,R1
   \   000037   34FF         ADDC    A,#-0x1
   \   000039   FF           MOV     R7,A
   \   00003A   E8           MOV     A,R0
   \   00003B   49           ORL     A,R1
   \   00003C   6057         JZ      ??calcChkF_1
    886            {
    887              uint8 cnt, tmp[OSAL_NV_WORD_SIZE];
    888          
    889              HalFlashRead(pg, offset, tmp, OSAL_NV_WORD_SIZE);
   \   00003E                ; Setup parameters for call to function HalFlashRead
   \   00003E   75..04       MOV     ?V6,#0x4
   \   000041   75..00       MOV     ?V7,#0x0
   \   000044   78..         MOV     R0,#?V6
   \   000046   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000049   7402         MOV     A,#0x2
   \   00004B   12....       LCALL   ?XSTACK_DISP102_8
   \   00004E   AA..         MOV     R2,?V2
   \   000050   AB..         MOV     R3,?V3
   \   000052   A9..         MOV     R1,?V4
   \   000054   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000057   7402         MOV     A,#0x2
   \   000059   12....       LCALL   ?DEALLOC_XSTACK8
    890              offset += OSAL_NV_WORD_SIZE;
   \   00005C   E5..         MOV     A,?V2
   \   00005E   2404         ADD     A,#0x4
   \   000060   F5..         MOV     ?V2,A
   \   000062   E5..         MOV     A,?V3
   \   000064   3400         ADDC    A,#0x0
   \   000066   F5..         MOV     ?V3,A
    891          
    892              for ( cnt = 0; cnt < OSAL_NV_WORD_SIZE; cnt++ )
   \   000068   7A00         MOV     R2,#0x0
   \                     ??calcChkF_2:
   \   00006A   EA           MOV     A,R2
   \   00006B   C3           CLR     C
   \   00006C   9404         SUBB    A,#0x4
   \   00006E   50BE         JNC     ??calcChkF_0
    893              {
    894                chk += tmp[cnt];
   \   000070   EA           MOV     A,R2
   \   000071   F8           MOV     R0,A
   \   000072   7900         MOV     R1,#0x0
   \   000074   85..82       MOV     DPL,?XSP + 0
   \   000077   85..83       MOV     DPH,?XSP + 1
   \   00007A   E582         MOV     A,DPL
   \   00007C   28           ADD     A,R0
   \   00007D   F582         MOV     DPL,A
   \   00007F   E583         MOV     A,DPH
   \   000081   39           ADDC    A,R1
   \   000082   F583         MOV     DPH,A
   \   000084   E0           MOVX    A,@DPTR
   \   000085   F8           MOV     R0,A
   \   000086   7900         MOV     R1,#0x0
   \   000088   E5..         MOV     A,?V0
   \   00008A   28           ADD     A,R0
   \   00008B   F5..         MOV     ?V0,A
   \   00008D   E5..         MOV     A,?V1
   \   00008F   39           ADDC    A,R1
   \   000090   F5..         MOV     ?V1,A
    895              }
   \   000092   0A           INC     R2
   \   000093   80D5         SJMP    ??calcChkF_2
    896            }
    897          
    898            return chk;
   \                     ??calcChkF_1:
   \   000095   AA..         MOV     R2,?V0
   \   000097   AB..         MOV     R3,?V1
   \   000099   7404         MOV     A,#0x4
   \   00009B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00009E   7F08         MOV     R7,#0x8
   \   0000A0   02....       LJMP    ?BANKED_LEAVE_XDATA
    899          }
    900          
    901          /*********************************************************************
    902           * @fn      writeWord
    903           *
    904           * @brief   Writes a Flash-WORD to NV.
    905           *
    906           * @param   pg - A valid NV Flash page.
    907           * @param   offset - A valid offset into the page.
    908           * @param   buf - Pointer to source buffer.
    909           *
    910           * @return  none
    911           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    912          static void writeWord( uint8 pg, uint16 offset, uint8 *buf )
   \                     writeWord:
    913          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    914            offset = (offset / HAL_FLASH_WORD_SIZE) +
    915                    ((uint16)pg * (HAL_FLASH_PAGE_SIZE / HAL_FLASH_WORD_SIZE));
   \   000007   8A..         MOV     ?V0,R2
   \   000009   8B..         MOV     ?V1,R3
   \   00000B   7402         MOV     A,#0x2
   \   00000D   78..         MOV     R0,#?V0
   \   00000F   12....       LCALL   ?US_SHR
   \   000012   EE           MOV     A,R6
   \   000013   F8           MOV     R0,A
   \   000014   7900         MOV     R1,#0x0
   \   000016   E8           MOV     A,R0
   \   000017   75F000       MOV     B,#0x0
   \   00001A   A4           MUL     AB
   \   00001B   C8           XCH     A,R0
   \   00001C   AAF0         MOV     R2,B
   \   00001E   75F002       MOV     B,#0x2
   \   000021   A4           MUL     AB
   \   000022   2A           ADD     A,R2
   \   000023   FA           MOV     R2,A
   \   000024   75F000       MOV     B,#0x0
   \   000027   E9           MOV     A,R1
   \   000028   A4           MUL     AB
   \   000029   2A           ADD     A,R2
   \   00002A   F9           MOV     R1,A
   \   00002B   E5..         MOV     A,?V0
   \   00002D   28           ADD     A,R0
   \   00002E   FA           MOV     R2,A
   \   00002F   E5..         MOV     A,?V1
   \   000031   39           ADDC    A,R1
   \   000032   FB           MOV     R3,A
    916          
    917            HalFlashWrite(offset, buf, 1);
   \   000033                ; Setup parameters for call to function HalFlashWrite
   \   000033   75..01       MOV     ?V0,#0x1
   \   000036   75..00       MOV     ?V1,#0x0
   \   000039   78..         MOV     R0,#?V0
   \   00003B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003E   12....       LCALL   `??HalFlashWrite::?relay`; Banked call to: HalFlashWrite
   \   000041   7402         MOV     A,#0x2
   \   000043   12....       LCALL   ?DEALLOC_XSTACK8
    918          }
   \   000046   7F02         MOV     R7,#0x2
   \   000048   02....       LJMP    ?BANKED_LEAVE_XDATA
    919          
    920          /*********************************************************************
    921           * @fn      writeWordM
    922           *
    923           * @brief   Writes multiple Flash-WORDs to NV.
    924           *
    925           * @param   pg - A valid NV Flash page.
    926           * @param   offset - A valid offset into the page.
    927           * @param   buf - Pointer to source buffer.
    928           * @param   cnt - Number of 4-byte blocks to write.
    929           *
    930           * @return  none
    931           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    932          static void writeWordM( uint8 pg, uint16 offset, uint8 *buf, uint16 cnt )
   \                     writeWordM:
    933          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    934            offset = (offset / HAL_FLASH_WORD_SIZE) +
    935                    ((uint16)pg * (HAL_FLASH_PAGE_SIZE / HAL_FLASH_WORD_SIZE));
   \   000007   8A..         MOV     ?V0,R2
   \   000009   8B..         MOV     ?V1,R3
   \   00000B   7402         MOV     A,#0x2
   \   00000D   78..         MOV     R0,#?V0
   \   00000F   12....       LCALL   ?US_SHR
   \   000012   EE           MOV     A,R6
   \   000013   F8           MOV     R0,A
   \   000014   7900         MOV     R1,#0x0
   \   000016   E8           MOV     A,R0
   \   000017   75F000       MOV     B,#0x0
   \   00001A   A4           MUL     AB
   \   00001B   C8           XCH     A,R0
   \   00001C   AAF0         MOV     R2,B
   \   00001E   75F002       MOV     B,#0x2
   \   000021   A4           MUL     AB
   \   000022   2A           ADD     A,R2
   \   000023   FA           MOV     R2,A
   \   000024   75F000       MOV     B,#0x0
   \   000027   E9           MOV     A,R1
   \   000028   A4           MUL     AB
   \   000029   2A           ADD     A,R2
   \   00002A   F9           MOV     R1,A
   \   00002B   E5..         MOV     A,?V0
   \   00002D   28           ADD     A,R0
   \   00002E   FA           MOV     R2,A
   \   00002F   E5..         MOV     A,?V1
   \   000031   39           ADDC    A,R1
   \   000032   FB           MOV     R3,A
    936            HalFlashWrite(offset, buf, cnt);
   \   000033                ; Setup parameters for call to function HalFlashWrite
   \   000033   740A         MOV     A,#0xa
   \   000035   12....       LCALL   ?XSTACK_DISP0_8
   \   000038   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00003B   12....       LCALL   `??HalFlashWrite::?relay`; Banked call to: HalFlashWrite
   \   00003E   7402         MOV     A,#0x2
   \   000040   12....       LCALL   ?DEALLOC_XSTACK8
    937          }
   \   000043   7F02         MOV     R7,#0x2
   \   000045   02....       LJMP    ?BANKED_LEAVE_XDATA
    938          
    939          /*********************************************************************
    940           * @fn      writeWordH
    941           *
    942           * @brief   Writes the 1st half of a Flash-WORD to NV (filling 2nd half with 0xffff).
    943           *
    944           * @param   pg - A valid NV Flash page.
    945           * @param   offset - A valid offset into the page.
    946           * @param   buf - Pointer to source buffer.
    947           *
    948           * @return  none
    949           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    950          static void writeWordH( uint8 pg, uint16 offset, uint8 *buf )
   \                     writeWordH:
    951          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    952            uint8 tmp[4];
    953          
    954            tmp[0] = buf[0];
   \   00000C   8C82         MOV     DPL,R4
   \   00000E   8D83         MOV     DPH,R5
   \   000010   E0           MOVX    A,@DPTR
   \   000011   C0E0         PUSH    A
   \   000013   85..82       MOV     DPL,?XSP + 0
   \   000016   85..83       MOV     DPH,?XSP + 1
   \   000019   D0E0         POP     A
   \   00001B   F0           MOVX    @DPTR,A
    955            tmp[1] = buf[1];
   \   00001C   8C82         MOV     DPL,R4
   \   00001E   8D83         MOV     DPH,R5
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   C0E0         PUSH    A
   \   000024   7401         MOV     A,#0x1
   \   000026   12....       LCALL   ?XSTACK_DISP0_8
   \   000029   D0E0         POP     A
   \   00002B   F0           MOVX    @DPTR,A
    956            tmp[2] = OSAL_NV_ERASED;
   \   00002C   7402         MOV     A,#0x2
   \   00002E   12....       LCALL   ?XSTACK_DISP0_8
   \   000031   74FF         MOV     A,#-0x1
   \   000033   F0           MOVX    @DPTR,A
    957            tmp[3] = OSAL_NV_ERASED;
   \   000034   7403         MOV     A,#0x3
   \   000036   12....       LCALL   ?XSTACK_DISP0_8
   \   000039   74FF         MOV     A,#-0x1
   \   00003B   F0           MOVX    @DPTR,A
    958          
    959            writeWord( pg, offset, tmp );
   \   00003C                ; Setup parameters for call to function writeWord
   \   00003C   AC..         MOV     R4,?XSP + 0
   \   00003E   AD..         MOV     R5,?XSP + 1
   \   000040   EE           MOV     A,R6
   \   000041   F9           MOV     R1,A
   \   000042   12....       LCALL   `??writeWord::?relay`; Banked call to: writeWord
    960          }
   \   000045   7404         MOV     A,#0x4
   \   000047   12....       LCALL   ?DEALLOC_XSTACK8
   \   00004A   7F01         MOV     R7,#0x1
   \   00004C   02....       LJMP    ?BANKED_LEAVE_XDATA
    961          
    962          /*********************************************************************
    963           * @fn      writeBuf
    964           *
    965           * @brief   Writes a data buffer to NV.
    966           *
    967           * @param   dstPg - A valid NV Flash page.
    968           * @param   offset - A valid offset into the page.
    969           * @param   len  - Byte count of the data to write.
    970           * @param   buf  - The data to write.
    971           *
    972           * @return  TRUE if data buf checksum matches read back checksum, else FALSE.
    973           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    974          static void writeBuf( uint8 dstPg, uint16 dstOff, uint16 len, uint8 *buf )
   \                     writeBuf:
    975          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FF           MOV     R7,A
   \   00000C   8A..         MOV     ?V2,R2
   \   00000E   8B..         MOV     ?V3,R3
   \   000010   8C..         MOV     ?V4,R4
   \   000012   8D..         MOV     ?V5,R5
    976            uint8 rem = dstOff % OSAL_NV_WORD_SIZE;
   \   000014   A8..         MOV     R0,?V2
   \   000016   A9..         MOV     R1,?V3
   \   000018   7A04         MOV     R2,#0x4
   \   00001A   7B00         MOV     R3,#0x0
   \   00001C   12....       LCALL   ?US_DIV_MOD
   \   00001F   EA           MOV     A,R2
   \   000020   FE           MOV     R6,A
   \   000021   7414         MOV     A,#0x14
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F5..         MOV     ?V0,A
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F5..         MOV     ?V1,A
    977            uint8 tmp[OSAL_NV_WORD_SIZE];
    978          
    979            if ( rem )
   \   00002D   EE           MOV     A,R6
   \   00002E   7003         JNZ     $+5
   \   000030   02....       LJMP    ??writeBuf_0 & 0xFFFF
    980            {
    981              dstOff = (dstOff / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE;
   \   000033   7402         MOV     A,#0x2
   \   000035   78..         MOV     R0,#?V2
   \   000037   12....       LCALL   ?US_SHR
   \   00003A   E5..         MOV     A,?V2
   \   00003C   75F004       MOV     B,#0x4
   \   00003F   A4           MUL     AB
   \   000040   C5..         XCH     A,?V2
   \   000042   A8F0         MOV     R0,B
   \   000044   75F000       MOV     B,#0x0
   \   000047   A4           MUL     AB
   \   000048   28           ADD     A,R0
   \   000049   F8           MOV     R0,A
   \   00004A   75F004       MOV     B,#0x4
   \   00004D   E5..         MOV     A,?V3
   \   00004F   A4           MUL     AB
   \   000050   28           ADD     A,R0
   \   000051   F5..         MOV     ?V3,A
    982              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
   \   000053                ; Setup parameters for call to function HalFlashRead
   \   000053   75..04       MOV     ?V6,#0x4
   \   000056   75..00       MOV     ?V7,#0x0
   \   000059   78..         MOV     R0,#?V6
   \   00005B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005E   7402         MOV     A,#0x2
   \   000060   12....       LCALL   ?XSTACK_DISP102_8
   \   000063   AA..         MOV     R2,?V2
   \   000065   AB..         MOV     R3,?V3
   \   000067   EF           MOV     A,R7
   \   000068   F9           MOV     R1,A
   \   000069   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   00006C   7402         MOV     A,#0x2
   \   00006E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000071   803A         SJMP    ??writeBuf_1
    983          
    984              while ( (rem < OSAL_NV_WORD_SIZE) && len )
    985              {
    986                tmp[rem++] = *buf++;
   \                     ??writeBuf_2:
   \   000073   85..82       MOV     DPL,?V0
   \   000076   85..83       MOV     DPH,?V1
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   C0E0         PUSH    A
   \   00007C   EE           MOV     A,R6
   \   00007D   F8           MOV     R0,A
   \   00007E   7900         MOV     R1,#0x0
   \   000080   85..82       MOV     DPL,?XSP + 0
   \   000083   85..83       MOV     DPH,?XSP + 1
   \   000086   E582         MOV     A,DPL
   \   000088   28           ADD     A,R0
   \   000089   F582         MOV     DPL,A
   \   00008B   E583         MOV     A,DPH
   \   00008D   39           ADDC    A,R1
   \   00008E   F583         MOV     DPH,A
   \   000090   D0E0         POP     A
   \   000092   F0           MOVX    @DPTR,A
   \   000093   85..82       MOV     DPL,?V0
   \   000096   85..83       MOV     DPH,?V1
   \   000099   A3           INC     DPTR
   \   00009A   8582..       MOV     ?V0,DPL
   \   00009D   8583..       MOV     ?V1,DPH
   \   0000A0   0E           INC     R6
    987                len--;
   \   0000A1   E5..         MOV     A,?V4
   \   0000A3   24FF         ADD     A,#-0x1
   \   0000A5   F5..         MOV     ?V4,A
   \   0000A7   E5..         MOV     A,?V5
   \   0000A9   34FF         ADDC    A,#-0x1
   \   0000AB   F5..         MOV     ?V5,A
    988              }
   \                     ??writeBuf_1:
   \   0000AD   EE           MOV     A,R6
   \   0000AE   C3           CLR     C
   \   0000AF   9404         SUBB    A,#0x4
   \   0000B1   5006         JNC     ??writeBuf_3
   \   0000B3   E5..         MOV     A,?V4
   \   0000B5   45..         ORL     A,?V5
   \   0000B7   70BA         JNZ     ??writeBuf_2
    989          
    990              writeWord( dstPg, dstOff, tmp );
   \                     ??writeBuf_3:
   \   0000B9                ; Setup parameters for call to function writeWord
   \   0000B9   AC..         MOV     R4,?XSP + 0
   \   0000BB   AD..         MOV     R5,?XSP + 1
   \   0000BD   AA..         MOV     R2,?V2
   \   0000BF   AB..         MOV     R3,?V3
   \   0000C1   EF           MOV     A,R7
   \   0000C2   F9           MOV     R1,A
   \   0000C3   12....       LCALL   `??writeWord::?relay`; Banked call to: writeWord
    991              dstOff += OSAL_NV_WORD_SIZE;
   \   0000C6   E5..         MOV     A,?V2
   \   0000C8   2404         ADD     A,#0x4
   \   0000CA   F5..         MOV     ?V2,A
   \   0000CC   E5..         MOV     A,?V3
   \   0000CE   3400         ADDC    A,#0x0
   \   0000D0   F5..         MOV     ?V3,A
    992            }
    993          
    994            rem = len % OSAL_NV_WORD_SIZE;
   \                     ??writeBuf_0:
   \   0000D2   A8..         MOV     R0,?V4
   \   0000D4   A9..         MOV     R1,?V5
   \   0000D6   7A04         MOV     R2,#0x4
   \   0000D8   7B00         MOV     R3,#0x0
   \   0000DA   12....       LCALL   ?US_DIV_MOD
   \   0000DD   EA           MOV     A,R2
   \   0000DE   FE           MOV     R6,A
    995            len /= OSAL_NV_WORD_SIZE;
   \   0000DF   85....       MOV     ?V6,?V4
   \   0000E2   85....       MOV     ?V7,?V5
   \   0000E5   7402         MOV     A,#0x2
   \   0000E7   78..         MOV     R0,#?V6
   \   0000E9   12....       LCALL   ?US_SHR
   \   0000EC   85....       MOV     ?V4,?V6
   \   0000EF   85....       MOV     ?V5,?V7
    996          
    997            if ( len )
   \   0000F2   E5..         MOV     A,?V4
   \   0000F4   45..         ORL     A,?V5
   \   0000F6   605F         JZ      ??writeBuf_4
    998            {
    999              writeWordM( dstPg, dstOff, buf, len );
   \   0000F8                ; Setup parameters for call to function writeWordM
   \   0000F8   78..         MOV     R0,#?V4
   \   0000FA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000FD   AC..         MOV     R4,?V0
   \   0000FF   AD..         MOV     R5,?V1
   \   000101   AA..         MOV     R2,?V2
   \   000103   AB..         MOV     R3,?V3
   \   000105   EF           MOV     A,R7
   \   000106   F9           MOV     R1,A
   \   000107   12....       LCALL   `??writeWordM::?relay`; Banked call to: writeWordM
   \   00010A   7402         MOV     A,#0x2
   \   00010C   12....       LCALL   ?DEALLOC_XSTACK8
   1000              dstOff += OSAL_NV_WORD_SIZE * len;
   \   00010F   A8..         MOV     R0,?V4
   \   000111   A9..         MOV     R1,?V5
   \   000113   E8           MOV     A,R0
   \   000114   75F004       MOV     B,#0x4
   \   000117   A4           MUL     AB
   \   000118   C8           XCH     A,R0
   \   000119   AAF0         MOV     R2,B
   \   00011B   75F000       MOV     B,#0x0
   \   00011E   A4           MUL     AB
   \   00011F   2A           ADD     A,R2
   \   000120   FA           MOV     R2,A
   \   000121   75F004       MOV     B,#0x4
   \   000124   E9           MOV     A,R1
   \   000125   A4           MUL     AB
   \   000126   2A           ADD     A,R2
   \   000127   F9           MOV     R1,A
   \   000128   E5..         MOV     A,?V2
   \   00012A   28           ADD     A,R0
   \   00012B   F5..         MOV     ?V2,A
   \   00012D   E5..         MOV     A,?V3
   \   00012F   39           ADDC    A,R1
   \   000130   F5..         MOV     ?V3,A
   1001              buf += OSAL_NV_WORD_SIZE * len;
   \   000132   E5..         MOV     A,?V4
   \   000134   75F004       MOV     B,#0x4
   \   000137   A4           MUL     AB
   \   000138   C5..         XCH     A,?V4
   \   00013A   A8F0         MOV     R0,B
   \   00013C   75F000       MOV     B,#0x0
   \   00013F   A4           MUL     AB
   \   000140   28           ADD     A,R0
   \   000141   F8           MOV     R0,A
   \   000142   75F004       MOV     B,#0x4
   \   000145   E5..         MOV     A,?V5
   \   000147   A4           MUL     AB
   \   000148   28           ADD     A,R0
   \   000149   F5..         MOV     ?V5,A
   \   00014B   E5..         MOV     A,?V0
   \   00014D   25..         ADD     A,?V4
   \   00014F   F5..         MOV     ?V0,A
   \   000151   E5..         MOV     A,?V1
   \   000153   35..         ADDC    A,?V5
   \   000155   F5..         MOV     ?V1,A
   1002            }
   1003          
   1004            if ( rem )
   \                     ??writeBuf_4:
   \   000157   EE           MOV     A,R6
   \   000158   606A         JZ      ??writeBuf_5
   1005            {
   1006              uint8 idx = 0;
   \   00015A   75..00       MOV     ?V4,#0x0
   1007              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
   \   00015D                ; Setup parameters for call to function HalFlashRead
   \   00015D   75..04       MOV     ?V6,#0x4
   \   000160   75..00       MOV     ?V7,#0x0
   \   000163   78..         MOV     R0,#?V6
   \   000165   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000168   7402         MOV     A,#0x2
   \   00016A   12....       LCALL   ?XSTACK_DISP102_8
   \   00016D   AA..         MOV     R2,?V2
   \   00016F   AB..         MOV     R3,?V3
   \   000171   EF           MOV     A,R7
   \   000172   F9           MOV     R1,A
   \   000173   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000176   7402         MOV     A,#0x2
   \   000178   12....       LCALL   ?DEALLOC_XSTACK8
   \   00017B   802F         SJMP    ??writeBuf_6
   1008              while ( rem-- )
   1009              {
   1010                tmp[idx++] = *buf++;
   \                     ??writeBuf_7:
   \   00017D   85..82       MOV     DPL,?V0
   \   000180   85..83       MOV     DPH,?V1
   \   000183   E0           MOVX    A,@DPTR
   \   000184   C0E0         PUSH    A
   \   000186   A8..         MOV     R0,?V4
   \   000188   7900         MOV     R1,#0x0
   \   00018A   85..82       MOV     DPL,?XSP + 0
   \   00018D   85..83       MOV     DPH,?XSP + 1
   \   000190   E582         MOV     A,DPL
   \   000192   28           ADD     A,R0
   \   000193   F582         MOV     DPL,A
   \   000195   E583         MOV     A,DPH
   \   000197   39           ADDC    A,R1
   \   000198   F583         MOV     DPH,A
   \   00019A   D0E0         POP     A
   \   00019C   F0           MOVX    @DPTR,A
   \   00019D   85..82       MOV     DPL,?V0
   \   0001A0   85..83       MOV     DPH,?V1
   \   0001A3   A3           INC     DPTR
   \   0001A4   8582..       MOV     ?V0,DPL
   \   0001A7   8583..       MOV     ?V1,DPH
   \   0001AA   05..         INC     ?V4
   1011              }
   \                     ??writeBuf_6:
   \   0001AC   8E..         MOV     ?V5,R6
   \   0001AE   74FF         MOV     A,#-0x1
   \   0001B0   25..         ADD     A,?V5
   \   0001B2   FE           MOV     R6,A
   \   0001B3   E5..         MOV     A,?V5
   \   0001B5   70C6         JNZ     ??writeBuf_7
   1012              writeWord( dstPg, dstOff, tmp );
   \   0001B7                ; Setup parameters for call to function writeWord
   \   0001B7   AC..         MOV     R4,?XSP + 0
   \   0001B9   AD..         MOV     R5,?XSP + 1
   \   0001BB   AA..         MOV     R2,?V2
   \   0001BD   AB..         MOV     R3,?V3
   \   0001BF   EF           MOV     A,R7
   \   0001C0   F9           MOV     R1,A
   \   0001C1   12....       LCALL   `??writeWord::?relay`; Banked call to: writeWord
   1013            }
   1014          }
   \                     ??writeBuf_5:
   \   0001C4   7404         MOV     A,#0x4
   \   0001C6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001C9   7F08         MOV     R7,#0x8
   \   0001CB   02....       LJMP    ?BANKED_LEAVE_XDATA
   1015          
   1016          /*********************************************************************
   1017           * @fn      xferBuf
   1018           *
   1019           * @brief   Xfers an NV buffer from one location to another, enforcing OSAL_NV_WORD_SIZE writes.
   1020           *
   1021           * @return  none
   1022           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1023          static void xferBuf( uint8 srcPg, uint16 srcOff, uint8 dstPg, uint16 dstOff, uint16 len )
   \                     xferBuf:
   1024          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V6,R1
   \   00000C   8A..         MOV     ?V4,R2
   \   00000E   8B..         MOV     ?V5,R3
   \   000010   8C..         MOV     ?V3,R4
   \   000012   7416         MOV     A,#0x16
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F5..         MOV     ?V0,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V1,A
   1025            uint8 rem = dstOff % OSAL_NV_WORD_SIZE;
   \   00001E   A8..         MOV     R0,?V0
   \   000020   A9..         MOV     R1,?V1
   \   000022   7A04         MOV     R2,#0x4
   \   000024   7B00         MOV     R3,#0x0
   \   000026   12....       LCALL   ?US_DIV_MOD
   \   000029   EA           MOV     A,R2
   \   00002A   F5..         MOV     ?V2,A
   \   00002C   7418         MOV     A,#0x18
   \   00002E   12....       LCALL   ?XSTACK_DISP0_8
   \   000031   E0           MOVX    A,@DPTR
   \   000032   FE           MOV     R6,A
   \   000033   A3           INC     DPTR
   \   000034   E0           MOVX    A,@DPTR
   \   000035   FF           MOV     R7,A
   1026            uint8 tmp[OSAL_NV_WORD_SIZE];
   1027          
   1028            if ( rem )
   \   000036   E5..         MOV     A,?V2
   \   000038   7003         JNZ     $+5
   \   00003A   02....       LJMP    ??xferBuf_0 & 0xFFFF
   1029            {
   1030              dstOff -= rem;
   \   00003D   A8..         MOV     R0,?V2
   \   00003F   7900         MOV     R1,#0x0
   \   000041   C3           CLR     C
   \   000042   E5..         MOV     A,?V0
   \   000044   98           SUBB    A,R0
   \   000045   F5..         MOV     ?V0,A
   \   000047   E5..         MOV     A,?V1
   \   000049   99           SUBB    A,R1
   \   00004A   F5..         MOV     ?V1,A
   1031              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
   \   00004C                ; Setup parameters for call to function HalFlashRead
   \   00004C   75..04       MOV     ?V8,#0x4
   \   00004F   75..00       MOV     ?V9,#0x0
   \   000052   78..         MOV     R0,#?V8
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000057   7402         MOV     A,#0x2
   \   000059   12....       LCALL   ?XSTACK_DISP102_8
   \   00005C   AA..         MOV     R2,?V0
   \   00005E   AB..         MOV     R3,?V1
   \   000060   A9..         MOV     R1,?V3
   \   000062   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000065   7402         MOV     A,#0x2
   \   000067   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006A   803C         SJMP    ??xferBuf_1
   1032          
   1033              while ( (rem < OSAL_NV_WORD_SIZE) && len )
   1034              {
   1035                HalFlashRead(srcPg, srcOff, tmp+rem, 1);
   \                     ??xferBuf_2:
   \   00006C                ; Setup parameters for call to function HalFlashRead
   \   00006C   75..01       MOV     ?V8,#0x1
   \   00006F   75..00       MOV     ?V9,#0x0
   \   000072   78..         MOV     R0,#?V8
   \   000074   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000077   A8..         MOV     R0,?V2
   \   000079   7900         MOV     R1,#0x0
   \   00007B   7402         MOV     A,#0x2
   \   00007D   12....       LCALL   ?XSTACK_DISP0_8
   \   000080   E582         MOV     A,DPL
   \   000082   28           ADD     A,R0
   \   000083   FC           MOV     R4,A
   \   000084   E583         MOV     A,DPH
   \   000086   39           ADDC    A,R1
   \   000087   FD           MOV     R5,A
   \   000088   AA..         MOV     R2,?V4
   \   00008A   AB..         MOV     R3,?V5
   \   00008C   A9..         MOV     R1,?V6
   \   00008E   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000091   7402         MOV     A,#0x2
   \   000093   12....       LCALL   ?DEALLOC_XSTACK8
   1036                srcOff++;
   \   000096   05..         INC     ?V4
   \   000098   E5..         MOV     A,?V4
   \   00009A   7002         JNZ     ??xferBuf_3
   \   00009C   05..         INC     ?V5
   1037                rem++;
   \                     ??xferBuf_3:
   \   00009E   05..         INC     ?V2
   1038                len--;
   \   0000A0   EE           MOV     A,R6
   \   0000A1   24FF         ADD     A,#-0x1
   \   0000A3   FE           MOV     R6,A
   \   0000A4   EF           MOV     A,R7
   \   0000A5   34FF         ADDC    A,#-0x1
   \   0000A7   FF           MOV     R7,A
   1039              }
   \                     ??xferBuf_1:
   \   0000A8   E5..         MOV     A,?V2
   \   0000AA   C3           CLR     C
   \   0000AB   9404         SUBB    A,#0x4
   \   0000AD   5004         JNC     ??xferBuf_4
   \   0000AF   EE           MOV     A,R6
   \   0000B0   4F           ORL     A,R7
   \   0000B1   70B9         JNZ     ??xferBuf_2
   1040          
   1041              writeWord( dstPg, dstOff, tmp );
   \                     ??xferBuf_4:
   \   0000B3                ; Setup parameters for call to function writeWord
   \   0000B3   AC..         MOV     R4,?XSP + 0
   \   0000B5   AD..         MOV     R5,?XSP + 1
   \   0000B7   AA..         MOV     R2,?V0
   \   0000B9   AB..         MOV     R3,?V1
   \   0000BB   A9..         MOV     R1,?V3
   \   0000BD   12....       LCALL   `??writeWord::?relay`; Banked call to: writeWord
   1042              dstOff += OSAL_NV_WORD_SIZE;
   \   0000C0   E5..         MOV     A,?V0
   \   0000C2   2404         ADD     A,#0x4
   \   0000C4   F5..         MOV     ?V0,A
   \   0000C6   E5..         MOV     A,?V1
   \   0000C8   3400         ADDC    A,#0x0
   \   0000CA   F5..         MOV     ?V1,A
   1043            }
   1044          
   1045            rem = len % OSAL_NV_WORD_SIZE;
   \                     ??xferBuf_0:
   \   0000CC   EE           MOV     A,R6
   \   0000CD   F8           MOV     R0,A
   \   0000CE   EF           MOV     A,R7
   \   0000CF   F9           MOV     R1,A
   \   0000D0   7A04         MOV     R2,#0x4
   \   0000D2   7B00         MOV     R3,#0x0
   \   0000D4   12....       LCALL   ?US_DIV_MOD
   \   0000D7   EA           MOV     A,R2
   \   0000D8   F5..         MOV     ?V2,A
   1046            len /= OSAL_NV_WORD_SIZE;
   \   0000DA   8E..         MOV     ?V8,R6
   \   0000DC   8F..         MOV     ?V9,R7
   \   0000DE   7402         MOV     A,#0x2
   \   0000E0   78..         MOV     R0,#?V8
   \   0000E2   12....       LCALL   ?US_SHR
   \   0000E5   AE..         MOV     R6,?V8
   \   0000E7   AF..         MOV     R7,?V9
   \   0000E9   8043         SJMP    ??xferBuf_5
   1047          
   1048            while ( len-- )
   1049            {
   1050              HalFlashRead(srcPg, srcOff, tmp, OSAL_NV_WORD_SIZE);
   \                     ??xferBuf_6:
   \   0000EB                ; Setup parameters for call to function HalFlashRead
   \   0000EB   75..04       MOV     ?V8,#0x4
   \   0000EE   75..00       MOV     ?V9,#0x0
   \   0000F1   78..         MOV     R0,#?V8
   \   0000F3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F6   7402         MOV     A,#0x2
   \   0000F8   12....       LCALL   ?XSTACK_DISP102_8
   \   0000FB   AA..         MOV     R2,?V4
   \   0000FD   AB..         MOV     R3,?V5
   \   0000FF   A9..         MOV     R1,?V6
   \   000101   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000104   7402         MOV     A,#0x2
   \   000106   12....       LCALL   ?DEALLOC_XSTACK8
   1051              srcOff += OSAL_NV_WORD_SIZE;
   \   000109   E5..         MOV     A,?V4
   \   00010B   2404         ADD     A,#0x4
   \   00010D   F5..         MOV     ?V4,A
   \   00010F   E5..         MOV     A,?V5
   \   000111   3400         ADDC    A,#0x0
   \   000113   F5..         MOV     ?V5,A
   1052              writeWord( dstPg, dstOff, tmp );
   \   000115                ; Setup parameters for call to function writeWord
   \   000115   AC..         MOV     R4,?XSP + 0
   \   000117   AD..         MOV     R5,?XSP + 1
   \   000119   AA..         MOV     R2,?V0
   \   00011B   AB..         MOV     R3,?V1
   \   00011D   A9..         MOV     R1,?V3
   \   00011F   12....       LCALL   `??writeWord::?relay`; Banked call to: writeWord
   1053              dstOff += OSAL_NV_WORD_SIZE;
   \   000122   E5..         MOV     A,?V0
   \   000124   2404         ADD     A,#0x4
   \   000126   F5..         MOV     ?V0,A
   \   000128   E5..         MOV     A,?V1
   \   00012A   3400         ADDC    A,#0x0
   \   00012C   F5..         MOV     ?V1,A
   1054            }
   \                     ??xferBuf_5:
   \   00012E   EE           MOV     A,R6
   \   00012F   F8           MOV     R0,A
   \   000130   EF           MOV     A,R7
   \   000131   F9           MOV     R1,A
   \   000132   E8           MOV     A,R0
   \   000133   24FF         ADD     A,#-0x1
   \   000135   FE           MOV     R6,A
   \   000136   E9           MOV     A,R1
   \   000137   34FF         ADDC    A,#-0x1
   \   000139   FF           MOV     R7,A
   \   00013A   E8           MOV     A,R0
   \   00013B   49           ORL     A,R1
   \   00013C   70AD         JNZ     ??xferBuf_6
   1055          
   1056            if ( rem )
   \   00013E   E5..         MOV     A,?V2
   \   000140   606C         JZ      ??xferBuf_7
   1057            {
   1058              uint8 idx = 0;
   \   000142   7E00         MOV     R6,#0x0
   1059              HalFlashRead(dstPg, dstOff, tmp, OSAL_NV_WORD_SIZE);
   \   000144                ; Setup parameters for call to function HalFlashRead
   \   000144   75..04       MOV     ?V8,#0x4
   \   000147   75..00       MOV     ?V9,#0x0
   \   00014A   78..         MOV     R0,#?V8
   \   00014C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00014F   7402         MOV     A,#0x2
   \   000151   12....       LCALL   ?XSTACK_DISP102_8
   \   000154   AA..         MOV     R2,?V0
   \   000156   AB..         MOV     R3,?V1
   \   000158   A9..         MOV     R1,?V3
   \   00015A   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   00015D   7402         MOV     A,#0x2
   \   00015F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000162   8033         SJMP    ??xferBuf_8
   1060              while ( rem-- )
   1061              {
   1062                HalFlashRead(srcPg, srcOff, tmp+idx, 1);
   \                     ??xferBuf_9:
   \   000164                ; Setup parameters for call to function HalFlashRead
   \   000164   75..01       MOV     ?V8,#0x1
   \   000167   75..00       MOV     ?V9,#0x0
   \   00016A   78..         MOV     R0,#?V8
   \   00016C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00016F   EE           MOV     A,R6
   \   000170   F8           MOV     R0,A
   \   000171   7900         MOV     R1,#0x0
   \   000173   7402         MOV     A,#0x2
   \   000175   12....       LCALL   ?XSTACK_DISP0_8
   \   000178   E582         MOV     A,DPL
   \   00017A   28           ADD     A,R0
   \   00017B   FC           MOV     R4,A
   \   00017C   E583         MOV     A,DPH
   \   00017E   39           ADDC    A,R1
   \   00017F   FD           MOV     R5,A
   \   000180   AA..         MOV     R2,?V4
   \   000182   AB..         MOV     R3,?V5
   \   000184   A9..         MOV     R1,?V6
   \   000186   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   000189   7402         MOV     A,#0x2
   \   00018B   12....       LCALL   ?DEALLOC_XSTACK8
   1063                srcOff++;
   \   00018E   05..         INC     ?V4
   \   000190   E5..         MOV     A,?V4
   \   000192   7002         JNZ     ??xferBuf_10
   \   000194   05..         INC     ?V5
   1064                idx++;
   \                     ??xferBuf_10:
   \   000196   0E           INC     R6
   1065              }
   \                     ??xferBuf_8:
   \   000197   AF..         MOV     R7,?V2
   \   000199   74FF         MOV     A,#-0x1
   \   00019B   2F           ADD     A,R7
   \   00019C   F5..         MOV     ?V2,A
   \   00019E   EF           MOV     A,R7
   \   00019F   70C3         JNZ     ??xferBuf_9
   1066              writeWord( dstPg, dstOff, tmp );
   \   0001A1                ; Setup parameters for call to function writeWord
   \   0001A1   AC..         MOV     R4,?XSP + 0
   \   0001A3   AD..         MOV     R5,?XSP + 1
   \   0001A5   AA..         MOV     R2,?V0
   \   0001A7   AB..         MOV     R3,?V1
   \   0001A9   A9..         MOV     R1,?V3
   \   0001AB   12....       LCALL   `??writeWord::?relay`; Banked call to: writeWord
   1067            }
   1068          }
   \                     ??xferBuf_7:
   \   0001AE   7404         MOV     A,#0x4
   \   0001B0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001B3   7F0A         MOV     R7,#0xa
   \   0001B5   02....       LJMP    ?BANKED_LEAVE_XDATA
   1069          
   1070          /*********************************************************************
   1071           * @fn      writeItem
   1072           *
   1073           * @brief   Writes an item header/data combo to the specified NV page.
   1074           *
   1075           * @param   pg - Valid NV Flash page.
   1076           * @param   id - Valid NV item Id.
   1077           * @param   len  - Byte count of the data to write.
   1078           * @param   buf  - The data to write. If NULL, no data/checksum write.
   1079           * @param   flag - TRUE if the checksum should be written, FALSE otherwise.
   1080           *
   1081           * @return  TRUE if header/data to write matches header/data read back, else FALSE.
   1082           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1083          static uint8 writeItem( uint8 pg, uint16 id, uint16 len, void *buf, uint8 flag )
   \                     writeItem:
   1084          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0,R1
   \   00000C   8A..         MOV     ?V4,R2
   \   00000E   8B..         MOV     ?V5,R3
   \   000010   EC           MOV     A,R4
   \   000011   FE           MOV     R6,A
   \   000012   ED           MOV     A,R5
   \   000013   FF           MOV     R7,A
   1085            uint16 offset = pgOff[pg-OSAL_NV_PAGE_BEG];
   \   000014   A8..         MOV     R0,?V0
   \   000016   7900         MOV     R1,#0x0
   \   000018   E8           MOV     A,R0
   \   000019   75F002       MOV     B,#0x2
   \   00001C   A4           MUL     AB
   \   00001D   C8           XCH     A,R0
   \   00001E   AAF0         MOV     R2,B
   \   000020   75F000       MOV     B,#0x0
   \   000023   A4           MUL     AB
   \   000024   2A           ADD     A,R2
   \   000025   FA           MOV     R2,A
   \   000026   75F002       MOV     B,#0x2
   \   000029   E9           MOV     A,R1
   \   00002A   A4           MUL     AB
   \   00002B   2A           ADD     A,R2
   \   00002C   F9           MOV     R1,A
   \   00002D   74..         MOV     A,#(pgOff + 14) & 0xff
   \   00002F   28           ADD     A,R0
   \   000030   F582         MOV     DPL,A
   \   000032   74..         MOV     A,#((pgOff - 242) >> 8) & 0xff
   \   000034   39           ADDC    A,R1
   \   000035   F583         MOV     DPH,A
   \   000037   E0           MOVX    A,@DPTR
   \   000038   F5..         MOV     ?V2,A
   \   00003A   A3           INC     DPTR
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   F5..         MOV     ?V3,A
   1086            uint8 rtrn = FALSE;
   \   00003E   75..00       MOV     ?V1,#0x0
   1087            osalNvHdr_t hdr;
   1088          
   1089            hdr.id = id;
   \   000041   85..82       MOV     DPL,?XSP + 0
   \   000044   85..83       MOV     DPH,?XSP + 1
   \   000047   E5..         MOV     A,?V4
   \   000049   F0           MOVX    @DPTR,A
   \   00004A   A3           INC     DPTR
   \   00004B   E5..         MOV     A,?V5
   \   00004D   F0           MOVX    @DPTR,A
   1090            hdr.len = len;
   \   00004E   7402         MOV     A,#0x2
   \   000050   12....       LCALL   ?XSTACK_DISP0_8
   \   000053   EE           MOV     A,R6
   \   000054   F0           MOVX    @DPTR,A
   \   000055   A3           INC     DPTR
   \   000056   EF           MOV     A,R7
   \   000057   F0           MOVX    @DPTR,A
   1091          
   1092            writeWord( pg, offset, (uint8 *)&hdr );
   \   000058                ; Setup parameters for call to function writeWord
   \   000058   AC..         MOV     R4,?XSP + 0
   \   00005A   AD..         MOV     R5,?XSP + 1
   \   00005C   AA..         MOV     R2,?V2
   \   00005E   AB..         MOV     R3,?V3
   \   000060   A9..         MOV     R1,?V0
   \   000062   12....       LCALL   `??writeWord::?relay`; Banked call to: writeWord
   1093            HalFlashRead(pg, offset, (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \   000065                ; Setup parameters for call to function HalFlashRead
   \   000065   75..08       MOV     ?V6,#0x8
   \   000068   75..00       MOV     ?V7,#0x0
   \   00006B   78..         MOV     R0,#?V6
   \   00006D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000070   7402         MOV     A,#0x2
   \   000072   12....       LCALL   ?XSTACK_DISP102_8
   \   000075   AA..         MOV     R2,?V2
   \   000077   AB..         MOV     R3,?V3
   \   000079   A9..         MOV     R1,?V0
   \   00007B   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   00007E   7402         MOV     A,#0x2
   \   000080   12....       LCALL   ?DEALLOC_XSTACK8
   1094          
   1095            if ( (hdr.id == id) && (hdr.len == len) )
   \   000083   85..82       MOV     DPL,?XSP + 0
   \   000086   85..83       MOV     DPH,?XSP + 1
   \   000089   E0           MOVX    A,@DPTR
   \   00008A   65..         XRL     A,?V4
   \   00008C   7004         JNZ     ??writeItem_0
   \   00008E   A3           INC     DPTR
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   65..         XRL     A,?V5
   \                     ??writeItem_0:
   \   000092   6003         JZ      $+5
   \   000094   02....       LJMP    ??writeItem_1 & 0xFFFF
   \   000097   7402         MOV     A,#0x2
   \   000099   12....       LCALL   ?XSTACK_DISP0_8
   \   00009C   E0           MOVX    A,@DPTR
   \   00009D   6E           XRL     A,R6
   \   00009E   7003         JNZ     ??writeItem_2
   \   0000A0   A3           INC     DPTR
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   6F           XRL     A,R7
   \                     ??writeItem_2:
   \   0000A3   6003         JZ      $+5
   \   0000A5   02....       LJMP    ??writeItem_1 & 0xFFFF
   1096            {
   1097              if ( flag )
   \   0000A8   741A         MOV     A,#0x1a
   \   0000AA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AD   E0           MOVX    A,@DPTR
   \   0000AE   7003         JNZ     $+5
   \   0000B0   02....       LJMP    ??writeItem_3 & 0xFFFF
   \   0000B3   7418         MOV     A,#0x18
   \   0000B5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B8   E0           MOVX    A,@DPTR
   \   0000B9   F5..         MOV     ?V4,A
   \   0000BB   A3           INC     DPTR
   \   0000BC   E0           MOVX    A,@DPTR
   \   0000BD   F5..         MOV     ?V5,A
   1098              {
   1099                hdr.chk = calcChkB( len, buf );
   \   0000BF                ; Setup parameters for call to function calcChkB
   \   0000BF   AC..         MOV     R4,?V4
   \   0000C1   AD..         MOV     R5,?V5
   \   0000C3   EE           MOV     A,R6
   \   0000C4   FA           MOV     R2,A
   \   0000C5   EF           MOV     A,R7
   \   0000C6   FB           MOV     R3,A
   \   0000C7   12....       LCALL   `??calcChkB::?relay` ; Banked call to: calcChkB
   \   0000CA   7404         MOV     A,#0x4
   \   0000CC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CF   EA           MOV     A,R2
   \   0000D0   F0           MOVX    @DPTR,A
   \   0000D1   A3           INC     DPTR
   \   0000D2   EB           MOV     A,R3
   \   0000D3   F0           MOVX    @DPTR,A
   1100          
   1101                offset += OSAL_NV_HDR_SIZE;
   \   0000D4   E5..         MOV     A,?V2
   \   0000D6   2408         ADD     A,#0x8
   \   0000D8   F5..         MOV     ?V2,A
   \   0000DA   E5..         MOV     A,?V3
   \   0000DC   3400         ADDC    A,#0x0
   \   0000DE   F5..         MOV     ?V3,A
   1102                if ( buf != NULL )
   \   0000E0   E5..         MOV     A,?V4
   \   0000E2   45..         ORL     A,?V5
   \   0000E4   6017         JZ      ??writeItem_4
   1103                {
   1104                  writeBuf( pg, offset, len, buf );
   \   0000E6                ; Setup parameters for call to function writeBuf
   \   0000E6   78..         MOV     R0,#?V4
   \   0000E8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000EB   EE           MOV     A,R6
   \   0000EC   FC           MOV     R4,A
   \   0000ED   EF           MOV     A,R7
   \   0000EE   FD           MOV     R5,A
   \   0000EF   AA..         MOV     R2,?V2
   \   0000F1   AB..         MOV     R3,?V3
   \   0000F3   A9..         MOV     R1,?V0
   \   0000F5   12....       LCALL   `??writeBuf::?relay` ; Banked call to: writeBuf
   \   0000F8   7402         MOV     A,#0x2
   \   0000FA   12....       LCALL   ?DEALLOC_XSTACK8
   1105                }
   1106          
   1107                if ( hdr.chk == calcChkF( pg, offset, len ) )
   \                     ??writeItem_4:
   \   0000FD                ; Setup parameters for call to function calcChkF
   \   0000FD   EE           MOV     A,R6
   \   0000FE   FC           MOV     R4,A
   \   0000FF   EF           MOV     A,R7
   \   000100   FD           MOV     R5,A
   \   000101   AA..         MOV     R2,?V2
   \   000103   AB..         MOV     R3,?V3
   \   000105   A9..         MOV     R1,?V0
   \   000107   12....       LCALL   `??calcChkF::?relay` ; Banked call to: calcChkF
   \   00010A   8A..         MOV     ?V4,R2
   \   00010C   8B..         MOV     ?V5,R3
   \   00010E   A8..         MOV     R0,?V4
   \   000110   A9..         MOV     R1,?V5
   \   000112   7404         MOV     A,#0x4
   \   000114   12....       LCALL   ?XSTACK_DISP0_8
   \   000117   E0           MOVX    A,@DPTR
   \   000118   68           XRL     A,R0
   \   000119   7003         JNZ     ??writeItem_5
   \   00011B   A3           INC     DPTR
   \   00011C   E0           MOVX    A,@DPTR
   \   00011D   69           XRL     A,R1
   \                     ??writeItem_5:
   \   00011E   7045         JNZ     ??writeItem_6
   1108                {
   1109                  if ( hdr.chk == setChk( pg, offset, hdr.chk ) )
   \   000120                ; Setup parameters for call to function setChk
   \   000120   7404         MOV     A,#0x4
   \   000122   12....       LCALL   ?XSTACK_DISP0_8
   \   000125   E0           MOVX    A,@DPTR
   \   000126   FC           MOV     R4,A
   \   000127   A3           INC     DPTR
   \   000128   E0           MOVX    A,@DPTR
   \   000129   FD           MOV     R5,A
   \   00012A   AA..         MOV     R2,?V2
   \   00012C   AB..         MOV     R3,?V3
   \   00012E   A9..         MOV     R1,?V0
   \   000130   12....       LCALL   `??setChk::?relay`   ; Banked call to: setChk
   \   000133   8A..         MOV     ?V4,R2
   \   000135   8B..         MOV     ?V5,R3
   \   000137   A8..         MOV     R0,?V4
   \   000139   A9..         MOV     R1,?V5
   \   00013B   7404         MOV     A,#0x4
   \   00013D   12....       LCALL   ?XSTACK_DISP0_8
   \   000140   E0           MOVX    A,@DPTR
   \   000141   68           XRL     A,R0
   \   000142   7003         JNZ     ??writeItem_7
   \   000144   A3           INC     DPTR
   \   000145   E0           MOVX    A,@DPTR
   \   000146   69           XRL     A,R1
   \                     ??writeItem_7:
   \   000147   701C         JNZ     ??writeItem_6
   1110                  {
   1111                    hotItemUpdate(pg, offset, hdr.id);
   \   000149                ; Setup parameters for call to function hotItemUpdate
   \   000149   85..82       MOV     DPL,?XSP + 0
   \   00014C   85..83       MOV     DPH,?XSP + 1
   \   00014F   E0           MOVX    A,@DPTR
   \   000150   FC           MOV     R4,A
   \   000151   A3           INC     DPTR
   \   000152   E0           MOVX    A,@DPTR
   \   000153   FD           MOV     R5,A
   \   000154   AA..         MOV     R2,?V2
   \   000156   AB..         MOV     R3,?V3
   \   000158   A9..         MOV     R1,?V0
   \   00015A   12....       LCALL   `??hotItemUpdate::?relay`; Banked call to: hotItemUpdate
   1112                    rtrn = TRUE;
   \   00015D   75..01       MOV     ?V1,#0x1
   \   000160   8003         SJMP    ??writeItem_6
   1113                  }
   1114                }
   1115              }
   1116              else
   1117              {
   1118                rtrn = TRUE;
   \                     ??writeItem_3:
   \   000162   75..01       MOV     ?V1,#0x1
   1119              }
   1120          
   1121              len = OSAL_NV_ITEM_SIZE( hdr.len );
   \                     ??writeItem_6:
   \   000165   7402         MOV     A,#0x2
   \   000167   12....       LCALL   ?XSTACK_DISP0_8
   \   00016A   C3           CLR     C
   \   00016B   E0           MOVX    A,@DPTR
   \   00016C   94F4         SUBB    A,#-0xc
   \   00016E   A3           INC     DPTR
   \   00016F   E0           MOVX    A,@DPTR
   \   000170   94FF         SUBB    A,#-0x1
   \   000172   4007         JC      ??writeItem_8
   \   000174   7EFC         MOV     R6,#-0x4
   \   000176   7FFF         MOV     R7,#-0x1
   \   000178   02....       LJMP    ??writeItem_9 & 0xFFFF
   \                     ??writeItem_8:
   \   00017B   7402         MOV     A,#0x2
   \   00017D   12....       LCALL   ?XSTACK_DISP0_8
   \   000180   E0           MOVX    A,@DPTR
   \   000181   2403         ADD     A,#0x3
   \   000183   F5..         MOV     ?V2,A
   \   000185   A3           INC     DPTR
   \   000186   E0           MOVX    A,@DPTR
   \   000187   3400         ADDC    A,#0x0
   \   000189   F5..         MOV     ?V3,A
   \   00018B   7402         MOV     A,#0x2
   \   00018D   78..         MOV     R0,#?V2
   \   00018F   12....       LCALL   ?US_SHR
   \   000192   E5..         MOV     A,?V2
   \   000194   75F004       MOV     B,#0x4
   \   000197   A4           MUL     AB
   \   000198   C5..         XCH     A,?V2
   \   00019A   A8F0         MOV     R0,B
   \   00019C   75F000       MOV     B,#0x0
   \   00019F   A4           MUL     AB
   \   0001A0   28           ADD     A,R0
   \   0001A1   F8           MOV     R0,A
   \   0001A2   75F004       MOV     B,#0x4
   \   0001A5   E5..         MOV     A,?V3
   \   0001A7   A4           MUL     AB
   \   0001A8   28           ADD     A,R0
   \   0001A9   F5..         MOV     ?V3,A
   \   0001AB   E5..         MOV     A,?V2
   \   0001AD   2408         ADD     A,#0x8
   \   0001AF   FE           MOV     R6,A
   \   0001B0   E4           CLR     A
   \   0001B1   35..         ADDC    A,?V3
   \   0001B3   FF           MOV     R7,A
   \   0001B4   02....       LJMP    ??writeItem_9 & 0xFFFF
   1122            }
   1123            else
   1124            {
   1125              len = OSAL_NV_ITEM_SIZE( hdr.len );
   \                     ??writeItem_1:
   \   0001B7   7402         MOV     A,#0x2
   \   0001B9   12....       LCALL   ?XSTACK_DISP0_8
   \   0001BC   C3           CLR     C
   \   0001BD   E0           MOVX    A,@DPTR
   \   0001BE   94F4         SUBB    A,#-0xc
   \   0001C0   A3           INC     DPTR
   \   0001C1   E0           MOVX    A,@DPTR
   \   0001C2   94FF         SUBB    A,#-0x1
   \   0001C4   4006         JC      ??writeItem_10
   \   0001C6   7EFC         MOV     R6,#-0x4
   \   0001C8   7FFF         MOV     R7,#-0x1
   \   0001CA   8039         SJMP    ??writeItem_11
   \                     ??writeItem_10:
   \   0001CC   7402         MOV     A,#0x2
   \   0001CE   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D1   E0           MOVX    A,@DPTR
   \   0001D2   2403         ADD     A,#0x3
   \   0001D4   F5..         MOV     ?V2,A
   \   0001D6   A3           INC     DPTR
   \   0001D7   E0           MOVX    A,@DPTR
   \   0001D8   3400         ADDC    A,#0x0
   \   0001DA   F5..         MOV     ?V3,A
   \   0001DC   7402         MOV     A,#0x2
   \   0001DE   78..         MOV     R0,#?V2
   \   0001E0   12....       LCALL   ?US_SHR
   \   0001E3   E5..         MOV     A,?V2
   \   0001E5   75F004       MOV     B,#0x4
   \   0001E8   A4           MUL     AB
   \   0001E9   C5..         XCH     A,?V2
   \   0001EB   A8F0         MOV     R0,B
   \   0001ED   75F000       MOV     B,#0x0
   \   0001F0   A4           MUL     AB
   \   0001F1   28           ADD     A,R0
   \   0001F2   F8           MOV     R0,A
   \   0001F3   75F004       MOV     B,#0x4
   \   0001F6   E5..         MOV     A,?V3
   \   0001F8   A4           MUL     AB
   \   0001F9   28           ADD     A,R0
   \   0001FA   F5..         MOV     ?V3,A
   \   0001FC   E5..         MOV     A,?V2
   \   0001FE   2408         ADD     A,#0x8
   \   000200   FE           MOV     R6,A
   \   000201   E4           CLR     A
   \   000202   35..         ADDC    A,?V3
   \   000204   FF           MOV     R7,A
   1126          
   1127              if (len > (OSAL_NV_PAGE_SIZE - pgOff[pg - OSAL_NV_PAGE_BEG]))
   \                     ??writeItem_11:
   \   000205   A8..         MOV     R0,?V0
   \   000207   7900         MOV     R1,#0x0
   \   000209   E8           MOV     A,R0
   \   00020A   75F002       MOV     B,#0x2
   \   00020D   A4           MUL     AB
   \   00020E   C8           XCH     A,R0
   \   00020F   AAF0         MOV     R2,B
   \   000211   75F000       MOV     B,#0x0
   \   000214   A4           MUL     AB
   \   000215   2A           ADD     A,R2
   \   000216   FA           MOV     R2,A
   \   000217   75F002       MOV     B,#0x2
   \   00021A   E9           MOV     A,R1
   \   00021B   A4           MUL     AB
   \   00021C   2A           ADD     A,R2
   \   00021D   F9           MOV     R1,A
   \   00021E   74..         MOV     A,#(pgOff + 14) & 0xff
   \   000220   28           ADD     A,R0
   \   000221   F582         MOV     DPL,A
   \   000223   74..         MOV     A,#((pgOff - 242) >> 8) & 0xff
   \   000225   39           ADDC    A,R1
   \   000226   F583         MOV     DPH,A
   \   000228   E0           MOVX    A,@DPTR
   \   000229   F8           MOV     R0,A
   \   00022A   A3           INC     DPTR
   \   00022B   E0           MOVX    A,@DPTR
   \   00022C   F9           MOV     R1,A
   \   00022D   7400         MOV     A,#0x0
   \   00022F   C3           CLR     C
   \   000230   98           SUBB    A,R0
   \   000231   F8           MOV     R0,A
   \   000232   7408         MOV     A,#0x8
   \   000234   99           SUBB    A,R1
   \   000235   F9           MOV     R1,A
   \   000236   C3           CLR     C
   \   000237   E8           MOV     A,R0
   \   000238   9E           SUBB    A,R6
   \   000239   E9           MOV     A,R1
   \   00023A   9F           SUBB    A,R7
   \   00023B   5031         JNC     ??writeItem_12
   1128              {
   1129                len = (OSAL_NV_PAGE_SIZE - pgOff[pg - OSAL_NV_PAGE_BEG]);
   \   00023D   A8..         MOV     R0,?V0
   \   00023F   7900         MOV     R1,#0x0
   \   000241   E8           MOV     A,R0
   \   000242   75F002       MOV     B,#0x2
   \   000245   A4           MUL     AB
   \   000246   C8           XCH     A,R0
   \   000247   AAF0         MOV     R2,B
   \   000249   75F000       MOV     B,#0x0
   \   00024C   A4           MUL     AB
   \   00024D   2A           ADD     A,R2
   \   00024E   FA           MOV     R2,A
   \   00024F   75F002       MOV     B,#0x2
   \   000252   E9           MOV     A,R1
   \   000253   A4           MUL     AB
   \   000254   2A           ADD     A,R2
   \   000255   F9           MOV     R1,A
   \   000256   74..         MOV     A,#(pgOff + 14) & 0xff
   \   000258   28           ADD     A,R0
   \   000259   F582         MOV     DPL,A
   \   00025B   74..         MOV     A,#((pgOff - 242) >> 8) & 0xff
   \   00025D   39           ADDC    A,R1
   \   00025E   F583         MOV     DPH,A
   \   000260   E0           MOVX    A,@DPTR
   \   000261   F8           MOV     R0,A
   \   000262   A3           INC     DPTR
   \   000263   E0           MOVX    A,@DPTR
   \   000264   F9           MOV     R1,A
   \   000265   7400         MOV     A,#0x0
   \   000267   C3           CLR     C
   \   000268   98           SUBB    A,R0
   \   000269   FE           MOV     R6,A
   \   00026A   7408         MOV     A,#0x8
   \   00026C   99           SUBB    A,R1
   \   00026D   FF           MOV     R7,A
   1130              }
   1131          
   1132              pgLost[pg - OSAL_NV_PAGE_BEG] += len;
   \                     ??writeItem_12:
   \   00026E   A8..         MOV     R0,?V0
   \   000270   7900         MOV     R1,#0x0
   \   000272   E8           MOV     A,R0
   \   000273   75F002       MOV     B,#0x2
   \   000276   A4           MUL     AB
   \   000277   C8           XCH     A,R0
   \   000278   AAF0         MOV     R2,B
   \   00027A   75F000       MOV     B,#0x0
   \   00027D   A4           MUL     AB
   \   00027E   2A           ADD     A,R2
   \   00027F   FA           MOV     R2,A
   \   000280   75F002       MOV     B,#0x2
   \   000283   E9           MOV     A,R1
   \   000284   A4           MUL     AB
   \   000285   2A           ADD     A,R2
   \   000286   F9           MOV     R1,A
   \   000287   74..         MOV     A,#(pgLost + 14) & 0xff
   \   000289   28           ADD     A,R0
   \   00028A   F582         MOV     DPL,A
   \   00028C   74..         MOV     A,#((pgLost - 242) >> 8) & 0xff
   \   00028E   39           ADDC    A,R1
   \   00028F   F583         MOV     DPH,A
   \   000291   E0           MOVX    A,@DPTR
   \   000292   2E           ADD     A,R6
   \   000293   F0           MOVX    @DPTR,A
   \   000294   A3           INC     DPTR
   \   000295   E0           MOVX    A,@DPTR
   \   000296   3F           ADDC    A,R7
   \   000297   F0           MOVX    @DPTR,A
   1133            }
   1134            pgOff[pg - OSAL_NV_PAGE_BEG] += len;
   \                     ??writeItem_9:
   \   000298   A8..         MOV     R0,?V0
   \   00029A   7900         MOV     R1,#0x0
   \   00029C   E8           MOV     A,R0
   \   00029D   75F002       MOV     B,#0x2
   \   0002A0   A4           MUL     AB
   \   0002A1   C8           XCH     A,R0
   \   0002A2   AAF0         MOV     R2,B
   \   0002A4   75F000       MOV     B,#0x0
   \   0002A7   A4           MUL     AB
   \   0002A8   2A           ADD     A,R2
   \   0002A9   FA           MOV     R2,A
   \   0002AA   75F002       MOV     B,#0x2
   \   0002AD   E9           MOV     A,R1
   \   0002AE   A4           MUL     AB
   \   0002AF   2A           ADD     A,R2
   \   0002B0   F9           MOV     R1,A
   \   0002B1   74..         MOV     A,#(pgOff + 14) & 0xff
   \   0002B3   28           ADD     A,R0
   \   0002B4   F582         MOV     DPL,A
   \   0002B6   74..         MOV     A,#((pgOff - 242) >> 8) & 0xff
   \   0002B8   39           ADDC    A,R1
   \   0002B9   F583         MOV     DPH,A
   \   0002BB   E0           MOVX    A,@DPTR
   \   0002BC   2E           ADD     A,R6
   \   0002BD   F0           MOVX    @DPTR,A
   \   0002BE   A3           INC     DPTR
   \   0002BF   E0           MOVX    A,@DPTR
   \   0002C0   3F           ADDC    A,R7
   \   0002C1   F0           MOVX    @DPTR,A
   1135          
   1136            return rtrn;
   \   0002C2   A9..         MOV     R1,?V1
   \   0002C4   7408         MOV     A,#0x8
   \   0002C6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002C9   7F08         MOV     R7,#0x8
   \   0002CB   02....       LJMP    ?BANKED_LEAVE_XDATA
   1137          }
   1138          
   1139          /*********************************************************************
   1140           * @fn      hotItem
   1141           *
   1142           * @brief   Look for the parameter 'id' in the hot items array.
   1143           *
   1144           * @param   id - A valid NV item Id.
   1145           *
   1146           * @return  A valid index into the hot items if the item is hot; OSAL_NV_MAX_HOT if not.
   1147           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1148          static uint8 hotItem(uint16 id)
   \                     hotItem:
   1149          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1150            uint8 hotIdx;
   1151          
   1152            for (hotIdx = 0; hotIdx < OSAL_NV_MAX_HOT; hotIdx++)
   \   000004   7900         MOV     R1,#0x0
   \   000006   8001         SJMP    ??hotItem_0
   \                     ??hotItem_1:
   \   000008   09           INC     R1
   \                     ??hotItem_0:
   \   000009   E9           MOV     A,R1
   \   00000A   C3           CLR     C
   \   00000B   9403         SUBB    A,#0x3
   \   00000D   502C         JNC     ??hotItem_2
   1153            {
   1154              if (hotIds[hotIdx] == id)
   \   00000F   E9           MOV     A,R1
   \   000010   FC           MOV     R4,A
   \   000011   7D00         MOV     R5,#0x0
   \   000013   EC           MOV     A,R4
   \   000014   75F002       MOV     B,#0x2
   \   000017   A4           MUL     AB
   \   000018   CC           XCH     A,R4
   \   000019   A8F0         MOV     R0,B
   \   00001B   75F000       MOV     B,#0x0
   \   00001E   A4           MUL     AB
   \   00001F   28           ADD     A,R0
   \   000020   F8           MOV     R0,A
   \   000021   75F002       MOV     B,#0x2
   \   000024   ED           MOV     A,R5
   \   000025   A4           MUL     AB
   \   000026   28           ADD     A,R0
   \   000027   FD           MOV     R5,A
   \   000028   74..         MOV     A,#hotIds & 0xff
   \   00002A   2C           ADD     A,R4
   \   00002B   F582         MOV     DPL,A
   \   00002D   74..         MOV     A,#(hotIds >> 8) & 0xff
   \   00002F   3D           ADDC    A,R5
   \   000030   F583         MOV     DPH,A
   \   000032   E0           MOVX    A,@DPTR
   \   000033   6A           XRL     A,R2
   \   000034   7003         JNZ     ??hotItem_3
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   6B           XRL     A,R3
   \                     ??hotItem_3:
   \   000039   70CD         JNZ     ??hotItem_1
   1155              {
   1156                break;
   1157              }
   1158            }
   1159          
   1160            return hotIdx;
   \                     ??hotItem_2:
   \   00003B   D083         POP     DPH
   \   00003D   D082         POP     DPL
   \   00003F   02....       LJMP    ?BRET
   1161          }
   1162          
   1163          /*********************************************************************
   1164           * @fn      hotItemUpdate
   1165           *
   1166           * @brief   If the parameter 'id' is a hot item, update the corresponding hot item data.
   1167           *
   1168           * @param   pg - The new NV page corresponding to the hot item.
   1169           * @param   off - The new NV page offset corresponding to the hot item.
   1170           * @param   id - A valid NV item Id.
   1171           *
   1172           * @return  none
   1173           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1174          static void hotItemUpdate(uint8 pg, uint16 off, uint16 id)
   \                     hotItemUpdate:
   1175          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
   \   00000B   EC           MOV     A,R4
   \   00000C   FA           MOV     R2,A
   \   00000D   ED           MOV     A,R5
   \   00000E   FB           MOV     R3,A
   1176            uint8 hotIdx = hotItem(id);
   \   00000F                ; Setup parameters for call to function hotItem
   \   00000F   12....       LCALL   `??hotItem::?relay`  ; Banked call to: hotItem
   \   000012   E9           MOV     A,R1
   \   000013   FA           MOV     R2,A
   1177          
   1178            if (hotIdx < OSAL_NV_MAX_HOT)
   \   000014   EA           MOV     A,R2
   \   000015   C3           CLR     C
   \   000016   9403         SUBB    A,#0x3
   \   000018   503D         JNC     ??hotItemUpdate_0
   1179            {
   1180              {
   1181                hotPg[hotIdx] = pg;
   \   00001A   E5..         MOV     A,?V0
   \   00001C   C0E0         PUSH    A
   \   00001E   EA           MOV     A,R2
   \   00001F   F8           MOV     R0,A
   \   000020   7900         MOV     R1,#0x0
   \   000022   74..         MOV     A,#hotPg & 0xff
   \   000024   28           ADD     A,R0
   \   000025   F582         MOV     DPL,A
   \   000027   74..         MOV     A,#(hotPg >> 8) & 0xff
   \   000029   39           ADDC    A,R1
   \   00002A   F583         MOV     DPH,A
   \   00002C   D0E0         POP     A
   \   00002E   F0           MOVX    @DPTR,A
   1182                hotOff[hotIdx] = off;
   \   00002F   EA           MOV     A,R2
   \   000030   F8           MOV     R0,A
   \   000031   7900         MOV     R1,#0x0
   \   000033   E8           MOV     A,R0
   \   000034   75F002       MOV     B,#0x2
   \   000037   A4           MUL     AB
   \   000038   C8           XCH     A,R0
   \   000039   AAF0         MOV     R2,B
   \   00003B   75F000       MOV     B,#0x0
   \   00003E   A4           MUL     AB
   \   00003F   2A           ADD     A,R2
   \   000040   FA           MOV     R2,A
   \   000041   75F002       MOV     B,#0x2
   \   000044   E9           MOV     A,R1
   \   000045   A4           MUL     AB
   \   000046   2A           ADD     A,R2
   \   000047   F9           MOV     R1,A
   \   000048   74..         MOV     A,#hotOff & 0xff
   \   00004A   28           ADD     A,R0
   \   00004B   F582         MOV     DPL,A
   \   00004D   74..         MOV     A,#(hotOff >> 8) & 0xff
   \   00004F   39           ADDC    A,R1
   \   000050   F583         MOV     DPH,A
   \   000052   EE           MOV     A,R6
   \   000053   F0           MOVX    @DPTR,A
   \   000054   A3           INC     DPTR
   \   000055   EF           MOV     A,R7
   \   000056   F0           MOVX    @DPTR,A
   1183              }
   1184            }
   1185          }
   \                     ??hotItemUpdate_0:
   \   000057   7F01         MOV     R7,#0x1
   \   000059   02....       LJMP    ?BANKED_LEAVE_XDATA
   1186          
   1187          /*********************************************************************
   1188           * @fn      osal_nv_init
   1189           *
   1190           * @brief   Initialize NV service.
   1191           *
   1192           * @param   p - Not used.
   1193           *
   1194           * @return  none
   1195           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1196          void osal_nv_init( void *p )
   \                     osal_nv_init:
   1197          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1198            (void)p;  // Suppress Lint warning.
   1199            (void)initNV();  // Always returns TRUE after pages have been erased.
   \   000004                ; Setup parameters for call to function initNV
   \   000004   12....       LCALL   `??initNV::?relay`   ; Banked call to: initNV
   \   000007   E9           MOV     A,R1
   1200          }
   \   000008   D083         POP     DPH
   \   00000A   D082         POP     DPL
   \   00000C   02....       LJMP    ?BRET
   1201          
   1202          /*********************************************************************
   1203           * @fn      osal_nv_item_init
   1204           *
   1205           * @brief   If the NV item does not already exist, it is created and
   1206           *          initialized with the data passed to the function, if any.
   1207           *          This function must be called before calling osal_nv_read() or
   1208           *          osal_nv_write().
   1209           *
   1210           * @param   id  - Valid NV item Id.
   1211           * @param   len - Item length.
   1212           * @param  *buf - Pointer to item initalization data. Set to NULL if none.
   1213           *
   1214           * @return  NV_ITEM_UNINIT - Id did not exist and was created successfully.
   1215           *          SUCCESS        - Id already existed, no action taken.
   1216           *          NV_OPER_FAILED - Failure to find or create Id.
   1217           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1218          uint8 osal_nv_item_init( uint16 id, uint16 len, void *buf )
   \                     osal_nv_item_init:
   1219          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
   1220            uint16 offset;
   1221          
   1222            if ( !OSAL_NV_CHECK_BUS_VOLTAGE )
   \   00000D                ; Setup parameters for call to function HalAdcCheckVdd
   \   00000D   794E         MOV     R1,#0x4e
   \   00000F   12....       LCALL   `??HalAdcCheckVdd::?relay`; Banked call to: HalAdcCheckVdd
   \   000012   E9           MOV     A,R1
   \   000013   7004         JNZ     ??osal_nv_item_init_0
   1223            {
   1224              return NV_OPER_FAILED;
   \   000015   790A         MOV     R1,#0xa
   \   000017   804A         SJMP    ??osal_nv_item_init_1
   1225            }
   1226            else if ((offset = findItem(id)) != OSAL_NV_ITEM_NULL)
   \                     ??osal_nv_item_init_0:
   \   000019                ; Setup parameters for call to function findItem
   \   000019   EE           MOV     A,R6
   \   00001A   FA           MOV     R2,A
   \   00001B   EF           MOV     A,R7
   \   00001C   FB           MOV     R3,A
   \   00001D   12....       LCALL   `??findItem::?relay` ; Banked call to: findItem
   \   000020   8A..         MOV     ?V2,R2
   \   000022   8B..         MOV     ?V3,R3
   \   000024   A8..         MOV     R0,?V2
   \   000026   A9..         MOV     R1,?V3
   \   000028   E8           MOV     A,R0
   \   000029   FA           MOV     R2,A
   \   00002A   E9           MOV     A,R1
   \   00002B   FB           MOV     R3,A
   \   00002C   E8           MOV     A,R0
   \   00002D   49           ORL     A,R1
   \   00002E   6010         JZ      ??osal_nv_item_init_2
   1227            {
   1228              // Re-populate the NV hot item data if the corresponding items are already established.
   1229              hotItemUpdate(findPg, offset, id);
   \   000030                ; Setup parameters for call to function hotItemUpdate
   \   000030   EE           MOV     A,R6
   \   000031   FC           MOV     R4,A
   \   000032   EF           MOV     A,R7
   \   000033   FD           MOV     R5,A
   \   000034   90....       MOV     DPTR,#findPg
   \   000037   E0           MOVX    A,@DPTR
   \   000038   F9           MOV     R1,A
   \   000039   12....       LCALL   `??hotItemUpdate::?relay`; Banked call to: hotItemUpdate
   1230          
   1231              return SUCCESS;
   \   00003C   7900         MOV     R1,#0x0
   \   00003E   8023         SJMP    ??osal_nv_item_init_1
   1232            }
   1233            else if ( initItem( TRUE, id, len, buf ) != OSAL_NV_PAGE_NULL )
   \                     ??osal_nv_item_init_2:
   \   000040                ; Setup parameters for call to function initItem
   \   000040   740C         MOV     A,#0xc
   \   000042   12....       LCALL   ?XSTACK_DISP0_8
   \   000045   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000048   AC..         MOV     R4,?V0
   \   00004A   AD..         MOV     R5,?V1
   \   00004C   EE           MOV     A,R6
   \   00004D   FA           MOV     R2,A
   \   00004E   EF           MOV     A,R7
   \   00004F   FB           MOV     R3,A
   \   000050   7901         MOV     R1,#0x1
   \   000052   12....       LCALL   `??initItem::?relay` ; Banked call to: initItem
   \   000055   7402         MOV     A,#0x2
   \   000057   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005A   E9           MOV     A,R1
   \   00005B   6004         JZ      ??osal_nv_item_init_3
   1234            {
   1235              return NV_ITEM_UNINIT;
   \   00005D   7909         MOV     R1,#0x9
   \   00005F   8002         SJMP    ??osal_nv_item_init_1
   1236            }
   1237            else
   1238            {
   1239              return NV_OPER_FAILED;
   \                     ??osal_nv_item_init_3:
   \   000061   790A         MOV     R1,#0xa
   \                     ??osal_nv_item_init_1:
   \   000063   7F04         MOV     R7,#0x4
   \   000065   02....       LJMP    ?BANKED_LEAVE_XDATA
   1240            }
   1241          }
   1242          
   1243          /*********************************************************************
   1244           * @fn      osal_nv_item_len
   1245           *
   1246           * @brief   Get the data length of the item stored in NV memory.
   1247           *
   1248           * @param   id  - Valid NV item Id.
   1249           *
   1250           * @return  Item length, if found; zero otherwise.
   1251           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1252          uint16 osal_nv_item_len( uint16 id )
   \                     osal_nv_item_len:
   1253          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1254            osalNvHdr_t hdr;
   1255            uint16 offset;
   1256            uint8 hotIdx;
   1257          
   1258            if ((hotIdx = hotItem(id)) < OSAL_NV_MAX_HOT)
   \   00000E                ; Setup parameters for call to function hotItem
   \   00000E   EE           MOV     A,R6
   \   00000F   FA           MOV     R2,A
   \   000010   EF           MOV     A,R7
   \   000011   FB           MOV     R3,A
   \   000012   12....       LCALL   `??hotItem::?relay`  ; Banked call to: hotItem
   \   000015   E9           MOV     A,R1
   \   000016   F8           MOV     R0,A
   \   000017   88..         MOV     ?V0,R0
   \   000019   E8           MOV     A,R0
   \   00001A   C3           CLR     C
   \   00001B   9403         SUBB    A,#0x3
   \   00001D   5074         JNC     ??osal_nv_item_len_0
   1259            {
   1260              findPg = hotPg[hotIdx];
   \   00001F   A8..         MOV     R0,?V0
   \   000021   7900         MOV     R1,#0x0
   \   000023   74..         MOV     A,#hotPg & 0xff
   \   000025   28           ADD     A,R0
   \   000026   F582         MOV     DPL,A
   \   000028   74..         MOV     A,#(hotPg >> 8) & 0xff
   \   00002A   39           ADDC    A,R1
   \   00002B   F583         MOV     DPH,A
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   90....       MOV     DPTR,#findPg
   \   000031   F0           MOVX    @DPTR,A
   1261              offset = hotOff[hotIdx];
   \   000032   A8..         MOV     R0,?V0
   \   000034   7900         MOV     R1,#0x0
   \   000036   E8           MOV     A,R0
   \   000037   75F002       MOV     B,#0x2
   \   00003A   A4           MUL     AB
   \   00003B   C8           XCH     A,R0
   \   00003C   AAF0         MOV     R2,B
   \   00003E   75F000       MOV     B,#0x0
   \   000041   A4           MUL     AB
   \   000042   2A           ADD     A,R2
   \   000043   FA           MOV     R2,A
   \   000044   75F002       MOV     B,#0x2
   \   000047   E9           MOV     A,R1
   \   000048   A4           MUL     AB
   \   000049   2A           ADD     A,R2
   \   00004A   F9           MOV     R1,A
   \   00004B   74..         MOV     A,#hotOff & 0xff
   \   00004D   28           ADD     A,R0
   \   00004E   F582         MOV     DPL,A
   \   000050   74..         MOV     A,#(hotOff >> 8) & 0xff
   \   000052   39           ADDC    A,R1
   \   000053   F583         MOV     DPH,A
   \   000055   E0           MOVX    A,@DPTR
   \   000056   FA           MOV     R2,A
   \   000057   A3           INC     DPTR
   \   000058   E0           MOVX    A,@DPTR
   \   000059   FB           MOV     R3,A
   1262            }
   1263            else if ((offset = findItem(id)) == OSAL_NV_ITEM_NULL)
   1264            {
   1265              return 0;
   1266            }
   1267          
   1268            HalFlashRead(findPg, (offset - OSAL_NV_HDR_SIZE), (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \                     ??osal_nv_item_len_1:
   \   00005A                ; Setup parameters for call to function HalFlashRead
   \   00005A   75..08       MOV     ?V2,#0x8
   \   00005D   75..00       MOV     ?V3,#0x0
   \   000060   78..         MOV     R0,#?V2
   \   000062   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000065   7402         MOV     A,#0x2
   \   000067   12....       LCALL   ?XSTACK_DISP102_8
   \   00006A   EA           MOV     A,R2
   \   00006B   24F8         ADD     A,#-0x8
   \   00006D   FA           MOV     R2,A
   \   00006E   EB           MOV     A,R3
   \   00006F   34FF         ADDC    A,#-0x1
   \   000071   FB           MOV     R3,A
   \   000072   90....       MOV     DPTR,#findPg
   \   000075   E0           MOVX    A,@DPTR
   \   000076   F9           MOV     R1,A
   \   000077   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   00007A   7402         MOV     A,#0x2
   \   00007C   12....       LCALL   ?DEALLOC_XSTACK8
   1269            return hdr.len;
   \   00007F   7402         MOV     A,#0x2
   \   000081   12....       LCALL   ?XSTACK_DISP0_8
   \   000084   E0           MOVX    A,@DPTR
   \   000085   FA           MOV     R2,A
   \   000086   A3           INC     DPTR
   \   000087   E0           MOVX    A,@DPTR
   \   000088   FB           MOV     R3,A
   \                     ??osal_nv_item_len_2:
   \   000089   7408         MOV     A,#0x8
   \   00008B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008E   7F04         MOV     R7,#0x4
   \   000090   02....       LJMP    ?BANKED_LEAVE_XDATA
   \                     ??osal_nv_item_len_0:
   \   000093                ; Setup parameters for call to function findItem
   \   000093   EE           MOV     A,R6
   \   000094   FA           MOV     R2,A
   \   000095   EF           MOV     A,R7
   \   000096   FB           MOV     R3,A
   \   000097   12....       LCALL   `??findItem::?relay` ; Banked call to: findItem
   \   00009A   8A..         MOV     ?V2,R2
   \   00009C   8B..         MOV     ?V3,R3
   \   00009E   A8..         MOV     R0,?V2
   \   0000A0   A9..         MOV     R1,?V3
   \   0000A2   E8           MOV     A,R0
   \   0000A3   FA           MOV     R2,A
   \   0000A4   E9           MOV     A,R1
   \   0000A5   FB           MOV     R3,A
   \   0000A6   E8           MOV     A,R0
   \   0000A7   49           ORL     A,R1
   \   0000A8   70B0         JNZ     ??osal_nv_item_len_1
   \   0000AA   7A00         MOV     R2,#0x0
   \   0000AC   7B00         MOV     R3,#0x0
   \   0000AE   80D9         SJMP    ??osal_nv_item_len_2
   1270          }
   1271          
   1272          /*********************************************************************
   1273           * @fn      osal_nv_write
   1274           *
   1275           * @brief   Write a data item to NV. Function can write an entire item to NV or
   1276           *          an element of an item by indexing into the item with an offset.
   1277           *
   1278           * @param   id  - Valid NV item Id.
   1279           * @param   ndx - Index offset into item
   1280           * @param   len - Length of data to write.
   1281           * @param  *buf - Data to write.
   1282           *
   1283           * @return  SUCCESS if successful, NV_ITEM_UNINIT if item did not
   1284           *          exist in NV and offset is non-zero, NV_OPER_FAILED if failure.
   1285           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1286          uint8 osal_nv_write( uint16 id, uint16 ndx, uint16 len, void *buf )
   \                     osal_nv_write:
   1287          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV     A,#-0xe
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   740C         MOV     A,#0xc
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EA           MOV     A,R2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   EB           MOV     A,R3
   \   000013   F0           MOVX    @DPTR,A
   \   000014   8C..         MOV     ?V4,R4
   \   000016   8D..         MOV     ?V5,R5
   1288            uint8 rtrn = SUCCESS;
   \   000018   75..00       MOV     ?V2,#0x0
   1289          
   1290            if ( !OSAL_NV_CHECK_BUS_VOLTAGE )
   \   00001B                ; Setup parameters for call to function HalAdcCheckVdd
   \   00001B   794E         MOV     R1,#0x4e
   \   00001D   12....       LCALL   `??HalAdcCheckVdd::?relay`; Banked call to: HalAdcCheckVdd
   \   000020   E9           MOV     A,R1
   \   000021   7005         JNZ     ??osal_nv_write_0
   1291            {
   1292              return NV_OPER_FAILED;
   \   000023   790A         MOV     R1,#0xa
   \   000025   02....       LJMP    ??osal_nv_write_1 & 0xFFFF
   1293            }
   \                     ??osal_nv_write_0:
   \   000028   7424         MOV     A,#0x24
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F5..         MOV     ?V12,A
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F5..         MOV     ?V13,A
   1294            else if ( len != 0 )
   \   000034   E5..         MOV     A,?V12
   \   000036   45..         ORL     A,?V13
   \   000038   7003         JNZ     $+5
   \   00003A   02....       LJMP    ??osal_nv_write_2 & 0xFFFF
   1295            {
   1296              osalNvHdr_t hdr;
   1297              uint16 origOff, srcOff;
   1298              uint16 cnt, chk;
   1299              uint8 *ptr, srcPg;
   1300          
   1301              origOff = srcOff = findItem( id );
   \   00003D                ; Setup parameters for call to function findItem
   \   00003D   740C         MOV     A,#0xc
   \   00003F   12....       LCALL   ?XSTACK_DISP0_8
   \   000042   E0           MOVX    A,@DPTR
   \   000043   FA           MOV     R2,A
   \   000044   A3           INC     DPTR
   \   000045   E0           MOVX    A,@DPTR
   \   000046   FB           MOV     R3,A
   \   000047   12....       LCALL   `??findItem::?relay` ; Banked call to: findItem
   \   00004A   8A..         MOV     ?V0,R2
   \   00004C   8B..         MOV     ?V1,R3
   \   00004E   A8..         MOV     R0,?V0
   \   000050   A9..         MOV     R1,?V1
   \   000052   E8           MOV     A,R0
   \   000053   FE           MOV     R6,A
   \   000054   E9           MOV     A,R1
   \   000055   FF           MOV     R7,A
   \   000056   7402         MOV     A,#0x2
   \   000058   12....       LCALL   ?XSTACK_DISP0_8
   \   00005B   E8           MOV     A,R0
   \   00005C   F0           MOVX    @DPTR,A
   \   00005D   A3           INC     DPTR
   \   00005E   E9           MOV     A,R1
   \   00005F   F0           MOVX    @DPTR,A
   1302              srcPg = findPg;
   \   000060   90....       MOV     DPTR,#findPg
   \   000063   E0           MOVX    A,@DPTR
   \   000064   F5..         MOV     ?V3,A
   1303              if ( srcOff == OSAL_NV_ITEM_NULL )
   \   000066   EE           MOV     A,R6
   \   000067   4F           ORL     A,R7
   \   000068   7005         JNZ     ??osal_nv_write_3
   1304              {
   1305                return NV_ITEM_UNINIT;
   \   00006A   7909         MOV     R1,#0x9
   \   00006C   02....       LJMP    ??osal_nv_write_1 & 0xFFFF
   1306              }
   1307          
   1308              HalFlashRead(srcPg, (srcOff - OSAL_NV_HDR_SIZE), (uint8 *)(&hdr), OSAL_NV_HDR_SIZE);
   \                     ??osal_nv_write_3:
   \   00006F                ; Setup parameters for call to function HalFlashRead
   \   00006F   75..08       MOV     ?V0,#0x8
   \   000072   75..00       MOV     ?V1,#0x0
   \   000075   78..         MOV     R0,#?V0
   \   000077   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007A   7406         MOV     A,#0x6
   \   00007C   12....       LCALL   ?XSTACK_DISP102_8
   \   00007F   EE           MOV     A,R6
   \   000080   24F8         ADD     A,#-0x8
   \   000082   FA           MOV     R2,A
   \   000083   EF           MOV     A,R7
   \   000084   34FF         ADDC    A,#-0x1
   \   000086   FB           MOV     R3,A
   \   000087   A9..         MOV     R1,?V3
   \   000089   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   00008C   7402         MOV     A,#0x2
   \   00008E   12....       LCALL   ?DEALLOC_XSTACK8
   1309              if ( hdr.len < (ndx + len) )
   \   000091   7406         MOV     A,#0x6
   \   000093   12....       LCALL   ?XSTACK_DISP0_8
   \   000096   E5..         MOV     A,?V4
   \   000098   25..         ADD     A,?V12
   \   00009A   F8           MOV     R0,A
   \   00009B   E5..         MOV     A,?V5
   \   00009D   35..         ADDC    A,?V13
   \   00009F   F9           MOV     R1,A
   \   0000A0   C3           CLR     C
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   98           SUBB    A,R0
   \   0000A3   A3           INC     DPTR
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   99           SUBB    A,R1
   \   0000A6   5005         JNC     ??osal_nv_write_4
   1310              {
   1311                return NV_OPER_FAILED;
   \   0000A8   790A         MOV     R1,#0xa
   \   0000AA   02....       LJMP    ??osal_nv_write_1 & 0xFFFF
   1312              }
   1313          
   1314              srcOff += ndx;
   \                     ??osal_nv_write_4:
   \   0000AD   EE           MOV     A,R6
   \   0000AE   25..         ADD     A,?V4
   \   0000B0   FE           MOV     R6,A
   \   0000B1   EF           MOV     A,R7
   \   0000B2   35..         ADDC    A,?V5
   \   0000B4   FF           MOV     R7,A
   1315              ptr = buf;
   \   0000B5   7426         MOV     A,#0x26
   \   0000B7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BA   E0           MOVX    A,@DPTR
   \   0000BB   F5..         MOV     ?V6,A
   \   0000BD   A3           INC     DPTR
   \   0000BE   E0           MOVX    A,@DPTR
   \   0000BF   F5..         MOV     ?V7,A
   1316              cnt = len;
   \   0000C1   85....       MOV     ?V0,?V12
   \   0000C4   85....       MOV     ?V1,?V13
   1317              chk = 0;
   \   0000C7   75..00       MOV     ?V8,#0x0
   \   0000CA   75..00       MOV     ?V9,#0x0
   \   0000CD   8073         SJMP    ??osal_nv_write_5
   1318              while ( cnt-- )
   1319              {
   1320                uint8 tmp;
   1321                HalFlashRead(srcPg, srcOff, &tmp, 1);
   \                     ??osal_nv_write_6:
   \   0000CF                ; Setup parameters for call to function HalFlashRead
   \   0000CF   75..01       MOV     ?V10,#0x1
   \   0000D2   75..00       MOV     ?V11,#0x0
   \   0000D5   78..         MOV     R0,#?V10
   \   0000D7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000DA   7403         MOV     A,#0x3
   \   0000DC   12....       LCALL   ?XSTACK_DISP102_8
   \   0000DF   EE           MOV     A,R6
   \   0000E0   FA           MOV     R2,A
   \   0000E1   EF           MOV     A,R7
   \   0000E2   FB           MOV     R3,A
   \   0000E3   A9..         MOV     R1,?V3
   \   0000E5   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   0000E8   7402         MOV     A,#0x2
   \   0000EA   12....       LCALL   ?DEALLOC_XSTACK8
   1322                if ( tmp != *ptr )
   \   0000ED   7401         MOV     A,#0x1
   \   0000EF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F2   E0           MOVX    A,@DPTR
   \   0000F3   F8           MOV     R0,A
   \   0000F4   85..82       MOV     DPL,?V6
   \   0000F7   85..83       MOV     DPH,?V7
   \   0000FA   E0           MOVX    A,@DPTR
   \   0000FB   68           XRL     A,R0
   \   0000FC   6032         JZ      ??osal_nv_write_7
   1323                {
   1324                  chk = 1;  // Mark that at least one byte is different.
   \   0000FE   75..01       MOV     ?V8,#0x1
   \   000101   75..00       MOV     ?V9,#0x0
   1325                  // Calculate expected checksum after transferring old data and writing new data.
   1326                  hdr.chk -= tmp;
   \   000104   7401         MOV     A,#0x1
   \   000106   12....       LCALL   ?XSTACK_DISP0_8
   \   000109   E0           MOVX    A,@DPTR
   \   00010A   F8           MOV     R0,A
   \   00010B   7900         MOV     R1,#0x0
   \   00010D   7408         MOV     A,#0x8
   \   00010F   12....       LCALL   ?XSTACK_DISP0_8
   \   000112   C3           CLR     C
   \   000113   E0           MOVX    A,@DPTR
   \   000114   98           SUBB    A,R0
   \   000115   F0           MOVX    @DPTR,A
   \   000116   A3           INC     DPTR
   \   000117   E0           MOVX    A,@DPTR
   \   000118   99           SUBB    A,R1
   \   000119   F0           MOVX    @DPTR,A
   1327                  hdr.chk += *ptr;
   \   00011A   85..82       MOV     DPL,?V6
   \   00011D   85..83       MOV     DPH,?V7
   \   000120   E0           MOVX    A,@DPTR
   \   000121   F8           MOV     R0,A
   \   000122   7900         MOV     R1,#0x0
   \   000124   7408         MOV     A,#0x8
   \   000126   12....       LCALL   ?XSTACK_DISP0_8
   \   000129   E0           MOVX    A,@DPTR
   \   00012A   28           ADD     A,R0
   \   00012B   F0           MOVX    @DPTR,A
   \   00012C   A3           INC     DPTR
   \   00012D   E0           MOVX    A,@DPTR
   \   00012E   39           ADDC    A,R1
   \   00012F   F0           MOVX    @DPTR,A
   1328                }
   1329                srcOff++;
   \                     ??osal_nv_write_7:
   \   000130   0E           INC     R6
   \   000131   EE           MOV     A,R6
   \   000132   7001         JNZ     ??osal_nv_write_8
   \   000134   0F           INC     R7
   1330                ptr++;
   \                     ??osal_nv_write_8:
   \   000135   85..82       MOV     DPL,?V6
   \   000138   85..83       MOV     DPH,?V7
   \   00013B   A3           INC     DPTR
   \   00013C   8582..       MOV     ?V6,DPL
   \   00013F   8583..       MOV     ?V7,DPH
   1331              }
   \                     ??osal_nv_write_5:
   \   000142   A8..         MOV     R0,?V0
   \   000144   A9..         MOV     R1,?V1
   \   000146   E8           MOV     A,R0
   \   000147   24FF         ADD     A,#-0x1
   \   000149   F5..         MOV     ?V0,A
   \   00014B   E9           MOV     A,R1
   \   00014C   34FF         ADDC    A,#-0x1
   \   00014E   F5..         MOV     ?V1,A
   \   000150   E8           MOV     A,R0
   \   000151   49           ORL     A,R1
   \   000152   6003         JZ      $+5
   \   000154   02....       LJMP    ??osal_nv_write_6 & 0xFFFF
   1332          
   1333              if ( chk != 0 )  // If the buffer to write is different in one or more bytes.
   \   000157   E5..         MOV     A,?V8
   \   000159   45..         ORL     A,?V9
   \   00015B   7003         JNZ     $+5
   \   00015D   02....       LJMP    ??osal_nv_write_2 & 0xFFFF
   1334              {
   1335                uint8 comPg = OSAL_NV_PAGE_NULL;
   \   000160   85..82       MOV     DPL,?XSP + 0
   \   000163   85..83       MOV     DPH,?XSP + 1
   \   000166   7400         MOV     A,#0x0
   \   000168   F0           MOVX    @DPTR,A
   1336                uint8 dstPg = initItem( FALSE, id, hdr.len, &comPg );
   \   000169                ; Setup parameters for call to function initItem
   \   000169   A8..         MOV     R0,?XSP + 0
   \   00016B   A9..         MOV     R1,?XSP + 1
   \   00016D   88..         MOV     ?V0,R0
   \   00016F   89..         MOV     ?V1,R1
   \   000171   78..         MOV     R0,#?V0
   \   000173   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000176   7408         MOV     A,#0x8
   \   000178   12....       LCALL   ?XSTACK_DISP0_8
   \   00017B   E0           MOVX    A,@DPTR
   \   00017C   FC           MOV     R4,A
   \   00017D   A3           INC     DPTR
   \   00017E   E0           MOVX    A,@DPTR
   \   00017F   FD           MOV     R5,A
   \   000180   740E         MOV     A,#0xe
   \   000182   12....       LCALL   ?XSTACK_DISP0_8
   \   000185   E0           MOVX    A,@DPTR
   \   000186   FA           MOV     R2,A
   \   000187   A3           INC     DPTR
   \   000188   E0           MOVX    A,@DPTR
   \   000189   FB           MOV     R3,A
   \   00018A   7900         MOV     R1,#0x0
   \   00018C   12....       LCALL   `??initItem::?relay` ; Banked call to: initItem
   \   00018F   7402         MOV     A,#0x2
   \   000191   12....       LCALL   ?DEALLOC_XSTACK8
   \   000194   E9           MOV     A,R1
   \   000195   F5..         MOV     ?V0,A
   1337          
   1338                if ( dstPg != OSAL_NV_PAGE_NULL )
   \   000197   E5..         MOV     A,?V0
   \   000199   7003         JNZ     $+5
   \   00019B   02....       LJMP    ??osal_nv_write_9 & 0xFFFF
   1339                {
   1340                  uint16 tmp = OSAL_NV_DATA_SIZE( hdr.len );
   \   00019E   7406         MOV     A,#0x6
   \   0001A0   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A3   C3           CLR     C
   \   0001A4   E0           MOVX    A,@DPTR
   \   0001A5   94FC         SUBB    A,#-0x4
   \   0001A7   A3           INC     DPTR
   \   0001A8   E0           MOVX    A,@DPTR
   \   0001A9   94FF         SUBB    A,#-0x1
   \   0001AB   4008         JC      ??osal_nv_write_10
   \   0001AD   75..FC       MOV     ?V6,#-0x4
   \   0001B0   75..FF       MOV     ?V7,#-0x1
   \   0001B3   8030         SJMP    ??osal_nv_write_11
   \                     ??osal_nv_write_10:
   \   0001B5   7406         MOV     A,#0x6
   \   0001B7   12....       LCALL   ?XSTACK_DISP0_8
   \   0001BA   E0           MOVX    A,@DPTR
   \   0001BB   2403         ADD     A,#0x3
   \   0001BD   F5..         MOV     ?V6,A
   \   0001BF   A3           INC     DPTR
   \   0001C0   E0           MOVX    A,@DPTR
   \   0001C1   3400         ADDC    A,#0x0
   \   0001C3   F5..         MOV     ?V7,A
   \   0001C5   7402         MOV     A,#0x2
   \   0001C7   78..         MOV     R0,#?V6
   \   0001C9   12....       LCALL   ?US_SHR
   \   0001CC   E5..         MOV     A,?V6
   \   0001CE   75F004       MOV     B,#0x4
   \   0001D1   A4           MUL     AB
   \   0001D2   C5..         XCH     A,?V6
   \   0001D4   A8F0         MOV     R0,B
   \   0001D6   75F000       MOV     B,#0x0
   \   0001D9   A4           MUL     AB
   \   0001DA   28           ADD     A,R0
   \   0001DB   F8           MOV     R0,A
   \   0001DC   75F004       MOV     B,#0x4
   \   0001DF   E5..         MOV     A,?V7
   \   0001E1   A4           MUL     AB
   \   0001E2   28           ADD     A,R0
   \   0001E3   F5..         MOV     ?V7,A
   1341                  uint16 dstOff = pgOff[dstPg-OSAL_NV_PAGE_BEG] - tmp;
   \                     ??osal_nv_write_11:
   \   0001E5   A8..         MOV     R0,?V0
   \   0001E7   7900         MOV     R1,#0x0
   \   0001E9   E8           MOV     A,R0
   \   0001EA   75F002       MOV     B,#0x2
   \   0001ED   A4           MUL     AB
   \   0001EE   C8           XCH     A,R0
   \   0001EF   AAF0         MOV     R2,B
   \   0001F1   75F000       MOV     B,#0x0
   \   0001F4   A4           MUL     AB
   \   0001F5   2A           ADD     A,R2
   \   0001F6   FA           MOV     R2,A
   \   0001F7   75F002       MOV     B,#0x2
   \   0001FA   E9           MOV     A,R1
   \   0001FB   A4           MUL     AB
   \   0001FC   2A           ADD     A,R2
   \   0001FD   F9           MOV     R1,A
   \   0001FE   74..         MOV     A,#(pgOff + 14) & 0xff
   \   000200   28           ADD     A,R0
   \   000201   F582         MOV     DPL,A
   \   000203   74..         MOV     A,#((pgOff - 242) >> 8) & 0xff
   \   000205   39           ADDC    A,R1
   \   000206   F583         MOV     DPH,A
   \   000208   E0           MOVX    A,@DPTR
   \   000209   C3           CLR     C
   \   00020A   95..         SUBB    A,?V6
   \   00020C   F5..         MOV     ?V8,A
   \   00020E   A3           INC     DPTR
   \   00020F   E0           MOVX    A,@DPTR
   \   000210   95..         SUBB    A,?V7
   \   000212   F5..         MOV     ?V9,A
   1342                  srcOff = origOff;
   \   000214   7402         MOV     A,#0x2
   \   000216   12....       LCALL   ?XSTACK_DISP0_8
   \   000219   E0           MOVX    A,@DPTR
   \   00021A   FE           MOV     R6,A
   \   00021B   A3           INC     DPTR
   \   00021C   E0           MOVX    A,@DPTR
   \   00021D   FF           MOV     R7,A
   1343          
   1344                  /* Prevent excessive re-writes to item header caused by numerous, rapid, & successive
   1345                   * OSAL_Nv interruptions caused by resets.
   1346                   */
   1347                  if ( hdr.stat == OSAL_NV_ERASED_ID )
   \   00021E   740A         MOV     A,#0xa
   \   000220   12....       LCALL   ?XSTACK_DISP0_8
   \   000223   E0           MOVX    A,@DPTR
   \   000224   64FF         XRL     A,#0xff
   \   000226   7004         JNZ     ??osal_nv_write_12
   \   000228   A3           INC     DPTR
   \   000229   E0           MOVX    A,@DPTR
   \   00022A   64FF         XRL     A,#0xff
   \                     ??osal_nv_write_12:
   \   00022C   700B         JNZ     ??osal_nv_write_13
   1348                  {
   1349                    setItem( srcPg, srcOff, eNvXfer );
   \   00022E                ; Setup parameters for call to function setItem
   \   00022E   7C00         MOV     R4,#0x0
   \   000230   EE           MOV     A,R6
   \   000231   FA           MOV     R2,A
   \   000232   EF           MOV     A,R7
   \   000233   FB           MOV     R3,A
   \   000234   A9..         MOV     R1,?V3
   \   000236   12....       LCALL   `??setItem::?relay`  ; Banked call to: setItem
   1350                  }
   1351          
   1352                  xferBuf( srcPg, srcOff, dstPg, dstOff, ndx );
   \                     ??osal_nv_write_13:
   \   000239                ; Setup parameters for call to function xferBuf
   \   000239   78..         MOV     R0,#?V4
   \   00023B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00023E   78..         MOV     R0,#?V8
   \   000240   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000243   AC..         MOV     R4,?V0
   \   000245   EE           MOV     A,R6
   \   000246   FA           MOV     R2,A
   \   000247   EF           MOV     A,R7
   \   000248   FB           MOV     R3,A
   \   000249   A9..         MOV     R1,?V3
   \   00024B   12....       LCALL   `??xferBuf::?relay`  ; Banked call to: xferBuf
   \   00024E   7404         MOV     A,#0x4
   \   000250   12....       LCALL   ?DEALLOC_XSTACK8
   1353                  srcOff += ndx;
   \   000253   EE           MOV     A,R6
   \   000254   25..         ADD     A,?V4
   \   000256   FE           MOV     R6,A
   \   000257   EF           MOV     A,R7
   \   000258   35..         ADDC    A,?V5
   \   00025A   FF           MOV     R7,A
   1354                  dstOff += ndx;
   \   00025B   E5..         MOV     A,?V8
   \   00025D   25..         ADD     A,?V4
   \   00025F   F5..         MOV     ?V8,A
   \   000261   E5..         MOV     A,?V9
   \   000263   35..         ADDC    A,?V5
   \   000265   F5..         MOV     ?V9,A
   1355          
   1356                  writeBuf( dstPg, dstOff, len, buf );
   \   000267                ; Setup parameters for call to function writeBuf
   \   000267   7426         MOV     A,#0x26
   \   000269   12....       LCALL   ?XSTACK_DISP0_8
   \   00026C   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00026F   AC..         MOV     R4,?V12
   \   000271   AD..         MOV     R5,?V13
   \   000273   AA..         MOV     R2,?V8
   \   000275   AB..         MOV     R3,?V9
   \   000277   A9..         MOV     R1,?V0
   \   000279   12....       LCALL   `??writeBuf::?relay` ; Banked call to: writeBuf
   \   00027C   7402         MOV     A,#0x2
   \   00027E   12....       LCALL   ?DEALLOC_XSTACK8
   1357                  srcOff += len;
   \   000281   EE           MOV     A,R6
   \   000282   25..         ADD     A,?V12
   \   000284   FE           MOV     R6,A
   \   000285   EF           MOV     A,R7
   \   000286   35..         ADDC    A,?V13
   \   000288   FF           MOV     R7,A
   1358                  dstOff += len;
   \   000289   E5..         MOV     A,?V8
   \   00028B   25..         ADD     A,?V12
   \   00028D   F5..         MOV     ?V8,A
   \   00028F   E5..         MOV     A,?V9
   \   000291   35..         ADDC    A,?V13
   \   000293   F5..         MOV     ?V9,A
   1359          
   1360                  xferBuf( srcPg, srcOff, dstPg, dstOff, (hdr.len-ndx-len) );
   \   000295                ; Setup parameters for call to function xferBuf
   \   000295   7406         MOV     A,#0x6
   \   000297   12....       LCALL   ?XSTACK_DISP0_8
   \   00029A   E0           MOVX    A,@DPTR
   \   00029B   C3           CLR     C
   \   00029C   95..         SUBB    A,?V4
   \   00029E   F8           MOV     R0,A
   \   00029F   A3           INC     DPTR
   \   0002A0   E0           MOVX    A,@DPTR
   \   0002A1   95..         SUBB    A,?V5
   \   0002A3   F9           MOV     R1,A
   \   0002A4   E8           MOV     A,R0
   \   0002A5   C3           CLR     C
   \   0002A6   95..         SUBB    A,?V12
   \   0002A8   F5..         MOV     ?V4,A
   \   0002AA   E9           MOV     A,R1
   \   0002AB   95..         SUBB    A,?V13
   \   0002AD   F5..         MOV     ?V5,A
   \   0002AF   78..         MOV     R0,#?V4
   \   0002B1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002B4   78..         MOV     R0,#?V8
   \   0002B6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002B9   AC..         MOV     R4,?V0
   \   0002BB   EE           MOV     A,R6
   \   0002BC   FA           MOV     R2,A
   \   0002BD   EF           MOV     A,R7
   \   0002BE   FB           MOV     R3,A
   \   0002BF   A9..         MOV     R1,?V3
   \   0002C1   12....       LCALL   `??xferBuf::?relay`  ; Banked call to: xferBuf
   \   0002C4   7404         MOV     A,#0x4
   \   0002C6   12....       LCALL   ?DEALLOC_XSTACK8
   1361          
   1362                  // Calculate and write the new checksum.
   1363                  dstOff = pgOff[dstPg-OSAL_NV_PAGE_BEG] - tmp;
   \   0002C9   A8..         MOV     R0,?V0
   \   0002CB   7900         MOV     R1,#0x0
   \   0002CD   E8           MOV     A,R0
   \   0002CE   75F002       MOV     B,#0x2
   \   0002D1   A4           MUL     AB
   \   0002D2   C8           XCH     A,R0
   \   0002D3   AAF0         MOV     R2,B
   \   0002D5   75F000       MOV     B,#0x0
   \   0002D8   A4           MUL     AB
   \   0002D9   2A           ADD     A,R2
   \   0002DA   FA           MOV     R2,A
   \   0002DB   75F002       MOV     B,#0x2
   \   0002DE   E9           MOV     A,R1
   \   0002DF   A4           MUL     AB
   \   0002E0   2A           ADD     A,R2
   \   0002E1   F9           MOV     R1,A
   \   0002E2   74..         MOV     A,#(pgOff + 14) & 0xff
   \   0002E4   28           ADD     A,R0
   \   0002E5   F582         MOV     DPL,A
   \   0002E7   74..         MOV     A,#((pgOff - 242) >> 8) & 0xff
   \   0002E9   39           ADDC    A,R1
   \   0002EA   F583         MOV     DPH,A
   \   0002EC   E0           MOVX    A,@DPTR
   \   0002ED   C3           CLR     C
   \   0002EE   95..         SUBB    A,?V6
   \   0002F0   F5..         MOV     ?V8,A
   \   0002F2   A3           INC     DPTR
   \   0002F3   E0           MOVX    A,@DPTR
   \   0002F4   95..         SUBB    A,?V7
   \   0002F6   F5..         MOV     ?V9,A
   1364          
   1365                  if ( hdr.chk == calcChkF( dstPg, dstOff, hdr.len ) )
   \   0002F8                ; Setup parameters for call to function calcChkF
   \   0002F8   7406         MOV     A,#0x6
   \   0002FA   12....       LCALL   ?XSTACK_DISP0_8
   \   0002FD   E0           MOVX    A,@DPTR
   \   0002FE   FC           MOV     R4,A
   \   0002FF   A3           INC     DPTR
   \   000300   E0           MOVX    A,@DPTR
   \   000301   FD           MOV     R5,A
   \   000302   AA..         MOV     R2,?V8
   \   000304   AB..         MOV     R3,?V9
   \   000306   A9..         MOV     R1,?V0
   \   000308   12....       LCALL   `??calcChkF::?relay` ; Banked call to: calcChkF
   \   00030B   8A..         MOV     ?V4,R2
   \   00030D   8B..         MOV     ?V5,R3
   \   00030F   A8..         MOV     R0,?V4
   \   000311   A9..         MOV     R1,?V5
   \   000313   7408         MOV     A,#0x8
   \   000315   12....       LCALL   ?XSTACK_DISP0_8
   \   000318   E0           MOVX    A,@DPTR
   \   000319   68           XRL     A,R0
   \   00031A   7003         JNZ     ??osal_nv_write_14
   \   00031C   A3           INC     DPTR
   \   00031D   E0           MOVX    A,@DPTR
   \   00031E   69           XRL     A,R1
   \                     ??osal_nv_write_14:
   \   00031F   7043         JNZ     ??osal_nv_write_15
   1366                  {
   1367                    if ( hdr.chk != setChk( dstPg, dstOff, hdr.chk ) )
   \   000321                ; Setup parameters for call to function setChk
   \   000321   7408         MOV     A,#0x8
   \   000323   12....       LCALL   ?XSTACK_DISP0_8
   \   000326   E0           MOVX    A,@DPTR
   \   000327   FC           MOV     R4,A
   \   000328   A3           INC     DPTR
   \   000329   E0           MOVX    A,@DPTR
   \   00032A   FD           MOV     R5,A
   \   00032B   AA..         MOV     R2,?V8
   \   00032D   AB..         MOV     R3,?V9
   \   00032F   A9..         MOV     R1,?V0
   \   000331   12....       LCALL   `??setChk::?relay`   ; Banked call to: setChk
   \   000334   8A..         MOV     ?V4,R2
   \   000336   8B..         MOV     ?V5,R3
   \   000338   A8..         MOV     R0,?V4
   \   00033A   A9..         MOV     R1,?V5
   \   00033C   7408         MOV     A,#0x8
   \   00033E   12....       LCALL   ?XSTACK_DISP0_8
   \   000341   E0           MOVX    A,@DPTR
   \   000342   68           XRL     A,R0
   \   000343   7003         JNZ     ??osal_nv_write_16
   \   000345   A3           INC     DPTR
   \   000346   E0           MOVX    A,@DPTR
   \   000347   69           XRL     A,R1
   \                     ??osal_nv_write_16:
   \   000348   6005         JZ      ??osal_nv_write_17
   1368                    {
   1369                      rtrn = NV_OPER_FAILED;
   \   00034A   75..0A       MOV     ?V2,#0xa
   \   00034D   801D         SJMP    ??osal_nv_write_18
   1370                    }
   1371                    else
   1372                    {
   1373                      hotItemUpdate(dstPg, dstOff, hdr.id);
   \                     ??osal_nv_write_17:
   \   00034F                ; Setup parameters for call to function hotItemUpdate
   \   00034F   7404         MOV     A,#0x4
   \   000351   12....       LCALL   ?XSTACK_DISP0_8
   \   000354   E0           MOVX    A,@DPTR
   \   000355   FC           MOV     R4,A
   \   000356   A3           INC     DPTR
   \   000357   E0           MOVX    A,@DPTR
   \   000358   FD           MOV     R5,A
   \   000359   AA..         MOV     R2,?V8
   \   00035B   AB..         MOV     R3,?V9
   \   00035D   A9..         MOV     R1,?V0
   \   00035F   12....       LCALL   `??hotItemUpdate::?relay`; Banked call to: hotItemUpdate
   \   000362   8008         SJMP    ??osal_nv_write_18
   1374                    }
   1375                  }
   1376                  else
   1377                  {
   1378                    rtrn = NV_OPER_FAILED;
   \                     ??osal_nv_write_15:
   \   000364   75..0A       MOV     ?V2,#0xa
   \   000367   8003         SJMP    ??osal_nv_write_18
   1379                  }
   1380                }
   1381                else
   1382                {
   1383                  rtrn = NV_OPER_FAILED;
   \                     ??osal_nv_write_9:
   \   000369   75..0A       MOV     ?V2,#0xa
   1384                }
   1385          
   1386                if ( comPg != OSAL_NV_PAGE_NULL )
   \                     ??osal_nv_write_18:
   \   00036C   85..82       MOV     DPL,?XSP + 0
   \   00036F   85..83       MOV     DPH,?XSP + 1
   \   000372   E0           MOVX    A,@DPTR
   \   000373   603B         JZ      ??osal_nv_write_19
   1387                {
   1388                  /* Even though the page compaction succeeded, if the new item is coming from the compacted
   1389                   * page and writing the new value failed, then the compaction must be aborted.
   1390                   */
   1391                  if ( (srcPg == comPg) && (rtrn == NV_OPER_FAILED) )
   \   000375   85..82       MOV     DPL,?XSP + 0
   \   000378   85..83       MOV     DPH,?XSP + 1
   \   00037B   E0           MOVX    A,@DPTR
   \   00037C   65..         XRL     A,?V3
   \   00037E   7010         JNZ     ??osal_nv_write_20
   \   000380   740A         MOV     A,#0xa
   \   000382   65..         XRL     A,?V2
   \   000384   700A         JNZ     ??osal_nv_write_20
   1392                  {
   1393                    erasePage( pgRes );
   \   000386                ; Setup parameters for call to function erasePage
   \   000386   90....       MOV     DPTR,#pgRes
   \   000389   E0           MOVX    A,@DPTR
   \   00038A   F9           MOV     R1,A
   \   00038B   12....       LCALL   `??erasePage::?relay`; Banked call to: erasePage
   \   00038E   8020         SJMP    ??osal_nv_write_19
   1394                  }
   1395                  else
   1396                  {
   1397                    COMPACT_PAGE_CLEANUP( comPg );
   \                     ??osal_nv_write_20:
   \   000390                ; Setup parameters for call to function setPageUse
   \   000390   7A01         MOV     R2,#0x1
   \   000392   90....       MOV     DPTR,#pgRes
   \   000395   E0           MOVX    A,@DPTR
   \   000396   F9           MOV     R1,A
   \   000397   12....       LCALL   `??setPageUse::?relay`; Banked call to: setPageUse
   \   00039A                ; Setup parameters for call to function erasePage
   \   00039A   85..82       MOV     DPL,?XSP + 0
   \   00039D   85..83       MOV     DPH,?XSP + 1
   \   0003A0   E0           MOVX    A,@DPTR
   \   0003A1   F9           MOV     R1,A
   \   0003A2   12....       LCALL   `??erasePage::?relay`; Banked call to: erasePage
   \   0003A5   85..82       MOV     DPL,?XSP + 0
   \   0003A8   85..83       MOV     DPH,?XSP + 1
   \   0003AB   E0           MOVX    A,@DPTR
   \   0003AC   90....       MOV     DPTR,#pgRes
   \   0003AF   F0           MOVX    @DPTR,A
   1398                  }
   1399                }
   1400          
   1401                /* Zero of the old item must wait until after compact page cleanup has finished - if the item
   1402                 * is zeroed before and cleanup is interrupted by a power-cycle, the new item can be lost.
   1403                 */
   1404                if ( (srcPg != comPg) && (rtrn != NV_OPER_FAILED) )
   \                     ??osal_nv_write_19:
   \   0003B0   85..82       MOV     DPL,?XSP + 0
   \   0003B3   85..83       MOV     DPH,?XSP + 1
   \   0003B6   E0           MOVX    A,@DPTR
   \   0003B7   65..         XRL     A,?V3
   \   0003B9   6017         JZ      ??osal_nv_write_2
   \   0003BB   740A         MOV     A,#0xa
   \   0003BD   65..         XRL     A,?V2
   \   0003BF   6011         JZ      ??osal_nv_write_2
   1405                {
   1406                  setItem( srcPg, origOff, eNvZero );
   \   0003C1                ; Setup parameters for call to function setItem
   \   0003C1   7C01         MOV     R4,#0x1
   \   0003C3   7402         MOV     A,#0x2
   \   0003C5   12....       LCALL   ?XSTACK_DISP0_8
   \   0003C8   E0           MOVX    A,@DPTR
   \   0003C9   FA           MOV     R2,A
   \   0003CA   A3           INC     DPTR
   \   0003CB   E0           MOVX    A,@DPTR
   \   0003CC   FB           MOV     R3,A
   \   0003CD   A9..         MOV     R1,?V3
   \   0003CF   12....       LCALL   `??setItem::?relay`  ; Banked call to: setItem
   1407                }
   1408              }
   1409            }
   1410          
   1411            return rtrn;
   \                     ??osal_nv_write_2:
   \   0003D2   A9..         MOV     R1,?V2
   \                     ??osal_nv_write_1:
   \   0003D4   740E         MOV     A,#0xe
   \   0003D6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0003D9   7F0E         MOV     R7,#0xe
   \   0003DB   02....       LJMP    ?BANKED_LEAVE_XDATA
   1412          }
   1413          
   1414          /*********************************************************************
   1415           * @fn      osal_nv_read
   1416           *
   1417           * @brief   Read data from NV. This function can be used to read an entire item from NV or
   1418           *          an element of an item by indexing into the item with an offset.
   1419           *          Read data is copied into *buf.
   1420           *
   1421           * @param   id  - Valid NV item Id.
   1422           * @param   ndx - Index offset into item
   1423           * @param   len - Length of data to read.
   1424           * @param  *buf - Data is read into this buffer.
   1425           *
   1426           * @return  SUCCESS if NV data was copied to the parameter 'buf'.
   1427           *          Otherwise, NV_OPER_FAILED for failure.
   1428           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1429          uint8 osal_nv_read( uint16 id, uint16 ndx, uint16 len, void *buf )
   \                     osal_nv_read:
   1430          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V2,R4
   \   00000B   8D..         MOV     ?V3,R5
   1431            uint16 offset;
   1432            uint8 hotIdx;
   1433          
   1434            if ((hotIdx = hotItem(id)) < OSAL_NV_MAX_HOT)
   \   00000D                ; Setup parameters for call to function hotItem
   \   00000D   EE           MOV     A,R6
   \   00000E   FA           MOV     R2,A
   \   00000F   EF           MOV     A,R7
   \   000010   FB           MOV     R3,A
   \   000011   12....       LCALL   `??hotItem::?relay`  ; Banked call to: hotItem
   \   000014   E9           MOV     A,R1
   \   000015   F8           MOV     R0,A
   \   000016   88..         MOV     ?V4,R0
   \   000018   7412         MOV     A,#0x12
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F5..         MOV     ?V6,A
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   F5..         MOV     ?V7,A
   \   000024   7414         MOV     A,#0x14
   \   000026   12....       LCALL   ?XSTACK_DISP0_8
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F5..         MOV     ?V0,A
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F5..         MOV     ?V1,A
   \   000030   E8           MOV     A,R0
   \   000031   C3           CLR     C
   \   000032   9403         SUBB    A,#0x3
   \   000034   5051         JNC     ??osal_nv_read_0
   1435            {
   1436              HalFlashRead(hotPg[hotIdx], hotOff[hotIdx]+ndx, buf, len);
   \   000036                ; Setup parameters for call to function HalFlashRead
   \   000036   78..         MOV     R0,#?V6
   \   000038   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003B   AC..         MOV     R4,?V0
   \   00003D   AD..         MOV     R5,?V1
   \   00003F   A8..         MOV     R0,?V4
   \   000041   7900         MOV     R1,#0x0
   \   000043   E8           MOV     A,R0
   \   000044   75F002       MOV     B,#0x2
   \   000047   A4           MUL     AB
   \   000048   C8           XCH     A,R0
   \   000049   AAF0         MOV     R2,B
   \   00004B   75F000       MOV     B,#0x0
   \   00004E   A4           MUL     AB
   \   00004F   2A           ADD     A,R2
   \   000050   FA           MOV     R2,A
   \   000051   75F002       MOV     B,#0x2
   \   000054   E9           MOV     A,R1
   \   000055   A4           MUL     AB
   \   000056   2A           ADD     A,R2
   \   000057   F9           MOV     R1,A
   \   000058   74..         MOV     A,#hotOff & 0xff
   \   00005A   28           ADD     A,R0
   \   00005B   F582         MOV     DPL,A
   \   00005D   74..         MOV     A,#(hotOff >> 8) & 0xff
   \   00005F   39           ADDC    A,R1
   \   000060   F583         MOV     DPH,A
   \   000062   E0           MOVX    A,@DPTR
   \   000063   25..         ADD     A,?V2
   \   000065   FA           MOV     R2,A
   \   000066   A3           INC     DPTR
   \   000067   E0           MOVX    A,@DPTR
   \   000068   35..         ADDC    A,?V3
   \   00006A   FB           MOV     R3,A
   \   00006B   A8..         MOV     R0,?V4
   \   00006D   7900         MOV     R1,#0x0
   \   00006F   74..         MOV     A,#hotPg & 0xff
   \   000071   28           ADD     A,R0
   \   000072   F582         MOV     DPL,A
   \   000074   74..         MOV     A,#(hotPg >> 8) & 0xff
   \   000076   39           ADDC    A,R1
   \   000077   F583         MOV     DPH,A
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   F9           MOV     R1,A
   \   00007B   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   00007E   7402         MOV     A,#0x2
   \   000080   12....       LCALL   ?DEALLOC_XSTACK8
   1437              return SUCCESS;
   \   000083   7900         MOV     R1,#0x0
   \   000085   803B         SJMP    ??osal_nv_read_1
   1438            }
   1439          
   1440            if ((offset = findItem(id)) == OSAL_NV_ITEM_NULL)
   \                     ??osal_nv_read_0:
   \   000087                ; Setup parameters for call to function findItem
   \   000087   EE           MOV     A,R6
   \   000088   FA           MOV     R2,A
   \   000089   EF           MOV     A,R7
   \   00008A   FB           MOV     R3,A
   \   00008B   12....       LCALL   `??findItem::?relay` ; Banked call to: findItem
   \   00008E   8A..         MOV     ?V8,R2
   \   000090   8B..         MOV     ?V9,R3
   \   000092   A8..         MOV     R0,?V8
   \   000094   A9..         MOV     R1,?V9
   \   000096   E8           MOV     A,R0
   \   000097   FA           MOV     R2,A
   \   000098   E9           MOV     A,R1
   \   000099   FB           MOV     R3,A
   \   00009A   E8           MOV     A,R0
   \   00009B   49           ORL     A,R1
   \   00009C   7004         JNZ     ??osal_nv_read_2
   1441            {
   1442              return NV_OPER_FAILED;
   \   00009E   790A         MOV     R1,#0xa
   \   0000A0   8020         SJMP    ??osal_nv_read_1
   1443            }
   1444            else
   1445            {
   1446              HalFlashRead(findPg, offset+ndx, buf, len);
   \                     ??osal_nv_read_2:
   \   0000A2                ; Setup parameters for call to function HalFlashRead
   \   0000A2   78..         MOV     R0,#?V6
   \   0000A4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A7   AC..         MOV     R4,?V0
   \   0000A9   AD..         MOV     R5,?V1
   \   0000AB   EA           MOV     A,R2
   \   0000AC   25..         ADD     A,?V2
   \   0000AE   FA           MOV     R2,A
   \   0000AF   EB           MOV     A,R3
   \   0000B0   35..         ADDC    A,?V3
   \   0000B2   FB           MOV     R3,A
   \   0000B3   90....       MOV     DPTR,#findPg
   \   0000B6   E0           MOVX    A,@DPTR
   \   0000B7   F9           MOV     R1,A
   \   0000B8   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   0000BB   7402         MOV     A,#0x2
   \   0000BD   12....       LCALL   ?DEALLOC_XSTACK8
   1447              return SUCCESS;
   \   0000C0   7900         MOV     R1,#0x0
   \                     ??osal_nv_read_1:
   \   0000C2   7F0A         MOV     R7,#0xa
   \   0000C4   02....       LJMP    ?BANKED_LEAVE_XDATA
   1448            }
   1449          }
   1450          
   1451          /*********************************************************************
   1452           * @fn      osal_nv_delete
   1453           *
   1454           * @brief   Delete item from NV. This function will fail if the length
   1455           *          parameter does not match the length of the item in NV.
   1456           *
   1457           * @param   id  - Valid NV item Id.
   1458           * @param   len - Length of item to delete.
   1459           *
   1460           * @return  SUCCESS if item was deleted,
   1461           *          NV_ITEM_UNINIT if item did not exist in NV,
   1462           *          NV_BAD_ITEM_LEN if length parameter not correct,
   1463           *          NV_OPER_FAILED if attempted deletion failed.
   1464           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1465          uint8 osal_nv_delete( uint16 id, uint16 len )
   \                     osal_nv_delete:
   1466          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V2,R4
   \   00000B   8D..         MOV     ?V3,R5
   1467            uint16 length;
   1468            uint16 offset;
   1469          
   1470            offset = findItem( id );
   \   00000D                ; Setup parameters for call to function findItem
   \   00000D   EE           MOV     A,R6
   \   00000E   FA           MOV     R2,A
   \   00000F   EF           MOV     A,R7
   \   000010   FB           MOV     R3,A
   \   000011   12....       LCALL   `??findItem::?relay` ; Banked call to: findItem
   \   000014   8A..         MOV     ?V4,R2
   \   000016   8B..         MOV     ?V5,R3
   \   000018   85....       MOV     ?V0,?V4
   \   00001B   85....       MOV     ?V1,?V5
   1471            if ( offset == OSAL_NV_ITEM_NULL )
   \   00001E   E5..         MOV     A,?V0
   \   000020   45..         ORL     A,?V1
   \   000022   7004         JNZ     ??osal_nv_delete_0
   1472            {
   1473              // NV item does not exist
   1474              return NV_ITEM_UNINIT;
   \   000024   7909         MOV     R1,#0x9
   \   000026   8048         SJMP    ??osal_nv_delete_1
   1475            }
   1476          
   1477            length = osal_nv_item_len( id );
   \                     ??osal_nv_delete_0:
   \   000028                ; Setup parameters for call to function osal_nv_item_len
   \   000028   EE           MOV     A,R6
   \   000029   FA           MOV     R2,A
   \   00002A   EF           MOV     A,R7
   \   00002B   FB           MOV     R3,A
   \   00002C   12....       LCALL   `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
   \   00002F   8A..         MOV     ?V4,R2
   \   000031   8B..         MOV     ?V5,R3
   \   000033   A8..         MOV     R0,?V4
   \   000035   A9..         MOV     R1,?V5
   1478            if ( length != len )
   \   000037   E5..         MOV     A,?V2
   \   000039   68           XRL     A,R0
   \   00003A   7003         JNZ     ??osal_nv_delete_2
   \   00003C   E5..         MOV     A,?V3
   \   00003E   69           XRL     A,R1
   \                     ??osal_nv_delete_2:
   \   00003F   6004         JZ      ??osal_nv_delete_3
   1479            {
   1480              // NV item has different length
   1481              return NV_BAD_ITEM_LEN;
   \   000041   790C         MOV     R1,#0xc
   \   000043   802B         SJMP    ??osal_nv_delete_1
   1482            }
   1483          
   1484            // Set item header ID to zero to 'delete' the item
   1485            setItem( findPg, offset, eNvZero );
   \                     ??osal_nv_delete_3:
   \   000045                ; Setup parameters for call to function setItem
   \   000045   7C01         MOV     R4,#0x1
   \   000047   AA..         MOV     R2,?V0
   \   000049   AB..         MOV     R3,?V1
   \   00004B   90....       MOV     DPTR,#findPg
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   F9           MOV     R1,A
   \   000050   12....       LCALL   `??setItem::?relay`  ; Banked call to: setItem
   1486          
   1487            // Verify that item has been removed
   1488            offset = findItem( id );
   \   000053                ; Setup parameters for call to function findItem
   \   000053   EE           MOV     A,R6
   \   000054   FA           MOV     R2,A
   \   000055   EF           MOV     A,R7
   \   000056   FB           MOV     R3,A
   \   000057   12....       LCALL   `??findItem::?relay` ; Banked call to: findItem
   \   00005A   8A..         MOV     ?V2,R2
   \   00005C   8B..         MOV     ?V3,R3
   \   00005E   85....       MOV     ?V0,?V2
   \   000061   85....       MOV     ?V1,?V3
   1489            if ( offset != OSAL_NV_ITEM_NULL )
   \   000064   E5..         MOV     A,?V0
   \   000066   45..         ORL     A,?V1
   \   000068   6004         JZ      ??osal_nv_delete_4
   1490            {
   1491              // Still there
   1492              return NV_OPER_FAILED;
   \   00006A   790A         MOV     R1,#0xa
   \   00006C   8002         SJMP    ??osal_nv_delete_1
   1493            }
   1494            else
   1495            {
   1496              // Yes, it's gone
   1497              return SUCCESS;
   \                     ??osal_nv_delete_4:
   \   00006E   7900         MOV     R1,#0x0
   \                     ??osal_nv_delete_1:
   \   000070   7F06         MOV     R7,#0x6
   \   000072   02....       LJMP    ?BANKED_LEAVE_XDATA
   1498            }
   1499          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??initNV::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    initNV

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??setPageUse::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    setPageUse

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??initPage::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    initPage

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??erasePage::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    erasePage

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??compactPage::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    compactPage

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??findItem::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    findItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??initItem::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    initItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??setItem::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    setItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??setChk::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    setChk

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??calcChkB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    calcChkB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??calcChkF::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    calcChkF

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??writeWord::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    writeWord

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??writeWordM::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    writeWordM

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??writeWordH::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    writeWordH

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??writeBuf::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    writeBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??xferBuf::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    xferBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??writeItem::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    writeItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??hotItem::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    hotItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??hotItemUpdate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    hotItemUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_nv_init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_nv_item_init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_item_init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_nv_item_len::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_item_len

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_nv_write::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_write

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_nv_read::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_read

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_nv_delete::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_nv_delete
   1500          
   1501          /*********************************************************************
   1502           */

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     34   calcChkB
      0     58   calcChkF
        0     22   -> HalFlashRead
      0     59   compactPage
        0     29   -> HalFlashRead
        0     27   -> calcChkF
        0     27   -> erasePage
        0     27   -> hotItemUpdate
        0     27   -> setChk
        0     27   -> setItem
        0     27   -> setPageUse
        0     30   -> writeItem
        0     31   -> xferBuf
      0     45   erasePage
        0      9   -> HalFlashErase
      0     48   findItem
        0     12   -> findItem
        0     12   -> initPage
      2     20   hotItem
      1     45   hotItemUpdate
        0      9   -> hotItem
      1     69   initItem
        0     30   -> HalFlashRead
        0     28   -> compactPage
        0     28   -> erasePage
        0     28   -> setPageUse
        0     31   -> writeItem
        0     28   -> writeWordH
      2     22   initNV
        0     22   -> HalFlashRead
        0     20   -> compactPage
        0     20   -> erasePage
        0     20   -> initPage
        0     20   -> setPageUse
      0     48   initPage
        0     28   -> HalFlashRead
        0     26   -> calcChkF
        0     26   -> findItem
        0     26   -> setItem
      0     14   osal_nv_delete
        0     14   -> findItem
        0     14   -> osal_nv_item_len
        0     14   -> setItem
      2      0   osal_nv_init
        2      0   -> initNV
      0     16   osal_nv_item_init
        0     12   -> HalAdcCheckVdd
        0     12   -> findItem
        0     12   -> hotItemUpdate
        0     14   -> initItem
      0     36   osal_nv_item_len
        0     22   -> HalFlashRead
        0     20   -> findItem
        0     20   -> hotItem
      0     24   osal_nv_read
        0     20   -> HalFlashRead
        0     18   -> findItem
        0     18   -> hotItem
      0     44   osal_nv_write
        0     36   -> HalAdcCheckVdd
        0     38   -> HalFlashRead
        0     36   -> calcChkF
        0     36   -> erasePage
        0     36   -> findItem
        0     36   -> hotItemUpdate
        0     38   -> initItem
        0     36   -> setChk
        0     36   -> setItem
        0     36   -> setPageUse
        0     38   -> writeBuf
        0     40   -> xferBuf
      0     52   setChk
        0     16   -> HalFlashRead
        0     14   -> writeWordH
      0     60   setItem
        0     24   -> HalFlashRead
        0     22   -> writeWord
      0     53   setPageUse
        0     17   -> writeWord
      1     60   writeBuf
        0     22   -> HalFlashRead
        0     20   -> writeWord
        0     22   -> writeWordM
      0     57   writeItem
        0     26   -> HalFlashRead
        0     24   -> calcChkB
        0     24   -> calcChkF
        0     24   -> hotItemUpdate
        0     24   -> setChk
        0     26   -> writeBuf
        0     24   -> writeWord
      0     36   writeWord
        0     12   -> HalFlashWrite
      1     41   writeWordH
        0     13   -> writeWord
      0     34   writeWordM
        0     12   -> HalFlashWrite
      0     64   xferBuf
        0     24   -> HalFlashRead
        0     22   -> writeWord


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
   12288  _nvBuf
     152  calcChkB
       6  calcChkB::?relay
     163  calcChkF
       6  calcChkF::?relay
     768  compactPage
       6  compactPage::?relay
     101  erasePage
       6  erasePage::?relay
      98  findItem
       6  findItem::?relay
       1  findPg
       6  hotIds
      66  hotItem
       6  hotItem::?relay
      92  hotItemUpdate
       6  hotItemUpdate::?relay
       6  hotOff
       3  hotPg
     564  initItem
       6  initItem::?relay
     438  initNV
       6  initNV::?relay
     623  initPage
       6  initPage::?relay
     117  osal_nv_delete
       6  osal_nv_delete::?relay
      15  osal_nv_init
       6  osal_nv_init::?relay
     104  osal_nv_item_init
       6  osal_nv_item_init::?relay
     176  osal_nv_item_len
       6  osal_nv_item_len::?relay
     199  osal_nv_read
       6  osal_nv_read::?relay
     990  osal_nv_write
       6  osal_nv_write::?relay
      12  pgLost
      12  pgOff
       1  pgRes
      99  setChk
       6  setChk::?relay
     236  setItem
       6  setItem::?relay
      79  setPageUse
       6  setPageUse::?relay
     462  writeBuf
       6  writeBuf::?relay
     718  writeItem
       6  writeItem::?relay
      75  writeWord
       6  writeWord::?relay
      79  writeWordH
       6  writeWordH::?relay
      72  writeWordM
       6  writeWordM::?relay
     440  xferBuf
       6  xferBuf::?relay

 
  6 926 bytes in segment BANKED_CODE
    150 bytes in segment BANK_RELAYS
      6 bytes in segment XDATA_ROM_C
     35 bytes in segment XDATA_Z
 12 288 bytes in segment ZIGNV_ADDRESS_SPACE
 
  7 076 bytes of CODE  memory
      6 bytes of CONST memory
 12 323 bytes of XDATA memory

Errors: none
Warnings: none

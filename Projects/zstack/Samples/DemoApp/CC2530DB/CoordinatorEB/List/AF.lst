###############################################################################
#
# IAR C/C++ Compiler V9.20.1.2476 for 8051                22/Feb/2017  14:31:38
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\koen\ZigBee-Code-WTWS\Components\stack\af\AF.c
#    Command line       =  
#        -f
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00002000 -DZDAPP_CONFIG_PAN_ID=0xABCD
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={'H', 'O', 'G', 'E', 'S',
#        'C', 'H', 'O', 'O', 'L', 'U', 'T', 'R', 'E', 'C', 'H'}"
#        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440
#        C:\Users\koen\ZigBee-Code-WTWS\Components\stack\af\AF.c -D
#        HOLD_AUTO_START -D BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D
#        NV_RESTORE -D HAL_UART=TRUE -lC
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\
#        -lA
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\
#        --diag_suppress Pe001,Pa010,Pe1665 -o
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\Obj\
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\Source\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ol --require_prototypes
#    List file          =  
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\AF.lst
#    Object file        =  
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\Obj\AF.r51
#
###############################################################################

C:\Users\koen\ZigBee-Code-WTWS\Components\stack\af\AF.c
      1          /**************************************************************************************************
      2            Filename:       AF.c
      3            Revised:        $Date: 2014-06-30 16:29:17 -0700 (Mon, 30 Jun 2014) $
      4            Revision:       $Revision: 39295 $
      5          
      6            Description:    Application Framework - Device Description helper functions
      7          
      8          
      9            Copyright 2004-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "OSAL.h"
     45          #include "AF.h"
     46          #include "nwk_globals.h"
     47          #include "nwk_util.h"
     48          #include "aps_groups.h"
     49          #include "ZDProfile.h"
     50          #include "aps_frag.h"
     51          #include "rtg.h"
     52          
     53          #if defined ( MT_AF_CB_FUNC )
     54            #include "MT_AF.h"
     55          #endif
     56          
     57          #if defined ( INTER_PAN )
     58            #include "stub_aps.h"
     59          #endif
     60          
     61          /*********************************************************************
     62           * MACROS
     63           */
     64          
     65          /*********************************************************************
     66           * @fn      afSend
     67           *
     68           * @brief   Helper macro for V1 API to invoke V2 API.
     69           *
     70           * input parameters
     71           *
     72           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
     73           * @param   srcEP - Origination (i.e. respond to or ack to) End Point.
     74           * @param   cID - A valid cluster ID as specified by the Profile.
     75           * @param   len - Number of bytes of data pointed to by next param.
     76           * @param  *buf - A pointer to the data bytes to send.
     77           * @param   options - Valid bit mask of AF Tx Options as defined in AF.h.
     78           * @param  *transID - A pointer to a byte which can be modified and which will
     79           *                    be used as the transaction sequence number of the msg.
     80           *
     81           * output parameters
     82           *
     83           * @param  *transID - Incremented by one if the return value is success.
     84           *
     85           * @return  afStatus_t - See previous definition of afStatus_... types.
     86           */
     87          #define afSend( dstAddr, srcEP, cID, len, buf, transID, options, radius ) \
     88                  AF_DataRequest( (dstAddr), afFindEndPointDesc( (srcEP) ), \
     89                                    (cID), (len), (buf), (transID), (options), (radius) )
     90          
     91          /*********************************************************************
     92           * GLOBAL VARIABLES
     93           */
     94          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     95          epList_t *epList;
   \                     epList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     96          
     97          /*********************************************************************
     98           * LOCAL FUNCTIONS
     99           */
    100          
    101          static void afBuildMSGIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
    102                          zAddrType_t *SrcAddress, uint16 SrcPanId, NLDE_Signal_t *sig,
    103                          uint8 nwkSeqNum, uint8 SecurityUse, uint32 timestamp, uint8 radius );
    104          
    105          static epList_t *afFindEndPointDescList( uint8 EndPoint );
    106          
    107          static pDescCB afGetDescCB( endPointDesc_t *epDesc );
    108          
    109          /*********************************************************************
    110           * PUBLIC FUNCTIONS
    111           */
    112          
    113          /*********************************************************************
    114           * @fn      afInit
    115           *
    116           * @brief   Initialization function for the AF.
    117           *
    118           * @param   none
    119           *
    120           * @return  none
    121          void afInit( void )
    122          {
    123          }
    124           */
    125          
    126          /*********************************************************************
    127           * @fn      afRegisterExtended
    128           *
    129           * @brief   Register an Application's EndPoint description.
    130           *
    131           * @param   epDesc - pointer to the Application's endpoint descriptor.
    132           * @param   descFn - pointer to descriptor callback function
    133           * @param   applFn - pointer to the Application callback function
    134           *
    135           * NOTE:  The memory that epDesc is pointing to must exist after this call.
    136           *
    137           * @return  Pointer to epList_t on success, NULL otherwise.
    138           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    139          epList_t *afRegisterExtended( endPointDesc_t *epDesc, pDescCB descFn, pApplCB applFn )
   \                     afRegisterExtended:
    140          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
    141            epList_t *ep = osal_mem_alloc(sizeof(epList_t));
   \   00000D                ; Setup parameters for call to function osal_mem_alloc
   \   00000D   7A0B         MOV     R2,#0xb
   \   00000F   7B00         MOV     R3,#0x0
   \   000011   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000014   8A..         MOV     ?V2,R2
   \   000016   8B..         MOV     ?V3,R3
   \   000018   AA..         MOV     R2,?V2
   \   00001A   AB..         MOV     R3,?V3
    142          
    143            if (ep != NULL)
   \   00001C   EA           MOV     A,R2
   \   00001D   4B           ORL     A,R3
   \   00001E   6079         JZ      ??afRegisterExtended_0
    144            {
    145              ep->nextDesc = epList;
   \   000020   90....       MOV     DPTR,#epList
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F8           MOV     R0,A
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F9           MOV     R1,A
   \   000028   8A82         MOV     DPL,R2
   \   00002A   8B83         MOV     DPH,R3
   \   00002C   E8           MOV     A,R0
   \   00002D   F0           MOVX    @DPTR,A
   \   00002E   A3           INC     DPTR
   \   00002F   E9           MOV     A,R1
   \   000030   F0           MOVX    @DPTR,A
    146              epList = ep;
   \   000031   90....       MOV     DPTR,#epList
   \   000034   EA           MOV     A,R2
   \   000035   F0           MOVX    @DPTR,A
   \   000036   A3           INC     DPTR
   \   000037   EB           MOV     A,R3
   \   000038   F0           MOVX    @DPTR,A
    147              ep->epDesc = epDesc;
   \   000039   8A82         MOV     DPL,R2
   \   00003B   8B83         MOV     DPH,R3
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   EE           MOV     A,R6
   \   000040   F0           MOVX    @DPTR,A
   \   000041   A3           INC     DPTR
   \   000042   EF           MOV     A,R7
   \   000043   F0           MOVX    @DPTR,A
    148              ep->pfnDescCB = descFn;
   \   000044   8A82         MOV     DPL,R2
   \   000046   8B83         MOV     DPH,R3
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   E5..         MOV     A,?V0
   \   00004E   F0           MOVX    @DPTR,A
   \   00004F   A3           INC     DPTR
   \   000050   E5..         MOV     A,?V1
   \   000052   F0           MOVX    @DPTR,A
    149              ep->apsfCfg.frameDelay = APSF_DEFAULT_INTERFRAME_DELAY;
   \   000053   8A82         MOV     DPL,R2
   \   000055   8B83         MOV     DPH,R3
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   7432         MOV     A,#0x32
   \   00005F   F0           MOVX    @DPTR,A
    150              ep->apsfCfg.windowSize = APSF_DEFAULT_WINDOW_SIZE;
   \   000060   8A82         MOV     DPL,R2
   \   000062   8B83         MOV     DPH,R3
   \   000064   A3           INC     DPTR
   \   000065   A3           INC     DPTR
   \   000066   A3           INC     DPTR
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   7401         MOV     A,#0x1
   \   00006D   F0           MOVX    @DPTR,A
    151              ep->flags = eEP_AllowMatch;  // Default to allow Match Descriptor.
   \   00006E   8A82         MOV     DPL,R2
   \   000070   8B83         MOV     DPH,R3
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   A3           INC     DPTR
   \   000075   A3           INC     DPTR
   \   000076   A3           INC     DPTR
   \   000077   A3           INC     DPTR
   \   000078   A3           INC     DPTR
   \   000079   A3           INC     DPTR
   \   00007A   7401         MOV     A,#0x1
   \   00007C   F0           MOVX    @DPTR,A
    152              ep->pfnApplCB = applFn;
   \   00007D   740C         MOV     A,#0xc
   \   00007F   12....       LCALL   ?XSTACK_DISP0_8
   \   000082   E0           MOVX    A,@DPTR
   \   000083   F8           MOV     R0,A
   \   000084   A3           INC     DPTR
   \   000085   E0           MOVX    A,@DPTR
   \   000086   F9           MOV     R1,A
   \   000087   8A82         MOV     DPL,R2
   \   000089   8B83         MOV     DPH,R3
   \   00008B   A3           INC     DPTR
   \   00008C   A3           INC     DPTR
   \   00008D   A3           INC     DPTR
   \   00008E   A3           INC     DPTR
   \   00008F   A3           INC     DPTR
   \   000090   A3           INC     DPTR
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   A3           INC     DPTR
   \   000094   E8           MOV     A,R0
   \   000095   F0           MOVX    @DPTR,A
   \   000096   A3           INC     DPTR
   \   000097   E9           MOV     A,R1
   \   000098   F0           MOVX    @DPTR,A
    153            }
    154          
    155            return ep;
   \                     ??afRegisterExtended_0:
   \   000099   7F04         MOV     R7,#0x4
   \   00009B   02....       LJMP    ?BANKED_LEAVE_XDATA
    156          }
    157          
    158          /*********************************************************************
    159           * @fn      afRegister
    160           *
    161           * @brief   Register an Application's EndPoint description.
    162           *
    163           * @param   epDesc - pointer to the Application's endpoint descriptor.
    164           *
    165           * NOTE:  The memory that epDesc is pointing to must exist after this call.
    166           *
    167           * @return  afStatus_SUCCESS - Registered
    168           *          afStatus_MEM_FAIL - not enough memory to add descriptor
    169           *          afStatus_INVALID_PARAMETER - duplicate endpoint
    170           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    171          afStatus_t afRegister( endPointDesc_t *epDesc )
   \                     afRegister:
    172          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    173            if (afFindEndPointDescList(epDesc->endPoint))  // Look for duplicate endpoint.
   \   000009                ; Setup parameters for call to function afFindEndPointDescList
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F9           MOV     R1,A
   \   00000F   12....       LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   000012   8A..         MOV     ?V0,R2
   \   000014   8B..         MOV     ?V1,R3
   \   000016   E5..         MOV     A,?V0
   \   000018   45..         ORL     A,?V1
   \   00001A   6004         JZ      ??afRegister_0
    174            {
    175              return afStatus_INVALID_PARAMETER;
   \   00001C   7902         MOV     R1,#0x2
   \   00001E   802A         SJMP    ??afRegister_1
    176            }
    177          
    178            return ((NULL == afRegisterExtended(epDesc, NULL, NULL)) ? afStatus_MEM_FAIL : afStatus_SUCCESS);
   \                     ??afRegister_0:
   \   000020                ; Setup parameters for call to function afRegisterExtended
   \   000020   E4           CLR     A
   \   000021   F5..         MOV     ?V0,A
   \   000023   F5..         MOV     ?V1,A
   \   000025   78..         MOV     R0,#?V0
   \   000027   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002A   7C00         MOV     R4,#0x0
   \   00002C   7D00         MOV     R5,#0x0
   \   00002E   EE           MOV     A,R6
   \   00002F   FA           MOV     R2,A
   \   000030   EF           MOV     A,R7
   \   000031   FB           MOV     R3,A
   \   000032   12....       LCALL   `??afRegisterExtended::?relay`; Banked call to: afRegisterExtended
   \   000035   7402         MOV     A,#0x2
   \   000037   12....       LCALL   ?DEALLOC_XSTACK8
   \   00003A   8A..         MOV     ?V0,R2
   \   00003C   8B..         MOV     ?V1,R3
   \   00003E   E5..         MOV     A,?V0
   \   000040   45..         ORL     A,?V1
   \   000042   7004         JNZ     ??afRegister_2
   \   000044   7910         MOV     R1,#0x10
   \   000046   8002         SJMP    ??afRegister_1
   \                     ??afRegister_2:
   \   000048   7900         MOV     R1,#0x0
   \                     ??afRegister_1:
   \   00004A   7F02         MOV     R7,#0x2
   \   00004C   02....       LJMP    ?BANKED_LEAVE_XDATA
    179          }
    180          
    181          /*********************************************************************
    182           * @fn      afDelete
    183           *
    184           * @brief   Delete an Application's EndPoint descriptor and frees the memory
    185           *
    186           * @param   EndPoint - Application Endpoint to delete
    187           *
    188           * @return  afStatus_SUCCESS - endpoint deleted
    189           *          afStatus_INVALID_PARAMETER - endpoint not found
    190           *          afStatus_FAILED - endpoint list empty
    191           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    192          afStatus_t afDelete( uint8 EndPoint )
   \                     afDelete:
    193          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    194            epList_t *epCurrent;
    195            epList_t *epPrevious;
    196          
    197            if ( epList != NULL )
   \   000007   90....       MOV     DPTR,#epList
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F8           MOV     R0,A
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F9           MOV     R1,A
   \   00000F   E8           MOV     A,R0
   \   000010   49           ORL     A,R1
   \   000011   7003         JNZ     $+5
   \   000013   02....       LJMP    ??afDelete_0 & 0xFFFF
    198            {
    199              epPrevious = epCurrent = epList;
   \   000016   90....       MOV     DPTR,#epList
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   FA           MOV     R2,A
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   FB           MOV     R3,A
   \   00001E   EA           MOV     A,R2
   \   00001F   F8           MOV     R0,A
   \   000020   EB           MOV     A,R3
   \   000021   F9           MOV     R1,A
    200          
    201              // first element of the list matches
    202              if ( epCurrent->epDesc->endPoint == EndPoint )
   \   000022   8A82         MOV     DPL,R2
   \   000024   8B83         MOV     DPH,R3
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   FC           MOV     R4,A
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F583         MOV     DPH,A
   \   00002E   8C82         MOV     DPL,R4
   \   000030   E0           MOVX    A,@DPTR
   \   000031   6E           XRL     A,R6
   \   000032   7018         JNZ     ??afDelete_1
    203              {
    204                epList = epCurrent->nextDesc;
   \   000034   8A82         MOV     DPL,R2
   \   000036   8B83         MOV     DPH,R3
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F8           MOV     R0,A
   \   00003A   A3           INC     DPTR
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   F9           MOV     R1,A
   \   00003D   90....       MOV     DPTR,#epList
   \   000040   E8           MOV     A,R0
   \   000041   F0           MOVX    @DPTR,A
   \   000042   A3           INC     DPTR
   \   000043   E9           MOV     A,R1
   \   000044   F0           MOVX    @DPTR,A
    205                osal_mem_free( epCurrent );
   \   000045                ; Setup parameters for call to function osal_mem_free
   \   000045   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    206          
    207                return ( afStatus_SUCCESS );
   \   000048   7900         MOV     R1,#0x0
   \   00004A   804D         SJMP    ??afDelete_2
    208              }
    209              else
    210              {
    211                // search the list
    212                for ( epCurrent = epPrevious->nextDesc;
   \                     ??afDelete_1:
   \   00004C   8882         MOV     DPL,R0
   \   00004E   8983         MOV     DPH,R1
   \   000050   E0           MOVX    A,@DPTR
   \   000051   FA           MOV     R2,A
   \   000052   A3           INC     DPTR
   \   000053   E0           MOVX    A,@DPTR
   \   000054   FB           MOV     R3,A
   \   000055   800D         SJMP    ??afDelete_3
    213                      epCurrent != NULL;
    214                      epCurrent = epCurrent->nextDesc )
    215                {
    216                  if ( epCurrent->epDesc->endPoint == EndPoint )
    217                  {
    218                    epPrevious->nextDesc = epCurrent->nextDesc;
    219                    osal_mem_free( epCurrent );
    220          
    221                    // delete the entry and free the memory
    222                    return ( afStatus_SUCCESS );
    223                  }
    224                  epPrevious = epCurrent;
   \                     ??afDelete_4:
   \   000057   EA           MOV     A,R2
   \   000058   F8           MOV     R0,A
   \   000059   EB           MOV     A,R3
   \   00005A   F9           MOV     R1,A
   \   00005B   8A82         MOV     DPL,R2
   \   00005D   8B83         MOV     DPH,R3
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   FA           MOV     R2,A
   \   000061   A3           INC     DPTR
   \   000062   E0           MOVX    A,@DPTR
   \   000063   FB           MOV     R3,A
   \                     ??afDelete_3:
   \   000064   EA           MOV     A,R2
   \   000065   4B           ORL     A,R3
   \   000066   602B         JZ      ??afDelete_5
   \   000068   8A82         MOV     DPL,R2
   \   00006A   8B83         MOV     DPH,R3
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   FC           MOV     R4,A
   \   000070   A3           INC     DPTR
   \   000071   E0           MOVX    A,@DPTR
   \   000072   F583         MOV     DPH,A
   \   000074   8C82         MOV     DPL,R4
   \   000076   E0           MOVX    A,@DPTR
   \   000077   6E           XRL     A,R6
   \   000078   70DD         JNZ     ??afDelete_4
   \   00007A   8A82         MOV     DPL,R2
   \   00007C   8B83         MOV     DPH,R3
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   FC           MOV     R4,A
   \   000080   A3           INC     DPTR
   \   000081   E0           MOVX    A,@DPTR
   \   000082   FD           MOV     R5,A
   \   000083   8882         MOV     DPL,R0
   \   000085   8983         MOV     DPH,R1
   \   000087   EC           MOV     A,R4
   \   000088   F0           MOVX    @DPTR,A
   \   000089   A3           INC     DPTR
   \   00008A   ED           MOV     A,R5
   \   00008B   F0           MOVX    @DPTR,A
   \   00008C                ; Setup parameters for call to function osal_mem_free
   \   00008C   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00008F   7900         MOV     R1,#0x0
   \   000091   8006         SJMP    ??afDelete_2
    225                }
    226              }
    227          
    228              // no endpoint found
    229              return ( afStatus_INVALID_PARAMETER );
   \                     ??afDelete_5:
   \   000093   7902         MOV     R1,#0x2
   \   000095   8002         SJMP    ??afDelete_2
    230            }
    231            else
    232            {
    233              // epList is empty
    234              return ( afStatus_FAILED );
   \                     ??afDelete_0:
   \   000097   7901         MOV     R1,#0x1
   \                     ??afDelete_2:
   \   000099   7F01         MOV     R7,#0x1
   \   00009B   02....       LJMP    ?BANKED_LEAVE_XDATA
    235            }
    236          }
    237          
    238          /*********************************************************************
    239           * @fn          afDataConfirm
    240           *
    241           * @brief       This function will generate the Data Confirm back to
    242           *              the application.
    243           *
    244           * @param       endPoint - confirm end point
    245           * @param       transID - transaction ID from APSDE_DATA_REQUEST
    246           * @param       status - status of APSDE_DATA_REQUEST
    247           *
    248           * @return      none
    249           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    250          void afDataConfirm( uint8 endPoint, uint8 transID, ZStatus_t status )
   \                     afDataConfirm:
    251          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
   \   000007   8A..         MOV     ?V1,R2
   \   000009   8B..         MOV     ?V2,R3
    252            endPointDesc_t *epDesc;
    253            afDataConfirm_t *msgPtr;
    254          
    255            // Find the endpoint description
    256            epDesc = afFindEndPointDesc( endPoint );
   \   00000B                ; Setup parameters for call to function afFindEndPointDesc
   \   00000B   A9..         MOV     R1,?V0
   \   00000D   12....       LCALL   `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   000010   8A..         MOV     ?V4,R2
   \   000012   8B..         MOV     ?V5,R3
   \   000014   AE..         MOV     R6,?V4
   \   000016   AF..         MOV     R7,?V5
    257            if ( epDesc == NULL )
   \   000018   EE           MOV     A,R6
   \   000019   4F           ORL     A,R7
   \   00001A   6054         JZ      ??afDataConfirm_0
    258              return;
    259          
    260            // Determine the incoming command type
    261            msgPtr = (afDataConfirm_t *)osal_msg_allocate( sizeof(afDataConfirm_t) );
   \   00001C                ; Setup parameters for call to function osal_msg_allocate
   \   00001C   7A04         MOV     R2,#0x4
   \   00001E   7B00         MOV     R3,#0x0
   \   000020   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000023   8A..         MOV     ?V4,R2
   \   000025   8B..         MOV     ?V5,R3
   \   000027   AA..         MOV     R2,?V4
   \   000029   AB..         MOV     R3,?V5
    262            if ( msgPtr )
   \   00002B   EA           MOV     A,R2
   \   00002C   4B           ORL     A,R3
   \   00002D   6041         JZ      ??afDataConfirm_0
    263            {
    264              // Build the Data Confirm message
    265              msgPtr->hdr.event = AF_DATA_CONFIRM_CMD;
   \   00002F   8A82         MOV     DPL,R2
   \   000031   8B83         MOV     DPH,R3
   \   000033   74FD         MOV     A,#-0x3
   \   000035   F0           MOVX    @DPTR,A
    266              msgPtr->hdr.status = status;
   \   000036   E5..         MOV     A,?V2
   \   000038   C0E0         PUSH    A
   \   00003A   8A82         MOV     DPL,R2
   \   00003C   8B83         MOV     DPH,R3
   \   00003E   A3           INC     DPTR
   \   00003F   D0E0         POP     A
   \   000041   F0           MOVX    @DPTR,A
    267              msgPtr->endpoint = endPoint;
   \   000042   E5..         MOV     A,?V0
   \   000044   C0E0         PUSH    A
   \   000046   8A82         MOV     DPL,R2
   \   000048   8B83         MOV     DPH,R3
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   D0E0         POP     A
   \   00004E   F0           MOVX    @DPTR,A
    268              msgPtr->transID = transID;
   \   00004F   E5..         MOV     A,?V1
   \   000051   C0E0         PUSH    A
   \   000053   8A82         MOV     DPL,R2
   \   000055   8B83         MOV     DPH,R3
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   D0E0         POP     A
   \   00005C   F0           MOVX    @DPTR,A
    269          
    270          #if defined ( MT_AF_CB_FUNC )
    271              /* If MT has subscribed for this callback, don't send as a message. */
    272              if ( AFCB_CHECK(CB_ID_AF_DATA_CNF,*(epDesc->task_id)) )
    273              {
    274                /* Send callback if it's subscribed */
    275                MT_AfDataConfirm ((void *)msgPtr);
    276                /* Release the memory. */
    277                osal_msg_deallocate( (void *)msgPtr );
    278              }
    279              else
    280          #endif
    281              {
    282                /* send message through task message */
    283                osal_msg_send( *(epDesc->task_id), (uint8 *)msgPtr );
   \   00005D                ; Setup parameters for call to function osal_msg_send
   \   00005D   8E82         MOV     DPL,R6
   \   00005F   8F83         MOV     DPH,R7
   \   000061   A3           INC     DPTR
   \   000062   E0           MOVX    A,@DPTR
   \   000063   F8           MOV     R0,A
   \   000064   A3           INC     DPTR
   \   000065   E0           MOVX    A,@DPTR
   \   000066   F583         MOV     DPH,A
   \   000068   8882         MOV     DPL,R0
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   F9           MOV     R1,A
   \   00006C   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   00006F   E9           MOV     A,R1
    284              }
    285            }
    286          }
   \                     ??afDataConfirm_0:
   \   000070   7F06         MOV     R7,#0x6
   \   000072   02....       LJMP    ?BANKED_LEAVE_XDATA
    287          
    288          /*********************************************************************
    289           * @fn          afReflectError
    290           *
    291           * @brief       This function will generate the Reflect Error message to
    292           *              the application.
    293           *
    294           * @param       dstAddrMode - mode of dstAdd - 0 - normal short addr, 1 - group Address
    295           * @param       dstAddr - intended destination
    296           * @param       endPoint - confirm end point
    297           * @param       transID - transaction ID from APSDE_DATA_REQUEST
    298           * @param       status - status of APSDE_DATA_REQUEST
    299           *
    300           * @return      none
    301           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    302          void afReflectError( uint8 dstAddrMode, uint16 dstAddr, uint8 endPoint, uint8 transID, ZStatus_t status )
   \                     afReflectError:
    303          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V1,R1
   \   000007   8A..         MOV     ?V2,R2
   \   000009   8B..         MOV     ?V3,R3
   \   00000B   8C..         MOV     ?V0,R4
   \   00000D   8D..         MOV     ?V4,R5
    304            endPointDesc_t *epDesc;
    305            afReflectError_t *msgPtr;
    306          
    307            // Find the endpoint description
    308            epDesc = afFindEndPointDesc( endPoint );
   \   00000F                ; Setup parameters for call to function afFindEndPointDesc
   \   00000F   A9..         MOV     R1,?V0
   \   000011   12....       LCALL   `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   000014   8A..         MOV     ?V6,R2
   \   000016   8B..         MOV     ?V7,R3
   \   000018   AE..         MOV     R6,?V6
   \   00001A   AF..         MOV     R7,?V7
    309            if ( epDesc == NULL )
   \   00001C   EE           MOV     A,R6
   \   00001D   4F           ORL     A,R7
   \   00001E   6077         JZ      ??afReflectError_0
    310              return;
    311          
    312            // Determine the incoming command type
    313            msgPtr = (afReflectError_t *)osal_msg_allocate( sizeof(afReflectError_t) );
   \   000020                ; Setup parameters for call to function osal_msg_allocate
   \   000020   7A07         MOV     R2,#0x7
   \   000022   7B00         MOV     R3,#0x0
   \   000024   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000027   8A..         MOV     ?V6,R2
   \   000029   8B..         MOV     ?V7,R3
   \   00002B   AA..         MOV     R2,?V6
   \   00002D   AB..         MOV     R3,?V7
    314            if ( msgPtr )
   \   00002F   EA           MOV     A,R2
   \   000030   4B           ORL     A,R3
   \   000031   6064         JZ      ??afReflectError_0
    315            {
    316              // Build the Data Confirm message
    317              msgPtr->hdr.event = AF_REFLECT_ERROR_CMD;
   \   000033   8A82         MOV     DPL,R2
   \   000035   8B83         MOV     DPH,R3
   \   000037   74FE         MOV     A,#-0x2
   \   000039   F0           MOVX    @DPTR,A
    318              msgPtr->hdr.status = status;
   \   00003A   7410         MOV     A,#0x10
   \   00003C   12....       LCALL   ?XSTACK_DISP0_8
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   C0E0         PUSH    A
   \   000042   8A82         MOV     DPL,R2
   \   000044   8B83         MOV     DPH,R3
   \   000046   A3           INC     DPTR
   \   000047   D0E0         POP     A
   \   000049   F0           MOVX    @DPTR,A
    319              msgPtr->endpoint = endPoint;
   \   00004A   E5..         MOV     A,?V0
   \   00004C   C0E0         PUSH    A
   \   00004E   8A82         MOV     DPL,R2
   \   000050   8B83         MOV     DPH,R3
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   D0E0         POP     A
   \   000056   F0           MOVX    @DPTR,A
    320              msgPtr->transID = transID;
   \   000057   E5..         MOV     A,?V4
   \   000059   C0E0         PUSH    A
   \   00005B   8A82         MOV     DPL,R2
   \   00005D   8B83         MOV     DPH,R3
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   A3           INC     DPTR
   \   000062   D0E0         POP     A
   \   000064   F0           MOVX    @DPTR,A
    321              msgPtr->dstAddrMode = dstAddrMode;
   \   000065   E5..         MOV     A,?V1
   \   000067   C0E0         PUSH    A
   \   000069   8A82         MOV     DPL,R2
   \   00006B   8B83         MOV     DPH,R3
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   A3           INC     DPTR
   \   000070   A3           INC     DPTR
   \   000071   D0E0         POP     A
   \   000073   F0           MOVX    @DPTR,A
    322              msgPtr->dstAddr = dstAddr;
   \   000074   8A82         MOV     DPL,R2
   \   000076   8B83         MOV     DPH,R3
   \   000078   A3           INC     DPTR
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   A3           INC     DPTR
   \   00007C   A3           INC     DPTR
   \   00007D   E5..         MOV     A,?V2
   \   00007F   F0           MOVX    @DPTR,A
   \   000080   A3           INC     DPTR
   \   000081   E5..         MOV     A,?V3
   \   000083   F0           MOVX    @DPTR,A
    323          
    324          #if defined ( MT_AF_CB_FUNC )
    325              /* If MT has subscribed for this callback, don't send as a message. */
    326              if ( AFCB_CHECK( CB_ID_AF_REFLECT_ERROR, *(epDesc->task_id) ) )
    327              {
    328                /* Send callback if it's subscribed */
    329                MT_AfReflectError( (void *)msgPtr );
    330                /* Release the memory. */
    331                osal_msg_deallocate( (void *)msgPtr );
    332              }
    333              else
    334          #endif
    335              {
    336                /* send message through task message */
    337                osal_msg_send( *(epDesc->task_id), (uint8 *)msgPtr );
   \   000084                ; Setup parameters for call to function osal_msg_send
   \   000084   8E82         MOV     DPL,R6
   \   000086   8F83         MOV     DPH,R7
   \   000088   A3           INC     DPTR
   \   000089   E0           MOVX    A,@DPTR
   \   00008A   F8           MOV     R0,A
   \   00008B   A3           INC     DPTR
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   F583         MOV     DPH,A
   \   00008F   8882         MOV     DPL,R0
   \   000091   E0           MOVX    A,@DPTR
   \   000092   F9           MOV     R1,A
   \   000093   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   000096   E9           MOV     A,R1
    338              }
    339            }
    340          }
   \                     ??afReflectError_0:
   \   000097   7F08         MOV     R7,#0x8
   \   000099   02....       LJMP    ?BANKED_LEAVE_XDATA
    341          
    342          /*********************************************************************
    343           * @fn          afIncomingData
    344           *
    345           * @brief       Transfer a data PDU (ASDU) from the APS sub-layer to the AF.
    346           *
    347           * @param       aff  - pointer to APS frame format
    348           * @param       SrcAddress  - Source address
    349           * @param       SrcPanId  - Source PAN ID
    350           * @param       sig - incoming message's link quality
    351           * @param       nwkSeqNum - incoming network sequence number (from nwk header frame)
    352           * @param       SecurityUse - Security enable/disable
    353           * @param       timestamp - the MAC Timer2 timestamp at Rx.
    354           * @param       radius - incoming messages received radius
    355           *
    356           * @return      none
    357           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    358          void afIncomingData( aps_FrameFormat_t *aff, zAddrType_t *SrcAddress, uint16 SrcPanId,
   \                     afIncomingData:
    359                               NLDE_Signal_t *sig, uint8 nwkSeqNum, uint8 SecurityUse,
    360                               uint32 timestamp, uint8 radius )
    361          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7401         MOV     A,#0x1
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EC           MOV     A,R4
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   ED           MOV     A,R5
   \   000013   F0           MOVX    @DPTR,A
   \   000014   E9           MOV     A,R1
   \   000015   C0E0         PUSH    A
   \   000017   85..82       MOV     DPL,?XSP + 0
   \   00001A   85..83       MOV     DPH,?XSP + 1
   \   00001D   D0E0         POP     A
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   8A..         MOV     ?V2,R2
   \   000022   8B..         MOV     ?V3,R3
    362            endPointDesc_t *epDesc = NULL;
   \   000024   7E00         MOV     R6,#0x0
   \   000026   7F00         MOV     R7,#0x0
    363            epList_t *pList = epList;
   \   000028   90....       MOV     DPTR,#epList
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F5..         MOV     ?V0,A
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F5..         MOV     ?V1,A
    364          #if !defined ( APS_NO_GROUPS )
    365            uint8 grpEp = APS_GROUPS_EP_NOT_FOUND;
   \   000032   75..FE       MOV     ?V8,#-0x2
    366          #endif
    367          
    368            if ( ((aff->FrmCtrl & APS_DELIVERYMODE_MASK) == APS_FC_DM_GROUP) )
   \   000035   85..82       MOV     DPL,?V2
   \   000038   85..83       MOV     DPH,?V3
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   540C         ANL     A,#0xc
   \   00003E   640C         XRL     A,#0xc
   \   000040   705F         JNZ     ??afIncomingData_0
    369            {
    370          #if !defined ( APS_NO_GROUPS )
    371              // Find the first endpoint for this group
    372              grpEp = aps_FindGroupForEndpoint( aff->GroupID, APS_GROUPS_FIND_FIRST );
   \   000042                ; Setup parameters for call to function aps_FindGroupForEndpoint
   \   000042   79FE         MOV     R1,#-0x2
   \   000044   85..82       MOV     DPL,?V2
   \   000047   85..83       MOV     DPH,?V3
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   FA           MOV     R2,A
   \   000050   A3           INC     DPTR
   \   000051   E0           MOVX    A,@DPTR
   \   000052   FB           MOV     R3,A
   \   000053   12....       LCALL   `??aps_FindGroupForEndpoint::?relay`; Banked call to: aps_FindGroupForEndpoint
   \   000056   E9           MOV     A,R1
   \   000057   F5..         MOV     ?V8,A
    373              if ( grpEp == APS_GROUPS_EP_NOT_FOUND )
   \   000059   74FE         MOV     A,#-0x2
   \   00005B   65..         XRL     A,?V8
   \   00005D   7003         JNZ     $+5
   \   00005F   02....       LJMP    ??afIncomingData_1 & 0xFFFF
    374                return;   // No endpoint found
    375          
    376              epDesc = afFindEndPointDesc( grpEp );
   \   000062                ; Setup parameters for call to function afFindEndPointDesc
   \   000062   A9..         MOV     R1,?V8
   \   000064   12....       LCALL   `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   000067   8A..         MOV     ?V0,R2
   \   000069   8B..         MOV     ?V1,R3
   \   00006B   AE..         MOV     R6,?V0
   \   00006D   AF..         MOV     R7,?V1
    377              if ( epDesc == NULL )
   \   00006F   EE           MOV     A,R6
   \   000070   4F           ORL     A,R7
   \   000071   7003         JNZ     $+5
   \   000073   02....       LJMP    ??afIncomingData_1 & 0xFFFF
    378                return;   // Endpoint descriptor not found
    379          
    380              pList = afFindEndPointDescList( epDesc->endPoint );
   \   000076                ; Setup parameters for call to function afFindEndPointDescList
   \   000076   8E82         MOV     DPL,R6
   \   000078   8F83         MOV     DPH,R7
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   F9           MOV     R1,A
   \   00007C   12....       LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   00007F   8A..         MOV     ?V4,R2
   \   000081   8B..         MOV     ?V5,R3
   \   000083   85....       MOV     ?V0,?V4
   \   000086   85....       MOV     ?V1,?V5
   \                     ??afIncomingData_2:
   \   000089   741B         MOV     A,#0x1b
   \   00008B   12....       LCALL   ?XSTACK_DISP0_8
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   F5..         MOV     ?V14,A
   \   000091   A3           INC     DPTR
   \   000092   E0           MOVX    A,@DPTR
   \   000093   F5..         MOV     ?V15,A
   \   000095   7420         MOV     A,#0x20
   \   000097   12....       LCALL   ?XSTACK_DISP0_8
   \   00009A   78..         MOV     R0,#?V4
   \   00009C   12....       LCALL   ?L_MOV_X
   \   00009F   8067         SJMP    ??afIncomingData_3
    381          #else
    382              return; // Not supported
    383          #endif
    384            }
    385            else if ( aff->DstEndPoint == AF_BROADCAST_ENDPOINT )
   \                     ??afIncomingData_0:
   \   0000A1   85..82       MOV     DPL,?V2
   \   0000A4   85..83       MOV     DPH,?V3
   \   0000A7   A3           INC     DPTR
   \   0000A8   A3           INC     DPTR
   \   0000A9   E0           MOVX    A,@DPTR
   \   0000AA   64FF         XRL     A,#0xff
   \   0000AC   7015         JNZ     ??afIncomingData_4
    386            {
    387              // Set the list
    388              if ( pList != NULL )
   \   0000AE   E5..         MOV     A,?V0
   \   0000B0   45..         ORL     A,?V1
   \   0000B2   60D5         JZ      ??afIncomingData_2
    389              {
    390                epDesc = pList->epDesc;
   \   0000B4   85..82       MOV     DPL,?V0
   \   0000B7   85..83       MOV     DPH,?V1
   \   0000BA   A3           INC     DPTR
   \   0000BB   A3           INC     DPTR
   \   0000BC   E0           MOVX    A,@DPTR
   \   0000BD   FE           MOV     R6,A
   \   0000BE   A3           INC     DPTR
   \   0000BF   E0           MOVX    A,@DPTR
   \   0000C0   FF           MOV     R7,A
   \   0000C1   80C6         SJMP    ??afIncomingData_2
    391              }
    392            }
    393            else if ( (epDesc = afFindEndPointDesc( aff->DstEndPoint )) )
   \                     ??afIncomingData_4:
   \   0000C3                ; Setup parameters for call to function afFindEndPointDesc
   \   0000C3   85..82       MOV     DPL,?V2
   \   0000C6   85..83       MOV     DPH,?V3
   \   0000C9   A3           INC     DPTR
   \   0000CA   A3           INC     DPTR
   \   0000CB   E0           MOVX    A,@DPTR
   \   0000CC   F9           MOV     R1,A
   \   0000CD   12....       LCALL   `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   0000D0   8A..         MOV     ?V4,R2
   \   0000D2   8B..         MOV     ?V5,R3
   \   0000D4   A8..         MOV     R0,?V4
   \   0000D6   A9..         MOV     R1,?V5
   \   0000D8   E8           MOV     A,R0
   \   0000D9   FE           MOV     R6,A
   \   0000DA   E9           MOV     A,R1
   \   0000DB   FF           MOV     R7,A
   \   0000DC   E8           MOV     A,R0
   \   0000DD   49           ORL     A,R1
   \   0000DE   60A9         JZ      ??afIncomingData_2
    394            {
    395              pList = afFindEndPointDescList( epDesc->endPoint );
   \   0000E0                ; Setup parameters for call to function afFindEndPointDescList
   \   0000E0   8E82         MOV     DPL,R6
   \   0000E2   8F83         MOV     DPH,R7
   \   0000E4   E0           MOVX    A,@DPTR
   \   0000E5   F9           MOV     R1,A
   \   0000E6   12....       LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   0000E9   8A..         MOV     ?V4,R2
   \   0000EB   8B..         MOV     ?V5,R3
   \   0000ED   85....       MOV     ?V0,?V4
   \   0000F0   85....       MOV     ?V1,?V5
   \   0000F3   8094         SJMP    ??afIncomingData_2
    396            }
    397          
    398            while ( epDesc )
    399            {
    400              uint16 epProfileID = 0xFFFE;  // Invalid Profile ID
    401          
    402              if ( pList->pfnDescCB )
    403              {
    404                uint16 *pID = (uint16 *)(pList->pfnDescCB(
    405                                           AF_DESCRIPTOR_PROFILE_ID, epDesc->endPoint ));
    406                if ( pID )
    407                {
    408                  epProfileID = *pID;
    409                  osal_mem_free( pID );
    410                }
    411              }
    412              else if ( epDesc->simpleDesc )
    413              {
    414                epProfileID = epDesc->simpleDesc->AppProfId;
    415              }
    416          
    417              // First part of verification is to make sure that:
    418              // the local Endpoint ProfileID matches the received ProfileID OR
    419              // the message is specifically send to ZDO (this excludes the broadcast endpoint) OR
    420              // if the Wildcard ProfileID is received the message should not be sent to ZDO endpoint
    421              if ( (aff->ProfileID == epProfileID) ||
    422                   ((epDesc->endPoint == ZDO_EP) && (aff->ProfileID == ZDO_PROFILE_ID)) ||
    423                   ((epDesc->endPoint != ZDO_EP) && ( aff->ProfileID == ZDO_WILDCARD_PROFILE_ID )) )
    424              {
    425                // Save original endpoint
    426                uint8 endpoint = aff->DstEndPoint;
    427          
    428                // overwrite with descriptor's endpoint
    429                aff->DstEndPoint = epDesc->endPoint;
    430          
    431                afBuildMSGIncoming( aff, epDesc, SrcAddress, SrcPanId, sig,
    432                                   nwkSeqNum, SecurityUse, timestamp, radius );
    433          
    434                // Restore with original endpoint
    435                aff->DstEndPoint = endpoint;
    436              }
    437          
    438              if ( ((aff->FrmCtrl & APS_DELIVERYMODE_MASK) == APS_FC_DM_GROUP) )
    439              {
    440          #if !defined ( APS_NO_GROUPS )
    441                // Find the next endpoint for this group
    442                grpEp = aps_FindGroupForEndpoint( aff->GroupID, grpEp );
    443                if ( grpEp == APS_GROUPS_EP_NOT_FOUND )
    444                  return;   // No endpoint found
    445          
    446                epDesc = afFindEndPointDesc( grpEp );
    447                if ( epDesc == NULL )
    448                  return;   // Endpoint descriptor not found
    449          
    450                pList = afFindEndPointDescList( epDesc->endPoint );
   \                     ??afIncomingData_5:
   \   0000F5                ; Setup parameters for call to function afFindEndPointDescList
   \   0000F5   8E82         MOV     DPL,R6
   \   0000F7   8F83         MOV     DPH,R7
   \   0000F9   E0           MOVX    A,@DPTR
   \   0000FA   F9           MOV     R1,A
   \   0000FB   12....       LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   0000FE   8A..         MOV     ?V10,R2
   \   000100   8B..         MOV     ?V11,R3
   \   000102   85....       MOV     ?V0,?V10
   \   000105   85....       MOV     ?V1,?V11
   \                     ??afIncomingData_3:
   \   000108   EE           MOV     A,R6
   \   000109   4F           ORL     A,R7
   \   00010A   7003         JNZ     $+5
   \   00010C   02....       LJMP    ??afIncomingData_1 & 0xFFFF
   \   00010F   75..FE       MOV     ?V10,#-0x2
   \   000112   75..FF       MOV     ?V11,#-0x1
   \   000115   85..82       MOV     DPL,?V0
   \   000118   85..83       MOV     DPH,?V1
   \   00011B   A3           INC     DPTR
   \   00011C   A3           INC     DPTR
   \   00011D   A3           INC     DPTR
   \   00011E   A3           INC     DPTR
   \   00011F   E0           MOVX    A,@DPTR
   \   000120   F8           MOV     R0,A
   \   000121   A3           INC     DPTR
   \   000122   E0           MOVX    A,@DPTR
   \   000123   F9           MOV     R1,A
   \   000124   E8           MOV     A,R0
   \   000125   49           ORL     A,R1
   \   000126   6039         JZ      ??afIncomingData_6
   \   000128                ; Setup parameters for indirect call
   \   000128   8E82         MOV     DPL,R6
   \   00012A   8F83         MOV     DPH,R7
   \   00012C   E0           MOVX    A,@DPTR
   \   00012D   FA           MOV     R2,A
   \   00012E   7902         MOV     R1,#0x2
   \   000130   85..82       MOV     DPL,?V0
   \   000133   85..83       MOV     DPH,?V1
   \   000136   A3           INC     DPTR
   \   000137   A3           INC     DPTR
   \   000138   A3           INC     DPTR
   \   000139   A3           INC     DPTR
   \   00013A   E0           MOVX    A,@DPTR
   \   00013B   F8           MOV     R0,A
   \   00013C   A3           INC     DPTR
   \   00013D   E0           MOVX    A,@DPTR
   \   00013E   F583         MOV     DPH,A
   \   000140   8882         MOV     DPL,R0
   \   000142   12....       LCALL   ?CALL_IND
   \   000145   8A..         MOV     ?V12,R2
   \   000147   8B..         MOV     ?V13,R3
   \   000149   AA..         MOV     R2,?V12
   \   00014B   AB..         MOV     R3,?V13
   \   00014D   EA           MOV     A,R2
   \   00014E   4B           ORL     A,R3
   \   00014F   6037         JZ      ??afIncomingData_7
   \   000151   8A82         MOV     DPL,R2
   \   000153   8B83         MOV     DPH,R3
   \   000155   E0           MOVX    A,@DPTR
   \   000156   F5..         MOV     ?V10,A
   \   000158   A3           INC     DPTR
   \   000159   E0           MOVX    A,@DPTR
   \   00015A   F5..         MOV     ?V11,A
   \   00015C                ; Setup parameters for call to function osal_mem_free
   \   00015C   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00015F   8027         SJMP    ??afIncomingData_7
   \                     ??afIncomingData_6:
   \   000161   8E82         MOV     DPL,R6
   \   000163   8F83         MOV     DPH,R7
   \   000165   A3           INC     DPTR
   \   000166   A3           INC     DPTR
   \   000167   A3           INC     DPTR
   \   000168   E0           MOVX    A,@DPTR
   \   000169   F8           MOV     R0,A
   \   00016A   A3           INC     DPTR
   \   00016B   E0           MOVX    A,@DPTR
   \   00016C   F9           MOV     R1,A
   \   00016D   E8           MOV     A,R0
   \   00016E   49           ORL     A,R1
   \   00016F   6017         JZ      ??afIncomingData_7
   \   000171   8E82         MOV     DPL,R6
   \   000173   8F83         MOV     DPH,R7
   \   000175   A3           INC     DPTR
   \   000176   A3           INC     DPTR
   \   000177   A3           INC     DPTR
   \   000178   E0           MOVX    A,@DPTR
   \   000179   F8           MOV     R0,A
   \   00017A   A3           INC     DPTR
   \   00017B   E0           MOVX    A,@DPTR
   \   00017C   F583         MOV     DPH,A
   \   00017E   8882         MOV     DPL,R0
   \   000180   A3           INC     DPTR
   \   000181   E0           MOVX    A,@DPTR
   \   000182   F5..         MOV     ?V10,A
   \   000184   A3           INC     DPTR
   \   000185   E0           MOVX    A,@DPTR
   \   000186   F5..         MOV     ?V11,A
   \                     ??afIncomingData_7:
   \   000188   85..82       MOV     DPL,?V2
   \   00018B   85..83       MOV     DPH,?V3
   \   00018E   A3           INC     DPTR
   \   00018F   A3           INC     DPTR
   \   000190   A3           INC     DPTR
   \   000191   A3           INC     DPTR
   \   000192   A3           INC     DPTR
   \   000193   A3           INC     DPTR
   \   000194   A3           INC     DPTR
   \   000195   A3           INC     DPTR
   \   000196   E0           MOVX    A,@DPTR
   \   000197   65..         XRL     A,?V10
   \   000199   7004         JNZ     ??afIncomingData_8
   \   00019B   A3           INC     DPTR
   \   00019C   E0           MOVX    A,@DPTR
   \   00019D   65..         XRL     A,?V11
   \                     ??afIncomingData_8:
   \   00019F   6041         JZ      ??afIncomingData_9
   \   0001A1   8E82         MOV     DPL,R6
   \   0001A3   8F83         MOV     DPH,R7
   \   0001A5   E0           MOVX    A,@DPTR
   \   0001A6   7017         JNZ     ??afIncomingData_10
   \   0001A8   85..82       MOV     DPL,?V2
   \   0001AB   85..83       MOV     DPH,?V3
   \   0001AE   A3           INC     DPTR
   \   0001AF   A3           INC     DPTR
   \   0001B0   A3           INC     DPTR
   \   0001B1   A3           INC     DPTR
   \   0001B2   A3           INC     DPTR
   \   0001B3   A3           INC     DPTR
   \   0001B4   A3           INC     DPTR
   \   0001B5   A3           INC     DPTR
   \   0001B6   E0           MOVX    A,@DPTR
   \   0001B7   F8           MOV     R0,A
   \   0001B8   A3           INC     DPTR
   \   0001B9   E0           MOVX    A,@DPTR
   \   0001BA   F9           MOV     R1,A
   \   0001BB   E8           MOV     A,R0
   \   0001BC   49           ORL     A,R1
   \   0001BD   6023         JZ      ??afIncomingData_9
   \                     ??afIncomingData_10:
   \   0001BF   8E82         MOV     DPL,R6
   \   0001C1   8F83         MOV     DPH,R7
   \   0001C3   E0           MOVX    A,@DPTR
   \   0001C4   7003         JNZ     $+5
   \   0001C6   02....       LJMP    ??afIncomingData_11 & 0xFFFF
   \   0001C9   85..82       MOV     DPL,?V2
   \   0001CC   85..83       MOV     DPH,?V3
   \   0001CF   A3           INC     DPTR
   \   0001D0   A3           INC     DPTR
   \   0001D1   A3           INC     DPTR
   \   0001D2   A3           INC     DPTR
   \   0001D3   A3           INC     DPTR
   \   0001D4   A3           INC     DPTR
   \   0001D5   A3           INC     DPTR
   \   0001D6   A3           INC     DPTR
   \   0001D7   E0           MOVX    A,@DPTR
   \   0001D8   64FF         XRL     A,#0xff
   \   0001DA   7004         JNZ     ??afIncomingData_12
   \   0001DC   A3           INC     DPTR
   \   0001DD   E0           MOVX    A,@DPTR
   \   0001DE   64FF         XRL     A,#0xff
   \                     ??afIncomingData_12:
   \   0001E0   7077         JNZ     ??afIncomingData_11
   \                     ??afIncomingData_9:
   \   0001E2   85..82       MOV     DPL,?V2
   \   0001E5   85..83       MOV     DPH,?V3
   \   0001E8   A3           INC     DPTR
   \   0001E9   A3           INC     DPTR
   \   0001EA   E0           MOVX    A,@DPTR
   \   0001EB   F5..         MOV     ?V9,A
   \   0001ED   8E82         MOV     DPL,R6
   \   0001EF   8F83         MOV     DPH,R7
   \   0001F1   E0           MOVX    A,@DPTR
   \   0001F2   C0E0         PUSH    A
   \   0001F4   85..82       MOV     DPL,?V2
   \   0001F7   85..83       MOV     DPH,?V3
   \   0001FA   A3           INC     DPTR
   \   0001FB   A3           INC     DPTR
   \   0001FC   D0E0         POP     A
   \   0001FE   F0           MOVX    @DPTR,A
   \   0001FF                ; Setup parameters for call to function afBuildMSGIncoming
   \   0001FF   7424         MOV     A,#0x24
   \   000201   12....       LCALL   ?XSTACK_DISP0_8
   \   000204   E0           MOVX    A,@DPTR
   \   000205   F5..         MOV     ?V10,A
   \   000207   78..         MOV     R0,#?V10
   \   000209   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00020C   78..         MOV     R0,#?V4
   \   00020E   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000211   7424         MOV     A,#0x24
   \   000213   12....       LCALL   ?XSTACK_DISP0_8
   \   000216   E0           MOVX    A,@DPTR
   \   000217   F5..         MOV     ?V10,A
   \   000219   78..         MOV     R0,#?V10
   \   00021B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00021E   7423         MOV     A,#0x23
   \   000220   12....       LCALL   ?XSTACK_DISP0_8
   \   000223   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000226   78..         MOV     R0,#?V14
   \   000228   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00022B   740B         MOV     A,#0xb
   \   00022D   12....       LCALL   ?XSTACK_DISP0_8
   \   000230   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000233   740C         MOV     A,#0xc
   \   000235   12....       LCALL   ?XSTACK_DISP0_8
   \   000238   E0           MOVX    A,@DPTR
   \   000239   F9           MOV     R1,A
   \   00023A   EE           MOV     A,R6
   \   00023B   FC           MOV     R4,A
   \   00023C   EF           MOV     A,R7
   \   00023D   FD           MOV     R5,A
   \   00023E   AA..         MOV     R2,?V2
   \   000240   AB..         MOV     R3,?V3
   \   000242   12....       LCALL   `??afBuildMSGIncoming::?relay`; Banked call to: afBuildMSGIncoming
   \   000245   740C         MOV     A,#0xc
   \   000247   12....       LCALL   ?DEALLOC_XSTACK8
   \   00024A   E5..         MOV     A,?V9
   \   00024C   C0E0         PUSH    A
   \   00024E   85..82       MOV     DPL,?V2
   \   000251   85..83       MOV     DPH,?V3
   \   000254   A3           INC     DPTR
   \   000255   A3           INC     DPTR
   \   000256   D0E0         POP     A
   \   000258   F0           MOVX    @DPTR,A
   \                     ??afIncomingData_11:
   \   000259   85..82       MOV     DPL,?V2
   \   00025C   85..83       MOV     DPH,?V3
   \   00025F   E0           MOVX    A,@DPTR
   \   000260   540C         ANL     A,#0xc
   \   000262   640C         XRL     A,#0xc
   \   000264   7033         JNZ     ??afIncomingData_13
   \   000266                ; Setup parameters for call to function aps_FindGroupForEndpoint
   \   000266   A9..         MOV     R1,?V8
   \   000268   85..82       MOV     DPL,?V2
   \   00026B   85..83       MOV     DPH,?V3
   \   00026E   A3           INC     DPTR
   \   00026F   A3           INC     DPTR
   \   000270   A3           INC     DPTR
   \   000271   A3           INC     DPTR
   \   000272   E0           MOVX    A,@DPTR
   \   000273   FA           MOV     R2,A
   \   000274   A3           INC     DPTR
   \   000275   E0           MOVX    A,@DPTR
   \   000276   FB           MOV     R3,A
   \   000277   12....       LCALL   `??aps_FindGroupForEndpoint::?relay`; Banked call to: aps_FindGroupForEndpoint
   \   00027A   E9           MOV     A,R1
   \   00027B   F5..         MOV     ?V8,A
   \   00027D   74FE         MOV     A,#-0x2
   \   00027F   65..         XRL     A,?V8
   \   000281   6054         JZ      ??afIncomingData_1
   \   000283                ; Setup parameters for call to function afFindEndPointDesc
   \   000283   A9..         MOV     R1,?V8
   \   000285   12....       LCALL   `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   000288   8A..         MOV     ?V0,R2
   \   00028A   8B..         MOV     ?V1,R3
   \   00028C   AE..         MOV     R6,?V0
   \   00028E   AF..         MOV     R7,?V1
   \   000290   EE           MOV     A,R6
   \   000291   4F           ORL     A,R7
   \   000292   6003         JZ      $+5
   \   000294   02....       LJMP    ??afIncomingData_5 & 0xFFFF
   \   000297   803E         SJMP    ??afIncomingData_1
    451          #else
    452                return;
    453          #endif
    454              }
    455              else if ( aff->DstEndPoint == AF_BROADCAST_ENDPOINT )
   \                     ??afIncomingData_13:
   \   000299   85..82       MOV     DPL,?V2
   \   00029C   85..83       MOV     DPH,?V3
   \   00029F   A3           INC     DPTR
   \   0002A0   A3           INC     DPTR
   \   0002A1   E0           MOVX    A,@DPTR
   \   0002A2   64FF         XRL     A,#0xff
   \   0002A4   702A         JNZ     ??afIncomingData_14
    456              {
    457                pList = pList->nextDesc;
   \   0002A6   85..82       MOV     DPL,?V0
   \   0002A9   85..83       MOV     DPH,?V1
   \   0002AC   E0           MOVX    A,@DPTR
   \   0002AD   F5..         MOV     ?V0,A
   \   0002AF   A3           INC     DPTR
   \   0002B0   E0           MOVX    A,@DPTR
   \   0002B1   F5..         MOV     ?V1,A
    458                if ( pList )
   \   0002B3   E5..         MOV     A,?V0
   \   0002B5   45..         ORL     A,?V1
   \   0002B7   6010         JZ      ??afIncomingData_15
    459                  epDesc = pList->epDesc;
   \   0002B9   85..82       MOV     DPL,?V0
   \   0002BC   85..83       MOV     DPH,?V1
   \   0002BF   A3           INC     DPTR
   \   0002C0   A3           INC     DPTR
   \   0002C1   E0           MOVX    A,@DPTR
   \   0002C2   FE           MOV     R6,A
   \   0002C3   A3           INC     DPTR
   \   0002C4   E0           MOVX    A,@DPTR
   \   0002C5   FF           MOV     R7,A
   \   0002C6   02....       LJMP    ??afIncomingData_3 & 0xFFFF
    460                else
    461                  epDesc = NULL;
   \                     ??afIncomingData_15:
   \   0002C9   7E00         MOV     R6,#0x0
   \   0002CB   7F00         MOV     R7,#0x0
   \   0002CD   02....       LJMP    ??afIncomingData_3 & 0xFFFF
    462              }
    463              else
    464                epDesc = NULL;
   \                     ??afIncomingData_14:
   \   0002D0   7E00         MOV     R6,#0x0
   \   0002D2   7F00         MOV     R7,#0x0
   \   0002D4   02....       LJMP    ??afIncomingData_3 & 0xFFFF
    465            }
    466          }
   \                     ??afIncomingData_1:
   \   0002D7   7403         MOV     A,#0x3
   \   0002D9   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002DC   7F10         MOV     R7,#0x10
   \   0002DE   02....       LJMP    ?BANKED_LEAVE_XDATA
    467          
    468          /*********************************************************************
    469           * @fn          afBuildMSGIncoming
    470           *
    471           * @brief       Build the message for the app
    472           *
    473           * @param
    474           *
    475           * @return      pointer to next in data buffer
    476           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    477          static void afBuildMSGIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
   \                     afBuildMSGIncoming:
    478                           zAddrType_t *SrcAddress, uint16 SrcPanId, NLDE_Signal_t *sig,
    479                           uint8 nwkSeqNum, uint8 SecurityUse, uint32 timestamp, uint8 radius )
    480          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000   74ED         MOV     A,#-0x13
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   8C..         MOV     ?V2,R4
   \   00000B   8D..         MOV     ?V3,R5
   \   00000D   89..         MOV     ?V6,R1
    481            afIncomingMSGPacket_t *MSGpkt;
    482            const uint8 len = sizeof( afIncomingMSGPacket_t ) + aff->asduLength;
   \   00000F   E5..         MOV     A,?V0
   \   000011   2410         ADD     A,#0x10
   \   000013   F582         MOV     DPL,A
   \   000015   E4           CLR     A
   \   000016   35..         ADDC    A,?V1
   \   000018   F583         MOV     DPH,A
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   2427         ADD     A,#0x27
   \   00001D   FA           MOV     R2,A
    483            uint8 *asdu = aff->asdu;
   \   00001E   E5..         MOV     A,?V0
   \   000020   240E         ADD     A,#0xe
   \   000022   F582         MOV     DPL,A
   \   000024   E4           CLR     A
   \   000025   35..         ADDC    A,?V1
   \   000027   F583         MOV     DPH,A
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F5..         MOV     ?V4,A
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F5..         MOV     ?V5,A
    484            MSGpkt = (afIncomingMSGPacket_t *)osal_msg_allocate( len );
   \   000030                ; Setup parameters for call to function osal_msg_allocate
   \   000030   7B00         MOV     R3,#0x0
   \   000032   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000035   8A..         MOV     ?V8,R2
   \   000037   8B..         MOV     ?V9,R3
   \   000039   AE..         MOV     R6,?V8
   \   00003B   AF..         MOV     R7,?V9
    485          
    486            if ( MSGpkt == NULL )
   \   00003D   EE           MOV     A,R6
   \   00003E   4F           ORL     A,R7
   \   00003F   7003         JNZ     $+5
   \   000041   02....       LJMP    ??afBuildMSGIncoming_0 & 0xFFFF
    487            {
    488              return;
    489            }
    490          
    491            MSGpkt->hdr.event = AF_INCOMING_MSG_CMD;
   \   000044   8E82         MOV     DPL,R6
   \   000046   8F83         MOV     DPH,R7
   \   000048   741A         MOV     A,#0x1a
   \   00004A   F0           MOVX    @DPTR,A
    492            MSGpkt->groupId = aff->GroupID;
   \   00004B   85..82       MOV     DPL,?V0
   \   00004E   85..83       MOV     DPH,?V1
   \   000051   A3           INC     DPTR
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   E0           MOVX    A,@DPTR
   \   000056   F8           MOV     R0,A
   \   000057   A3           INC     DPTR
   \   000058   E0           MOVX    A,@DPTR
   \   000059   F9           MOV     R1,A
   \   00005A   8E82         MOV     DPL,R6
   \   00005C   8F83         MOV     DPH,R7
   \   00005E   A3           INC     DPTR
   \   00005F   A3           INC     DPTR
   \   000060   E8           MOV     A,R0
   \   000061   F0           MOVX    @DPTR,A
   \   000062   A3           INC     DPTR
   \   000063   E9           MOV     A,R1
   \   000064   F0           MOVX    @DPTR,A
    493            MSGpkt->clusterId = aff->ClusterID;
   \   000065   85..82       MOV     DPL,?V0
   \   000068   85..83       MOV     DPH,?V1
   \   00006B   A3           INC     DPTR
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   A3           INC     DPTR
   \   000070   A3           INC     DPTR
   \   000071   E0           MOVX    A,@DPTR
   \   000072   F8           MOV     R0,A
   \   000073   A3           INC     DPTR
   \   000074   E0           MOVX    A,@DPTR
   \   000075   F9           MOV     R1,A
   \   000076   8E82         MOV     DPL,R6
   \   000078   8F83         MOV     DPH,R7
   \   00007A   A3           INC     DPTR
   \   00007B   A3           INC     DPTR
   \   00007C   A3           INC     DPTR
   \   00007D   A3           INC     DPTR
   \   00007E   E8           MOV     A,R0
   \   00007F   F0           MOVX    @DPTR,A
   \   000080   A3           INC     DPTR
   \   000081   E9           MOV     A,R1
   \   000082   F0           MOVX    @DPTR,A
    494            afCopyAddress( &MSGpkt->srcAddr, SrcAddress );
   \   000083                ; Setup parameters for call to function afCopyAddress
   \   000083   7413         MOV     A,#0x13
   \   000085   12....       LCALL   ?XSTACK_DISP0_8
   \   000088   E0           MOVX    A,@DPTR
   \   000089   FC           MOV     R4,A
   \   00008A   A3           INC     DPTR
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   FD           MOV     R5,A
   \   00008D   EE           MOV     A,R6
   \   00008E   2406         ADD     A,#0x6
   \   000090   FA           MOV     R2,A
   \   000091   E4           CLR     A
   \   000092   3F           ADDC    A,R7
   \   000093   FB           MOV     R3,A
   \   000094   12....       LCALL   `??afCopyAddress::?relay`; Banked call to: afCopyAddress
    495            MSGpkt->srcAddr.endPoint = aff->SrcEndPoint;
   \   000097   85..82       MOV     DPL,?V0
   \   00009A   85..83       MOV     DPH,?V1
   \   00009D   A3           INC     DPTR
   \   00009E   A3           INC     DPTR
   \   00009F   A3           INC     DPTR
   \   0000A0   E0           MOVX    A,@DPTR
   \   0000A1   C0E0         PUSH    A
   \   0000A3   EE           MOV     A,R6
   \   0000A4   240F         ADD     A,#0xf
   \   0000A6   F582         MOV     DPL,A
   \   0000A8   E4           CLR     A
   \   0000A9   3F           ADDC    A,R7
   \   0000AA   F583         MOV     DPH,A
   \   0000AC   D0E0         POP     A
   \   0000AE   F0           MOVX    @DPTR,A
    496            MSGpkt->endPoint = epDesc->endPoint;
   \   0000AF   85..82       MOV     DPL,?V2
   \   0000B2   85..83       MOV     DPH,?V3
   \   0000B5   E0           MOVX    A,@DPTR
   \   0000B6   C0E0         PUSH    A
   \   0000B8   EE           MOV     A,R6
   \   0000B9   2414         ADD     A,#0x14
   \   0000BB   F582         MOV     DPL,A
   \   0000BD   E4           CLR     A
   \   0000BE   3F           ADDC    A,R7
   \   0000BF   F583         MOV     DPH,A
   \   0000C1   D0E0         POP     A
   \   0000C3   F0           MOVX    @DPTR,A
    497            MSGpkt->wasBroadcast = aff->wasBroadcast;
   \   0000C4   E5..         MOV     A,?V0
   \   0000C6   240C         ADD     A,#0xc
   \   0000C8   F582         MOV     DPL,A
   \   0000CA   E4           CLR     A
   \   0000CB   35..         ADDC    A,?V1
   \   0000CD   F583         MOV     DPH,A
   \   0000CF   E0           MOVX    A,@DPTR
   \   0000D0   C0E0         PUSH    A
   \   0000D2   EE           MOV     A,R6
   \   0000D3   2415         ADD     A,#0x15
   \   0000D5   F582         MOV     DPL,A
   \   0000D7   E4           CLR     A
   \   0000D8   3F           ADDC    A,R7
   \   0000D9   F583         MOV     DPH,A
   \   0000DB   D0E0         POP     A
   \   0000DD   F0           MOVX    @DPTR,A
   \   0000DE   7417         MOV     A,#0x17
   \   0000E0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E3   E0           MOVX    A,@DPTR
   \   0000E4   F8           MOV     R0,A
   \   0000E5   A3           INC     DPTR
   \   0000E6   E0           MOVX    A,@DPTR
   \   0000E7   F9           MOV     R1,A
    498            MSGpkt->LinkQuality = sig->LinkQuality;
   \   0000E8   8882         MOV     DPL,R0
   \   0000EA   8983         MOV     DPH,R1
   \   0000EC   E0           MOVX    A,@DPTR
   \   0000ED   C0E0         PUSH    A
   \   0000EF   EE           MOV     A,R6
   \   0000F0   2416         ADD     A,#0x16
   \   0000F2   F582         MOV     DPL,A
   \   0000F4   E4           CLR     A
   \   0000F5   3F           ADDC    A,R7
   \   0000F6   F583         MOV     DPH,A
   \   0000F8   D0E0         POP     A
   \   0000FA   F0           MOVX    @DPTR,A
    499            MSGpkt->correlation = sig->correlation;
   \   0000FB   8882         MOV     DPL,R0
   \   0000FD   8983         MOV     DPH,R1
   \   0000FF   A3           INC     DPTR
   \   000100   E0           MOVX    A,@DPTR
   \   000101   C0E0         PUSH    A
   \   000103   EE           MOV     A,R6
   \   000104   2417         ADD     A,#0x17
   \   000106   F582         MOV     DPL,A
   \   000108   E4           CLR     A
   \   000109   3F           ADDC    A,R7
   \   00010A   F583         MOV     DPH,A
   \   00010C   D0E0         POP     A
   \   00010E   F0           MOVX    @DPTR,A
    500            MSGpkt->rssi = sig->rssi;
   \   00010F   8882         MOV     DPL,R0
   \   000111   8983         MOV     DPH,R1
   \   000113   A3           INC     DPTR
   \   000114   A3           INC     DPTR
   \   000115   E0           MOVX    A,@DPTR
   \   000116   C0E0         PUSH    A
   \   000118   EE           MOV     A,R6
   \   000119   2418         ADD     A,#0x18
   \   00011B   F582         MOV     DPL,A
   \   00011D   E4           CLR     A
   \   00011E   3F           ADDC    A,R7
   \   00011F   F583         MOV     DPH,A
   \   000121   D0E0         POP     A
   \   000123   F0           MOVX    @DPTR,A
    501            MSGpkt->SecurityUse = SecurityUse;
   \   000124   7419         MOV     A,#0x19
   \   000126   12....       LCALL   ?XSTACK_DISP0_8
   \   000129   E0           MOVX    A,@DPTR
   \   00012A   C0E0         PUSH    A
   \   00012C   EE           MOV     A,R6
   \   00012D   2419         ADD     A,#0x19
   \   00012F   F582         MOV     DPL,A
   \   000131   E4           CLR     A
   \   000132   3F           ADDC    A,R7
   \   000133   F583         MOV     DPH,A
   \   000135   D0E0         POP     A
   \   000137   F0           MOVX    @DPTR,A
    502            MSGpkt->timestamp = timestamp;
   \   000138   741A         MOV     A,#0x1a
   \   00013A   12....       LCALL   ?XSTACK_DISP0_8
   \   00013D   12....       LCALL   ?XLOAD_R0123
   \   000140   EE           MOV     A,R6
   \   000141   241A         ADD     A,#0x1a
   \   000143   F582         MOV     DPL,A
   \   000145   E4           CLR     A
   \   000146   3F           ADDC    A,R7
   \   000147   F583         MOV     DPH,A
   \   000149   12....       LCALL   ?XSTORE_R0123
    503            MSGpkt->nwkSeqNum = nwkSeqNum;
   \   00014C   E5..         MOV     A,?V6
   \   00014E   C0E0         PUSH    A
   \   000150   EE           MOV     A,R6
   \   000151   241E         ADD     A,#0x1e
   \   000153   F582         MOV     DPL,A
   \   000155   E4           CLR     A
   \   000156   3F           ADDC    A,R7
   \   000157   F583         MOV     DPH,A
   \   000159   D0E0         POP     A
   \   00015B   F0           MOVX    @DPTR,A
    504            MSGpkt->macSrcAddr = aff->macSrcAddr;
   \   00015C   E5..         MOV     A,?V0
   \   00015E   2415         ADD     A,#0x15
   \   000160   F582         MOV     DPL,A
   \   000162   E4           CLR     A
   \   000163   35..         ADDC    A,?V1
   \   000165   F583         MOV     DPH,A
   \   000167   E0           MOVX    A,@DPTR
   \   000168   F8           MOV     R0,A
   \   000169   A3           INC     DPTR
   \   00016A   E0           MOVX    A,@DPTR
   \   00016B   F9           MOV     R1,A
   \   00016C   EE           MOV     A,R6
   \   00016D   2424         ADD     A,#0x24
   \   00016F   F582         MOV     DPL,A
   \   000171   E4           CLR     A
   \   000172   3F           ADDC    A,R7
   \   000173   F583         MOV     DPH,A
   \   000175   E8           MOV     A,R0
   \   000176   F0           MOVX    @DPTR,A
   \   000177   A3           INC     DPTR
   \   000178   E9           MOV     A,R1
   \   000179   F0           MOVX    @DPTR,A
    505            MSGpkt->macDestAddr = aff->macDestAddr;
   \   00017A   85..82       MOV     DPL,?V0
   \   00017D   85..83       MOV     DPH,?V1
   \   000180   A3           INC     DPTR
   \   000181   A3           INC     DPTR
   \   000182   A3           INC     DPTR
   \   000183   A3           INC     DPTR
   \   000184   A3           INC     DPTR
   \   000185   A3           INC     DPTR
   \   000186   A3           INC     DPTR
   \   000187   A3           INC     DPTR
   \   000188   A3           INC     DPTR
   \   000189   A3           INC     DPTR
   \   00018A   E0           MOVX    A,@DPTR
   \   00018B   F8           MOV     R0,A
   \   00018C   A3           INC     DPTR
   \   00018D   E0           MOVX    A,@DPTR
   \   00018E   F9           MOV     R1,A
   \   00018F   EE           MOV     A,R6
   \   000190   2412         ADD     A,#0x12
   \   000192   F582         MOV     DPL,A
   \   000194   E4           CLR     A
   \   000195   3F           ADDC    A,R7
   \   000196   F583         MOV     DPH,A
   \   000198   E8           MOV     A,R0
   \   000199   F0           MOVX    @DPTR,A
   \   00019A   A3           INC     DPTR
   \   00019B   E9           MOV     A,R1
   \   00019C   F0           MOVX    @DPTR,A
    506            MSGpkt->srcAddr.panId = SrcPanId;
   \   00019D   7415         MOV     A,#0x15
   \   00019F   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A2   E0           MOVX    A,@DPTR
   \   0001A3   F8           MOV     R0,A
   \   0001A4   A3           INC     DPTR
   \   0001A5   E0           MOVX    A,@DPTR
   \   0001A6   F9           MOV     R1,A
   \   0001A7   EE           MOV     A,R6
   \   0001A8   2410         ADD     A,#0x10
   \   0001AA   F582         MOV     DPL,A
   \   0001AC   E4           CLR     A
   \   0001AD   3F           ADDC    A,R7
   \   0001AE   F583         MOV     DPH,A
   \   0001B0   E8           MOV     A,R0
   \   0001B1   F0           MOVX    @DPTR,A
   \   0001B2   A3           INC     DPTR
   \   0001B3   E9           MOV     A,R1
   \   0001B4   F0           MOVX    @DPTR,A
    507            MSGpkt->cmd.TransSeqNumber = 0;
   \   0001B5   EE           MOV     A,R6
   \   0001B6   241F         ADD     A,#0x1f
   \   0001B8   F582         MOV     DPL,A
   \   0001BA   E4           CLR     A
   \   0001BB   3F           ADDC    A,R7
   \   0001BC   F583         MOV     DPH,A
   \   0001BE   7400         MOV     A,#0x0
   \   0001C0   F0           MOVX    @DPTR,A
    508            MSGpkt->cmd.DataLength = aff->asduLength;
   \   0001C1   E5..         MOV     A,?V0
   \   0001C3   2410         ADD     A,#0x10
   \   0001C5   F582         MOV     DPL,A
   \   0001C7   E4           CLR     A
   \   0001C8   35..         ADDC    A,?V1
   \   0001CA   F583         MOV     DPH,A
   \   0001CC   E0           MOVX    A,@DPTR
   \   0001CD   F8           MOV     R0,A
   \   0001CE   7900         MOV     R1,#0x0
   \   0001D0   EE           MOV     A,R6
   \   0001D1   2420         ADD     A,#0x20
   \   0001D3   F582         MOV     DPL,A
   \   0001D5   E4           CLR     A
   \   0001D6   3F           ADDC    A,R7
   \   0001D7   F583         MOV     DPH,A
   \   0001D9   E8           MOV     A,R0
   \   0001DA   F0           MOVX    @DPTR,A
   \   0001DB   A3           INC     DPTR
   \   0001DC   E9           MOV     A,R1
   \   0001DD   F0           MOVX    @DPTR,A
    509            MSGpkt->radius = radius;
   \   0001DE   741E         MOV     A,#0x1e
   \   0001E0   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E3   E0           MOVX    A,@DPTR
   \   0001E4   C0E0         PUSH    A
   \   0001E6   EE           MOV     A,R6
   \   0001E7   2426         ADD     A,#0x26
   \   0001E9   F582         MOV     DPL,A
   \   0001EB   E4           CLR     A
   \   0001EC   3F           ADDC    A,R7
   \   0001ED   F583         MOV     DPH,A
   \   0001EF   D0E0         POP     A
   \   0001F1   F0           MOVX    @DPTR,A
    510          
    511            if ( MSGpkt->cmd.DataLength )
   \   0001F2   EE           MOV     A,R6
   \   0001F3   2420         ADD     A,#0x20
   \   0001F5   F582         MOV     DPL,A
   \   0001F7   E4           CLR     A
   \   0001F8   3F           ADDC    A,R7
   \   0001F9   F583         MOV     DPH,A
   \   0001FB   E0           MOVX    A,@DPTR
   \   0001FC   F8           MOV     R0,A
   \   0001FD   A3           INC     DPTR
   \   0001FE   E0           MOVX    A,@DPTR
   \   0001FF   F9           MOV     R1,A
   \   000200   E8           MOV     A,R0
   \   000201   49           ORL     A,R1
   \   000202   6049         JZ      ??afBuildMSGIncoming_1
    512            {
    513              MSGpkt->cmd.Data = (uint8 *)(MSGpkt + 1);
   \   000204   EE           MOV     A,R6
   \   000205   2427         ADD     A,#0x27
   \   000207   F8           MOV     R0,A
   \   000208   E4           CLR     A
   \   000209   3F           ADDC    A,R7
   \   00020A   F9           MOV     R1,A
   \   00020B   EE           MOV     A,R6
   \   00020C   2422         ADD     A,#0x22
   \   00020E   F582         MOV     DPL,A
   \   000210   E4           CLR     A
   \   000211   3F           ADDC    A,R7
   \   000212   F583         MOV     DPH,A
   \   000214   E8           MOV     A,R0
   \   000215   F0           MOVX    @DPTR,A
   \   000216   A3           INC     DPTR
   \   000217   E9           MOV     A,R1
   \   000218   F0           MOVX    @DPTR,A
    514              osal_memcpy( MSGpkt->cmd.Data, asdu, MSGpkt->cmd.DataLength );
   \   000219                ; Setup parameters for call to function osal_memcpy
   \   000219   85....       MOV     ?V8,?V4
   \   00021C   85....       MOV     ?V9,?V5
   \   00021F   75..00       MOV     ?V10,#0x0
   \   000222   78..         MOV     R0,#?V8
   \   000224   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000227   EE           MOV     A,R6
   \   000228   2420         ADD     A,#0x20
   \   00022A   F582         MOV     DPL,A
   \   00022C   E4           CLR     A
   \   00022D   3F           ADDC    A,R7
   \   00022E   F583         MOV     DPH,A
   \   000230   E0           MOVX    A,@DPTR
   \   000231   FC           MOV     R4,A
   \   000232   A3           INC     DPTR
   \   000233   E0           MOVX    A,@DPTR
   \   000234   FD           MOV     R5,A
   \   000235   EE           MOV     A,R6
   \   000236   2422         ADD     A,#0x22
   \   000238   F582         MOV     DPL,A
   \   00023A   E4           CLR     A
   \   00023B   3F           ADDC    A,R7
   \   00023C   F583         MOV     DPH,A
   \   00023E   E0           MOVX    A,@DPTR
   \   00023F   FA           MOV     R2,A
   \   000240   A3           INC     DPTR
   \   000241   E0           MOVX    A,@DPTR
   \   000242   FB           MOV     R3,A
   \   000243   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000246   7403         MOV     A,#0x3
   \   000248   12....       LCALL   ?DEALLOC_XSTACK8
   \   00024B   8010         SJMP    ??afBuildMSGIncoming_2
    515            }
    516            else
    517            {
    518              MSGpkt->cmd.Data = NULL;
   \                     ??afBuildMSGIncoming_1:
   \   00024D   EE           MOV     A,R6
   \   00024E   2422         ADD     A,#0x22
   \   000250   F582         MOV     DPL,A
   \   000252   E4           CLR     A
   \   000253   3F           ADDC    A,R7
   \   000254   F583         MOV     DPH,A
   \   000256   7400         MOV     A,#0x0
   \   000258   F0           MOVX    @DPTR,A
   \   000259   A3           INC     DPTR
   \   00025A   7400         MOV     A,#0x0
   \   00025C   F0           MOVX    @DPTR,A
    519            }
    520          
    521          #if defined ( MT_AF_CB_FUNC )
    522            // If ZDO or SAPI have registered for this endpoint, dont intercept it here
    523            if (AFCB_CHECK(CB_ID_AF_DATA_IND, *(epDesc->task_id)))
    524            {
    525              MT_AfIncomingMsg( (void *)MSGpkt );
    526              // Release the memory.
    527              osal_msg_deallocate( (void *)MSGpkt );
    528            }
    529            else
    530          #endif
    531            {
    532              // Send message through task message.
    533              osal_msg_send( *(epDesc->task_id), (uint8 *)MSGpkt );
   \                     ??afBuildMSGIncoming_2:
   \   00025D                ; Setup parameters for call to function osal_msg_send
   \   00025D   EE           MOV     A,R6
   \   00025E   FA           MOV     R2,A
   \   00025F   EF           MOV     A,R7
   \   000260   FB           MOV     R3,A
   \   000261   85..82       MOV     DPL,?V2
   \   000264   85..83       MOV     DPH,?V3
   \   000267   A3           INC     DPTR
   \   000268   E0           MOVX    A,@DPTR
   \   000269   F8           MOV     R0,A
   \   00026A   A3           INC     DPTR
   \   00026B   E0           MOVX    A,@DPTR
   \   00026C   F583         MOV     DPH,A
   \   00026E   8882         MOV     DPL,R0
   \   000270   E0           MOVX    A,@DPTR
   \   000271   F9           MOV     R1,A
   \   000272   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   000275   E9           MOV     A,R1
    534            }
    535          }
   \                     ??afBuildMSGIncoming_0:
   \   000276   7F0B         MOV     R7,#0xb
   \   000278   02....       LJMP    ?BANKED_LEAVE_XDATA
    536          
    537          /*********************************************************************
    538           * @fn      AF_DataRequest
    539           *
    540           * @brief   Common functionality for invoking APSDE_DataReq() for both
    541           *          SendMulti and MSG-Send.
    542           *
    543           * input parameters
    544           *
    545           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
    546           * @param  *srcEP - Origination (i.e. respond to or ack to) End Point Descr.
    547           * @param   cID - A valid cluster ID as specified by the Profile.
    548           * @param   len - Number of bytes of data pointed to by next param.
    549           * @param  *buf - A pointer to the data bytes to send.
    550           * @param  *transID - A pointer to a byte which can be modified and which will
    551           *                    be used as the transaction sequence number of the msg.
    552           * @param   options - Valid bit mask of Tx options.
    553           * @param   radius - Normally set to AF_DEFAULT_RADIUS.
    554           *
    555           * output parameters
    556           *
    557           * @param  *transID - Incremented by one if the return value is success.
    558           *
    559           * @return  afStatus_t - See previous definition of afStatus_... types.
    560           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    561          uint8 AF_DataRequestDiscoverRoute = DISC_ROUTE_NETWORK;
   \                     AF_DataRequestDiscoverRoute:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for AF_DataRequestDiscoverRoute>`
   \   000001                REQUIRE __INIT_XDATA_I
    562          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    563          afStatus_t AF_DataRequest( afAddrType_t *dstAddr, endPointDesc_t *srcEP,
   \                     AF_DataRequest:
    564                                     uint16 cID, uint16 len, uint8 *buf, uint8 *transID,
    565                                     uint8 options, uint8 radius )
    566          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 30
   \   000005   74E2         MOV     A,#-0x1e
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   \   000012   89..         MOV     ?V2,R1
    567            pDescCB pfnDescCB;
    568            ZStatus_t stat;
    569            APSDE_DataReq_t req;
    570            afDataReqMTU_t mtu;
    571            epList_t *pList;
    572          
    573            // Verify source end point
    574            if ( srcEP == NULL )
   \   000014   EE           MOV     A,R6
   \   000015   4F           ORL     A,R7
   \   000016   7005         JNZ     ??AF_DataRequest_0
    575            {
    576              return afStatus_INVALID_PARAMETER;
   \   000018   7902         MOV     R1,#0x2
   \   00001A   02....       LJMP    ??AF_DataRequest_1 & 0xFFFF
    577            }
    578          
    579          #if !defined( REFLECTOR )
    580            if ( dstAddr->addrMode == afAddrNotPresent )
    581            {
    582              return afStatus_INVALID_PARAMETER;
    583            }
    584          #endif
    585          
    586            // Check if route is available before sending data
    587            if ( options & AF_LIMIT_CONCENTRATOR  )
   \                     ??AF_DataRequest_0:
   \   00001D   E5..         MOV     A,?V2
   \   00001F   A2E3         MOV     C,0xE0 /* A   */.3
   \   000021   504C         JNC     ??AF_DataRequest_2
    588            {
    589              if ( dstAddr->addrMode != afAddr16Bit )
   \   000023   85..82       MOV     DPL,?V0
   \   000026   85..83       MOV     DPH,?V1
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   6402         XRL     A,#0x2
   \   000034   6005         JZ      ??AF_DataRequest_3
    590              {
    591                return ( afStatus_INVALID_PARAMETER );
   \   000036   7902         MOV     R1,#0x2
   \   000038   02....       LJMP    ??AF_DataRequest_1 & 0xFFFF
    592              }
    593          
    594              // First, make sure the destination is not its self, then check for an existing route.
    595              if ( (dstAddr->addr.shortAddr != NLME_GetShortAddr())
    596                  && (RTG_CheckRtStatus( dstAddr->addr.shortAddr, RT_ACTIVE, (MTO_ROUTE | NO_ROUTE_CACHE) ) != RTG_SUCCESS) )
   \                     ??AF_DataRequest_3:
   \   00003B                ; Setup parameters for call to function NLME_GetShortAddr
   \   00003B   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00003E   8A..         MOV     ?V4,R2
   \   000040   8B..         MOV     ?V5,R3
   \   000042   A8..         MOV     R0,?V4
   \   000044   A9..         MOV     R1,?V5
   \   000046   85..82       MOV     DPL,?V0
   \   000049   85..83       MOV     DPH,?V1
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   68           XRL     A,R0
   \   00004E   7003         JNZ     ??AF_DataRequest_4
   \   000050   A3           INC     DPTR
   \   000051   E0           MOVX    A,@DPTR
   \   000052   69           XRL     A,R1
   \                     ??AF_DataRequest_4:
   \   000053   601A         JZ      ??AF_DataRequest_2
   \   000055                ; Setup parameters for call to function RTG_CheckRtStatus
   \   000055   7C03         MOV     R4,#0x3
   \   000057   7901         MOV     R1,#0x1
   \   000059   85..82       MOV     DPL,?V0
   \   00005C   85..83       MOV     DPH,?V1
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   FA           MOV     R2,A
   \   000061   A3           INC     DPTR
   \   000062   E0           MOVX    A,@DPTR
   \   000063   FB           MOV     R3,A
   \   000064   12....       LCALL   `??RTG_CheckRtStatus::?relay`; Banked call to: RTG_CheckRtStatus
   \   000067   E9           MOV     A,R1
   \   000068   6005         JZ      ??AF_DataRequest_2
    597              {
    598                // A valid route to a concentrator wasn't found
    599                return ( afStatus_NO_ROUTE );
   \   00006A   79CD         MOV     R1,#-0x33
   \   00006C   02....       LJMP    ??AF_DataRequest_1 & 0xFFFF
    600              }
    601            }
    602          
    603            // Validate broadcasting
    604            if ( ( dstAddr->addrMode == afAddr16Bit     ) ||
    605                 ( dstAddr->addrMode == afAddrBroadcast )    )
   \                     ??AF_DataRequest_2:
   \   00006F   85..82       MOV     DPL,?V0
   \   000072   85..83       MOV     DPH,?V1
   \   000075   A3           INC     DPTR
   \   000076   A3           INC     DPTR
   \   000077   A3           INC     DPTR
   \   000078   A3           INC     DPTR
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   A3           INC     DPTR
   \   00007C   A3           INC     DPTR
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   6402         XRL     A,#0x2
   \   000080   6013         JZ      ??AF_DataRequest_5
   \   000082   85..82       MOV     DPL,?V0
   \   000085   85..83       MOV     DPH,?V1
   \   000088   A3           INC     DPTR
   \   000089   A3           INC     DPTR
   \   00008A   A3           INC     DPTR
   \   00008B   A3           INC     DPTR
   \   00008C   A3           INC     DPTR
   \   00008D   A3           INC     DPTR
   \   00008E   A3           INC     DPTR
   \   00008F   A3           INC     DPTR
   \   000090   E0           MOVX    A,@DPTR
   \   000091   640F         XRL     A,#0xf
   \   000093   7074         JNZ     ??AF_DataRequest_6
    606            {
    607              // Check for valid broadcast values
    608              if( ADDR_NOT_BCAST != NLME_IsAddressBroadcast( dstAddr->addr.shortAddr )  )
   \                     ??AF_DataRequest_5:
   \   000095                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   000095   85..82       MOV     DPL,?V0
   \   000098   85..83       MOV     DPH,?V1
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   FA           MOV     R2,A
   \   00009D   A3           INC     DPTR
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   FB           MOV     R3,A
   \   0000A0   12....       LCALL   `??NLME_IsAddressBroadcast::?relay`; Banked call to: NLME_IsAddressBroadcast
   \   0000A3   E9           MOV     A,R1
   \   0000A4   604B         JZ      ??AF_DataRequest_7
    609              {
    610                // Force mode to broadcast
    611                dstAddr->addrMode = afAddrBroadcast;
   \   0000A6   85..82       MOV     DPL,?V0
   \   0000A9   85..83       MOV     DPH,?V1
   \   0000AC   A3           INC     DPTR
   \   0000AD   A3           INC     DPTR
   \   0000AE   A3           INC     DPTR
   \   0000AF   A3           INC     DPTR
   \   0000B0   A3           INC     DPTR
   \   0000B1   A3           INC     DPTR
   \   0000B2   A3           INC     DPTR
   \   0000B3   A3           INC     DPTR
   \   0000B4   740F         MOV     A,#0xf
   \   0000B6   F0           MOVX    @DPTR,A
    612              }
    613              else
    614              {
    615                // Address is not a valid broadcast type
    616                if ( dstAddr->addrMode == afAddrBroadcast )
    617                {
    618                  return afStatus_INVALID_PARAMETER;
    619                }
    620              }
    621            }
    622            else if ( dstAddr->addrMode != afAddr64Bit &&
    623                      dstAddr->addrMode != afAddrGroup &&
    624                      dstAddr->addrMode != afAddrNotPresent )
    625            {
    626              return afStatus_INVALID_PARAMETER;
    627            }
    628          
    629            // Set destination address
    630            req.dstAddr.addrMode = dstAddr->addrMode;
   \                     ??AF_DataRequest_8:
   \   0000B7   85..82       MOV     DPL,?V0
   \   0000BA   85..83       MOV     DPH,?V1
   \   0000BD   A3           INC     DPTR
   \   0000BE   A3           INC     DPTR
   \   0000BF   A3           INC     DPTR
   \   0000C0   A3           INC     DPTR
   \   0000C1   A3           INC     DPTR
   \   0000C2   A3           INC     DPTR
   \   0000C3   A3           INC     DPTR
   \   0000C4   A3           INC     DPTR
   \   0000C5   E0           MOVX    A,@DPTR
   \   0000C6   C0E0         PUSH    A
   \   0000C8   740A         MOV     A,#0xa
   \   0000CA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CD   D0E0         POP     A
   \   0000CF   F0           MOVX    @DPTR,A
    631            if ( dstAddr->addrMode == afAddr64Bit )
   \   0000D0   85..82       MOV     DPL,?V0
   \   0000D3   85..83       MOV     DPH,?V1
   \   0000D6   A3           INC     DPTR
   \   0000D7   A3           INC     DPTR
   \   0000D8   A3           INC     DPTR
   \   0000D9   A3           INC     DPTR
   \   0000DA   A3           INC     DPTR
   \   0000DB   A3           INC     DPTR
   \   0000DC   A3           INC     DPTR
   \   0000DD   A3           INC     DPTR
   \   0000DE   E0           MOVX    A,@DPTR
   \   0000DF   6403         XRL     A,#0x3
   \   0000E1   7065         JNZ     ??AF_DataRequest_9
    632            {
    633              osal_cpyExtAddr( req.dstAddr.addr.extAddr, dstAddr->addr.extAddr );
   \   0000E3                ; Setup parameters for call to function sAddrExtCpy
   \   0000E3   AC..         MOV     R4,?V0
   \   0000E5   AD..         MOV     R5,?V1
   \   0000E7   7402         MOV     A,#0x2
   \   0000E9   12....       LCALL   ?XSTACK_DISP101_8
   \   0000EC   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0000EF   806C         SJMP    ??AF_DataRequest_10
    634            }
   \                     ??AF_DataRequest_7:
   \   0000F1   85..82       MOV     DPL,?V0
   \   0000F4   85..83       MOV     DPH,?V1
   \   0000F7   A3           INC     DPTR
   \   0000F8   A3           INC     DPTR
   \   0000F9   A3           INC     DPTR
   \   0000FA   A3           INC     DPTR
   \   0000FB   A3           INC     DPTR
   \   0000FC   A3           INC     DPTR
   \   0000FD   A3           INC     DPTR
   \   0000FE   A3           INC     DPTR
   \   0000FF   E0           MOVX    A,@DPTR
   \   000100   640F         XRL     A,#0xf
   \   000102   70B3         JNZ     ??AF_DataRequest_8
   \   000104   7902         MOV     R1,#0x2
   \   000106   02....       LJMP    ??AF_DataRequest_1 & 0xFFFF
   \                     ??AF_DataRequest_6:
   \   000109   85..82       MOV     DPL,?V0
   \   00010C   85..83       MOV     DPH,?V1
   \   00010F   A3           INC     DPTR
   \   000110   A3           INC     DPTR
   \   000111   A3           INC     DPTR
   \   000112   A3           INC     DPTR
   \   000113   A3           INC     DPTR
   \   000114   A3           INC     DPTR
   \   000115   A3           INC     DPTR
   \   000116   A3           INC     DPTR
   \   000117   E0           MOVX    A,@DPTR
   \   000118   6403         XRL     A,#0x3
   \   00011A   609B         JZ      ??AF_DataRequest_8
   \   00011C   85..82       MOV     DPL,?V0
   \   00011F   85..83       MOV     DPH,?V1
   \   000122   A3           INC     DPTR
   \   000123   A3           INC     DPTR
   \   000124   A3           INC     DPTR
   \   000125   A3           INC     DPTR
   \   000126   A3           INC     DPTR
   \   000127   A3           INC     DPTR
   \   000128   A3           INC     DPTR
   \   000129   A3           INC     DPTR
   \   00012A   E0           MOVX    A,@DPTR
   \   00012B   6401         XRL     A,#0x1
   \   00012D   6088         JZ      ??AF_DataRequest_8
   \   00012F   85..82       MOV     DPL,?V0
   \   000132   85..83       MOV     DPH,?V1
   \   000135   A3           INC     DPTR
   \   000136   A3           INC     DPTR
   \   000137   A3           INC     DPTR
   \   000138   A3           INC     DPTR
   \   000139   A3           INC     DPTR
   \   00013A   A3           INC     DPTR
   \   00013B   A3           INC     DPTR
   \   00013C   A3           INC     DPTR
   \   00013D   E0           MOVX    A,@DPTR
   \   00013E   7003         JNZ     $+5
   \   000140   02....       LJMP    ??AF_DataRequest_8 & 0xFFFF
   \   000143   7902         MOV     R1,#0x2
   \   000145   02....       LJMP    ??AF_DataRequest_1 & 0xFFFF
    635            else
    636            {
    637              req.dstAddr.addr.shortAddr = dstAddr->addr.shortAddr;
   \                     ??AF_DataRequest_9:
   \   000148   85..82       MOV     DPL,?V0
   \   00014B   85..83       MOV     DPH,?V1
   \   00014E   E0           MOVX    A,@DPTR
   \   00014F   F8           MOV     R0,A
   \   000150   A3           INC     DPTR
   \   000151   E0           MOVX    A,@DPTR
   \   000152   F9           MOV     R1,A
   \   000153   7402         MOV     A,#0x2
   \   000155   12....       LCALL   ?XSTACK_DISP0_8
   \   000158   E8           MOV     A,R0
   \   000159   F0           MOVX    @DPTR,A
   \   00015A   A3           INC     DPTR
   \   00015B   E9           MOV     A,R1
   \   00015C   F0           MOVX    @DPTR,A
    638            }
    639          
    640            // This option is to use Wildcard ProfileID in outgoing packets
    641            if ( options & AF_WILDCARD_PROFILEID )
   \                     ??AF_DataRequest_10:
   \   00015D   E5..         MOV     A,?V2
   \   00015F   A2E1         MOV     C,0xE0 /* A   */.1
   \   000161   500F         JNC     ??AF_DataRequest_11
    642            {
    643              req.profileID = ZDO_WILDCARD_PROFILE_ID;
   \   000163   7411         MOV     A,#0x11
   \   000165   12....       LCALL   ?XSTACK_DISP0_8
   \   000168   74FF         MOV     A,#-0x1
   \   00016A   F0           MOVX    @DPTR,A
   \   00016B   A3           INC     DPTR
   \   00016C   74FF         MOV     A,#-0x1
   \   00016E   F0           MOVX    @DPTR,A
   \   00016F   02....       LJMP    ??AF_DataRequest_12 & 0xFFFF
    644            }
    645            else
    646            {
    647              req.profileID = ZDO_PROFILE_ID;
   \                     ??AF_DataRequest_11:
   \   000172   7411         MOV     A,#0x11
   \   000174   12....       LCALL   ?XSTACK_DISP0_8
   \   000177   7400         MOV     A,#0x0
   \   000179   F0           MOVX    @DPTR,A
   \   00017A   A3           INC     DPTR
   \   00017B   7400         MOV     A,#0x0
   \   00017D   F0           MOVX    @DPTR,A
    648          
    649              if ( (pfnDescCB = afGetDescCB( srcEP )) )
   \   00017E                ; Setup parameters for call to function afGetDescCB
   \   00017E   EE           MOV     A,R6
   \   00017F   FA           MOV     R2,A
   \   000180   EF           MOV     A,R7
   \   000181   FB           MOV     R3,A
   \   000182   12....       LCALL   `??afGetDescCB::?relay`; Banked call to: afGetDescCB
   \   000185   8A..         MOV     ?V4,R2
   \   000187   8B..         MOV     ?V5,R3
   \   000189   A8..         MOV     R0,?V4
   \   00018B   A9..         MOV     R1,?V5
   \   00018D   E8           MOV     A,R0
   \   00018E   FC           MOV     R4,A
   \   00018F   E9           MOV     A,R1
   \   000190   FD           MOV     R5,A
   \   000191   E8           MOV     A,R0
   \   000192   49           ORL     A,R1
   \   000193   6033         JZ      ??AF_DataRequest_13
    650              {
    651                uint16 *pID = (uint16 *)(pfnDescCB (AF_DESCRIPTOR_PROFILE_ID, srcEP->endPoint ));
   \   000195                ; Setup parameters for indirect call
   \   000195   8E82         MOV     DPL,R6
   \   000197   8F83         MOV     DPH,R7
   \   000199   E0           MOVX    A,@DPTR
   \   00019A   FA           MOV     R2,A
   \   00019B   7902         MOV     R1,#0x2
   \   00019D   8C82         MOV     DPL,R4
   \   00019F   8D83         MOV     DPH,R5
   \   0001A1   12....       LCALL   ?CALL_IND
   \   0001A4   8A..         MOV     ?V4,R2
   \   0001A6   8B..         MOV     ?V5,R3
   \   0001A8   AA..         MOV     R2,?V4
   \   0001AA   AB..         MOV     R3,?V5
    652                if ( pID )
   \   0001AC   EA           MOV     A,R2
   \   0001AD   4B           ORL     A,R3
   \   0001AE   6047         JZ      ??AF_DataRequest_12
    653                {
    654                  req.profileID = *pID;
   \   0001B0   8A82         MOV     DPL,R2
   \   0001B2   8B83         MOV     DPH,R3
   \   0001B4   E0           MOVX    A,@DPTR
   \   0001B5   F8           MOV     R0,A
   \   0001B6   A3           INC     DPTR
   \   0001B7   E0           MOVX    A,@DPTR
   \   0001B8   F9           MOV     R1,A
   \   0001B9   7411         MOV     A,#0x11
   \   0001BB   12....       LCALL   ?XSTACK_DISP0_8
   \   0001BE   E8           MOV     A,R0
   \   0001BF   F0           MOVX    @DPTR,A
   \   0001C0   A3           INC     DPTR
   \   0001C1   E9           MOV     A,R1
   \   0001C2   F0           MOVX    @DPTR,A
    655                  osal_mem_free( pID );
   \   0001C3                ; Setup parameters for call to function osal_mem_free
   \   0001C3   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0001C6   802F         SJMP    ??AF_DataRequest_12
    656                }
    657              }
    658              else if ( srcEP->simpleDesc )
   \                     ??AF_DataRequest_13:
   \   0001C8   8E82         MOV     DPL,R6
   \   0001CA   8F83         MOV     DPH,R7
   \   0001CC   A3           INC     DPTR
   \   0001CD   A3           INC     DPTR
   \   0001CE   A3           INC     DPTR
   \   0001CF   E0           MOVX    A,@DPTR
   \   0001D0   F8           MOV     R0,A
   \   0001D1   A3           INC     DPTR
   \   0001D2   E0           MOVX    A,@DPTR
   \   0001D3   F9           MOV     R1,A
   \   0001D4   E8           MOV     A,R0
   \   0001D5   49           ORL     A,R1
   \   0001D6   601F         JZ      ??AF_DataRequest_12
    659              {
    660                req.profileID = srcEP->simpleDesc->AppProfId;
   \   0001D8   8E82         MOV     DPL,R6
   \   0001DA   8F83         MOV     DPH,R7
   \   0001DC   A3           INC     DPTR
   \   0001DD   A3           INC     DPTR
   \   0001DE   A3           INC     DPTR
   \   0001DF   E0           MOVX    A,@DPTR
   \   0001E0   F8           MOV     R0,A
   \   0001E1   A3           INC     DPTR
   \   0001E2   E0           MOVX    A,@DPTR
   \   0001E3   F583         MOV     DPH,A
   \   0001E5   8882         MOV     DPL,R0
   \   0001E7   A3           INC     DPTR
   \   0001E8   E0           MOVX    A,@DPTR
   \   0001E9   F8           MOV     R0,A
   \   0001EA   A3           INC     DPTR
   \   0001EB   E0           MOVX    A,@DPTR
   \   0001EC   F9           MOV     R1,A
   \   0001ED   7411         MOV     A,#0x11
   \   0001EF   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F2   E8           MOV     A,R0
   \   0001F3   F0           MOVX    @DPTR,A
   \   0001F4   A3           INC     DPTR
   \   0001F5   E9           MOV     A,R1
   \   0001F6   F0           MOVX    @DPTR,A
    661              }
    662            }
    663          
    664            req.txOptions = 0;
   \                     ??AF_DataRequest_12:
   \   0001F7   7417         MOV     A,#0x17
   \   0001F9   12....       LCALL   ?XSTACK_DISP0_8
   \   0001FC   7400         MOV     A,#0x0
   \   0001FE   F0           MOVX    @DPTR,A
   \   0001FF   A3           INC     DPTR
   \   000200   7400         MOV     A,#0x0
   \   000202   F0           MOVX    @DPTR,A
    665          
    666            if ( ( options & AF_ACK_REQUEST              ) &&
    667                 ( req.dstAddr.addrMode != AddrBroadcast ) &&
    668                 ( req.dstAddr.addrMode != AddrGroup     )   )
   \   000203   E5..         MOV     A,?V2
   \   000205   A2E4         MOV     C,0xE0 /* A   */.4
   \   000207   5022         JNC     ??AF_DataRequest_14
   \   000209   740A         MOV     A,#0xa
   \   00020B   12....       LCALL   ?XSTACK_DISP0_8
   \   00020E   E0           MOVX    A,@DPTR
   \   00020F   640F         XRL     A,#0xf
   \   000211   6018         JZ      ??AF_DataRequest_14
   \   000213   740A         MOV     A,#0xa
   \   000215   12....       LCALL   ?XSTACK_DISP0_8
   \   000218   E0           MOVX    A,@DPTR
   \   000219   6401         XRL     A,#0x1
   \   00021B   600E         JZ      ??AF_DataRequest_14
    669            {
    670              req.txOptions |=  APS_TX_OPTIONS_ACK;
   \   00021D   7417         MOV     A,#0x17
   \   00021F   12....       LCALL   ?XSTACK_DISP0_8
   \   000222   E0           MOVX    A,@DPTR
   \   000223   4404         ORL     A,#0x4
   \   000225   F0           MOVX    @DPTR,A
   \   000226   A3           INC     DPTR
   \   000227   E0           MOVX    A,@DPTR
   \   000228   4400         ORL     A,#0x0
   \   00022A   F0           MOVX    @DPTR,A
    671            }
    672          
    673            if ( options & AF_SKIP_ROUTING )
   \                     ??AF_DataRequest_14:
   \   00022B   E5..         MOV     A,?V2
   \   00022D   A2E7         MOV     C,0xE0 /* A   */.7
   \   00022F   500E         JNC     ??AF_DataRequest_15
    674            {
    675              req.txOptions |=  APS_TX_OPTIONS_SKIP_ROUTING;
   \   000231   7417         MOV     A,#0x17
   \   000233   12....       LCALL   ?XSTACK_DISP0_8
   \   000236   E0           MOVX    A,@DPTR
   \   000237   4410         ORL     A,#0x10
   \   000239   F0           MOVX    @DPTR,A
   \   00023A   A3           INC     DPTR
   \   00023B   E0           MOVX    A,@DPTR
   \   00023C   4400         ORL     A,#0x0
   \   00023E   F0           MOVX    @DPTR,A
    676            }
    677          
    678            if ( options & AF_EN_SECURITY )
   \                     ??AF_DataRequest_15:
   \   00023F   E5..         MOV     A,?V2
   \   000241   A2E6         MOV     C,0xE0 /* A   */.6
   \   000243   5018         JNC     ??AF_DataRequest_16
    679            {
    680              req.txOptions |= APS_TX_OPTIONS_SECURITY_ENABLE;
   \   000245   7417         MOV     A,#0x17
   \   000247   12....       LCALL   ?XSTACK_DISP0_8
   \   00024A   E0           MOVX    A,@DPTR
   \   00024B   4401         ORL     A,#0x1
   \   00024D   F0           MOVX    @DPTR,A
   \   00024E   A3           INC     DPTR
   \   00024F   E0           MOVX    A,@DPTR
   \   000250   4400         ORL     A,#0x0
   \   000252   F0           MOVX    @DPTR,A
    681              mtu.aps.secure = TRUE;
   \   000253   7401         MOV     A,#0x1
   \   000255   12....       LCALL   ?XSTACK_DISP0_8
   \   000258   7401         MOV     A,#0x1
   \   00025A   F0           MOVX    @DPTR,A
   \   00025B   8008         SJMP    ??AF_DataRequest_17
    682            }
    683            else
    684            {
    685              mtu.aps.secure = FALSE;
   \                     ??AF_DataRequest_16:
   \   00025D   7401         MOV     A,#0x1
   \   00025F   12....       LCALL   ?XSTACK_DISP0_8
   \   000262   7400         MOV     A,#0x0
   \   000264   F0           MOVX    @DPTR,A
    686            }
    687          
    688            if ( options & AF_PREPROCESS )
   \                     ??AF_DataRequest_17:
   \   000265   E5..         MOV     A,?V2
   \   000267   A2E2         MOV     C,0xE0 /* A   */.2
   \   000269   500E         JNC     ??AF_DataRequest_18
    689            {
    690              req.txOptions |=  APS_TX_OPTIONS_PREPROCESS;
   \   00026B   7417         MOV     A,#0x17
   \   00026D   12....       LCALL   ?XSTACK_DISP0_8
   \   000270   E0           MOVX    A,@DPTR
   \   000271   4440         ORL     A,#0x40
   \   000273   F0           MOVX    @DPTR,A
   \   000274   A3           INC     DPTR
   \   000275   E0           MOVX    A,@DPTR
   \   000276   4400         ORL     A,#0x0
   \   000278   F0           MOVX    @DPTR,A
    691            }
    692          
    693            mtu.kvp = FALSE;
   \                     ??AF_DataRequest_18:
   \   000279   85..82       MOV     DPL,?XSP + 0
   \   00027C   85..83       MOV     DPH,?XSP + 1
   \   00027F   7400         MOV     A,#0x0
   \   000281   F0           MOVX    @DPTR,A
    694          
    695            if ( options & AF_SUPRESS_ROUTE_DISC_NETWORK )
   \   000282   E5..         MOV     A,?V2
   \   000284   A2E5         MOV     C,0xE0 /* A   */.5
   \   000286   500A         JNC     ??AF_DataRequest_19
    696            {
    697              req.discoverRoute = DISC_ROUTE_INITIATE;
   \   000288   741A         MOV     A,#0x1a
   \   00028A   12....       LCALL   ?XSTACK_DISP0_8
   \   00028D   7404         MOV     A,#0x4
   \   00028F   F0           MOVX    @DPTR,A
   \   000290   800E         SJMP    ??AF_DataRequest_20
    698            }
    699            else
    700            {
    701              req.discoverRoute = AF_DataRequestDiscoverRoute;
   \                     ??AF_DataRequest_19:
   \   000292   90....       MOV     DPTR,#AF_DataRequestDiscoverRoute
   \   000295   E0           MOVX    A,@DPTR
   \   000296   C0E0         PUSH    A
   \   000298   741A         MOV     A,#0x1a
   \   00029A   12....       LCALL   ?XSTACK_DISP0_8
   \   00029D   D0E0         POP     A
   \   00029F   F0           MOVX    @DPTR,A
   \                     ??AF_DataRequest_20:
   \   0002A0   7434         MOV     A,#0x34
   \   0002A2   12....       LCALL   ?XSTACK_DISP0_8
   \   0002A5   E0           MOVX    A,@DPTR
   \   0002A6   F5..         MOV     ?V4,A
   \   0002A8   A3           INC     DPTR
   \   0002A9   E0           MOVX    A,@DPTR
   \   0002AA   F5..         MOV     ?V5,A
    702            }
    703          
    704            req.transID       = *transID;
   \   0002AC   85..82       MOV     DPL,?V4
   \   0002AF   85..83       MOV     DPH,?V5
   \   0002B2   E0           MOVX    A,@DPTR
   \   0002B3   C0E0         PUSH    A
   \   0002B5   7419         MOV     A,#0x19
   \   0002B7   12....       LCALL   ?XSTACK_DISP0_8
   \   0002BA   D0E0         POP     A
   \   0002BC   F0           MOVX    @DPTR,A
    705            req.srcEP         = srcEP->endPoint;
   \   0002BD   8E82         MOV     DPL,R6
   \   0002BF   8F83         MOV     DPH,R7
   \   0002C1   E0           MOVX    A,@DPTR
   \   0002C2   C0E0         PUSH    A
   \   0002C4   740B         MOV     A,#0xb
   \   0002C6   12....       LCALL   ?XSTACK_DISP0_8
   \   0002C9   D0E0         POP     A
   \   0002CB   F0           MOVX    @DPTR,A
    706            req.dstEP         = dstAddr->endPoint;
   \   0002CC   85..82       MOV     DPL,?V0
   \   0002CF   85..83       MOV     DPH,?V1
   \   0002D2   A3           INC     DPTR
   \   0002D3   A3           INC     DPTR
   \   0002D4   A3           INC     DPTR
   \   0002D5   A3           INC     DPTR
   \   0002D6   A3           INC     DPTR
   \   0002D7   A3           INC     DPTR
   \   0002D8   A3           INC     DPTR
   \   0002D9   A3           INC     DPTR
   \   0002DA   A3           INC     DPTR
   \   0002DB   E0           MOVX    A,@DPTR
   \   0002DC   C0E0         PUSH    A
   \   0002DE   740C         MOV     A,#0xc
   \   0002E0   12....       LCALL   ?XSTACK_DISP0_8
   \   0002E3   D0E0         POP     A
   \   0002E5   F0           MOVX    @DPTR,A
    707            req.clusterID     = cID;
   \   0002E6   742E         MOV     A,#0x2e
   \   0002E8   12....       LCALL   ?XSTACK_DISP0_8
   \   0002EB   E0           MOVX    A,@DPTR
   \   0002EC   F8           MOV     R0,A
   \   0002ED   A3           INC     DPTR
   \   0002EE   E0           MOVX    A,@DPTR
   \   0002EF   F9           MOV     R1,A
   \   0002F0   740F         MOV     A,#0xf
   \   0002F2   12....       LCALL   ?XSTACK_DISP0_8
   \   0002F5   E8           MOV     A,R0
   \   0002F6   F0           MOVX    @DPTR,A
   \   0002F7   A3           INC     DPTR
   \   0002F8   E9           MOV     A,R1
   \   0002F9   F0           MOVX    @DPTR,A
   \   0002FA   7430         MOV     A,#0x30
   \   0002FC   12....       LCALL   ?XSTACK_DISP0_8
   \   0002FF   E0           MOVX    A,@DPTR
   \   000300   F5..         MOV     ?V0,A
   \   000302   A3           INC     DPTR
   \   000303   E0           MOVX    A,@DPTR
   \   000304   F5..         MOV     ?V1,A
    708            req.asduLen       = len;
   \   000306   7413         MOV     A,#0x13
   \   000308   12....       LCALL   ?XSTACK_DISP0_8
   \   00030B   E5..         MOV     A,?V0
   \   00030D   F0           MOVX    @DPTR,A
   \   00030E   A3           INC     DPTR
   \   00030F   E5..         MOV     A,?V1
   \   000311   F0           MOVX    @DPTR,A
    709            req.asdu          = buf;
   \   000312   7432         MOV     A,#0x32
   \   000314   12....       LCALL   ?XSTACK_DISP0_8
   \   000317   E0           MOVX    A,@DPTR
   \   000318   F8           MOV     R0,A
   \   000319   A3           INC     DPTR
   \   00031A   E0           MOVX    A,@DPTR
   \   00031B   F9           MOV     R1,A
   \   00031C   7415         MOV     A,#0x15
   \   00031E   12....       LCALL   ?XSTACK_DISP0_8
   \   000321   E8           MOV     A,R0
   \   000322   F0           MOVX    @DPTR,A
   \   000323   A3           INC     DPTR
   \   000324   E9           MOV     A,R1
   \   000325   F0           MOVX    @DPTR,A
    710            req.radiusCounter = radius;
   \   000326   7436         MOV     A,#0x36
   \   000328   12....       LCALL   ?XSTACK_DISP0_8
   \   00032B   E0           MOVX    A,@DPTR
   \   00032C   C0E0         PUSH    A
   \   00032E   741B         MOV     A,#0x1b
   \   000330   12....       LCALL   ?XSTACK_DISP0_8
   \   000333   D0E0         POP     A
   \   000335   F0           MOVX    @DPTR,A
    711          #if defined ( INTER_PAN )
    712            req.dstPanId      = dstAddr->panId;
    713          #endif // INTER_PAN
    714          
    715            // Look if there is a Callback function registered for this endpoint
    716            // The callback is used to control the AF Transaction ID used when sending messages
    717            pList = afFindEndPointDescList( srcEP->endPoint );
   \   000336                ; Setup parameters for call to function afFindEndPointDescList
   \   000336   8E82         MOV     DPL,R6
   \   000338   8F83         MOV     DPH,R7
   \   00033A   E0           MOVX    A,@DPTR
   \   00033B   F9           MOV     R1,A
   \   00033C   12....       LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   00033F   8A..         MOV     ?V6,R2
   \   000341   8B..         MOV     ?V7,R3
   \   000343   AC..         MOV     R4,?V6
   \   000345   AD..         MOV     R5,?V7
    718          
    719            if ( ( pList != NULL ) && ( pList->pfnApplCB != NULL ) )
   \   000347   EC           MOV     A,R4
   \   000348   4D           ORL     A,R5
   \   000349   6033         JZ      ??AF_DataRequest_21
   \   00034B   8C82         MOV     DPL,R4
   \   00034D   8D83         MOV     DPH,R5
   \   00034F   A3           INC     DPTR
   \   000350   A3           INC     DPTR
   \   000351   A3           INC     DPTR
   \   000352   A3           INC     DPTR
   \   000353   A3           INC     DPTR
   \   000354   A3           INC     DPTR
   \   000355   A3           INC     DPTR
   \   000356   A3           INC     DPTR
   \   000357   A3           INC     DPTR
   \   000358   E0           MOVX    A,@DPTR
   \   000359   F8           MOV     R0,A
   \   00035A   A3           INC     DPTR
   \   00035B   E0           MOVX    A,@DPTR
   \   00035C   F9           MOV     R1,A
   \   00035D   E8           MOV     A,R0
   \   00035E   49           ORL     A,R1
   \   00035F   601D         JZ      ??AF_DataRequest_21
    720            {
    721              pList->pfnApplCB( &req );
   \   000361                ; Setup parameters for indirect call
   \   000361   7402         MOV     A,#0x2
   \   000363   12....       LCALL   ?XSTACK_DISP101_8
   \   000366   8C82         MOV     DPL,R4
   \   000368   8D83         MOV     DPH,R5
   \   00036A   A3           INC     DPTR
   \   00036B   A3           INC     DPTR
   \   00036C   A3           INC     DPTR
   \   00036D   A3           INC     DPTR
   \   00036E   A3           INC     DPTR
   \   00036F   A3           INC     DPTR
   \   000370   A3           INC     DPTR
   \   000371   A3           INC     DPTR
   \   000372   A3           INC     DPTR
   \   000373   E0           MOVX    A,@DPTR
   \   000374   F8           MOV     R0,A
   \   000375   A3           INC     DPTR
   \   000376   E0           MOVX    A,@DPTR
   \   000377   F583         MOV     DPH,A
   \   000379   8882         MOV     DPL,R0
   \   00037B   12....       LCALL   ?CALL_IND
    722            }
    723          
    724          #if defined ( INTER_PAN )
    725            if ( StubAPS_InterPan( dstAddr->panId, dstAddr->endPoint ) )
    726            {
    727              if ( len > INTERP_DataReqMTU() )
    728              {
    729                stat = afStatus_INVALID_PARAMETER;
    730              }
    731              else
    732              {
    733                stat = INTERP_DataReq( &req );
    734              }
    735            }
    736            else
    737          #endif // INTER_PAN
    738            {
    739              if (len > afDataReqMTU( &mtu ) )
   \                     ??AF_DataRequest_21:
   \   00037E                ; Setup parameters for call to function afDataReqMTU
   \   00037E   AA..         MOV     R2,?XSP + 0
   \   000380   AB..         MOV     R3,?XSP + 1
   \   000382   12....       LCALL   `??afDataReqMTU::?relay`; Banked call to: afDataReqMTU
   \   000385   E9           MOV     A,R1
   \   000386   F8           MOV     R0,A
   \   000387   7900         MOV     R1,#0x0
   \   000389   C3           CLR     C
   \   00038A   E8           MOV     A,R0
   \   00038B   95..         SUBB    A,?V0
   \   00038D   E9           MOV     A,R1
   \   00038E   95..         SUBB    A,?V1
   \   000390   5029         JNC     ??AF_DataRequest_22
    740              {
    741                if (apsfSendFragmented)
   \   000392   90....       MOV     DPTR,#apsfSendFragmented
   \   000395   E0           MOVX    A,@DPTR
   \   000396   F8           MOV     R0,A
   \   000397   A3           INC     DPTR
   \   000398   E0           MOVX    A,@DPTR
   \   000399   F9           MOV     R1,A
   \   00039A   E8           MOV     A,R0
   \   00039B   49           ORL     A,R1
   \   00039C   6018         JZ      ??AF_DataRequest_23
    742                {
    743                  stat = (*apsfSendFragmented)( &req );
   \   00039E                ; Setup parameters for indirect call
   \   00039E   7402         MOV     A,#0x2
   \   0003A0   12....       LCALL   ?XSTACK_DISP101_8
   \   0003A3   90....       MOV     DPTR,#apsfSendFragmented
   \   0003A6   E0           MOVX    A,@DPTR
   \   0003A7   F8           MOV     R0,A
   \   0003A8   A3           INC     DPTR
   \   0003A9   E0           MOVX    A,@DPTR
   \   0003AA   F583         MOV     DPH,A
   \   0003AC   8882         MOV     DPL,R0
   \   0003AE   12....       LCALL   ?CALL_IND
   \   0003B1   E9           MOV     A,R1
   \   0003B2   F5..         MOV     ?V0,A
   \   0003B4   8010         SJMP    ??AF_DataRequest_24
    744                }
    745                else
    746                {
    747                  stat = afStatus_INVALID_PARAMETER;
   \                     ??AF_DataRequest_23:
   \   0003B6   75..02       MOV     ?V0,#0x2
   \   0003B9   800B         SJMP    ??AF_DataRequest_24
    748                }
    749              }
    750              else
    751              {
    752                stat = APSDE_DataReq( &req );
   \                     ??AF_DataRequest_22:
   \   0003BB                ; Setup parameters for call to function APSDE_DataReq
   \   0003BB   7402         MOV     A,#0x2
   \   0003BD   12....       LCALL   ?XSTACK_DISP101_8
   \   0003C0   12....       LCALL   `??APSDE_DataReq::?relay`; Banked call to: APSDE_DataReq
   \   0003C3   E9           MOV     A,R1
   \   0003C4   F5..         MOV     ?V0,A
    753              }
    754            }
    755          
    756            /*
    757             * If this is an EndPoint-to-EndPoint message on the same device, it will not
    758             * get added to the NWK databufs. So it will not go OTA and it will not get
    759             * a MACCB_DATA_CONFIRM_CMD callback. Thus it is necessary to generate the
    760             * AF_DATA_CONFIRM_CMD here. Note that APSDE_DataConfirm() only generates one
    761             * message with the first in line TransSeqNumber, even on a multi message.
    762             * Also note that a reflected msg will not have its confirmation generated
    763             * here.
    764             */
    765            if ( (req.dstAddr.addrMode == Addr16Bit) &&
    766                 (req.dstAddr.addr.shortAddr == NLME_GetShortAddr()) )
   \                     ??AF_DataRequest_24:
   \   0003C6   740A         MOV     A,#0xa
   \   0003C8   12....       LCALL   ?XSTACK_DISP0_8
   \   0003CB   E0           MOVX    A,@DPTR
   \   0003CC   6402         XRL     A,#0x2
   \   0003CE   702C         JNZ     ??AF_DataRequest_25
   \   0003D0                ; Setup parameters for call to function NLME_GetShortAddr
   \   0003D0   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   0003D3   8A..         MOV     ?V6,R2
   \   0003D5   8B..         MOV     ?V7,R3
   \   0003D7   A8..         MOV     R0,?V6
   \   0003D9   A9..         MOV     R1,?V7
   \   0003DB   7402         MOV     A,#0x2
   \   0003DD   12....       LCALL   ?XSTACK_DISP0_8
   \   0003E0   E0           MOVX    A,@DPTR
   \   0003E1   68           XRL     A,R0
   \   0003E2   7003         JNZ     ??AF_DataRequest_26
   \   0003E4   A3           INC     DPTR
   \   0003E5   E0           MOVX    A,@DPTR
   \   0003E6   69           XRL     A,R1
   \                     ??AF_DataRequest_26:
   \   0003E7   7013         JNZ     ??AF_DataRequest_25
    767            {
    768              afDataConfirm( srcEP->endPoint, *transID, stat );
   \   0003E9                ; Setup parameters for call to function afDataConfirm
   \   0003E9   AB..         MOV     R3,?V0
   \   0003EB   85..82       MOV     DPL,?V4
   \   0003EE   85..83       MOV     DPH,?V5
   \   0003F1   E0           MOVX    A,@DPTR
   \   0003F2   FA           MOV     R2,A
   \   0003F3   8E82         MOV     DPL,R6
   \   0003F5   8F83         MOV     DPH,R7
   \   0003F7   E0           MOVX    A,@DPTR
   \   0003F8   F9           MOV     R1,A
   \   0003F9   12....       LCALL   `??afDataConfirm::?relay`; Banked call to: afDataConfirm
    769            }
    770          
    771            if ( stat == afStatus_SUCCESS )
   \                     ??AF_DataRequest_25:
   \   0003FC   E5..         MOV     A,?V0
   \   0003FE   700A         JNZ     ??AF_DataRequest_27
    772            {
    773              (*transID)++;
   \   000400   85..82       MOV     DPL,?V4
   \   000403   85..83       MOV     DPH,?V5
   \   000406   E0           MOVX    A,@DPTR
   \   000407   2401         ADD     A,#0x1
   \   000409   F0           MOVX    @DPTR,A
    774            }
    775          
    776            return (afStatus_t)stat;
   \                     ??AF_DataRequest_27:
   \   00040A   A9..         MOV     R1,?V0
   \                     ??AF_DataRequest_1:
   \   00040C   741E         MOV     A,#0x1e
   \   00040E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000411   7F08         MOV     R7,#0x8
   \   000413   02....       LJMP    ?BANKED_LEAVE_XDATA
    777          }
    778          
    779          #if defined ( ZIGBEE_SOURCE_ROUTING )
    780          /*********************************************************************
    781           * @fn      AF_DataRequestSrcRtg
    782           *
    783           * @brief   Common functionality for invoking APSDE_DataReq() for both
    784           *          SendMulti and MSG-Send.
    785           *
    786           * input parameters
    787           *
    788           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
    789           * @param  *srcEP - Origination (i.e. respond to or ack to) End Point Descr.
    790           * @param   cID - A valid cluster ID as specified by the Profile.
    791           * @param   len - Number of bytes of data pointed to by next param.
    792           * @param  *buf - A pointer to the data bytes to send.
    793           * @param  *transID - A pointer to a byte which can be modified and which will
    794           *                    be used as the transaction sequence number of the msg.
    795           * @param   options - Valid bit mask of Tx options.
    796           * @param   radius - Normally set to AF_DEFAULT_RADIUS.
    797           * @param   relayCnt - Number of devices in the relay list
    798           * @param   pRelayList - Pointer to the relay list
    799           *
    800           * output parameters
    801           *
    802           * @param  *transID - Incremented by one if the return value is success.
    803           *
    804           * @return  afStatus_t - See previous definition of afStatus_... types.
    805           */
    806          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    807          afStatus_t AF_DataRequestSrcRtg( afAddrType_t *dstAddr, endPointDesc_t *srcEP,
   \                     AF_DataRequestSrcRtg:
    808                                     uint16 cID, uint16 len, uint8 *buf, uint8 *transID,
    809                                     uint8 options, uint8 radius, uint8 relayCnt, uint16* pRelayList )
    810          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
   \   00000D   89..         MOV     ?V2,R1
    811            uint8 status;
    812          
    813            /* Add the source route to the source routing table */
    814            status = RTG_AddSrcRtgEntry_Guaranteed( dstAddr->addr.shortAddr, relayCnt,
    815                                                    pRelayList );
   \   00000F                ; Setup parameters for call to function RTG_AddSrcRtgEntry_Guaranteed
   \   00000F   7416         MOV     A,#0x16
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   FC           MOV     R4,A
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   FD           MOV     R5,A
   \   000019   7415         MOV     A,#0x15
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F9           MOV     R1,A
   \   000020   8E82         MOV     DPL,R6
   \   000022   8F83         MOV     DPH,R7
   \   000024   E0           MOVX    A,@DPTR
   \   000025   FA           MOV     R2,A
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   FB           MOV     R3,A
   \   000029   12....       LCALL   `??RTG_AddSrcRtgEntry_Guaranteed::?relay`; Banked call to: RTG_AddSrcRtgEntry_Guaranteed
   \   00002C   E9           MOV     A,R1
   \   00002D   F9           MOV     R1,A
    816          
    817            if( status == RTG_SUCCESS )
   \   00002E   E9           MOV     A,R1
   \   00002F   7043         JNZ     ??AF_DataRequestSrcRtg_0
    818            {
    819              /* Call AF_DataRequest to send the data */
    820              status = AF_DataRequest( dstAddr, srcEP, cID, len, buf, transID, options, radius );
   \   000031                ; Setup parameters for call to function AF_DataRequest
   \   000031   7414         MOV     A,#0x14
   \   000033   12....       LCALL   ?XSTACK_DISP0_8
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F5..         MOV     ?V3,A
   \   000039   78..         MOV     R0,#?V3
   \   00003B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00003E   7413         MOV     A,#0x13
   \   000040   12....       LCALL   ?XSTACK_DISP0_8
   \   000043   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000046   7413         MOV     A,#0x13
   \   000048   12....       LCALL   ?XSTACK_DISP0_8
   \   00004B   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00004E   7413         MOV     A,#0x13
   \   000050   12....       LCALL   ?XSTACK_DISP0_8
   \   000053   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000056   7413         MOV     A,#0x13
   \   000058   12....       LCALL   ?XSTACK_DISP0_8
   \   00005B   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00005E   A9..         MOV     R1,?V2
   \   000060   AC..         MOV     R4,?V0
   \   000062   AD..         MOV     R5,?V1
   \   000064   EE           MOV     A,R6
   \   000065   FA           MOV     R2,A
   \   000066   EF           MOV     A,R7
   \   000067   FB           MOV     R3,A
   \   000068   12....       LCALL   `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   00006B   7409         MOV     A,#0x9
   \   00006D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000070   E9           MOV     A,R1
   \   000071   F9           MOV     R1,A
   \   000072   800B         SJMP    ??AF_DataRequestSrcRtg_1
    821            }
    822            else if( status == RTG_INVALID_PATH )
   \                     ??AF_DataRequestSrcRtg_0:
   \   000074   7405         MOV     A,#0x5
   \   000076   69           XRL     A,R1
   \   000077   7004         JNZ     ??AF_DataRequestSrcRtg_2
    823            {
    824              /* The source route relay count is exceeding the network limit */
    825              status = afStatus_INVALID_PARAMETER;
   \   000079   7902         MOV     R1,#0x2
   \   00007B   8002         SJMP    ??AF_DataRequestSrcRtg_1
    826            }
    827            else
    828            {
    829              /* The guaranteed adding entry fails due to memory failure */
    830              status = afStatus_MEM_FAIL;
   \                     ??AF_DataRequestSrcRtg_2:
   \   00007D   7910         MOV     R1,#0x10
    831            }
    832            return status;
   \                     ??AF_DataRequestSrcRtg_1:
   \   00007F   7F04         MOV     R7,#0x4
   \   000081   02....       LJMP    ?BANKED_LEAVE_XDATA
    833          }
    834          
    835          #endif
    836          
    837          /*********************************************************************
    838           * @fn      afFindEndPointDescList
    839           *
    840           * @brief   Find the endpoint description entry from the endpoint
    841           *          number.
    842           *
    843           * @param   EndPoint - Application Endpoint to look for
    844           *
    845           * @return  the address to the endpoint/interface description entry
    846           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    847          static epList_t *afFindEndPointDescList( uint8 EndPoint )
   \                     afFindEndPointDescList:
    848          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    849            epList_t *epSearch;
    850          
    851            for (epSearch = epList; epSearch != NULL; epSearch = epSearch->nextDesc)
   \   000004   90....       MOV     DPTR,#epList
   \   000007   E0           MOVX    A,@DPTR
   \   000008   FA           MOV     R2,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   FB           MOV     R3,A
   \   00000C   8009         SJMP    ??afFindEndPointDescList_0
   \                     ??afFindEndPointDescList_1:
   \   00000E   8A82         MOV     DPL,R2
   \   000010   8B83         MOV     DPH,R3
   \   000012   E0           MOVX    A,@DPTR
   \   000013   FA           MOV     R2,A
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   FB           MOV     R3,A
   \                     ??afFindEndPointDescList_0:
   \   000017   EA           MOV     A,R2
   \   000018   4B           ORL     A,R3
   \   000019   6012         JZ      ??afFindEndPointDescList_2
    852            {
    853              if (epSearch->epDesc->endPoint == EndPoint)
   \   00001B   8A82         MOV     DPL,R2
   \   00001D   8B83         MOV     DPH,R3
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   F8           MOV     R0,A
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F583         MOV     DPH,A
   \   000027   8882         MOV     DPL,R0
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   69           XRL     A,R1
   \   00002B   70E1         JNZ     ??afFindEndPointDescList_1
    854              {
    855                break;
    856              }
    857            }
    858          
    859            return epSearch;
   \                     ??afFindEndPointDescList_2:
   \   00002D   D083         POP     DPH
   \   00002F   D082         POP     DPL
   \   000031   02....       LJMP    ?BRET
    860          }
    861          
    862          /*********************************************************************
    863           * @fn      afFindEndPointDesc
    864           *
    865           * @brief   Find the endpoint description entry from the endpoint
    866           *          number.
    867           *
    868           * @param   EndPoint - Application Endpoint to look for
    869           *
    870           * @return  the address to the endpoint/interface description entry
    871           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    872          endPointDesc_t *afFindEndPointDesc( uint8 EndPoint )
   \                     afFindEndPointDesc:
    873          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    874            epList_t *epSearch;
    875          
    876            // Look for the endpoint
    877            epSearch = afFindEndPointDescList( EndPoint );
   \   000007                ; Setup parameters for call to function afFindEndPointDescList
   \   000007   EE           MOV     A,R6
   \   000008   F9           MOV     R1,A
   \   000009   12....       LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   00000C   8A..         MOV     ?V0,R2
   \   00000E   8B..         MOV     ?V1,R3
   \   000010   85..82       MOV     DPL,?V0
   \   000013   85..83       MOV     DPH,?V1
    878          
    879            if ( epSearch )
   \   000016   E582         MOV     A,DPL
   \   000018   4583         ORL     A,DPH
   \   00001A   6009         JZ      ??afFindEndPointDesc_0
    880              return ( epSearch->epDesc );
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   FA           MOV     R2,A
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   FB           MOV     R3,A
   \   000023   8004         SJMP    ??afFindEndPointDesc_1
    881            else
    882              return ( (endPointDesc_t *)NULL );
   \                     ??afFindEndPointDesc_0:
   \   000025   7A00         MOV     R2,#0x0
   \   000027   7B00         MOV     R3,#0x0
   \                     ??afFindEndPointDesc_1:
   \   000029   7F02         MOV     R7,#0x2
   \   00002B   02....       LJMP    ?BANKED_LEAVE_XDATA
    883          }
    884          
    885          /*********************************************************************
    886           * @fn      afFindSimpleDesc
    887           *
    888           * @brief   Find the Simple Descriptor from the endpoint number.
    889           *
    890           * @param   EP - Application Endpoint to look for.
    891           *
    892           * @return  Non-zero to indicate that the descriptor memory must be freed.
    893           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    894          uint8 afFindSimpleDesc( SimpleDescriptionFormat_t **ppDesc, uint8 EP )
   \                     afFindSimpleDesc:
    895          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V0,R1
    896            epList_t *epItem = afFindEndPointDescList( EP );
   \   00000B                ; Setup parameters for call to function afFindEndPointDescList
   \   00000B   A9..         MOV     R1,?V0
   \   00000D   12....       LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   000010   8A..         MOV     ?V2,R2
   \   000012   8B..         MOV     ?V3,R3
   \   000014   AC..         MOV     R4,?V2
   \   000016   AD..         MOV     R5,?V3
    897            uint8 rtrn = FALSE;
   \   000018   7900         MOV     R1,#0x0
    898          
    899            if ( epItem )
   \   00001A   EC           MOV     A,R4
   \   00001B   4D           ORL     A,R5
   \   00001C   6056         JZ      ??afFindSimpleDesc_0
    900            {
    901              if ( epItem->pfnDescCB )
   \   00001E   8C82         MOV     DPL,R4
   \   000020   8D83         MOV     DPH,R5
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   FA           MOV     R2,A
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   FB           MOV     R3,A
   \   00002B   EA           MOV     A,R2
   \   00002C   4B           ORL     A,R3
   \   00002D   6024         JZ      ??afFindSimpleDesc_1
    902              {
    903                *ppDesc = epItem->pfnDescCB( AF_DESCRIPTOR_SIMPLE, EP );
   \   00002F                ; Setup parameters for indirect call
   \   00002F   AA..         MOV     R2,?V0
   \   000031   7901         MOV     R1,#0x1
   \   000033   8C82         MOV     DPL,R4
   \   000035   8D83         MOV     DPH,R5
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   F8           MOV     R0,A
   \   00003D   A3           INC     DPTR
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   F583         MOV     DPH,A
   \   000041   8882         MOV     DPL,R0
   \   000043   12....       LCALL   ?CALL_IND
   \   000046   8E82         MOV     DPL,R6
   \   000048   8F83         MOV     DPH,R7
   \   00004A   EA           MOV     A,R2
   \   00004B   F0           MOVX    @DPTR,A
   \   00004C   A3           INC     DPTR
   \   00004D   EB           MOV     A,R3
   \   00004E   F0           MOVX    @DPTR,A
    904                rtrn = TRUE;
   \   00004F   7901         MOV     R1,#0x1
   \   000051   802C         SJMP    ??afFindSimpleDesc_2
    905              }
    906              else
    907              {
    908                *ppDesc = epItem->epDesc->simpleDesc;
   \                     ??afFindSimpleDesc_1:
   \   000053   8C82         MOV     DPL,R4
   \   000055   8D83         MOV     DPH,R5
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   F8           MOV     R0,A
   \   00005B   A3           INC     DPTR
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   F583         MOV     DPH,A
   \   00005F   8882         MOV     DPL,R0
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   A3           INC     DPTR
   \   000064   E0           MOVX    A,@DPTR
   \   000065   FA           MOV     R2,A
   \   000066   A3           INC     DPTR
   \   000067   E0           MOVX    A,@DPTR
   \   000068   FB           MOV     R3,A
   \   000069   8E82         MOV     DPL,R6
   \   00006B   8F83         MOV     DPH,R7
   \   00006D   EA           MOV     A,R2
   \   00006E   F0           MOVX    @DPTR,A
   \   00006F   A3           INC     DPTR
   \   000070   EB           MOV     A,R3
   \   000071   F0           MOVX    @DPTR,A
   \   000072   800B         SJMP    ??afFindSimpleDesc_2
    909              }
    910            }
    911            else
    912            {
    913              *ppDesc = NULL;
   \                     ??afFindSimpleDesc_0:
   \   000074   8E82         MOV     DPL,R6
   \   000076   8F83         MOV     DPH,R7
   \   000078   7400         MOV     A,#0x0
   \   00007A   F0           MOVX    @DPTR,A
   \   00007B   A3           INC     DPTR
   \   00007C   7400         MOV     A,#0x0
   \   00007E   F0           MOVX    @DPTR,A
    914            }
    915          
    916            return rtrn;
   \                     ??afFindSimpleDesc_2:
   \   00007F   7F04         MOV     R7,#0x4
   \   000081   02....       LJMP    ?BANKED_LEAVE_XDATA
    917          }
    918          
    919          /*********************************************************************
    920           * @fn      afGetDescCB
    921           *
    922           * @brief   Get the Descriptor callback function.
    923           *
    924           * @param   epDesc - pointer to the endpoint descriptor
    925           *
    926           * @return  function pointer or NULL
    927           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    928          static pDescCB afGetDescCB( endPointDesc_t *epDesc )
   \                     afGetDescCB:
    929          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    930            epList_t *epSearch;
    931          
    932            // Start at the beginning
    933            epSearch = epList;
   \   000004   90....       MOV     DPTR,#epList
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F8           MOV     R0,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F9           MOV     R1,A
   \   00000C   8009         SJMP    ??afGetDescCB_0
    934          
    935            // Look through the list until the end
    936            while ( epSearch )
    937            {
    938              // Is there a match?
    939              if ( epSearch->epDesc == epDesc )
    940              {
    941                return ( epSearch->pfnDescCB );
    942              }
    943              else
    944                epSearch = epSearch->nextDesc;  // Next entry
   \                     ??afGetDescCB_1:
   \   00000E   8882         MOV     DPL,R0
   \   000010   8983         MOV     DPH,R1
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F8           MOV     R0,A
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F9           MOV     R1,A
   \                     ??afGetDescCB_0:
   \   000017   E8           MOV     A,R0
   \   000018   49           ORL     A,R1
   \   000019   6022         JZ      ??afGetDescCB_2
   \   00001B   8882         MOV     DPL,R0
   \   00001D   8983         MOV     DPH,R1
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   FC           MOV     R4,A
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   FD           MOV     R5,A
   \   000026   EA           MOV     A,R2
   \   000027   6C           XRL     A,R4
   \   000028   7002         JNZ     ??afGetDescCB_3
   \   00002A   EB           MOV     A,R3
   \   00002B   6D           XRL     A,R5
   \                     ??afGetDescCB_3:
   \   00002C   70E0         JNZ     ??afGetDescCB_1
   \   00002E   8882         MOV     DPL,R0
   \   000030   8983         MOV     DPH,R1
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   FA           MOV     R2,A
   \   000038   A3           INC     DPTR
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   FB           MOV     R3,A
   \   00003B   8004         SJMP    ??afGetDescCB_4
    945            }
    946          
    947            return ( (pDescCB)NULL );
   \                     ??afGetDescCB_2:
   \   00003D   7A00         MOV     R2,#0x0
   \   00003F   7B00         MOV     R3,#0x0
   \                     ??afGetDescCB_4:
   \   000041   D083         POP     DPH
   \   000043   D082         POP     DPL
   \   000045   02....       LJMP    ?BRET
    948          }
    949          
    950          /*********************************************************************
    951           * @fn      afDataReqMTU
    952           *
    953           * @brief   Get the Data Request MTU(Max Transport Unit).
    954           *
    955           * @param   fields - afDataReqMTU_t
    956           *
    957           * @return  uint8(MTU)
    958           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    959          uint8 afDataReqMTU( afDataReqMTU_t* fields )
   \                     afDataReqMTU:
    960          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    961            uint8 len;
    962            uint8 hdr;
    963          
    964            if ( fields->kvp == TRUE )
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   6401         XRL     A,#0x1
   \   00000C   7004         JNZ     ??afDataReqMTU_0
    965            {
    966              hdr = AF_HDR_KVP_MAX_LEN;
   \   00000E   7E08         MOV     R6,#0x8
   \   000010   8002         SJMP    ??afDataReqMTU_1
    967            }
    968            else
    969            {
    970              hdr = AF_HDR_V1_1_MAX_LEN;
   \                     ??afDataReqMTU_0:
   \   000012   7E00         MOV     R6,#0x0
    971            }
    972          
    973            len = (uint8)(APSDE_DataReqMTU(&fields->aps) - hdr);
   \                     ??afDataReqMTU_1:
   \   000014                ; Setup parameters for call to function APSDE_DataReqMTU
   \   000014   8A82         MOV     DPL,R2
   \   000016   8B83         MOV     DPH,R3
   \   000018   A3           INC     DPTR
   \   000019   AA82         MOV     R2,DPL
   \   00001B   AB83         MOV     R3,DPH
   \   00001D   12....       LCALL   `??APSDE_DataReqMTU::?relay`; Banked call to: APSDE_DataReqMTU
   \   000020   E9           MOV     A,R1
   \   000021   C3           CLR     C
   \   000022   9E           SUBB    A,R6
   \   000023   F9           MOV     R1,A
    974          
    975            return len;
   \   000024   7F01         MOV     R7,#0x1
   \   000026   02....       LJMP    ?BANKED_LEAVE_XDATA
    976          }
    977          
    978          /*********************************************************************
    979           * @fn      afGetMatch
    980           *
    981           * @brief   Set the allow response flag.
    982           *
    983           * @param   ep - Application Endpoint to look for
    984           * @param   action - true - allow response, false - no response
    985           *
    986           * @return  TRUE allow responses, FALSE no response
    987           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    988          uint8 afGetMatch( uint8 ep )
   \                     afGetMatch:
    989          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    990            epList_t *epSearch;
    991          
    992            // Look for the endpoint
    993            epSearch = afFindEndPointDescList( ep );
   \   000007                ; Setup parameters for call to function afFindEndPointDescList
   \   000007   EE           MOV     A,R6
   \   000008   F9           MOV     R1,A
   \   000009   12....       LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   00000C   8A..         MOV     ?V0,R2
   \   00000E   8B..         MOV     ?V1,R3
   \   000010   85..82       MOV     DPL,?V0
   \   000013   85..83       MOV     DPH,?V1
    994          
    995            if ( epSearch )
   \   000016   E582         MOV     A,DPL
   \   000018   4583         ORL     A,DPH
   \   00001A   6015         JZ      ??afGetMatch_0
    996            {
    997              if ( epSearch->flags & eEP_AllowMatch )
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   A2E0         MOV     C,0xE0 /* A   */.0
   \   000027   5004         JNC     ??afGetMatch_1
    998                return ( TRUE );
   \   000029   7901         MOV     R1,#0x1
   \   00002B   8006         SJMP    ??afGetMatch_2
    999              else
   1000                return ( FALSE );
   \                     ??afGetMatch_1:
   \   00002D   7900         MOV     R1,#0x0
   \   00002F   8002         SJMP    ??afGetMatch_2
   1001            }
   1002            else
   1003              return ( FALSE );
   \                     ??afGetMatch_0:
   \   000031   7900         MOV     R1,#0x0
   \                     ??afGetMatch_2:
   \   000033   7F02         MOV     R7,#0x2
   \   000035   02....       LJMP    ?BANKED_LEAVE_XDATA
   1004          }
   1005          
   1006          /*********************************************************************
   1007           * @fn      afSetMatch
   1008           *
   1009           * @brief   Set the allow response flag.
   1010           *
   1011           * @param   ep - Application Endpoint to look for
   1012           * @param   action - true - allow response, false - no response
   1013           *
   1014           * @return  TRUE if success, FALSE if endpoint not found
   1015           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1016          uint8 afSetMatch( uint8 ep, uint8 action )
   \                     afSetMatch:
   1017          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EA           MOV     A,R2
   \   000008   FF           MOV     R7,A
   1018            epList_t *epSearch;
   1019          
   1020            // Look for the endpoint
   1021            epSearch = afFindEndPointDescList( ep );
   \   000009                ; Setup parameters for call to function afFindEndPointDescList
   \   000009   EE           MOV     A,R6
   \   00000A   F9           MOV     R1,A
   \   00000B   12....       LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   00000E   8A..         MOV     ?V0,R2
   \   000010   8B..         MOV     ?V1,R3
   \   000012   85..82       MOV     DPL,?V0
   \   000015   85..83       MOV     DPH,?V1
   1022          
   1023            if ( epSearch )
   \   000018   E582         MOV     A,DPL
   \   00001A   4583         ORL     A,DPH
   \   00001C   6021         JZ      ??afSetMatch_0
   1024            {
   1025              if ( action )
   \   00001E   EF           MOV     A,R7
   \   00001F   600E         JZ      ??afSetMatch_1
   1026              {
   1027                epSearch->flags |= eEP_AllowMatch;
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   D2E0         SETB    0xE0 /* A   */.0
   \   00002C   F0           MOVX    @DPTR,A
   \   00002D   800C         SJMP    ??afSetMatch_2
   1028              }
   1029              else
   1030              {
   1031                epSearch->flags &= (eEP_AllowMatch ^ 0xFFFF);
   \                     ??afSetMatch_1:
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   C2E0         CLR     0xE0 /* A   */.0
   \   00003A   F0           MOVX    @DPTR,A
   1032              }
   1033              return ( TRUE );
   \                     ??afSetMatch_2:
   \   00003B   7901         MOV     R1,#0x1
   \   00003D   8002         SJMP    ??afSetMatch_3
   1034            }
   1035            else
   1036              return ( FALSE );
   \                     ??afSetMatch_0:
   \   00003F   7900         MOV     R1,#0x0
   \                     ??afSetMatch_3:
   \   000041   7F02         MOV     R7,#0x2
   \   000043   02....       LJMP    ?BANKED_LEAVE_XDATA
   1037          }
   1038          
   1039          /*********************************************************************
   1040           * @fn      afNumEndPoints
   1041           *
   1042           * @brief   Returns the number of endpoints defined (including 0)
   1043           *
   1044           * @param   none
   1045           *
   1046           * @return  number of endpoints
   1047           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1048          uint8 afNumEndPoints( void )
   \                     afNumEndPoints:
   1049          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1050            epList_t *epSearch;
   1051            uint8 endpoints;
   1052          
   1053            // Start at the beginning
   1054            epSearch = epList;
   \   000004   90....       MOV     DPTR,#epList
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F8           MOV     R0,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F9           MOV     R1,A
   \   00000C   8882         MOV     DPL,R0
   \   00000E   8983         MOV     DPH,R1
   1055            endpoints = 0;
   \   000010   7900         MOV     R1,#0x0
   \   000012   800A         SJMP    ??afNumEndPoints_0
   1056          
   1057            while ( epSearch )
   1058            {
   1059              endpoints++;
   \                     ??afNumEndPoints_1:
   \   000014   09           INC     R1
   1060              epSearch = epSearch->nextDesc;
   \   000015   E0           MOVX    A,@DPTR
   \   000016   FA           MOV     R2,A
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \   000019   FB           MOV     R3,A
   \   00001A   8A82         MOV     DPL,R2
   \   00001C   8B83         MOV     DPH,R3
   1061            }
   \                     ??afNumEndPoints_0:
   \   00001E   E582         MOV     A,DPL
   \   000020   4583         ORL     A,DPH
   \   000022   70F0         JNZ     ??afNumEndPoints_1
   1062          
   1063            return ( endpoints );
   \   000024   D083         POP     DPH
   \   000026   D082         POP     DPL
   \   000028   02....       LJMP    ?BRET
   1064          }
   1065          
   1066          /*********************************************************************
   1067           * @fn      afEndPoints
   1068           *
   1069           * @brief   Fills in the passed in buffer with the endpoint (numbers).
   1070           *          Use afNumEndPoints to find out how big a buffer to supply.
   1071           *
   1072           * @param   epBuf - pointer to mem used
   1073           *
   1074           * @return  void
   1075           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1076          void afEndPoints( uint8 *epBuf, uint8 skipZDO )
   \                     afEndPoints:
   1077          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1078            epList_t *epSearch;
   1079            uint8 endPoint;
   1080          
   1081            // Start at the beginning
   1082            epSearch = epList;
   \   000004   90....       MOV     DPTR,#epList
   \   000007   E0           MOVX    A,@DPTR
   \   000008   FC           MOV     R4,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   FD           MOV     R5,A
   \   00000C   8032         SJMP    ??afEndPoints_0
   1083          
   1084            while ( epSearch )
   1085            {
   1086              endPoint = epSearch->epDesc->endPoint;
   \                     ??afEndPoints_1:
   \   00000E   8C82         MOV     DPL,R4
   \   000010   8D83         MOV     DPH,R5
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F8           MOV     R0,A
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F583         MOV     DPH,A
   \   00001A   8882         MOV     DPL,R0
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F8           MOV     R0,A
   1087          
   1088              if ( !skipZDO || endPoint != 0 )
   \   00001E   E9           MOV     A,R1
   \   00001F   6003         JZ      ??afEndPoints_2
   \   000021   E8           MOV     A,R0
   \   000022   6013         JZ      ??afEndPoints_3
   1089                *epBuf++ = endPoint;
   \                     ??afEndPoints_2:
   \   000024   E8           MOV     A,R0
   \   000025   C0E0         PUSH    A
   \   000027   8A82         MOV     DPL,R2
   \   000029   8B83         MOV     DPH,R3
   \   00002B   D0E0         POP     A
   \   00002D   F0           MOVX    @DPTR,A
   \   00002E   8A82         MOV     DPL,R2
   \   000030   8B83         MOV     DPH,R3
   \   000032   A3           INC     DPTR
   \   000033   AA82         MOV     R2,DPL
   \   000035   AB83         MOV     R3,DPH
   1090          
   1091              epSearch = epSearch->nextDesc;
   \                     ??afEndPoints_3:
   \   000037   8C82         MOV     DPL,R4
   \   000039   8D83         MOV     DPH,R5
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   FC           MOV     R4,A
   \   00003D   A3           INC     DPTR
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   FD           MOV     R5,A
   1092            }
   \                     ??afEndPoints_0:
   \   000040   EC           MOV     A,R4
   \   000041   4D           ORL     A,R5
   \   000042   70CA         JNZ     ??afEndPoints_1
   1093          }
   \   000044   D083         POP     DPH
   \   000046   D082         POP     DPL
   \   000048   02....       LJMP    ?BRET
   1094          
   1095          /*********************************************************************
   1096           * @fn      afCopyAddress
   1097           *
   1098           * @brief   Fills in the passed in afAddrType_t parameter with the corresponding information
   1099           *          from the zAddrType_t parameter.
   1100           *
   1101           * @param   epBuf - pointer to mem used
   1102           *
   1103           * @return  void
   1104           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1105          void afCopyAddress( afAddrType_t *afAddr, zAddrType_t *zAddr )
   \                     afCopyAddress:
   1106          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   1107            afAddr->addrMode = (afAddrMode_t)zAddr->addrMode;
   \   000009   8C82         MOV     DPL,R4
   \   00000B   8D83         MOV     DPH,R5
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   C0E0         PUSH    A
   \   000018   8E82         MOV     DPL,R6
   \   00001A   8F83         MOV     DPH,R7
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   D0E0         POP     A
   \   000026   F0           MOVX    @DPTR,A
   1108            if ( zAddr->addrMode == Addr64Bit )
   \   000027   8C82         MOV     DPL,R4
   \   000029   8D83         MOV     DPH,R5
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   6403         XRL     A,#0x3
   \   000036   7013         JNZ     ??afCopyAddress_0
   1109            {
   1110              (void)osal_cpyExtAddr( afAddr->addr.extAddr, zAddr->addr.extAddr );
   \   000038                ; Setup parameters for call to function sAddrExtCpy
   \   000038   EE           MOV     A,R6
   \   000039   FA           MOV     R2,A
   \   00003A   EF           MOV     A,R7
   \   00003B   FB           MOV     R3,A
   \   00003C   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00003F   8A..         MOV     ?V0,R2
   \   000041   8B..         MOV     ?V1,R3
   \   000043   85..82       MOV     DPL,?V0
   \   000046   85..83       MOV     DPH,?V1
   \   000049   8012         SJMP    ??afCopyAddress_1
   1111            }
   1112            else
   1113            {
   1114              afAddr->addr.shortAddr = zAddr->addr.shortAddr;
   \                     ??afCopyAddress_0:
   \   00004B   8C82         MOV     DPL,R4
   \   00004D   8D83         MOV     DPH,R5
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   F8           MOV     R0,A
   \   000051   A3           INC     DPTR
   \   000052   E0           MOVX    A,@DPTR
   \   000053   F9           MOV     R1,A
   \   000054   8E82         MOV     DPL,R6
   \   000056   8F83         MOV     DPH,R7
   \   000058   E8           MOV     A,R0
   \   000059   F0           MOVX    @DPTR,A
   \   00005A   A3           INC     DPTR
   \   00005B   E9           MOV     A,R1
   \   00005C   F0           MOVX    @DPTR,A
   1115            }
   1116          
   1117            // Since zAddrType_t has no INTER-PAN information, set the panId member to zero.
   1118            afAddr->panId = 0;
   \                     ??afCopyAddress_1:
   \   00005D   8E82         MOV     DPL,R6
   \   00005F   8F83         MOV     DPH,R7
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   A3           INC     DPTR
   \   000064   A3           INC     DPTR
   \   000065   A3           INC     DPTR
   \   000066   A3           INC     DPTR
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   7400         MOV     A,#0x0
   \   00006D   F0           MOVX    @DPTR,A
   \   00006E   A3           INC     DPTR
   \   00006F   7400         MOV     A,#0x0
   \   000071   F0           MOVX    @DPTR,A
   1119          }
   \   000072   7F02         MOV     R7,#0x2
   \   000074   02....       LJMP    ?BANKED_LEAVE_XDATA
   1120          
   1121          /**************************************************************************************************
   1122           * @fn          afAPSF_ConfigGet
   1123           *
   1124           * @brief       This function ascertains the fragmentation configuration that corresponds to
   1125           *              the specified EndPoint.
   1126           *
   1127           * input parameters
   1128           *
   1129           * @param       endPoint - The source EP of a Tx or destination EP of a Rx fragmented message.
   1130           *
   1131           * output parameters
   1132           *
   1133           * @param       pCfg - A pointer to an APSF configuration structure to fill with values.
   1134           *
   1135           * @return      None.
   1136           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1137          void afAPSF_ConfigGet(uint8 endPoint, afAPSF_Config_t *pCfg)
   \                     afAPSF_ConfigGet:
   1138          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V3,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
   1139            epList_t *pList = afFindEndPointDescList(endPoint);
   \   00000B                ; Setup parameters for call to function afFindEndPointDescList
   \   00000B   A9..         MOV     R1,?V3
   \   00000D   12....       LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   000010   8A..         MOV     ?V0,R2
   \   000012   8B..         MOV     ?V1,R3
   \   000014   A8..         MOV     R0,?V0
   \   000016   A9..         MOV     R1,?V1
   1140          
   1141            if (pList == NULL)
   \   000018   E8           MOV     A,R0
   \   000019   49           ORL     A,R1
   \   00001A   7011         JNZ     ??afAPSF_ConfigGet_0
   1142            {
   1143              pCfg->frameDelay = APSF_DEFAULT_INTERFRAME_DELAY;
   \   00001C   8E82         MOV     DPL,R6
   \   00001E   8F83         MOV     DPH,R7
   \   000020   7432         MOV     A,#0x32
   \   000022   F0           MOVX    @DPTR,A
   1144              pCfg->windowSize = APSF_DEFAULT_WINDOW_SIZE;
   \   000023   8E82         MOV     DPL,R6
   \   000025   8F83         MOV     DPH,R7
   \   000027   A3           INC     DPTR
   \   000028   7401         MOV     A,#0x1
   \   00002A   F0           MOVX    @DPTR,A
   \   00002B   802B         SJMP    ??afAPSF_ConfigGet_1
   1145            }
   1146            else
   1147            {
   1148              (void)osal_memcpy(pCfg, &pList->apsfCfg, sizeof(afAPSF_Config_t));
   \                     ??afAPSF_ConfigGet_0:
   \   00002D                ; Setup parameters for call to function osal_memcpy
   \   00002D   E8           MOV     A,R0
   \   00002E   2406         ADD     A,#0x6
   \   000030   F5..         MOV     ?V0,A
   \   000032   E4           CLR     A
   \   000033   39           ADDC    A,R1
   \   000034   F5..         MOV     ?V1,A
   \   000036   75..00       MOV     ?V2,#0x0
   \   000039   78..         MOV     R0,#?V0
   \   00003B   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00003E   7C02         MOV     R4,#0x2
   \   000040   7D00         MOV     R5,#0x0
   \   000042   EE           MOV     A,R6
   \   000043   FA           MOV     R2,A
   \   000044   EF           MOV     A,R7
   \   000045   FB           MOV     R3,A
   \   000046   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000049   7403         MOV     A,#0x3
   \   00004B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00004E   8A..         MOV     ?V0,R2
   \   000050   8B..         MOV     ?V1,R3
   \   000052   85..82       MOV     DPL,?V0
   \   000055   85..83       MOV     DPH,?V1
   1149            }
   1150          }
   \                     ??afAPSF_ConfigGet_1:
   \   000058   7F04         MOV     R7,#0x4
   \   00005A   02....       LJMP    ?BANKED_LEAVE_XDATA
   1151          
   1152          /**************************************************************************************************
   1153           * @fn          afAPSF_ConfigSet
   1154           *
   1155           * @brief       This function attempts to set the fragmentation configuration that corresponds to
   1156           *              the specified EndPoint.
   1157           *
   1158           * input parameters
   1159           *
   1160           * @param       endPoint - The specific EndPoint for which to set the fragmentation configuration.
   1161           * @param       pCfg - A pointer to an APSF configuration structure to fill with values.
   1162           *
   1163           * output parameters
   1164           *
   1165           * None.
   1166           *
   1167           * @return      afStatus_SUCCESS for success.
   1168           *              afStatus_INVALID_PARAMETER if the specified EndPoint is not registered.
   1169           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1170          afStatus_t afAPSF_ConfigSet(uint8 endPoint, afAPSF_Config_t *pCfg)
   \                     afAPSF_ConfigSet:
   1171          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V3,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
   1172            epList_t *pList = afFindEndPointDescList(endPoint);
   \   00000B                ; Setup parameters for call to function afFindEndPointDescList
   \   00000B   A9..         MOV     R1,?V3
   \   00000D   12....       LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   000010   8A..         MOV     ?V0,R2
   \   000012   8B..         MOV     ?V1,R3
   \   000014   AA..         MOV     R2,?V0
   \   000016   AB..         MOV     R3,?V1
   1173          
   1174            if (pList == NULL)
   \   000018   EA           MOV     A,R2
   \   000019   4B           ORL     A,R3
   \   00001A   7004         JNZ     ??afAPSF_ConfigSet_0
   1175            {
   1176              return afStatus_INVALID_PARAMETER;
   \   00001C   7902         MOV     R1,#0x2
   \   00001E   802B         SJMP    ??afAPSF_ConfigSet_1
   1177            }
   1178          
   1179            (void)osal_memcpy(&pList->apsfCfg, pCfg, sizeof(afAPSF_Config_t));
   \                     ??afAPSF_ConfigSet_0:
   \   000020                ; Setup parameters for call to function osal_memcpy
   \   000020   8E..         MOV     ?V0,R6
   \   000022   8F..         MOV     ?V1,R7
   \   000024   75..00       MOV     ?V2,#0x0
   \   000027   78..         MOV     R0,#?V0
   \   000029   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00002C   7C02         MOV     R4,#0x2
   \   00002E   7D00         MOV     R5,#0x0
   \   000030   EA           MOV     A,R2
   \   000031   2406         ADD     A,#0x6
   \   000033   FA           MOV     R2,A
   \   000034   5001         JNC     ??afAPSF_ConfigSet_2
   \   000036   0B           INC     R3
   \                     ??afAPSF_ConfigSet_2:
   \   000037   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00003A   7403         MOV     A,#0x3
   \   00003C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00003F   8A..         MOV     ?V0,R2
   \   000041   8B..         MOV     ?V1,R3
   \   000043   85..82       MOV     DPL,?V0
   \   000046   85..83       MOV     DPH,?V1
   1180            return afStatus_SUCCESS;
   \   000049   7900         MOV     R1,#0x0
   \                     ??afAPSF_ConfigSet_1:
   \   00004B   7F04         MOV     R7,#0x4
   \   00004D   02....       LJMP    ?BANKED_LEAVE_XDATA
   1181          }
   1182          
   1183          /**************************************************************************************************
   1184           * @fn          afSetApplCB
   1185           *
   1186           * @brief       Sets the pointer to the Application Callback function for a
   1187           *              specific EndPoint.
   1188           *
   1189           * input parameters
   1190           *
   1191           * @param       endPoint - The specific EndPoint for which to set Application Callback.
   1192           * @param       pApplFn - A pointer to the Application Callback function.
   1193           *
   1194           * output parameters
   1195           *
   1196           * None.
   1197           *
   1198           * @return      TRUE if success, FALSE if endpoint not found
   1199           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1200          uint8 afSetApplCB( uint8 endPoint, pApplCB pApplFn )
   \                     afSetApplCB:
   1201          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
   1202            if ( pApplFn != NULL )
   \   00000B   EE           MOV     A,R6
   \   00000C   4F           ORL     A,R7
   \   00000D   6027         JZ      ??afSetApplCB_0
   1203            {
   1204              epList_t *epSearch;
   1205          
   1206              // Look for the endpoint
   1207              epSearch = afFindEndPointDescList( endPoint );
   \   00000F                ; Setup parameters for call to function afFindEndPointDescList
   \   00000F   A9..         MOV     R1,?V0
   \   000011   12....       LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   000014   8A..         MOV     ?V2,R2
   \   000016   8B..         MOV     ?V3,R3
   \   000018   85..82       MOV     DPL,?V2
   \   00001B   85..83       MOV     DPH,?V3
   1208          
   1209              if ( epSearch )
   \   00001E   E582         MOV     A,DPL
   \   000020   4583         ORL     A,DPH
   \   000022   6012         JZ      ??afSetApplCB_0
   1210              {
   1211                epSearch->pfnApplCB = pApplFn;
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   EE           MOV     A,R6
   \   00002E   F0           MOVX    @DPTR,A
   \   00002F   A3           INC     DPTR
   \   000030   EF           MOV     A,R7
   \   000031   F0           MOVX    @DPTR,A
   1212          
   1213                return ( TRUE );
   \   000032   7901         MOV     R1,#0x1
   \   000034   8002         SJMP    ??afSetApplCB_1
   1214              }
   1215            }
   1216          
   1217            return ( FALSE );
   \                     ??afSetApplCB_0:
   \   000036   7900         MOV     R1,#0x0
   \                     ??afSetApplCB_1:
   \   000038   7F04         MOV     R7,#0x4
   \   00003A   02....       LJMP    ?BANKED_LEAVE_XDATA
   1218          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for AF_DataRequestDiscoverRoute>`:
   \   000000   01           DB 1

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afRegisterExtended::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afRegisterExtended

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afRegister::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afRegister

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afDelete::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afDelete

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afDataConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afDataConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afReflectError::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afReflectError

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afIncomingData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afIncomingData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afBuildMSGIncoming::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afBuildMSGIncoming

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AF_DataRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AF_DataRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AF_DataRequestSrcRtg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AF_DataRequestSrcRtg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afFindEndPointDescList::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afFindEndPointDescList

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afFindEndPointDesc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afFindEndPointDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afFindSimpleDesc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afFindSimpleDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afGetDescCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afGetDescCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afDataReqMTU::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afDataReqMTU

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afGetMatch::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afGetMatch

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afSetMatch::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afSetMatch

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afNumEndPoints::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afNumEndPoints

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afEndPoints::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afEndPoints

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afCopyAddress::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afCopyAddress

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afAPSF_ConfigGet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afAPSF_ConfigGet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afAPSF_ConfigSet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afAPSF_ConfigSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afSetApplCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afSetApplCB
   1219          
   1220          /**************************************************************************************************
   1221          */

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     67   AF_DataRequest
        0     46   -> APSDE_DataReq
        0     46   -> NLME_GetShortAddr
        0     46   -> NLME_IsAddressBroadcast
        0     46   -> RTG_CheckRtStatus
        0     46   -> afDataConfirm
        0     46   -> afDataReqMTU
        0     46   -> afFindEndPointDescList
        0     46   -> afGetDescCB
        0     46   -> osal_mem_free
        0     46   -> sAddrExtCpy
      0     33   AF_DataRequestSrcRtg
        0     21   -> AF_DataRequest
        0     12   -> RTG_AddSrcRtgEntry_Guaranteed
      0     15   afAPSF_ConfigGet
        0     12   -> afFindEndPointDescList
        0     15   -> osal_memcpy
      0     15   afAPSF_ConfigSet
        0     12   -> afFindEndPointDescList
        0     15   -> osal_memcpy
      1     61   afBuildMSGIncoming
        0     19   -> afCopyAddress
        0     22   -> osal_memcpy
        0     19   -> osal_msg_allocate
        0     19   -> osal_msg_send
      1     29   afCopyAddress
        0     10   -> sAddrExtCpy
      1     60   afDataConfirm
        0     14   -> afFindEndPointDesc
        0     14   -> osal_msg_allocate
        0     14   -> osal_msg_send
      0     55   afDataReqMTU
        0      9   -> APSDE_DataReqMTU
      0      9   afDelete
        0      9   -> osal_mem_free
      3      0   afEndPoints
      0     37   afFindEndPointDesc
        0     10   -> afFindEndPointDescList
      2     46   afFindEndPointDescList
      0     12   afFindSimpleDesc
        0     12   -> afFindEndPointDescList
      2     46   afGetDescCB
      0     10   afGetMatch
        0     10   -> afFindEndPointDescList
      1     49   afIncomingData
        0     39   -> afBuildMSGIncoming
        0     27   -> afFindEndPointDesc
        0     27   -> afFindEndPointDescList
        0     27   -> aps_FindGroupForEndpoint
        0     27   -> osal_mem_free
      2      0   afNumEndPoints
      1     17   afReflectError
        0     16   -> afFindEndPointDesc
        0     16   -> osal_msg_allocate
        0     16   -> osal_msg_send
      0     12   afRegister
        0     10   -> afFindEndPointDescList
        0     12   -> afRegisterExtended
      0     24   afRegisterExtended
        0     12   -> osal_mem_alloc
      0     12   afSetApplCB
        0     12   -> afFindEndPointDescList
      0     10   afSetMatch
        0     10   -> afFindEndPointDescList


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for AF_DataRequestDiscoverRoute>
    1046  AF_DataRequest
       6  AF_DataRequest::?relay
       1  AF_DataRequestDiscoverRoute
     132  AF_DataRequestSrcRtg
       6  AF_DataRequestSrcRtg::?relay
      93  afAPSF_ConfigGet
       6  afAPSF_ConfigGet::?relay
      80  afAPSF_ConfigSet
       6  afAPSF_ConfigSet::?relay
     635  afBuildMSGIncoming
       6  afBuildMSGIncoming::?relay
     119  afCopyAddress
       6  afCopyAddress::?relay
     117  afDataConfirm
       6  afDataConfirm::?relay
      41  afDataReqMTU
       6  afDataReqMTU::?relay
     158  afDelete
       6  afDelete::?relay
      75  afEndPoints
       6  afEndPoints::?relay
      46  afFindEndPointDesc
       6  afFindEndPointDesc::?relay
      52  afFindEndPointDescList
       6  afFindEndPointDescList::?relay
     132  afFindSimpleDesc
       6  afFindSimpleDesc::?relay
      72  afGetDescCB
       6  afGetDescCB::?relay
      56  afGetMatch
       6  afGetMatch::?relay
     737  afIncomingData
       6  afIncomingData::?relay
      43  afNumEndPoints
       6  afNumEndPoints::?relay
     156  afReflectError
       6  afReflectError::?relay
      79  afRegister
       6  afRegister::?relay
     158  afRegisterExtended
       6  afRegisterExtended::?relay
      61  afSetApplCB
       6  afSetApplCB::?relay
      70  afSetMatch
       6  afSetMatch::?relay
       2  epList

 
 4 158 bytes in segment BANKED_CODE
   132 bytes in segment BANK_RELAYS
     1 byte  in segment XDATA_I
     1 byte  in segment XDATA_ID
     2 bytes in segment XDATA_Z
 
 4 291 bytes of CODE  memory
     3 bytes of XDATA memory

Errors: none
Warnings: none

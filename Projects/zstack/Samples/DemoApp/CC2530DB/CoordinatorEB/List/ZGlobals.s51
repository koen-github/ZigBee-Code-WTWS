///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V9.20.1.2476 for 8051               22/Feb/2017  14:31:46
// Copyright 2004-2015 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Users\koen\ZigBee-Code-WTWS\Components\stack\sys\ZGlobals.c
//    Command line       =  
//        -f
//        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DZDO_COORDINATOR -DRTR_NWK) -f
//        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
//        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00002000 -DZDAPP_CONFIG_PAN_ID=0xABCD
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={'H', 'O', 'G', 'E', 'S',
//        'C', 'H', 'O', 'O', 'L', 'U', 'T', 'R', 'E', 'C', 'H'}"
//        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
//        -DREJOIN_POLL_RATE=440
//        C:\Users\koen\ZigBee-Code-WTWS\Components\stack\sys\ZGlobals.c -D
//        HOLD_AUTO_START -D BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D
//        NV_RESTORE -D HAL_UART=TRUE -lC
//        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\
//        -lA
//        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\
//        --diag_suppress Pe001,Pa010,Pe1665 -o
//        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\Obj\
//        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
//        --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -I
//        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\
//        -I
//        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\Source\
//        -I
//        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\ZMain\TI2530DB\
//        -I
//        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\hal\include\
//        -I
//        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
//        -I
//        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\include\
//        -I
//        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
//        -I
//        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
//        -I
//        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
//        -I
//        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mt\
//        -I
//        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\osal\include\
//        -I
//        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
//        -I
//        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
//        -I
//        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\af\
//        -I
//        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
//        -I
//        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
//        -I
//        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
//        -I
//        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
//        -I
//        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
//        -I
//        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\zmac\
//        -I
//        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
//        -Ol --require_prototypes
//    List file          =  
//        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\ZGlobals.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME ZGlobals

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK8_C_TWO
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC `??zgInit::?relay`
        FUNCTION `??zgInit::?relay`,0203H
        PUBLIC `??zgInitItems::?relay`
        FUNCTION `??zgInitItems::?relay`,0203H
        FUNCTION `??zgItemInit::?relay`,0203H
        PUBLIC `??zgReadStartupOptions::?relay`
        FUNCTION `??zgReadStartupOptions::?relay`,0203H
        PUBLIC `??zgSetItem::?relay`
        FUNCTION `??zgSetItem::?relay`,0203H
        PUBLIC `??zgWriteStartupOptions::?relay`
        FUNCTION `??zgWriteStartupOptions::?relay`,0203H
        PUBLIC zgApsAckWaitMultiplier
        PUBLIC zgApsAllowR19Sec
        PUBLIC zgApsDefaultMaxBindingTime
        PUBLIC zgApsLinkKeyType
        PUBLIC zgApsMinDupRejTableSize
        PUBLIC zgApsNonMemberRadius
        PUBLIC zgApsTrustCenterAddr
        PUBLIC zgApsUseExtendedPANID
        PUBLIC zgApsUseInsecureJoin
        PUBLIC zgApscAckWaitDurationPolled
        PUBLIC zgApscDupRejTimeoutCount
        PUBLIC zgApscDupRejTimeoutInc
        PUBLIC zgApscMaxFrameRetries
        PUBLIC zgBcastDeliveryTime
        PUBLIC zgChildAgingEnable
        PUBLIC zgConcentratorDiscoveryTime
        PUBLIC zgConcentratorEnable
        PUBLIC zgConcentratorRC
        PUBLIC zgConcentratorRadius
        PUBLIC zgConfigPANID
        PUBLIC zgDefaultChannelList
        PUBLIC zgDefaultStartingScanDuration
        PUBLIC zgDeviceLogicalType
        PUBLIC zgExtendedPANID
        PUBLIC zgIndirectMsgTimeout
        PUBLIC zgInit
        FUNCTION zgInit,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC zgInitItems
        FUNCTION zgInitItems,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 11, STACK
        FUNCTION zgItemInit,0a1203H
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 17, STACK
        PUBLIC zgMaxBcastRetires
        PUBLIC zgMaxDataRetries
        PUBLIC zgMaxPollFailureRetries
        PUBLIC zgNwkCommissionedNwkAddr
        PUBLIC zgNwkLeaveRequestAllowed
        PUBLIC zgNwkMgrMinTransmissions
        PUBLIC zgNwkMgrMode
        PUBLIC zgNwkMode
        PUBLIC zgNwkSrcRtgExpiryTime
        PUBLIC zgPassiveAckTimeout
        PUBLIC zgPollRate
        PUBLIC zgPreConfigKeys
        PUBLIC zgQueuedPollRate
        PUBLIC zgReadStartupOptions
        FUNCTION zgReadStartupOptions,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 15, STACK
        PUBLIC zgRejoinPollRate
        PUBLIC zgResponsePollRate
        PUBLIC zgRouteDiscoveryTime
        PUBLIC zgRouteExpiryTime
        PUBLIC zgRouterOffAssocCleanup
        PUBLIC zgSapiEndpoint
        PUBLIC zgSecurePermitJoin
        PUBLIC zgSecurityMode
        PUBLIC zgSetItem
        FUNCTION zgSetItem,0a1203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC zgStackProfile
        PUBLIC zgStartDelay
        PUBLIC zgUseDefaultTCLK
        PUBLIC zgWriteStartupOptions
        FUNCTION zgWriteStartupOptions,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 15, STACK
        PUBLIC zgZdoDirectCB
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
ZMacGetReq          SYMBOL "ZMacGetReq"
`??ZMacGetReq::?relay` SYMBOL "?relay", ZMacGetReq
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_nv_item_init   SYMBOL "osal_nv_item_init"
`??osal_nv_item_init::?relay` SYMBOL "?relay", osal_nv_item_init
osal_nv_read        SYMBOL "osal_nv_read"
`??osal_nv_read::?relay` SYMBOL "?relay", osal_nv_read
osal_nv_write       SYMBOL "osal_nv_write"
`??osal_nv_write::?relay` SYMBOL "?relay", osal_nv_write
zgInit              SYMBOL "zgInit"
`??zgInit::?relay`  SYMBOL "?relay", zgInit
zgInitItems         SYMBOL "zgInitItems"
`??zgInitItems::?relay` SYMBOL "?relay", zgInitItems
zgReadStartupOptions SYMBOL "zgReadStartupOptions"
`??zgReadStartupOptions::?relay` SYMBOL "?relay", zgReadStartupOptions
zgSetItem           SYMBOL "zgSetItem"
`??zgSetItem::?relay` SYMBOL "?relay", zgSetItem
zgWriteStartupOptions SYMBOL "zgWriteStartupOptions"
`??zgWriteStartupOptions::?relay` SYMBOL "?relay", zgWriteStartupOptions

        EXTERN `??ZMacGetReq::?relay`
        FUNCTION `??ZMacGetReq::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_nv_item_init::?relay`
        FUNCTION `??osal_nv_item_init::?relay`,00H
        EXTERN `??osal_nv_read::?relay`
        FUNCTION `??osal_nv_read::?relay`,00H
        EXTERN `??osal_nv_write::?relay`
        FUNCTION `??osal_nv_write::?relay`,00H
        EXTERN ZMacGetReq
        FUNCTION ZMacGetReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_init
        FUNCTION osal_nv_item_init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// C:\Users\koen\ZigBee-Code-WTWS\Components\stack\sys\ZGlobals.c
//    1 /**************************************************************************************************
//    2   Filename:       ZGlobals.c
//    3   Revised:        $Date: 2014-03-13 10:55:58 -0700 (Thu, 13 Mar 2014) $
//    4   Revision:       $Revision: 37665 $
//    5 
//    6   Description:    User definable Z-Stack parameters.
//    7 
//    8 
//    9   Copyright 2007-2014 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product. Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41  * INCLUDES
//   42  */
//   43 
//   44 #include "ZComDef.h"
//   45 #include "OSAL_Nv.h"
//   46 #include "ZDObject.h"
//   47 #include "ZGlobals.h"
//   48 #include "ZDNwkMgr.h"
//   49 #include "OnBoard.h"
//   50 #include "ZDSecMgr.h"
//   51 
//   52 /*********************************************************************
//   53  * MACROS
//   54  */
//   55 
//   56 /*********************************************************************
//   57  * CONSTANTS
//   58  */
//   59 
//   60 /*********************************************************************
//   61  * TYPEDEFS
//   62  */
//   63 
//   64 typedef struct zgItem
//   65 {
//   66   uint16 id;
//   67   uint16 len;
//   68   void *buf;
//   69 } zgItem_t;
//   70 
//   71 /*********************************************************************
//   72  * NWK GLOBAL VARIABLES
//   73  */
//   74 
//   75 // Polling values

        RSEG XDATA_I:XDATA:NOROOT(0)
//   76 uint16 zgPollRate = POLL_RATE;
zgPollRate:
        DATA16
        DS 2
        REQUIRE `?<Initializer for zgPollRate>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//   77 uint16 zgQueuedPollRate = QUEUED_POLL_RATE;
zgQueuedPollRate:
        DATA16
        DS 2
        REQUIRE `?<Initializer for zgQueuedPollRate>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//   78 uint16 zgResponsePollRate = RESPONSE_POLL_RATE;
zgResponsePollRate:
        DATA16
        DS 2
        REQUIRE `?<Initializer for zgResponsePollRate>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//   79 uint16 zgRejoinPollRate = REJOIN_POLL_RATE;
zgRejoinPollRate:
        DATA16
        DS 2
        REQUIRE `?<Initializer for zgRejoinPollRate>`
        REQUIRE __INIT_XDATA_I
//   80 
//   81 // Transmission retries numbers

        RSEG XDATA_I:XDATA:NOROOT(0)
//   82 uint8 zgMaxDataRetries = NWK_MAX_DATA_RETRIES;
zgMaxDataRetries:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zgMaxDataRetries>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//   83 uint8 zgMaxPollFailureRetries = MAX_POLL_FAILURE_RETRIES;
zgMaxPollFailureRetries:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zgMaxPollFailureRetries>`
        REQUIRE __INIT_XDATA_I
//   84 
//   85 // Default channel list

        RSEG XDATA_I:XDATA:NOROOT(0)
//   86 uint32 zgDefaultChannelList = DEFAULT_CHANLIST;
zgDefaultChannelList:
        DATA32
        DS 4
        REQUIRE `?<Initializer for zgDefaultChannelList>`
        REQUIRE __INIT_XDATA_I
//   87 
//   88 // Default starting scan duration

        RSEG XDATA_I:XDATA:NOROOT(0)
//   89 uint8 zgDefaultStartingScanDuration = STARTING_SCAN_DURATION;
zgDefaultStartingScanDuration:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zgDefaultStartingScanDuratio`
        REQUIRE __INIT_XDATA_I
//   90 
//   91 // Stack profile Id

        RSEG XDATA_I:XDATA:NOROOT(0)
//   92 uint8 zgStackProfile = STACK_PROFILE_ID;
zgStackProfile:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zgStackProfile>`
        REQUIRE __INIT_XDATA_I
//   93 
//   94 // Default indirect message holding timeout

        RSEG XDATA_I:XDATA:NOROOT(0)
//   95 uint8 zgIndirectMsgTimeout = NWK_INDIRECT_MSG_TIMEOUT;
zgIndirectMsgTimeout:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zgIndirectMsgTimeout>`
        REQUIRE __INIT_XDATA_I
//   96 
//   97 // Security mode

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   98 uint8 zgSecurityMode = ZG_SECURITY_MODE;
zgSecurityMode:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   99 
//  100 // Secure permit join

        RSEG XDATA_I:XDATA:NOROOT(0)
//  101 uint8 zgSecurePermitJoin = TRUE;
zgSecurePermitJoin:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zgSecurePermitJoin>`
        REQUIRE __INIT_XDATA_I
//  102 
//  103 // Trust center address

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  104 uint8 zgApsTrustCenterAddr[Z_EXTADDR_LEN] = { 0 };
zgApsTrustCenterAddr:
        DS 8
        REQUIRE __INIT_XDATA_Z
//  105 
//  106 // Route Discovery Time - amount of time that a route request lasts

        RSEG XDATA_I:XDATA:NOROOT(0)
//  107 uint8 zgRouteDiscoveryTime = ROUTE_DISCOVERY_TIME;
zgRouteDiscoveryTime:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zgRouteDiscoveryTime>`
        REQUIRE __INIT_XDATA_I
//  108 
//  109 // Route expiry

        RSEG XDATA_I:XDATA:NOROOT(0)
//  110 uint8 zgRouteExpiryTime = ROUTE_EXPIRY_TIME;
zgRouteExpiryTime:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zgRouteExpiryTime>`
        REQUIRE __INIT_XDATA_I
//  111 
//  112 // Extended PAN Id

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  113 uint8 zgExtendedPANID[Z_EXTADDR_LEN];
zgExtendedPANID:
        DS 8
        REQUIRE __INIT_XDATA_Z
//  114 
//  115 // Broadcast parameters

        RSEG XDATA_I:XDATA:NOROOT(0)
//  116 uint8 zgMaxBcastRetires   = MAX_BCAST_RETRIES;
zgMaxBcastRetires:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zgMaxBcastRetires>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//  117 uint8 zgPassiveAckTimeout = PASSIVE_ACK_TIMEOUT;
zgPassiveAckTimeout:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zgPassiveAckTimeout>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//  118 uint8 zgBcastDeliveryTime = BCAST_DELIVERY_TIME;
zgBcastDeliveryTime:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zgBcastDeliveryTime>`
        REQUIRE __INIT_XDATA_I
//  119 
//  120 // Network mode

        RSEG XDATA_I:XDATA:NOROOT(0)
//  121 uint8 zgNwkMode = NWK_MODE;
zgNwkMode:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zgNwkMode>`
        REQUIRE __INIT_XDATA_I
//  122 
//  123 // Many-to-one values

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  124 uint8 zgConcentratorEnable = CONCENTRATOR_ENABLE;
zgConcentratorEnable:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  125 uint8 zgConcentratorDiscoveryTime = CONCENTRATOR_DISCOVERY_TIME;
zgConcentratorDiscoveryTime:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
//  126 uint8 zgConcentratorRadius = CONCENTRATOR_RADIUS;
zgConcentratorRadius:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zgConcentratorRadius>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  127 uint8 zgConcentratorRC = CONCENTRATOR_ROUTE_CACHE;   // concentrator with route cache (no memory constraints)
zgConcentratorRC:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
//  128 uint8 zgNwkSrcRtgExpiryTime = SRC_RTG_EXPIRY_TIME;
zgNwkSrcRtgExpiryTime:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zgNwkSrcRtgExpiryTime>`
        REQUIRE __INIT_XDATA_I
//  129 
//  130 // Cleanup Child Table according to routing traffic

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  131 uint8 zgRouterOffAssocCleanup = FALSE;
zgRouterOffAssocCleanup:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  132 
//  133 // Determines whether or not a remote NWK leave request command frame received
//  134 // by the local device is accepted .

        RSEG XDATA_I:XDATA:NOROOT(0)
//  135 uint8 zgNwkLeaveRequestAllowed = TRUE;
zgNwkLeaveRequestAllowed:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zgNwkLeaveRequestAllowed>`
        REQUIRE __INIT_XDATA_I
//  136 
//  137 // Determines if the Child Aging Table Management process is active or not.
//  138 // This feature is optional and it is disabled by default.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  139 uint8 zgChildAgingEnable = FALSE;
zgChildAgingEnable:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  140 
//  141 /*********************************************************************
//  142  * APS GLOBAL VARIABLES
//  143  */
//  144 
//  145 // The maximum number of retries allowed after a transmission failure

        RSEG XDATA_I:XDATA:NOROOT(0)
//  146 uint8 zgApscMaxFrameRetries = APSC_MAX_FRAME_RETRIES;
zgApscMaxFrameRetries:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zgApscMaxFrameRetries>`
        REQUIRE __INIT_XDATA_I
//  147 
//  148 // The maximum number of seconds (milliseconds) to wait for an
//  149 // acknowledgement to a transmitted frame.
//  150 
//  151 // This number is used by polled devices.

        RSEG XDATA_I:XDATA:NOROOT(0)
//  152 uint16 zgApscAckWaitDurationPolled = APSC_ACK_WAIT_DURATION_POLLED;
zgApscAckWaitDurationPolled:
        DATA16
        DS 2
        REQUIRE `?<Initializer for zgApscAckWaitDurationPolled>`
        REQUIRE __INIT_XDATA_I
//  153 
//  154 // This number is used by non-polled devices in the following formula:
//  155 //   (100 mSec) * (_NIB.MaxDepth * zgApsAckWaitMultiplier)

        RSEG XDATA_I:XDATA:NOROOT(0)
//  156 uint8 zgApsAckWaitMultiplier = 2;
zgApsAckWaitMultiplier:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zgApsAckWaitMultiplier>`
        REQUIRE __INIT_XDATA_I
//  157 
//  158 // The maximum number of milliseconds for the end device binding

        RSEG XDATA_I:XDATA:NOROOT(0)
//  159 uint16 zgApsDefaultMaxBindingTime = APS_DEFAULT_MAXBINDING_TIME;
zgApsDefaultMaxBindingTime:
        DATA16
        DS 2
        REQUIRE `?<Initializer for zgApsDefaultMaxBindingTime>`
        REQUIRE __INIT_XDATA_I
//  160 
//  161 // The 64-big identifier of the network to join or form.
//  162 // Default set to all zeros

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  163 uint8 zgApsUseExtendedPANID[Z_EXTADDR_LEN] = {00,00,00,00,00,00,00,00};
zgApsUseExtendedPANID:
        DS 8
        REQUIRE __INIT_XDATA_Z
//  164 
//  165 // A boolean flag that indicates whether it is OK to use insecure join
//  166 // on startup. Default set to TRUE

        RSEG XDATA_I:XDATA:NOROOT(0)
//  167 uint8 zgApsUseInsecureJoin = TRUE;
zgApsUseInsecureJoin:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zgApsUseInsecureJoin>`
        REQUIRE __INIT_XDATA_I
//  168 
//  169 // The radius of broadcast multicast transmissions

        RSEG XDATA_I:XDATA:NOROOT(0)
//  170 uint8 zgApsNonMemberRadius = APS_DEFAULT_NONMEMBER_RADIUS;
zgApsNonMemberRadius:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zgApsNonMemberRadius>`
        REQUIRE __INIT_XDATA_I
//  171 
//  172 // Commissioned Network Address

        RSEG XDATA_I:XDATA:NOROOT(0)
//  173 uint16 zgNwkCommissionedNwkAddr = INVALID_NODE_ADDR;
zgNwkCommissionedNwkAddr:
        DATA16
        DS 2
        REQUIRE `?<Initializer for zgNwkCommissionedNwkAddr>`
        REQUIRE __INIT_XDATA_I
//  174 
//  175 // APS Duplication Rejection table variables

        RSEG XDATA_I:XDATA:NOROOT(0)
//  176 uint16 zgApscDupRejTimeoutInc = DEFAULT_APS_DUP_REJ_TIMEOUT_INCREMENT;
zgApscDupRejTimeoutInc:
        DATA16
        DS 2
        REQUIRE `?<Initializer for zgApscDupRejTimeoutInc>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//  177 uint8  zgApscDupRejTimeoutCount = DEFAULT_APS_DUP_REJ_TIMEOUT;
zgApscDupRejTimeoutCount:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zgApscDupRejTimeoutCount>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//  178 uint16 zgApsMinDupRejTableSize = APS_DUP_REJ_ENTRIES;
zgApsMinDupRejTableSize:
        DATA16
        DS 2
        REQUIRE `?<Initializer for zgApsMinDupRejTableSize>`
        REQUIRE __INIT_XDATA_I
//  179 
//  180 /*********************************************************************
//  181  * SECURITY GLOBAL VARIABLES
//  182  */
//  183 
//  184 // If TRUE, preConfigKey should be configured on all devices on the network
//  185 // If false, it is configured only on the coordinator and sent to other
//  186 // devices upon joining.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  187 uint8 zgPreConfigKeys = FALSE;
zgPreConfigKeys:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  188 
//  189 // The type of link key in use.  This will determine the security
//  190 // policies associated with sending and receiving APS messages.
//  191 // If ZG_GLOBAL_LINK_KEY APS TCLK security may be used for specific APS commands
//  192 // If ZG_UNIQUE_LINK_KEY APS TCLK security is required for specific APS commands

        RSEG XDATA_I:XDATA:NOROOT(0)
//  193 uint8 zgApsLinkKeyType = ZG_GLOBAL_LINK_KEY;
zgApsLinkKeyType:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zgApsLinkKeyType>`
        REQUIRE __INIT_XDATA_I
//  194 
//  195 // With changes introduced in R20 of the ZigBee specification,
//  196 // boolean value of zgUseDefaultTCLK is set depending on zgApsLinkKeyType value.
//  197 //
//  198 // For zgApsLinkKeyType = ZG_GLOBAL_LINK_KEY, zgUseDefaultTCLK = TRUE
//  199 // For zgApsLinkKeyType = ZG_UNIQUE_LINK_KEY, different devices have
//  200 // different value:
//  201 //      ZC should have             zgUseDefaultTCLK = FALSE
//  202 //      Other devices should have  zgUseDefaultTCLK = TRUE
//  203 // This is initialized in zgInitItems()
//  204 // If ZG_UNIQUE_LINK_KEY, individual trust center link key between each device
//  205 // and the trust center should be manually configured via MT_SYS_OSAL_NV_WRITE

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  206 uint8 zgUseDefaultTCLK;
zgUseDefaultTCLK:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  207 
//  208 #if defined ( APP_TP2_TEST_MODE )
//  209 uint8 guTxApsSecON = FALSE;
//  210 uint8 guEnforceRxApsSec = TP_GU_ALL;
//  211 #endif
//  212 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  213 uint8 zgApsAllowR19Sec = FALSE;
zgApsAllowR19Sec:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  214 
//  215 /*********************************************************************
//  216  * ZDO GLOBAL VARIABLES
//  217  */
//  218 
//  219 // Configured PAN ID

        RSEG XDATA_I:XDATA:NOROOT(0)
//  220 uint16 zgConfigPANID = ZDAPP_CONFIG_PAN_ID;
zgConfigPANID:
        DATA16
        DS 2
        REQUIRE `?<Initializer for zgConfigPANID>`
        REQUIRE __INIT_XDATA_I
//  221 
//  222 // Device Logical Type

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  223 uint8 zgDeviceLogicalType = DEVICE_LOGICAL_TYPE;
zgDeviceLogicalType:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  224 
//  225 // Startup Delay

        RSEG XDATA_I:XDATA:NOROOT(0)
//  226 uint8 zgStartDelay = START_DELAY;
zgStartDelay:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zgStartDelay>`
        REQUIRE __INIT_XDATA_I
//  227 
//  228 #if !defined MT_TASK
//  229 // Flag to use verbose (i.e. "cc2480-style") direct MT callbacks in ZDProfile.c, ZDP_IncomingData().

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  230 uint8 zgZdoDirectCB = FALSE;
zgZdoDirectCB:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  231 #endif
//  232 
//  233 // Min number of attempted transmissions for Channel Interference detection

        RSEG XDATA_I:XDATA:NOROOT(0)
//  234 uint8 zgNwkMgrMinTransmissions = ZDNWKMGR_MIN_TRANSMISSIONS;
zgNwkMgrMinTransmissions:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zgNwkMgrMinTransmissions>`
        REQUIRE __INIT_XDATA_I
//  235 
//  236 /*********************************************************************
//  237  * APPLICATION GLOBAL VARIABLES
//  238  */
//  239 
//  240 // Network Manager Mode

        RSEG XDATA_I:XDATA:NOROOT(0)
//  241 uint8 zgNwkMgrMode = ZDNWKMGR_ENABLE;
zgNwkMgrMode:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zgNwkMgrMode>`
        REQUIRE __INIT_XDATA_I
//  242 
//  243 /*********************************************************************
//  244  * NON-STANDARD GLOBAL VARIABLES
//  245  */
//  246 
//  247 // Simple API Endpoint

        RSEG XDATA_I:XDATA:NOROOT(0)
//  248 uint8 zgSapiEndpoint = SAPI_ENDPOINT;
zgSapiEndpoint:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zgSapiEndpoint>`
        REQUIRE __INIT_XDATA_I
//  249 
//  250 /*********************************************************************
//  251  * LOCAL VARIABLES
//  252  */
//  253 
//  254 /*********************************************************************
//  255  * ZGlobal Item Table
//  256  */

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  257 static CONST zgItem_t zgItemTable[] =
zgItemTable:
        DATA16
        DW 143
        DW 1
        DW zgZdoDirectCB
        DW 135
        DW 1
        DW zgDeviceLogicalType
        DW 36
        DW 2
        DW zgPollRate
        DW 37
        DW 2
        DW zgQueuedPollRate
        DW 38
        DW 2
        DW zgResponsePollRate
        DW 39
        DW 2
        DW zgRejoinPollRate
        DW 40
        DW 1
        DW zgMaxDataRetries
        DW 41
        DW 1
        DW zgMaxPollFailureRetries
        DW 132
        DW 4
        DW zgDefaultChannelList
        DW 134
        DW 1
        DW zgDefaultStartingScanDuration
        DW 42
        DW 1
        DW zgStackProfile
        DW 43
        DW 1
        DW zgIndirectMsgTimeout
        DW 44
        DW 1
        DW zgRouteExpiryTime
        DW 45
        DW 8
        DW zgExtendedPANID
        DW 46
        DW 1
        DW zgMaxBcastRetires
        DW 47
        DW 1
        DW zgPassiveAckTimeout
        DW 48
        DW 1
        DW zgBcastDeliveryTime
        DW 49
        DW 1
        DW zgNwkMode
        DW 50
        DW 1
        DW zgConcentratorEnable
        DW 51
        DW 1
        DW zgConcentratorDiscoveryTime
        DW 52
        DW 1
        DW zgConcentratorRadius
        DW 54
        DW 1
        DW zgConcentratorRC
        DW 56
        DW 1
        DW zgNwkSrcRtgExpiryTime
        DW 57
        DW 1
        DW zgRouteDiscoveryTime
        DW 131
        DW 2
        DW zgConfigPANID
        DW 99
        DW 1
        DW zgPreConfigKeys
        DW 100
        DW 1
        DW zgSecurityMode
        DW 101
        DW 1
        DW zgSecurePermitJoin
        DW 109
        DW 1
        DW zgUseDefaultTCLK
        DW 113
        DW 8
        DW zgApsTrustCenterAddr
        DW 102
        DW 1
        DW zgApsLinkKeyType
        DW 67
        DW 1
        DW zgApscMaxFrameRetries
        DW 68
        DW 2
        DW zgApscAckWaitDurationPolled
        DW 69
        DW 1
        DW zgApsAckWaitMultiplier
        DW 70
        DW 2
        DW zgApsDefaultMaxBindingTime
        DW 71
        DW 8
        DW zgApsUseExtendedPANID
        DW 72
        DW 1
        DW zgApsUseInsecureJoin
        DW 75
        DW 1
        DW zgApsNonMemberRadius
        DW 4
        DW 1
        DW zgStartDelay
        DW 161
        DW 1
        DW zgSapiEndpoint
        DW 55
        DW 1
        DW zgNwkMgrMode
        DW 136
        DW 1
        DW zgNwkMgrMinTransmissions
        DW 60
        DW 1
        DW zgRouterOffAssocCleanup
        DW 61
        DW 1
        DW zgNwkLeaveRequestAllowed
        DW 73
        DW 2
        DW zgNwkCommissionedNwkAddr
        DW 103
        DW 1
        DW zgApsAllowR19Sec
        DW 77
        DW 2
        DW zgApscDupRejTimeoutInc
        DW 78
        DW 1
        DW zgApscDupRejTimeoutCount
        DW 79
        DW 2
        DW zgApsMinDupRejTableSize
        DW 62
        DW 1
        DW zgChildAgingEnable
        DW 0
        DW 0
        DW 0H
//  258 {
//  259 #if defined ( NV_INIT )
//  260 #if !defined MT_TASK
//  261   {
//  262     ZCD_NV_ZDO_DIRECT_CB, sizeof(zgZdoDirectCB), &zgZdoDirectCB
//  263   },
//  264 #endif
//  265   {
//  266     ZCD_NV_LOGICAL_TYPE, sizeof(zgDeviceLogicalType), &zgDeviceLogicalType
//  267   },
//  268   {
//  269     ZCD_NV_POLL_RATE, sizeof(zgPollRate), &zgPollRate
//  270   },
//  271   {
//  272     ZCD_NV_QUEUED_POLL_RATE, sizeof(zgQueuedPollRate), &zgQueuedPollRate
//  273   },
//  274   {
//  275     ZCD_NV_RESPONSE_POLL_RATE, sizeof(zgResponsePollRate), &zgResponsePollRate
//  276   },
//  277   {
//  278     ZCD_NV_REJOIN_POLL_RATE, sizeof(zgRejoinPollRate), &zgRejoinPollRate
//  279   },
//  280   {
//  281     ZCD_NV_DATA_RETRIES, sizeof(zgMaxDataRetries), &zgMaxDataRetries
//  282   },
//  283   {
//  284     ZCD_NV_POLL_FAILURE_RETRIES, sizeof(zgMaxPollFailureRetries), &zgMaxPollFailureRetries
//  285   },
//  286   {
//  287     ZCD_NV_CHANLIST, sizeof(zgDefaultChannelList), &zgDefaultChannelList
//  288   },
//  289   {
//  290     ZCD_NV_SCAN_DURATION, sizeof(zgDefaultStartingScanDuration), &zgDefaultStartingScanDuration
//  291   },
//  292   {
//  293     ZCD_NV_STACK_PROFILE, sizeof(zgStackProfile), &zgStackProfile
//  294   },
//  295   {
//  296     ZCD_NV_INDIRECT_MSG_TIMEOUT, sizeof(zgIndirectMsgTimeout), &zgIndirectMsgTimeout
//  297   },
//  298   {
//  299     ZCD_NV_ROUTE_EXPIRY_TIME, sizeof(zgRouteExpiryTime), &zgRouteExpiryTime
//  300   },
//  301   {
//  302     ZCD_NV_EXTENDED_PAN_ID, Z_EXTADDR_LEN, zgExtendedPANID
//  303   },
//  304   {
//  305     ZCD_NV_BCAST_RETRIES, sizeof(zgMaxBcastRetires), &zgMaxBcastRetires
//  306   },
//  307   {
//  308     ZCD_NV_PASSIVE_ACK_TIMEOUT, sizeof(zgPassiveAckTimeout), &zgPassiveAckTimeout
//  309   },
//  310   {
//  311     ZCD_NV_BCAST_DELIVERY_TIME, sizeof(zgBcastDeliveryTime), &zgBcastDeliveryTime
//  312   },
//  313   {
//  314     ZCD_NV_NWK_MODE, sizeof(zgNwkMode), &zgNwkMode
//  315   },
//  316   {
//  317     ZCD_NV_CONCENTRATOR_ENABLE, sizeof(zgConcentratorEnable), &zgConcentratorEnable
//  318   },
//  319   {
//  320     ZCD_NV_CONCENTRATOR_DISCOVERY, sizeof(zgConcentratorDiscoveryTime), &zgConcentratorDiscoveryTime
//  321   },
//  322   {
//  323     ZCD_NV_CONCENTRATOR_RADIUS, sizeof(zgConcentratorRadius), &zgConcentratorRadius
//  324   },
//  325   {
//  326     ZCD_NV_CONCENTRATOR_RC, sizeof(zgConcentratorRC), &zgConcentratorRC
//  327   },
//  328   {
//  329     ZCD_NV_SRC_RTG_EXPIRY_TIME, sizeof(zgNwkSrcRtgExpiryTime), &zgNwkSrcRtgExpiryTime
//  330   },
//  331   {
//  332     ZCD_NV_ROUTE_DISCOVERY_TIME, sizeof(zgRouteDiscoveryTime), &zgRouteDiscoveryTime
//  333   },
//  334 #ifndef NONWK
//  335   {
//  336     ZCD_NV_PANID, sizeof(zgConfigPANID), &zgConfigPANID
//  337   },
//  338   {
//  339     ZCD_NV_PRECFGKEYS_ENABLE, sizeof(zgPreConfigKeys), &zgPreConfigKeys
//  340   },
//  341   {
//  342     ZCD_NV_SECURITY_MODE, sizeof(zgSecurityMode), &zgSecurityMode
//  343   },
//  344   {
//  345     ZCD_NV_SECURE_PERMIT_JOIN, sizeof(zgSecurePermitJoin), &zgSecurePermitJoin
//  346   },
//  347   {
//  348     ZCD_NV_USE_DEFAULT_TCLK, sizeof(zgUseDefaultTCLK), &zgUseDefaultTCLK
//  349   },
//  350   {
//  351     ZCD_NV_TRUSTCENTER_ADDR, Z_EXTADDR_LEN, zgApsTrustCenterAddr
//  352   },
//  353   {
//  354     ZCD_NV_APS_LINK_KEY_TYPE, sizeof(zgApsLinkKeyType), &zgApsLinkKeyType
//  355   },
//  356 #endif // NONWK
//  357   {
//  358     ZCD_NV_APS_FRAME_RETRIES, sizeof(zgApscMaxFrameRetries), &zgApscMaxFrameRetries
//  359   },
//  360   {
//  361     ZCD_NV_APS_ACK_WAIT_DURATION, sizeof(zgApscAckWaitDurationPolled), &zgApscAckWaitDurationPolled
//  362   },
//  363   {
//  364     ZCD_NV_APS_ACK_WAIT_MULTIPLIER, sizeof(zgApsAckWaitMultiplier), &zgApsAckWaitMultiplier
//  365   },
//  366   {
//  367     ZCD_NV_BINDING_TIME, sizeof(zgApsDefaultMaxBindingTime), &zgApsDefaultMaxBindingTime
//  368   },
//  369   {
//  370     ZCD_NV_APS_USE_EXT_PANID, Z_EXTADDR_LEN, zgApsUseExtendedPANID
//  371   },
//  372   {
//  373     ZCD_NV_APS_USE_INSECURE_JOIN, sizeof(zgApsUseInsecureJoin), &zgApsUseInsecureJoin
//  374   },
//  375   {
//  376     ZCD_NV_APS_NONMEMBER_RADIUS, sizeof(zgApsNonMemberRadius), &zgApsNonMemberRadius
//  377   },
//  378   {
//  379     ZCD_NV_START_DELAY, sizeof(zgStartDelay), &zgStartDelay
//  380   },
//  381   {
//  382     ZCD_NV_SAPI_ENDPOINT, sizeof(zgSapiEndpoint), &zgSapiEndpoint
//  383   },
//  384   {
//  385     ZCD_NV_NWK_MGR_MODE, sizeof(zgNwkMgrMode), &zgNwkMgrMode
//  386   },
//  387   {
//  388     ZCD_NV_NWKMGR_MIN_TX, sizeof(zgNwkMgrMinTransmissions), &zgNwkMgrMinTransmissions
//  389   },
//  390   {
//  391     ZCD_NV_ROUTER_OFF_ASSOC_CLEANUP, sizeof(zgRouterOffAssocCleanup), &zgRouterOffAssocCleanup
//  392   },
//  393   {
//  394     ZCD_NV_NWK_LEAVE_REQ_ALLOWED, sizeof(zgNwkLeaveRequestAllowed), &zgNwkLeaveRequestAllowed
//  395   },
//  396   {
//  397     ZCD_NV_COMMISSIONED_NWK_ADDR, sizeof(zgNwkCommissionedNwkAddr), &zgNwkCommissionedNwkAddr
//  398   },
//  399   {
//  400     ZCD_NV_APS_ALLOW_R19_SECURITY, sizeof(zgApsAllowR19Sec), &zgApsAllowR19Sec
//  401   },
//  402   {
//  403     ZCD_NV_APS_DUPREJ_TIMEOUT_INC, sizeof(zgApscDupRejTimeoutInc), &zgApscDupRejTimeoutInc
//  404   },
//  405   {
//  406     ZCD_NV_APS_DUPREJ_TIMEOUT_COUNT, sizeof(zgApscDupRejTimeoutCount), &zgApscDupRejTimeoutCount
//  407   },
//  408   {
//  409     ZCD_NV_APS_DUPREJ_TABLE_SIZE, sizeof(zgApsMinDupRejTableSize), &zgApsMinDupRejTableSize
//  410   },
//  411 #if defined ( ZIGBEE_CHILD_AGING )
//  412   {
//  413     ZCD_NV_NWK_CHILD_AGE_ENABLE, sizeof(zgChildAgingEnable), &zgChildAgingEnable
//  414   },
//  415 #endif // ZIGBEE_CHILD_AGING
//  416 #endif // NV_INIT
//  417   // Last item -- DO NOT MOVE IT!
//  418   {
//  419     0x00, 0, NULL
//  420   }
//  421 };
//  422 
//  423 /*********************************************************************
//  424  * LOCAL FUNCTIONS
//  425  */
//  426 
//  427 static uint8 zgItemInit( uint16 id, uint16 len, void *buf, uint8 setDefault );
//  428 
//  429 #ifndef NONWK
//  430 static uint8 zgPreconfigKeyInit( uint8 setDefault );
//  431 #endif
//  432 
//  433 /*********************************************************************
//  434  * @fn       zgItemInit()
//  435  *
//  436  * @brief
//  437  *
//  438  *   Initialize a global item. If the item doesn't exist in NV memory,
//  439  *   write the system default (value passed in) into NV memory. But if
//  440  *   it exists, set the item to the value stored in NV memory.
//  441  *
//  442  *   Also, if setDefault is TRUE and the item exists, we will write
//  443  *   the default value to NV space.
//  444  *
//  445  * @param   id - item id
//  446  * @param   len - item len
//  447  * @param   buf - pointer to the item
//  448  * @param   setDefault - TRUE to set default, not read
//  449  *
//  450  * @return  ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
//  451  *          exist in NV, NV_OPER_FAILED if failure.
//  452  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  453 static uint8 zgItemInit( uint16 id, uint16 len, void *buf, uint8 setDefault )
zgItemInit:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function zgItemInit
        CODE
//  454 {
        FUNCALL zgItemInit, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zgItemInit, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zgItemInit, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        MOV     A,#-0xd
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 13)
        ; Saved register size: 13
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V2,R4
        MOV     ?V3,R5
        MOV     ?V4,R1
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V1,A
//  455   uint8 status;
//  456 
//  457   // If the item doesn't exist in NV memory, create and initialize
//  458   // it with the value passed in.
//  459   status = osal_nv_item_init( id, len, buf );
        ; Setup parameters for call to function osal_nv_item_init
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     R4,?V2
        MOV     R5,?V3
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     A,R1
        MOV     R1,A
//  460   if ( status == ZSUCCESS )
        MOV     A,R1
        JNZ     ??zgItemInit_0
//  461   {
//  462     if ( setDefault )
        MOV     A,?V4
        JZ      ??zgItemInit_1
//  463     {
//  464       // Write the default value back to NV
//  465       status = osal_nv_write( id, 0, len, buf );
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     A,R1
        MOV     R1,A
        SJMP    ??zgItemInit_0
//  466     }
//  467     else
//  468     {
//  469       // The item exists in NV memory, read it from NV memory
//  470       status = osal_nv_read( id, 0, len, buf );
??zgItemInit_1:
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     A,R1
        MOV     R1,A
//  471     }
//  472   }
//  473 
//  474   return (status);
??zgItemInit_0:
        MOV     R7,#0x5
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
//  475 }
          CFI EndBlock cfiBlock0
//  476 
//  477 /*********************************************************************
//  478  * API FUNCTIONS
//  479  */
//  480 
//  481 /*********************************************************************
//  482  * @fn          zgInit
//  483  *
//  484  * @brief
//  485  *
//  486  *   Initialize the Z-Stack Globals. If an item doesn't exist in
//  487  *   NV memory, write the system default into NV memory. But if
//  488  *   it exists, set the item to the value stored in NV memory.
//  489  *
//  490  * NOTE: The Startup Options (ZCD_NV_STARTUP_OPTION) indicate
//  491  *       that the Config state items (zgItemTable) need to be
//  492  *       set to defaults (ZCD_STARTOPT_DEFAULT_CONFIG_STATE). The
//  493  *
//  494  * @param       none
//  495  *
//  496  * @return      ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
//  497  *              exist in NV, NV_OPER_FAILED if failure.
//  498  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  499 uint8 zgInit( void )
zgInit:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function zgInit
        CODE
//  500 {
        FUNCALL zgInit, zgReadStartupOptions
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zgInit, ZMacGetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zgInit, zgInitItems
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zgInit, zgWriteStartupOptions
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  501   uint8  setDefault = FALSE;
        MOV     R6,#0x0
//  502 
//  503   // Do we want to default the Config state values
//  504   if ( zgReadStartupOptions() & ZCD_STARTOPT_DEFAULT_CONFIG_STATE )
        ; Setup parameters for call to function zgReadStartupOptions
        LCALL   `??zgReadStartupOptions::?relay`; Banked call to: zgReadStartupOptions
        MOV     A,R1
        MOV     R0,A
        MOV     A,R0
        MOV     C,0xE0 /* A   */.0
        JNC     ??zgInit_0
//  505   {
//  506     setDefault = TRUE;
        MOV     R6,#0x1
//  507   }
//  508 
//  509 #if defined ( FEATURE_SYSTEM_STATS )
//  510   // This sections tracks the number of resets
//  511   uint16 bootCnt = 0;
//  512 
//  513   // Update the Boot Counter
//  514   if ( osal_nv_item_init( ZCD_NV_BOOTCOUNTER, sizeof(bootCnt), &bootCnt ) == ZSUCCESS )
//  515   {
//  516     // Get the old value from NV memory
//  517     osal_nv_read( ZCD_NV_BOOTCOUNTER, 0, sizeof(bootCnt), &bootCnt );
//  518   }
//  519 
//  520   // Increment the Boot Counter and store it into NV memory
//  521   if ( setDefault )
//  522   {
//  523     bootCnt = 0;
//  524   }
//  525   else
//  526   {
//  527     bootCnt++;
//  528   }
//  529 
//  530   osal_nv_write( ZCD_NV_BOOTCOUNTER, 0, sizeof(bootCnt), &bootCnt );
//  531 #endif  // FEATURE_SYSTEM_STATS
//  532 
//  533   // Initialize the Extended PAN ID as my own extended address
//  534   ZMacGetReq( ZMacExtAddr, zgExtendedPANID );
??zgInit_0:
        ; Setup parameters for call to function ZMacGetReq
        MOV     R2,#zgExtendedPANID & 0xff
        MOV     R3,#(zgExtendedPANID >> 8) & 0xff
        MOV     R1,#-0x1e
        LCALL   `??ZMacGetReq::?relay`; Banked call to: ZMacGetReq
        MOV     A,R1
//  535 
//  536   // Initialize the items table
//  537   zgInitItems( setDefault );
        ; Setup parameters for call to function zgInitItems
        MOV     A,R6
        MOV     R1,A
        LCALL   `??zgInitItems::?relay`; Banked call to: zgInitItems
//  538 
//  539 #ifndef NONWK
//  540   if ( ZG_SECURE_ENABLED )
//  541   {
//  542     // Initialize the Pre-Configured Key to the default key
//  543     zgPreconfigKeyInit( setDefault );
//  544 
//  545     // Initialize NV items for all Keys: NWK, APS, TCLK and Master
//  546     ZDSecMgrInitNVKeyTables( setDefault );
//  547   }
//  548 #endif // NONWK
//  549 
//  550   // Clear the Config State default
//  551   if ( setDefault )
        MOV     A,R6
        JZ      ??zgInit_1
//  552   {
//  553     zgWriteStartupOptions( ZG_STARTUP_CLEAR, ZCD_STARTOPT_DEFAULT_CONFIG_STATE );
        ; Setup parameters for call to function zgWriteStartupOptions
        MOV     R2,#0x1
        MOV     R1,#0x0
        LCALL   `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
        MOV     A,R1
//  554   }
//  555 
//  556   return ( ZSUCCESS );
??zgInit_1:
        MOV     R1,#0x0
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
//  557 }
          CFI EndBlock cfiBlock1
//  558 
//  559 /*********************************************************************
//  560  * @fn          zgInitItems
//  561  *
//  562  * @brief       Initializes RAM variables from NV.  If NV items don't
//  563  *              exist, then the NV is initialize with what is in RAM
//  564  *              variables.
//  565  *
//  566  * @param       none
//  567  *
//  568  * @return      none
//  569  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  570 void zgInitItems( uint8 setDefault )
zgInitItems:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function zgInitItems
        CODE
//  571 {
        FUNCALL zgInitItems, zgItemInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  572   uint8  i = 0;
        MOV     R7,#0x0
//  573 
//  574   if ( ZG_BUILD_COORDINATOR_TYPE && ( zgApsLinkKeyType == ZG_UNIQUE_LINK_KEY ) )
        MOV     DPTR,#zgApsLinkKeyType
        MOVX    A,@DPTR
        JNZ     ??zgInitItems_0
//  575   {
//  576     zgUseDefaultTCLK = FALSE;
        MOV     DPTR,#zgUseDefaultTCLK
        MOV     A,#0x0
        MOVX    @DPTR,A
        LJMP    ??zgInitItems_1 & 0xFFFF
//  577   }
//  578   else
//  579   {
//  580     // Most of the time default TCLK will be used
//  581     zgUseDefaultTCLK = TRUE;
??zgInitItems_0:
        MOV     DPTR,#zgUseDefaultTCLK
        MOV     A,#0x1
        MOVX    @DPTR,A
        LJMP    ??zgInitItems_1 & 0xFFFF
//  582   }
//  583 
//  584   while ( zgItemTable[i].id != 0x00 )
//  585   {
//  586     // Initialize the item
//  587     zgItemInit( zgItemTable[i].id, zgItemTable[i].len, zgItemTable[i].buf, setDefault  );
??zgInitItems_2:
        ; Setup parameters for call to function zgItemInit
        MOV     A,R7
        MOV     R0,A
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0x6
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0x6
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#(zgItemTable + 4) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((zgItemTable + 4) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        LCALL   ?PUSH_XSTACK8_C_TWO
          CFI CFA_XSP16 add(XSP16, 11)
        MOV     A,R6
        MOV     R1,A
        MOV     A,R7
        MOV     R2,A
        MOV     R3,#0x0
        MOV     A,R2
        MOV     B,#0x6
        MUL     AB
        XCH     A,R2
        MOV     R0,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R0
        MOV     R0,A
        MOV     B,#0x6
        MOV     A,R3
        MUL     AB
        ADD     A,R0
        MOV     R3,A
        MOV     A,#(zgItemTable + 2) & 0xff
        ADD     A,R2
        MOV     DPL,A
        MOV     A,#((zgItemTable + 2) >> 8) & 0xff
        ADDC    A,R3
        MOV     DPH,A
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R4,A
        MOV     A,#0x1
        MOVC    A,@A+DPTR
        MOV     R5,A
        XCH     A,R1
        MOV     R6,A
        XCH     A,R1
        MOV     A,R7
        MOV     R0,A
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0x6
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0x6
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#zgItemTable & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(zgItemTable >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R2,A
        MOV     A,#0x1
        MOVC    A,@A+DPTR
        MOV     R3,A
        XCH     A,R6
        MOV     R1,A
        XCH     A,R6
        LCALL   `??zgItemInit::?relay`; Banked call to: zgItemInit
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
        MOV     A,R1
//  588 
//  589     // Move on to the next item
//  590     i++;
        INC     R7
//  591   }
??zgInitItems_1:
        MOV     A,R7
        MOV     R0,A
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0x6
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0x6
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#zgItemTable & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(zgItemTable >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,#0x1
        MOVC    A,@A+DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      $+5
        LJMP    ??zgInitItems_2 & 0xFFFF
//  592 }
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
          CFI EndBlock cfiBlock2
//  593 
//  594 /*********************************************************************
//  595  * @fn          zgReadStartupOptions
//  596  *
//  597  * @brief       Reads the ZCD_NV_STARTUP_OPTION NV Item.
//  598  *
//  599  * @param       none
//  600  *
//  601  * @return      the ZCD_NV_STARTUP_OPTION NV item
//  602  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  603 uint8 zgReadStartupOptions( void )
zgReadStartupOptions:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function zgReadStartupOptions
        CODE
//  604 {
        FUNCALL zgReadStartupOptions, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zgReadStartupOptions, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
//  605   // Default to Use Config State and Use Network State
//  606   uint8 startupOption = 0;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x0
        MOVX    @DPTR,A
//  607 
//  608   // This should have been done in ZMain.c, but just in case.
//  609   if ( osal_nv_item_init( ZCD_NV_STARTUP_OPTION,
//  610                           sizeof(startupOption),
//  611                           &startupOption ) == ZSUCCESS )
        ; Setup parameters for call to function osal_nv_item_init
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     R2,#0x3
        MOV     R3,#0x0
        LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        MOV     A,R1
        JNZ     ??zgReadStartupOptions_0
//  612   {
//  613     // Read saved startup control
//  614     osal_nv_read( ZCD_NV_STARTUP_OPTION,
//  615                   0,
//  616                   sizeof( startupOption ),
//  617                   &startupOption);
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     ?V0,#0x1
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x3
        MOV     R3,#0x0
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        MOV     A,R1
//  618   }
//  619   return ( startupOption );
??zgReadStartupOptions_0:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
//  620 }
          CFI EndBlock cfiBlock3
//  621 
//  622 /*********************************************************************
//  623  * @fn          zgWriteStartupOptions
//  624  *
//  625  * @brief       Writes bits into the ZCD_NV_STARTUP_OPTION NV Item.
//  626  *
//  627  * @param       action - ZG_STARTUP_SET set bit, ZG_STARTUP_CLEAR to
//  628  *               clear bit. The set bit is an OR operation, and the
//  629  *               clear bit is an AND ~(bitOptions) operation.
//  630  *
//  631  * @param       bitOptions - which bits to perform action on:
//  632  *                      ZCD_STARTOPT_DEFAULT_CONFIG_STATE
//  633  *                      ZCD_STARTOPT_DEFAULT_NETWORK_STATE
//  634  *
//  635  * @return      ZSUCCESS if successful
//  636  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  637 uint8 zgWriteStartupOptions( uint8 action, uint8 bitOptions )
zgWriteStartupOptions:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function zgWriteStartupOptions
        CODE
//  638 {
        FUNCALL zgWriteStartupOptions, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zgWriteStartupOptions, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        MOV     A,R1
        MOV     R6,A
        MOV     A,R2
        MOV     R7,A
//  639   uint8 status;
//  640   uint8 startupOptions = 0;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x0
        MOVX    @DPTR,A
//  641 
//  642   status = osal_nv_read( ZCD_NV_STARTUP_OPTION,
//  643                          0,
//  644                          sizeof( startupOptions ),
//  645                          &startupOptions );
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     ?V0,#0x1
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x3
        MOV     R3,#0x0
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        MOV     A,R1
        MOV     R1,A
//  646 
//  647   if ( status == ZSUCCESS )
        MOV     A,R1
        JNZ     ??zgWriteStartupOptions_0
//  648   {
//  649     if ( action == ZG_STARTUP_SET )
        MOV     A,#-0x1
        XRL     A,R6
        JNZ     ??zgWriteStartupOptions_1
//  650     {
//  651       // Set bits
//  652       startupOptions |= bitOptions;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ORL     A,R7
        MOVX    @DPTR,A
        SJMP    ??zgWriteStartupOptions_2
//  653     }
//  654     else
//  655     {
//  656       // Clear bits
//  657       startupOptions &= (bitOptions ^ 0xFF);
??zgWriteStartupOptions_1:
        MOV     A,#-0x1
        XRL     A,R7
        MOV     R0,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ANL     A,R0
        MOVX    @DPTR,A
//  658     }
//  659 
//  660     // Changed?
//  661     status = osal_nv_write( ZCD_NV_STARTUP_OPTION,
//  662                             0,
//  663                             sizeof( startupOptions ),
//  664                             &startupOptions );
??zgWriteStartupOptions_2:
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     ?V0,#0x1
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x3
        MOV     R3,#0x0
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        MOV     A,R1
        MOV     R1,A
//  665   }
//  666 
//  667   return ( status );
??zgWriteStartupOptions_0:
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
//  668 }
          CFI EndBlock cfiBlock4
//  669 
//  670 /*********************************************************************
//  671  * @fn          zgSetItem
//  672  *
//  673  * @brief       Set RAM variables from set-NV, if it exist in the zgItemTable
//  674  *
//  675  * @param       id - NV ID
//  676  *              len - NV item length
//  677  *              buf - pointer to the input buffer
//  678  *
//  679  * @return      none
//  680  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  681 void zgSetItem( uint16 id, uint16 len, void *buf )
zgSetItem:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function zgSetItem
        CODE
//  682 {
        FUNCALL zgSetItem, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
//  683 
//  684   uint8  i = 0;
        MOV     R6,#0x0
        SJMP    ??zgSetItem_0
//  685 
//  686   // Look up the NV item table
//  687   while ( zgItemTable[i].id != 0x00 )
//  688   {
//  689     if( zgItemTable[i].id == id )
//  690     {
//  691       if ( zgItemTable[i].len == len )
//  692       {
//  693         osal_memcpy( zgItemTable[i].buf, buf, len );
//  694       }
//  695       break;
//  696     }
//  697     // Move on to the next item
//  698     i++;
??zgSetItem_1:
        INC     R6
??zgSetItem_0:
        MOV     A,R6
        MOV     R0,A
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0x6
        MUL     AB
        XCH     A,R0
        MOV     R7,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R7
        MOV     R7,A
        MOV     B,#0x6
        MOV     A,R1
        MUL     AB
        ADD     A,R7
        MOV     R1,A
        MOV     A,#zgItemTable & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(zgItemTable >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,#0x1
        MOVC    A,@A+DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JNZ     $+5
        LJMP    ??zgSetItem_2 & 0xFFFF
        MOV     A,R6
        MOV     R0,A
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0x6
        MUL     AB
        XCH     A,R0
        MOV     R7,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R7
        MOV     R7,A
        MOV     B,#0x6
        MOV     A,R1
        MUL     AB
        ADD     A,R7
        MOV     R1,A
        MOV     A,#zgItemTable & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(zgItemTable >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,#0x1
        MOVC    A,@A+DPTR
        MOV     R1,A
        MOV     A,R2
        XRL     A,R0
        JNZ     ??zgSetItem_3
        MOV     A,R3
        XRL     A,R1
??zgSetItem_3:
        JNZ     ??zgSetItem_1
        MOV     A,R6
        MOV     R0,A
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0x6
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0x6
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#(zgItemTable + 2) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((zgItemTable + 2) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,#0x1
        MOVC    A,@A+DPTR
        MOV     R1,A
        MOV     A,R4
        XRL     A,R0
        JNZ     ??zgSetItem_4
        MOV     A,R5
        XRL     A,R1
??zgSetItem_4:
        JNZ     ??zgSetItem_2
        ; Setup parameters for call to function osal_memcpy
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V1,A
        MOV     ?V2,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R6
        MOV     R0,A
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0x6
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0x6
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#(zgItemTable + 4) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((zgItemTable + 4) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R2,A
        MOV     A,#0x1
        MOVC    A,@A+DPTR
        MOV     R3,A
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
//  699   }
//  700 }
??zgSetItem_2:
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
          CFI EndBlock cfiBlock5

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgPollRate>`:
        DATA16
        DW 1000

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgQueuedPollRate>`:
        DATA16
        DW 100

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgResponsePollRate>`:
        DATA16
        DW 100

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgRejoinPollRate>`:
        DATA16
        DW 440

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgMaxDataRetries>`:
        DATA8
        DB 2

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgMaxPollFailureRetries>`:
        DATA8
        DB 2

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgDefaultChannelList>`:
        DATA32
        DD 8192

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgDefaultStartingScanDuratio`:
        DATA8
        DB 5

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgStackProfile>`:
        DATA8
        DB 2

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgIndirectMsgTimeout>`:
        DATA8
        DB 7

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgSecurePermitJoin>`:
        DATA8
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgRouteDiscoveryTime>`:
        DATA8
        DB 5

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgRouteExpiryTime>`:
        DATA8
        DB 30

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgMaxBcastRetires>`:
        DATA8
        DB 2

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgPassiveAckTimeout>`:
        DATA8
        DB 5

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgBcastDeliveryTime>`:
        DATA8
        DB 30

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgNwkMode>`:
        DATA8
        DB 2

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgConcentratorRadius>`:
        DATA8
        DB 10

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgNwkSrcRtgExpiryTime>`:
        DATA8
        DB 10

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgNwkLeaveRequestAllowed>`:
        DATA8
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgApscMaxFrameRetries>`:
        DATA8
        DB 3

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgApscAckWaitDurationPolled>`:
        DATA16
        DW 3000

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgApsAckWaitMultiplier>`:
        DATA8
        DB 2

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgApsDefaultMaxBindingTime>`:
        DATA16
        DW 16000

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgApsUseInsecureJoin>`:
        DATA8
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgApsNonMemberRadius>`:
        DATA8
        DB 2

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgNwkCommissionedNwkAddr>`:
        DATA16
        DW 65534

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgApscDupRejTimeoutInc>`:
        DATA16
        DW 1000

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgApscDupRejTimeoutCount>`:
        DATA8
        DB 10

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgApsMinDupRejTableSize>`:
        DATA16
        DW 5

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgApsLinkKeyType>`:
        DATA8
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgConfigPANID>`:
        DATA16
        DW 43981

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgStartDelay>`:
        DATA8
        DB 10

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgNwkMgrMinTransmissions>`:
        DATA8
        DB 20

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgNwkMgrMode>`:
        DATA8
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zgSapiEndpoint>`:
        DATA8
        DB 224

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zgItemInit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zgItemInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zgInit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zgInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zgInitItems::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zgInitItems

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zgReadStartupOptions::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zgReadStartupOptions

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zgWriteStartupOptions::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zgWriteStartupOptions

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zgSetItem::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zgSetItem

        END
//  701 
//  702 #ifndef NONWK
//  703 /*********************************************************************
//  704  * @fn       zgPreconfigKeyInit()
//  705  *
//  706  * @brief
//  707  *
//  708  *   Initialize ZCD_NV_PRECFGKEY NV item. If the item doesn't exist in NV memory,
//  709  *   write the system default (value passed in) into NV memory. But if
//  710  *   it exists do not overwrite it.
//  711  *
//  712  *   Also, if setDefault is TRUE and the item exists, we will write
//  713  *   the default value to NV space.
//  714  *
//  715  * @param   setDefault - TRUE to set default
//  716  *
//  717  * @return  ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
//  718  *          exist in NV, NV_OPER_FAILED if failure.
//  719  */
//  720 static uint8 zgPreconfigKeyInit( uint8 setDefault )
//  721 {
//  722   uint8 zgPreConfigKey[SEC_KEY_LEN];
//  723   uint8 status;
//  724 
//  725   // Initialize the Pre-Configured Key to the default key
//  726   osal_memcpy( zgPreConfigKey, defaultKey, SEC_KEY_LEN );
//  727 
//  728   // If the item doesn't exist in NV memory, create and initialize it
//  729   status = osal_nv_item_init( ZCD_NV_PRECFGKEY, SEC_KEY_LEN, zgPreConfigKey );
//  730   if ( status == ZSUCCESS )
//  731   {
//  732     if ( setDefault )
//  733     {
//  734       // Write the default value back to NV
//  735       status =  osal_nv_write( ZCD_NV_PRECFGKEY, 0, SEC_KEY_LEN, zgPreConfigKey );
//  736     }
//  737   }
//  738 
//  739   // clear local copy of default key
//  740   osal_memset(zgPreConfigKey, 0x00, SEC_KEY_LEN);
//  741 
//  742   return (status);
//  743 }
//  744 #endif
//  745 
//  746 /*********************************************************************
//  747 *********************************************************************/
// 
// 892 bytes in segment BANKED_CODE
//  36 bytes in segment BANK_RELAYS
// 306 bytes in segment CODE_C
//  49 bytes in segment XDATA_I
//  49 bytes in segment XDATA_ID
//  35 bytes in segment XDATA_Z
// 
// 1 283 bytes of CODE  memory
//    84 bytes of XDATA memory
//
//Errors: none
//Warnings: none

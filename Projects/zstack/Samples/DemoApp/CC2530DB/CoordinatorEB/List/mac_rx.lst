###############################################################################
#
# IAR C/C++ Compiler V9.20.1.2476 for 8051                22/Feb/2017  14:31:41
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\koen\ZigBee-Code-WTWS\Components\mac\low_level\srf04\mac_rx.c
#    Command line       =  
#        -f
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00002000 -DZDAPP_CONFIG_PAN_ID=0xABCD
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={'H', 'O', 'G', 'E', 'S',
#        'C', 'H', 'O', 'O', 'L', 'U', 'T', 'R', 'E', 'C', 'H'}"
#        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440
#        C:\Users\koen\ZigBee-Code-WTWS\Components\mac\low_level\srf04\mac_rx.c
#        -D HOLD_AUTO_START -D BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D
#        NV_RESTORE -D HAL_UART=TRUE -lC
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\
#        -lA
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\
#        --diag_suppress Pe001,Pa010,Pe1665 -o
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\Obj\
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\Source\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ol --require_prototypes
#    List file          =  
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\mac_rx.lst
#    Object file        =  
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\Obj\mac_rx.r51
#
###############################################################################

C:\Users\koen\ZigBee-Code-WTWS\Components\mac\low_level\srf04\mac_rx.c
      1          /**************************************************************************************************
      2            Filename:       mac_rx.c
      3            Revised:        $Date: 2014-05-16 10:22:59 -0700 (Fri, 16 May 2014) $
      4            Revision:       $Revision: 38564 $
      5          
      6            Description:    Describe the purpose and contents of the file.
      7          
      8          
      9            Copyright 2006-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /* ------------------------------------------------------------------------------------------------
     41           *                                          Includes
     42           * ------------------------------------------------------------------------------------------------
     43           */
     44          
     45          /* hal */
     46          #include "hal_defs.h"
     47          #include "hal_types.h"
     48          
     49          /* OSAL */
     50          #include "OSAL.h"
     51          
     52          /* high-level */
     53          #include "mac_high_level.h"
     54          #include "mac_spec.h"
     55          #include "mac_pib.h"
     56          
     57          /* MAC security */
     58          #include "mac_security.h"
     59          
     60          /* exported low-level */
     61          #include "mac_low_level.h"
     62          
     63          /* low-level specific */
     64          #include "mac_rx.h"
     65          #include "mac_tx.h"
     66          #include "mac_rx_onoff.h"
     67          #include "mac_radio.h"
     68          
     69          /* target specific */
     70          #include "mac_radio_defs.h"

   \                                 In  segment SFR_AN, at 0x91
   \   unsigned char volatile __sfr RFIRQF1
   \                     RFIRQF1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9b
   \   unsigned char volatile __sfr S1CON
   \                     S1CON:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe1
   \   unsigned char volatile __sfr RFST
   \                     RFST:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe9
   \   unsigned char volatile __sfr RFIRQF0
   \                     RFIRQF0:
   \   000000                DS 1
     71          #include "mac_autopend.h"
     72          
     73          /* debug */
     74          #include "mac_assert.h"
     75          
     76          #ifdef ACK_DONE_ISR_WORKAROUND
     77          typedef struct macTimer_s
     78          {
     79            struct macTimer_s     *pNext;                     /* next timer in queue */
     80            int32                 backoff;                    /* timer expiration count */
     81            void                  (*pFunc)(uint8 parameter);  /* timer callback function */
     82            uint8                 parameter;                  /* callback function parameter */
     83          } macTimer_t;
     84          
     85          extern macTimer_t macTxAckIsrTimer;
     86          extern void macTimerCancel(macTimer_t *pTimer);
     87          #endif /* ACK_DONE_ISR_WROKAROUND */
     88          
     89          /* ------------------------------------------------------------------------------------------------
     90           *                                            Defines
     91           * ------------------------------------------------------------------------------------------------
     92           */
     93          #define MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT   16   /* adjustable to tune performance */
     94          
     95          /* receive FIFO bytes needed to start a valid receive (see function rxStartIsr for details) */
     96          #define RX_THRESHOLD_START_LEN    (MAC_PHY_PHR_LEN        +  \
     97                                             MAC_FCF_FIELD_LEN      +  \
     98                                             MAC_SEQ_NUM_FIELD_LEN  +  \
     99                                             MAC_FCS_FIELD_LEN)
    100          
    101          /* maximum size of addressing fields (note: command frame identifier processed as part of address) */
    102          #define MAX_ADDR_FIELDS_LEN  ((MAC_EXT_ADDR_FIELD_LEN + MAC_PAN_ID_FIELD_LEN) * 2)
    103          
    104          /* addressing mode reserved value */
    105          #define ADDR_MODE_RESERVERED  1
    106          
    107          /* length of command frame identifier */
    108          #define CMD_FRAME_ID_LEN      1
    109          
    110          /* packet size mask is equal to the maximum value */
    111          #define PHY_PACKET_SIZE_MASK  0x7F
    112          
    113          /* value for promiscuous off, must not conflict with other mode variants from separate include files */
    114          #define PROMISCUOUS_MODE_OFF  0x00
    115          
    116          /* bit of proprietary FCS format that indicates if the CRC is OK */
    117          #define PROPRIETARY_FCS_CRC_OK_BIT  0x80
    118          
    119          /* dummy length value for unused entry in lookup table */
    120          #define DUMMY_LEN   0xBE
    121          
    122          /* value for rxThresholdIntState */
    123          #define RX_THRESHOLD_INT_STATE_INACTIVE   0
    124          #define RX_THRESHOLD_INT_STATE_ACTIVE     1
    125          #define RX_THRESHOLD_INT_STATE_RESET      2
    126          
    127          
    128          /* ------------------------------------------------------------------------------------------------
    129           *                                             Macros
    130           * ------------------------------------------------------------------------------------------------
    131           */
    132          #define MEM_ALLOC(x)   macDataRxMemAlloc(x)
    133          #define MEM_FREE(x)    macDataRxMemFree((uint8 **)x)
    134          
    135          /*
    136           *  Macro for encoding frame control information into internal flags format.
    137           *  Parameter is pointer to the frame.  NOTE!  If either the internal frame
    138           *  format *or* the specification changes, this macro will need to be modified.
    139           */
    140          #define INTERNAL_FCF_FLAGS(p)  ((((p)[1] >> 4) & 0x03) | ((p)[0] & 0x78))
    141          
    142          /*
    143           *  The radio replaces the actual FCS with different information.  This proprietary FCS is
    144           *  the same length as the original and includes:
    145           *    1) the RSSI value
    146           *    2) the average correlation value (used for LQI)
    147           *    3) a CRC passed bit
    148           *
    149           *  These macros decode the proprietary FCS.  The macro parameter is a pointer to the two byte FCS.
    150           */
    151          #define PROPRIETARY_FCS_RSSI(p)                 ((int8)((p)[0]))
    152          #define PROPRIETARY_FCS_CRC_OK(p)               ((p)[1] & PROPRIETARY_FCS_CRC_OK_BIT)
    153          #define PROPRIETARY_FCS_CORRELATION_VALUE(p)    ((p)[1] & ~PROPRIETARY_FCS_CRC_OK_BIT)
    154          
    155          /*
    156           *  Macros for security control field.
    157           */
    158          #define SECURITY_LEVEL(s)                       (s & 0x07)
    159          #define KEY_IDENTIFIER_MODE(s)                  ((s & 0x18) >> 3)
    160          #define SECURITY_CONTROL_RESERVED(s)            ((s & 0xE0) >> 5)
    161          
    162          /* ------------------------------------------------------------------------------------------------
    163           *                                       Global Variables
    164           * ------------------------------------------------------------------------------------------------
    165           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    166          uint8 macRxActive;
   \                     macRxActive:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    167          uint8 macRxFilter;
   \                     macRxFilter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    168          uint8 macRxOutgoingAckFlag;
   \                     macRxOutgoingAckFlag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    169          
    170          
    171          /* ------------------------------------------------------------------------------------------------
    172           *                                       Local Constants
    173           * ------------------------------------------------------------------------------------------------
    174           */

   \                                 In  segment CODE_C, align 1
    175          static const uint8 CODE macRxAddrLen[] =
   \                     macRxAddrLen:
   \   000000   00           DB 0
   \   000001   BE           DB 190
   \   000002   04           DB 4
   \   000003   0A           DB 10
    176          {
    177            0,                                                /* no address */
    178            DUMMY_LEN,                                        /* reserved */
    179            MAC_PAN_ID_FIELD_LEN + MAC_SHORT_ADDR_FIELD_LEN,  /* short address + pan id */
    180            MAC_PAN_ID_FIELD_LEN + MAC_EXT_ADDR_FIELD_LEN     /* extended address + pan id */
    181          };
    182          
    183          
    184          /* ------------------------------------------------------------------------------------------------
    185           *                                       Local Prototypes
    186           * ------------------------------------------------------------------------------------------------
    187           */
    188          static void rxHaltCleanupFinalStep(void);
    189          
    190          static void rxStartIsr(void);
    191          static void rxAddrIsr(void);
    192          
    193          #ifdef FEATURE_MAC_SECURITY
    194            static void rxSecurityHdrIsr(void);
    195          #endif
    196          
    197          static void rxPayloadIsr(void);
    198          static void rxDiscardIsr(void);
    199          static void rxFcsIsr(void);
    200          
    201          static void rxPrepPayload(void);
    202          static void rxDiscardFrame(void);
    203          static void rxDone(void);
    204          static void rxPostRxUpdates(void);
    205          
    206          
    207          /* ------------------------------------------------------------------------------------------------
    208           *                                         Local Variables
    209           * ------------------------------------------------------------------------------------------------
    210           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    211          static void    (* pFuncRxState)(void);
   \                     pFuncRxState:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    212          static macRx_t  * pRxBuf;
   \                     pRxBuf:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    213          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    214          static uint8  rxBuf[MAC_PHY_PHR_LEN + MAC_FCF_FIELD_LEN + MAC_SEQ_NUM_FIELD_LEN];
   \                     rxBuf:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    215          static uint8  rxUnreadLen;
   \                     rxUnreadLen:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    216          static uint8  rxNextLen;
   \                     rxNextLen:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    217          static uint8  rxPayloadLen;
   \                     rxPayloadLen:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    218          static uint8  rxFilter;
   \                     rxFilter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    219          static uint8  rxPromiscuousMode;
   \                     rxPromiscuousMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    220          static uint8  rxIsrActiveFlag;
   \                     rxIsrActiveFlag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    221          static uint8  rxResetFlag;
   \                     rxResetFlag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    222          static uint8  rxFifoOverflowCount;
   \                     rxFifoOverflowCount:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    223          
    224          
    225          /**************************************************************************************************
    226           * @fn          macRxInit
    227           *
    228           * @brief       Initialize receive variable states.
    229           *
    230           * @param       none
    231           *
    232           * @return      none
    233           **************************************************************************************************
    234           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    235          MAC_INTERNAL_API void macRxInit(void)
   \                     macRxInit:
    236          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    237            macRxFilter          = RX_FILTER_OFF;
   \   000004   90....       MOV     DPTR,#macRxFilter
   \   000007   7400         MOV     A,#0x0
   \   000009   F0           MOVX    @DPTR,A
    238            rxPromiscuousMode    = PROMISCUOUS_MODE_OFF;
   \   00000A   90....       MOV     DPTR,#rxPromiscuousMode
   \   00000D   7400         MOV     A,#0x0
   \   00000F   F0           MOVX    @DPTR,A
    239            pRxBuf               = NULL; /* required for macRxReset() to function correctly */
   \   000010   90....       MOV     DPTR,#pRxBuf
   \   000013   7400         MOV     A,#0x0
   \   000015   F0           MOVX    @DPTR,A
   \   000016   A3           INC     DPTR
   \   000017   7400         MOV     A,#0x0
   \   000019   F0           MOVX    @DPTR,A
    240            macRxActive          = MAC_RX_ACTIVE_NO_ACTIVITY;
   \   00001A   90....       MOV     DPTR,#macRxActive
   \   00001D   7400         MOV     A,#0x0
   \   00001F   F0           MOVX    @DPTR,A
    241            pFuncRxState         = &rxStartIsr;
   \   000020   90....       MOV     DPTR,#pFuncRxState
   \   000023   74..         MOV     A,#`??rxStartIsr::?relay` & 0xff
   \   000025   F0           MOVX    @DPTR,A
   \   000026   A3           INC     DPTR
   \   000027   74..         MOV     A,#(`??rxStartIsr::?relay` >> 8) & 0xff
   \   000029   F0           MOVX    @DPTR,A
    242            macRxOutgoingAckFlag = 0;
   \   00002A   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   00002D   7400         MOV     A,#0x0
   \   00002F   F0           MOVX    @DPTR,A
    243            rxIsrActiveFlag      = 0;
   \   000030   90....       MOV     DPTR,#rxIsrActiveFlag
   \   000033   7400         MOV     A,#0x0
   \   000035   F0           MOVX    @DPTR,A
    244            rxResetFlag          = 0;
   \   000036   90....       MOV     DPTR,#rxResetFlag
   \   000039   7400         MOV     A,#0x0
   \   00003B   F0           MOVX    @DPTR,A
    245            rxFifoOverflowCount  = 0;
   \   00003C   90....       MOV     DPTR,#rxFifoOverflowCount
   \   00003F   7400         MOV     A,#0x0
   \   000041   F0           MOVX    @DPTR,A
    246          }
   \   000042   D083         POP     DPH
   \   000044   D082         POP     DPL
   \   000046   02....       LJMP    ?BRET
    247          
    248          
    249          /**************************************************************************************************
    250           * @fn          macRxRadioPowerUpInit
    251           *
    252           * @brief       Initialization for after radio first powers up.
    253           *
    254           * @param       none
    255           *
    256           * @return      none
    257           **************************************************************************************************
    258           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    259          MAC_INTERNAL_API void macRxRadioPowerUpInit(void)
   \                     macRxRadioPowerUpInit:
    260          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    261            /* set threshold at initial value */
    262            MAC_RADIO_SET_RX_THRESHOLD(RX_THRESHOLD_START_LEN);
   \   000004   906194       MOV     DPTR,#0x6194
   \   000007   7405         MOV     A,#0x5
   \   000009   F0           MOVX    @DPTR,A
    263          
    264            /* clear any accidental threshold interrupt that happened as part of power up sequence */
    265            MAC_RADIO_CLEAR_RX_THRESHOLD_INTERRUPT_FLAG();
   \   00000A   A2AF         MOV     C,0xa8.7
   \   00000C   E4           CLR     A
   \   00000D   33           RLC     A
   \   00000E   F8           MOV     R0,A
   \   00000F   C2AF         CLR     0xa8.7
   \   000011   759B00       MOV     0x9b,#0x0
   \   000014   75E9FB       MOV     0xe9,#-0x5
   \   000017   E8           MOV     A,R0
   \   000018   F9           MOV     R1,A
   \   000019   E8           MOV     A,R0
   \   00001A   A2E0         MOV     C,0xE0 /* A   */.0
   \   00001C   92AF         MOV     0xa8.7,C
    266          
    267            /* enable threshold interrupts */
    268            MAC_RADIO_ENABLE_RX_THRESHOLD_INTERRUPT();
   \   00001E   9061A3       MOV     DPTR,#0x61a3
   \   000021   E0           MOVX    A,@DPTR
   \   000022   D2E2         SETB    0xE0 /* A   */.2
   \   000024   F0           MOVX    @DPTR,A
    269          }
   \   000025   D083         POP     DPH
   \   000027   D082         POP     DPL
   \   000029   02....       LJMP    ?BRET
   \   00002C                REQUIRE _A_IEN0
   \   00002C                REQUIRE S1CON
   \   00002C                REQUIRE RFIRQF0
    270          
    271          
    272          /**************************************************************************************************
    273           * @fn          macRxTxReset
    274           *
    275           * @brief       Reset the receive state.
    276           *
    277           * @param       none
    278           *
    279           * @return      none
    280           **************************************************************************************************
    281           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    282          MAC_INTERNAL_API void macRxTxReset(void)
   \                     macRxTxReset:
    283          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    284            /* forces receiver off, cleans up by calling macRxHaltCleanup() and macTxHaltCleanup() */
    285            macRxHardDisable();
   \   000004                ; Setup parameters for call to function macRxHardDisable
   \   000004   12....       LCALL   `??macRxHardDisable::?relay`; Banked call to: macRxHardDisable
    286          
    287            /*
    288             *   Note : transmit does not require any reset logic
    289             *          beyond what macRxHardDisable() provides.
    290             */
    291          
    292            /* restore deault filter mode to off */
    293            macRxFilter = RX_FILTER_OFF;
   \   000007   90....       MOV     DPTR,#macRxFilter
   \   00000A   7400         MOV     A,#0x0
   \   00000C   F0           MOVX    @DPTR,A
    294          
    295            /* return promiscuous mode to default off state */
    296            macRxPromiscuousMode(MAC_PROMISCUOUS_MODE_OFF);
   \   00000D                ; Setup parameters for call to function macRxPromiscuousMode
   \   00000D   7900         MOV     R1,#0x0
   \   00000F   12....       LCALL   `??macRxPromiscuousMode::?relay`; Banked call to: macRxPromiscuousMode
    297          }
   \   000012   D083         POP     DPH
   \   000014   D082         POP     DPL
   \   000016   02....       LJMP    ?BRET
    298          
    299          
    300          /**************************************************************************************************
    301           * @fn          macRxHaltCleanup
    302           *
    303           * @brief       Cleanup up the receive logic after receiver is forced off.
    304           *
    305           * @param       none
    306           *
    307           * @return      none
    308           **************************************************************************************************
    309           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    310          MAC_INTERNAL_API void macRxHaltCleanup(void)
   \                     macRxHaltCleanup:
    311          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    312            rxResetFlag = 1;
   \   000004   90....       MOV     DPTR,#rxResetFlag
   \   000007   7401         MOV     A,#0x1
   \   000009   F0           MOVX    @DPTR,A
    313            if (!rxIsrActiveFlag)
   \   00000A   90....       MOV     DPTR,#rxIsrActiveFlag
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   7009         JNZ     ??macRxHaltCleanup_0
    314            {
    315              rxHaltCleanupFinalStep();
   \   000010                ; Setup parameters for call to function rxHaltCleanupFinalStep
   \   000010   12....       LCALL   `??rxHaltCleanupFinalStep::?relay`; Banked call to: rxHaltCleanupFinalStep
    316              rxResetFlag = 0;
   \   000013   90....       MOV     DPTR,#rxResetFlag
   \   000016   7400         MOV     A,#0x0
   \   000018   F0           MOVX    @DPTR,A
    317            }
    318          }
   \                     ??macRxHaltCleanup_0:
   \   000019   D083         POP     DPH
   \   00001B   D082         POP     DPL
   \   00001D   02....       LJMP    ?BRET
    319          
    320          
    321          /*=================================================================================================
    322           * @fn          rxHaltCleanupFinalStep
    323           *
    324           * @brief       Required cleanup if receiver is halted in the middle of a receive.
    325           *
    326           * @param       none
    327           *
    328           * @return      none
    329           *=================================================================================================
    330           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    331          static void rxHaltCleanupFinalStep(void)
   \                     rxHaltCleanupFinalStep:
    332          {  
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    333            /* cancel any upcoming ACK transmit complete callback */
    334            MAC_RADIO_CANCEL_ACK_TX_DONE_CALLBACK();
   \   000005   9061A4       MOV     DPTR,#0x61a4
   \   000008   E0           MOVX    A,@DPTR
   \   000009   C2E0         CLR     0xE0 /* A   */.0
   \   00000B   F0           MOVX    @DPTR,A
    335          
    336            /* set start of frame threshold */
    337            MAC_RADIO_SET_RX_THRESHOLD(RX_THRESHOLD_START_LEN);
   \   00000C   906194       MOV     DPTR,#0x6194
   \   00000F   7405         MOV     A,#0x5
   \   000011   F0           MOVX    @DPTR,A
    338          
    339            /* flush the receive FIFO */
    340            MAC_RADIO_FLUSH_RX_FIFO();
   \   000012   75E1ED       MOV     0xe1,#-0x13
   \   000015   75E1ED       MOV     0xe1,#-0x13
    341          
    342            /* clear any receive interrupt that happened to squeak through */
    343            MAC_RADIO_CLEAR_RX_THRESHOLD_INTERRUPT_FLAG();
   \   000018   A2AF         MOV     C,0xa8.7
   \   00001A   E4           CLR     A
   \   00001B   33           RLC     A
   \   00001C   F8           MOV     R0,A
   \   00001D   C2AF         CLR     0xa8.7
   \   00001F   759B00       MOV     0x9b,#0x0
   \   000022   75E9FB       MOV     0xe9,#-0x5
   \   000025   E8           MOV     A,R0
   \   000026   FE           MOV     R6,A
   \   000027   E8           MOV     A,R0
   \   000028   A2E0         MOV     C,0xE0 /* A   */.0
   \   00002A   92AF         MOV     0xa8.7,C
    344          
    345            /* if data buffer has been allocated, free it */
    346            if (pRxBuf != NULL)
   \   00002C   90....       MOV     DPTR,#pRxBuf
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F8           MOV     R0,A
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F9           MOV     R1,A
   \   000034   E8           MOV     A,R0
   \   000035   49           ORL     A,R1
   \   000036   6008         JZ      ??rxHaltCleanupFinalStep_0
    347            {
    348              MEM_FREE((uint8 **)&pRxBuf);
   \   000038                ; Setup parameters for call to function macDataRxMemFree
   \   000038   7A..         MOV     R2,#pRxBuf & 0xff
   \   00003A   7B..         MOV     R3,#(pRxBuf >> 8) & 0xff
   \   00003C   12....       LCALL   `??macDataRxMemFree::?relay`; Banked call to: macDataRxMemFree
   \   00003F   E9           MOV     A,R1
    349            }
    350            /* MEM_FREE() sets parameter to NULL. */
    351          
    352            pFuncRxState = &rxStartIsr;
   \                     ??rxHaltCleanupFinalStep_0:
   \   000040   90....       MOV     DPTR,#pFuncRxState
   \   000043   74..         MOV     A,#`??rxStartIsr::?relay` & 0xff
   \   000045   F0           MOVX    @DPTR,A
   \   000046   A3           INC     DPTR
   \   000047   74..         MOV     A,#(`??rxStartIsr::?relay` >> 8) & 0xff
   \   000049   F0           MOVX    @DPTR,A
    353          
    354            /* if receive was active, perform the post receive updates */
    355            if (macRxActive || macRxOutgoingAckFlag)
   \   00004A   90....       MOV     DPTR,#macRxActive
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   7006         JNZ     ??rxHaltCleanupFinalStep_1
   \   000050   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   000053   E0           MOVX    A,@DPTR
   \   000054   600F         JZ      ??rxHaltCleanupFinalStep_2
    356            {
    357              macRxActive = MAC_RX_ACTIVE_NO_ACTIVITY;
   \                     ??rxHaltCleanupFinalStep_1:
   \   000056   90....       MOV     DPTR,#macRxActive
   \   000059   7400         MOV     A,#0x0
   \   00005B   F0           MOVX    @DPTR,A
    358              macRxOutgoingAckFlag = 0;
   \   00005C   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   00005F   7400         MOV     A,#0x0
   \   000061   F0           MOVX    @DPTR,A
    359          
    360              rxPostRxUpdates();
   \   000062                ; Setup parameters for call to function rxPostRxUpdates
   \   000062   12....       LCALL   `??rxPostRxUpdates::?relay`; Banked call to: rxPostRxUpdates
    361            }
    362          }
   \                     ??rxHaltCleanupFinalStep_2:
   \   000065   7F01         MOV     R7,#0x1
   \   000067   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   00006A                REQUIRE RFST
   \   00006A                REQUIRE _A_IEN0
   \   00006A                REQUIRE S1CON
   \   00006A                REQUIRE RFIRQF0
    363          
    364          
    365          /**************************************************************************************************
    366           * @fn          macRxThresholdIsr
    367           *
    368           * @brief       Interrupt service routine called when bytes in FIFO reach threshold value.
    369           *              It implements a state machine for receiving a packet.
    370           *
    371           * @param       none
    372           *
    373           * @return      none
    374           **************************************************************************************************
    375           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    376          MAC_INTERNAL_API void macRxThresholdIsr(void)
   \                     macRxThresholdIsr:
    377          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    378            /* if currently reseting, do not execute receive ISR logic */
    379            if (rxResetFlag)
   \   000004   90....       MOV     DPTR,#rxResetFlag
   \   000007   E0           MOVX    A,@DPTR
   \   000008   7029         JNZ     ??macRxThresholdIsr_0
    380            {
    381              return;
    382            }
    383          
    384            /*
    385             *  Call the function that handles the current receive state.
    386             *  A flag is set for the duration of the call to indicate
    387             *  the ISR is executing.  This is necessary for the reset
    388             *  logic so it does not perform a reset in the middle of
    389             *  executing the ISR.
    390             */
    391            rxIsrActiveFlag = 1;
   \   00000A   90....       MOV     DPTR,#rxIsrActiveFlag
   \   00000D   7401         MOV     A,#0x1
   \   00000F   F0           MOVX    @DPTR,A
    392            (*pFuncRxState)();
   \   000010                ; Setup parameters for indirect call
   \   000010   90....       MOV     DPTR,#pFuncRxState
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F8           MOV     R0,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F583         MOV     DPH,A
   \   000019   8882         MOV     DPL,R0
   \   00001B   12....       LCALL   ?CALL_IND
    393            rxIsrActiveFlag = 0;
   \   00001E   90....       MOV     DPTR,#rxIsrActiveFlag
   \   000021   7400         MOV     A,#0x0
   \   000023   F0           MOVX    @DPTR,A
    394          
    395            /* if a reset occurred during the ISR, peform cleanup here */
    396            if (rxResetFlag)
   \   000024   90....       MOV     DPTR,#rxResetFlag
   \   000027   E0           MOVX    A,@DPTR
   \   000028   6009         JZ      ??macRxThresholdIsr_0
    397            {
    398              rxHaltCleanupFinalStep();
   \   00002A                ; Setup parameters for call to function rxHaltCleanupFinalStep
   \   00002A   12....       LCALL   `??rxHaltCleanupFinalStep::?relay`; Banked call to: rxHaltCleanupFinalStep
    399              rxResetFlag = 0;
   \   00002D   90....       MOV     DPTR,#rxResetFlag
   \   000030   7400         MOV     A,#0x0
   \   000032   F0           MOVX    @DPTR,A
    400            }
    401          }
   \                     ??macRxThresholdIsr_0:
   \   000033   D083         POP     DPH
   \   000035   D082         POP     DPL
   \   000037   02....       LJMP    ?BRET
    402          
    403          
    404          /*=================================================================================================
    405           * @fn          rxStartIsr
    406           *
    407           * @brief       First ISR state for receiving a packet - compute packet length, allocate
    408           *              buffer, initialize buffer.  Acknowledgements are handled immediately without
    409           *              allocating a buffer.
    410           *
    411           * @param       none
    412           *
    413           * @return      none
    414           *=================================================================================================
    415           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    416          static void rxStartIsr(void)
   \                     rxStartIsr:
    417          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000   74EF         MOV     A,#-0x11
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 17
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    418            uint8  addrLen;
    419            uint8  ackWithPending;
    420            uint8  dstAddrMode;
    421            uint8  srcAddrMode;
    422            uint8  mhrLen = 0;
   \   00000A   7E00         MOV     R6,#0x0
    423          
    424            MAC_ASSERT(!macRxActive); /* receive on top of receive */
   \   00000C   90....       MOV     DPTR,#macRxActive
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   6003         JZ      ??rxStartIsr_0
   \   000012                ; Setup parameters for call to function halAssertHandler
   \   000012   12....       LCALL   `??halAssertHandler::?relay`; Banked call to: halAssertHandler
    425          
    426            /* indicate rx is active */
    427            macRxActive = MAC_RX_ACTIVE_STARTED;
   \                     ??rxStartIsr_0:
   \   000015   90....       MOV     DPTR,#macRxActive
   \   000018   7481         MOV     A,#-0x7f
   \   00001A   F0           MOVX    @DPTR,A
    428          
    429            /*
    430             *  For bullet proof functionality, need to see if the receiver was just turned off.
    431             *  The logic to request turning off the receiver, disables interrupts and then checks
    432             *  the value of macRxActive.  If it is TRUE, the receiver will not be turned off.
    433             *
    434             *  There is a small hole though.  It's possible to attempt turning off the receiver
    435             *  in the window from when the receive interrupt fires and the point where macRxActive
    436             *  is set to TRUE.  To plug this hole, the on/off status must be tested *after*
    437             *  macRxActive has been set.  If the receiver is off at this point, there is nothing
    438             *  in the RX fifo and the receive is simply aborted.
    439             *
    440             *  Also, there are some considerations in case a hard disable just happened.  Usually,
    441             *  the receiver will just be off at this point after a hard disable.  The check described
    442             *  above will account for this case too.  However, if a hard disable were immediately
    443             *  followed by an enable, the receiver would be on.  To catch this case, the receive
    444             *  FIFO is also tested to see if it is empty.  Recovery is identical to the other cases.
    445             */
    446            if (!macRxOnFlag || MAC_RADIO_RX_FIFO_IS_EMPTY())
   \   00001B   90....       MOV     DPTR,#macRxOnFlag
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   6010         JZ      ??rxStartIsr_1
   \   000021   906193       MOV     DPTR,#0x6193
   \   000024   E0           MOVX    A,@DPTR
   \   000025   A2E7         MOV     C,0xE0 /* A   */.7
   \   000027   4014         JC      ??rxStartIsr_2
   \   000029   906193       MOV     DPTR,#0x6193
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   A2E6         MOV     C,0xE0 /* A   */.6
   \   00002F   400C         JC      ??rxStartIsr_2
    447            {
    448              /* reset active flag */
    449              macRxActive = MAC_RX_ACTIVE_NO_ACTIVITY;
   \                     ??rxStartIsr_1:
   \   000031   90....       MOV     DPTR,#macRxActive
   \   000034   7400         MOV     A,#0x0
   \   000036   F0           MOVX    @DPTR,A
    450          
    451              /*
    452               *  To be absolutely bulletproof, must make sure no transmit queue'ed up during
    453               *  the tiny, tiny window when macRxActive was not zero.
    454               */
    455              rxPostRxUpdates();
   \   000037                ; Setup parameters for call to function rxPostRxUpdates
   \   000037   12....       LCALL   `??rxPostRxUpdates::?relay`; Banked call to: rxPostRxUpdates
    456          
    457              /* return immediately from here */
    458              return;
   \   00003A   02....       LJMP    ??rxStartIsr_3 & 0xFFFF
    459            }
    460          
    461            /*
    462             *  If interrupts are held off for too long it's possible the previous "transmit done"
    463             *  callback is pending.  If this is the case, it needs to be completed before
    464             *  continuing with the receive logic.
    465             */
    466            MAC_RADIO_FORCE_TX_DONE_IF_PENDING();
   \                     ??rxStartIsr_2:
   \   00003D                ; Setup parameters for call to function macCspForceTxDoneIfPending
   \   00003D   12....       LCALL   `??macCspForceTxDoneIfPending::?relay`; Banked call to: macCspForceTxDoneIfPending
    467          
    468            /*
    469             *  It's possible receive logic is still waiting for confirmation of an ACK that went out
    470             *  for the previous receive.  This is OK but the callback needs to be canceled at this point.
    471             *  That callback execute receive cleanup logic that will run at the completion
    472             *  of *this* receive.  Also, it is important the flag for the outgoing ACK to be cleared.
    473             */
    474            MAC_RADIO_CANCEL_ACK_TX_DONE_CALLBACK();
   \   000040   9061A4       MOV     DPTR,#0x61a4
   \   000043   E0           MOVX    A,@DPTR
   \   000044   C2E0         CLR     0xE0 /* A   */.0
   \   000046   F0           MOVX    @DPTR,A
    475            macRxOutgoingAckFlag = 0;
   \   000047   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   00004A   7400         MOV     A,#0x0
   \   00004C   F0           MOVX    @DPTR,A
    476          
    477            /*
    478             *  Make a module-local copy of macRxFilter.  This prevents the selected
    479             *  filter from changing in the middle of a receive.
    480             */
    481            rxFilter = macRxFilter;
   \   00004D   90....       MOV     DPTR,#macRxFilter
   \   000050   E0           MOVX    A,@DPTR
   \   000051   90....       MOV     DPTR,#rxFilter
   \   000054   F0           MOVX    @DPTR,A
    482          
    483            /*-------------------------------------------------------------------------------
    484             *  Read initial frame information from FIFO.
    485             *
    486             *   This code is not triggered until the following are in the RX FIFO:
    487             *     frame length          - one byte containing length of MAC frame (excludes this field)
    488             *     frame control field   - two bytes defining frame type, addressing fields, control flags
    489             *     sequence number       - one byte unique sequence identifier
    490             *     additional two bytes  - these bytes are available in case the received frame is an ACK,
    491             *                             if so, the frame can be verified and responded to immediately,
    492             *                             if not an ACK, these bytes will be processed normally
    493             */
    494          
    495            /* read frame length, frame control field, and sequence number from FIFO */
    496            MAC_RADIO_READ_RX_FIFO(rxBuf, MAC_PHY_PHR_LEN + MAC_FCF_FIELD_LEN + MAC_SEQ_NUM_FIELD_LEN);
   \   000055                ; Setup parameters for call to function macMemReadRxFifo
   \   000055   7904         MOV     R1,#0x4
   \   000057   7A..         MOV     R2,#rxBuf & 0xff
   \   000059   7B..         MOV     R3,#(rxBuf >> 8) & 0xff
   \   00005B   12....       LCALL   `??macMemReadRxFifo::?relay`; Banked call to: macMemReadRxFifo
    497          
    498            /* bytes to read from FIFO equals frame length minus length of MHR fields just read from FIFO */
    499            rxUnreadLen = (rxBuf[0] & PHY_PACKET_SIZE_MASK) - MAC_FCF_FIELD_LEN - MAC_SEQ_NUM_FIELD_LEN;
   \   00005E   90....       MOV     DPTR,#rxBuf
   \   000061   E0           MOVX    A,@DPTR
   \   000062   547F         ANL     A,#0x7f
   \   000064   24FD         ADD     A,#-0x3
   \   000066   90....       MOV     DPTR,#rxUnreadLen
   \   000069   F0           MOVX    @DPTR,A
    500          
    501            /*
    502             *  Workaround for chip bug #1547.  The receive buffer can sometimes be corrupted by hardware.
    503             *  This usually occurs under heavy traffic.  If a corrupted receive buffer is detected
    504             *  the entire receive buffer is flushed.
    505             */
    506            if ((rxUnreadLen > (MAC_A_MAX_PHY_PACKET_SIZE - MAC_FCF_FIELD_LEN - MAC_SEQ_NUM_FIELD_LEN)) ||
    507                (MAC_FRAME_TYPE(&rxBuf[1]) > MAC_FRAME_TYPE_MAX_VALID))
   \   00006A   90....       MOV     DPTR,#rxUnreadLen
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   C3           CLR     C
   \   00006F   947D         SUBB    A,#0x7d
   \   000071   500B         JNC     ??rxStartIsr_4
   \   000073   90....       MOV     DPTR,#rxBuf + 1
   \   000076   E0           MOVX    A,@DPTR
   \   000077   5407         ANL     A,#0x7
   \   000079   C3           CLR     C
   \   00007A   9404         SUBB    A,#0x4
   \   00007C   400C         JC      ??rxStartIsr_5
    508            {
    509              MAC_RADIO_FLUSH_RX_FIFO();
   \                     ??rxStartIsr_4:
   \   00007E   75E1ED       MOV     0xe1,#-0x13
   \   000081   75E1ED       MOV     0xe1,#-0x13
    510              rxDone();
   \   000084                ; Setup parameters for call to function rxDone
   \   000084   12....       LCALL   `??rxDone::?relay`   ; Banked call to: rxDone
    511              return;
   \   000087   02....       LJMP    ??rxStartIsr_3 & 0xFFFF
    512            }
    513          
    514          
    515            /*-------------------------------------------------------------------------------
    516             *  Process ACKs.
    517             *
    518             *  If this frame is an ACK, process it immediately and exit from here.
    519             *  If this frame is not an ACK and transmit is listening for an ACK, let
    520             *  the transmit logic know an non-ACK was received so transmit can complete.
    521             *
    522             *  In promiscuous mode ACKs are treated like any other frame.
    523             */
    524            if ((MAC_FRAME_TYPE(&rxBuf[1]) == MAC_FRAME_TYPE_ACK) && (rxPromiscuousMode == PROMISCUOUS_MODE_OFF))
   \                     ??rxStartIsr_5:
   \   00008A   90....       MOV     DPTR,#rxBuf + 1
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   5407         ANL     A,#0x7
   \   000090   6402         XRL     A,#0x2
   \   000092   6003         JZ      $+5
   \   000094   02....       LJMP    ??rxStartIsr_6 & 0xFFFF
   \   000097   90....       MOV     DPTR,#rxPromiscuousMode
   \   00009A   E0           MOVX    A,@DPTR
   \   00009B   6003         JZ      $+5
   \   00009D   02....       LJMP    ??rxStartIsr_6 & 0xFFFF
    525            {
    526              halIntState_t  s;
    527              uint8 fcsBuf[MAC_FCF_FIELD_LEN];
    528              /*
    529               *  There are guaranteed to be two unread bytes in the FIFO.  By defintion, for ACK frames
    530               *  these two bytes will be the FCS.
    531               */
    532          
    533              /* read FCS from FIFO (threshold set so bytes are guaranteed to be there) */
    534              MAC_RADIO_READ_RX_FIFO(fcsBuf, MAC_FCS_FIELD_LEN);
   \   0000A0                ; Setup parameters for call to function macMemReadRxFifo
   \   0000A0   7902         MOV     R1,#0x2
   \   0000A2   AA..         MOV     R2,?XSP + 0
   \   0000A4   AB..         MOV     R3,?XSP + 1
   \   0000A6   12....       LCALL   `??macMemReadRxFifo::?relay`; Banked call to: macMemReadRxFifo
    535          
    536              /*
    537               *  This critical section ensures that the ACK timeout won't be triggered in the
    538               *  middle of receiving the ACK frame.
    539               */
    540              HAL_ENTER_CRITICAL_SECTION(s);
   \   0000A9   A2AF         MOV     C,0xa8.7
   \   0000AB   E4           CLR     A
   \   0000AC   33           RLC     A
   \   0000AD   F5..         MOV     ?V0,A
   \   0000AF   C2AF         CLR     0xa8.7
    541          
    542              /* see if transmit is listening for an ACK */
    543              if (macTxActive == MAC_TX_ACTIVE_LISTEN_FOR_ACK)
   \   0000B1   90....       MOV     DPTR,#macTxActive
   \   0000B4   E0           MOVX    A,@DPTR
   \   0000B5   6486         XRL     A,#0x86
   \   0000B7   6003         JZ      $+5
   \   0000B9   02....       LJMP    ??rxStartIsr_7 & 0xFFFF
    544              {
    545                MAC_ASSERT(pMacDataTx != NULL); /* transmit buffer must be present */
   \   0000BC   90....       MOV     DPTR,#pMacDataTx
   \   0000BF   E0           MOVX    A,@DPTR
   \   0000C0   F8           MOV     R0,A
   \   0000C1   A3           INC     DPTR
   \   0000C2   E0           MOVX    A,@DPTR
   \   0000C3   F9           MOV     R1,A
   \   0000C4   E8           MOV     A,R0
   \   0000C5   49           ORL     A,R1
   \   0000C6   7003         JNZ     ??rxStartIsr_8
   \   0000C8                ; Setup parameters for call to function halAssertHandler
   \   0000C8   12....       LCALL   `??halAssertHandler::?relay`; Banked call to: halAssertHandler
    546          
    547                /* record link quality metrics for the receive ACK */
    548                {
    549                  int8 rssiDbm;
    550                  uint8 corr;
    551          
    552                  rssiDbm = PROPRIETARY_FCS_RSSI(fcsBuf) + MAC_RADIO_RSSI_OFFSET;
   \                     ??rxStartIsr_8:
   \   0000CB   85..82       MOV     DPL,?XSP + 0
   \   0000CE   85..83       MOV     DPH,?XSP + 1
   \   0000D1   E0           MOVX    A,@DPTR
   \   0000D2   24B7         ADD     A,#-0x49
   \   0000D4   FE           MOV     R6,A
    553                  MAC_RADIO_RSSI_LNA_OFFSET(rssiDbm);
    554                  corr = PROPRIETARY_FCS_CORRELATION_VALUE(fcsBuf);
   \   0000D5   7401         MOV     A,#0x1
   \   0000D7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DA   E0           MOVX    A,@DPTR
   \   0000DB   547F         ANL     A,#0x7f
   \   0000DD   FF           MOV     R7,A
    555          
    556                  pMacDataTx->internal.mpduLinkQuality = macRadioComputeLQI(rssiDbm, corr);
   \   0000DE                ; Setup parameters for call to function macRadioComputeLQI
   \   0000DE   EF           MOV     A,R7
   \   0000DF   FA           MOV     R2,A
   \   0000E0   EE           MOV     A,R6
   \   0000E1   F9           MOV     R1,A
   \   0000E2   12....       LCALL   `??macRadioComputeLQI::?relay`; Banked call to: macRadioComputeLQI
   \   0000E5   E9           MOV     A,R1
   \   0000E6   C0E0         PUSH    A
   \   0000E8   90....       MOV     DPTR,#pMacDataTx
   \   0000EB   E0           MOVX    A,@DPTR
   \   0000EC   F8           MOV     R0,A
   \   0000ED   A3           INC     DPTR
   \   0000EE   E0           MOVX    A,@DPTR
   \   0000EF   C8           XCH     A,R0
   \   0000F0   2415         ADD     A,#0x15
   \   0000F2   F582         MOV     DPL,A
   \   0000F4   C8           XCH     A,R0
   \   0000F5   3400         ADDC    A,#0x0
   \   0000F7   F583         MOV     DPH,A
   \   0000F9   D0E0         POP     A
   \   0000FB   F0           MOVX    @DPTR,A
    557                  pMacDataTx->internal.correlation = corr;
   \   0000FC   EF           MOV     A,R7
   \   0000FD   C0E0         PUSH    A
   \   0000FF   90....       MOV     DPTR,#pMacDataTx
   \   000102   E0           MOVX    A,@DPTR
   \   000103   F8           MOV     R0,A
   \   000104   A3           INC     DPTR
   \   000105   E0           MOVX    A,@DPTR
   \   000106   C8           XCH     A,R0
   \   000107   2416         ADD     A,#0x16
   \   000109   F582         MOV     DPL,A
   \   00010B   C8           XCH     A,R0
   \   00010C   3400         ADDC    A,#0x0
   \   00010E   F583         MOV     DPH,A
   \   000110   D0E0         POP     A
   \   000112   F0           MOVX    @DPTR,A
    558                  pMacDataTx->internal.rssi= rssiDbm;
   \   000113   EE           MOV     A,R6
   \   000114   C0E0         PUSH    A
   \   000116   90....       MOV     DPTR,#pMacDataTx
   \   000119   E0           MOVX    A,@DPTR
   \   00011A   F8           MOV     R0,A
   \   00011B   A3           INC     DPTR
   \   00011C   E0           MOVX    A,@DPTR
   \   00011D   C8           XCH     A,R0
   \   00011E   2417         ADD     A,#0x17
   \   000120   F582         MOV     DPL,A
   \   000122   C8           XCH     A,R0
   \   000123   3400         ADDC    A,#0x0
   \   000125   F583         MOV     DPH,A
   \   000127   D0E0         POP     A
   \   000129   F0           MOVX    @DPTR,A
    559                }
    560          
    561                /*
    562                 *  It's okay if the ACK timeout is triggered here. The callbacks for ACK received
    563                 *  or ACK not received will check "macTxActive" flag before taking any actions.
    564                 */
    565                HAL_EXIT_CRITICAL_SECTION(s);
   \   00012A   85....       MOV     ?V8,?V0
   \   00012D   E5..         MOV     A,?V0
   \   00012F   A2E0         MOV     C,0xE0 /* A   */.0
   \   000131   92AF         MOV     0xa8.7,C
    566          
    567                /*
    568                 *  An ACK was received so transmit logic needs to know.  If the FCS failed,
    569                 *  the transmit logic still needs to know.  In that case, treat the frame
    570                 *  as a non-ACK to complete the active transmit.
    571                 */
    572                if (PROPRIETARY_FCS_CRC_OK(fcsBuf))
   \   000133   7401         MOV     A,#0x1
   \   000135   12....       LCALL   ?XSTACK_DISP0_8
   \   000138   E0           MOVX    A,@DPTR
   \   000139   A2E7         MOV     C,0xE0 /* A   */.7
   \   00013B   5011         JNC     ??rxStartIsr_9
    573                {
    574                  /* call transmit logic to indicate ACK was received */
    575                  macTxAckReceivedCallback(MAC_SEQ_NUMBER(&rxBuf[1]), MAC_FRAME_PENDING(&rxBuf[1]));
   \   00013D                ; Setup parameters for call to function macTxAckReceivedCallback
   \   00013D   90....       MOV     DPTR,#rxBuf + 1
   \   000140   E0           MOVX    A,@DPTR
   \   000141   5410         ANL     A,#0x10
   \   000143   FA           MOV     R2,A
   \   000144   90....       MOV     DPTR,#rxBuf + 3
   \   000147   E0           MOVX    A,@DPTR
   \   000148   F9           MOV     R1,A
   \   000149   12....       LCALL   `??macTxAckReceivedCallback::?relay`; Banked call to: macTxAckReceivedCallback
   \   00014C   800E         SJMP    ??rxStartIsr_10
    576                }
    577                else
    578                {
    579                  macTxAckNotReceivedCallback();
   \                     ??rxStartIsr_9:
   \   00014E                ; Setup parameters for call to function macTxAckNotReceivedCallback
   \   00014E   12....       LCALL   `??macTxAckNotReceivedCallback::?relay`; Banked call to: macTxAckNotReceivedCallback
   \   000151   8009         SJMP    ??rxStartIsr_10
    580                }
    581              }
    582              else
    583              {
    584                HAL_EXIT_CRITICAL_SECTION(s);
   \                     ??rxStartIsr_7:
   \   000153   85....       MOV     ?V7,?V0
   \   000156   E5..         MOV     A,?V0
   \   000158   A2E0         MOV     C,0xE0 /* A   */.0
   \   00015A   92AF         MOV     0xa8.7,C
    585              }
    586          
    587              /* receive is done, exit from here */
    588              rxDone();
   \                     ??rxStartIsr_10:
   \   00015C                ; Setup parameters for call to function rxDone
   \   00015C   12....       LCALL   `??rxDone::?relay`   ; Banked call to: rxDone
    589              return;
   \   00015F   02....       LJMP    ??rxStartIsr_3 & 0xFFFF
    590            }
    591            else if (macTxActive == MAC_TX_ACTIVE_LISTEN_FOR_ACK)
   \                     ??rxStartIsr_6:
   \   000162   90....       MOV     DPTR,#macTxActive
   \   000165   E0           MOVX    A,@DPTR
   \   000166   6486         XRL     A,#0x86
   \   000168   7003         JNZ     ??rxStartIsr_11
    592            {
    593              macTxAckNotReceivedCallback();
   \   00016A                ; Setup parameters for call to function macTxAckNotReceivedCallback
   \   00016A   12....       LCALL   `??macTxAckNotReceivedCallback::?relay`; Banked call to: macTxAckNotReceivedCallback
    594            }
    595          
    596            /*-------------------------------------------------------------------------------
    597             *  Apply filtering.
    598             *
    599             *  For efficiency, see if filtering is even 'on' before processing.  Also test
    600             *  to make sure promiscuous mode is disabled.  If promiscuous mode is enabled,
    601             *  do not apply filtering.
    602             */
    603            if ((rxFilter != RX_FILTER_OFF) && !rxPromiscuousMode)
   \                     ??rxStartIsr_11:
   \   00016D   90....       MOV     DPTR,#rxFilter
   \   000170   E0           MOVX    A,@DPTR
   \   000171   6036         JZ      ??rxStartIsr_12
   \   000173   90....       MOV     DPTR,#rxPromiscuousMode
   \   000176   E0           MOVX    A,@DPTR
   \   000177   7030         JNZ     ??rxStartIsr_12
    604            {
    605              if (/* filter all frames */
    606                   (rxFilter == RX_FILTER_ALL) ||
    607          
    608                   /* filter non-beacon frames */
    609                   ((rxFilter == RX_FILTER_NON_BEACON_FRAMES) &&
    610                    (MAC_FRAME_TYPE(&rxBuf[1]) != MAC_FRAME_TYPE_BEACON)) ||
    611          
    612                   /* filter non-command frames */
    613                   ((rxFilter == RX_FILTER_NON_COMMAND_FRAMES) &&
    614                    ((MAC_FRAME_TYPE(&rxBuf[1]) != MAC_FRAME_TYPE_COMMAND))))
   \   000179   90....       MOV     DPTR,#rxFilter
   \   00017C   E0           MOVX    A,@DPTR
   \   00017D   6401         XRL     A,#0x1
   \   00017F   6022         JZ      ??rxStartIsr_13
   \   000181   90....       MOV     DPTR,#rxFilter
   \   000184   E0           MOVX    A,@DPTR
   \   000185   6402         XRL     A,#0x2
   \   000187   7008         JNZ     ??rxStartIsr_14
   \   000189   90....       MOV     DPTR,#rxBuf + 1
   \   00018C   E0           MOVX    A,@DPTR
   \   00018D   5407         ANL     A,#0x7
   \   00018F   7012         JNZ     ??rxStartIsr_13
   \                     ??rxStartIsr_14:
   \   000191   90....       MOV     DPTR,#rxFilter
   \   000194   E0           MOVX    A,@DPTR
   \   000195   6403         XRL     A,#0x3
   \   000197   7010         JNZ     ??rxStartIsr_12
   \   000199   90....       MOV     DPTR,#rxBuf + 1
   \   00019C   E0           MOVX    A,@DPTR
   \   00019D   5407         ANL     A,#0x7
   \   00019F   6403         XRL     A,#0x3
   \   0001A1   6006         JZ      ??rxStartIsr_12
    615              {
    616                /* discard rest of frame */
    617                rxDiscardFrame();
   \                     ??rxStartIsr_13:
   \   0001A3                ; Setup parameters for call to function rxDiscardFrame
   \   0001A3   12....       LCALL   `??rxDiscardFrame::?relay`; Banked call to: rxDiscardFrame
    618                return;
   \   0001A6   02....       LJMP    ??rxStartIsr_3 & 0xFFFF
    619              }
    620            }
    621          
    622            /*-------------------------------------------------------------------------------
    623             *  Compute length of addressing fields.  Compute payload length.
    624             */
    625          
    626            /* decode addressing modes */
    627            dstAddrMode = MAC_DEST_ADDR_MODE(&rxBuf[1]);
   \                     ??rxStartIsr_12:
   \   0001A9   90....       MOV     DPTR,#rxBuf + 2
   \   0001AC   E0           MOVX    A,@DPTR
   \   0001AD   13           RRC     A
   \   0001AE   13           RRC     A
   \   0001AF   543F         ANL     A,#0x3f
   \   0001B1   5403         ANL     A,#0x3
   \   0001B3   F5..         MOV     ?V3,A
    628            srcAddrMode = MAC_SRC_ADDR_MODE(&rxBuf[1]);
   \   0001B5   90....       MOV     DPTR,#rxBuf + 2
   \   0001B8   E0           MOVX    A,@DPTR
   \   0001B9   C4           SWAP    A
   \   0001BA   13           RRC     A
   \   0001BB   13           RRC     A
   \   0001BC   5403         ANL     A,#0x3
   \   0001BE   F5..         MOV     ?V5,A
    629          
    630            /*
    631            *  Workaround for chip bug #1547.  The receive buffer can sometimes be corrupted by hardware.
    632             *  This usually occurs under heavy traffic.  If a corrupted receive buffer is detected
    633             *  the entire receive buffer is flushed.
    634             */
    635            if (macChipVersion == REV_A)
   \   0001C0   90....       MOV     DPTR,#macChipVersion
   \   0001C3   E0           MOVX    A,@DPTR
   \   0001C4   7018         JNZ     ??rxStartIsr_15
    636            {
    637              if ((srcAddrMode == ADDR_MODE_RESERVERED) || (dstAddrMode == ADDR_MODE_RESERVERED))
   \   0001C6   7401         MOV     A,#0x1
   \   0001C8   65..         XRL     A,?V5
   \   0001CA   6006         JZ      ??rxStartIsr_16
   \   0001CC   7401         MOV     A,#0x1
   \   0001CE   65..         XRL     A,?V3
   \   0001D0   700C         JNZ     ??rxStartIsr_15
    638              {
    639                MAC_RADIO_FLUSH_RX_FIFO();
   \                     ??rxStartIsr_16:
   \   0001D2   75E1ED       MOV     0xe1,#-0x13
   \   0001D5   75E1ED       MOV     0xe1,#-0x13
    640                rxDone();
   \   0001D8                ; Setup parameters for call to function rxDone
   \   0001D8   12....       LCALL   `??rxDone::?relay`   ; Banked call to: rxDone
    641                return;
   \   0001DB   02....       LJMP    ??rxStartIsr_3 & 0xFFFF
    642              }
    643            }
    644          
    645            /*
    646             *  Compute the addressing field length.  A lookup table based on addressing
    647             *  mode is used for efficiency.  If the source address is present and the
    648             *  frame is intra-PAN, the PAN Id is not repeated.  In this case, the address
    649             *  length is adjusted to match the smaller length.
    650             */
    651            addrLen = macRxAddrLen[dstAddrMode] + macRxAddrLen[srcAddrMode];
   \                     ??rxStartIsr_15:
   \   0001DE   A8..         MOV     R0,?V5
   \   0001E0   7900         MOV     R1,#0x0
   \   0001E2   74..         MOV     A,#macRxAddrLen & 0xff
   \   0001E4   28           ADD     A,R0
   \   0001E5   F582         MOV     DPL,A
   \   0001E7   74..         MOV     A,#(macRxAddrLen >> 8) & 0xff
   \   0001E9   39           ADDC    A,R1
   \   0001EA   F583         MOV     DPH,A
   \   0001EC   E4           CLR     A
   \   0001ED   93           MOVC    A,@A+DPTR
   \   0001EE   FA           MOV     R2,A
   \   0001EF   A8..         MOV     R0,?V3
   \   0001F1   7900         MOV     R1,#0x0
   \   0001F3   74..         MOV     A,#macRxAddrLen & 0xff
   \   0001F5   28           ADD     A,R0
   \   0001F6   F582         MOV     DPL,A
   \   0001F8   74..         MOV     A,#(macRxAddrLen >> 8) & 0xff
   \   0001FA   39           ADDC    A,R1
   \   0001FB   F583         MOV     DPH,A
   \   0001FD   E4           CLR     A
   \   0001FE   93           MOVC    A,@A+DPTR
   \   0001FF   2A           ADD     A,R2
   \   000200   FF           MOV     R7,A
    652            if ((srcAddrMode != SADDR_MODE_NONE) && MAC_INTRA_PAN(&rxBuf[1]))
   \   000201   E5..         MOV     A,?V5
   \   000203   600C         JZ      ??rxStartIsr_17
   \   000205   90....       MOV     DPTR,#rxBuf + 1
   \   000208   E0           MOVX    A,@DPTR
   \   000209   A2E6         MOV     C,0xE0 /* A   */.6
   \   00020B   5004         JNC     ??rxStartIsr_17
    653            {
    654              addrLen -= MAC_PAN_ID_FIELD_LEN;
   \   00020D   74FE         MOV     A,#-0x2
   \   00020F   2F           ADD     A,R7
   \   000210   FF           MOV     R7,A
    655            }
    656          
    657            /*
    658             *  If there are not enough unread bytes to include the computed address
    659             *  plus FCS field, the frame is corrupted and must be discarded.
    660             */
    661            if ((addrLen + MAC_FCS_FIELD_LEN) > rxUnreadLen)
   \                     ??rxStartIsr_17:
   \   000211   90....       MOV     DPTR,#rxUnreadLen
   \   000214   E0           MOVX    A,@DPTR
   \   000215   FA           MOV     R2,A
   \   000216   7B00         MOV     R3,#0x0
   \   000218   EF           MOV     A,R7
   \   000219   F8           MOV     R0,A
   \   00021A   7900         MOV     R1,#0x0
   \   00021C   E8           MOV     A,R0
   \   00021D   2402         ADD     A,#0x2
   \   00021F   F8           MOV     R0,A
   \   000220   5001         JNC     ??rxStartIsr_18
   \   000222   09           INC     R1
   \                     ??rxStartIsr_18:
   \   000223   C3           CLR     C
   \   000224   EA           MOV     A,R2
   \   000225   98           SUBB    A,R0
   \   000226   EB           MOV     A,R3
   \   000227   99           SUBB    A,R1
   \   000228   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00022A   65D0         XRL     A,PSW
   \   00022C   33           RLC     A
   \   00022D   5006         JNC     ??rxStartIsr_19
    662            {
    663              /* discard frame and exit */
    664              rxDiscardFrame();
   \   00022F                ; Setup parameters for call to function rxDiscardFrame
   \   00022F   12....       LCALL   `??rxDiscardFrame::?relay`; Banked call to: rxDiscardFrame
    665              return;
   \   000232   02....       LJMP    ??rxStartIsr_3 & 0xFFFF
    666            }
    667          
    668            /* aux security header plus payload length is equal to unread bytes minus
    669             * address length, minus the FCS
    670             */
    671            rxPayloadLen = rxUnreadLen - addrLen - MAC_FCS_FIELD_LEN;
   \                     ??rxStartIsr_19:
   \   000235   90....       MOV     DPTR,#rxUnreadLen
   \   000238   E0           MOVX    A,@DPTR
   \   000239   C3           CLR     C
   \   00023A   9F           SUBB    A,R7
   \   00023B   24FE         ADD     A,#-0x2
   \   00023D   90....       MOV     DPTR,#rxPayloadLen
   \   000240   F0           MOVX    @DPTR,A
    672          
    673            /*-------------------------------------------------------------------------------
    674             *  Allocate memory for the incoming frame.
    675             */
    676            if (MAC_SEC_ENABLED(&rxBuf[1]))
   \   000241   90....       MOV     DPTR,#rxBuf + 1
   \   000244   E0           MOVX    A,@DPTR
   \   000245   A2E3         MOV     C,0xE0 /* A   */.3
   \   000247   5002         JNC     ??rxStartIsr_20
    677            {
    678              /* increase the allocation size of MAC header for security */
    679              mhrLen = MAC_MHR_LEN;
   \   000249   7E25         MOV     R6,#0x25
    680            }
    681          
    682            pRxBuf = (macRx_t *) MEM_ALLOC(sizeof(macRx_t) + mhrLen + rxPayloadLen);
   \                     ??rxStartIsr_20:
   \   00024B                ; Setup parameters for call to function macDataRxMemAlloc
   \   00024B   EE           MOV     A,R6
   \   00024C   F8           MOV     R0,A
   \   00024D   7900         MOV     R1,#0x0
   \   00024F   90....       MOV     DPTR,#rxPayloadLen
   \   000252   E0           MOVX    A,@DPTR
   \   000253   FA           MOV     R2,A
   \   000254   7B00         MOV     R3,#0x0
   \   000256   E8           MOV     A,R0
   \   000257   2A           ADD     A,R2
   \   000258   F8           MOV     R0,A
   \   000259   E9           MOV     A,R1
   \   00025A   3B           ADDC    A,R3
   \   00025B   F9           MOV     R1,A
   \   00025C   E8           MOV     A,R0
   \   00025D   243A         ADD     A,#0x3a
   \   00025F   FA           MOV     R2,A
   \   000260   E4           CLR     A
   \   000261   39           ADDC    A,R1
   \   000262   FB           MOV     R3,A
   \   000263   12....       LCALL   `??macDataRxMemAlloc::?relay`; Banked call to: macDataRxMemAlloc
   \   000266   90....       MOV     DPTR,#pRxBuf
   \   000269   EA           MOV     A,R2
   \   00026A   F0           MOVX    @DPTR,A
   \   00026B   A3           INC     DPTR
   \   00026C   EB           MOV     A,R3
   \   00026D   F0           MOVX    @DPTR,A
    683            if (pRxBuf == NULL)
   \   00026E   90....       MOV     DPTR,#pRxBuf
   \   000271   E0           MOVX    A,@DPTR
   \   000272   F8           MOV     R0,A
   \   000273   A3           INC     DPTR
   \   000274   E0           MOVX    A,@DPTR
   \   000275   F9           MOV     R1,A
   \   000276   E8           MOV     A,R0
   \   000277   49           ORL     A,R1
   \   000278   7009         JNZ     ??rxStartIsr_21
    684            {
    685              /* Cancel the outgoing TX ACK */
    686              MAC_RADIO_CANCEL_TX_ACK();
   \   00027A   75E1E8       MOV     0xe1,#-0x18
    687          
    688              /* buffer allocation failed, discard the frame and exit*/
    689              rxDiscardFrame();
   \   00027D                ; Setup parameters for call to function rxDiscardFrame
   \   00027D   12....       LCALL   `??rxDiscardFrame::?relay`; Banked call to: rxDiscardFrame
    690              return;
   \   000280   02....       LJMP    ??rxStartIsr_3 & 0xFFFF
    691            }
    692          
    693            /*-------------------------------------------------------------------------------
    694             *  Set up to process ACK request.  Do not ACK if in promiscuous mode.
    695             */
    696            ackWithPending = 0;
   \                     ??rxStartIsr_21:
   \   000283   7E00         MOV     R6,#0x0
    697            if (!rxPromiscuousMode)
   \   000285   90....       MOV     DPTR,#rxPromiscuousMode
   \   000288   E0           MOVX    A,@DPTR
   \   000289   700A         JNZ     ??rxStartIsr_22
    698            {
    699              macRxOutgoingAckFlag = MAC_ACK_REQUEST(&rxBuf[1]);
   \   00028B   90....       MOV     DPTR,#rxBuf + 1
   \   00028E   E0           MOVX    A,@DPTR
   \   00028F   5420         ANL     A,#0x20
   \   000291   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   000294   F0           MOVX    @DPTR,A
    700            }
    701          
    702            /*-------------------------------------------------------------------------------
    703             *  Process any ACK request.
    704             */
    705            if (macRxOutgoingAckFlag)
   \                     ??rxStartIsr_22:
   \   000295   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   000298   E0           MOVX    A,@DPTR
   \   000299   606F         JZ      ??rxStartIsr_23
    706            {
    707              halIntState_t  s;
    708          
    709              /*
    710               *  This critical section ensures that the callback ISR is initiated within time
    711               *  to guarantee correlation with the strobe.
    712               */
    713              HAL_ENTER_CRITICAL_SECTION(s);
   \   00029B   A2AF         MOV     C,0xa8.7
   \   00029D   E4           CLR     A
   \   00029E   33           RLC     A
   \   00029F   F5..         MOV     ?V0,A
   \   0002A1   C2AF         CLR     0xa8.7
    714          
    715              /* Do not ack data packet with pending more data */
    716              if( MAC_FRAME_TYPE(&rxBuf[1]) == MAC_FRAME_TYPE_COMMAND )
   \   0002A3   90....       MOV     DPTR,#rxBuf + 1
   \   0002A6   E0           MOVX    A,@DPTR
   \   0002A7   5407         ANL     A,#0x7
   \   0002A9   6403         XRL     A,#0x3
   \   0002AB   7024         JNZ     ??rxStartIsr_24
    717              {
    718                if( macRxCheckMACPendingCallback())
   \   0002AD                ; Setup parameters for call to function macRxCheckMACPendingCallback
   \   0002AD   12....       LCALL   `??macRxCheckMACPendingCallback::?relay`; Banked call to: macRxCheckMACPendingCallback
   \   0002B0   E9           MOV     A,R1
   \   0002B1   6004         JZ      ??rxStartIsr_25
    719                {
    720                  /* Check is any mac data pending for end devices */
    721                  ackWithPending = MAC_RX_FLAG_ACK_PENDING;
   \   0002B3   7E04         MOV     R6,#0x4
   \   0002B5   801A         SJMP    ??rxStartIsr_24
    722                }
    723                else
    724                {
    725                  if( macSrcMatchIsEnabled )
   \                     ??rxStartIsr_25:
   \   0002B7   90....       MOV     DPTR,#macSrcMatchIsEnabled
   \   0002BA   E0           MOVX    A,@DPTR
   \   0002BB   600C         JZ      ??rxStartIsr_26
    726                  {
    727                    /* When autopend is enabled, check if allpending is set to true */
    728                    if( MAC_SrcMatchCheckAllPending() == MAC_AUTOACK_PENDING_ALL_ON )
   \   0002BD                ; Setup parameters for call to function MAC_SrcMatchCheckAllPending
   \   0002BD   12....       LCALL   `??MAC_SrcMatchCheckAllPending::?relay`; Banked call to: MAC_SrcMatchCheckAllPending
   \   0002C0   E9           MOV     A,R1
   \   0002C1   64FE         XRL     A,#0xfe
   \   0002C3   700C         JNZ     ??rxStartIsr_24
    729                    {
    730                      ackWithPending = MAC_RX_FLAG_ACK_PENDING;
   \   0002C5   7E04         MOV     R6,#0x4
   \   0002C7   8008         SJMP    ??rxStartIsr_24
    731                    }
    732                  }
    733                  else
    734                  {
    735                    /* When autopend is disabled, check the application pending callback */
    736                    if( macRxCheckPendingCallback() )
   \                     ??rxStartIsr_26:
   \   0002C9                ; Setup parameters for call to function macRxCheckPendingCallback
   \   0002C9   12....       LCALL   `??macRxCheckPendingCallback::?relay`; Banked call to: macRxCheckPendingCallback
   \   0002CC   E9           MOV     A,R1
   \   0002CD   6002         JZ      ??rxStartIsr_24
    737                    {
    738                      ackWithPending = MAC_RX_FLAG_ACK_PENDING;
   \   0002CF   7E04         MOV     R6,#0x4
    739                    }
    740                  }
    741                }
    742              }
    743          
    744              if( ackWithPending == MAC_RX_FLAG_ACK_PENDING )
   \                     ??rxStartIsr_24:
   \   0002D1   7404         MOV     A,#0x4
   \   0002D3   6E           XRL     A,R6
   \   0002D4   7009         JNZ     ??rxStartIsr_27
    745              {
    746                MAC_RADIO_TX_ACK_PEND();
   \   0002D6   90618A       MOV     DPTR,#0x618a
   \   0002D9   E0           MOVX    A,@DPTR
   \   0002DA   D2E2         SETB    0xE0 /* A   */.2
   \   0002DC   F0           MOVX    @DPTR,A
   \   0002DD   8007         SJMP    ??rxStartIsr_28
    747              }
    748              else
    749              {
    750                MAC_RADIO_TX_ACK();
   \                     ??rxStartIsr_27:
   \   0002DF   90618A       MOV     DPTR,#0x618a
   \   0002E2   E0           MOVX    A,@DPTR
   \   0002E3   C2E2         CLR     0xE0 /* A   */.2
   \   0002E5   F0           MOVX    @DPTR,A
    751              }
    752          
    753          
    754              /* request a callback to macRxAckTxDoneCallback() when the ACK transmit has finished */
    755              MAC_RADIO_REQUEST_ACK_TX_DONE_CALLBACK();
   \                     ??rxStartIsr_28:
   \   0002E6   A2AF         MOV     C,0xa8.7
   \   0002E8   E4           CLR     A
   \   0002E9   33           RLC     A
   \   0002EA   F8           MOV     R0,A
   \   0002EB   C2AF         CLR     0xa8.7
   \   0002ED   759B00       MOV     0x9b,#0x0
   \   0002F0   7591FE       MOV     0x91,#-0x2
   \   0002F3   88..         MOV     ?V6,R0
   \   0002F5   E8           MOV     A,R0
   \   0002F6   A2E0         MOV     C,0xE0 /* A   */.0
   \   0002F8   92AF         MOV     0xa8.7,C
   \   0002FA   9061A4       MOV     DPTR,#0x61a4
   \   0002FD   E0           MOVX    A,@DPTR
   \   0002FE   D2E0         SETB    0xE0 /* A   */.0
   \   000300   F0           MOVX    @DPTR,A
    756              HAL_EXIT_CRITICAL_SECTION(s);
   \   000301   85....       MOV     ?V4,?V0
   \   000304   E5..         MOV     A,?V0
   \   000306   A2E0         MOV     C,0xE0 /* A   */.0
   \   000308   92AF         MOV     0xa8.7,C
    757            }
    758          
    759           /*-------------------------------------------------------------------------------
    760            *  Populate the receive buffer going up to high-level.
    761            */
    762          
    763            /* configure the payload buffer
    764             * save MAC header pointer regardless of security status.
    765             */
    766            pRxBuf->mhr.p   = pRxBuf->msdu.p   = (uint8 *) (pRxBuf + 1);
   \                     ??rxStartIsr_23:
   \   00030A   90....       MOV     DPTR,#pRxBuf
   \   00030D   E0           MOVX    A,@DPTR
   \   00030E   243A         ADD     A,#0x3a
   \   000310   FA           MOV     R2,A
   \   000311   A3           INC     DPTR
   \   000312   E0           MOVX    A,@DPTR
   \   000313   3400         ADDC    A,#0x0
   \   000315   FB           MOV     R3,A
   \   000316   90....       MOV     DPTR,#pRxBuf
   \   000319   E0           MOVX    A,@DPTR
   \   00031A   F8           MOV     R0,A
   \   00031B   A3           INC     DPTR
   \   00031C   E0           MOVX    A,@DPTR
   \   00031D   F583         MOV     DPH,A
   \   00031F   8882         MOV     DPL,R0
   \   000321   A3           INC     DPTR
   \   000322   A3           INC     DPTR
   \   000323   EA           MOV     A,R2
   \   000324   F0           MOVX    @DPTR,A
   \   000325   A3           INC     DPTR
   \   000326   EB           MOV     A,R3
   \   000327   F0           MOVX    @DPTR,A
   \   000328   90....       MOV     DPTR,#pRxBuf
   \   00032B   E0           MOVX    A,@DPTR
   \   00032C   F8           MOV     R0,A
   \   00032D   A3           INC     DPTR
   \   00032E   E0           MOVX    A,@DPTR
   \   00032F   F583         MOV     DPH,A
   \   000331   8882         MOV     DPL,R0
   \   000333   A3           INC     DPTR
   \   000334   A3           INC     DPTR
   \   000335   E0           MOVX    A,@DPTR
   \   000336   FA           MOV     R2,A
   \   000337   A3           INC     DPTR
   \   000338   E0           MOVX    A,@DPTR
   \   000339   FB           MOV     R3,A
   \   00033A   90....       MOV     DPTR,#pRxBuf
   \   00033D   E0           MOVX    A,@DPTR
   \   00033E   F8           MOV     R0,A
   \   00033F   A3           INC     DPTR
   \   000340   E0           MOVX    A,@DPTR
   \   000341   C8           XCH     A,R0
   \   000342   2433         ADD     A,#0x33
   \   000344   F582         MOV     DPL,A
   \   000346   C8           XCH     A,R0
   \   000347   3400         ADDC    A,#0x0
   \   000349   F583         MOV     DPH,A
   \   00034B   EA           MOV     A,R2
   \   00034C   F0           MOVX    @DPTR,A
   \   00034D   A3           INC     DPTR
   \   00034E   EB           MOV     A,R3
   \   00034F   F0           MOVX    @DPTR,A
    767            pRxBuf->mhr.len = pRxBuf->msdu.len =  rxPayloadLen;
   \   000350   90....       MOV     DPTR,#rxPayloadLen
   \   000353   E0           MOVX    A,@DPTR
   \   000354   C0E0         PUSH    A
   \   000356   90....       MOV     DPTR,#pRxBuf
   \   000359   E0           MOVX    A,@DPTR
   \   00035A   F8           MOV     R0,A
   \   00035B   A3           INC     DPTR
   \   00035C   E0           MOVX    A,@DPTR
   \   00035D   F583         MOV     DPH,A
   \   00035F   8882         MOV     DPL,R0
   \   000361   A3           INC     DPTR
   \   000362   A3           INC     DPTR
   \   000363   A3           INC     DPTR
   \   000364   A3           INC     DPTR
   \   000365   D0E0         POP     A
   \   000367   F0           MOVX    @DPTR,A
   \   000368   90....       MOV     DPTR,#pRxBuf
   \   00036B   E0           MOVX    A,@DPTR
   \   00036C   F8           MOV     R0,A
   \   00036D   A3           INC     DPTR
   \   00036E   E0           MOVX    A,@DPTR
   \   00036F   F583         MOV     DPH,A
   \   000371   8882         MOV     DPL,R0
   \   000373   A3           INC     DPTR
   \   000374   A3           INC     DPTR
   \   000375   A3           INC     DPTR
   \   000376   A3           INC     DPTR
   \   000377   E0           MOVX    A,@DPTR
   \   000378   C0E0         PUSH    A
   \   00037A   90....       MOV     DPTR,#pRxBuf
   \   00037D   E0           MOVX    A,@DPTR
   \   00037E   F8           MOV     R0,A
   \   00037F   A3           INC     DPTR
   \   000380   E0           MOVX    A,@DPTR
   \   000381   C8           XCH     A,R0
   \   000382   2435         ADD     A,#0x35
   \   000384   F582         MOV     DPL,A
   \   000386   C8           XCH     A,R0
   \   000387   3400         ADDC    A,#0x0
   \   000389   F583         MOV     DPH,A
   \   00038B   D0E0         POP     A
   \   00038D   F0           MOVX    @DPTR,A
    768          
    769            if (MAC_SEC_ENABLED(&rxBuf[1]))
   \   00038E   90....       MOV     DPTR,#rxBuf + 1
   \   000391   E0           MOVX    A,@DPTR
   \   000392   A2E3         MOV     C,0xE0 /* A   */.3
   \   000394   4003         JC      $+5
   \   000396   02....       LJMP    ??rxStartIsr_29 & 0xFFFF
    770            {
    771              /* Copy FCF and sequence number to RX buffer */
    772              pRxBuf->mhr.len = MAC_FCF_FIELD_LEN + MAC_SEQ_NUM_FIELD_LEN;
   \   000399   90....       MOV     DPTR,#pRxBuf
   \   00039C   E0           MOVX    A,@DPTR
   \   00039D   F8           MOV     R0,A
   \   00039E   A3           INC     DPTR
   \   00039F   E0           MOVX    A,@DPTR
   \   0003A0   C8           XCH     A,R0
   \   0003A1   2435         ADD     A,#0x35
   \   0003A3   F582         MOV     DPL,A
   \   0003A5   C8           XCH     A,R0
   \   0003A6   3400         ADDC    A,#0x0
   \   0003A8   F583         MOV     DPH,A
   \   0003AA   7403         MOV     A,#0x3
   \   0003AC   F0           MOVX    @DPTR,A
    773              osal_memcpy(pRxBuf->mhr.p, &rxBuf[1], pRxBuf->mhr.len);
   \   0003AD                ; Setup parameters for call to function osal_memcpy
   \   0003AD   75....       MOV     ?V0,#(rxBuf + 1) & 0xff
   \   0003B0   75....       MOV     ?V1,#((rxBuf + 1) >> 8) & 0xff
   \   0003B3   75..00       MOV     ?V2,#0x0
   \   0003B6   78..         MOV     R0,#?V0
   \   0003B8   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0003BB   90....       MOV     DPTR,#pRxBuf
   \   0003BE   E0           MOVX    A,@DPTR
   \   0003BF   F8           MOV     R0,A
   \   0003C0   A3           INC     DPTR
   \   0003C1   E0           MOVX    A,@DPTR
   \   0003C2   C8           XCH     A,R0
   \   0003C3   2435         ADD     A,#0x35
   \   0003C5   F582         MOV     DPL,A
   \   0003C7   C8           XCH     A,R0
   \   0003C8   3400         ADDC    A,#0x0
   \   0003CA   F583         MOV     DPH,A
   \   0003CC   E0           MOVX    A,@DPTR
   \   0003CD   FC           MOV     R4,A
   \   0003CE   7D00         MOV     R5,#0x0
   \   0003D0   90....       MOV     DPTR,#pRxBuf
   \   0003D3   E0           MOVX    A,@DPTR
   \   0003D4   F8           MOV     R0,A
   \   0003D5   A3           INC     DPTR
   \   0003D6   E0           MOVX    A,@DPTR
   \   0003D7   C8           XCH     A,R0
   \   0003D8   2433         ADD     A,#0x33
   \   0003DA   F582         MOV     DPL,A
   \   0003DC   C8           XCH     A,R0
   \   0003DD   3400         ADDC    A,#0x0
   \   0003DF   F583         MOV     DPH,A
   \   0003E1   E0           MOVX    A,@DPTR
   \   0003E2   FA           MOV     R2,A
   \   0003E3   A3           INC     DPTR
   \   0003E4   E0           MOVX    A,@DPTR
   \   0003E5   FB           MOV     R3,A
   \   0003E6   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0003E9   7403         MOV     A,#0x3
   \   0003EB   12....       LCALL   ?DEALLOC_XSTACK8
    774              pRxBuf->mhr.p += pRxBuf->mhr.len;
   \   0003EE   90....       MOV     DPTR,#pRxBuf
   \   0003F1   E0           MOVX    A,@DPTR
   \   0003F2   F8           MOV     R0,A
   \   0003F3   A3           INC     DPTR
   \   0003F4   E0           MOVX    A,@DPTR
   \   0003F5   C8           XCH     A,R0
   \   0003F6   2435         ADD     A,#0x35
   \   0003F8   F582         MOV     DPL,A
   \   0003FA   C8           XCH     A,R0
   \   0003FB   3400         ADDC    A,#0x0
   \   0003FD   F583         MOV     DPH,A
   \   0003FF   E0           MOVX    A,@DPTR
   \   000400   FA           MOV     R2,A
   \   000401   7B00         MOV     R3,#0x0
   \   000403   90....       MOV     DPTR,#pRxBuf
   \   000406   E0           MOVX    A,@DPTR
   \   000407   F8           MOV     R0,A
   \   000408   A3           INC     DPTR
   \   000409   E0           MOVX    A,@DPTR
   \   00040A   C8           XCH     A,R0
   \   00040B   2433         ADD     A,#0x33
   \   00040D   F582         MOV     DPL,A
   \   00040F   C8           XCH     A,R0
   \   000410   3400         ADDC    A,#0x0
   \   000412   F583         MOV     DPH,A
   \   000414   E0           MOVX    A,@DPTR
   \   000415   2A           ADD     A,R2
   \   000416   FA           MOV     R2,A
   \   000417   A3           INC     DPTR
   \   000418   E0           MOVX    A,@DPTR
   \   000419   3B           ADDC    A,R3
   \   00041A   FB           MOV     R3,A
   \   00041B   90....       MOV     DPTR,#pRxBuf
   \   00041E   E0           MOVX    A,@DPTR
   \   00041F   F8           MOV     R0,A
   \   000420   A3           INC     DPTR
   \   000421   E0           MOVX    A,@DPTR
   \   000422   C8           XCH     A,R0
   \   000423   2433         ADD     A,#0x33
   \   000425   F582         MOV     DPL,A
   \   000427   C8           XCH     A,R0
   \   000428   3400         ADDC    A,#0x0
   \   00042A   F583         MOV     DPH,A
   \   00042C   EA           MOV     A,R2
   \   00042D   F0           MOVX    @DPTR,A
   \   00042E   A3           INC     DPTR
   \   00042F   EB           MOV     A,R3
   \   000430   F0           MOVX    @DPTR,A
    775            }
    776          
    777            /* set internal values */
    778            pRxBuf->mac.srcAddr.addrMode  = srcAddrMode;
   \                     ??rxStartIsr_29:
   \   000431   E5..         MOV     A,?V5
   \   000433   C0E0         PUSH    A
   \   000435   90....       MOV     DPTR,#pRxBuf
   \   000438   E0           MOVX    A,@DPTR
   \   000439   F8           MOV     R0,A
   \   00043A   A3           INC     DPTR
   \   00043B   E0           MOVX    A,@DPTR
   \   00043C   C8           XCH     A,R0
   \   00043D   241B         ADD     A,#0x1b
   \   00043F   F582         MOV     DPL,A
   \   000441   C8           XCH     A,R0
   \   000442   3400         ADDC    A,#0x0
   \   000444   F583         MOV     DPH,A
   \   000446   D0E0         POP     A
   \   000448   F0           MOVX    @DPTR,A
    779            pRxBuf->mac.dstAddr.addrMode  = dstAddrMode;
   \   000449   E5..         MOV     A,?V3
   \   00044B   C0E0         PUSH    A
   \   00044D   90....       MOV     DPTR,#pRxBuf
   \   000450   E0           MOVX    A,@DPTR
   \   000451   F8           MOV     R0,A
   \   000452   A3           INC     DPTR
   \   000453   E0           MOVX    A,@DPTR
   \   000454   C8           XCH     A,R0
   \   000455   2424         ADD     A,#0x24
   \   000457   F582         MOV     DPL,A
   \   000459   C8           XCH     A,R0
   \   00045A   3400         ADDC    A,#0x0
   \   00045C   F583         MOV     DPH,A
   \   00045E   D0E0         POP     A
   \   000460   F0           MOVX    @DPTR,A
    780            pRxBuf->mac.timestamp         = MAC_RADIO_BACKOFF_CAPTURE();
   \   000461                ; Setup parameters for call to function macMcuOverflowCapture
   \   000461   12....       LCALL   `??macMcuOverflowCapture::?relay`; Banked call to: macMcuOverflowCapture
   \   000464   8A..         MOV     ?V0,R2
   \   000466   8B..         MOV     ?V1,R3
   \   000468   8C..         MOV     ?V2,R4
   \   00046A   8D..         MOV     ?V3,R5
   \   00046C   90....       MOV     DPTR,#pRxBuf
   \   00046F   E0           MOVX    A,@DPTR
   \   000470   F8           MOV     R0,A
   \   000471   A3           INC     DPTR
   \   000472   E0           MOVX    A,@DPTR
   \   000473   C8           XCH     A,R0
   \   000474   2425         ADD     A,#0x25
   \   000476   F582         MOV     DPL,A
   \   000478   C8           XCH     A,R0
   \   000479   3400         ADDC    A,#0x0
   \   00047B   F583         MOV     DPH,A
   \   00047D   78..         MOV     R0,#?V0
   \   00047F   12....       LCALL   ?L_MOV_TO_X
    781            pRxBuf->mac.timestamp2        = MAC_RADIO_TIMER_CAPTURE();
   \   000482                ; Setup parameters for call to function macMcuTimerCapture
   \   000482   12....       LCALL   `??macMcuTimerCapture::?relay`; Banked call to: macMcuTimerCapture
   \   000485   8A..         MOV     ?V0,R2
   \   000487   8B..         MOV     ?V1,R3
   \   000489   AA..         MOV     R2,?V0
   \   00048B   AB..         MOV     R3,?V1
   \   00048D   90....       MOV     DPTR,#pRxBuf
   \   000490   E0           MOVX    A,@DPTR
   \   000491   F8           MOV     R0,A
   \   000492   A3           INC     DPTR
   \   000493   E0           MOVX    A,@DPTR
   \   000494   C8           XCH     A,R0
   \   000495   2429         ADD     A,#0x29
   \   000497   F582         MOV     DPL,A
   \   000499   C8           XCH     A,R0
   \   00049A   3400         ADDC    A,#0x0
   \   00049C   F583         MOV     DPH,A
   \   00049E   EA           MOV     A,R2
   \   00049F   F0           MOVX    @DPTR,A
   \   0004A0   A3           INC     DPTR
   \   0004A1   EB           MOV     A,R3
   \   0004A2   F0           MOVX    @DPTR,A
    782          
    783            /* Special Case for Enhanced Beacon Request which has a different
    784             * frame version
    785             */
    786          #ifdef FEATURE_ENHANCED_BEACON
    787            if( MAC_FRAME_VERSION(&rxBuf[1]) == 2 )
    788            {
    789                pRxBuf->internal.frameType  = MAC_FRAME_TYPE_INTERNAL_MAC_VERSION_E | \
    790                                            MAC_FRAME_TYPE(&rxBuf[1]);
    791            }
    792            else
    793          #endif
    794            {
    795              pRxBuf->internal.frameType  = MAC_FRAME_TYPE(&rxBuf[1]);
   \   0004A3   90....       MOV     DPTR,#rxBuf + 1
   \   0004A6   E0           MOVX    A,@DPTR
   \   0004A7   5407         ANL     A,#0x7
   \   0004A9   C0E0         PUSH    A
   \   0004AB   90....       MOV     DPTR,#pRxBuf
   \   0004AE   E0           MOVX    A,@DPTR
   \   0004AF   F8           MOV     R0,A
   \   0004B0   A3           INC     DPTR
   \   0004B1   E0           MOVX    A,@DPTR
   \   0004B2   F583         MOV     DPH,A
   \   0004B4   8882         MOV     DPL,R0
   \   0004B6   A3           INC     DPTR
   \   0004B7   A3           INC     DPTR
   \   0004B8   A3           INC     DPTR
   \   0004B9   A3           INC     DPTR
   \   0004BA   A3           INC     DPTR
   \   0004BB   D0E0         POP     A
   \   0004BD   F0           MOVX    @DPTR,A
    796            }
    797          
    798            pRxBuf->mac.dsn               = MAC_SEQ_NUMBER(&rxBuf[1]);
   \   0004BE   90....       MOV     DPTR,#rxBuf + 3
   \   0004C1   E0           MOVX    A,@DPTR
   \   0004C2   C0E0         PUSH    A
   \   0004C4   90....       MOV     DPTR,#pRxBuf
   \   0004C7   E0           MOVX    A,@DPTR
   \   0004C8   F8           MOV     R0,A
   \   0004C9   A3           INC     DPTR
   \   0004CA   E0           MOVX    A,@DPTR
   \   0004CB   C8           XCH     A,R0
   \   0004CC   2432         ADD     A,#0x32
   \   0004CE   F582         MOV     DPL,A
   \   0004D0   C8           XCH     A,R0
   \   0004D1   3400         ADDC    A,#0x0
   \   0004D3   F583         MOV     DPH,A
   \   0004D5   D0E0         POP     A
   \   0004D7   F0           MOVX    @DPTR,A
    799            pRxBuf->internal.flags        = INTERNAL_FCF_FLAGS(&rxBuf[1]) | ackWithPending;
   \   0004D8   90....       MOV     DPTR,#rxBuf + 1
   \   0004DB   E0           MOVX    A,@DPTR
   \   0004DC   5478         ANL     A,#0x78
   \   0004DE   F8           MOV     R0,A
   \   0004DF   90....       MOV     DPTR,#rxBuf + 2
   \   0004E2   E0           MOVX    A,@DPTR
   \   0004E3   C4           SWAP    A
   \   0004E4   540F         ANL     A,#0xf
   \   0004E6   5403         ANL     A,#0x3
   \   0004E8   48           ORL     A,R0
   \   0004E9   4E           ORL     A,R6
   \   0004EA   C0E0         PUSH    A
   \   0004EC   90....       MOV     DPTR,#pRxBuf
   \   0004EF   E0           MOVX    A,@DPTR
   \   0004F0   F8           MOV     R0,A
   \   0004F1   A3           INC     DPTR
   \   0004F2   E0           MOVX    A,@DPTR
   \   0004F3   C8           XCH     A,R0
   \   0004F4   2407         ADD     A,#0x7
   \   0004F6   F582         MOV     DPL,A
   \   0004F8   C8           XCH     A,R0
   \   0004F9   3400         ADDC    A,#0x0
   \   0004FB   F583         MOV     DPH,A
   \   0004FD   D0E0         POP     A
   \   0004FF   F0           MOVX    @DPTR,A
    800          
    801            /*-------------------------------------------------------------------------------
    802             *  If the processing the addressing fields does not require more bytes from
    803             *  the FIFO go directly address processing function.  Otherwise, configure
    804             *  interrupt to jump there once bytes are received.
    805             */
    806            if (addrLen == 0)
   \   000500   EF           MOV     A,R7
   \   000501   700F         JNZ     ??rxStartIsr_30
    807            {
    808              /* no addressing fields to read, prepare for payload interrupts */
    809              pFuncRxState = &rxPayloadIsr;
   \   000503   90....       MOV     DPTR,#pFuncRxState
   \   000506   74..         MOV     A,#`??rxPayloadIsr::?relay` & 0xff
   \   000508   F0           MOVX    @DPTR,A
   \   000509   A3           INC     DPTR
   \   00050A   74..         MOV     A,#(`??rxPayloadIsr::?relay` >> 8) & 0xff
   \   00050C   F0           MOVX    @DPTR,A
    810              rxPrepPayload();
   \   00050D                ; Setup parameters for call to function rxPrepPayload
   \   00050D   12....       LCALL   `??rxPrepPayload::?relay`; Banked call to: rxPrepPayload
   \   000510   802B         SJMP    ??rxStartIsr_3
    811            }
    812            else
    813            {
    814              /* need to read and process addressing fields, prepare for address interrupt */
    815              rxNextLen = addrLen;
   \                     ??rxStartIsr_30:
   \   000512   EF           MOV     A,R7
   \   000513   90....       MOV     DPTR,#rxNextLen
   \   000516   F0           MOVX    @DPTR,A
    816              if (MAC_SEC_ENABLED(&rxBuf[1]))
   \   000517   90....       MOV     DPTR,#rxBuf + 1
   \   00051A   E0           MOVX    A,@DPTR
   \   00051B   A2E3         MOV     C,0xE0 /* A   */.3
   \   00051D   500A         JNC     ??rxStartIsr_31
    817              {
    818                /* When security is enabled, read off security control field as well */
    819                MAC_RADIO_SET_RX_THRESHOLD(rxNextLen + MAC_SEC_CONTROL_FIELD_LEN);
   \   00051F   90....       MOV     DPTR,#rxNextLen
   \   000522   E0           MOVX    A,@DPTR
   \   000523   906194       MOV     DPTR,#0x6194
   \   000526   F0           MOVX    @DPTR,A
   \   000527   800A         SJMP    ??rxStartIsr_32
    820              }
    821              else
    822              {
    823                MAC_RADIO_SET_RX_THRESHOLD(rxNextLen);
   \                     ??rxStartIsr_31:
   \   000529   90....       MOV     DPTR,#rxNextLen
   \   00052C   E0           MOVX    A,@DPTR
   \   00052D   24FF         ADD     A,#-0x1
   \   00052F   906194       MOV     DPTR,#0x6194
   \   000532   F0           MOVX    @DPTR,A
    824              }
    825              pFuncRxState = &rxAddrIsr;
   \                     ??rxStartIsr_32:
   \   000533   90....       MOV     DPTR,#pFuncRxState
   \   000536   74..         MOV     A,#`??rxAddrIsr::?relay` & 0xff
   \   000538   F0           MOVX    @DPTR,A
   \   000539   A3           INC     DPTR
   \   00053A   74..         MOV     A,#(`??rxAddrIsr::?relay` >> 8) & 0xff
   \   00053C   F0           MOVX    @DPTR,A
    826            }
    827          }
   \                     ??rxStartIsr_3:
   \   00053D   7402         MOV     A,#0x2
   \   00053F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000542   7F09         MOV     R7,#0x9
   \   000544   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000547                REQUIRE RFST
   \   000547                REQUIRE _A_IEN0
   \   000547                REQUIRE S1CON
   \   000547                REQUIRE RFIRQF1
    828          
    829          
    830          /*=================================================================================================
    831           * @fn          rxAddrIsr
    832           *
    833           * @brief       Receive ISR state for decoding address.  Reads and stores the address information
    834           *              from the incoming packet.
    835           *
    836           * @param       none
    837           *
    838           * @return      none
    839           *=================================================================================================
    840           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    841          static void rxAddrIsr(void)
   \                     rxAddrIsr:
    842          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV     A,#-0x14
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    843            uint8 buf[MAX_ADDR_FIELDS_LEN];
    844            uint8 dstAddrMode;
    845            uint8 srcAddrMode;
    846          #ifdef FEATURE_MAC_SECURITY
    847            uint8 securityControl;
    848          #endif /* MAC_SECURITY */
    849            uint8  * p;
    850          
    851            MAC_ASSERT(rxNextLen != 0); /* logic assumes at least one address byte in buffer */
   \   00000A   90....       MOV     DPTR,#rxNextLen
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   7003         JNZ     ??rxAddrIsr_0
   \   000010                ; Setup parameters for call to function halAssertHandler
   \   000010   12....       LCALL   `??halAssertHandler::?relay`; Banked call to: halAssertHandler
    852          
    853            /*  read out address fields into local buffer in one shot */
    854            MAC_RADIO_READ_RX_FIFO(buf, rxNextLen);
   \                     ??rxAddrIsr_0:
   \   000013                ; Setup parameters for call to function macMemReadRxFifo
   \   000013   90....       MOV     DPTR,#rxNextLen
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F9           MOV     R1,A
   \   000018   AA..         MOV     R2,?XSP + 0
   \   00001A   AB..         MOV     R3,?XSP + 1
   \   00001C   12....       LCALL   `??macMemReadRxFifo::?relay`; Banked call to: macMemReadRxFifo
    855          
    856            /* set pointer to buffer with addressing fields */
    857            p = buf;
   \   00001F   A8..         MOV     R0,?XSP + 0
   \   000021   A9..         MOV     R1,?XSP + 1
   \   000023   88..         MOV     ?V0,R0
   \   000025   89..         MOV     ?V1,R1
   \   000027   AE..         MOV     R6,?V0
   \   000029   AF..         MOV     R7,?V1
    858          
    859            /* destination address */
    860            dstAddrMode = MAC_DEST_ADDR_MODE(&rxBuf[1]);
   \   00002B   90....       MOV     DPTR,#rxBuf + 2
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   13           RRC     A
   \   000030   13           RRC     A
   \   000031   543F         ANL     A,#0x3f
   \   000033   5403         ANL     A,#0x3
   \   000035   FC           MOV     R4,A
    861            if (dstAddrMode != SADDR_MODE_NONE)
   \   000036   EC           MOV     A,R4
   \   000037   7003         JNZ     $+5
   \   000039   02....       LJMP    ??rxAddrIsr_1 & 0xFFFF
    862            {
    863              pRxBuf->mac.srcPanId = pRxBuf->mac.dstPanId = BUILD_UINT16(p[0], p[1]);
   \   00003C   8E82         MOV     DPL,R6
   \   00003E   8F83         MOV     DPH,R7
   \   000040   E0           MOVX    A,@DPTR
   \   000041   FA           MOV     R2,A
   \   000042   7B00         MOV     R3,#0x0
   \   000044   8E82         MOV     DPL,R6
   \   000046   8F83         MOV     DPH,R7
   \   000048   A3           INC     DPTR
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   F8           MOV     R0,A
   \   00004B   7900         MOV     R1,#0x0
   \   00004D   E4           CLR     A
   \   00004E   C8           XCH     A,R0
   \   00004F   F9           MOV     R1,A
   \   000050   EA           MOV     A,R2
   \   000051   28           ADD     A,R0
   \   000052   F8           MOV     R0,A
   \   000053   EB           MOV     A,R3
   \   000054   39           ADDC    A,R1
   \   000055   F9           MOV     R1,A
   \   000056   90....       MOV     DPTR,#pRxBuf
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   FA           MOV     R2,A
   \   00005B   A3           INC     DPTR
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   CA           XCH     A,R2
   \   00005E   242D         ADD     A,#0x2d
   \   000060   F582         MOV     DPL,A
   \   000062   CA           XCH     A,R2
   \   000063   3400         ADDC    A,#0x0
   \   000065   F583         MOV     DPH,A
   \   000067   E8           MOV     A,R0
   \   000068   F0           MOVX    @DPTR,A
   \   000069   A3           INC     DPTR
   \   00006A   E9           MOV     A,R1
   \   00006B   F0           MOVX    @DPTR,A
   \   00006C   90....       MOV     DPTR,#pRxBuf
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   F8           MOV     R0,A
   \   000071   A3           INC     DPTR
   \   000072   E0           MOVX    A,@DPTR
   \   000073   C8           XCH     A,R0
   \   000074   242D         ADD     A,#0x2d
   \   000076   F582         MOV     DPL,A
   \   000078   C8           XCH     A,R0
   \   000079   3400         ADDC    A,#0x0
   \   00007B   F583         MOV     DPH,A
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   F8           MOV     R0,A
   \   00007F   A3           INC     DPTR
   \   000080   E0           MOVX    A,@DPTR
   \   000081   F9           MOV     R1,A
   \   000082   90....       MOV     DPTR,#pRxBuf
   \   000085   E0           MOVX    A,@DPTR
   \   000086   FA           MOV     R2,A
   \   000087   A3           INC     DPTR
   \   000088   E0           MOVX    A,@DPTR
   \   000089   CA           XCH     A,R2
   \   00008A   242B         ADD     A,#0x2b
   \   00008C   F582         MOV     DPL,A
   \   00008E   CA           XCH     A,R2
   \   00008F   3400         ADDC    A,#0x0
   \   000091   F583         MOV     DPH,A
   \   000093   E8           MOV     A,R0
   \   000094   F0           MOVX    @DPTR,A
   \   000095   A3           INC     DPTR
   \   000096   E9           MOV     A,R1
   \   000097   F0           MOVX    @DPTR,A
    864              p += MAC_PAN_ID_FIELD_LEN;
   \   000098   EE           MOV     A,R6
   \   000099   2402         ADD     A,#0x2
   \   00009B   FE           MOV     R6,A
   \   00009C   5001         JNC     ??rxAddrIsr_2
   \   00009E   0F           INC     R7
    865              if (dstAddrMode == SADDR_MODE_EXT)
   \                     ??rxAddrIsr_2:
   \   00009F   7403         MOV     A,#0x3
   \   0000A1   6C           XRL     A,R4
   \   0000A2   701C         JNZ     ??rxAddrIsr_3
    866              {
    867                sAddrExtCpy(pRxBuf->mac.dstAddr.addr.extAddr, p);
   \   0000A4                ; Setup parameters for call to function sAddrExtCpy
   \   0000A4   EE           MOV     A,R6
   \   0000A5   FC           MOV     R4,A
   \   0000A6   EF           MOV     A,R7
   \   0000A7   FD           MOV     R5,A
   \   0000A8   90....       MOV     DPTR,#pRxBuf
   \   0000AB   E0           MOVX    A,@DPTR
   \   0000AC   241C         ADD     A,#0x1c
   \   0000AE   FA           MOV     R2,A
   \   0000AF   A3           INC     DPTR
   \   0000B0   E0           MOVX    A,@DPTR
   \   0000B1   3400         ADDC    A,#0x0
   \   0000B3   FB           MOV     R3,A
   \   0000B4   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    868                p += MAC_EXT_ADDR_FIELD_LEN;
   \   0000B7   EE           MOV     A,R6
   \   0000B8   2408         ADD     A,#0x8
   \   0000BA   FE           MOV     R6,A
   \   0000BB   503A         JNC     ??rxAddrIsr_1
   \   0000BD   0F           INC     R7
   \   0000BE   8037         SJMP    ??rxAddrIsr_1
    869              }
    870              else
    871              {
    872                pRxBuf->mac.dstAddr.addr.shortAddr = BUILD_UINT16(p[0], p[1]);
   \                     ??rxAddrIsr_3:
   \   0000C0   8E82         MOV     DPL,R6
   \   0000C2   8F83         MOV     DPH,R7
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   FA           MOV     R2,A
   \   0000C6   7B00         MOV     R3,#0x0
   \   0000C8   8E82         MOV     DPL,R6
   \   0000CA   8F83         MOV     DPH,R7
   \   0000CC   A3           INC     DPTR
   \   0000CD   E0           MOVX    A,@DPTR
   \   0000CE   F8           MOV     R0,A
   \   0000CF   7900         MOV     R1,#0x0
   \   0000D1   E4           CLR     A
   \   0000D2   C8           XCH     A,R0
   \   0000D3   F9           MOV     R1,A
   \   0000D4   EA           MOV     A,R2
   \   0000D5   28           ADD     A,R0
   \   0000D6   F8           MOV     R0,A
   \   0000D7   EB           MOV     A,R3
   \   0000D8   39           ADDC    A,R1
   \   0000D9   F9           MOV     R1,A
   \   0000DA   90....       MOV     DPTR,#pRxBuf
   \   0000DD   E0           MOVX    A,@DPTR
   \   0000DE   FA           MOV     R2,A
   \   0000DF   A3           INC     DPTR
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   CA           XCH     A,R2
   \   0000E2   241C         ADD     A,#0x1c
   \   0000E4   F582         MOV     DPL,A
   \   0000E6   CA           XCH     A,R2
   \   0000E7   3400         ADDC    A,#0x0
   \   0000E9   F583         MOV     DPH,A
   \   0000EB   E8           MOV     A,R0
   \   0000EC   F0           MOVX    @DPTR,A
   \   0000ED   A3           INC     DPTR
   \   0000EE   E9           MOV     A,R1
   \   0000EF   F0           MOVX    @DPTR,A
    873                p += MAC_SHORT_ADDR_FIELD_LEN;
   \   0000F0   EE           MOV     A,R6
   \   0000F1   2402         ADD     A,#0x2
   \   0000F3   FE           MOV     R6,A
   \   0000F4   5001         JNC     ??rxAddrIsr_1
   \   0000F6   0F           INC     R7
    874              }
    875            }
    876          
    877            /* sources address */
    878            srcAddrMode = MAC_SRC_ADDR_MODE(&rxBuf[1]);
   \                     ??rxAddrIsr_1:
   \   0000F7   90....       MOV     DPTR,#rxBuf + 2
   \   0000FA   E0           MOVX    A,@DPTR
   \   0000FB   C4           SWAP    A
   \   0000FC   13           RRC     A
   \   0000FD   13           RRC     A
   \   0000FE   5403         ANL     A,#0x3
   \   000100   FC           MOV     R4,A
    879            if (srcAddrMode != SADDR_MODE_NONE)
   \   000101   EC           MOV     A,R4
   \   000102   7003         JNZ     $+5
   \   000104   02....       LJMP    ??rxAddrIsr_4 & 0xFFFF
    880            {
    881              if (!(pRxBuf->internal.flags & MAC_RX_FLAG_INTRA_PAN))
   \   000107   90....       MOV     DPTR,#pRxBuf
   \   00010A   E0           MOVX    A,@DPTR
   \   00010B   F8           MOV     R0,A
   \   00010C   A3           INC     DPTR
   \   00010D   E0           MOVX    A,@DPTR
   \   00010E   C8           XCH     A,R0
   \   00010F   2407         ADD     A,#0x7
   \   000111   F582         MOV     DPL,A
   \   000113   C8           XCH     A,R0
   \   000114   3400         ADDC    A,#0x0
   \   000116   F583         MOV     DPH,A
   \   000118   E0           MOVX    A,@DPTR
   \   000119   A2E6         MOV     C,0xE0 /* A   */.6
   \   00011B   4037         JC      ??rxAddrIsr_5
    882              {
    883                pRxBuf->mac.srcPanId = BUILD_UINT16(p[0], p[1]);
   \   00011D   8E82         MOV     DPL,R6
   \   00011F   8F83         MOV     DPH,R7
   \   000121   E0           MOVX    A,@DPTR
   \   000122   FA           MOV     R2,A
   \   000123   7B00         MOV     R3,#0x0
   \   000125   8E82         MOV     DPL,R6
   \   000127   8F83         MOV     DPH,R7
   \   000129   A3           INC     DPTR
   \   00012A   E0           MOVX    A,@DPTR
   \   00012B   F8           MOV     R0,A
   \   00012C   7900         MOV     R1,#0x0
   \   00012E   E4           CLR     A
   \   00012F   C8           XCH     A,R0
   \   000130   F9           MOV     R1,A
   \   000131   EA           MOV     A,R2
   \   000132   28           ADD     A,R0
   \   000133   F8           MOV     R0,A
   \   000134   EB           MOV     A,R3
   \   000135   39           ADDC    A,R1
   \   000136   F9           MOV     R1,A
   \   000137   90....       MOV     DPTR,#pRxBuf
   \   00013A   E0           MOVX    A,@DPTR
   \   00013B   FA           MOV     R2,A
   \   00013C   A3           INC     DPTR
   \   00013D   E0           MOVX    A,@DPTR
   \   00013E   CA           XCH     A,R2
   \   00013F   242B         ADD     A,#0x2b
   \   000141   F582         MOV     DPL,A
   \   000143   CA           XCH     A,R2
   \   000144   3400         ADDC    A,#0x0
   \   000146   F583         MOV     DPH,A
   \   000148   E8           MOV     A,R0
   \   000149   F0           MOVX    @DPTR,A
   \   00014A   A3           INC     DPTR
   \   00014B   E9           MOV     A,R1
   \   00014C   F0           MOVX    @DPTR,A
    884                p += MAC_PAN_ID_FIELD_LEN;
   \   00014D   EE           MOV     A,R6
   \   00014E   2402         ADD     A,#0x2
   \   000150   FE           MOV     R6,A
   \   000151   5001         JNC     ??rxAddrIsr_5
   \   000153   0F           INC     R7
    885              }
    886              if (srcAddrMode == SADDR_MODE_EXT)
   \                     ??rxAddrIsr_5:
   \   000154   7403         MOV     A,#0x3
   \   000156   6C           XRL     A,R4
   \   000157   7015         JNZ     ??rxAddrIsr_6
    887              {
    888                sAddrExtCpy(pRxBuf->mac.srcAddr.addr.extAddr, p);
   \   000159                ; Setup parameters for call to function sAddrExtCpy
   \   000159   EE           MOV     A,R6
   \   00015A   FC           MOV     R4,A
   \   00015B   EF           MOV     A,R7
   \   00015C   FD           MOV     R5,A
   \   00015D   90....       MOV     DPTR,#pRxBuf
   \   000160   E0           MOVX    A,@DPTR
   \   000161   2413         ADD     A,#0x13
   \   000163   FA           MOV     R2,A
   \   000164   A3           INC     DPTR
   \   000165   E0           MOVX    A,@DPTR
   \   000166   3400         ADDC    A,#0x0
   \   000168   FB           MOV     R3,A
   \   000169   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00016C   8030         SJMP    ??rxAddrIsr_4
    889              }
    890              else
    891              {
    892                pRxBuf->mac.srcAddr.addr.shortAddr = BUILD_UINT16(p[0], p[1]);
   \                     ??rxAddrIsr_6:
   \   00016E   8E82         MOV     DPL,R6
   \   000170   8F83         MOV     DPH,R7
   \   000172   E0           MOVX    A,@DPTR
   \   000173   FA           MOV     R2,A
   \   000174   7B00         MOV     R3,#0x0
   \   000176   8E82         MOV     DPL,R6
   \   000178   8F83         MOV     DPH,R7
   \   00017A   A3           INC     DPTR
   \   00017B   E0           MOVX    A,@DPTR
   \   00017C   F8           MOV     R0,A
   \   00017D   7900         MOV     R1,#0x0
   \   00017F   E4           CLR     A
   \   000180   C8           XCH     A,R0
   \   000181   F9           MOV     R1,A
   \   000182   EA           MOV     A,R2
   \   000183   28           ADD     A,R0
   \   000184   F8           MOV     R0,A
   \   000185   EB           MOV     A,R3
   \   000186   39           ADDC    A,R1
   \   000187   F9           MOV     R1,A
   \   000188   90....       MOV     DPTR,#pRxBuf
   \   00018B   E0           MOVX    A,@DPTR
   \   00018C   FA           MOV     R2,A
   \   00018D   A3           INC     DPTR
   \   00018E   E0           MOVX    A,@DPTR
   \   00018F   CA           XCH     A,R2
   \   000190   2413         ADD     A,#0x13
   \   000192   F582         MOV     DPL,A
   \   000194   CA           XCH     A,R2
   \   000195   3400         ADDC    A,#0x0
   \   000197   F583         MOV     DPH,A
   \   000199   E8           MOV     A,R0
   \   00019A   F0           MOVX    @DPTR,A
   \   00019B   A3           INC     DPTR
   \   00019C   E9           MOV     A,R1
   \   00019D   F0           MOVX    @DPTR,A
    893              }
    894            }
    895          
    896          #ifdef FEATURE_MAC_SECURITY
    897            if (MAC_SEC_ENABLED(&rxBuf[1]))
    898            {
    899              uint8 keyIdMode;
    900          
    901              if (MAC_FRAME_VERSION(&rxBuf[1]) == 0)
    902              {
    903                /* MAC_UNSUPPORTED_LEGACY - Cancel the outgoing TX ACK.
    904                 * It may be too late but we have to try.
    905                 */
    906                MAC_RADIO_CANCEL_TX_ACK();
    907          
    908                /* clean up after unsupported security legacy */
    909                macRxHaltCleanup();
    910                return;
    911              }
    912          
    913              /* Copy addressing fields to RX buffer */
    914              osal_memcpy(pRxBuf->mhr.p, buf, rxNextLen);
    915              pRxBuf->mhr.p   += rxNextLen;
    916              pRxBuf->mhr.len += rxNextLen;
    917          
    918              /*-------------------------------------------------------------------------------
    919               *  Prepare for auxiliary security header interrupts.
    920               */
    921          
    922              /* read out security control field from FIFO (threshold set so bytes are guaranteed to be there) */
    923              MAC_RADIO_READ_RX_FIFO(&securityControl, MAC_SEC_CONTROL_FIELD_LEN);
    924          
    925              /* Copy security fields to MHR buffer */
    926              *pRxBuf->mhr.p   = securityControl;
    927              pRxBuf->mhr.p   += MAC_SEC_CONTROL_FIELD_LEN;
    928              pRxBuf->mhr.len += MAC_SEC_CONTROL_FIELD_LEN;
    929          
    930              /* store security level and key ID mode */
    931              pRxBuf->sec.securityLevel = SECURITY_LEVEL(securityControl);
    932              pRxBuf->sec.keyIdMode = keyIdMode = KEY_IDENTIFIER_MODE(securityControl);
    933          
    934              /* Corrupted RX frame, should never occur. */
    935              if ((keyIdMode > MAC_KEY_ID_MODE_8)
    936              /* Get the next RX length according to AuxLen table minus security control field.
    937               * The security control length is counted already.
    938               */
    939              || ((macKeySourceLen[keyIdMode] + MAC_FRAME_COUNTER_LEN) >= rxPayloadLen)
    940              /* Security Enabled subfield is one, but the Security Level in the header is zero:
    941               * MAC_UNSUPPORTED_SECURITY - Cancel the outgoing TX ACK.
    942               */
    943              || (pRxBuf->sec.securityLevel == MAC_SEC_LEVEL_NONE))
    944              {
    945                /* It may be too late but we have to try. */
    946                MAC_RADIO_CANCEL_TX_ACK();
    947          
    948                /* clean up after unsupported security or corrupted RX frame. */
    949                macRxHaltCleanup();
    950                return;
    951              }
    952          
    953              /* get the next RX length according to AuxLen table minus security control field.
    954               * The sceurity control length is counted already.
    955               */
    956              rxNextLen = macKeySourceLen[keyIdMode] + MAC_FRAME_COUNTER_LEN;
    957              MAC_RADIO_SET_RX_THRESHOLD(rxNextLen);
    958              pFuncRxState = &rxSecurityHdrIsr;
    959            }
    960            else
    961          #endif /* MAC_SECURITY */
    962            {
    963              /* clear security level */
    964              pRxBuf->sec.securityLevel = MAC_SEC_LEVEL_NONE;
   \                     ??rxAddrIsr_4:
   \   00019E   90....       MOV     DPTR,#pRxBuf
   \   0001A1   E0           MOVX    A,@DPTR
   \   0001A2   F8           MOV     R0,A
   \   0001A3   A3           INC     DPTR
   \   0001A4   E0           MOVX    A,@DPTR
   \   0001A5   C8           XCH     A,R0
   \   0001A6   2410         ADD     A,#0x10
   \   0001A8   F582         MOV     DPL,A
   \   0001AA   C8           XCH     A,R0
   \   0001AB   3400         ADDC    A,#0x0
   \   0001AD   F583         MOV     DPH,A
   \   0001AF   7400         MOV     A,#0x0
   \   0001B1   F0           MOVX    @DPTR,A
    965          
    966              /*-------------------------------------------------------------------------------
    967               *  Prepare for payload interrupts.
    968               */
    969              pFuncRxState = &rxPayloadIsr;
   \   0001B2   90....       MOV     DPTR,#pFuncRxState
   \   0001B5   74..         MOV     A,#`??rxPayloadIsr::?relay` & 0xff
   \   0001B7   F0           MOVX    @DPTR,A
   \   0001B8   A3           INC     DPTR
   \   0001B9   74..         MOV     A,#(`??rxPayloadIsr::?relay` >> 8) & 0xff
   \   0001BB   F0           MOVX    @DPTR,A
    970              rxPrepPayload();
   \   0001BC                ; Setup parameters for call to function rxPrepPayload
   \   0001BC   12....       LCALL   `??rxPrepPayload::?relay`; Banked call to: rxPrepPayload
    971            }
    972          }
   \   0001BF   7414         MOV     A,#0x14
   \   0001C1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001C4   7F02         MOV     R7,#0x2
   \   0001C6   02....       LJMP    ?BANKED_LEAVE_XDATA
    973          
    974          
    975          #ifdef FEATURE_MAC_SECURITY
    976          /*=================================================================================================
    977           * @fn          rxSecurityHdrIsr
    978           *
    979           * @brief       Receive ISR state for reading out and storing the auxiliary security header.
    980           *
    981           * @param       none
    982           *
    983           * @return      none
    984           *=================================================================================================
    985           */
    986          static void rxSecurityHdrIsr(void)
    987          {
    988            uint8 buf[MAC_FRAME_COUNTER_LEN + MAC_KEY_ID_8_LEN];
    989          
    990            /* read out frame counter and key ID */
    991            MAC_RADIO_READ_RX_FIFO(buf, rxNextLen);
    992          
    993            /* Incoming frame counter */
    994            pRxBuf->frameCounter = BUILD_UINT32(buf[0], buf[1], buf[2], buf[3]);
    995            if (rxNextLen - MAC_FRAME_COUNTER_LEN > 0)
    996            {
    997              /* Explicit mode */
    998              osal_memcpy(pRxBuf->sec.keySource, &buf[MAC_FRAME_COUNTER_LEN], rxNextLen - MAC_FRAME_COUNTER_LEN - 1);
    999              pRxBuf->sec.keyIndex = buf[rxNextLen - MAC_KEY_INDEX_LEN];
   1000            }
   1001          
   1002            /* Copy security fields to RX buffer */
   1003            osal_memcpy(pRxBuf->mhr.p, buf, rxNextLen);
   1004            pRxBuf->mhr.p   += rxNextLen;
   1005            pRxBuf->mhr.len += rxNextLen;
   1006          
   1007            /* Update payload pointer and payload length. The rxPayloadLen includes security header length
   1008             * and SCF byte. The security header and SCF length must be deducted from the rxPayloadLen.
   1009             */
   1010            rxPayloadLen    -= (rxNextLen + MAC_SEC_CONTROL_FIELD_LEN);
   1011            pRxBuf->msdu.len = rxPayloadLen;
   1012            pRxBuf->mhr.len += rxPayloadLen;
   1013          
   1014            /*-------------------------------------------------------------------------------
   1015             *  Prepare for payload interrupts.
   1016             */
   1017            pFuncRxState = &rxPayloadIsr;
   1018            rxPrepPayload();
   1019          }
   1020          #endif /* MAC_SECURITY */
   1021          
   1022          
   1023          /*=================================================================================================
   1024           * @fn          rxPrepPayload
   1025           *
   1026           * @brief       Common code to prepare for the payload ISR.
   1027           *
   1028           * @param       none
   1029           *
   1030           * @return      none
   1031           *=================================================================================================
   1032           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1033          static void rxPrepPayload(void)
   \                     rxPrepPayload:
   1034          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1035            if (rxPayloadLen == 0)
   \   000004   90....       MOV     DPTR,#rxPayloadLen
   \   000007   E0           MOVX    A,@DPTR
   \   000008   7012         JNZ     ??rxPrepPayload_0
   1036            {
   1037              MAC_RADIO_SET_RX_THRESHOLD(MAC_FCS_FIELD_LEN);
   \   00000A   906194       MOV     DPTR,#0x6194
   \   00000D   7401         MOV     A,#0x1
   \   00000F   F0           MOVX    @DPTR,A
   1038              pFuncRxState = &rxFcsIsr;
   \   000010   90....       MOV     DPTR,#pFuncRxState
   \   000013   74..         MOV     A,#`??rxFcsIsr::?relay` & 0xff
   \   000015   F0           MOVX    @DPTR,A
   \   000016   A3           INC     DPTR
   \   000017   74..         MOV     A,#(`??rxFcsIsr::?relay` >> 8) & 0xff
   \   000019   F0           MOVX    @DPTR,A
   \   00001A   8023         SJMP    ??rxPrepPayload_1
   1039            }
   1040            else
   1041            {
   1042              rxNextLen = MIN(rxPayloadLen, MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT);
   \                     ??rxPrepPayload_0:
   \   00001C   90....       MOV     DPTR,#rxPayloadLen
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   C3           CLR     C
   \   000021   9410         SUBB    A,#0x10
   \   000023   500A         JNC     ??rxPrepPayload_2
   \   000025   90....       MOV     DPTR,#rxPayloadLen
   \   000028   E0           MOVX    A,@DPTR
   \   000029   90....       MOV     DPTR,#rxNextLen
   \   00002C   F0           MOVX    @DPTR,A
   \   00002D   8006         SJMP    ??rxPrepPayload_3
   \                     ??rxPrepPayload_2:
   \   00002F   90....       MOV     DPTR,#rxNextLen
   \   000032   7410         MOV     A,#0x10
   \   000034   F0           MOVX    @DPTR,A
   1043              MAC_RADIO_SET_RX_THRESHOLD(rxNextLen);
   \                     ??rxPrepPayload_3:
   \   000035   90....       MOV     DPTR,#rxNextLen
   \   000038   E0           MOVX    A,@DPTR
   \   000039   24FF         ADD     A,#-0x1
   \   00003B   906194       MOV     DPTR,#0x6194
   \   00003E   F0           MOVX    @DPTR,A
   1044            }
   1045          }
   \                     ??rxPrepPayload_1:
   \   00003F   D083         POP     DPH
   \   000041   D082         POP     DPL
   \   000043   02....       LJMP    ?BRET
   1046          
   1047          
   1048          /*=================================================================================================
   1049           * @fn          rxPayloadIsr
   1050           *
   1051           * @brief       Receive ISR state for reading out and storing the packet payload.
   1052           *
   1053           * @param       none
   1054           *
   1055           * @return      none
   1056           *=================================================================================================
   1057           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1058          static void rxPayloadIsr(void)
   \                     rxPayloadIsr:
   1059          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1060            MAC_RADIO_READ_RX_FIFO(pRxBuf->mhr.p, rxNextLen);
   \   000004                ; Setup parameters for call to function macMemReadRxFifo
   \   000004   90....       MOV     DPTR,#rxNextLen
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F9           MOV     R1,A
   \   000009   90....       MOV     DPTR,#pRxBuf
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F8           MOV     R0,A
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   C8           XCH     A,R0
   \   000011   2433         ADD     A,#0x33
   \   000013   F582         MOV     DPL,A
   \   000015   C8           XCH     A,R0
   \   000016   3400         ADDC    A,#0x0
   \   000018   F583         MOV     DPH,A
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   FA           MOV     R2,A
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   FB           MOV     R3,A
   \   00001F   12....       LCALL   `??macMemReadRxFifo::?relay`; Banked call to: macMemReadRxFifo
   1061            pRxBuf->mhr.p += rxNextLen;
   \   000022   90....       MOV     DPTR,#rxNextLen
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F8           MOV     R0,A
   \   000027   7900         MOV     R1,#0x0
   \   000029   90....       MOV     DPTR,#pRxBuf
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   FA           MOV     R2,A
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   CA           XCH     A,R2
   \   000031   2433         ADD     A,#0x33
   \   000033   F582         MOV     DPL,A
   \   000035   CA           XCH     A,R2
   \   000036   3400         ADDC    A,#0x0
   \   000038   F583         MOV     DPH,A
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   28           ADD     A,R0
   \   00003C   F8           MOV     R0,A
   \   00003D   A3           INC     DPTR
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   39           ADDC    A,R1
   \   000040   F9           MOV     R1,A
   \   000041   90....       MOV     DPTR,#pRxBuf
   \   000044   E0           MOVX    A,@DPTR
   \   000045   FA           MOV     R2,A
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   CA           XCH     A,R2
   \   000049   2433         ADD     A,#0x33
   \   00004B   F582         MOV     DPL,A
   \   00004D   CA           XCH     A,R2
   \   00004E   3400         ADDC    A,#0x0
   \   000050   F583         MOV     DPH,A
   \   000052   E8           MOV     A,R0
   \   000053   F0           MOVX    @DPTR,A
   \   000054   A3           INC     DPTR
   \   000055   E9           MOV     A,R1
   \   000056   F0           MOVX    @DPTR,A
   1062          
   1063            rxPayloadLen -= rxNextLen;
   \   000057   90....       MOV     DPTR,#rxNextLen
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   F8           MOV     R0,A
   \   00005C   90....       MOV     DPTR,#rxPayloadLen
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   C3           CLR     C
   \   000061   98           SUBB    A,R0
   \   000062   F0           MOVX    @DPTR,A
   1064          
   1065            rxPrepPayload();
   \   000063                ; Setup parameters for call to function rxPrepPayload
   \   000063   12....       LCALL   `??rxPrepPayload::?relay`; Banked call to: rxPrepPayload
   1066          }
   \   000066   D083         POP     DPH
   \   000068   D082         POP     DPL
   \   00006A   02....       LJMP    ?BRET
   1067          
   1068          
   1069          /*=================================================================================================
   1070           * @fn          rxFcsIsr
   1071           *
   1072           * @brief       Receive ISR state for handling the FCS.
   1073           *
   1074           * @param       none
   1075           *
   1076           * @return      none
   1077           *=================================================================================================
   1078           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1079          static void rxFcsIsr(void)
   \                     rxFcsIsr:
   1080          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1081            uint8 crcOK;
   1082            uint8 ackWithPending = 0;
   \   000005   7E00         MOV     R6,#0x0
   1083          
   1084            /* read FCS, rxBuf is now available storage */
   1085            MAC_RADIO_READ_RX_FIFO(rxBuf, MAC_FCS_FIELD_LEN);
   \   000007                ; Setup parameters for call to function macMemReadRxFifo
   \   000007   7902         MOV     R1,#0x2
   \   000009   7A..         MOV     R2,#rxBuf & 0xff
   \   00000B   7B..         MOV     R3,#(rxBuf >> 8) & 0xff
   \   00000D   12....       LCALL   `??macMemReadRxFifo::?relay`; Banked call to: macMemReadRxFifo
   1086          
   1087            /*
   1088             *  The FCS has actually been replaced within the radio by a proprietary version of the FCS.
   1089             *  This proprietary FCS is two bytes (same length as the real FCS) and contains:
   1090             *    1) the RSSI value
   1091             *    2) the average correlation value (used for LQI)
   1092             *    3) a CRC passed bit
   1093             */
   1094          
   1095            /* save the "CRC-is-OK" status */
   1096            crcOK = PROPRIETARY_FCS_CRC_OK(rxBuf);
   \   000010   90....       MOV     DPTR,#rxBuf + 1
   \   000013   E0           MOVX    A,@DPTR
   \   000014   5480         ANL     A,#0x80
   \   000016   F5..         MOV     ?V1,A
   1097          
   1098            /*
   1099             *  See if the frame should be passed up to high-level MAC.  If the CRC is OK, the
   1100             *  the frame is always passed up.  Frames with a bad CRC are also passed up *if*
   1101             *  a special variant of promiscuous mode is active.
   1102             */
   1103            if (crcOK || (rxPromiscuousMode == MAC_PROMISCUOUS_MODE_WITH_BAD_CRC))
   \   000018   E5..         MOV     A,?V1
   \   00001A   700B         JNZ     ??rxFcsIsr_0
   \   00001C   90....       MOV     DPTR,#rxPromiscuousMode
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   6402         XRL     A,#0x2
   \   000022   6003         JZ      $+5
   \   000024   02....       LJMP    ??rxFcsIsr_1 & 0xFFFF
   1104            {
   1105              int8 rssiDbm;
   1106              uint8 corr;
   1107          
   1108          #ifdef FEATURE_SYSTEM_STATS
   1109              /* Increment diagnostic CRC success counter */
   1110              macLowLevelDiags( MAC_DIAGS_RX_CRC_PASS );
   1111          #endif /* FEATURE_SYSTEM_STATS */
   1112          
   1113              /*
   1114               *  As power saving optimization, set state variable to indicate physical receive
   1115               *  has completed and then request turning of the receiver.  This means the receiver
   1116               *  can be off (if other conditions permit) during execution of the callback function.
   1117               *
   1118               *  The receiver will be requested to turn off once again at the end of the receive
   1119               *  logic.  There is no harm in doing this.
   1120               */
   1121              macRxActive = MAC_RX_ACTIVE_DONE;
   \                     ??rxFcsIsr_0:
   \   000027   90....       MOV     DPTR,#macRxActive
   \   00002A   7402         MOV     A,#0x2
   \   00002C   F0           MOVX    @DPTR,A
   1122              macRxOffRequest();
   \   00002D                ; Setup parameters for call to function macRxOffRequest
   \   00002D   12....       LCALL   `??macRxOffRequest::?relay`; Banked call to: macRxOffRequest
   1123          
   1124              /* decode RSSI and correlation values */
   1125              rssiDbm = PROPRIETARY_FCS_RSSI(rxBuf) + MAC_RADIO_RSSI_OFFSET;
   \   000030   90....       MOV     DPTR,#rxBuf
   \   000033   E0           MOVX    A,@DPTR
   \   000034   24B7         ADD     A,#-0x49
   \   000036   F5..         MOV     ?V0,A
   1126              MAC_RADIO_RSSI_LNA_OFFSET(rssiDbm);
   1127              corr = PROPRIETARY_FCS_CORRELATION_VALUE(rxBuf);
   \   000038   90....       MOV     DPTR,#rxBuf + 1
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   547F         ANL     A,#0x7f
   \   00003E   FF           MOV     R7,A
   1128          
   1129              /* record parameters that get passed up to high-level */
   1130              pRxBuf->mac.mpduLinkQuality = macRadioComputeLQI(rssiDbm, corr);
   \   00003F                ; Setup parameters for call to function macRadioComputeLQI
   \   00003F   EF           MOV     A,R7
   \   000040   FA           MOV     R2,A
   \   000041   A9..         MOV     R1,?V0
   \   000043   12....       LCALL   `??macRadioComputeLQI::?relay`; Banked call to: macRadioComputeLQI
   \   000046   E9           MOV     A,R1
   \   000047   C0E0         PUSH    A
   \   000049   90....       MOV     DPTR,#pRxBuf
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   F8           MOV     R0,A
   \   00004E   A3           INC     DPTR
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   C8           XCH     A,R0
   \   000051   242F         ADD     A,#0x2f
   \   000053   F582         MOV     DPL,A
   \   000055   C8           XCH     A,R0
   \   000056   3400         ADDC    A,#0x0
   \   000058   F583         MOV     DPH,A
   \   00005A   D0E0         POP     A
   \   00005C   F0           MOVX    @DPTR,A
   1131              pRxBuf->mac.rssi = rssiDbm;
   \   00005D   E5..         MOV     A,?V0
   \   00005F   C0E0         PUSH    A
   \   000061   90....       MOV     DPTR,#pRxBuf
   \   000064   E0           MOVX    A,@DPTR
   \   000065   F8           MOV     R0,A
   \   000066   A3           INC     DPTR
   \   000067   E0           MOVX    A,@DPTR
   \   000068   C8           XCH     A,R0
   \   000069   2431         ADD     A,#0x31
   \   00006B   F582         MOV     DPL,A
   \   00006D   C8           XCH     A,R0
   \   00006E   3400         ADDC    A,#0x0
   \   000070   F583         MOV     DPH,A
   \   000072   D0E0         POP     A
   \   000074   F0           MOVX    @DPTR,A
   1132              pRxBuf->mac.correlation = corr;
   \   000075   EF           MOV     A,R7
   \   000076   C0E0         PUSH    A
   \   000078   90....       MOV     DPTR,#pRxBuf
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   F8           MOV     R0,A
   \   00007D   A3           INC     DPTR
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   C8           XCH     A,R0
   \   000080   2430         ADD     A,#0x30
   \   000082   F582         MOV     DPL,A
   \   000084   C8           XCH     A,R0
   \   000085   3400         ADDC    A,#0x0
   \   000087   F583         MOV     DPH,A
   \   000089   D0E0         POP     A
   \   00008B   F0           MOVX    @DPTR,A
   1133          
   1134              /* set the MSDU pointer to point at start of data */
   1135              pRxBuf->mhr.p   = (uint8 *) (pRxBuf + 1);
   \   00008C   90....       MOV     DPTR,#pRxBuf
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   243A         ADD     A,#0x3a
   \   000092   F8           MOV     R0,A
   \   000093   A3           INC     DPTR
   \   000094   E0           MOVX    A,@DPTR
   \   000095   3400         ADDC    A,#0x0
   \   000097   F9           MOV     R1,A
   \   000098   90....       MOV     DPTR,#pRxBuf
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   FA           MOV     R2,A
   \   00009D   A3           INC     DPTR
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   CA           XCH     A,R2
   \   0000A0   2433         ADD     A,#0x33
   \   0000A2   F582         MOV     DPL,A
   \   0000A4   CA           XCH     A,R2
   \   0000A5   3400         ADDC    A,#0x0
   \   0000A7   F583         MOV     DPH,A
   \   0000A9   E8           MOV     A,R0
   \   0000AA   F0           MOVX    @DPTR,A
   \   0000AB   A3           INC     DPTR
   \   0000AC   E9           MOV     A,R1
   \   0000AD   F0           MOVX    @DPTR,A
   1136              pRxBuf->msdu.p += (pRxBuf->mhr.len - pRxBuf->msdu.len);
   \   0000AE   90....       MOV     DPTR,#pRxBuf
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   F8           MOV     R0,A
   \   0000B3   A3           INC     DPTR
   \   0000B4   E0           MOVX    A,@DPTR
   \   0000B5   C8           XCH     A,R0
   \   0000B6   2435         ADD     A,#0x35
   \   0000B8   F582         MOV     DPL,A
   \   0000BA   C8           XCH     A,R0
   \   0000BB   3400         ADDC    A,#0x0
   \   0000BD   F583         MOV     DPH,A
   \   0000BF   E0           MOVX    A,@DPTR
   \   0000C0   FA           MOV     R2,A
   \   0000C1   7B00         MOV     R3,#0x0
   \   0000C3   90....       MOV     DPTR,#pRxBuf
   \   0000C6   E0           MOVX    A,@DPTR
   \   0000C7   F8           MOV     R0,A
   \   0000C8   A3           INC     DPTR
   \   0000C9   E0           MOVX    A,@DPTR
   \   0000CA   F583         MOV     DPH,A
   \   0000CC   8882         MOV     DPL,R0
   \   0000CE   A3           INC     DPTR
   \   0000CF   A3           INC     DPTR
   \   0000D0   A3           INC     DPTR
   \   0000D1   A3           INC     DPTR
   \   0000D2   E0           MOVX    A,@DPTR
   \   0000D3   F8           MOV     R0,A
   \   0000D4   7900         MOV     R1,#0x0
   \   0000D6   EA           MOV     A,R2
   \   0000D7   C3           CLR     C
   \   0000D8   98           SUBB    A,R0
   \   0000D9   F8           MOV     R0,A
   \   0000DA   EB           MOV     A,R3
   \   0000DB   99           SUBB    A,R1
   \   0000DC   F9           MOV     R1,A
   \   0000DD   90....       MOV     DPTR,#pRxBuf
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   FA           MOV     R2,A
   \   0000E2   A3           INC     DPTR
   \   0000E3   E0           MOVX    A,@DPTR
   \   0000E4   F583         MOV     DPH,A
   \   0000E6   8A82         MOV     DPL,R2
   \   0000E8   A3           INC     DPTR
   \   0000E9   A3           INC     DPTR
   \   0000EA   E0           MOVX    A,@DPTR
   \   0000EB   28           ADD     A,R0
   \   0000EC   F8           MOV     R0,A
   \   0000ED   A3           INC     DPTR
   \   0000EE   E0           MOVX    A,@DPTR
   \   0000EF   39           ADDC    A,R1
   \   0000F0   F9           MOV     R1,A
   \   0000F1   90....       MOV     DPTR,#pRxBuf
   \   0000F4   E0           MOVX    A,@DPTR
   \   0000F5   FA           MOV     R2,A
   \   0000F6   A3           INC     DPTR
   \   0000F7   E0           MOVX    A,@DPTR
   \   0000F8   F583         MOV     DPH,A
   \   0000FA   8A82         MOV     DPL,R2
   \   0000FC   A3           INC     DPTR
   \   0000FD   A3           INC     DPTR
   \   0000FE   E8           MOV     A,R0
   \   0000FF   F0           MOVX    @DPTR,A
   \   000100   A3           INC     DPTR
   \   000101   E9           MOV     A,R1
   \   000102   F0           MOVX    @DPTR,A
   1137          
   1138              if ((pRxBuf->internal.flags & MAC_RX_FLAG_ACK_PENDING) && (*pRxBuf->msdu.p != MAC_DATA_REQ_FRAME))
   \   000103   90....       MOV     DPTR,#pRxBuf
   \   000106   E0           MOVX    A,@DPTR
   \   000107   F8           MOV     R0,A
   \   000108   A3           INC     DPTR
   \   000109   E0           MOVX    A,@DPTR
   \   00010A   C8           XCH     A,R0
   \   00010B   2407         ADD     A,#0x7
   \   00010D   F582         MOV     DPL,A
   \   00010F   C8           XCH     A,R0
   \   000110   3400         ADDC    A,#0x0
   \   000112   F583         MOV     DPH,A
   \   000114   E0           MOVX    A,@DPTR
   \   000115   A2E2         MOV     C,0xE0 /* A   */.2
   \   000117   5021         JNC     ??rxFcsIsr_2
   \   000119   90....       MOV     DPTR,#pRxBuf
   \   00011C   E0           MOVX    A,@DPTR
   \   00011D   F8           MOV     R0,A
   \   00011E   A3           INC     DPTR
   \   00011F   E0           MOVX    A,@DPTR
   \   000120   F583         MOV     DPH,A
   \   000122   8882         MOV     DPL,R0
   \   000124   A3           INC     DPTR
   \   000125   A3           INC     DPTR
   \   000126   E0           MOVX    A,@DPTR
   \   000127   F8           MOV     R0,A
   \   000128   A3           INC     DPTR
   \   000129   E0           MOVX    A,@DPTR
   \   00012A   F583         MOV     DPH,A
   \   00012C   8882         MOV     DPL,R0
   \   00012E   E0           MOVX    A,@DPTR
   \   00012F   6404         XRL     A,#0x4
   \   000131   6007         JZ      ??rxFcsIsr_2
   1139              {
   1140                /* For non-data request commands, cancel the pending bit in the ACK. */
   1141                MAC_RADIO_TX_ACK();
   \   000133   90618A       MOV     DPTR,#0x618a
   \   000136   E0           MOVX    A,@DPTR
   \   000137   C2E2         CLR     0xE0 /* A   */.2
   \   000139   F0           MOVX    @DPTR,A
   1142              }
   1143          
   1144              /* Read the source matching result back */
   1145              if( macSrcMatchIsEnabled && MAC_RADIO_SRC_MATCH_RESULT() )
   \                     ??rxFcsIsr_2:
   \   00013A   90....       MOV     DPTR,#macSrcMatchIsEnabled
   \   00013D   E0           MOVX    A,@DPTR
   \   00013E   6008         JZ      ??rxFcsIsr_3
   \   000140                ; Setup parameters for call to function MAC_SrcMatchCheckResult
   \   000140   12....       LCALL   `??MAC_SrcMatchCheckResult::?relay`; Banked call to: MAC_SrcMatchCheckResult
   \   000143   E9           MOV     A,R1
   \   000144   6002         JZ      ??rxFcsIsr_3
   1146              {
   1147                /* This result will not overwrite the previously determined pRxBuf->internal.flags */
   1148                ackWithPending = MAC_RX_FLAG_ACK_PENDING;
   \   000146   7E04         MOV     R6,#0x4
   1149              }
   1150              pRxBuf->internal.flags |= ( crcOK | ackWithPending );
   \                     ??rxFcsIsr_3:
   \   000148   E5..         MOV     A,?V1
   \   00014A   4E           ORL     A,R6
   \   00014B   F8           MOV     R0,A
   \   00014C   90....       MOV     DPTR,#pRxBuf
   \   00014F   E0           MOVX    A,@DPTR
   \   000150   F9           MOV     R1,A
   \   000151   A3           INC     DPTR
   \   000152   E0           MOVX    A,@DPTR
   \   000153   C9           XCH     A,R1
   \   000154   2407         ADD     A,#0x7
   \   000156   F582         MOV     DPL,A
   \   000158   C9           XCH     A,R1
   \   000159   3400         ADDC    A,#0x0
   \   00015B   F583         MOV     DPH,A
   \   00015D   E0           MOVX    A,@DPTR
   \   00015E   48           ORL     A,R0
   \   00015F   F0           MOVX    @DPTR,A
   1151          
   1152              /* finally... execute callback function */
   1153              macRxCompleteCallback(pRxBuf);
   \   000160                ; Setup parameters for call to function macRxCompleteCallback
   \   000160   90....       MOV     DPTR,#pRxBuf
   \   000163   E0           MOVX    A,@DPTR
   \   000164   FA           MOV     R2,A
   \   000165   A3           INC     DPTR
   \   000166   E0           MOVX    A,@DPTR
   \   000167   FB           MOV     R3,A
   \   000168   12....       LCALL   `??macRxCompleteCallback::?relay`; Banked call to: macRxCompleteCallback
   1154              pRxBuf = NULL; /* needed to indicate buffer is no longer allocated */
   \   00016B   90....       MOV     DPTR,#pRxBuf
   \   00016E   7400         MOV     A,#0x0
   \   000170   F0           MOVX    @DPTR,A
   \   000171   A3           INC     DPTR
   \   000172   7400         MOV     A,#0x0
   \   000174   F0           MOVX    @DPTR,A
   \   000175   801F         SJMP    ??rxFcsIsr_4
   1155            }
   1156            else
   1157            {
   1158          #ifdef FEATURE_SYSTEM_STATS
   1159              /* Increment diagnostic CRC failure counter */
   1160              macLowLevelDiags( MAC_DIAGS_RX_CRC_FAIL );
   1161          #endif /* FEATURE_SYSTEM_STATS */
   1162          
   1163              /*
   1164               *  The CRC is bad so no ACK was sent.  Cancel any callback and clear the flag.
   1165               *  (It's OK to cancel the outgoing ACK even if an ACK was not requested.  It's
   1166               *  slightly more efficient to do so.)
   1167               */
   1168              MAC_RADIO_CANCEL_ACK_TX_DONE_CALLBACK();
   \                     ??rxFcsIsr_1:
   \   000177   9061A4       MOV     DPTR,#0x61a4
   \   00017A   E0           MOVX    A,@DPTR
   \   00017B   C2E0         CLR     0xE0 /* A   */.0
   \   00017D   F0           MOVX    @DPTR,A
   1169              macRxOutgoingAckFlag = 0;
   \   00017E   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   000181   7400         MOV     A,#0x0
   \   000183   F0           MOVX    @DPTR,A
   1170          
   1171              /* the CRC failed so the packet must be discarded */
   1172              MEM_FREE((uint8 **)&pRxBuf);
   \   000184                ; Setup parameters for call to function macDataRxMemFree
   \   000184   7A..         MOV     R2,#pRxBuf & 0xff
   \   000186   7B..         MOV     R3,#(pRxBuf >> 8) & 0xff
   \   000188   12....       LCALL   `??macDataRxMemFree::?relay`; Banked call to: macDataRxMemFree
   \   00018B   E9           MOV     A,R1
   1173              pRxBuf = NULL;  /* needed to indicate buffer is no longer allocated */
   \   00018C   90....       MOV     DPTR,#pRxBuf
   \   00018F   7400         MOV     A,#0x0
   \   000191   F0           MOVX    @DPTR,A
   \   000192   A3           INC     DPTR
   \   000193   7400         MOV     A,#0x0
   \   000195   F0           MOVX    @DPTR,A
   1174            }
   1175          
   1176            /* reset threshold level, reset receive state, and complete receive logic */
   1177            MAC_RADIO_SET_RX_THRESHOLD(RX_THRESHOLD_START_LEN);
   \                     ??rxFcsIsr_4:
   \   000196   906194       MOV     DPTR,#0x6194
   \   000199   7405         MOV     A,#0x5
   \   00019B   F0           MOVX    @DPTR,A
   1178            pFuncRxState = &rxStartIsr;
   \   00019C   90....       MOV     DPTR,#pFuncRxState
   \   00019F   74..         MOV     A,#`??rxStartIsr::?relay` & 0xff
   \   0001A1   F0           MOVX    @DPTR,A
   \   0001A2   A3           INC     DPTR
   \   0001A3   74..         MOV     A,#(`??rxStartIsr::?relay` >> 8) & 0xff
   \   0001A5   F0           MOVX    @DPTR,A
   1179            rxDone();
   \   0001A6                ; Setup parameters for call to function rxDone
   \   0001A6   12....       LCALL   `??rxDone::?relay`   ; Banked call to: rxDone
   1180          }
   \   0001A9   7F02         MOV     R7,#0x2
   \   0001AB   02....       LJMP    ?BANKED_LEAVE_XDATA
   1181          
   1182          
   1183          /*=================================================================================================
   1184           * @fn          rxDone
   1185           *
   1186           * @brief       Common exit point for receive.
   1187           *
   1188           * @param       none
   1189           *
   1190           * @return      none
   1191           *=================================================================================================
   1192           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1193          static void rxDone(void)
   \                     rxDone:
   1194          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1195            /* if the receive FIFO has overflowed, flush it here */
   1196            if (MAC_RADIO_RX_FIFO_HAS_OVERFLOWED())
   \   000004   906193       MOV     DPTR,#0x6193
   \   000007   E0           MOVX    A,@DPTR
   \   000008   A2E6         MOV     C,0xE0 /* A   */.6
   \   00000A   500E         JNC     ??rxDone_0
   \   00000C   906193       MOV     DPTR,#0x6193
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   A2E7         MOV     C,0xE0 /* A   */.7
   \   000012   4006         JC      ??rxDone_0
   1197            {
   1198              MAC_RADIO_FLUSH_RX_FIFO();
   \   000014   75E1ED       MOV     0xe1,#-0x13
   \   000017   75E1ED       MOV     0xe1,#-0x13
   1199            }
   1200          
   1201            /* mark receive as inactive */
   1202            macRxActive = MAC_RX_ACTIVE_NO_ACTIVITY;
   \                     ??rxDone_0:
   \   00001A   90....       MOV     DPTR,#macRxActive
   \   00001D   7400         MOV     A,#0x0
   \   00001F   F0           MOVX    @DPTR,A
   1203          
   1204            /* if there is no outgoing ACK, run the post receive updates */
   1205            if (!macRxOutgoingAckFlag)
   \   000020   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   000023   E0           MOVX    A,@DPTR
   \   000024   7003         JNZ     ??rxDone_1
   1206            {
   1207              rxPostRxUpdates();
   \   000026                ; Setup parameters for call to function rxPostRxUpdates
   \   000026   12....       LCALL   `??rxPostRxUpdates::?relay`; Banked call to: rxPostRxUpdates
   1208            }
   1209          }
   \                     ??rxDone_1:
   \   000029   D083         POP     DPH
   \   00002B   D082         POP     DPL
   \   00002D   02....       LJMP    ?BRET
   \   000030                REQUIRE RFST
   1210          
   1211          
   1212          /**************************************************************************************************
   1213           * @fn          macRxAckTxDoneCallback
   1214           *
   1215           * @brief       Function called when the outoing ACK has completed transmitting.
   1216           *
   1217           * @param       none
   1218           *
   1219           * @return      none
   1220           **************************************************************************************************
   1221           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1222          void macRxAckTxDoneCallback(void)
   \                     macRxAckTxDoneCallback:
   1223          {  
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1224            macRxOutgoingAckFlag = 0;
   \   000004   90....       MOV     DPTR,#macRxOutgoingAckFlag
   \   000007   7400         MOV     A,#0x0
   \   000009   F0           MOVX    @DPTR,A
   1225          
   1226          #ifdef ACK_DONE_ISR_WORKAROUND
   1227            macTimerCancel(&macTxAckIsrTimer);
   1228          #endif /* ACK_DONE_ISR_WROKAROUND */
   1229          
   1230            /*
   1231             *  With certain interrupt priorities and timing conditions, it is possible this callback
   1232             *  could be executed before the primary receive logic completes.  To prevent this, the
   1233             *  post updates are only executed if receive logic is no longer active.  In the case the
   1234             *  post updates are not executed here, they will execute when the main receive logic
   1235             *  completes.
   1236             */
   1237            if (!macRxActive)
   \   00000A   90....       MOV     DPTR,#macRxActive
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   7003         JNZ     ??macRxAckTxDoneCallback_0
   1238            {
   1239              rxPostRxUpdates();
   \   000010                ; Setup parameters for call to function rxPostRxUpdates
   \   000010   12....       LCALL   `??rxPostRxUpdates::?relay`; Banked call to: rxPostRxUpdates
   1240            }
   1241          }
   \                     ??macRxAckTxDoneCallback_0:
   \   000013   D083         POP     DPH
   \   000015   D082         POP     DPL
   \   000017   02....       LJMP    ?BRET
   1242          
   1243          
   1244          /*=================================================================================================
   1245           * @fn          rxPostRxUpdates
   1246           *
   1247           * @brief       Updates that need to be performed once receive is complete.
   1248           *
   1249           *              It is not fatal to execute this function if somehow receive is active.  Under
   1250           *              certain timing/interrupt conditions a new receive may have started before this
   1251           *              function executes.  This should happen very rarely (if it happens at all) and
   1252           *              would cause no problems.
   1253           *
   1254           * @param       none
   1255           *
   1256           * @return      none
   1257           *=================================================================================================
   1258           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1259          static void rxPostRxUpdates(void)
   \                     rxPostRxUpdates:
   1260          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1261            /* turn off receiver if permitted */
   1262            macRxOffRequest();
   \   000004                ; Setup parameters for call to function macRxOffRequest
   \   000004   12....       LCALL   `??macRxOffRequest::?relay`; Banked call to: macRxOffRequest
   1263          
   1264            /* update the transmit power, update may have been blocked by transmit of outgoing ACK */
   1265            macRadioUpdateTxPower();
   \   000007                ; Setup parameters for call to function macRadioUpdateTxPower
   \   000007   12....       LCALL   `??macRadioUpdateTxPower::?relay`; Banked call to: macRadioUpdateTxPower
   1266          
   1267            /* initiate and transmit that was queued during receive */
   1268            macTxStartQueuedFrame();
   \   00000A                ; Setup parameters for call to function macTxStartQueuedFrame
   \   00000A   12....       LCALL   `??macTxStartQueuedFrame::?relay`; Banked call to: macTxStartQueuedFrame
   1269          }
   \   00000D   D083         POP     DPH
   \   00000F   D082         POP     DPL
   \   000011   02....       LJMP    ?BRET
   1270          
   1271          
   1272          /*=================================================================================================
   1273           * @fn          rxDiscardFrame
   1274           *
   1275           * @brief       Initializes for discarding a packet.  Must be called before ACK is strobed.
   1276           *
   1277           * @param       none
   1278           *
   1279           * @return      none
   1280           *=================================================================================================
   1281           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1282          static void rxDiscardFrame(void)
   \                     rxDiscardFrame:
   1283          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1284            MAC_ASSERT(pFuncRxState == &rxStartIsr); /* illegal state for calling discard frame function */
   \   000004   90....       MOV     DPTR,#pFuncRxState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   64..         XRL     A,#`??rxStartIsr::?relay` & 0xff
   \   00000A   7004         JNZ     ??rxDiscardFrame_0
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   64..         XRL     A,#(`??rxStartIsr::?relay` >> 8) & 0xff
   \                     ??rxDiscardFrame_0:
   \   000010   6003         JZ      ??rxDiscardFrame_1
   \   000012                ; Setup parameters for call to function halAssertHandler
   \   000012   12....       LCALL   `??halAssertHandler::?relay`; Banked call to: halAssertHandler
   1285          
   1286            if (rxUnreadLen == 0)
   \                     ??rxDiscardFrame_1:
   \   000015   90....       MOV     DPTR,#rxUnreadLen
   \   000018   E0           MOVX    A,@DPTR
   \   000019   7005         JNZ     ??rxDiscardFrame_2
   1287            {
   1288              rxDone();
   \   00001B                ; Setup parameters for call to function rxDone
   \   00001B   12....       LCALL   `??rxDone::?relay`   ; Banked call to: rxDone
   \   00001E   802D         SJMP    ??rxDiscardFrame_3
   1289            }
   1290            else
   1291            {
   1292              rxNextLen = MIN(rxUnreadLen, MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT);
   \                     ??rxDiscardFrame_2:
   \   000020   90....       MOV     DPTR,#rxUnreadLen
   \   000023   E0           MOVX    A,@DPTR
   \   000024   C3           CLR     C
   \   000025   9410         SUBB    A,#0x10
   \   000027   500A         JNC     ??rxDiscardFrame_4
   \   000029   90....       MOV     DPTR,#rxUnreadLen
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   90....       MOV     DPTR,#rxNextLen
   \   000030   F0           MOVX    @DPTR,A
   \   000031   8006         SJMP    ??rxDiscardFrame_5
   \                     ??rxDiscardFrame_4:
   \   000033   90....       MOV     DPTR,#rxNextLen
   \   000036   7410         MOV     A,#0x10
   \   000038   F0           MOVX    @DPTR,A
   1293              MAC_RADIO_SET_RX_THRESHOLD(rxNextLen);
   \                     ??rxDiscardFrame_5:
   \   000039   90....       MOV     DPTR,#rxNextLen
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   24FF         ADD     A,#-0x1
   \   00003F   906194       MOV     DPTR,#0x6194
   \   000042   F0           MOVX    @DPTR,A
   1294              pFuncRxState = &rxDiscardIsr;
   \   000043   90....       MOV     DPTR,#pFuncRxState
   \   000046   74..         MOV     A,#`??rxDiscardIsr::?relay` & 0xff
   \   000048   F0           MOVX    @DPTR,A
   \   000049   A3           INC     DPTR
   \   00004A   74..         MOV     A,#(`??rxDiscardIsr::?relay` >> 8) & 0xff
   \   00004C   F0           MOVX    @DPTR,A
   1295            }
   1296          }
   \                     ??rxDiscardFrame_3:
   \   00004D   D083         POP     DPH
   \   00004F   D082         POP     DPL
   \   000051   02....       LJMP    ?BRET
   1297          
   1298          
   1299          /*=================================================================================================
   1300           * @fn          rxDiscardIsr
   1301           *
   1302           * @brief       Receive ISR state for discarding a packet.
   1303           *
   1304           * @param       none
   1305           *
   1306           * @return      none
   1307           *=================================================================================================
   1308           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1309          static void rxDiscardIsr(void)
   \                     rxDiscardIsr:
   1310          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 16
   \   000004   74F0         MOV     A,#-0x10
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   1311            uint8 buf[MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT];
   1312          
   1313            MAC_RADIO_READ_RX_FIFO(buf, rxNextLen);
   \   000009                ; Setup parameters for call to function macMemReadRxFifo
   \   000009   90....       MOV     DPTR,#rxNextLen
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F9           MOV     R1,A
   \   00000E   AA..         MOV     R2,?XSP + 0
   \   000010   AB..         MOV     R3,?XSP + 1
   \   000012   12....       LCALL   `??macMemReadRxFifo::?relay`; Banked call to: macMemReadRxFifo
   1314            rxUnreadLen -= rxNextLen;
   \   000015   90....       MOV     DPTR,#rxNextLen
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F8           MOV     R0,A
   \   00001A   90....       MOV     DPTR,#rxUnreadLen
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   C3           CLR     C
   \   00001F   98           SUBB    A,R0
   \   000020   F0           MOVX    @DPTR,A
   1315          
   1316            /* read out and discard bytes until all bytes of packet are disposed of */
   1317            if (rxUnreadLen != 0)
   \   000021   90....       MOV     DPTR,#rxUnreadLen
   \   000024   E0           MOVX    A,@DPTR
   \   000025   601D         JZ      ??rxDiscardIsr_0
   1318            {
   1319              if (rxUnreadLen < MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT)
   \   000027   90....       MOV     DPTR,#rxUnreadLen
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   C3           CLR     C
   \   00002C   9410         SUBB    A,#0x10
   \   00002E   5027         JNC     ??rxDiscardIsr_1
   1320              {
   1321                rxNextLen = rxUnreadLen;
   \   000030   90....       MOV     DPTR,#rxUnreadLen
   \   000033   E0           MOVX    A,@DPTR
   \   000034   90....       MOV     DPTR,#rxNextLen
   \   000037   F0           MOVX    @DPTR,A
   1322                MAC_RADIO_SET_RX_THRESHOLD(rxNextLen);
   \   000038   90....       MOV     DPTR,#rxNextLen
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   24FF         ADD     A,#-0x1
   \   00003E   906194       MOV     DPTR,#0x6194
   \   000041   F0           MOVX    @DPTR,A
   \   000042   8013         SJMP    ??rxDiscardIsr_1
   1323              }
   1324            }
   1325            else
   1326            {
   1327              /* reset threshold level, reset receive state, and complete receive logic */
   1328              MAC_RADIO_SET_RX_THRESHOLD(RX_THRESHOLD_START_LEN);
   \                     ??rxDiscardIsr_0:
   \   000044   906194       MOV     DPTR,#0x6194
   \   000047   7405         MOV     A,#0x5
   \   000049   F0           MOVX    @DPTR,A
   1329              pFuncRxState = &rxStartIsr;
   \   00004A   90....       MOV     DPTR,#pFuncRxState
   \   00004D   74..         MOV     A,#`??rxStartIsr::?relay` & 0xff
   \   00004F   F0           MOVX    @DPTR,A
   \   000050   A3           INC     DPTR
   \   000051   74..         MOV     A,#(`??rxStartIsr::?relay` >> 8) & 0xff
   \   000053   F0           MOVX    @DPTR,A
   1330              rxDone();
   \   000054                ; Setup parameters for call to function rxDone
   \   000054   12....       LCALL   `??rxDone::?relay`   ; Banked call to: rxDone
   1331            }
   1332          }
   \                     ??rxDiscardIsr_1:
   \   000057   7410         MOV     A,#0x10
   \   000059   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005C   D083         POP     DPH
   \   00005E   D082         POP     DPL
   \   000060   02....       LJMP    ?BRET
   1333          
   1334          
   1335          /**************************************************************************************************
   1336           * @fn          macRxFifoOverflowIsr
   1337           *
   1338           * @brief       This interrupt service routine is called when RX FIFO overflow. Note that this
   1339           *              exception does not retrieve the good frames that are trapped in the RX FIFO.
   1340           *              It simply halts and cleanup the RX.
   1341           *
   1342           * @param       none
   1343           *
   1344           * @return      none
   1345           **************************************************************************************************
   1346           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1347          MAC_INTERNAL_API void macRxFifoOverflowIsr(void)
   \                     macRxFifoOverflowIsr:
   1348          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1349            rxFifoOverflowCount++; /* This flag is used for debug purpose only */
   \   000004   90....       MOV     DPTR,#rxFifoOverflowCount
   \   000007   E0           MOVX    A,@DPTR
   \   000008   2401         ADD     A,#0x1
   \   00000A   F0           MOVX    @DPTR,A
   1350            macRxHaltCleanup();
   \   00000B                ; Setup parameters for call to function macRxHaltCleanup
   \   00000B   12....       LCALL   `??macRxHaltCleanup::?relay`; Banked call to: macRxHaltCleanup
   1351          }
   \   00000E   D083         POP     DPH
   \   000010   D082         POP     DPL
   \   000012   02....       LJMP    ?BRET
   1352          
   1353          
   1354          /**************************************************************************************************
   1355           * @fn          macRxPromiscuousMode
   1356           *
   1357           * @brief       Sets promiscuous mode - enabling or disabling it.
   1358           *
   1359           * @param       none
   1360           *
   1361           * @return      none
   1362           **************************************************************************************************
   1363           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1364          MAC_INTERNAL_API void macRxPromiscuousMode(uint8 mode)
   \                     macRxPromiscuousMode:
   1365          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   1366            rxPromiscuousMode = mode;
   \   000007   EE           MOV     A,R6
   \   000008   90....       MOV     DPTR,#rxPromiscuousMode
   \   00000B   F0           MOVX    @DPTR,A
   1367          
   1368            if (rxPromiscuousMode == MAC_PROMISCUOUS_MODE_OFF)
   \   00000C   90....       MOV     DPTR,#rxPromiscuousMode
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   700F         JNZ     ??macRxPromiscuousMode_0
   1369            {
   1370              MAC_RADIO_TURN_ON_RX_FRAME_FILTERING();
   \   000012   906180       MOV     DPTR,#0x6180
   \   000015   7400         MOV     A,#0x0
   \   000017   F0           MOVX    @DPTR,A
   \   000018   906180       MOV     DPTR,#0x6180
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   4409         ORL     A,#0x9
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   8014         SJMP    ??macRxPromiscuousMode_1
   1371            }
   1372            else
   1373            {
   1374              MAC_ASSERT((mode == MAC_PROMISCUOUS_MODE_WITH_BAD_CRC)   ||
   1375                         (mode == MAC_PROMISCUOUS_MODE_COMPLIANT));  /* invalid mode */
   \                     ??macRxPromiscuousMode_0:
   \   000021   7402         MOV     A,#0x2
   \   000023   6E           XRL     A,R6
   \   000024   6008         JZ      ??macRxPromiscuousMode_2
   \   000026   7401         MOV     A,#0x1
   \   000028   6E           XRL     A,R6
   \   000029   6003         JZ      ??macRxPromiscuousMode_2
   \   00002B                ; Setup parameters for call to function halAssertHandler
   \   00002B   12....       LCALL   `??halAssertHandler::?relay`; Banked call to: halAssertHandler
   1376          
   1377              MAC_RADIO_TURN_OFF_RX_FRAME_FILTERING();
   \                     ??macRxPromiscuousMode_2:
   \   00002E   906180       MOV     DPTR,#0x6180
   \   000031   E0           MOVX    A,@DPTR
   \   000032   C2E0         CLR     0xE0 /* A   */.0
   \   000034   F0           MOVX    @DPTR,A
   1378            }
   1379          }
   \                     ??macRxPromiscuousMode_1:
   \   000035   7F01         MOV     R7,#0x1
   \   000037   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??macRxInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRxInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??macRxRadioPowerUpInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRxRadioPowerUpInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??macRxTxReset::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRxTxReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??macRxHaltCleanup::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRxHaltCleanup

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??rxHaltCleanupFinalStep::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxHaltCleanupFinalStep

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??macRxThresholdIsr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRxThresholdIsr

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??rxStartIsr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxStartIsr

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??rxAddrIsr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxAddrIsr

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??rxPrepPayload::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxPrepPayload

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??rxPayloadIsr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxPayloadIsr

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??rxFcsIsr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxFcsIsr

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??rxDone::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxDone

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??macRxAckTxDoneCallback::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRxAckTxDoneCallback

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??rxPostRxUpdates::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxPostRxUpdates

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??rxDiscardFrame::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxDiscardFrame

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??rxDiscardIsr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxDiscardIsr

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??macRxFifoOverflowIsr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRxFifoOverflowIsr

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??macRxPromiscuousMode::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    macRxPromiscuousMode
   1380          
   1381          
   1382          /**************************************************************************************************
   1383           *                                  Compile Time Integrity Checks
   1384           **************************************************************************************************
   1385           */
   1386          
   1387          /* check for changes to the spec that would affect the source code */
   1388          #if ((MAC_A_MAX_PHY_PACKET_SIZE   !=  0x7F )   ||  \
   1389               (MAC_FCF_FIELD_LEN           !=  2    )   ||  \
   1390               (MAC_FCF_FRAME_TYPE_POS      !=  0    )   ||  \
   1391               (MAC_FCF_FRAME_PENDING_POS   !=  4    )   ||  \
   1392               (MAC_FCF_ACK_REQUEST_POS     !=  5    )   ||  \
   1393               (MAC_FCF_INTRA_PAN_POS       !=  6    )   ||  \
   1394               (MAC_FCF_DST_ADDR_MODE_POS   !=  10   )   ||  \
   1395               (MAC_FCF_FRAME_VERSION_POS   !=  12   )   ||  \
   1396               (MAC_FCF_SRC_ADDR_MODE_POS   !=  14   ))
   1397          #error "ERROR!  Change to the spec that requires modification of source code."
   1398          #endif
   1399          
   1400          /* check for changes to the internal flags format */
   1401          #if ((MAC_RX_FLAG_VERSION      !=  0x03)  ||  \
   1402               (MAC_RX_FLAG_ACK_PENDING  !=  0x04)  ||  \
   1403               (MAC_RX_FLAG_SECURITY     !=  0x08)  ||  \
   1404               (MAC_RX_FLAG_PENDING      !=  0x10)  ||  \
   1405               (MAC_RX_FLAG_ACK_REQUEST  !=  0x20)  ||  \
   1406               (MAC_RX_FLAG_INTRA_PAN    !=  0x40))
   1407          #error "ERROR!  Change to the internal RX flags format.  Requires modification of source code."
   1408          #endif
   1409          
   1410          /* validate CRC OK bit optimization */
   1411          #if (MAC_RX_FLAG_CRC_OK != PROPRIETARY_FCS_CRC_OK_BIT)
   1412          #error "ERROR!  Optimization relies on these bits having the same position."
   1413          #endif
   1414          
   1415          #if (MAC_RX_ACTIVE_NO_ACTIVITY != 0x00)
   1416          #error "ERROR! Zero is reserved value of macRxActive. Allows boolean operations, e.g !macRxActive."
   1417          #endif
   1418          
   1419          #if (MAC_PROMISCUOUS_MODE_OFF != 0x00)
   1420          #error "ERROR! Zero is reserved value of rxPromiscuousMode. Allows boolean operations, e.g !rxPromiscuousMode."
   1421          #endif
   1422          
   1423          
   1424          /**************************************************************************************************
   1425          */

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2      0   macRxAckTxDoneCallback
        2      0   -> rxPostRxUpdates
      2      0   macRxFifoOverflowIsr
        2      0   -> macRxHaltCleanup
      2      0   macRxHaltCleanup
        2      0   -> rxHaltCleanupFinalStep
      2      0   macRxInit
      0      9   macRxPromiscuousMode
        0      9   -> halAssertHandler
      2      0   macRxRadioPowerUpInit
      2      0   macRxThresholdIsr
        2      0   -> rxHaltCleanupFinalStep
      2      0   macRxTxReset
        2      0   -> macRxHardDisable
        2      0   -> macRxPromiscuousMode
      0     30   rxAddrIsr
        0     30   -> halAssertHandler
        0     30   -> macMemReadRxFifo
        0     30   -> rxPrepPayload
        0     30   -> sAddrExtCpy
      2     19   rxDiscardFrame
        2      0   -> halAssertHandler
        2      0   -> rxDone
      2     16   rxDiscardIsr
        2     16   -> macMemReadRxFifo
        2     16   -> rxDone
      2     19   rxDone
        2      0   -> rxPostRxUpdates
      1     10   rxFcsIsr
        0     10   -> MAC_SrcMatchCheckResult
        0     10   -> macDataRxMemFree
        0     10   -> macMemReadRxFifo
        0     10   -> macRadioComputeLQI
        0     10   -> macRxCompleteCallback
        0     10   -> macRxOffRequest
        0     10   -> rxDone
      0      9   rxHaltCleanupFinalStep
        0      9   -> macDataRxMemFree
        0      9   -> rxPostRxUpdates
      2      0   rxPayloadIsr
        2      0   -> macMemReadRxFifo
        2      0   -> rxPrepPayload
      2     19   rxPostRxUpdates
        2      0   -> macRadioUpdateTxPower
        2      0   -> macRxOffRequest
        2      0   -> macTxStartQueuedFrame
      2     30   rxPrepPayload
      1     22   rxStartIsr
        0     19   -> MAC_SrcMatchCheckAllPending
        0     19   -> halAssertHandler
        0     19   -> macCspForceTxDoneIfPending
        0     19   -> macDataRxMemAlloc
        0     19   -> macMcuOverflowCapture
        0     19   -> macMcuTimerCapture
        0     19   -> macMemReadRxFifo
        0     19   -> macRadioComputeLQI
        0     19   -> macRxCheckMACPendingCallback
        0     19   -> macRxCheckPendingCallback
        0     19   -> macTxAckNotReceivedCallback
        0     19   -> macTxAckReceivedCallback
        0     22   -> osal_memcpy
        0     19   -> rxDiscardFrame
        0     19   -> rxDone
        0     19   -> rxPostRxUpdates
        0     19   -> rxPrepPayload


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  RFIRQF0
       1  RFIRQF1
       1  RFST
       1  S1CON
       1  _A_IEN0
      26  macRxAckTxDoneCallback
       6  macRxAckTxDoneCallback::?relay
       1  macRxActive
       4  macRxAddrLen
      21  macRxFifoOverflowIsr
       6  macRxFifoOverflowIsr::?relay
       1  macRxFilter
      32  macRxHaltCleanup
       6  macRxHaltCleanup::?relay
      73  macRxInit
       6  macRxInit::?relay
       1  macRxOutgoingAckFlag
      58  macRxPromiscuousMode
       6  macRxPromiscuousMode::?relay
      44  macRxRadioPowerUpInit
       6  macRxRadioPowerUpInit::?relay
      58  macRxThresholdIsr
       6  macRxThresholdIsr::?relay
      25  macRxTxReset
       6  macRxTxReset::?relay
       2  pFuncRxState
       2  pRxBuf
     457  rxAddrIsr
       6  rxAddrIsr::?relay
       4  rxBuf
      84  rxDiscardFrame
       6  rxDiscardFrame::?relay
      99  rxDiscardIsr
       6  rxDiscardIsr::?relay
      48  rxDone
       6  rxDone::?relay
     430  rxFcsIsr
       6  rxFcsIsr::?relay
       1  rxFifoOverflowCount
       1  rxFilter
     106  rxHaltCleanupFinalStep
       6  rxHaltCleanupFinalStep::?relay
       1  rxIsrActiveFlag
       1  rxNextLen
     109  rxPayloadIsr
       6  rxPayloadIsr::?relay
       1  rxPayloadLen
      20  rxPostRxUpdates
       6  rxPostRxUpdates::?relay
      70  rxPrepPayload
       6  rxPrepPayload::?relay
       1  rxPromiscuousMode
       1  rxResetFlag
    1351  rxStartIsr
       6  rxStartIsr::?relay
       1  rxUnreadLen

 
 3 111 bytes in segment BANKED_CODE
   108 bytes in segment BANK_RELAYS
     4 bytes in segment CODE_C
     5 bytes in segment SFR_AN
    19 bytes in segment XDATA_Z
 
 3 223 bytes of CODE  memory
     0 bytes of DATA  memory (+ 5 bytes shared)
    19 bytes of XDATA memory

Errors: none
Warnings: none

###############################################################################
#
# IAR C/C++ Compiler V9.20.1.2476 for 8051                22/Feb/2017  14:31:42
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\koen\ZigBee-Code-WTWS\Components\osal\common\OSAL_Memory.c
#    Command line       =  
#        -f
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00002000 -DZDAPP_CONFIG_PAN_ID=0xABCD
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={'H', 'O', 'G', 'E', 'S',
#        'C', 'H', 'O', 'O', 'L', 'U', 'T', 'R', 'E', 'C', 'H'}"
#        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440
#        C:\Users\koen\ZigBee-Code-WTWS\Components\osal\common\OSAL_Memory.c -D
#        HOLD_AUTO_START -D BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D
#        NV_RESTORE -D HAL_UART=TRUE -lC
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\
#        -lA
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\
#        --diag_suppress Pe001,Pa010,Pe1665 -o
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\Obj\
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\Source\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ol --require_prototypes
#    List file          =  
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\OSAL_Memory.lst
#    Object file        =  
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\Obj\OSAL_Memory.r51
#
###############################################################################

C:\Users\koen\ZigBee-Code-WTWS\Components\osal\common\OSAL_Memory.c
      1          /**************************************************************************************************
      2            Filename:       OSAL_Memory.c
      3            Revised:        $Date: 2013-03-14 17:58:51 -0700 (Thu, 14 Mar 2013) $
      4            Revision:       $Revision: 33490 $
      5          
      6            Description:    OSAL Heap Memory management functions. There is an Application Note that
      7                            should be read before studying and/or modifying this module:
      8                            SWRA204 "Heap Memory Management"
      9          
     10            Copyright 2004-2010 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License").  You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product.  Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          **************************************************************************************************/
     40          
     41          /* ------------------------------------------------------------------------------------------------
     42           *                                          Includes
     43           * ------------------------------------------------------------------------------------------------
     44           */
     45          
     46          #include "comdef.h"
     47          #include "OSAL.h"
     48          #include "OSAL_Memory.h"
     49          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1
     50          #include "hal_mcu.h"
     51          #include "hal_assert.h"
     52          
     53          /* ------------------------------------------------------------------------------------------------
     54           *                                           Constants
     55           * ------------------------------------------------------------------------------------------------
     56           */
     57          
     58          #define OSALMEM_IN_USE             0x8000
     59          #if (MAXMEMHEAP & OSALMEM_IN_USE)
     60          #error MAXMEMHEAP is too big to manage!
     61          #endif
     62          
     63          #define OSALMEM_HDRSZ              sizeof(osalMemHdr_t)
     64          
     65          // Round a value up to the ceiling of OSALMEM_HDRSZ for critical dependencies on even multiples.
     66          #define OSALMEM_ROUND(X)       ((((X) + OSALMEM_HDRSZ - 1) / OSALMEM_HDRSZ) * OSALMEM_HDRSZ)
     67          
     68          /* Minimum wasted bytes to justify splitting a block before allocation.
     69           * Adjust accordingly to attempt to balance the tradeoff of wasted space and runtime throughput
     70           * spent splitting blocks into sizes that may not be practically usable when sandwiched between
     71           * two blocks in use (and thereby not able to be coalesced.)
     72           * Ensure that this size is an even multiple of OSALMEM_HDRSZ.
     73           */
     74          #if !defined OSALMEM_MIN_BLKSZ
     75          #define OSALMEM_MIN_BLKSZ         (OSALMEM_ROUND((OSALMEM_HDRSZ * 2)))
     76          #endif
     77          
     78          #if !defined OSALMEM_LL_BLKSZ
     79          #if defined NONWK
     80          #define OSALMEM_LL_BLKSZ          (OSALMEM_ROUND(6) + (1 * OSALMEM_HDRSZ))
     81          #else
     82          /*
     83           * Profiling the sample apps with default settings shows the following long-lived allocations
     84           * which should live at the bottom of the small-block bucket so that they are never iterated over
     85           * by osal_mem_alloc/free(), nor ever considered for coalescing, etc. This saves significant
     86           * run-time throughput (on 8051 SOC if not also MSP). This is dynamic "dead space" and is not
     87           * available to the small-block bucket heap.
     88           *
     89           * Adjust this size accordingly to accomodate application-specific changes including changing the
     90           * size of long-lived objects profiled by sample apps and long-lived objects added by application.
     91           */
     92          #if defined ZCL_KEY_ESTABLISH     // Attempt to capture worst-case for SE sample apps.
     93          #define OSALMEM_LL_BLKSZ          (OSALMEM_ROUND(526) + (32 * OSALMEM_HDRSZ))
     94          #elif defined TC_LINKKEY_JOIN
     95          #define OSALMEM_LL_BLKSZ          (OSALMEM_ROUND(454) + (21 * OSALMEM_HDRSZ))
     96          #elif ((defined SECURE) && (SECURE != 0))
     97          #define OSALMEM_LL_BLKSZ          (OSALMEM_ROUND(418) + (19 * OSALMEM_HDRSZ))
     98          #else
     99          #define OSALMEM_LL_BLKSZ          (OSALMEM_ROUND(417) + (19 * OSALMEM_HDRSZ))
    100          #endif
    101          #endif
    102          #endif
    103          
    104          /* Adjust accordingly to attempt to accomodate the block sizes of the vast majority of
    105           * very high frequency allocations/frees by profiling the system runtime.
    106           * This default of 16 accomodates the OSAL timers block, osalTimerRec_t, and many others.
    107           * Ensure that this size is an even multiple of OSALMEM_MIN_BLKSZ for run-time efficiency.
    108           */
    109          #if !defined OSALMEM_SMALL_BLKSZ
    110          #define OSALMEM_SMALL_BLKSZ       (OSALMEM_ROUND(16))
    111          #endif
    112          #if !defined OSALMEM_SMALL_BLKCNT
    113          #define OSALMEM_SMALL_BLKCNT       8
    114          #endif
    115          
    116          /*
    117           * These numbers setup the size of the small-block bucket which is reserved at the front of the
    118           * heap for allocations of OSALMEM_SMALL_BLKSZ or smaller.
    119           */
    120          
    121          // Size of the heap bucket reserved for small block-sized allocations.
    122          // Adjust accordingly to attempt to accomodate the vast majority of very high frequency operations.
    123          #define OSALMEM_SMALLBLK_BUCKET  ((OSALMEM_SMALL_BLKSZ * OSALMEM_SMALL_BLKCNT) + OSALMEM_LL_BLKSZ)
    124          // Index of the first available osalMemHdr_t after the small-block heap which will be set in-use in
    125          // order to prevent the small-block bucket from being coalesced with the wilderness.
    126          #define OSALMEM_SMALLBLK_HDRCNT   (OSALMEM_SMALLBLK_BUCKET / OSALMEM_HDRSZ)
    127          // Index of the first available osalMemHdr_t after the small-block heap which will be set in-use in
    128          #define OSALMEM_BIGBLK_IDX        (OSALMEM_SMALLBLK_HDRCNT + 1)
    129          // The size of the wilderness after losing the small-block heap, the wasted header to block the
    130          // small-block heap from being coalesced, and the wasted header to mark the end of the heap.
    131          #define OSALMEM_BIGBLK_SZ         (MAXMEMHEAP - OSALMEM_SMALLBLK_BUCKET - OSALMEM_HDRSZ*2)
    132          // Index of the last available osalMemHdr_t at the end of the heap which will be set to zero for
    133          // fast comparisons with zero to determine the end of the heap.
    134          #define OSALMEM_LASTBLK_IDX      ((MAXMEMHEAP / OSALMEM_HDRSZ) - 1)
    135          
    136          // For information about memory profiling, refer to SWRA204 "Heap Memory Management", section 1.5.
    137          #if !defined OSALMEM_PROFILER
    138          #define OSALMEM_PROFILER           FALSE  // Enable/disable the memory usage profiling buckets.
    139          #endif
    140          #if !defined OSALMEM_PROFILER_LL
    141          #define OSALMEM_PROFILER_LL        FALSE  // Special profiling of the Long-Lived bucket.
    142          #endif
    143          
    144          #if OSALMEM_PROFILER
    145          #define OSALMEM_INIT              'X'
    146          #define OSALMEM_ALOC              'A'
    147          #define OSALMEM_REIN              'F'
    148          #endif
    149          
    150          /* ------------------------------------------------------------------------------------------------
    151           *                                           Typedefs
    152           * ------------------------------------------------------------------------------------------------
    153           */
    154          
    155          typedef struct {
    156            // The 15 LSB's of 'val' indicate the total item size, including the header, in 8-bit bytes.
    157            unsigned len : 15;
    158            // The 1 MSB of 'val' is used as a boolean to indicate in-use or freed.
    159            unsigned inUse : 1;
    160          } osalMemHdrHdr_t;
    161          
    162          typedef union {
    163            /* Dummy variable so compiler forces structure to alignment of largest element while not wasting
    164             * space on targets when the halDataAlign_t is smaller than a UINT16.
    165             */
    166            halDataAlign_t alignDummy;
    167            uint16 val;
    168            osalMemHdrHdr_t hdr;
    169          } osalMemHdr_t;
    170          
    171          /* ------------------------------------------------------------------------------------------------
    172           *                                           Local Variables
    173           * ------------------------------------------------------------------------------------------------
    174           */
    175          
    176          #if !defined ( ZBIT )

   \                                 In  segment XDATA_N, align 1
    177          static __no_init osalMemHdr_t theHeap[MAXMEMHEAP / OSALMEM_HDRSZ];
   \                     theHeap:
   \   000000                DS 3072

   \                                 In  segment XDATA_N, align 1
    178          static __no_init osalMemHdr_t *ff1;  // First free block in the small-block bucket.
   \                     ff1:
   \   000000                DS 2
    179          #else
    180          static osalMemHdr_t theHeap[MAXMEMHEAP / OSALMEM_HDRSZ];
    181          static osalMemHdr_t *ff1;  // First free block in the small-block bucket.
    182          #endif
    183          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    184          static uint8 osalMemStat;            // Discrete status flags: 0x01 = kicked.
   \                     osalMemStat:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    185          
    186          #if OSALMEM_METRICS
    187          static uint16 blkMax;  // Max cnt of all blocks ever seen at once.
    188          static uint16 blkCnt;  // Current cnt of all blocks.
    189          static uint16 blkFree; // Current cnt of free blocks.
    190          static uint16 memAlo;  // Current total memory allocated.
    191          static uint16 memMax;  // Max total memory ever allocated at once.
    192          #endif
    193          
    194          #if OSALMEM_PROFILER
    195          #define OSALMEM_PROMAX  8
    196          /* The profiling buckets must differ by at least OSALMEM_MIN_BLKSZ; the
    197           * last bucket must equal the max alloc size. Set the bucket sizes to
    198           * whatever sizes necessary to show how your application is using memory.
    199           */
    200          static uint16 proCnt[OSALMEM_PROMAX] = {
    201          OSALMEM_SMALL_BLKSZ, 48, 112, 176, 192, 224, 256, 65535 };
    202          static uint16 proCur[OSALMEM_PROMAX] = { 0 };
    203          static uint16 proMax[OSALMEM_PROMAX] = { 0 };
    204          static uint16 proTot[OSALMEM_PROMAX] = { 0 };
    205          static uint16 proSmallBlkMiss;
    206          #endif
    207          
    208          /* ------------------------------------------------------------------------------------------------
    209           *                                           Global Variables
    210           * ------------------------------------------------------------------------------------------------
    211           */
    212          
    213          #ifdef DPRINTF_HEAPTRACE
    214          extern int dprintf(const char *fmt, ...);
    215          #endif /* DPRINTF_HEAPTRACE */
    216          
    217          /**************************************************************************************************
    218           * @fn          osal_mem_init
    219           *
    220           * @brief       This function is the OSAL heap memory management initialization callback.
    221           *
    222           * input parameters
    223           *
    224           * None.
    225           *
    226           * output parameters
    227           *
    228           * None.
    229           *
    230           * @return      None.
    231           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    232          void osal_mem_init(void)
   \                     osal_mem_init:
    233          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    234            HAL_ASSERT(((OSALMEM_MIN_BLKSZ % OSALMEM_HDRSZ) == 0));
    235            HAL_ASSERT(((OSALMEM_LL_BLKSZ % OSALMEM_HDRSZ) == 0));
    236            HAL_ASSERT(((OSALMEM_SMALL_BLKSZ % OSALMEM_HDRSZ) == 0));
    237          
    238          #if OSALMEM_PROFILER
    239            (void)osal_memset(theHeap, OSALMEM_INIT, MAXMEMHEAP);
    240          #endif
    241          
    242            // Setup a NULL block at the end of the heap for fast comparisons with zero.
    243            theHeap[OSALMEM_LASTBLK_IDX].val = 0;
   \   000004   90....       MOV     DPTR,#theHeap + 3070
   \   000007   7400         MOV     A,#0x0
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   A3           INC     DPTR
   \   00000B   7400         MOV     A,#0x0
   \   00000D   F0           MOVX    @DPTR,A
    244          
    245            // Setup the small-block bucket.
    246            ff1 = theHeap;
   \   00000E   90....       MOV     DPTR,#ff1
   \   000011   74..         MOV     A,#theHeap & 0xff
   \   000013   F0           MOVX    @DPTR,A
   \   000014   A3           INC     DPTR
   \   000015   74..         MOV     A,#(theHeap >> 8) & 0xff
   \   000017   F0           MOVX    @DPTR,A
    247            ff1->val = OSALMEM_SMALLBLK_BUCKET;                   // Set 'len' & clear 'inUse' field.
   \   000018   90....       MOV     DPTR,#ff1
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F8           MOV     R0,A
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F583         MOV     DPH,A
   \   000021   8882         MOV     DPL,R0
   \   000023   7448         MOV     A,#0x48
   \   000025   F0           MOVX    @DPTR,A
   \   000026   A3           INC     DPTR
   \   000027   7402         MOV     A,#0x2
   \   000029   F0           MOVX    @DPTR,A
    248            // Set 'len' & 'inUse' fields - this is a 'zero data bytes' lifetime allocation to block the
    249            // small-block bucket from ever being coalesced with the wilderness.
    250            theHeap[OSALMEM_SMALLBLK_HDRCNT].val = (OSALMEM_HDRSZ | OSALMEM_IN_USE);
   \   00002A   90....       MOV     DPTR,#theHeap + 584
   \   00002D   7402         MOV     A,#0x2
   \   00002F   F0           MOVX    @DPTR,A
   \   000030   A3           INC     DPTR
   \   000031   7480         MOV     A,#-0x80
   \   000033   F0           MOVX    @DPTR,A
    251          
    252            // Setup the wilderness.
    253            theHeap[OSALMEM_BIGBLK_IDX].val = OSALMEM_BIGBLK_SZ;  // Set 'len' & clear 'inUse' field.
   \   000034   90....       MOV     DPTR,#theHeap + 586
   \   000037   74B4         MOV     A,#-0x4c
   \   000039   F0           MOVX    @DPTR,A
   \   00003A   A3           INC     DPTR
   \   00003B   7409         MOV     A,#0x9
   \   00003D   F0           MOVX    @DPTR,A
    254          
    255          #if ( OSALMEM_METRICS )
    256            /* Start with the small-block bucket and the wilderness - don't count the
    257             * end-of-heap NULL block nor the end-of-small-block NULL block.
    258             */
    259            blkCnt = blkFree = 2;
    260          #endif
    261          }
   \   00003E   D083         POP     DPH
   \   000040   D082         POP     DPL
   \   000042   02....       LJMP    ?BRET
    262          
    263          /**************************************************************************************************
    264           * @fn          osal_mem_kick
    265           *
    266           * @brief       This function is the OSAL task initialization callback.
    267           * @brief       Kick the ff1 pointer out past the long-lived OSAL Task blocks.
    268           *              Invoke this once after all long-lived blocks have been allocated -
    269           *              presently at the end of osal_init_system().
    270           *
    271           * input parameters
    272           *
    273           * None.
    274           *
    275           * output parameters
    276           *
    277           * None.
    278           *
    279           * @return      None.
    280           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    281          void osal_mem_kick(void)
   \                     osal_mem_kick:
    282          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    283            halIntState_t intState;
    284            osalMemHdr_t *tmp = osal_mem_alloc(1);
   \   000005                ; Setup parameters for call to function osal_mem_alloc
   \   000005   7A01         MOV     R2,#0x1
   \   000007   7B00         MOV     R3,#0x0
   \   000009   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00000C   8A..         MOV     ?V0,R2
   \   00000E   8B..         MOV     ?V1,R3
   \   000010   AE..         MOV     R6,?V0
   \   000012   AF..         MOV     R7,?V1
    285          
    286            HAL_ASSERT((tmp != NULL));
   \   000014   EE           MOV     A,R6
   \   000015   4F           ORL     A,R7
   \   000016   7003         JNZ     ??osal_mem_kick_0
   \   000018                ; Setup parameters for call to function halAssertHandler
   \   000018   12....       LCALL   `??halAssertHandler::?relay`; Banked call to: halAssertHandler
    287            HAL_ENTER_CRITICAL_SECTION(intState);  // Hold off interrupts.
   \                     ??osal_mem_kick_0:
   \   00001B   A2AF         MOV     C,0xa8.7
   \   00001D   E4           CLR     A
   \   00001E   33           RLC     A
   \   00001F   F5..         MOV     ?V0,A
   \   000021   C2AF         CLR     0xa8.7
    288          
    289            /* All long-lived allocations have filled the LL block reserved in the small-block bucket.
    290             * Set 'osalMemStat' so searching for memory in this bucket from here onward will only be done
    291             * for sizes meeting the OSALMEM_SMALL_BLKSZ criteria.
    292             */
    293            ff1 = tmp - 1;       // Set 'ff1' to point to the first available memory after the LL block.
   \   000023   EE           MOV     A,R6
   \   000024   24FE         ADD     A,#-0x2
   \   000026   F8           MOV     R0,A
   \   000027   EF           MOV     A,R7
   \   000028   34FF         ADDC    A,#-0x1
   \   00002A   F9           MOV     R1,A
   \   00002B   90....       MOV     DPTR,#ff1
   \   00002E   E8           MOV     A,R0
   \   00002F   F0           MOVX    @DPTR,A
   \   000030   A3           INC     DPTR
   \   000031   E9           MOV     A,R1
   \   000032   F0           MOVX    @DPTR,A
    294            osal_mem_free(tmp);
   \   000033                ; Setup parameters for call to function osal_mem_free
   \   000033   EE           MOV     A,R6
   \   000034   FA           MOV     R2,A
   \   000035   EF           MOV     A,R7
   \   000036   FB           MOV     R3,A
   \   000037   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    295            osalMemStat = 0x01;  // Set 'osalMemStat' after the free because it enables memory profiling.
   \   00003A   90....       MOV     DPTR,#osalMemStat
   \   00003D   7401         MOV     A,#0x1
   \   00003F   F0           MOVX    @DPTR,A
    296          
    297            HAL_EXIT_CRITICAL_SECTION(intState);  // Re-enable interrupts.
   \   000040   A8..         MOV     R0,?V0
   \   000042   E5..         MOV     A,?V0
   \   000044   A2E0         MOV     C,0xE0 /* A   */.0
   \   000046   92AF         MOV     0xa8.7,C
    298          }
   \   000048   7F02         MOV     R7,#0x2
   \   00004A   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   00004D                REQUIRE _A_IEN0
    299          
    300          /**************************************************************************************************
    301           * @fn          osal_mem_alloc
    302           *
    303           * @brief       This function implements the OSAL dynamic memory allocation functionality.
    304           *
    305           * input parameters
    306           *
    307           * @param size - the number of bytes to allocate from the HEAP.
    308           *
    309           * output parameters
    310           *
    311           * None.
    312           *
    313           * @return      None.
    314           */
    315          #ifdef DPRINTF_OSALHEAPTRACE
    316          void *osal_mem_alloc_dbg( uint16 size, const char *fname, unsigned lnum )
    317          #else /* DPRINTF_OSALHEAPTRACE */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    318          void *osal_mem_alloc( uint16 size )
   \                     osal_mem_alloc:
    319          #endif /* DPRINTF_OSALHEAPTRACE */
    320          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 0
    321            osalMemHdr_t *prev = NULL;
   \   000005   7C00         MOV     R4,#0x0
   \   000007   7D00         MOV     R5,#0x0
    322            osalMemHdr_t *hdr;
    323            halIntState_t intState;
    324            uint8 coal = 0;
   \   000009   7E00         MOV     R6,#0x0
    325          
    326            size += OSALMEM_HDRSZ;
   \   00000B   EA           MOV     A,R2
   \   00000C   2402         ADD     A,#0x2
   \   00000E   FA           MOV     R2,A
   \   00000F   EB           MOV     A,R3
   \   000010   3400         ADDC    A,#0x0
   \   000012   FB           MOV     R3,A
    327          
    328            // Calculate required bytes to add to 'size' to align to halDataAlign_t.
    329            if ( sizeof( halDataAlign_t ) == 2 )
    330            {
    331              size += (size & 0x01);
    332            }
    333            else if ( sizeof( halDataAlign_t ) != 1 )
    334            {
    335              const uint8 mod = size % sizeof( halDataAlign_t );
    336          
    337              if ( mod != 0 )
    338              {
    339                size += (sizeof( halDataAlign_t ) - mod);
    340              }
    341            }
    342          
    343            HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \   000013   A2AF         MOV     C,0xa8.7
   \   000015   E4           CLR     A
   \   000016   33           RLC     A
   \   000017   FF           MOV     R7,A
   \   000018   C2AF         CLR     0xa8.7
    344          
    345            // Smaller allocations are first attempted in the small-block bucket, and all long-lived
    346            // allocations are channeled into the LL block reserved within this bucket.
    347            if ((osalMemStat == 0) || (size <= OSALMEM_SMALL_BLKSZ))
   \   00001A   90....       MOV     DPTR,#osalMemStat
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   6009         JZ      ??osal_mem_alloc_0
   \   000020   C3           CLR     C
   \   000021   EA           MOV     A,R2
   \   000022   9411         SUBB    A,#0x11
   \   000024   EB           MOV     A,R3
   \   000025   9400         SUBB    A,#0x0
   \   000027   500A         JNC     ??osal_mem_alloc_1
    348            {
    349              hdr = ff1;
   \                     ??osal_mem_alloc_0:
   \   000029   90....       MOV     DPTR,#ff1
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F8           MOV     R0,A
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F9           MOV     R1,A
   \   000031   8004         SJMP    ??osal_mem_alloc_2
    350            }
    351            else
    352            {
    353              hdr = (theHeap + OSALMEM_BIGBLK_IDX);
   \                     ??osal_mem_alloc_1:
   \   000033   78..         MOV     R0,#(theHeap + 74) & 0xff
   \   000035   79..         MOV     R1,#((theHeap + 586) >> 8) & 0xff
    354            }
    355          
    356            do
    357            {
    358              if ( hdr->hdr.inUse )
    359              {
    360                coal = 0;
    361              }
    362              else
    363              {
    364                if ( coal != 0 )
    365                {
    366          #if ( OSALMEM_METRICS )
    367                  blkCnt--;
    368                  blkFree--;
    369          #endif
    370          
    371                  prev->hdr.len += hdr->hdr.len;
    372          
    373                  if ( prev->hdr.len >= size )
    374                  {
    375                    hdr = prev;
    376                    break;
    377                  }
    378                }
    379                else
    380                {
    381                  if ( hdr->hdr.len >= size )
    382                  {
    383                    break;
    384                  }
    385          
    386                  coal = 1;
    387                  prev = hdr;
    388                }
    389              }
    390          
    391              hdr = (osalMemHdr_t *)((uint8 *)hdr + hdr->hdr.len);
    392          
    393              if ( hdr->val == 0 )
    394              {
    395                hdr = NULL;
    396                break;
    397              }
    398            } while (1);
   \                     ??osal_mem_alloc_2:
   \   000037   8882         MOV     DPL,R0
   \   000039   8983         MOV     DPH,R1
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   5400         ANL     A,#0x0
   \   00003E   F5..         MOV     ?V0,A
   \   000040   A3           INC     DPTR
   \   000041   E0           MOVX    A,@DPTR
   \   000042   5480         ANL     A,#0x80
   \   000044   F5..         MOV     ?V1,A
   \   000046   E5..         MOV     A,?V0
   \   000048   45..         ORL     A,?V1
   \   00004A   6005         JZ      ??osal_mem_alloc_3
   \   00004C   7E00         MOV     R6,#0x0
   \   00004E   02....       LJMP    ??osal_mem_alloc_4 & 0xFFFF
   \                     ??osal_mem_alloc_3:
   \   000051   EE           MOV     A,R6
   \   000052   6067         JZ      ??osal_mem_alloc_5
   \   000054   8C82         MOV     DPL,R4
   \   000056   8D83         MOV     DPH,R5
   \   000058   E0           MOVX    A,@DPTR
   \   000059   F5..         MOV     ?V0,A
   \   00005B   A3           INC     DPTR
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   F5..         MOV     ?V1,A
   \   00005F   E5..         MOV     A,?V0
   \   000061   5400         ANL     A,#0x0
   \   000063   F5..         MOV     ?V2,A
   \   000065   E5..         MOV     A,?V1
   \   000067   5480         ANL     A,#0x80
   \   000069   F5..         MOV     ?V3,A
   \   00006B   8882         MOV     DPL,R0
   \   00006D   8983         MOV     DPH,R1
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   25..         ADD     A,?V0
   \   000072   F5..         MOV     ?V0,A
   \   000074   A3           INC     DPTR
   \   000075   E0           MOVX    A,@DPTR
   \   000076   35..         ADDC    A,?V1
   \   000078   F5..         MOV     ?V1,A
   \   00007A   E5..         MOV     A,?V0
   \   00007C   54FF         ANL     A,#0xff
   \   00007E   F5..         MOV     ?V0,A
   \   000080   E5..         MOV     A,?V1
   \   000082   547F         ANL     A,#0x7f
   \   000084   F5..         MOV     ?V1,A
   \   000086   E5..         MOV     A,?V2
   \   000088   45..         ORL     A,?V0
   \   00008A   F5..         MOV     ?V0,A
   \   00008C   E5..         MOV     A,?V3
   \   00008E   45..         ORL     A,?V1
   \   000090   F5..         MOV     ?V1,A
   \   000092   8C82         MOV     DPL,R4
   \   000094   8D83         MOV     DPH,R5
   \   000096   E5..         MOV     A,?V0
   \   000098   F0           MOVX    @DPTR,A
   \   000099   A3           INC     DPTR
   \   00009A   E5..         MOV     A,?V1
   \   00009C   F0           MOVX    @DPTR,A
   \   00009D   8C82         MOV     DPL,R4
   \   00009F   8D83         MOV     DPH,R5
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   54FF         ANL     A,#0xff
   \   0000A4   F5..         MOV     ?V0,A
   \   0000A6   A3           INC     DPTR
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   547F         ANL     A,#0x7f
   \   0000AA   F5..         MOV     ?V1,A
   \   0000AC   C3           CLR     C
   \   0000AD   E5..         MOV     A,?V0
   \   0000AF   9A           SUBB    A,R2
   \   0000B0   E5..         MOV     A,?V1
   \   0000B2   9B           SUBB    A,R3
   \   0000B3   4020         JC      ??osal_mem_alloc_4
   \   0000B5   EC           MOV     A,R4
   \   0000B6   F8           MOV     R0,A
   \   0000B7   ED           MOV     A,R5
   \   0000B8   F9           MOV     R1,A
   \   0000B9   8049         SJMP    ??osal_mem_alloc_6
   \                     ??osal_mem_alloc_5:
   \   0000BB   8882         MOV     DPL,R0
   \   0000BD   8983         MOV     DPH,R1
   \   0000BF   E0           MOVX    A,@DPTR
   \   0000C0   54FF         ANL     A,#0xff
   \   0000C2   FC           MOV     R4,A
   \   0000C3   A3           INC     DPTR
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   547F         ANL     A,#0x7f
   \   0000C7   FD           MOV     R5,A
   \   0000C8   C3           CLR     C
   \   0000C9   EC           MOV     A,R4
   \   0000CA   9A           SUBB    A,R2
   \   0000CB   ED           MOV     A,R5
   \   0000CC   9B           SUBB    A,R3
   \   0000CD   5035         JNC     ??osal_mem_alloc_6
   \   0000CF   7E01         MOV     R6,#0x1
   \   0000D1   E8           MOV     A,R0
   \   0000D2   FC           MOV     R4,A
   \   0000D3   E9           MOV     A,R1
   \   0000D4   FD           MOV     R5,A
   \                     ??osal_mem_alloc_4:
   \   0000D5   8882         MOV     DPL,R0
   \   0000D7   8983         MOV     DPH,R1
   \   0000D9   E0           MOVX    A,@DPTR
   \   0000DA   54FF         ANL     A,#0xff
   \   0000DC   F5..         MOV     ?V0,A
   \   0000DE   A3           INC     DPTR
   \   0000DF   E0           MOVX    A,@DPTR
   \   0000E0   547F         ANL     A,#0x7f
   \   0000E2   F5..         MOV     ?V1,A
   \   0000E4   E8           MOV     A,R0
   \   0000E5   25..         ADD     A,?V0
   \   0000E7   F8           MOV     R0,A
   \   0000E8   E9           MOV     A,R1
   \   0000E9   35..         ADDC    A,?V1
   \   0000EB   F9           MOV     R1,A
   \   0000EC   8882         MOV     DPL,R0
   \   0000EE   8983         MOV     DPH,R1
   \   0000F0   E0           MOVX    A,@DPTR
   \   0000F1   F5..         MOV     ?V0,A
   \   0000F3   A3           INC     DPTR
   \   0000F4   E0           MOVX    A,@DPTR
   \   0000F5   F5..         MOV     ?V1,A
   \   0000F7   E5..         MOV     A,?V0
   \   0000F9   45..         ORL     A,?V1
   \   0000FB   6003         JZ      $+5
   \   0000FD   02....       LJMP    ??osal_mem_alloc_2 & 0xFFFF
   \   000100   7800         MOV     R0,#0x0
   \   000102   7900         MOV     R1,#0x0
    399          
    400            if ( hdr != NULL )
   \                     ??osal_mem_alloc_6:
   \   000104   E8           MOV     A,R0
   \   000105   49           ORL     A,R1
   \   000106   7003         JNZ     $+5
   \   000108   02....       LJMP    ??osal_mem_alloc_7 & 0xFFFF
    401            {
    402              uint16 tmp = hdr->hdr.len - size;
   \   00010B   8882         MOV     DPL,R0
   \   00010D   8983         MOV     DPH,R1
   \   00010F   E0           MOVX    A,@DPTR
   \   000110   54FF         ANL     A,#0xff
   \   000112   FC           MOV     R4,A
   \   000113   A3           INC     DPTR
   \   000114   E0           MOVX    A,@DPTR
   \   000115   547F         ANL     A,#0x7f
   \   000117   FD           MOV     R5,A
   \   000118   EC           MOV     A,R4
   \   000119   C3           CLR     C
   \   00011A   9A           SUBB    A,R2
   \   00011B   FC           MOV     R4,A
   \   00011C   ED           MOV     A,R5
   \   00011D   9B           SUBB    A,R3
   \   00011E   FD           MOV     R5,A
    403          
    404              // Determine whether the threshold for splitting is met.
    405              if ( tmp >= OSALMEM_MIN_BLKSZ )
   \   00011F   C3           CLR     C
   \   000120   EC           MOV     A,R4
   \   000121   9404         SUBB    A,#0x4
   \   000123   ED           MOV     A,R5
   \   000124   9400         SUBB    A,#0x0
   \   000126   4020         JC      ??osal_mem_alloc_8
    406              {
    407                // Split the block before allocating it.
    408                osalMemHdr_t *next = (osalMemHdr_t *)((uint8 *)hdr + size);
   \   000128   E8           MOV     A,R0
   \   000129   2A           ADD     A,R2
   \   00012A   F582         MOV     DPL,A
   \   00012C   E9           MOV     A,R1
   \   00012D   3B           ADDC    A,R3
   \   00012E   F583         MOV     DPH,A
    409                next->val = tmp;                     // Set 'len' & clear 'inUse' field.
   \   000130   EC           MOV     A,R4
   \   000131   F0           MOVX    @DPTR,A
   \   000132   A3           INC     DPTR
   \   000133   ED           MOV     A,R5
   \   000134   F0           MOVX    @DPTR,A
    410                hdr->val = (size | OSALMEM_IN_USE);  // Set 'len' & 'inUse' field.
   \   000135   EA           MOV     A,R2
   \   000136   4400         ORL     A,#0x0
   \   000138   FA           MOV     R2,A
   \   000139   EB           MOV     A,R3
   \   00013A   4480         ORL     A,#0x80
   \   00013C   FB           MOV     R3,A
   \   00013D   8882         MOV     DPL,R0
   \   00013F   8983         MOV     DPH,R1
   \   000141   EA           MOV     A,R2
   \   000142   F0           MOVX    @DPTR,A
   \   000143   A3           INC     DPTR
   \   000144   EB           MOV     A,R3
   \   000145   F0           MOVX    @DPTR,A
   \   000146   800D         SJMP    ??osal_mem_alloc_9
    411          
    412          #if ( OSALMEM_METRICS )
    413                blkCnt++;
    414                if ( blkMax < blkCnt )
    415                {
    416                  blkMax = blkCnt;
    417                }
    418                memAlo += size;
    419          #endif
    420              }
    421              else
    422              {
    423          #if ( OSALMEM_METRICS )
    424                memAlo += hdr->hdr.len;
    425                blkFree--;
    426          #endif
    427          
    428                hdr->hdr.inUse = TRUE;
   \                     ??osal_mem_alloc_8:
   \   000148   8882         MOV     DPL,R0
   \   00014A   8983         MOV     DPH,R1
   \   00014C   E0           MOVX    A,@DPTR
   \   00014D   4400         ORL     A,#0x0
   \   00014F   F0           MOVX    @DPTR,A
   \   000150   A3           INC     DPTR
   \   000151   E0           MOVX    A,@DPTR
   \   000152   4480         ORL     A,#0x80
   \   000154   F0           MOVX    @DPTR,A
    429              }
    430          
    431          #if ( OSALMEM_METRICS )
    432              if ( memMax < memAlo )
    433              {
    434                memMax = memAlo;
    435              }
    436          #endif
    437          
    438          #if ( OSALMEM_PROFILER )
    439          #if !OSALMEM_PROFILER_LL
    440              if (osalMemStat != 0)  // Don't profile until after the LL block is filled.
    441          #endif
    442              {
    443                uint8 idx;
    444          
    445                for ( idx = 0; idx < OSALMEM_PROMAX; idx++ )
    446                {
    447                  if ( hdr->hdr.len <= proCnt[idx] )
    448                  {
    449                    break;
    450                  }
    451                }
    452                proCur[idx]++;
    453                if ( proMax[idx] < proCur[idx] )
    454                {
    455                  proMax[idx] = proCur[idx];
    456                }
    457                proTot[idx]++;
    458          
    459                /* A small-block could not be allocated in the small-block bucket.
    460                 * When this occurs significantly frequently, increase the size of the
    461                 * bucket in order to restore better worst case run times. Set the first
    462                 * profiling bucket size in proCnt[] to the small-block bucket size and
    463                 * divide proSmallBlkMiss by the corresponding proTot[] size to get % miss.
    464                 * Best worst case time on TrasmitApp was achieved at a 0-15% miss rate
    465                 * during steady state Tx load, 0% during idle and steady state Rx load.
    466                 */
    467                if ((hdr->hdr.len <= OSALMEM_SMALL_BLKSZ) && (hdr >= (theHeap + OSALMEM_BIGBLK_IDX)))
    468                {
    469                  proSmallBlkMiss++;
    470                }
    471              }
    472          
    473              (void)osal_memset((uint8 *)(hdr+1), OSALMEM_ALOC, (hdr->hdr.len - OSALMEM_HDRSZ));
    474          #endif
    475          
    476              if ((osalMemStat != 0) && (ff1 == hdr))
   \                     ??osal_mem_alloc_9:
   \   000155   90....       MOV     DPTR,#osalMemStat
   \   000158   E0           MOVX    A,@DPTR
   \   000159   602B         JZ      ??osal_mem_alloc_10
   \   00015B   90....       MOV     DPTR,#ff1
   \   00015E   E0           MOVX    A,@DPTR
   \   00015F   FA           MOV     R2,A
   \   000160   A3           INC     DPTR
   \   000161   E0           MOVX    A,@DPTR
   \   000162   FB           MOV     R3,A
   \   000163   E8           MOV     A,R0
   \   000164   6A           XRL     A,R2
   \   000165   7002         JNZ     ??osal_mem_alloc_11
   \   000167   E9           MOV     A,R1
   \   000168   6B           XRL     A,R3
   \                     ??osal_mem_alloc_11:
   \   000169   701B         JNZ     ??osal_mem_alloc_10
    477              {
    478                ff1 = (osalMemHdr_t *)((uint8 *)hdr + hdr->hdr.len);
   \   00016B   8882         MOV     DPL,R0
   \   00016D   8983         MOV     DPH,R1
   \   00016F   E0           MOVX    A,@DPTR
   \   000170   54FF         ANL     A,#0xff
   \   000172   FA           MOV     R2,A
   \   000173   A3           INC     DPTR
   \   000174   E0           MOVX    A,@DPTR
   \   000175   547F         ANL     A,#0x7f
   \   000177   FB           MOV     R3,A
   \   000178   E8           MOV     A,R0
   \   000179   2A           ADD     A,R2
   \   00017A   FA           MOV     R2,A
   \   00017B   E9           MOV     A,R1
   \   00017C   3B           ADDC    A,R3
   \   00017D   FB           MOV     R3,A
   \   00017E   90....       MOV     DPTR,#ff1
   \   000181   EA           MOV     A,R2
   \   000182   F0           MOVX    @DPTR,A
   \   000183   A3           INC     DPTR
   \   000184   EB           MOV     A,R3
   \   000185   F0           MOVX    @DPTR,A
    479              }
    480          
    481              hdr++;
   \                     ??osal_mem_alloc_10:
   \   000186   E8           MOV     A,R0
   \   000187   2402         ADD     A,#0x2
   \   000189   F8           MOV     R0,A
   \   00018A   5001         JNC     ??osal_mem_alloc_7
   \   00018C   09           INC     R1
    482            }
    483          
    484            HAL_EXIT_CRITICAL_SECTION( intState );  // Re-enable interrupts.
   \                     ??osal_mem_alloc_7:
   \   00018D   EF           MOV     A,R7
   \   00018E   FC           MOV     R4,A
   \   00018F   EF           MOV     A,R7
   \   000190   A2E0         MOV     C,0xE0 /* A   */.0
   \   000192   92AF         MOV     0xa8.7,C
    485          
    486          #if !defined ( ZBIT )
    487          #pragma diag_suppress=Pe767
    488            HAL_ASSERT(((halDataAlign_t)hdr % sizeof(halDataAlign_t)) == 0);
    489          #pragma diag_default=Pe767
    490          #else
    491            HAL_ASSERT(((halDataAlign_t)hdr % sizeof(halDataAlign_t)) == 0);
    492          #endif
    493          #ifdef DPRINTF_OSALHEAPTRACE
    494            dprintf("osal_mem_alloc(%u)->%lx:%s:%u\n", size, (unsigned) hdr, fname, lnum);
    495          #endif /* DPRINTF_OSALHEAPTRACE */
    496            return (void *)hdr;
   \   000194   E8           MOV     A,R0
   \   000195   FA           MOV     R2,A
   \   000196   E9           MOV     A,R1
   \   000197   FB           MOV     R3,A
   \   000198   7F05         MOV     R7,#0x5
   \   00019A   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   00019D                REQUIRE _A_IEN0
    497          }
    498          
    499          /**************************************************************************************************
    500           * @fn          osal_mem_free
    501           *
    502           * @brief       This function implements the OSAL dynamic memory de-allocation functionality.
    503           *
    504           * input parameters
    505           *
    506           * @param ptr - A valid pointer (i.e. a pointer returned by osal_mem_alloc()) to the memory to free.
    507           *
    508           * output parameters
    509           *
    510           * None.
    511           *
    512           * @return      None.
    513           */
    514          #ifdef DPRINTF_OSALHEAPTRACE
    515          void osal_mem_free_dbg(void *ptr, const char *fname, unsigned lnum)
    516          #else /* DPRINTF_OSALHEAPTRACE */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    517          void osal_mem_free(void *ptr)
   \                     osal_mem_free:
    518          #endif /* DPRINTF_OSALHEAPTRACE */
    519          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    520            osalMemHdr_t *hdr = (osalMemHdr_t *)ptr - 1;
   \   000005   EA           MOV     A,R2
   \   000006   24FE         ADD     A,#-0x2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   34FF         ADDC    A,#-0x1
   \   00000C   FF           MOV     R7,A
    521            halIntState_t intState;
    522          
    523          #ifdef DPRINTF_OSALHEAPTRACE
    524            dprintf("osal_mem_free(%lx):%s:%u\n", (unsigned) ptr, fname, lnum);
    525          #endif /* DPRINTF_OSALHEAPTRACE */
    526          
    527            HAL_ASSERT(((uint8 *)ptr >= (uint8 *)theHeap) && ((uint8 *)ptr < (uint8 *)theHeap+MAXMEMHEAP));
   \   00000D   C3           CLR     C
   \   00000E   EA           MOV     A,R2
   \   00000F   94..         SUBB    A,#theHeap & 0xff
   \   000011   EB           MOV     A,R3
   \   000012   94..         SUBB    A,#(theHeap >> 8) & 0xff
   \   000014   4009         JC      ??osal_mem_free_0
   \   000016   C3           CLR     C
   \   000017   EA           MOV     A,R2
   \   000018   94..         SUBB    A,#theHeap & 0xff
   \   00001A   EB           MOV     A,R3
   \   00001B   94..         SUBB    A,#((theHeap + 3072) >> 8) & 0xff
   \   00001D   4003         JC      ??osal_mem_free_1
   \                     ??osal_mem_free_0:
   \   00001F                ; Setup parameters for call to function halAssertHandler
   \   00001F   12....       LCALL   `??halAssertHandler::?relay`; Banked call to: halAssertHandler
    528            HAL_ASSERT(hdr->hdr.inUse);
   \                     ??osal_mem_free_1:
   \   000022   8E82         MOV     DPL,R6
   \   000024   8F83         MOV     DPH,R7
   \   000026   E0           MOVX    A,@DPTR
   \   000027   5400         ANL     A,#0x0
   \   000029   F8           MOV     R0,A
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   5480         ANL     A,#0x80
   \   00002E   F9           MOV     R1,A
   \   00002F   E8           MOV     A,R0
   \   000030   49           ORL     A,R1
   \   000031   7003         JNZ     ??osal_mem_free_2
   \   000033                ; Setup parameters for call to function halAssertHandler
   \   000033   12....       LCALL   `??halAssertHandler::?relay`; Banked call to: halAssertHandler
    529          
    530            HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \                     ??osal_mem_free_2:
   \   000036   A2AF         MOV     C,0xa8.7
   \   000038   E4           CLR     A
   \   000039   33           RLC     A
   \   00003A   FA           MOV     R2,A
   \   00003B   C2AF         CLR     0xa8.7
    531            hdr->hdr.inUse = FALSE;
   \   00003D   8E82         MOV     DPL,R6
   \   00003F   8F83         MOV     DPH,R7
   \   000041   E0           MOVX    A,@DPTR
   \   000042   54FF         ANL     A,#0xff
   \   000044   F0           MOVX    @DPTR,A
   \   000045   A3           INC     DPTR
   \   000046   E0           MOVX    A,@DPTR
   \   000047   547F         ANL     A,#0x7f
   \   000049   F0           MOVX    @DPTR,A
    532          
    533            if (ff1 > hdr)
   \   00004A   90....       MOV     DPTR,#ff1
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   F8           MOV     R0,A
   \   00004F   A3           INC     DPTR
   \   000050   E0           MOVX    A,@DPTR
   \   000051   F9           MOV     R1,A
   \   000052   C3           CLR     C
   \   000053   EE           MOV     A,R6
   \   000054   98           SUBB    A,R0
   \   000055   EF           MOV     A,R7
   \   000056   99           SUBB    A,R1
   \   000057   500C         JNC     ??osal_mem_free_3
    534            {
    535              ff1 = hdr;
   \   000059   EE           MOV     A,R6
   \   00005A   F8           MOV     R0,A
   \   00005B   EF           MOV     A,R7
   \   00005C   F9           MOV     R1,A
   \   00005D   90....       MOV     DPTR,#ff1
   \   000060   E8           MOV     A,R0
   \   000061   F0           MOVX    @DPTR,A
   \   000062   A3           INC     DPTR
   \   000063   E9           MOV     A,R1
   \   000064   F0           MOVX    @DPTR,A
    536            }
    537          
    538          #if OSALMEM_PROFILER
    539          #if !OSALMEM_PROFILER_LL
    540            if (osalMemStat != 0)  // Don't profile until after the LL block is filled.
    541          #endif
    542            {
    543              uint8 idx;
    544          
    545              for (idx = 0; idx < OSALMEM_PROMAX; idx++)
    546              {
    547                if (hdr->hdr.len <= proCnt[idx])
    548                {
    549                  break;
    550                }
    551              }
    552          
    553              proCur[idx]--;
    554            }
    555          
    556            (void)osal_memset((uint8 *)(hdr+1), OSALMEM_REIN, (hdr->hdr.len - OSALMEM_HDRSZ) );
    557          #endif
    558          #if OSALMEM_METRICS
    559            memAlo -= hdr->hdr.len;
    560            blkFree++;
    561          #endif
    562          
    563            HAL_EXIT_CRITICAL_SECTION( intState );  // Re-enable interrupts.
   \                     ??osal_mem_free_3:
   \   000065   EA           MOV     A,R2
   \   000066   F8           MOV     R0,A
   \   000067   EA           MOV     A,R2
   \   000068   A2E0         MOV     C,0xE0 /* A   */.0
   \   00006A   92AF         MOV     0xa8.7,C
    564          }
   \   00006C   7F01         MOV     R7,#0x1
   \   00006E   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000071                REQUIRE _A_IEN0

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_mem_init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_mem_init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_mem_kick::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_mem_kick

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_mem_alloc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_mem_alloc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_mem_free::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_mem_free
    565          
    566          #if OSALMEM_METRICS
    567          /*********************************************************************
    568           * @fn      osal_heap_block_max
    569           *
    570           * @brief   Return the maximum number of blocks ever allocated at once.
    571           *
    572           * @param   none
    573           *
    574           * @return  Maximum number of blocks ever allocated at once.
    575           */
    576          uint16 osal_heap_block_max( void )
    577          {
    578            return blkMax;
    579          }
    580          
    581          /*********************************************************************
    582           * @fn      osal_heap_block_cnt
    583           *
    584           * @brief   Return the current number of blocks now allocated.
    585           *
    586           * @param   none
    587           *
    588           * @return  Current number of blocks now allocated.
    589           */
    590          uint16 osal_heap_block_cnt( void )
    591          {
    592            return blkCnt;
    593          }
    594          
    595          /*********************************************************************
    596           * @fn      osal_heap_block_free
    597           *
    598           * @brief   Return the current number of free blocks.
    599           *
    600           * @param   none
    601           *
    602           * @return  Current number of free blocks.
    603           */
    604          uint16 osal_heap_block_free( void )
    605          {
    606            return blkFree;
    607          }
    608          
    609          /*********************************************************************
    610           * @fn      osal_heap_mem_used
    611           *
    612           * @brief   Return the current number of bytes allocated.
    613           *
    614           * @param   none
    615           *
    616           * @return  Current number of bytes allocated.
    617           */
    618          uint16 osal_heap_mem_used( void )
    619          {
    620            return memAlo;
    621          }
    622          #endif
    623          
    624          #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
    625          /*********************************************************************
    626           * @fn      osal_heap_high_water
    627           *
    628           * @brief   Return the highest byte ever allocated in the heap.
    629           *
    630           * @param   none
    631           *
    632           * @return  Highest number of bytes ever used by the stack.
    633           */
    634          uint16 osal_heap_high_water( void )
    635          {
    636          #if ( OSALMEM_METRICS )
    637            return memMax;
    638          #else
    639            return MAXMEMHEAP;
    640          #endif
    641          }
    642          #endif
    643          
    644          /**************************************************************************************************
    645          */

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     23   osal_mem_alloc
      0     19   osal_mem_free
        0      9   -> halAssertHandler
      2      0   osal_mem_init
      0     10   osal_mem_kick
        0     10   -> halAssertHandler
        0     10   -> osal_mem_alloc
        0     10   -> osal_mem_free


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  _A_IEN0
       2  ff1
       1  osalMemStat
     413  osal_mem_alloc
       6  osal_mem_alloc::?relay
     113  osal_mem_free
       6  osal_mem_free::?relay
      69  osal_mem_init
       6  osal_mem_init::?relay
      77  osal_mem_kick
       6  osal_mem_kick::?relay
    3072  theHeap

 
   672 bytes in segment BANKED_CODE
    24 bytes in segment BANK_RELAYS
     1 byte  in segment SFR_AN
 3 074 bytes in segment XDATA_N
     1 byte  in segment XDATA_Z
 
   696 bytes of CODE  memory
     0 bytes of DATA  memory (+ 1 byte shared)
 3 075 bytes of XDATA memory

Errors: none
Warnings: none

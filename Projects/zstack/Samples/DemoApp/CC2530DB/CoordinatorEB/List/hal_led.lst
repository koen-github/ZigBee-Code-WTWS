###############################################################################
#
# IAR C/C++ Compiler V9.20.1.2476 for 8051                22/Feb/2017  14:31:40
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\koen\ZigBee-Code-WTWS\Components\hal\target\CC2530EB\hal_led.c
#    Command line       =  
#        -f
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00002000 -DZDAPP_CONFIG_PAN_ID=0xABCD
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={'H', 'O', 'G', 'E', 'S',
#        'C', 'H', 'O', 'O', 'L', 'U', 'T', 'R', 'E', 'C', 'H'}"
#        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440
#        C:\Users\koen\ZigBee-Code-WTWS\Components\hal\target\CC2530EB\hal_led.c
#        -D HOLD_AUTO_START -D BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D
#        NV_RESTORE -D HAL_UART=TRUE -lC
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\
#        -lA
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\
#        --diag_suppress Pe001,Pa010,Pe1665 -o
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\Obj\
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\Source\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ol --require_prototypes
#    List file          =  
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\hal_led.lst
#    Object file        =  
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\Obj\hal_led.r51
#
###############################################################################

C:\Users\koen\ZigBee-Code-WTWS\Components\hal\target\CC2530EB\hal_led.c
      1          /**************************************************************************************************
      2            Filename:       hal_led.c
      3            Revised:        $Date: 2011-09-15 16:51:11 -0700 (Thu, 15 Sep 2011) $
      4            Revision:       $Revision: 27590 $
      5          
      6            Description:    This file contains the interface to the HAL LED Service.
      7          
      8          
      9            Copyright 2006-2011 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /***************************************************************************************************
     41           *                                             INCLUDES
     42           ***************************************************************************************************/
     43          #include "hal_mcu.h"

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1
     44          #include "hal_defs.h"
     45          #include "hal_types.h"
     46          #include "hal_drivers.h"
     47          #include "hal_led.h"
     48          #include "osal.h"
     49          #include "hal_board.h"
     50          
     51          /***************************************************************************************************
     52           *                                             CONSTANTS
     53           ***************************************************************************************************/
     54          
     55          /***************************************************************************************************
     56           *                                              MACROS
     57           ***************************************************************************************************/
     58          
     59          /***************************************************************************************************
     60           *                                              TYPEDEFS
     61           ***************************************************************************************************/
     62          /* LED control structure */
     63          typedef struct {
     64            uint8 mode;       /* Operation mode */
     65            uint8 todo;       /* Blink cycles left */
     66            uint8 onPct;      /* On cycle percentage */
     67            uint16 time;      /* On/off cycle time (msec) */
     68            uint32 next;      /* Time for next change */
     69          } HalLedControl_t;
     70          
     71          typedef struct
     72          {
     73            HalLedControl_t HalLedControlTable[HAL_LED_DEFAULT_MAX_LEDS];
     74            uint8           sleepActive;
     75          } HalLedStatus_t;
     76          
     77          
     78          /***************************************************************************************************
     79           *                                           GLOBAL VARIABLES
     80           ***************************************************************************************************/
     81          
     82          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     83          static uint8 HalLedState;              // LED state at last set/clr/blink update
   \                     HalLedState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     84          
     85          #if HAL_LED == TRUE

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     86          static uint8 HalSleepLedState;         // LED state at last set/clr/blink update
   \                     HalSleepLedState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     87          static uint8 preBlinkState;            // Original State before going to blink mode
   \                     preBlinkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     88                                                 // bit 0, 1, 2, 3 represent led 0, 1, 2, 3
     89          #endif
     90          
     91          #ifdef BLINK_LEDS

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     92            static HalLedStatus_t HalLedStatusControl;
   \                     HalLedStatusControl:
   \   000000                DS 37
   \   000025                REQUIRE __INIT_XDATA_Z
     93          #endif
     94          
     95          /***************************************************************************************************
     96           *                                            LOCAL FUNCTION
     97           ***************************************************************************************************/
     98          #if (HAL_LED == TRUE)
     99          void HalLedUpdate (void);
    100          void HalLedOnOff (uint8 leds, uint8 mode);
    101          #endif /* HAL_LED */
    102          
    103          /***************************************************************************************************
    104           *                                            FUNCTIONS - API
    105           ***************************************************************************************************/
    106          
    107          /***************************************************************************************************
    108           * @fn      HalLedInit
    109           *
    110           * @brief   Initialize LED Service
    111           *
    112           * @param   init - pointer to void that contains the initialized value
    113           *
    114           * @return  None
    115           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    116          void HalLedInit (void)
   \                     HalLedInit:
    117          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    118          #if (HAL_LED == TRUE)
    119            /* Initialize all LEDs to OFF */
    120            HalLedSet (HAL_LED_ALL, HAL_LED_MODE_OFF);
   \   000004                ; Setup parameters for call to function HalLedSet
   \   000004   7A00         MOV     R2,#0x0
   \   000006   790F         MOV     R1,#0xf
   \   000008   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   00000B   E9           MOV     A,R1
    121          #endif /* HAL_LED */
    122          #ifdef BLINK_LEDS
    123            /* Initialize sleepActive to FALSE */
    124            HalLedStatusControl.sleepActive = FALSE;
   \   00000C   90....       MOV     DPTR,#HalLedStatusControl + 36
   \   00000F   7400         MOV     A,#0x0
   \   000011   F0           MOVX    @DPTR,A
    125          #endif
    126          }
   \   000012   D083         POP     DPH
   \   000014   D082         POP     DPL
   \   000016   02....       LJMP    ?BRET
    127          
    128          /***************************************************************************************************
    129           * @fn      HalLedSet
    130           *
    131           * @brief   Tun ON/OFF/TOGGLE given LEDs
    132           *
    133           * @param   led - bit mask value of leds to be turned ON/OFF/TOGGLE
    134           *          mode - BLINK, FLASH, TOGGLE, ON, OFF
    135           * @return  None
    136           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    137          uint8 HalLedSet (uint8 leds, uint8 mode)
   \                     HalLedSet:
    138          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
   \   000007   8A..         MOV     ?V2,R2
    139          
    140          #if (defined (BLINK_LEDS)) && (HAL_LED == TRUE)
    141            uint8 led;
    142            HalLedControl_t *sts;
    143          
    144            switch (mode)
   \   000009   E5..         MOV     A,?V2
   \   00000B   602E         JZ      ??HalLedSet_0
   \   00000D   14           DEC     A
   \   00000E   602B         JZ      ??HalLedSet_0
   \   000010   14           DEC     A
   \   000011   600A         JZ      ??HalLedSet_1
   \   000013   24FE         ADD     A,#-0x2
   \   000015   6015         JZ      ??HalLedSet_2
   \   000017   24FC         ADD     A,#-0x4
   \   000019   6020         JZ      ??HalLedSet_0
   \   00001B   806B         SJMP    ??HalLedSet_3
    145            {
    146              case HAL_LED_MODE_BLINK:
    147                /* Default blink, 1 time, D% duty cycle */
    148                HalLedBlink (leds, 1, HAL_LED_DEFAULT_DUTY_CYCLE, HAL_LED_DEFAULT_FLASH_TIME);
   \                     ??HalLedSet_1:
   \   00001D                ; Setup parameters for call to function HalLedBlink
   \   00001D   7CE8         MOV     R4,#-0x18
   \   00001F   7D03         MOV     R5,#0x3
   \   000021   7B05         MOV     R3,#0x5
   \   000023   7A01         MOV     R2,#0x1
   \   000025   A9..         MOV     R1,?V0
   \   000027   12....       LCALL   `??HalLedBlink::?relay`; Banked call to: HalLedBlink
    149                break;
   \   00002A   805C         SJMP    ??HalLedSet_3
    150          
    151              case HAL_LED_MODE_FLASH:
    152                /* Default flash, N times, D% duty cycle */
    153                HalLedBlink (leds, HAL_LED_DEFAULT_FLASH_COUNT, HAL_LED_DEFAULT_DUTY_CYCLE, HAL_LED_DEFAULT_FLASH_TIME);
   \                     ??HalLedSet_2:
   \   00002C                ; Setup parameters for call to function HalLedBlink
   \   00002C   7CE8         MOV     R4,#-0x18
   \   00002E   7D03         MOV     R5,#0x3
   \   000030   7B05         MOV     R3,#0x5
   \   000032   7A32         MOV     R2,#0x32
   \   000034   A9..         MOV     R1,?V0
   \   000036   12....       LCALL   `??HalLedBlink::?relay`; Banked call to: HalLedBlink
    154                break;
   \   000039   804D         SJMP    ??HalLedSet_3
    155          
    156              case HAL_LED_MODE_ON:
    157              case HAL_LED_MODE_OFF:
    158              case HAL_LED_MODE_TOGGLE:
    159          
    160                led = HAL_LED_1;
   \                     ??HalLedSet_0:
   \   00003B   75..01       MOV     ?V1,#0x1
    161                leds &= HAL_LED_ALL;
   \   00003E   53..0F       ANL     ?V0,#0xf
    162                sts = HalLedStatusControl.HalLedControlTable;
   \   000041   7E..         MOV     R6,#HalLedStatusControl & 0xff
   \   000043   7F..         MOV     R7,#(HalLedStatusControl >> 8) & 0xff
   \   000045   8024         SJMP    ??HalLedSet_4
    163          
    164                while (leds)
    165                {
    166                  if (leds & led)
    167                  {
    168                    if (mode != HAL_LED_MODE_TOGGLE)
    169                    {
    170                      sts->mode = mode;  /* ON or OFF */
    171                    }
    172                    else
    173                    {
    174                      sts->mode ^= HAL_LED_MODE_ON;  /* Toggle */
   \                     ??HalLedSet_5:
   \   000047   8E82         MOV     DPL,R6
   \   000049   8F83         MOV     DPH,R7
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   6401         XRL     A,#0x1
   \   00004E   F0           MOVX    @DPTR,A
    175                    }
    176                    HalLedOnOff (led, sts->mode);
   \                     ??HalLedSet_6:
   \   00004F                ; Setup parameters for call to function HalLedOnOff
   \   00004F   8E82         MOV     DPL,R6
   \   000051   8F83         MOV     DPH,R7
   \   000053   E0           MOVX    A,@DPTR
   \   000054   FA           MOV     R2,A
   \   000055   A9..         MOV     R1,?V1
   \   000057   12....       LCALL   `??HalLedOnOff::?relay`; Banked call to: HalLedOnOff
    177                    leds ^= led;
   \   00005A   E5..         MOV     A,?V1
   \   00005C   62..         XRL     ?V0,A
    178                  }
    179                  led <<= 1;
   \                     ??HalLedSet_7:
   \   00005E   E5..         MOV     A,?V1
   \   000060   C3           CLR     C
   \   000061   33           RLC     A
   \   000062   F5..         MOV     ?V1,A
    180                  sts++;
   \   000064   EE           MOV     A,R6
   \   000065   2409         ADD     A,#0x9
   \   000067   FE           MOV     R6,A
   \   000068   5001         JNC     ??HalLedSet_4
   \   00006A   0F           INC     R7
   \                     ??HalLedSet_4:
   \   00006B   E5..         MOV     A,?V0
   \   00006D   6019         JZ      ??HalLedSet_3
   \   00006F   E5..         MOV     A,?V0
   \   000071   55..         ANL     A,?V1
   \   000073   60E9         JZ      ??HalLedSet_7
   \   000075   7408         MOV     A,#0x8
   \   000077   65..         XRL     A,?V2
   \   000079   60CC         JZ      ??HalLedSet_5
   \   00007B   E5..         MOV     A,?V2
   \   00007D   C0E0         PUSH    A
   \   00007F   8E82         MOV     DPL,R6
   \   000081   8F83         MOV     DPH,R7
   \   000083   D0E0         POP     A
   \   000085   F0           MOVX    @DPTR,A
   \   000086   80C7         SJMP    ??HalLedSet_6
    181                }
    182                break;
    183          
    184              default:
    185                break;
    186            }
    187          
    188          #elif (HAL_LED == TRUE)
    189            LedOnOff(leds, mode);
    190          #else
    191            // HAL LED is disabled, suppress unused argument warnings
    192            (void) leds;
    193            (void) mode;
    194          #endif /* BLINK_LEDS && HAL_LED   */
    195          
    196            return ( HalLedState );
   \                     ??HalLedSet_3:
   \   000088   90....       MOV     DPTR,#HalLedState
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   F9           MOV     R1,A
   \   00008D   7F03         MOV     R7,#0x3
   \   00008F   02....       LJMP    ?BANKED_LEAVE_XDATA
    197          
    198          }
    199          
    200          /***************************************************************************************************
    201           * @fn      HalLedBlink
    202           *
    203           * @brief   Blink the leds
    204           *
    205           * @param   leds       - bit mask value of leds to be blinked
    206           *          numBlinks  - number of blinks
    207           *          percent    - the percentage in each period where the led
    208           *                       will be on
    209           *          period     - length of each cycle in milliseconds
    210           *
    211           * @return  None
    212           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    213          void HalLedBlink (uint8 leds, uint8 numBlinks, uint8 percent, uint16 period)
   \                     HalLedBlink:
    214          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
   \   000007   8A..         MOV     ?V3,R2
   \   000009   8B..         MOV     ?V2,R3
   \   00000B   8C..         MOV     ?V4,R4
   \   00000D   8D..         MOV     ?V5,R5
    215          #if (defined (BLINK_LEDS)) && (HAL_LED == TRUE)
    216            uint8 led;
    217            HalLedControl_t *sts;
    218          
    219            if (leds && percent && period)
   \   00000F   E5..         MOV     A,?V0
   \   000011   7003         JNZ     $+5
   \   000013   02....       LJMP    ??HalLedBlink_0 & 0xFFFF
   \   000016   E5..         MOV     A,?V2
   \   000018   7003         JNZ     $+5
   \   00001A   02....       LJMP    ??HalLedBlink_0 & 0xFFFF
   \   00001D   E5..         MOV     A,?V4
   \   00001F   45..         ORL     A,?V5
   \   000021   7003         JNZ     $+5
   \   000023   02....       LJMP    ??HalLedBlink_0 & 0xFFFF
    220            {
    221              if (percent < 100)
   \   000026   E5..         MOV     A,?V2
   \   000028   C3           CLR     C
   \   000029   9464         SUBB    A,#0x64
   \   00002B   4003         JC      $+5
   \   00002D   02....       LJMP    ??HalLedBlink_1 & 0xFFFF
    222              {
    223                led = HAL_LED_1;
   \   000030   75..01       MOV     ?V1,#0x1
    224                leds &= HAL_LED_ALL;
   \   000033   53..0F       ANL     ?V0,#0xf
    225                sts = HalLedStatusControl.HalLedControlTable;
   \   000036   7E..         MOV     R6,#HalLedStatusControl & 0xff
   \   000038   7F..         MOV     R7,#(HalLedStatusControl >> 8) & 0xff
   \   00003A   02....       LJMP    ??HalLedBlink_2 & 0xFFFF
    226          
    227                while (leds)
    228                {
    229                  if (leds & led)
   \                     ??HalLedBlink_3:
   \   00003D   E5..         MOV     A,?V0
   \   00003F   55..         ANL     A,?V1
   \   000041   6074         JZ      ??HalLedBlink_4
    230                  {
    231                    /* Store the current state of the led before going to blinking if not already blinking */
    232                    if(sts->mode < HAL_LED_MODE_BLINK )
   \   000043   8E82         MOV     DPL,R6
   \   000045   8F83         MOV     DPH,R7
   \   000047   E0           MOVX    A,@DPTR
   \   000048   C3           CLR     C
   \   000049   9402         SUBB    A,#0x2
   \   00004B   500D         JNC     ??HalLedBlink_5
    233                      preBlinkState |= (led & HalLedState);
   \   00004D   90....       MOV     DPTR,#HalLedState
   \   000050   E0           MOVX    A,@DPTR
   \   000051   55..         ANL     A,?V1
   \   000053   F8           MOV     R0,A
   \   000054   90....       MOV     DPTR,#preBlinkState
   \   000057   E0           MOVX    A,@DPTR
   \   000058   48           ORL     A,R0
   \   000059   F0           MOVX    @DPTR,A
    234          
    235                    sts->mode  = HAL_LED_MODE_OFF;                    /* Stop previous blink */
   \                     ??HalLedBlink_5:
   \   00005A   8E82         MOV     DPL,R6
   \   00005C   8F83         MOV     DPH,R7
   \   00005E   7400         MOV     A,#0x0
   \   000060   F0           MOVX    @DPTR,A
    236                    sts->time  = period;                              /* Time for one on/off cycle */
   \   000061   8E82         MOV     DPL,R6
   \   000063   8F83         MOV     DPH,R7
   \   000065   A3           INC     DPTR
   \   000066   A3           INC     DPTR
   \   000067   A3           INC     DPTR
   \   000068   E5..         MOV     A,?V4
   \   00006A   F0           MOVX    @DPTR,A
   \   00006B   A3           INC     DPTR
   \   00006C   E5..         MOV     A,?V5
   \   00006E   F0           MOVX    @DPTR,A
    237                    sts->onPct = percent;                             /* % of cycle LED is on */
   \   00006F   E5..         MOV     A,?V2
   \   000071   C0E0         PUSH    A
   \   000073   8E82         MOV     DPL,R6
   \   000075   8F83         MOV     DPH,R7
   \   000077   A3           INC     DPTR
   \   000078   A3           INC     DPTR
   \   000079   D0E0         POP     A
   \   00007B   F0           MOVX    @DPTR,A
    238                    sts->todo  = numBlinks;                           /* Number of blink cycles */
   \   00007C   E5..         MOV     A,?V3
   \   00007E   C0E0         PUSH    A
   \   000080   8E82         MOV     DPL,R6
   \   000082   8F83         MOV     DPH,R7
   \   000084   A3           INC     DPTR
   \   000085   D0E0         POP     A
   \   000087   F0           MOVX    @DPTR,A
    239                    if (!numBlinks) sts->mode |= HAL_LED_MODE_FLASH;  /* Continuous */
   \   000088   E5..         MOV     A,?V3
   \   00008A   7008         JNZ     ??HalLedBlink_6
   \   00008C   8E82         MOV     DPL,R6
   \   00008E   8F83         MOV     DPH,R7
   \   000090   E0           MOVX    A,@DPTR
   \   000091   D2E2         SETB    0xE0 /* A   */.2
   \   000093   F0           MOVX    @DPTR,A
    240                    sts->next = osal_GetSystemClock();                /* Start now */
   \                     ??HalLedBlink_6:
   \   000094                ; Setup parameters for call to function osal_GetSystemClock
   \   000094   12....       LCALL   `??osal_GetSystemClock::?relay`; Banked call to: osal_GetSystemClock
   \   000097   EA           MOV     A,R2
   \   000098   F8           MOV     R0,A
   \   000099   EB           MOV     A,R3
   \   00009A   F9           MOV     R1,A
   \   00009B   EC           MOV     A,R4
   \   00009C   FA           MOV     R2,A
   \   00009D   ED           MOV     A,R5
   \   00009E   FB           MOV     R3,A
   \   00009F   8E82         MOV     DPL,R6
   \   0000A1   8F83         MOV     DPH,R7
   \   0000A3   A3           INC     DPTR
   \   0000A4   A3           INC     DPTR
   \   0000A5   A3           INC     DPTR
   \   0000A6   A3           INC     DPTR
   \   0000A7   A3           INC     DPTR
   \   0000A8   12....       LCALL   ?XSTORE_R0123
    241                    sts->mode |= HAL_LED_MODE_BLINK;                  /* Enable blinking */
   \   0000AB   8E82         MOV     DPL,R6
   \   0000AD   8F83         MOV     DPH,R7
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   D2E1         SETB    0xE0 /* A   */.1
   \   0000B2   F0           MOVX    @DPTR,A
    242                    leds ^= led;
   \   0000B3   E5..         MOV     A,?V1
   \   0000B5   62..         XRL     ?V0,A
    243                  }
    244                  led <<= 1;
   \                     ??HalLedBlink_4:
   \   0000B7   E5..         MOV     A,?V1
   \   0000B9   C3           CLR     C
   \   0000BA   33           RLC     A
   \   0000BB   F5..         MOV     ?V1,A
    245                  sts++;
   \   0000BD   EE           MOV     A,R6
   \   0000BE   2409         ADD     A,#0x9
   \   0000C0   FE           MOV     R6,A
   \   0000C1   5001         JNC     ??HalLedBlink_2
   \   0000C3   0F           INC     R7
    246                }
   \                     ??HalLedBlink_2:
   \   0000C4   E5..         MOV     A,?V0
   \   0000C6   6003         JZ      $+5
   \   0000C8   02....       LJMP    ??HalLedBlink_3 & 0xFFFF
    247                // Cancel any overlapping timer for blink events
    248                osal_stop_timerEx(Hal_TaskID, HAL_LED_BLINK_EVENT);
   \   0000CB                ; Setup parameters for call to function osal_stop_timerEx
   \   0000CB   7A20         MOV     R2,#0x20
   \   0000CD   7B00         MOV     R3,#0x0
   \   0000CF   90....       MOV     DPTR,#Hal_TaskID
   \   0000D2   E0           MOVX    A,@DPTR
   \   0000D3   F9           MOV     R1,A
   \   0000D4   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   0000D7   E9           MOV     A,R1
    249                osal_set_event (Hal_TaskID, HAL_LED_BLINK_EVENT);
   \   0000D8                ; Setup parameters for call to function osal_set_event
   \   0000D8   7A20         MOV     R2,#0x20
   \   0000DA   7B00         MOV     R3,#0x0
   \   0000DC   90....       MOV     DPTR,#Hal_TaskID
   \   0000DF   E0           MOVX    A,@DPTR
   \   0000E0   F9           MOV     R1,A
   \   0000E1   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   0000E4   E9           MOV     A,R1
   \   0000E5   8012         SJMP    ??HalLedBlink_7
    250              }
    251              else
    252              {
    253                HalLedSet (leds, HAL_LED_MODE_ON);                    /* >= 100%, turn on */
   \                     ??HalLedBlink_1:
   \   0000E7                ; Setup parameters for call to function HalLedSet
   \   0000E7   7A01         MOV     R2,#0x1
   \   0000E9   A9..         MOV     R1,?V0
   \   0000EB   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   0000EE   E9           MOV     A,R1
   \   0000EF   8008         SJMP    ??HalLedBlink_7
    254              }
    255            }
    256            else
    257            {
    258              HalLedSet (leds, HAL_LED_MODE_OFF);                     /* No on time, turn off */
   \                     ??HalLedBlink_0:
   \   0000F1                ; Setup parameters for call to function HalLedSet
   \   0000F1   7A00         MOV     R2,#0x0
   \   0000F3   A9..         MOV     R1,?V0
   \   0000F5   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   0000F8   E9           MOV     A,R1
    259            }
    260          #elif (HAL_LED == TRUE)
    261            percent = (leds & HalLedState) ? HAL_LED_MODE_OFF : HAL_LED_MODE_ON;
    262            HalLedOnOff (leds, percent);                              /* Toggle */
    263          #else
    264            // HAL LED is disabled, suppress unused argument warnings
    265            (void) leds;
    266            (void) numBlinks;
    267            (void) percent;
    268            (void) period;
    269          #endif /* BLINK_LEDS && HAL_LED */
    270          }
   \                     ??HalLedBlink_7:
   \   0000F9   7F06         MOV     R7,#0x6
   \   0000FB   02....       LJMP    ?BANKED_LEAVE_XDATA
    271          
    272          #if (HAL_LED == TRUE)
    273          /***************************************************************************************************
    274           * @fn      HalLedUpdate
    275           *
    276           * @brief   Update leds to work with blink
    277           *
    278           * @param   none
    279           *
    280           * @return  none
    281           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    282          void HalLedUpdate (void)
   \                     HalLedUpdate:
    283          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    284            uint8 led;
    285            uint8 pct;
    286            uint8 leds;
    287            HalLedControl_t *sts;
    288            uint32 time;
    289            uint16 next;
    290            uint16 wait;
    291          
    292            next = 0;
   \   00000A   75..00       MOV     ?V12,#0x0
   \   00000D   75..00       MOV     ?V13,#0x0
    293            led  = HAL_LED_1;
   \   000010   75..01       MOV     ?V14,#0x1
    294            leds = HAL_LED_ALL;
   \   000013   75..0F       MOV     ?V15,#0xf
    295            sts = HalLedStatusControl.HalLedControlTable;
   \   000016   7E..         MOV     R6,#HalLedStatusControl & 0xff
   \   000018   7F..         MOV     R7,#(HalLedStatusControl >> 8) & 0xff
    296          
    297            /* Check if sleep is active or not */
    298            if (!HalLedStatusControl.sleepActive)
   \   00001A   90....       MOV     DPTR,#HalLedStatusControl + 36
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   6003         JZ      $+5
   \   000020   02....       LJMP    ??HalLedUpdate_0 & 0xFFFF
   \   000023   8049         SJMP    ??HalLedUpdate_1
    299            {
    300              while (leds)
    301              {
    302                if (leds & led)
    303                {
    304                  if (sts->mode & HAL_LED_MODE_BLINK)
    305                  {
    306                    time = osal_GetSystemClock();
    307                    if (time >= sts->next)
    308                    {
    309                      if (sts->mode & HAL_LED_MODE_ON)
    310                      {
    311                        pct = 100 - sts->onPct;               /* Percentage of cycle for off */
    312                        sts->mode &= ~HAL_LED_MODE_ON;        /* Say it's not on */
    313                        HalLedOnOff (led, HAL_LED_MODE_OFF);  /* Turn it off */
    314          
    315                        if (!(sts->mode & HAL_LED_MODE_FLASH))
    316                        {
    317                          sts->todo--;                        /* Not continuous, reduce count */
    318                        }
    319                      }
    320                      else if ( (!sts->todo) && !(sts->mode & HAL_LED_MODE_FLASH) )
    321                      {
    322                        sts->mode ^= HAL_LED_MODE_BLINK;      /* No more blinks */
    323                      }
    324                      else
    325                      {
    326                        pct = sts->onPct;                     /* Percentage of cycle for on */
    327                        sts->mode |= HAL_LED_MODE_ON;         /* Say it's on */
    328                        HalLedOnOff (led, HAL_LED_MODE_ON);   /* Turn it on */
    329                      }
    330                      if (sts->mode & HAL_LED_MODE_BLINK)
    331                      {
    332                        wait = (((uint32)pct * (uint32)sts->time) / 100);
    333                        sts->next = time + wait;
    334                      }
    335                      else
    336                      {
    337                        /* no more blink, no more wait */
    338                        wait = 0;
    339                        /* After blinking, set the LED back to the state before it blinks */
    340                        HalLedSet (led, ((preBlinkState & led)!=0)?HAL_LED_MODE_ON:HAL_LED_MODE_OFF);
    341                        /* Clear the saved bit */
    342                        preBlinkState &= (led ^ 0xFF);
    343                      }
    344                    }
    345                    else
    346                    {
    347                      wait = sts->next - time;  /* Time left */
   \                     ??HalLedUpdate_2:
   \   000025   8E82         MOV     DPL,R6
   \   000027   8F83         MOV     DPH,R7
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   78..         MOV     R0,#?V0
   \   000030   12....       LCALL   ?L_MOV_X
   \   000033   E5..         MOV     A,?V0
   \   000035   C3           CLR     C
   \   000036   95..         SUBB    A,?V4
   \   000038   F5..         MOV     ?V0,A
   \   00003A   E5..         MOV     A,?V1
   \   00003C   95..         SUBB    A,?V5
   \   00003E   F5..         MOV     ?V1,A
    348                    }
    349          
    350                    if (!next || ( wait && (wait < next) ))
   \                     ??HalLedUpdate_3:
   \   000040   E5..         MOV     A,?V12
   \   000042   45..         ORL     A,?V13
   \   000044   6011         JZ      ??HalLedUpdate_4
   \   000046   E5..         MOV     A,?V0
   \   000048   45..         ORL     A,?V1
   \   00004A   6011         JZ      ??HalLedUpdate_5
   \   00004C   C3           CLR     C
   \   00004D   E5..         MOV     A,?V0
   \   00004F   95..         SUBB    A,?V12
   \   000051   E5..         MOV     A,?V1
   \   000053   95..         SUBB    A,?V13
   \   000055   5006         JNC     ??HalLedUpdate_5
    351                    {
    352                      next = wait;
   \                     ??HalLedUpdate_4:
   \   000057   85....       MOV     ?V12,?V0
   \   00005A   85....       MOV     ?V13,?V1
    353                    }
    354                  }
    355                  leds ^= led;
   \                     ??HalLedUpdate_5:
   \   00005D   E5..         MOV     A,?V14
   \   00005F   62..         XRL     ?V15,A
    356                }
    357                led <<= 1;
   \                     ??HalLedUpdate_6:
   \   000061   E5..         MOV     A,?V14
   \   000063   C3           CLR     C
   \   000064   33           RLC     A
   \   000065   F5..         MOV     ?V14,A
    358                sts++;
   \   000067   EE           MOV     A,R6
   \   000068   2409         ADD     A,#0x9
   \   00006A   FE           MOV     R6,A
   \   00006B   5001         JNC     ??HalLedUpdate_1
   \   00006D   0F           INC     R7
   \                     ??HalLedUpdate_1:
   \   00006E   E5..         MOV     A,?V15
   \   000070   7003         JNZ     $+5
   \   000072   02....       LJMP    ??HalLedUpdate_7 & 0xFFFF
   \   000075   E5..         MOV     A,?V15
   \   000077   55..         ANL     A,?V14
   \   000079   60E6         JZ      ??HalLedUpdate_6
   \   00007B   8E82         MOV     DPL,R6
   \   00007D   8F83         MOV     DPH,R7
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   A2E1         MOV     C,0xE0 /* A   */.1
   \   000082   50D9         JNC     ??HalLedUpdate_5
   \   000084                ; Setup parameters for call to function osal_GetSystemClock
   \   000084   12....       LCALL   `??osal_GetSystemClock::?relay`; Banked call to: osal_GetSystemClock
   \   000087   8A..         MOV     ?V4,R2
   \   000089   8B..         MOV     ?V5,R3
   \   00008B   8C..         MOV     ?V6,R4
   \   00008D   8D..         MOV     ?V7,R5
   \   00008F   8E82         MOV     DPL,R6
   \   000091   8F83         MOV     DPH,R7
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   A3           INC     DPTR
   \   000098   78..         MOV     R0,#?V4
   \   00009A   12....       LCALL   ?UL_GE_X
   \   00009D   5086         JNC     ??HalLedUpdate_2
   \   00009F   8E82         MOV     DPL,R6
   \   0000A1   8F83         MOV     DPH,R7
   \   0000A3   E0           MOVX    A,@DPTR
   \   0000A4   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000A6   503A         JNC     ??HalLedUpdate_8
   \   0000A8   8E82         MOV     DPL,R6
   \   0000AA   8F83         MOV     DPH,R7
   \   0000AC   A3           INC     DPTR
   \   0000AD   A3           INC     DPTR
   \   0000AE   E0           MOVX    A,@DPTR
   \   0000AF   F8           MOV     R0,A
   \   0000B0   7464         MOV     A,#0x64
   \   0000B2   C3           CLR     C
   \   0000B3   98           SUBB    A,R0
   \   0000B4   C0E0         PUSH    A
   \   0000B6   85..82       MOV     DPL,?XSP + 0
   \   0000B9   85..83       MOV     DPH,?XSP + 1
   \   0000BC   D0E0         POP     A
   \   0000BE   F0           MOVX    @DPTR,A
   \   0000BF   8E82         MOV     DPL,R6
   \   0000C1   8F83         MOV     DPH,R7
   \   0000C3   E0           MOVX    A,@DPTR
   \   0000C4   C2E0         CLR     0xE0 /* A   */.0
   \   0000C6   F0           MOVX    @DPTR,A
   \   0000C7                ; Setup parameters for call to function HalLedOnOff
   \   0000C7   7A00         MOV     R2,#0x0
   \   0000C9   A9..         MOV     R1,?V14
   \   0000CB   12....       LCALL   `??HalLedOnOff::?relay`; Banked call to: HalLedOnOff
   \   0000CE   8E82         MOV     DPL,R6
   \   0000D0   8F83         MOV     DPH,R7
   \   0000D2   E0           MOVX    A,@DPTR
   \   0000D3   A2E2         MOV     C,0xE0 /* A   */.2
   \   0000D5   4047         JC      ??HalLedUpdate_9
   \   0000D7   8E82         MOV     DPL,R6
   \   0000D9   8F83         MOV     DPH,R7
   \   0000DB   A3           INC     DPTR
   \   0000DC   E0           MOVX    A,@DPTR
   \   0000DD   24FF         ADD     A,#-0x1
   \   0000DF   F0           MOVX    @DPTR,A
   \   0000E0   803C         SJMP    ??HalLedUpdate_9
   \                     ??HalLedUpdate_8:
   \   0000E2   8E82         MOV     DPL,R6
   \   0000E4   8F83         MOV     DPH,R7
   \   0000E6   A3           INC     DPTR
   \   0000E7   E0           MOVX    A,@DPTR
   \   0000E8   7013         JNZ     ??HalLedUpdate_10
   \   0000EA   8E82         MOV     DPL,R6
   \   0000EC   8F83         MOV     DPH,R7
   \   0000EE   E0           MOVX    A,@DPTR
   \   0000EF   A2E2         MOV     C,0xE0 /* A   */.2
   \   0000F1   400A         JC      ??HalLedUpdate_10
   \   0000F3   8E82         MOV     DPL,R6
   \   0000F5   8F83         MOV     DPH,R7
   \   0000F7   E0           MOVX    A,@DPTR
   \   0000F8   6402         XRL     A,#0x2
   \   0000FA   F0           MOVX    @DPTR,A
   \   0000FB   8021         SJMP    ??HalLedUpdate_9
   \                     ??HalLedUpdate_10:
   \   0000FD   8E82         MOV     DPL,R6
   \   0000FF   8F83         MOV     DPH,R7
   \   000101   A3           INC     DPTR
   \   000102   A3           INC     DPTR
   \   000103   E0           MOVX    A,@DPTR
   \   000104   C0E0         PUSH    A
   \   000106   85..82       MOV     DPL,?XSP + 0
   \   000109   85..83       MOV     DPH,?XSP + 1
   \   00010C   D0E0         POP     A
   \   00010E   F0           MOVX    @DPTR,A
   \   00010F   8E82         MOV     DPL,R6
   \   000111   8F83         MOV     DPH,R7
   \   000113   E0           MOVX    A,@DPTR
   \   000114   D2E0         SETB    0xE0 /* A   */.0
   \   000116   F0           MOVX    @DPTR,A
   \   000117                ; Setup parameters for call to function HalLedOnOff
   \   000117   7A01         MOV     R2,#0x1
   \   000119   A9..         MOV     R1,?V14
   \   00011B   12....       LCALL   `??HalLedOnOff::?relay`; Banked call to: HalLedOnOff
   \                     ??HalLedUpdate_9:
   \   00011E   8E82         MOV     DPL,R6
   \   000120   8F83         MOV     DPH,R7
   \   000122   E0           MOVX    A,@DPTR
   \   000123   A2E1         MOV     C,0xE0 /* A   */.1
   \   000125   5076         JNC     ??HalLedUpdate_11
   \   000127   85..82       MOV     DPL,?XSP + 0
   \   00012A   85..83       MOV     DPH,?XSP + 1
   \   00012D   E0           MOVX    A,@DPTR
   \   00012E   F5..         MOV     ?V0,A
   \   000130   E4           CLR     A
   \   000131   F5..         MOV     ?V1,A
   \   000133   F5..         MOV     ?V2,A
   \   000135   F5..         MOV     ?V3,A
   \   000137   8E82         MOV     DPL,R6
   \   000139   8F83         MOV     DPH,R7
   \   00013B   A3           INC     DPTR
   \   00013C   A3           INC     DPTR
   \   00013D   A3           INC     DPTR
   \   00013E   E0           MOVX    A,@DPTR
   \   00013F   F5..         MOV     ?V8,A
   \   000141   A3           INC     DPTR
   \   000142   E0           MOVX    A,@DPTR
   \   000143   F5..         MOV     ?V9,A
   \   000145   E4           CLR     A
   \   000146   F5..         MOV     ?V10,A
   \   000148   F5..         MOV     ?V11,A
   \   00014A   78..         MOV     R0,#?V0
   \   00014C   79..         MOV     R1,#?V8
   \   00014E   12....       LCALL   ?L_MUL
   \   000151   90....       MOV     DPTR,#__Constant_64
   \   000154   78..         MOV     R0,#?V8
   \   000156   12....       LCALL   ?L_MOV_X
   \   000159   78..         MOV     R0,#?V0
   \   00015B   79..         MOV     R1,#?V8
   \   00015D   12....       LCALL   ?UL_DIV_MOD
   \   000160   85....       MOV     ?V2,?V0
   \   000163   85....       MOV     ?V3,?V1
   \   000166   85....       MOV     ?V0,?V2
   \   000169   85....       MOV     ?V1,?V3
   \   00016C   85....       MOV     ?V8,?V0
   \   00016F   85....       MOV     ?V9,?V1
   \   000172   E4           CLR     A
   \   000173   F5..         MOV     ?V10,A
   \   000175   F5..         MOV     ?V11,A
   \   000177   78..         MOV     R0,#?V4
   \   000179   79..         MOV     R1,#?V8
   \   00017B   12....       LCALL   ?L_ADD
   \   00017E   AA..         MOV     R2,?V4
   \   000180   AB..         MOV     R3,?V5
   \   000182   AC..         MOV     R4,?V6
   \   000184   AD..         MOV     R5,?V7
   \   000186   8E82         MOV     DPL,R6
   \   000188   8F83         MOV     DPH,R7
   \   00018A   A3           INC     DPTR
   \   00018B   A3           INC     DPTR
   \   00018C   A3           INC     DPTR
   \   00018D   A3           INC     DPTR
   \   00018E   A3           INC     DPTR
   \   00018F   EA           MOV     A,R2
   \   000190   F0           MOVX    @DPTR,A
   \   000191   A3           INC     DPTR
   \   000192   EB           MOV     A,R3
   \   000193   F0           MOVX    @DPTR,A
   \   000194   A3           INC     DPTR
   \   000195   EC           MOV     A,R4
   \   000196   F0           MOVX    @DPTR,A
   \   000197   A3           INC     DPTR
   \   000198   ED           MOV     A,R5
   \   000199   F0           MOVX    @DPTR,A
   \   00019A   02....       LJMP    ??HalLedUpdate_3 & 0xFFFF
   \                     ??HalLedUpdate_11:
   \   00019D   75..00       MOV     ?V0,#0x0
   \   0001A0   75..00       MOV     ?V1,#0x0
   \   0001A3   90....       MOV     DPTR,#preBlinkState
   \   0001A6   E0           MOVX    A,@DPTR
   \   0001A7   55..         ANL     A,?V14
   \   0001A9   6004         JZ      ??HalLedUpdate_12
   \   0001AB   7A01         MOV     R2,#0x1
   \   0001AD   8002         SJMP    ??HalLedUpdate_13
   \                     ??HalLedUpdate_12:
   \   0001AF   7A00         MOV     R2,#0x0
   \                     ??HalLedUpdate_13:
   \   0001B1                ; Setup parameters for call to function HalLedSet
   \   0001B1   A9..         MOV     R1,?V14
   \   0001B3   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   0001B6   E9           MOV     A,R1
   \   0001B7   74FF         MOV     A,#-0x1
   \   0001B9   65..         XRL     A,?V14
   \   0001BB   F8           MOV     R0,A
   \   0001BC   90....       MOV     DPTR,#preBlinkState
   \   0001BF   E0           MOVX    A,@DPTR
   \   0001C0   58           ANL     A,R0
   \   0001C1   F0           MOVX    @DPTR,A
   \   0001C2   02....       LJMP    ??HalLedUpdate_3 & 0xFFFF
    359              }
    360          
    361              if (next)
   \                     ??HalLedUpdate_7:
   \   0001C5   E5..         MOV     A,?V12
   \   0001C7   45..         ORL     A,?V13
   \   0001C9   601C         JZ      ??HalLedUpdate_0
    362              {
    363                osal_start_timerEx(Hal_TaskID, HAL_LED_BLINK_EVENT, next);   /* Schedule event */
   \   0001CB                ; Setup parameters for call to function osal_start_timerEx
   \   0001CB   E4           CLR     A
   \   0001CC   F5..         MOV     ?V14,A
   \   0001CE   F5..         MOV     ?V15,A
   \   0001D0   78..         MOV     R0,#?V12
   \   0001D2   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   0001D5   7A20         MOV     R2,#0x20
   \   0001D7   7B00         MOV     R3,#0x0
   \   0001D9   90....       MOV     DPTR,#Hal_TaskID
   \   0001DC   E0           MOVX    A,@DPTR
   \   0001DD   F9           MOV     R1,A
   \   0001DE   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0001E1   7404         MOV     A,#0x4
   \   0001E3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001E6   E9           MOV     A,R1
    364              }
    365            }
    366          }
   \                     ??HalLedUpdate_0:
   \   0001E7   7401         MOV     A,#0x1
   \   0001E9   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001EC   7F10         MOV     R7,#0x10
   \   0001EE   02....       LJMP    ?BANKED_LEAVE_XDATA
    367          
    368          /***************************************************************************************************
    369           * @fn      HalLedOnOff
    370           *
    371           * @brief   Turns specified LED ON or OFF
    372           *
    373           * @param   leds - LED bit mask
    374           *          mode - LED_ON,LED_OFF,
    375           *
    376           * @return  none
    377           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    378          void HalLedOnOff (uint8 leds, uint8 mode)
   \                     HalLedOnOff:
    379          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    380            if (leds & HAL_LED_1)
   \   000004   E9           MOV     A,R1
   \   000005   A2E0         MOV     C,0xE0 /* A   */.0
   \   000007   500B         JNC     ??HalLedOnOff_0
    381            {
    382              if (mode == HAL_LED_MODE_ON)
   \   000009   7401         MOV     A,#0x1
   \   00000B   6A           XRL     A,R2
   \   00000C   7004         JNZ     ??HalLedOnOff_1
    383              {
    384                HAL_TURN_ON_LED1();
   \   00000E   D290         SETB    0x90.0
   \   000010   8002         SJMP    ??HalLedOnOff_0
    385              }
    386              else
    387              {
    388                HAL_TURN_OFF_LED1();
   \                     ??HalLedOnOff_1:
   \   000012   C290         CLR     0x90.0
    389              }
    390            }
    391          
    392            if (leds & HAL_LED_2)
   \                     ??HalLedOnOff_0:
   \   000014   E9           MOV     A,R1
   \   000015   A2E1         MOV     C,0xE0 /* A   */.1
   \   000017   500B         JNC     ??HalLedOnOff_2
    393            {
    394              if (mode == HAL_LED_MODE_ON)
   \   000019   7401         MOV     A,#0x1
   \   00001B   6A           XRL     A,R2
   \   00001C   7004         JNZ     ??HalLedOnOff_3
    395              {
    396                HAL_TURN_ON_LED2();
   \   00001E   D291         SETB    0x90.1
   \   000020   8002         SJMP    ??HalLedOnOff_2
    397              }
    398              else
    399              {
    400                HAL_TURN_OFF_LED2();
   \                     ??HalLedOnOff_3:
   \   000022   C291         CLR     0x90.1
    401              }
    402            }
    403          
    404            if (leds & HAL_LED_3)
   \                     ??HalLedOnOff_2:
   \   000024   E9           MOV     A,R1
   \   000025   A2E2         MOV     C,0xE0 /* A   */.2
   \   000027   500B         JNC     ??HalLedOnOff_4
    405            {
    406              if (mode == HAL_LED_MODE_ON)
   \   000029   7401         MOV     A,#0x1
   \   00002B   6A           XRL     A,R2
   \   00002C   7004         JNZ     ??HalLedOnOff_5
    407              {
    408                HAL_TURN_ON_LED3();
   \   00002E   D294         SETB    0x90.4
   \   000030   8002         SJMP    ??HalLedOnOff_4
    409              }
    410              else
    411              {
    412                HAL_TURN_OFF_LED3();
   \                     ??HalLedOnOff_5:
   \   000032   C294         CLR     0x90.4
    413              }
    414            }
    415          
    416            if (leds & HAL_LED_4)
   \                     ??HalLedOnOff_4:
   \   000034   E9           MOV     A,R1
   \   000035   A2E3         MOV     C,0xE0 /* A   */.3
   \   000037   500B         JNC     ??HalLedOnOff_6
    417            {
    418              if (mode == HAL_LED_MODE_ON)
   \   000039   7401         MOV     A,#0x1
   \   00003B   6A           XRL     A,R2
   \   00003C   7004         JNZ     ??HalLedOnOff_7
    419              {
    420                HAL_TURN_ON_LED4();
   \   00003E   D290         SETB    0x90.0
   \   000040   8002         SJMP    ??HalLedOnOff_6
    421              }
    422              else
    423              {
    424                HAL_TURN_OFF_LED4();
   \                     ??HalLedOnOff_7:
   \   000042   C290         CLR     0x90.0
    425              }
    426            }
    427          
    428            /* Remember current state */
    429            if (mode)
   \                     ??HalLedOnOff_6:
   \   000044   EA           MOV     A,R2
   \   000045   6008         JZ      ??HalLedOnOff_8
    430            {
    431              HalLedState |= leds;
   \   000047   90....       MOV     DPTR,#HalLedState
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   49           ORL     A,R1
   \   00004C   F0           MOVX    @DPTR,A
   \   00004D   800A         SJMP    ??HalLedOnOff_9
    432            }
    433            else
    434            {
    435              HalLedState &= (leds ^ 0xFF);
   \                     ??HalLedOnOff_8:
   \   00004F   74FF         MOV     A,#-0x1
   \   000051   69           XRL     A,R1
   \   000052   F8           MOV     R0,A
   \   000053   90....       MOV     DPTR,#HalLedState
   \   000056   E0           MOVX    A,@DPTR
   \   000057   58           ANL     A,R0
   \   000058   F0           MOVX    @DPTR,A
    436            }
    437          }
   \                     ??HalLedOnOff_9:
   \   000059   D083         POP     DPH
   \   00005B   D082         POP     DPL
   \   00005D   02....       LJMP    ?BRET
   \   000060                REQUIRE _A_P1
    438          #endif /* HAL_LED */
    439          
    440          /***************************************************************************************************
    441           * @fn      HalGetLedState
    442           *
    443           * @brief   Dim LED2 - Dim (set level) of LED2
    444           *
    445           * @param   none
    446           *
    447           * @return  led state
    448           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    449          uint8 HalLedGetState ()
   \                     HalLedGetState:
    450          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    451          #if (HAL_LED == TRUE)
    452            return HalLedState;
   \   000004   90....       MOV     DPTR,#HalLedState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F9           MOV     R1,A
   \   000009   D083         POP     DPH
   \   00000B   D082         POP     DPL
   \   00000D   02....       LJMP    ?BRET
    453          #else
    454            return 0;
    455          #endif
    456          }
    457          
    458          /***************************************************************************************************
    459           * @fn      HalLedEnterSleep
    460           *
    461           * @brief   Store current LEDs state before sleep
    462           *
    463           * @param   none
    464           *
    465           * @return  none
    466           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    467          void HalLedEnterSleep( void )
   \                     HalLedEnterSleep:
    468          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    469          #ifdef BLINK_LEDS
    470            /* Sleep ON */
    471            HalLedStatusControl.sleepActive = TRUE;
   \   000004   90....       MOV     DPTR,#HalLedStatusControl + 36
   \   000007   7401         MOV     A,#0x1
   \   000009   F0           MOVX    @DPTR,A
    472          #endif /* BLINK_LEDS */
    473          
    474          #if (HAL_LED == TRUE)
    475            /* Save the state of each led */
    476            HalSleepLedState = 0;
   \   00000A   90....       MOV     DPTR,#HalSleepLedState
   \   00000D   7400         MOV     A,#0x0
   \   00000F   F0           MOVX    @DPTR,A
    477            HalSleepLedState |= HAL_STATE_LED1();
   \   000010   A290         MOV     C,0x90.0
   \   000012   E4           CLR     A
   \   000013   33           RLC     A
   \   000014   F8           MOV     R0,A
   \   000015   90....       MOV     DPTR,#HalSleepLedState
   \   000018   E0           MOVX    A,@DPTR
   \   000019   48           ORL     A,R0
   \   00001A   F0           MOVX    @DPTR,A
    478            HalSleepLedState |= HAL_STATE_LED2() << 1;
   \   00001B   A291         MOV     C,0x90.1
   \   00001D   5004         JNC     ??HalLedEnterSleep_0
   \   00001F   D2F0         SETB    B.0
   \   000021   8002         SJMP    ??HalLedEnterSleep_1
   \                     ??HalLedEnterSleep_0:
   \   000023   C2F0         CLR     B.0
   \                     ??HalLedEnterSleep_1:
   \   000025   A2F0         MOV     C,B.0
   \   000027   E4           CLR     A
   \   000028   33           RLC     A
   \   000029   C3           CLR     C
   \   00002A   33           RLC     A
   \   00002B   F8           MOV     R0,A
   \   00002C   90....       MOV     DPTR,#HalSleepLedState
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   48           ORL     A,R0
   \   000031   F0           MOVX    @DPTR,A
    479            HalSleepLedState |= HAL_STATE_LED3() << 2;
   \   000032   A294         MOV     C,0x90.4
   \   000034   5004         JNC     ??HalLedEnterSleep_2
   \   000036   D2F0         SETB    B.0
   \   000038   8002         SJMP    ??HalLedEnterSleep_3
   \                     ??HalLedEnterSleep_2:
   \   00003A   C2F0         CLR     B.0
   \                     ??HalLedEnterSleep_3:
   \   00003C   A2F0         MOV     C,B.0
   \   00003E   E4           CLR     A
   \   00003F   33           RLC     A
   \   000040   33           RLC     A
   \   000041   33           RLC     A
   \   000042   54FC         ANL     A,#0xfc
   \   000044   F8           MOV     R0,A
   \   000045   90....       MOV     DPTR,#HalSleepLedState
   \   000048   E0           MOVX    A,@DPTR
   \   000049   48           ORL     A,R0
   \   00004A   F0           MOVX    @DPTR,A
    480            HalSleepLedState |= HAL_STATE_LED4() << 3;
   \   00004B   A290         MOV     C,0x90.0
   \   00004D   E4           CLR     A
   \   00004E   33           RLC     A
   \   00004F   33           RLC     A
   \   000050   33           RLC     A
   \   000051   33           RLC     A
   \   000052   54F8         ANL     A,#0xf8
   \   000054   F8           MOV     R0,A
   \   000055   90....       MOV     DPTR,#HalSleepLedState
   \   000058   E0           MOVX    A,@DPTR
   \   000059   48           ORL     A,R0
   \   00005A   F0           MOVX    @DPTR,A
    481          
    482            /* TURN OFF all LEDs to save power */
    483            HalLedOnOff (HAL_LED_ALL, HAL_LED_MODE_OFF);
   \   00005B                ; Setup parameters for call to function HalLedOnOff
   \   00005B   7A00         MOV     R2,#0x0
   \   00005D   790F         MOV     R1,#0xf
   \   00005F   12....       LCALL   `??HalLedOnOff::?relay`; Banked call to: HalLedOnOff
    484          #endif /* HAL_LED */
    485          
    486          }
   \   000062   D083         POP     DPH
   \   000064   D082         POP     DPL
   \   000066   02....       LJMP    ?BRET
   \   000069                REQUIRE _A_P1
    487          
    488          /***************************************************************************************************
    489           * @fn      HalLedExitSleep
    490           *
    491           * @brief   Restore current LEDs state after sleep
    492           *
    493           * @param   none
    494           *
    495           * @return  none
    496           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    497          void HalLedExitSleep( void )
   \                     HalLedExitSleep:
    498          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    499          #if (HAL_LED == TRUE)
    500            /* Load back the saved state */
    501            HalLedOnOff(HalSleepLedState, HAL_LED_MODE_ON);
   \   000004                ; Setup parameters for call to function HalLedOnOff
   \   000004   7A01         MOV     R2,#0x1
   \   000006   90....       MOV     DPTR,#HalSleepLedState
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   F9           MOV     R1,A
   \   00000B   12....       LCALL   `??HalLedOnOff::?relay`; Banked call to: HalLedOnOff
    502          
    503            /* Restart - This takes care BLINKING LEDS */
    504            HalLedUpdate();
   \   00000E                ; Setup parameters for call to function HalLedUpdate
   \   00000E   12....       LCALL   `??HalLedUpdate::?relay`; Banked call to: HalLedUpdate
    505          #endif /* HAL_LED */
    506          
    507          #ifdef BLINK_LEDS
    508            /* Sleep OFF */
    509            HalLedStatusControl.sleepActive = FALSE;
   \   000011   90....       MOV     DPTR,#HalLedStatusControl + 36
   \   000014   7400         MOV     A,#0x0
   \   000016   F0           MOVX    @DPTR,A
    510          #endif /* BLINK_LEDS */
    511          }
   \   000017   D083         POP     DPH
   \   000019   D082         POP     DPL
   \   00001B   02....       LJMP    ?BRET

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_64:
   \   000000   64000000     DD 100

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalLedInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLedInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalLedSet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLedSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalLedBlink::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLedBlink

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalLedUpdate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLedUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalLedOnOff::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLedOnOff

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalLedGetState::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLedGetState

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalLedEnterSleep::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLedEnterSleep

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalLedExitSleep::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalLedExitSleep
    512          
    513          /***************************************************************************************************
    514          ***************************************************************************************************/
    515          
    516          
    517          
    518          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     25   HalLedBlink
        0     14   -> HalLedSet
        0     14   -> osal_GetSystemClock
        0     14   -> osal_set_event
        0     14   -> osal_stop_timerEx
      2      0   HalLedEnterSleep
        2      0   -> HalLedOnOff
      2      0   HalLedExitSleep
        2      0   -> HalLedOnOff
        2      0   -> HalLedUpdate
      2      0   HalLedGetState
      2      0   HalLedInit
        2      0   -> HalLedSet
      2     25   HalLedOnOff
      1     36   HalLedSet
        0     11   -> HalLedBlink
        0     11   -> HalLedOnOff
      1     29   HalLedUpdate
        0     25   -> HalLedOnOff
        0     25   -> HalLedSet
        0     25   -> osal_GetSystemClock
        0     29   -> osal_start_timerEx


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
     254  HalLedBlink
       6  HalLedBlink::?relay
     105  HalLedEnterSleep
       6  HalLedEnterSleep::?relay
      30  HalLedExitSleep
       6  HalLedExitSleep::?relay
      16  HalLedGetState
       6  HalLedGetState::?relay
      25  HalLedInit
       6  HalLedInit::?relay
      96  HalLedOnOff
       6  HalLedOnOff::?relay
     146  HalLedSet
       6  HalLedSet::?relay
       1  HalLedState
      37  HalLedStatusControl
     497  HalLedUpdate
       6  HalLedUpdate::?relay
       1  HalSleepLedState
       1  _A_P1
       4  __Constant_64
       1  preBlinkState

 
 1 169 bytes in segment BANKED_CODE
    48 bytes in segment BANK_RELAYS
     1 byte  in segment SFR_AN
     4 bytes in segment XDATA_ROM_C
    40 bytes in segment XDATA_Z
 
 1 217 bytes of CODE  memory
     0 bytes of CONST memory (+ 4 bytes shared)
     0 bytes of DATA  memory (+ 1 byte  shared)
    40 bytes of XDATA memory

Errors: none
Warnings: none

###############################################################################
#
# IAR C/C++ Compiler V9.20.1.2476 for 8051                22/Feb/2017  14:31:43
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\koen\ZigBee-Code-WTWS\Components\stack\zdo\ZDConfig.c
#    Command line       =  
#        -f
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00002000 -DZDAPP_CONFIG_PAN_ID=0xABCD
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={'H', 'O', 'G', 'E', 'S',
#        'C', 'H', 'O', 'O', 'L', 'U', 'T', 'R', 'E', 'C', 'H'}"
#        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440
#        C:\Users\koen\ZigBee-Code-WTWS\Components\stack\zdo\ZDConfig.c -D
#        HOLD_AUTO_START -D BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D
#        NV_RESTORE -D HAL_UART=TRUE -lC
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\
#        -lA
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\
#        --diag_suppress Pe001,Pa010,Pe1665 -o
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\Obj\
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\Source\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ol --require_prototypes
#    List file          =  
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\ZDConfig.lst
#    Object file        =  
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\Obj\ZDConfig.r51
#
###############################################################################

C:\Users\koen\ZigBee-Code-WTWS\Components\stack\zdo\ZDConfig.c
      1          /**************************************************************************************************
      2            Filename:       ZDConfig.c
      3            Revised:        $Date: 2013-05-07 13:02:49 -0700 (Tue, 07 May 2013) $
      4            Revision:       $Revision: 34167 $
      5          
      6          
      7            Description:    This file contains the configuration attributes for the Zigbee Device Object.
      8                            These are references to Configuration items that MUST be defined in ZDApp.c.
      9                            The names mustn't change.
     10          
     11          
     12            Copyright 2004-2013 Texas Instruments Incorporated. All rights reserved.
     13          
     14            IMPORTANT: Your use of this Software is limited to those specific rights
     15            granted under the terms of a software license agreement between the user
     16            who downloaded the software, his/her employer (which must be your employer)
     17            and Texas Instruments Incorporated (the "License").  You may not use this
     18            Software unless you agree to abide by the terms of the License. The License
     19            limits your use, and you acknowledge, that the Software may not be modified,
     20            copied or distributed unless embedded on a Texas Instruments microcontroller
     21            or used solely and exclusively in conjunction with a Texas Instruments radio
     22            frequency transceiver, which is integrated into your product.  Other than for
     23            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     24            works of, modify, distribute, perform, display or sell this Software and/or
     25            its documentation for any purpose.
     26          
     27            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     28            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     29            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     30            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     31            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     32            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     33            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     34            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     35            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     36            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     37            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     38          
     39            Should you have any questions regarding your right to use this Software,
     40            contact Texas Instruments Incorporated at www.TI.com.
     41          **************************************************************************************************/
     42          
     43          /*********************************************************************
     44           * INCLUDES
     45           */
     46          #include "ZComDef.h"
     47          #include "AF.h"
     48          #include "ZDObject.h"
     49          #include "ZDConfig.h"
     50          
     51           /*********************************************************************
     52           * MACROS
     53           */
     54          
     55          /*********************************************************************
     56           * CONSTANTS
     57           */
     58          
     59          /*********************************************************************
     60           * TYPEDEFS
     61           */
     62          
     63          /*********************************************************************
     64           * GLOBAL VARIABLES
     65           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     66          NodeDescriptorFormat_t ZDO_Config_Node_Descriptor;
   \                     ZDO_Config_Node_Descriptor:
   \   000000                DS 13
   \   00000D                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     67          NodePowerDescriptorFormat_t ZDO_Config_Power_Descriptor;
   \                     ZDO_Config_Power_Descriptor:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     68          
     69          /*********************************************************************
     70           * EXTERNAL VARIABLES
     71           */
     72          
     73          /*********************************************************************
     74           * EXTERNAL FUNCTIONS
     75           */
     76          
     77          /*********************************************************************
     78           * LOCAL FUNCTIONS
     79           */
     80          
     81          /*********************************************************************
     82           * LOCAL VARIABLES
     83           */
     84          
     85          /*********************************************************************
     86           * @fn      ZDConfig_InitDescriptors()
     87           *
     88           * @brief   Setup the ZDO descriptors
     89           *             Node, Power
     90           *
     91           * @param   none
     92           *
     93           * @return  none
     94           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     95          void ZDConfig_InitDescriptors( void )
   \                     ZDConfig_InitDescriptors:
     96          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     97            ZDConfig_UpdateNodeDescriptor();
   \   000004                ; Setup parameters for call to function ZDConfig_UpdateNodeDescriptor
   \   000004   12....       LCALL   `??ZDConfig_UpdateNodeDescriptor::?relay`; Banked call to: ZDConfig_UpdateNodeDescriptor
     98            ZDConfig_UpdatePowerDescriptor();
   \   000007                ; Setup parameters for call to function ZDConfig_UpdatePowerDescriptor
   \   000007   12....       LCALL   `??ZDConfig_UpdatePowerDescriptor::?relay`; Banked call to: ZDConfig_UpdatePowerDescriptor
     99          }
   \   00000A   D083         POP     DPH
   \   00000C   D082         POP     DPL
   \   00000E   02....       LJMP    ?BRET
    100          
    101          /*********************************************************************
    102           * @fn      ZDConfig_UpdateNodeDescriptor()
    103           *
    104           * @brief   Update the ZDO Node Descriptor
    105           *
    106           * @param   none
    107           *
    108           * @return  none
    109           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    110          void ZDConfig_UpdateNodeDescriptor( void )
   \                     ZDConfig_UpdateNodeDescriptor:
    111          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    112            // Build the Node Descriptor
    113            if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   \   000004   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000007   E0           MOVX    A,@DPTR
   \   000008   7009         JNZ     ??ZDConfig_UpdateNodeDescriptor_0
    114              ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
   \   00000A   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   54F8         ANL     A,#0xf8
   \   000010   F0           MOVX    @DPTR,A
   \   000011   8034         SJMP    ??ZDConfig_UpdateNodeDescriptor_1
    115            else if ( ZSTACK_ROUTER_BUILD )
   \                     ??ZDConfig_UpdateNodeDescriptor_0:
   \   000013   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000016   E0           MOVX    A,@DPTR
   \   000017   6008         JZ      ??ZDConfig_UpdateNodeDescriptor_2
   \   000019   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   6401         XRL     A,#0x1
   \   00001F   7010         JNZ     ??ZDConfig_UpdateNodeDescriptor_3
    116              ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_ROUTER;
   \                     ??ZDConfig_UpdateNodeDescriptor_2:
   \   000021   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000024   E0           MOVX    A,@DPTR
   \   000025   54F8         ANL     A,#0xf8
   \   000027   F0           MOVX    @DPTR,A
   \   000028   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   4401         ORL     A,#0x1
   \   00002E   F0           MOVX    @DPTR,A
   \   00002F   8016         SJMP    ??ZDConfig_UpdateNodeDescriptor_1
    117            else if ( ZSTACK_END_DEVICE_BUILD )
   \                     ??ZDConfig_UpdateNodeDescriptor_3:
   \   000031   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000034   E0           MOVX    A,@DPTR
   \   000035   6402         XRL     A,#0x2
   \   000037   700E         JNZ     ??ZDConfig_UpdateNodeDescriptor_1
    118              ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
   \   000039   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   54F8         ANL     A,#0xf8
   \   00003F   F0           MOVX    @DPTR,A
   \   000040   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000043   E0           MOVX    A,@DPTR
   \   000044   4402         ORL     A,#0x2
   \   000046   F0           MOVX    @DPTR,A
    119          
    120            ZDO_Config_Node_Descriptor.ComplexDescAvail = FALSE;      // set elsewhere
   \                     ??ZDConfig_UpdateNodeDescriptor_1:
   \   000047   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   C2E3         CLR     0xE0 /* A   */.3
   \   00004D   F0           MOVX    @DPTR,A
    121            ZDO_Config_Node_Descriptor.UserDescAvail = FALSE;         // set elsewhere
   \   00004E   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000051   E0           MOVX    A,@DPTR
   \   000052   C2E4         CLR     0xE0 /* A   */.4
   \   000054   F0           MOVX    @DPTR,A
    122            ZDO_Config_Node_Descriptor.Reserved = 0;                  // Reserved
   \   000055   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000058   E0           MOVX    A,@DPTR
   \   000059   541F         ANL     A,#0x1f
   \   00005B   F0           MOVX    @DPTR,A
    123            ZDO_Config_Node_Descriptor.APSFlags = 0;                  // NO APS flags
   \   00005C   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 1
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   54F8         ANL     A,#0xf8
   \   000062   F0           MOVX    @DPTR,A
    124            ZDO_Config_Node_Descriptor.FrequencyBand = NODEFREQ_2400; // Frequency Band
   \   000063   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 1
   \   000066   E0           MOVX    A,@DPTR
   \   000067   5407         ANL     A,#0x7
   \   000069   F0           MOVX    @DPTR,A
   \   00006A   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 1
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   4440         ORL     A,#0x40
   \   000070   F0           MOVX    @DPTR,A
    125          
    126            // MAC Capabilities
    127            if ( ZSTACK_ROUTER_BUILD )
   \   000071   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000074   E0           MOVX    A,@DPTR
   \   000075   6008         JZ      ??ZDConfig_UpdateNodeDescriptor_4
   \   000077   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   6401         XRL     A,#0x1
   \   00007D   7015         JNZ     ??ZDConfig_UpdateNodeDescriptor_5
    128            {
    129              ZDO_Config_Node_Descriptor.CapabilityFlags
    130                        = (CAPINFO_DEVICETYPE_FFD | CAPINFO_POWER_AC |
    131                           CAPINFO_RCVR_ON_IDLE | CAPINFO_ALLOC_ADDR);
   \                     ??ZDConfig_UpdateNodeDescriptor_4:
   \   00007F   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000082   748E         MOV     A,#-0x72
   \   000084   F0           MOVX    @DPTR,A
    132          
    133              if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   \   000085   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000088   E0           MOVX    A,@DPTR
   \   000089   7017         JNZ     ??ZDConfig_UpdateNodeDescriptor_6
    134                ZDO_Config_Node_Descriptor.CapabilityFlags |= CAPINFO_ALTPANCOORD;
   \   00008B   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   D2E0         SETB    0xE0 /* A   */.0
   \   000091   F0           MOVX    @DPTR,A
   \   000092   800E         SJMP    ??ZDConfig_UpdateNodeDescriptor_6
    135            }
    136            else if ( ZSTACK_END_DEVICE_BUILD )
   \                     ??ZDConfig_UpdateNodeDescriptor_5:
   \   000094   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000097   E0           MOVX    A,@DPTR
   \   000098   6402         XRL     A,#0x2
   \   00009A   7006         JNZ     ??ZDConfig_UpdateNodeDescriptor_6
    137            {
    138              ZDO_Config_Node_Descriptor.CapabilityFlags = (CAPINFO_DEVICETYPE_RFD
    139            #if ( RFD_RCVC_ALWAYS_ON == TRUE)
    140                      | CAPINFO_RCVR_ON_IDLE
    141            #endif
    142                  | CAPINFO_ALLOC_ADDR);
   \   00009C   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00009F   7480         MOV     A,#-0x80
   \   0000A1   F0           MOVX    @DPTR,A
    143            }
    144          
    145            // Manufacturer Code - *YOU FILL IN*
    146            ZDO_Config_Node_Descriptor.ManufacturerCode[0] = 0;
   \                     ??ZDConfig_UpdateNodeDescriptor_6:
   \   0000A2   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 3
   \   0000A5   7400         MOV     A,#0x0
   \   0000A7   F0           MOVX    @DPTR,A
    147            ZDO_Config_Node_Descriptor.ManufacturerCode[1] = 0;
   \   0000A8   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 4
   \   0000AB   7400         MOV     A,#0x0
   \   0000AD   F0           MOVX    @DPTR,A
    148          
    149            // Maximum Buffer Size
    150            ZDO_Config_Node_Descriptor.MaxBufferSize = MAX_BUFFER_SIZE;
   \   0000AE   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 5
   \   0000B1   7450         MOV     A,#0x50
   \   0000B3   F0           MOVX    @DPTR,A
    151          
    152            // Maximum Incoming Transfer Size Field
    153            ZDO_Config_Node_Descriptor.MaxInTransferSize[0] = LO_UINT16( MAX_TRANSFER_SIZE );
   \   0000B4   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 6
   \   0000B7   74A0         MOV     A,#-0x60
   \   0000B9   F0           MOVX    @DPTR,A
    154            ZDO_Config_Node_Descriptor.MaxInTransferSize[1] = HI_UINT16( MAX_TRANSFER_SIZE );
   \   0000BA   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 7
   \   0000BD   7400         MOV     A,#0x0
   \   0000BF   F0           MOVX    @DPTR,A
    155          
    156            // Maximum Outgoing Transfer Size Field
    157            ZDO_Config_Node_Descriptor.MaxOutTransferSize[0] = LO_UINT16( MAX_TRANSFER_SIZE );
   \   0000C0   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 10
   \   0000C3   74A0         MOV     A,#-0x60
   \   0000C5   F0           MOVX    @DPTR,A
    158            ZDO_Config_Node_Descriptor.MaxOutTransferSize[1] = HI_UINT16( MAX_TRANSFER_SIZE );
   \   0000C6   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 11
   \   0000C9   7400         MOV     A,#0x0
   \   0000CB   F0           MOVX    @DPTR,A
    159          
    160            // Server Mask
    161            ZDO_Config_Node_Descriptor.ServerMask = 0;
   \   0000CC   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 8
   \   0000CF   7400         MOV     A,#0x0
   \   0000D1   F0           MOVX    @DPTR,A
   \   0000D2   A3           INC     DPTR
   \   0000D3   7400         MOV     A,#0x0
   \   0000D5   F0           MOVX    @DPTR,A
    162          
    163            // Descriptor Capability Field - extended active endpoint list and
    164            // extended simple descriptor are not supported.
    165            ZDO_Config_Node_Descriptor.DescriptorCapability = 0;
   \   0000D6   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 12
   \   0000D9   7400         MOV     A,#0x0
   \   0000DB   F0           MOVX    @DPTR,A
    166          }
   \   0000DC   D083         POP     DPH
   \   0000DE   D082         POP     DPL
   \   0000E0   02....       LJMP    ?BRET
    167          
    168          /*********************************************************************
    169           * @fn      ZDConfig_UpdatePowerDescriptor()
    170           *
    171           * @brief   Update the ZDO Power Descriptor
    172           *
    173           * @param   none
    174           *
    175           * @return  none
    176           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    177          void ZDConfig_UpdatePowerDescriptor( void )
   \                     ZDConfig_UpdatePowerDescriptor:
    178          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    179            // Build the Power Descriptor
    180            if ( ZSTACK_ROUTER_BUILD )
   \   000004   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6008         JZ      ??ZDConfig_UpdatePowerDescriptor_0
   \   00000A   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6401         XRL     A,#0x1
   \   000010   7057         JNZ     ??ZDConfig_UpdatePowerDescriptor_1
    181            {
    182              ZDO_Config_Power_Descriptor.PowerMode = NODECURPWR_RCVR_ALWAYS_ON;
   \                     ??ZDConfig_UpdatePowerDescriptor_0:
   \   000012   90....       MOV     DPTR,#ZDO_Config_Power_Descriptor
   \   000015   E0           MOVX    A,@DPTR
   \   000016   54F0         ANL     A,#0xf0
   \   000018   F0           MOVX    @DPTR,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   54FF         ANL     A,#0xff
   \   00001D   F0           MOVX    @DPTR,A
    183              ZDO_Config_Power_Descriptor.AvailablePowerSources = NODEAVAILPWR_MAINS;
   \   00001E   90....       MOV     DPTR,#ZDO_Config_Power_Descriptor
   \   000021   E0           MOVX    A,@DPTR
   \   000022   540F         ANL     A,#0xf
   \   000024   F0           MOVX    @DPTR,A
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   54FF         ANL     A,#0xff
   \   000029   F0           MOVX    @DPTR,A
   \   00002A   90....       MOV     DPTR,#ZDO_Config_Power_Descriptor
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   4410         ORL     A,#0x10
   \   000030   F0           MOVX    @DPTR,A
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   4400         ORL     A,#0x0
   \   000035   F0           MOVX    @DPTR,A
    184              ZDO_Config_Power_Descriptor.CurrentPowerSource = NODEAVAILPWR_MAINS;
   \   000036   90....       MOV     DPTR,#ZDO_Config_Power_Descriptor
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   54FF         ANL     A,#0xff
   \   00003C   F0           MOVX    @DPTR,A
   \   00003D   A3           INC     DPTR
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   54F0         ANL     A,#0xf0
   \   000041   F0           MOVX    @DPTR,A
   \   000042   90....       MOV     DPTR,#ZDO_Config_Power_Descriptor
   \   000045   E0           MOVX    A,@DPTR
   \   000046   4400         ORL     A,#0x0
   \   000048   F0           MOVX    @DPTR,A
   \   000049   A3           INC     DPTR
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   4401         ORL     A,#0x1
   \   00004D   F0           MOVX    @DPTR,A
    185              ZDO_Config_Power_Descriptor.CurrentPowerSourceLevel = NODEPOWER_LEVEL_100;
   \   00004E   90....       MOV     DPTR,#ZDO_Config_Power_Descriptor
   \   000051   E0           MOVX    A,@DPTR
   \   000052   54FF         ANL     A,#0xff
   \   000054   F0           MOVX    @DPTR,A
   \   000055   A3           INC     DPTR
   \   000056   E0           MOVX    A,@DPTR
   \   000057   540F         ANL     A,#0xf
   \   000059   F0           MOVX    @DPTR,A
   \   00005A   90....       MOV     DPTR,#ZDO_Config_Power_Descriptor
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   4400         ORL     A,#0x0
   \   000060   F0           MOVX    @DPTR,A
   \   000061   A3           INC     DPTR
   \   000062   E0           MOVX    A,@DPTR
   \   000063   44C0         ORL     A,#0xc0
   \   000065   F0           MOVX    @DPTR,A
   \   000066   02....       LJMP    ??ZDConfig_UpdatePowerDescriptor_2 & 0xFFFF
    186            }
    187            else if ( ZSTACK_END_DEVICE_BUILD )
   \                     ??ZDConfig_UpdatePowerDescriptor_1:
   \   000069   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   6402         XRL     A,#0x2
   \   00006F   6003         JZ      $+5
   \   000071   02....       LJMP    ??ZDConfig_UpdatePowerDescriptor_2 & 0xFFFF
    188            {
    189              if ( zgPollRate )
   \   000074   90....       MOV     DPTR,#zgPollRate
   \   000077   E0           MOVX    A,@DPTR
   \   000078   F8           MOV     R0,A
   \   000079   A3           INC     DPTR
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   F9           MOV     R1,A
   \   00007C   E8           MOV     A,R0
   \   00007D   49           ORL     A,R1
   \   00007E   601A         JZ      ??ZDConfig_UpdatePowerDescriptor_3
    190                ZDO_Config_Power_Descriptor.PowerMode = NODECURPWR_RCVR_AUTO;
   \   000080   90....       MOV     DPTR,#ZDO_Config_Power_Descriptor
   \   000083   E0           MOVX    A,@DPTR
   \   000084   54F0         ANL     A,#0xf0
   \   000086   F0           MOVX    @DPTR,A
   \   000087   A3           INC     DPTR
   \   000088   E0           MOVX    A,@DPTR
   \   000089   54FF         ANL     A,#0xff
   \   00008B   F0           MOVX    @DPTR,A
   \   00008C   90....       MOV     DPTR,#ZDO_Config_Power_Descriptor
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   4401         ORL     A,#0x1
   \   000092   F0           MOVX    @DPTR,A
   \   000093   A3           INC     DPTR
   \   000094   E0           MOVX    A,@DPTR
   \   000095   4400         ORL     A,#0x0
   \   000097   F0           MOVX    @DPTR,A
   \   000098   8018         SJMP    ??ZDConfig_UpdatePowerDescriptor_4
    191              else
    192                ZDO_Config_Power_Descriptor.PowerMode = NODECURPWR_RCVR_STIM;
   \                     ??ZDConfig_UpdatePowerDescriptor_3:
   \   00009A   90....       MOV     DPTR,#ZDO_Config_Power_Descriptor
   \   00009D   E0           MOVX    A,@DPTR
   \   00009E   54F0         ANL     A,#0xf0
   \   0000A0   F0           MOVX    @DPTR,A
   \   0000A1   A3           INC     DPTR
   \   0000A2   E0           MOVX    A,@DPTR
   \   0000A3   54FF         ANL     A,#0xff
   \   0000A5   F0           MOVX    @DPTR,A
   \   0000A6   90....       MOV     DPTR,#ZDO_Config_Power_Descriptor
   \   0000A9   E0           MOVX    A,@DPTR
   \   0000AA   4402         ORL     A,#0x2
   \   0000AC   F0           MOVX    @DPTR,A
   \   0000AD   A3           INC     DPTR
   \   0000AE   E0           MOVX    A,@DPTR
   \   0000AF   4400         ORL     A,#0x0
   \   0000B1   F0           MOVX    @DPTR,A
    193          
    194              ZDO_Config_Power_Descriptor.AvailablePowerSources = NODEAVAILPWR_RECHARGE;
   \                     ??ZDConfig_UpdatePowerDescriptor_4:
   \   0000B2   90....       MOV     DPTR,#ZDO_Config_Power_Descriptor
   \   0000B5   E0           MOVX    A,@DPTR
   \   0000B6   540F         ANL     A,#0xf
   \   0000B8   F0           MOVX    @DPTR,A
   \   0000B9   A3           INC     DPTR
   \   0000BA   E0           MOVX    A,@DPTR
   \   0000BB   54FF         ANL     A,#0xff
   \   0000BD   F0           MOVX    @DPTR,A
   \   0000BE   90....       MOV     DPTR,#ZDO_Config_Power_Descriptor
   \   0000C1   E0           MOVX    A,@DPTR
   \   0000C2   4420         ORL     A,#0x20
   \   0000C4   F0           MOVX    @DPTR,A
   \   0000C5   A3           INC     DPTR
   \   0000C6   E0           MOVX    A,@DPTR
   \   0000C7   4400         ORL     A,#0x0
   \   0000C9   F0           MOVX    @DPTR,A
    195              ZDO_Config_Power_Descriptor.CurrentPowerSource = NODEAVAILPWR_RECHARGE;
   \   0000CA   90....       MOV     DPTR,#ZDO_Config_Power_Descriptor
   \   0000CD   E0           MOVX    A,@DPTR
   \   0000CE   54FF         ANL     A,#0xff
   \   0000D0   F0           MOVX    @DPTR,A
   \   0000D1   A3           INC     DPTR
   \   0000D2   E0           MOVX    A,@DPTR
   \   0000D3   54F0         ANL     A,#0xf0
   \   0000D5   F0           MOVX    @DPTR,A
   \   0000D6   90....       MOV     DPTR,#ZDO_Config_Power_Descriptor
   \   0000D9   E0           MOVX    A,@DPTR
   \   0000DA   4400         ORL     A,#0x0
   \   0000DC   F0           MOVX    @DPTR,A
   \   0000DD   A3           INC     DPTR
   \   0000DE   E0           MOVX    A,@DPTR
   \   0000DF   4402         ORL     A,#0x2
   \   0000E1   F0           MOVX    @DPTR,A
    196              ZDO_Config_Power_Descriptor.CurrentPowerSourceLevel = NODEPOWER_LEVEL_66;
   \   0000E2   90....       MOV     DPTR,#ZDO_Config_Power_Descriptor
   \   0000E5   E0           MOVX    A,@DPTR
   \   0000E6   54FF         ANL     A,#0xff
   \   0000E8   F0           MOVX    @DPTR,A
   \   0000E9   A3           INC     DPTR
   \   0000EA   E0           MOVX    A,@DPTR
   \   0000EB   540F         ANL     A,#0xf
   \   0000ED   F0           MOVX    @DPTR,A
   \   0000EE   90....       MOV     DPTR,#ZDO_Config_Power_Descriptor
   \   0000F1   E0           MOVX    A,@DPTR
   \   0000F2   4400         ORL     A,#0x0
   \   0000F4   F0           MOVX    @DPTR,A
   \   0000F5   A3           INC     DPTR
   \   0000F6   E0           MOVX    A,@DPTR
   \   0000F7   4480         ORL     A,#0x80
   \   0000F9   F0           MOVX    @DPTR,A
    197            }
    198          }
   \                     ??ZDConfig_UpdatePowerDescriptor_2:
   \   0000FA   D083         POP     DPH
   \   0000FC   D082         POP     DPL
   \   0000FE   02....       LJMP    ?BRET

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDConfig_InitDescriptors::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDConfig_InitDescriptors

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDConfig_UpdateNodeDescriptor::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDConfig_UpdateNodeDescriptor

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDConfig_UpdatePowerDescriptor::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDConfig_UpdatePowerDescriptor
    199          
    200          /*********************************************************************
    201          *********************************************************************/
    202          
    203          

   Maximum stack usage in bytes:

   ISTACK Function
   ------ --------
      2   ZDConfig_InitDescriptors
        2   -> ZDConfig_UpdateNodeDescriptor
        2   -> ZDConfig_UpdatePowerDescriptor
      2   ZDConfig_UpdateNodeDescriptor
      2   ZDConfig_UpdatePowerDescriptor


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      17  ZDConfig_InitDescriptors
       6  ZDConfig_InitDescriptors::?relay
     227  ZDConfig_UpdateNodeDescriptor
       6  ZDConfig_UpdateNodeDescriptor::?relay
     257  ZDConfig_UpdatePowerDescriptor
       6  ZDConfig_UpdatePowerDescriptor::?relay
      13  ZDO_Config_Node_Descriptor
       2  ZDO_Config_Power_Descriptor

 
 501 bytes in segment BANKED_CODE
  18 bytes in segment BANK_RELAYS
  15 bytes in segment XDATA_Z
 
 519 bytes of CODE  memory
  15 bytes of XDATA memory

Errors: none
Warnings: none

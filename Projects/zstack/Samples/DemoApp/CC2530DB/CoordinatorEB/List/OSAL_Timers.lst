###############################################################################
#
# IAR C/C++ Compiler V9.20.1.2476 for 8051                22/Feb/2017  14:31:43
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\koen\ZigBee-Code-WTWS\Components\osal\common\OSAL_Timers.c
#    Command line       =  
#        -f
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00002000 -DZDAPP_CONFIG_PAN_ID=0xABCD
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={'H', 'O', 'G', 'E', 'S',
#        'C', 'H', 'O', 'O', 'L', 'U', 'T', 'R', 'E', 'C', 'H'}"
#        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440
#        C:\Users\koen\ZigBee-Code-WTWS\Components\osal\common\OSAL_Timers.c -D
#        HOLD_AUTO_START -D BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D
#        NV_RESTORE -D HAL_UART=TRUE -lC
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\
#        -lA
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\
#        --diag_suppress Pe001,Pa010,Pe1665 -o
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\Obj\
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\Source\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ol --require_prototypes
#    List file          =  
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\OSAL_Timers.lst
#    Object file        =  
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\Obj\OSAL_Timers.r51
#
###############################################################################

C:\Users\koen\ZigBee-Code-WTWS\Components\osal\common\OSAL_Timers.c
      1          /**************************************************************************************************
      2            Filename:       OSAL_Timers.c
      3            Revised:        $Date: 2012-11-28 00:37:02 -0800 (Wed, 28 Nov 2012) $
      4            Revision:       $Revision: 32329 $
      5          
      6            Description:    OSAL Timer definition and manipulation functions.
      7          
      8          
      9            Copyright 2004-2012 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "comdef.h"
     45          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1
     46          #include "OSAL.h"
     47          #include "OSAL_Timers.h"
     48          #include "hal_timer.h"
     49          
     50          /*********************************************************************
     51           * MACROS
     52           */
     53          
     54          /*********************************************************************
     55           * CONSTANTS
     56           */
     57          
     58          /*********************************************************************
     59           * TYPEDEFS
     60           */
     61          
     62          typedef union {
     63            uint32 time32;
     64            uint16 time16[2];
     65            uint8 time8[4];
     66          } osalTime_t;
     67          
     68          typedef struct
     69          {
     70            void   *next;
     71            osalTime_t timeout;
     72            uint16 event_flag;
     73            uint8  task_id;
     74            uint32 reloadTimeout;
     75          } osalTimerRec_t;
     76          
     77          /*********************************************************************
     78           * GLOBAL VARIABLES
     79           */
     80          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     81          osalTimerRec_t *timerHead;
   \                     timerHead:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     82          
     83          /*********************************************************************
     84           * EXTERNAL VARIABLES
     85           */
     86          
     87          /*********************************************************************
     88           * EXTERNAL FUNCTIONS
     89           */
     90          
     91          /*********************************************************************
     92           * LOCAL VARIABLES
     93           */
     94          // Milliseconds since last reboot

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     95          static uint32 osal_systemClock;
   \                     osal_systemClock:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
     96          
     97          /*********************************************************************
     98           * LOCAL FUNCTION PROTOTYPES
     99           */
    100          osalTimerRec_t  *osalAddTimer( uint8 task_id, uint16 event_flag, uint32 timeout );
    101          osalTimerRec_t *osalFindTimer( uint8 task_id, uint16 event_flag );
    102          void osalDeleteTimer( osalTimerRec_t *rmTimer );
    103          
    104          /*********************************************************************
    105           * FUNCTIONS
    106           *********************************************************************/
    107          
    108          /*********************************************************************
    109           * @fn      osalTimerInit
    110           *
    111           * @brief   Initialization for the OSAL Timer System.
    112           *
    113           * @param   none
    114           *
    115           * @return
    116           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    117          void osalTimerInit( void )
   \                     osalTimerInit:
    118          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    119            osal_systemClock = 0;
   \   000005   7C00         MOV     R4,#0x0
   \   000007   7D00         MOV     R5,#0x0
   \   000009   7E00         MOV     R6,#0x0
   \   00000B   7F00         MOV     R7,#0x0
   \   00000D   90....       MOV     DPTR,#osal_systemClock
   \   000010   EC           MOV     A,R4
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   ED           MOV     A,R5
   \   000014   F0           MOVX    @DPTR,A
   \   000015   A3           INC     DPTR
   \   000016   EE           MOV     A,R6
   \   000017   F0           MOVX    @DPTR,A
   \   000018   A3           INC     DPTR
   \   000019   EF           MOV     A,R7
   \   00001A   F0           MOVX    @DPTR,A
    120          }
   \   00001B   7F01         MOV     R7,#0x1
   \   00001D   02....       LJMP    ?BANKED_LEAVE_XDATA
    121          
    122          /*********************************************************************
    123           * @fn      osalAddTimer
    124           *
    125           * @brief   Add a timer to the timer list.
    126           *          Ints must be disabled.
    127           *
    128           * @param   task_id
    129           * @param   event_flag
    130           * @param   timeout
    131           *
    132           * @return  osalTimerRec_t * - pointer to newly created timer
    133           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    134          osalTimerRec_t * osalAddTimer( uint8 task_id, uint16 event_flag, uint32 timeout )
   \                     osalAddTimer:
    135          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
    136            osalTimerRec_t *newTimer;
    137            osalTimerRec_t *srchTimer;
    138          
    139            // Look for an existing timer first
    140            newTimer = osalFindTimer( task_id, event_flag );
   \   00000B                ; Setup parameters for call to function osalFindTimer
   \   00000B   EE           MOV     A,R6
   \   00000C   FA           MOV     R2,A
   \   00000D   EF           MOV     A,R7
   \   00000E   FB           MOV     R3,A
   \   00000F   A9..         MOV     R1,?V0
   \   000011   12....       LCALL   `??osalFindTimer::?relay`; Banked call to: osalFindTimer
   \   000014   8A..         MOV     ?V2,R2
   \   000016   8B..         MOV     ?V3,R3
   \   000018   AA..         MOV     R2,?V2
   \   00001A   AB..         MOV     R3,?V3
   \   00001C   7410         MOV     A,#0x10
   \   00001E   12....       LCALL   ?XSTACK_DISP0_8
   \   000021   78..         MOV     R0,#?V4
   \   000023   12....       LCALL   ?L_MOV_X
    141            if ( newTimer )
   \   000026   EA           MOV     A,R2
   \   000027   4B           ORL     A,R3
   \   000028   600E         JZ      ??osalAddTimer_0
    142            {
    143              // Timer is found - update it.
    144              newTimer->timeout.time32 = timeout;
   \   00002A   8A82         MOV     DPL,R2
   \   00002C   8B83         MOV     DPH,R3
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   78..         MOV     R0,#?V4
   \   000032   12....       LCALL   ?L_MOV_TO_X
    145          
    146              return ( newTimer );
   \   000035   02....       LJMP    ??osalAddTimer_1 & 0xFFFF
    147            }
    148            else
    149            {
    150              // New Timer
    151              newTimer = osal_mem_alloc( sizeof( osalTimerRec_t ) );
   \                     ??osalAddTimer_0:
   \   000038                ; Setup parameters for call to function osal_mem_alloc
   \   000038   7A0D         MOV     R2,#0xd
   \   00003A   7B00         MOV     R3,#0x0
   \   00003C   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00003F   8A..         MOV     ?V2,R2
   \   000041   8B..         MOV     ?V3,R3
   \   000043   AA..         MOV     R2,?V2
   \   000045   AB..         MOV     R3,?V3
    152          
    153              if ( newTimer )
   \   000047   EA           MOV     A,R2
   \   000048   4B           ORL     A,R3
   \   000049   7003         JNZ     $+5
   \   00004B   02....       LJMP    ??osalAddTimer_2 & 0xFFFF
    154              {
    155                // Fill in new timer
    156                newTimer->task_id = task_id;
   \   00004E   E5..         MOV     A,?V0
   \   000050   C0E0         PUSH    A
   \   000052   8A82         MOV     DPL,R2
   \   000054   8B83         MOV     DPH,R3
   \   000056   A3           INC     DPTR
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   D0E0         POP     A
   \   000060   F0           MOVX    @DPTR,A
    157                newTimer->event_flag = event_flag;
   \   000061   8A82         MOV     DPL,R2
   \   000063   8B83         MOV     DPH,R3
   \   000065   A3           INC     DPTR
   \   000066   A3           INC     DPTR
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   EE           MOV     A,R6
   \   00006C   F0           MOVX    @DPTR,A
   \   00006D   A3           INC     DPTR
   \   00006E   EF           MOV     A,R7
   \   00006F   F0           MOVX    @DPTR,A
    158                newTimer->timeout.time32 = timeout;
   \   000070   8A82         MOV     DPL,R2
   \   000072   8B83         MOV     DPH,R3
   \   000074   A3           INC     DPTR
   \   000075   A3           INC     DPTR
   \   000076   78..         MOV     R0,#?V4
   \   000078   12....       LCALL   ?L_MOV_TO_X
    159                newTimer->next = (void *)NULL;
   \   00007B   8A82         MOV     DPL,R2
   \   00007D   8B83         MOV     DPH,R3
   \   00007F   7400         MOV     A,#0x0
   \   000081   F0           MOVX    @DPTR,A
   \   000082   A3           INC     DPTR
   \   000083   7400         MOV     A,#0x0
   \   000085   F0           MOVX    @DPTR,A
    160                newTimer->reloadTimeout = 0;
   \   000086   7C00         MOV     R4,#0x0
   \   000088   7D00         MOV     R5,#0x0
   \   00008A   7E00         MOV     R6,#0x0
   \   00008C   7F00         MOV     R7,#0x0
   \   00008E   8A82         MOV     DPL,R2
   \   000090   8B83         MOV     DPH,R3
   \   000092   A3           INC     DPTR
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   A3           INC     DPTR
   \   00009A   A3           INC     DPTR
   \   00009B   EC           MOV     A,R4
   \   00009C   F0           MOVX    @DPTR,A
   \   00009D   A3           INC     DPTR
   \   00009E   ED           MOV     A,R5
   \   00009F   F0           MOVX    @DPTR,A
   \   0000A0   A3           INC     DPTR
   \   0000A1   EE           MOV     A,R6
   \   0000A2   F0           MOVX    @DPTR,A
   \   0000A3   A3           INC     DPTR
   \   0000A4   EF           MOV     A,R7
   \   0000A5   F0           MOVX    @DPTR,A
    161          
    162                // Does the timer list already exist
    163                if ( timerHead == NULL )
   \   0000A6   90....       MOV     DPTR,#timerHead
   \   0000A9   E0           MOVX    A,@DPTR
   \   0000AA   F8           MOV     R0,A
   \   0000AB   A3           INC     DPTR
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   F9           MOV     R1,A
   \   0000AE   E8           MOV     A,R0
   \   0000AF   49           ORL     A,R1
   \   0000B0   700A         JNZ     ??osalAddTimer_3
    164                {
    165                  // Start task list
    166                  timerHead = newTimer;
   \   0000B2   90....       MOV     DPTR,#timerHead
   \   0000B5   EA           MOV     A,R2
   \   0000B6   F0           MOVX    @DPTR,A
   \   0000B7   A3           INC     DPTR
   \   0000B8   EB           MOV     A,R3
   \   0000B9   F0           MOVX    @DPTR,A
   \   0000BA   802F         SJMP    ??osalAddTimer_1
    167                }
    168                else
    169                {
    170                  // Add it to the end of the timer list
    171                  srchTimer = timerHead;
   \                     ??osalAddTimer_3:
   \   0000BC   90....       MOV     DPTR,#timerHead
   \   0000BF   E0           MOVX    A,@DPTR
   \   0000C0   F8           MOV     R0,A
   \   0000C1   A3           INC     DPTR
   \   0000C2   E0           MOVX    A,@DPTR
   \   0000C3   F9           MOV     R1,A
   \   0000C4   8009         SJMP    ??osalAddTimer_4
    172          
    173                  // Stop at the last record
    174                  while ( srchTimer->next )
    175                    srchTimer = srchTimer->next;
   \                     ??osalAddTimer_5:
   \   0000C6   8882         MOV     DPL,R0
   \   0000C8   8983         MOV     DPH,R1
   \   0000CA   E0           MOVX    A,@DPTR
   \   0000CB   F8           MOV     R0,A
   \   0000CC   A3           INC     DPTR
   \   0000CD   E0           MOVX    A,@DPTR
   \   0000CE   F9           MOV     R1,A
   \                     ??osalAddTimer_4:
   \   0000CF   8882         MOV     DPL,R0
   \   0000D1   8983         MOV     DPH,R1
   \   0000D3   E0           MOVX    A,@DPTR
   \   0000D4   FC           MOV     R4,A
   \   0000D5   A3           INC     DPTR
   \   0000D6   E0           MOVX    A,@DPTR
   \   0000D7   FD           MOV     R5,A
   \   0000D8   EC           MOV     A,R4
   \   0000D9   4D           ORL     A,R5
   \   0000DA   70EA         JNZ     ??osalAddTimer_5
    176          
    177                  // Add to the list
    178                  srchTimer->next = newTimer;
   \   0000DC   8882         MOV     DPL,R0
   \   0000DE   8983         MOV     DPH,R1
   \   0000E0   EA           MOV     A,R2
   \   0000E1   F0           MOVX    @DPTR,A
   \   0000E2   A3           INC     DPTR
   \   0000E3   EB           MOV     A,R3
   \   0000E4   F0           MOVX    @DPTR,A
    179                }
    180          
    181                return ( newTimer );
   \   0000E5   8004         SJMP    ??osalAddTimer_1
    182              }
    183              else
    184              {
    185                return ( (osalTimerRec_t *)NULL );
   \                     ??osalAddTimer_2:
   \   0000E7   7A00         MOV     R2,#0x0
   \   0000E9   7B00         MOV     R3,#0x0
   \                     ??osalAddTimer_1:
   \   0000EB   7F08         MOV     R7,#0x8
   \   0000ED   02....       LJMP    ?BANKED_LEAVE_XDATA
    186              }
    187            }
    188          }
    189          
    190          /*********************************************************************
    191           * @fn      osalFindTimer
    192           *
    193           * @brief   Find a timer in a timer list.
    194           *          Ints must be disabled.
    195           *
    196           * @param   task_id
    197           * @param   event_flag
    198           *
    199           * @return  osalTimerRec_t *
    200           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    201          osalTimerRec_t *osalFindTimer( uint8 task_id, uint16 event_flag )
   \                     osalFindTimer:
    202          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    203            osalTimerRec_t *srchTimer;
    204          
    205            // Head of the timer list
    206            srchTimer = timerHead;
   \   000004   90....       MOV     DPTR,#timerHead
   \   000007   E0           MOVX    A,@DPTR
   \   000008   FC           MOV     R4,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   FD           MOV     R5,A
   \   00000C   8009         SJMP    ??osalFindTimer_0
    207          
    208            // Stop when found or at the end
    209            while ( srchTimer )
    210            {
    211              if ( srchTimer->event_flag == event_flag &&
    212                   srchTimer->task_id == task_id )
    213              {
    214                break;
    215              }
    216          
    217              // Not this one, check another
    218              srchTimer = srchTimer->next;
   \                     ??osalFindTimer_1:
   \   00000E   8C82         MOV     DPL,R4
   \   000010   8D83         MOV     DPH,R5
   \   000012   E0           MOVX    A,@DPTR
   \   000013   FC           MOV     R4,A
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   FD           MOV     R5,A
   \                     ??osalFindTimer_0:
   \   000017   EC           MOV     A,R4
   \   000018   4D           ORL     A,R5
   \   000019   6023         JZ      ??osalFindTimer_2
   \   00001B   8C82         MOV     DPL,R4
   \   00001D   8D83         MOV     DPH,R5
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   6A           XRL     A,R2
   \   000027   7003         JNZ     ??osalFindTimer_3
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   6B           XRL     A,R3
   \                     ??osalFindTimer_3:
   \   00002C   70E0         JNZ     ??osalFindTimer_1
   \   00002E   8C82         MOV     DPL,R4
   \   000030   8D83         MOV     DPH,R5
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   69           XRL     A,R1
   \   00003C   70D0         JNZ     ??osalFindTimer_1
    219            }
    220          
    221            return ( srchTimer );
   \                     ??osalFindTimer_2:
   \   00003E   EC           MOV     A,R4
   \   00003F   FA           MOV     R2,A
   \   000040   ED           MOV     A,R5
   \   000041   FB           MOV     R3,A
   \   000042   D083         POP     DPH
   \   000044   D082         POP     DPL
   \   000046   02....       LJMP    ?BRET
    222          }
    223          
    224          /*********************************************************************
    225           * @fn      osalDeleteTimer
    226           *
    227           * @brief   Delete a timer from a timer list.
    228           *
    229           * @param   table
    230           * @param   rmTimer
    231           *
    232           * @return  none
    233           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    234          void osalDeleteTimer( osalTimerRec_t *rmTimer )
   \                     osalDeleteTimer:
    235          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    236            // Does the timer list really exist
    237            if ( rmTimer )
   \   000004   EA           MOV     A,R2
   \   000005   4B           ORL     A,R3
   \   000006   6011         JZ      ??osalDeleteTimer_0
    238            {
    239              // Clear the event flag and osalTimerUpdate() will delete
    240              // the timer from the list.
    241              rmTimer->event_flag = 0;
   \   000008   8A82         MOV     DPL,R2
   \   00000A   8B83         MOV     DPH,R3
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   7400         MOV     A,#0x0
   \   000014   F0           MOVX    @DPTR,A
   \   000015   A3           INC     DPTR
   \   000016   7400         MOV     A,#0x0
   \   000018   F0           MOVX    @DPTR,A
    242            }
    243          }
   \                     ??osalDeleteTimer_0:
   \   000019   D083         POP     DPH
   \   00001B   D082         POP     DPL
   \   00001D   02....       LJMP    ?BRET
    244          
    245          /*********************************************************************
    246           * @fn      osal_start_timerEx
    247           *
    248           * @brief
    249           *
    250           *   This function is called to start a timer to expire in n mSecs.
    251           *   When the timer expires, the calling task will get the specified event.
    252           *
    253           * @param   uint8 taskID - task id to set timer for
    254           * @param   uint16 event_id - event to be notified with
    255           * @param   uint32 timeout_value - in milliseconds.
    256           *
    257           * @return  SUCCESS, or NO_TIMER_AVAIL.
    258           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    259          uint8 osal_start_timerEx( uint8 taskID, uint16 event_id, uint32 timeout_value )
   \                     osal_start_timerEx:
    260          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
    261            halIntState_t intState;
    262            osalTimerRec_t *newTimer;
    263          
    264            HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \   000007   A2AF         MOV     C,0xa8.7
   \   000009   E4           CLR     A
   \   00000A   33           RLC     A
   \   00000B   FE           MOV     R6,A
   \   00000C   C2AF         CLR     0xa8.7
    265          
    266            // Add timer
    267            newTimer = osalAddTimer( taskID, event_id, timeout_value );
   \   00000E                ; Setup parameters for call to function osalAddTimer
   \   00000E   740A         MOV     A,#0xa
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000016   EF           MOV     A,R7
   \   000017   F9           MOV     R1,A
   \   000018   12....       LCALL   `??osalAddTimer::?relay`; Banked call to: osalAddTimer
   \   00001B   7404         MOV     A,#0x4
   \   00001D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000020   8A..         MOV     ?V0,R2
   \   000022   8B..         MOV     ?V1,R3
   \   000024   A8..         MOV     R0,?V0
   \   000026   A9..         MOV     R1,?V1
    268          
    269            HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \   000028   EE           MOV     A,R6
   \   000029   FA           MOV     R2,A
   \   00002A   EE           MOV     A,R6
   \   00002B   A2E0         MOV     C,0xE0 /* A   */.0
   \   00002D   92AF         MOV     0xa8.7,C
    270          
    271            return ( (newTimer != NULL) ? SUCCESS : NO_TIMER_AVAIL );
   \   00002F   E8           MOV     A,R0
   \   000030   49           ORL     A,R1
   \   000031   6004         JZ      ??osal_start_timerEx_0
   \   000033   7900         MOV     R1,#0x0
   \   000035   8002         SJMP    ??osal_start_timerEx_1
   \                     ??osal_start_timerEx_0:
   \   000037   7908         MOV     R1,#0x8
   \                     ??osal_start_timerEx_1:
   \   000039   7F02         MOV     R7,#0x2
   \   00003B   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   00003E                REQUIRE _A_IEN0
    272          }
    273          
    274          /*********************************************************************
    275           * @fn      osal_start_reload_timer
    276           *
    277           * @brief
    278           *
    279           *   This function is called to start a timer to expire in n mSecs.
    280           *   When the timer expires, the calling task will get the specified event
    281           *   and the timer will be reloaded with the timeout value.
    282           *
    283           * @param   uint8 taskID - task id to set timer for
    284           * @param   uint16 event_id - event to be notified with
    285           * @param   UNINT16 timeout_value - in milliseconds.
    286           *
    287           * @return  SUCCESS, or NO_TIMER_AVAIL.
    288           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    289          uint8 osal_start_reload_timer( uint8 taskID, uint16 event_id, uint32 timeout_value )
   \                     osal_start_reload_timer:
    290          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
    291            halIntState_t intState;
    292            osalTimerRec_t *newTimer;
    293          
    294            HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \   000007   A2AF         MOV     C,0xa8.7
   \   000009   E4           CLR     A
   \   00000A   33           RLC     A
   \   00000B   FE           MOV     R6,A
   \   00000C   C2AF         CLR     0xa8.7
   \   00000E   740E         MOV     A,#0xe
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   78..         MOV     R0,#?V0
   \   000015   12....       LCALL   ?L_MOV_X
    295          
    296            // Add timer
    297            newTimer = osalAddTimer( taskID, event_id, timeout_value );
   \   000018                ; Setup parameters for call to function osalAddTimer
   \   000018   78..         MOV     R0,#?V0
   \   00001A   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   00001D   EF           MOV     A,R7
   \   00001E   F9           MOV     R1,A
   \   00001F   12....       LCALL   `??osalAddTimer::?relay`; Banked call to: osalAddTimer
   \   000022   7404         MOV     A,#0x4
   \   000024   12....       LCALL   ?DEALLOC_XSTACK8
   \   000027   8A..         MOV     ?V4,R2
   \   000029   8B..         MOV     ?V5,R3
   \   00002B   AA..         MOV     R2,?V4
   \   00002D   AB..         MOV     R3,?V5
    298            if ( newTimer )
   \   00002F   EA           MOV     A,R2
   \   000030   4B           ORL     A,R3
   \   000031   6012         JZ      ??osal_start_reload_timer_0
    299            {
    300              // Load the reload timeout value
    301              newTimer->reloadTimeout = timeout_value;
   \   000033   8A82         MOV     DPL,R2
   \   000035   8B83         MOV     DPH,R3
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   A3           INC     DPTR
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   78..         MOV     R0,#?V0
   \   000042   12....       LCALL   ?L_MOV_TO_X
    302            }
    303          
    304            HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \                     ??osal_start_reload_timer_0:
   \   000045   EE           MOV     A,R6
   \   000046   F8           MOV     R0,A
   \   000047   EE           MOV     A,R6
   \   000048   A2E0         MOV     C,0xE0 /* A   */.0
   \   00004A   92AF         MOV     0xa8.7,C
    305          
    306            return ( (newTimer != NULL) ? SUCCESS : NO_TIMER_AVAIL );
   \   00004C   EA           MOV     A,R2
   \   00004D   4B           ORL     A,R3
   \   00004E   6004         JZ      ??osal_start_reload_timer_1
   \   000050   7900         MOV     R1,#0x0
   \   000052   8002         SJMP    ??osal_start_reload_timer_2
   \                     ??osal_start_reload_timer_1:
   \   000054   7908         MOV     R1,#0x8
   \                     ??osal_start_reload_timer_2:
   \   000056   7F06         MOV     R7,#0x6
   \   000058   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   00005B                REQUIRE _A_IEN0
    307          }
    308          
    309          /*********************************************************************
    310           * @fn      osal_stop_timerEx
    311           *
    312           * @brief
    313           *
    314           *   This function is called to stop a timer that has already been started.
    315           *   If ZSUCCESS, the function will cancel the timer and prevent the event
    316           *   associated with the timer from being set for the calling task.
    317           *
    318           * @param   uint8 task_id - task id of timer to stop
    319           * @param   uint16 event_id - identifier of the timer that is to be stopped
    320           *
    321           * @return  SUCCESS or INVALID_EVENT_ID
    322           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    323          uint8 osal_stop_timerEx( uint8 task_id, uint16 event_id )
   \                     osal_stop_timerEx:
    324          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V1,R1
    325            halIntState_t intState;
    326            osalTimerRec_t *foundTimer;
    327          
    328            HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \   000007   A2AF         MOV     C,0xa8.7
   \   000009   E4           CLR     A
   \   00000A   33           RLC     A
   \   00000B   F5..         MOV     ?V0,A
   \   00000D   C2AF         CLR     0xa8.7
    329          
    330            // Find the timer to stop
    331            foundTimer = osalFindTimer( task_id, event_id );
   \   00000F                ; Setup parameters for call to function osalFindTimer
   \   00000F   A9..         MOV     R1,?V1
   \   000011   12....       LCALL   `??osalFindTimer::?relay`; Banked call to: osalFindTimer
   \   000014   8A..         MOV     ?V2,R2
   \   000016   8B..         MOV     ?V3,R3
   \   000018   AE..         MOV     R6,?V2
   \   00001A   AF..         MOV     R7,?V3
    332            if ( foundTimer )
   \   00001C   EE           MOV     A,R6
   \   00001D   4F           ORL     A,R7
   \   00001E   6007         JZ      ??osal_stop_timerEx_0
    333            {
    334              osalDeleteTimer( foundTimer );
   \   000020                ; Setup parameters for call to function osalDeleteTimer
   \   000020   EE           MOV     A,R6
   \   000021   FA           MOV     R2,A
   \   000022   EF           MOV     A,R7
   \   000023   FB           MOV     R3,A
   \   000024   12....       LCALL   `??osalDeleteTimer::?relay`; Banked call to: osalDeleteTimer
    335            }
    336          
    337            HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \                     ??osal_stop_timerEx_0:
   \   000027   A8..         MOV     R0,?V0
   \   000029   E5..         MOV     A,?V0
   \   00002B   A2E0         MOV     C,0xE0 /* A   */.0
   \   00002D   92AF         MOV     0xa8.7,C
    338          
    339            return ( (foundTimer != NULL) ? SUCCESS : INVALID_EVENT_ID );
   \   00002F   EE           MOV     A,R6
   \   000030   4F           ORL     A,R7
   \   000031   6004         JZ      ??osal_stop_timerEx_1
   \   000033   7900         MOV     R1,#0x0
   \   000035   8002         SJMP    ??osal_stop_timerEx_2
   \                     ??osal_stop_timerEx_1:
   \   000037   7906         MOV     R1,#0x6
   \                     ??osal_stop_timerEx_2:
   \   000039   7F04         MOV     R7,#0x4
   \   00003B   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   00003E                REQUIRE _A_IEN0
    340          }
    341          
    342          /*********************************************************************
    343           * @fn      osal_get_timeoutEx
    344           *
    345           * @brief
    346           *
    347           * @param   uint8 task_id - task id of timer to check
    348           * @param   uint16 event_id - identifier of timer to be checked
    349           *
    350           * @return  Return the timer's tick count if found, zero otherwise.
    351           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    352          uint32 osal_get_timeoutEx( uint8 task_id, uint16 event_id )
   \                     osal_get_timeoutEx:
    353          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
    354            halIntState_t intState;
    355            uint32 rtrn = 0;
   \   000007   75..00       MOV     ?V0,#0x0
   \   00000A   75..00       MOV     ?V1,#0x0
   \   00000D   75..00       MOV     ?V2,#0x0
   \   000010   75..00       MOV     ?V3,#0x0
    356            osalTimerRec_t *tmr;
    357          
    358            HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \   000013   A2AF         MOV     C,0xa8.7
   \   000015   E4           CLR     A
   \   000016   33           RLC     A
   \   000017   FE           MOV     R6,A
   \   000018   C2AF         CLR     0xa8.7
    359          
    360            tmr = osalFindTimer( task_id, event_id );
   \   00001A                ; Setup parameters for call to function osalFindTimer
   \   00001A   EF           MOV     A,R7
   \   00001B   F9           MOV     R1,A
   \   00001C   12....       LCALL   `??osalFindTimer::?relay`; Banked call to: osalFindTimer
   \   00001F   8A..         MOV     ?V4,R2
   \   000021   8B..         MOV     ?V5,R3
   \   000023   85..82       MOV     DPL,?V4
   \   000026   85..83       MOV     DPH,?V5
    361          
    362            if ( tmr )
   \   000029   E582         MOV     A,DPL
   \   00002B   4583         ORL     A,DPH
   \   00002D   6007         JZ      ??osal_get_timeoutEx_0
    363            {
    364              rtrn = tmr->timeout.time32;
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   78..         MOV     R0,#?V0
   \   000033   12....       LCALL   ?L_MOV_X
    365            }
    366          
    367            HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \                     ??osal_get_timeoutEx_0:
   \   000036   EE           MOV     A,R6
   \   000037   F8           MOV     R0,A
   \   000038   EE           MOV     A,R6
   \   000039   A2E0         MOV     C,0xE0 /* A   */.0
   \   00003B   92AF         MOV     0xa8.7,C
    368          
    369            return rtrn;
   \   00003D   AA..         MOV     R2,?V0
   \   00003F   AB..         MOV     R3,?V1
   \   000041   AC..         MOV     R4,?V2
   \   000043   AD..         MOV     R5,?V3
   \   000045   7F06         MOV     R7,#0x6
   \   000047   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   00004A                REQUIRE _A_IEN0
    370          }
    371          
    372          /*********************************************************************
    373           * @fn      osal_timer_num_active
    374           *
    375           * @brief
    376           *
    377           *   This function counts the number of active timers.
    378           *
    379           * @return  uint8 - number of timers
    380           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    381          uint8 osal_timer_num_active( void )
   \                     osal_timer_num_active:
    382          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    383            halIntState_t intState;
    384            uint8 num_timers = 0;
   \   000004   7900         MOV     R1,#0x0
    385            osalTimerRec_t *srchTimer;
    386          
    387            HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \   000006   A2AF         MOV     C,0xa8.7
   \   000008   E4           CLR     A
   \   000009   33           RLC     A
   \   00000A   F8           MOV     R0,A
   \   00000B   C2AF         CLR     0xa8.7
    388          
    389            // Head of the timer list
    390            srchTimer = timerHead;
   \   00000D   90....       MOV     DPTR,#timerHead
   \   000010   E0           MOVX    A,@DPTR
   \   000011   FA           MOV     R2,A
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   FB           MOV     R3,A
   \   000015   8A82         MOV     DPL,R2
   \   000017   8B83         MOV     DPH,R3
   \   000019   800A         SJMP    ??osal_timer_num_active_0
    391          
    392            // Count timers in the list
    393            while ( srchTimer != NULL )
    394            {
    395              num_timers++;
   \                     ??osal_timer_num_active_1:
   \   00001B   09           INC     R1
    396              srchTimer = srchTimer->next;
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   FA           MOV     R2,A
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   FB           MOV     R3,A
   \   000021   8A82         MOV     DPL,R2
   \   000023   8B83         MOV     DPH,R3
    397            }
   \                     ??osal_timer_num_active_0:
   \   000025   E582         MOV     A,DPL
   \   000027   4583         ORL     A,DPH
   \   000029   70F0         JNZ     ??osal_timer_num_active_1
    398          
    399            HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \   00002B   E8           MOV     A,R0
   \   00002C   FA           MOV     R2,A
   \   00002D   E8           MOV     A,R0
   \   00002E   A2E0         MOV     C,0xE0 /* A   */.0
   \   000030   92AF         MOV     0xa8.7,C
    400          
    401            return num_timers;
   \   000032   D083         POP     DPH
   \   000034   D082         POP     DPL
   \   000036   02....       LJMP    ?BRET
   \   000039                REQUIRE _A_IEN0
    402          }
    403          
    404          /*********************************************************************
    405           * @fn      osalTimerUpdate
    406           *
    407           * @brief   Update the timer structures for a timer tick.
    408           *
    409           * @param   none
    410           *
    411           * @return  none
    412           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    413          void osalTimerUpdate( uint32 updateTime )
   \                     osalTimerUpdate:
    414          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000   74ED         MOV     A,#-0x13
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V4,R2
   \   00000C   8B..         MOV     ?V5,R3
   \   00000E   8C..         MOV     ?V6,R4
   \   000010   8D..         MOV     ?V7,R5
    415            halIntState_t intState;
    416            osalTimerRec_t *srchTimer;
    417            osalTimerRec_t *prevTimer;
    418          
    419            osalTime_t timeUnion;
    420            timeUnion.time32 = updateTime;
   \   000012   85..82       MOV     DPL,?XSP + 0
   \   000015   85..83       MOV     DPH,?XSP + 1
   \   000018   78..         MOV     R0,#?V4
   \   00001A   12....       LCALL   ?L_MOV_TO_X
    421          
    422            HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \   00001D   A2AF         MOV     C,0xa8.7
   \   00001F   E4           CLR     A
   \   000020   33           RLC     A
   \   000021   F5..         MOV     ?V0,A
   \   000023   C2AF         CLR     0xa8.7
    423            // Update the system time
    424            osal_systemClock += updateTime;
   \   000025   90....       MOV     DPTR,#osal_systemClock
   \   000028   78..         MOV     R0,#?V4
   \   00002A   12....       LCALL   ?L_ADD_TO_X
    425            HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \   00002D   85....       MOV     ?V10,?V0
   \   000030   E5..         MOV     A,?V0
   \   000032   A2E0         MOV     C,0xE0 /* A   */.0
   \   000034   92AF         MOV     0xa8.7,C
    426          
    427            // Look for open timer slot
    428            if ( timerHead != NULL )
   \   000036   90....       MOV     DPTR,#timerHead
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   F8           MOV     R0,A
   \   00003B   A3           INC     DPTR
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   F9           MOV     R1,A
   \   00003E   E8           MOV     A,R0
   \   00003F   49           ORL     A,R1
   \   000040   7003         JNZ     $+5
   \   000042   02....       LJMP    ??osalTimerUpdate_0 & 0xFFFF
    429            {
    430              // Add it to the end of the timer list
    431              srchTimer = timerHead;
   \   000045   90....       MOV     DPTR,#timerHead
   \   000048   E0           MOVX    A,@DPTR
   \   000049   FE           MOV     R6,A
   \   00004A   A3           INC     DPTR
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   FF           MOV     R7,A
    432              prevTimer = (void *)NULL;
   \   00004D   75..00       MOV     ?V8,#0x0
   \   000050   75..00       MOV     ?V9,#0x0
   \   000053   806C         SJMP    ??osalTimerUpdate_1
    433          
    434              // Look for open timer slot
    435              while ( srchTimer )
    436              {
    437                osalTimerRec_t *freeTimer = NULL;
    438          
    439                HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
    440          
    441                // To minimize time in this critical section, avoid 32-bit math
    442                if ((timeUnion.time16[1] == 0) && (timeUnion.time8[1] == 0))
    443                {
    444                  // If upper 24 bits are zero, check lower 8 bits for roll over
    445                  if (srchTimer->timeout.time8[0] >= timeUnion.time8[0])
    446                  {
    447                    // 8-bit math
    448                    srchTimer->timeout.time8[0] -= timeUnion.time8[0];
    449                  }
    450                  else
    451                  {
    452                    // 32-bit math
    453                    if (srchTimer->timeout.time32 > timeUnion.time32)
    454                    {
    455                      srchTimer->timeout.time32 -= timeUnion.time32;
    456                    }
    457                    else
    458                    {
    459                      srchTimer->timeout.time32 = 0;
    460                    }
    461                  }
    462                }
    463                else
    464                {
    465                    // 32-bit math
    466                  if (srchTimer->timeout.time32 > timeUnion.time32)
    467                  {
    468                    srchTimer->timeout.time32 -= timeUnion.time32;
    469                  }
    470                  else
    471                  {
    472                    srchTimer->timeout.time32 = 0;
    473                  }
    474                }
    475          
    476                // Check for reloading
    477                if ( (srchTimer->timeout.time16[0] == 0) && (srchTimer->timeout.time16[1] == 0) &&
    478                     (srchTimer->reloadTimeout) && (srchTimer->event_flag) )
    479                {
    480                  // Notify the task of a timeout
    481                  osal_set_event( srchTimer->task_id, srchTimer->event_flag );
    482          
    483                  // Reload the timer timeout value
    484                  srchTimer->timeout.time32 = srchTimer->reloadTimeout;
    485                }
    486          
    487                // When timeout or delete (event_flag == 0)
    488                if ( ((srchTimer->timeout.time16[0] == 0) && (srchTimer->timeout.time16[1] == 0)) ||
    489                      (srchTimer->event_flag == 0) )
    490                {
    491                  // Take out of list
    492                  if ( prevTimer == NULL )
    493                  {
    494                    timerHead = srchTimer->next;
    495                  }
    496                  else
    497                  {
    498                    prevTimer->next = srchTimer->next;
    499                  }
    500          
    501                  // Setup to free memory
    502                  freeTimer = srchTimer;
    503          
    504                  // Next
    505                  srchTimer = srchTimer->next;
    506                }
    507                else
    508                {
    509                  // Get next
    510                  prevTimer = srchTimer;
   \                     ??osalTimerUpdate_2:
   \   000055   8E..         MOV     ?V8,R6
   \   000057   8F..         MOV     ?V9,R7
    511                  srchTimer = srchTimer->next;
   \   000059   8E82         MOV     DPL,R6
   \   00005B   8F83         MOV     DPH,R7
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   FE           MOV     R6,A
   \   00005F   A3           INC     DPTR
   \   000060   E0           MOVX    A,@DPTR
   \   000061   FF           MOV     R7,A
    512                }
    513          
    514                HAL_EXIT_CRITICAL_SECTION( intState );   // Re-enable interrupts.
   \                     ??osalTimerUpdate_3:
   \   000062   85....       MOV     ?V1,?V0
   \   000065   E5..         MOV     A,?V0
   \   000067   A2E0         MOV     C,0xE0 /* A   */.0
   \   000069   92AF         MOV     0xa8.7,C
    515          
    516                if ( freeTimer )
   \   00006B   E5..         MOV     A,?V2
   \   00006D   45..         ORL     A,?V3
   \   00006F   6050         JZ      ??osalTimerUpdate_1
    517                {
    518                  if ( (freeTimer->timeout.time16[0] == 0) && (freeTimer->timeout.time16[1] == 0) )
   \   000071   85..82       MOV     DPL,?V2
   \   000074   85..83       MOV     DPH,?V3
   \   000077   A3           INC     DPTR
   \   000078   A3           INC     DPTR
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   F8           MOV     R0,A
   \   00007B   A3           INC     DPTR
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   F9           MOV     R1,A
   \   00007E   E8           MOV     A,R0
   \   00007F   49           ORL     A,R1
   \   000080   7038         JNZ     ??osalTimerUpdate_4
   \   000082   85..82       MOV     DPL,?V2
   \   000085   85..83       MOV     DPH,?V3
   \   000088   A3           INC     DPTR
   \   000089   A3           INC     DPTR
   \   00008A   A3           INC     DPTR
   \   00008B   A3           INC     DPTR
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   F8           MOV     R0,A
   \   00008E   A3           INC     DPTR
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   F9           MOV     R1,A
   \   000091   E8           MOV     A,R0
   \   000092   49           ORL     A,R1
   \   000093   7025         JNZ     ??osalTimerUpdate_4
    519                  {
    520                    osal_set_event( freeTimer->task_id, freeTimer->event_flag );
   \   000095                ; Setup parameters for call to function osal_set_event
   \   000095   85..82       MOV     DPL,?V2
   \   000098   85..83       MOV     DPH,?V3
   \   00009B   A3           INC     DPTR
   \   00009C   A3           INC     DPTR
   \   00009D   A3           INC     DPTR
   \   00009E   A3           INC     DPTR
   \   00009F   A3           INC     DPTR
   \   0000A0   A3           INC     DPTR
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   FA           MOV     R2,A
   \   0000A3   A3           INC     DPTR
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   FB           MOV     R3,A
   \   0000A6   85..82       MOV     DPL,?V2
   \   0000A9   85..83       MOV     DPH,?V3
   \   0000AC   A3           INC     DPTR
   \   0000AD   A3           INC     DPTR
   \   0000AE   A3           INC     DPTR
   \   0000AF   A3           INC     DPTR
   \   0000B0   A3           INC     DPTR
   \   0000B1   A3           INC     DPTR
   \   0000B2   A3           INC     DPTR
   \   0000B3   A3           INC     DPTR
   \   0000B4   E0           MOVX    A,@DPTR
   \   0000B5   F9           MOV     R1,A
   \   0000B6   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   0000B9   E9           MOV     A,R1
    521                  }
    522                  osal_mem_free( freeTimer );
   \                     ??osalTimerUpdate_4:
   \   0000BA                ; Setup parameters for call to function osal_mem_free
   \   0000BA   AA..         MOV     R2,?V2
   \   0000BC   AB..         MOV     R3,?V3
   \   0000BE   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    523                }
   \                     ??osalTimerUpdate_1:
   \   0000C1   EE           MOV     A,R6
   \   0000C2   4F           ORL     A,R7
   \   0000C3   7003         JNZ     $+5
   \   0000C5   02....       LJMP    ??osalTimerUpdate_0 & 0xFFFF
   \   0000C8   75..00       MOV     ?V2,#0x0
   \   0000CB   75..00       MOV     ?V3,#0x0
   \   0000CE   A2AF         MOV     C,0xa8.7
   \   0000D0   E4           CLR     A
   \   0000D1   33           RLC     A
   \   0000D2   F5..         MOV     ?V0,A
   \   0000D4   C2AF         CLR     0xa8.7
   \   0000D6   7402         MOV     A,#0x2
   \   0000D8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   F8           MOV     R0,A
   \   0000DD   A3           INC     DPTR
   \   0000DE   E0           MOVX    A,@DPTR
   \   0000DF   F9           MOV     R1,A
   \   0000E0   E8           MOV     A,R0
   \   0000E1   49           ORL     A,R1
   \   0000E2   707B         JNZ     ??osalTimerUpdate_5
   \   0000E4   7401         MOV     A,#0x1
   \   0000E6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E9   E0           MOVX    A,@DPTR
   \   0000EA   7073         JNZ     ??osalTimerUpdate_5
   \   0000EC   85..82       MOV     DPL,?XSP + 0
   \   0000EF   85..83       MOV     DPH,?XSP + 1
   \   0000F2   E0           MOVX    A,@DPTR
   \   0000F3   F8           MOV     R0,A
   \   0000F4   8E82         MOV     DPL,R6
   \   0000F6   8F83         MOV     DPH,R7
   \   0000F8   A3           INC     DPTR
   \   0000F9   A3           INC     DPTR
   \   0000FA   E0           MOVX    A,@DPTR
   \   0000FB   C3           CLR     C
   \   0000FC   98           SUBB    A,R0
   \   0000FD   4015         JC      ??osalTimerUpdate_6
   \   0000FF   85..82       MOV     DPL,?XSP + 0
   \   000102   85..83       MOV     DPH,?XSP + 1
   \   000105   E0           MOVX    A,@DPTR
   \   000106   F8           MOV     R0,A
   \   000107   8E82         MOV     DPL,R6
   \   000109   8F83         MOV     DPH,R7
   \   00010B   A3           INC     DPTR
   \   00010C   A3           INC     DPTR
   \   00010D   E0           MOVX    A,@DPTR
   \   00010E   C3           CLR     C
   \   00010F   98           SUBB    A,R0
   \   000110   F0           MOVX    @DPTR,A
   \   000111   02....       LJMP    ??osalTimerUpdate_7 & 0xFFFF
   \                     ??osalTimerUpdate_6:
   \   000114   8E82         MOV     DPL,R6
   \   000116   8F83         MOV     DPH,R7
   \   000118   A3           INC     DPTR
   \   000119   A3           INC     DPTR
   \   00011A   78..         MOV     R0,#?V4
   \   00011C   12....       LCALL   ?L_MOV_X
   \   00011F   85..82       MOV     DPL,?XSP + 0
   \   000122   85..83       MOV     DPH,?XSP + 1
   \   000125   78..         MOV     R0,#?V4
   \   000127   12....       LCALL   ?UL_GT_X
   \   00012A   5018         JNC     ??osalTimerUpdate_8
   \   00012C   85..82       MOV     DPL,?XSP + 0
   \   00012F   85..83       MOV     DPH,?XSP + 1
   \   000132   78..         MOV     R0,#?V4
   \   000134   12....       LCALL   ?L_MOV_X
   \   000137   8E82         MOV     DPL,R6
   \   000139   8F83         MOV     DPH,R7
   \   00013B   A3           INC     DPTR
   \   00013C   A3           INC     DPTR
   \   00013D   78..         MOV     R0,#?V4
   \   00013F   12....       LCALL   ?L_SUB_FROM_X
   \   000142   8064         SJMP    ??osalTimerUpdate_7
   \                     ??osalTimerUpdate_8:
   \   000144   7A00         MOV     R2,#0x0
   \   000146   7B00         MOV     R3,#0x0
   \   000148   7C00         MOV     R4,#0x0
   \   00014A   7D00         MOV     R5,#0x0
   \   00014C   8E82         MOV     DPL,R6
   \   00014E   8F83         MOV     DPH,R7
   \   000150   A3           INC     DPTR
   \   000151   A3           INC     DPTR
   \   000152   EA           MOV     A,R2
   \   000153   F0           MOVX    @DPTR,A
   \   000154   A3           INC     DPTR
   \   000155   EB           MOV     A,R3
   \   000156   F0           MOVX    @DPTR,A
   \   000157   A3           INC     DPTR
   \   000158   EC           MOV     A,R4
   \   000159   F0           MOVX    @DPTR,A
   \   00015A   A3           INC     DPTR
   \   00015B   ED           MOV     A,R5
   \   00015C   F0           MOVX    @DPTR,A
   \   00015D   8049         SJMP    ??osalTimerUpdate_7
   \                     ??osalTimerUpdate_5:
   \   00015F   8E82         MOV     DPL,R6
   \   000161   8F83         MOV     DPH,R7
   \   000163   A3           INC     DPTR
   \   000164   A3           INC     DPTR
   \   000165   78..         MOV     R0,#?V4
   \   000167   12....       LCALL   ?L_MOV_X
   \   00016A   85..82       MOV     DPL,?XSP + 0
   \   00016D   85..83       MOV     DPH,?XSP + 1
   \   000170   78..         MOV     R0,#?V4
   \   000172   12....       LCALL   ?UL_GT_X
   \   000175   5018         JNC     ??osalTimerUpdate_9
   \   000177   85..82       MOV     DPL,?XSP + 0
   \   00017A   85..83       MOV     DPH,?XSP + 1
   \   00017D   78..         MOV     R0,#?V4
   \   00017F   12....       LCALL   ?L_MOV_X
   \   000182   8E82         MOV     DPL,R6
   \   000184   8F83         MOV     DPH,R7
   \   000186   A3           INC     DPTR
   \   000187   A3           INC     DPTR
   \   000188   78..         MOV     R0,#?V4
   \   00018A   12....       LCALL   ?L_SUB_FROM_X
   \   00018D   8019         SJMP    ??osalTimerUpdate_7
   \                     ??osalTimerUpdate_9:
   \   00018F   7A00         MOV     R2,#0x0
   \   000191   7B00         MOV     R3,#0x0
   \   000193   7C00         MOV     R4,#0x0
   \   000195   7D00         MOV     R5,#0x0
   \   000197   8E82         MOV     DPL,R6
   \   000199   8F83         MOV     DPH,R7
   \   00019B   A3           INC     DPTR
   \   00019C   A3           INC     DPTR
   \   00019D   EA           MOV     A,R2
   \   00019E   F0           MOVX    @DPTR,A
   \   00019F   A3           INC     DPTR
   \   0001A0   EB           MOV     A,R3
   \   0001A1   F0           MOVX    @DPTR,A
   \   0001A2   A3           INC     DPTR
   \   0001A3   EC           MOV     A,R4
   \   0001A4   F0           MOVX    @DPTR,A
   \   0001A5   A3           INC     DPTR
   \   0001A6   ED           MOV     A,R5
   \   0001A7   F0           MOVX    @DPTR,A
   \                     ??osalTimerUpdate_7:
   \   0001A8   8E82         MOV     DPL,R6
   \   0001AA   8F83         MOV     DPH,R7
   \   0001AC   A3           INC     DPTR
   \   0001AD   A3           INC     DPTR
   \   0001AE   E0           MOVX    A,@DPTR
   \   0001AF   F8           MOV     R0,A
   \   0001B0   A3           INC     DPTR
   \   0001B1   E0           MOVX    A,@DPTR
   \   0001B2   F9           MOV     R1,A
   \   0001B3   E8           MOV     A,R0
   \   0001B4   49           ORL     A,R1
   \   0001B5   7074         JNZ     ??osalTimerUpdate_10
   \   0001B7   8E82         MOV     DPL,R6
   \   0001B9   8F83         MOV     DPH,R7
   \   0001BB   A3           INC     DPTR
   \   0001BC   A3           INC     DPTR
   \   0001BD   A3           INC     DPTR
   \   0001BE   A3           INC     DPTR
   \   0001BF   E0           MOVX    A,@DPTR
   \   0001C0   F8           MOV     R0,A
   \   0001C1   A3           INC     DPTR
   \   0001C2   E0           MOVX    A,@DPTR
   \   0001C3   F9           MOV     R1,A
   \   0001C4   E8           MOV     A,R0
   \   0001C5   49           ORL     A,R1
   \   0001C6   7063         JNZ     ??osalTimerUpdate_10
   \   0001C8   8E82         MOV     DPL,R6
   \   0001CA   8F83         MOV     DPH,R7
   \   0001CC   A3           INC     DPTR
   \   0001CD   A3           INC     DPTR
   \   0001CE   A3           INC     DPTR
   \   0001CF   A3           INC     DPTR
   \   0001D0   A3           INC     DPTR
   \   0001D1   A3           INC     DPTR
   \   0001D2   A3           INC     DPTR
   \   0001D3   A3           INC     DPTR
   \   0001D4   A3           INC     DPTR
   \   0001D5   12....       LCALL   ?XLOAD_R0123
   \   0001D8   E8           MOV     A,R0
   \   0001D9   49           ORL     A,R1
   \   0001DA   4A           ORL     A,R2
   \   0001DB   4B           ORL     A,R3
   \   0001DC   604D         JZ      ??osalTimerUpdate_10
   \   0001DE   8E82         MOV     DPL,R6
   \   0001E0   8F83         MOV     DPH,R7
   \   0001E2   A3           INC     DPTR
   \   0001E3   A3           INC     DPTR
   \   0001E4   A3           INC     DPTR
   \   0001E5   A3           INC     DPTR
   \   0001E6   A3           INC     DPTR
   \   0001E7   A3           INC     DPTR
   \   0001E8   E0           MOVX    A,@DPTR
   \   0001E9   F8           MOV     R0,A
   \   0001EA   A3           INC     DPTR
   \   0001EB   E0           MOVX    A,@DPTR
   \   0001EC   F9           MOV     R1,A
   \   0001ED   E8           MOV     A,R0
   \   0001EE   49           ORL     A,R1
   \   0001EF   603A         JZ      ??osalTimerUpdate_10
   \   0001F1                ; Setup parameters for call to function osal_set_event
   \   0001F1   8E82         MOV     DPL,R6
   \   0001F3   8F83         MOV     DPH,R7
   \   0001F5   A3           INC     DPTR
   \   0001F6   A3           INC     DPTR
   \   0001F7   A3           INC     DPTR
   \   0001F8   A3           INC     DPTR
   \   0001F9   A3           INC     DPTR
   \   0001FA   A3           INC     DPTR
   \   0001FB   E0           MOVX    A,@DPTR
   \   0001FC   FA           MOV     R2,A
   \   0001FD   A3           INC     DPTR
   \   0001FE   E0           MOVX    A,@DPTR
   \   0001FF   FB           MOV     R3,A
   \   000200   8E82         MOV     DPL,R6
   \   000202   8F83         MOV     DPH,R7
   \   000204   A3           INC     DPTR
   \   000205   A3           INC     DPTR
   \   000206   A3           INC     DPTR
   \   000207   A3           INC     DPTR
   \   000208   A3           INC     DPTR
   \   000209   A3           INC     DPTR
   \   00020A   A3           INC     DPTR
   \   00020B   A3           INC     DPTR
   \   00020C   E0           MOVX    A,@DPTR
   \   00020D   F9           MOV     R1,A
   \   00020E   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000211   E9           MOV     A,R1
   \   000212   8E82         MOV     DPL,R6
   \   000214   8F83         MOV     DPH,R7
   \   000216   A3           INC     DPTR
   \   000217   A3           INC     DPTR
   \   000218   A3           INC     DPTR
   \   000219   A3           INC     DPTR
   \   00021A   A3           INC     DPTR
   \   00021B   A3           INC     DPTR
   \   00021C   A3           INC     DPTR
   \   00021D   A3           INC     DPTR
   \   00021E   A3           INC     DPTR
   \   00021F   12....       LCALL   ?XLOAD_R0123
   \   000222   8E82         MOV     DPL,R6
   \   000224   8F83         MOV     DPH,R7
   \   000226   A3           INC     DPTR
   \   000227   A3           INC     DPTR
   \   000228   12....       LCALL   ?XSTORE_R0123
   \                     ??osalTimerUpdate_10:
   \   00022B   8E82         MOV     DPL,R6
   \   00022D   8F83         MOV     DPH,R7
   \   00022F   A3           INC     DPTR
   \   000230   A3           INC     DPTR
   \   000231   E0           MOVX    A,@DPTR
   \   000232   F8           MOV     R0,A
   \   000233   A3           INC     DPTR
   \   000234   E0           MOVX    A,@DPTR
   \   000235   F9           MOV     R1,A
   \   000236   E8           MOV     A,R0
   \   000237   49           ORL     A,R1
   \   000238   7011         JNZ     ??osalTimerUpdate_11
   \   00023A   8E82         MOV     DPL,R6
   \   00023C   8F83         MOV     DPH,R7
   \   00023E   A3           INC     DPTR
   \   00023F   A3           INC     DPTR
   \   000240   A3           INC     DPTR
   \   000241   A3           INC     DPTR
   \   000242   E0           MOVX    A,@DPTR
   \   000243   F8           MOV     R0,A
   \   000244   A3           INC     DPTR
   \   000245   E0           MOVX    A,@DPTR
   \   000246   F9           MOV     R1,A
   \   000247   E8           MOV     A,R0
   \   000248   49           ORL     A,R1
   \   000249   6016         JZ      ??osalTimerUpdate_12
   \                     ??osalTimerUpdate_11:
   \   00024B   8E82         MOV     DPL,R6
   \   00024D   8F83         MOV     DPH,R7
   \   00024F   A3           INC     DPTR
   \   000250   A3           INC     DPTR
   \   000251   A3           INC     DPTR
   \   000252   A3           INC     DPTR
   \   000253   A3           INC     DPTR
   \   000254   A3           INC     DPTR
   \   000255   E0           MOVX    A,@DPTR
   \   000256   F8           MOV     R0,A
   \   000257   A3           INC     DPTR
   \   000258   E0           MOVX    A,@DPTR
   \   000259   F9           MOV     R1,A
   \   00025A   E8           MOV     A,R0
   \   00025B   49           ORL     A,R1
   \   00025C   6003         JZ      $+5
   \   00025E   02....       LJMP    ??osalTimerUpdate_2 & 0xFFFF
   \                     ??osalTimerUpdate_12:
   \   000261   E5..         MOV     A,?V8
   \   000263   45..         ORL     A,?V9
   \   000265   7013         JNZ     ??osalTimerUpdate_13
   \   000267   8E82         MOV     DPL,R6
   \   000269   8F83         MOV     DPH,R7
   \   00026B   E0           MOVX    A,@DPTR
   \   00026C   F8           MOV     R0,A
   \   00026D   A3           INC     DPTR
   \   00026E   E0           MOVX    A,@DPTR
   \   00026F   F9           MOV     R1,A
   \   000270   90....       MOV     DPTR,#timerHead
   \   000273   E8           MOV     A,R0
   \   000274   F0           MOVX    @DPTR,A
   \   000275   A3           INC     DPTR
   \   000276   E9           MOV     A,R1
   \   000277   F0           MOVX    @DPTR,A
   \   000278   8014         SJMP    ??osalTimerUpdate_14
   \                     ??osalTimerUpdate_13:
   \   00027A   8E82         MOV     DPL,R6
   \   00027C   8F83         MOV     DPH,R7
   \   00027E   E0           MOVX    A,@DPTR
   \   00027F   F8           MOV     R0,A
   \   000280   A3           INC     DPTR
   \   000281   E0           MOVX    A,@DPTR
   \   000282   F9           MOV     R1,A
   \   000283   85..82       MOV     DPL,?V8
   \   000286   85..83       MOV     DPH,?V9
   \   000289   E8           MOV     A,R0
   \   00028A   F0           MOVX    @DPTR,A
   \   00028B   A3           INC     DPTR
   \   00028C   E9           MOV     A,R1
   \   00028D   F0           MOVX    @DPTR,A
   \                     ??osalTimerUpdate_14:
   \   00028E   8E..         MOV     ?V2,R6
   \   000290   8F..         MOV     ?V3,R7
   \   000292   8E82         MOV     DPL,R6
   \   000294   8F83         MOV     DPH,R7
   \   000296   E0           MOVX    A,@DPTR
   \   000297   FE           MOV     R6,A
   \   000298   A3           INC     DPTR
   \   000299   E0           MOVX    A,@DPTR
   \   00029A   FF           MOV     R7,A
   \   00029B   02....       LJMP    ??osalTimerUpdate_3 & 0xFFFF
    524              }
    525            }
    526          }
   \                     ??osalTimerUpdate_0:
   \   00029E   7404         MOV     A,#0x4
   \   0002A0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002A3   7F0B         MOV     R7,#0xb
   \   0002A5   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0002A8                REQUIRE _A_IEN0
    527          
    528          #ifdef POWER_SAVING
    529          /*********************************************************************
    530           * @fn      osal_adjust_timers
    531           *
    532           * @brief   Update the timer structures for elapsed ticks.
    533           *
    534           * @param   none
    535           *
    536           * @return  none
    537           *********************************************************************/
    538          void osal_adjust_timers( void )
    539          {
    540            uint32 eTime;
    541          
    542            if ( timerHead != NULL )
    543            {
    544              // Compute elapsed time (msec)
    545              eTime = TimerElapsed() / TICK_COUNT;
    546          
    547              if ( eTime )
    548              {
    549                osalTimerUpdate( eTime );
    550              }
    551            }
    552          }
    553          
    554          /*********************************************************************
    555           * @fn      osal_next_timeout
    556           *
    557           * @brief
    558           *
    559           *   Search timer table to return the lowest timeout value. If the
    560           *   timer list is empty, then the returned timeout will be zero.
    561           *
    562           * @param   none
    563           *
    564           * @return  none
    565           *********************************************************************/
    566          uint32 osal_next_timeout( void )
    567          {
    568            uint32 nextTimeout;
    569            osalTimerRec_t *srchTimer;
    570          
    571            if ( timerHead != NULL )
    572            {
    573              // Head of the timer list
    574              srchTimer = timerHead;
    575              nextTimeout = OSAL_TIMERS_MAX_TIMEOUT;
    576          
    577              // Look for the next timeout timer
    578              while ( srchTimer != NULL )
    579              {
    580                if (srchTimer->timeout.time32 < nextTimeout)
    581                {
    582                  nextTimeout = srchTimer->timeout.time32;
    583                }
    584                // Check next timer
    585                srchTimer = srchTimer->next;
    586              }
    587            }
    588            else
    589            {
    590              // No timers
    591              nextTimeout = 0;
    592            }
    593          
    594            return ( nextTimeout );
    595          }
    596          #endif // POWER_SAVING
    597          
    598          /*********************************************************************
    599           * @fn      osal_GetSystemClock()
    600           *
    601           * @brief   Read the local system clock.
    602           *
    603           * @param   none
    604           *
    605           * @return  local clock in milliseconds
    606           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    607          uint32 osal_GetSystemClock( void )
   \                     osal_GetSystemClock:
    608          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    609            return ( osal_systemClock );
   \   000004   90....       MOV     DPTR,#osal_systemClock
   \   000007   12....       LCALL   ?XLOAD_R2345
   \   00000A   D083         POP     DPH
   \   00000C   D082         POP     DPL
   \   00000E   02....       LJMP    ?BRET
    610          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osalTimerInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osalTimerInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osalAddTimer::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osalAddTimer

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osalFindTimer::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osalFindTimer

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osalDeleteTimer::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osalDeleteTimer

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_start_timerEx::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_start_timerEx

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_start_reload_timer::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_start_reload_timer

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_stop_timerEx::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_stop_timerEx

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_get_timeoutEx::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_get_timeoutEx

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_timer_num_active::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_timer_num_active

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osalTimerUpdate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osalTimerUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_GetSystemClock::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_GetSystemClock
    611          
    612          /*********************************************************************
    613          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     34   osalAddTimer
        0     16   -> osalFindTimer
        0     16   -> osal_mem_alloc
      2     12   osalDeleteTimer
      2     16   osalFindTimer
      0      9   osalTimerInit
      0     23   osalTimerUpdate
        0     23   -> osal_mem_free
        0     23   -> osal_set_event
      2      0   osal_GetSystemClock
      0     14   osal_get_timeoutEx
        0     14   -> osalFindTimer
      0     22   osal_start_reload_timer
        0     18   -> osalAddTimer
      0     18   osal_start_timerEx
        0     14   -> osalAddTimer
      0     12   osal_stop_timerEx
        0     12   -> osalDeleteTimer
        0     12   -> osalFindTimer
      2      0   osal_timer_num_active


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  _A_IEN0
     240  osalAddTimer
       6  osalAddTimer::?relay
      32  osalDeleteTimer
       6  osalDeleteTimer::?relay
      73  osalFindTimer
       6  osalFindTimer::?relay
      32  osalTimerInit
       6  osalTimerInit::?relay
     680  osalTimerUpdate
       6  osalTimerUpdate::?relay
      17  osal_GetSystemClock
       6  osal_GetSystemClock::?relay
      74  osal_get_timeoutEx
       6  osal_get_timeoutEx::?relay
      91  osal_start_reload_timer
       6  osal_start_reload_timer::?relay
      62  osal_start_timerEx
       6  osal_start_timerEx::?relay
      62  osal_stop_timerEx
       6  osal_stop_timerEx::?relay
       4  osal_systemClock
      57  osal_timer_num_active
       6  osal_timer_num_active::?relay
       2  timerHead

 
 1 420 bytes in segment BANKED_CODE
    66 bytes in segment BANK_RELAYS
     1 byte  in segment SFR_AN
     6 bytes in segment XDATA_Z
 
 1 486 bytes of CODE  memory
     0 bytes of DATA  memory (+ 1 byte shared)
     6 bytes of XDATA memory

Errors: none
Warnings: none

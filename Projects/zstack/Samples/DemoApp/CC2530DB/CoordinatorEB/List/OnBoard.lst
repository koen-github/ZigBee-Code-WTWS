###############################################################################
#
# IAR C/C++ Compiler V9.20.1.2476 for 8051                22/Feb/2017  14:31:42
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\ZMain\TI2530DB\OnBoard.c
#    Command line       =  
#        -f
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00002000 -DZDAPP_CONFIG_PAN_ID=0xABCD
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={'H', 'O', 'G', 'E', 'S',
#        'C', 'H', 'O', 'O', 'L', 'U', 'T', 'R', 'E', 'C', 'H'}"
#        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\ZMain\TI2530DB\OnBoard.c
#        -D HOLD_AUTO_START -D BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D
#        NV_RESTORE -D HAL_UART=TRUE -lC
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\
#        -lA
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\
#        --diag_suppress Pe001,Pa010,Pe1665 -o
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\Obj\
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\Source\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ol --require_prototypes
#    List file          =  
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\OnBoard.lst
#    Object file        =  
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\Obj\OnBoard.r51
#
###############################################################################

C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\ZMain\TI2530DB\OnBoard.c
      1          /**************************************************************************************************
      2            Filename:       OnBoard.c
      3            Revised:        $Date: 2012-11-15 11:48:16 -0800 (Thu, 15 Nov 2012) $
      4            Revision:       $Revision: 32196 $
      5          
      6            Description:    This file contains the UI and control for the
      7                            peripherals on the EVAL development board
      8            Notes:          This file targets the Chipcon CC2530/31
      9          
     10          
     11            Copyright 2005-2011 Texas Instruments Incorporated. All rights reserved.
     12          
     13            IMPORTANT: Your use of this Software is limited to those specific rights
     14            granted under the terms of a software license agreement between the user
     15            who downloaded the software, his/her employer (which must be your employer)
     16            and Texas Instruments Incorporated (the "License").  You may not use this
     17            Software unless you agree to abide by the terms of the License. The License
     18            limits your use, and you acknowledge, that the Software may not be modified,
     19            copied or distributed unless embedded on a Texas Instruments microcontroller
     20            or used solely and exclusively in conjunction with a Texas Instruments radio
     21            frequency transceiver, which is integrated into your product.  Other than for
     22            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     23            works of, modify, distribute, perform, display or sell this Software and/or
     24            its documentation for any purpose.
     25          
     26            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     27            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     28            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     29            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     30            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     31            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     32            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     33            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     34            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     35            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     36            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     37          
     38            Should you have any questions regarding your right to use this Software,
     39            contact Texas Instruments Incorporated at www.TI.com.
     40          **************************************************************************************************/
     41          
     42          /*********************************************************************
     43           * INCLUDES
     44           */
     45          
     46          #include "ZComDef.h"
     47          #include "ZGlobals.h"
     48          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x9d
   \   unsigned char volatile __sfr SLEEPSTA
   \                     SLEEPSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xd6
   \   unsigned char volatile __sfr DMAARM
   \                     DMAARM:
   \   000000                DS 1
     49          #include "OSAL.h"
     50          //#include "MT.h"
     51          //#include "MT_SYS.h"
     52          #include "DebugTrace.h"
     53          
     54          /* Hal */
     55          #include "hal_lcd.h"
     56          #include "hal_mcu.h"
     57          #include "hal_timer.h"
     58          #include "hal_key.h"
     59          #include "hal_led.h"
     60          
     61          /* Allow access macRandomByte() */
     62          #include "mac_radio_defs.h"
     63          
     64          /*********************************************************************
     65           * CONSTANTS
     66           */
     67          
     68          // Task ID not initialized
     69          #define NO_TASK_ID 0xFF
     70          
     71          // Minimum length RAM "pattern" for Stack check
     72          #define MIN_RAM_INIT 12
     73          
     74          /*********************************************************************
     75           * GLOBAL VARIABLES
     76           */
     77          
     78          #if defined MAKE_CRC_SHDW
     79          #pragma location="CRC_SHDW"
     80          const CODE uint16 _crcShdw = 0xFFFF;
     81          #pragma required=_crcShdw
     82          
     83          #elif !defined MT_UBL_FUNC
     84          
     85          #pragma location="LOCK_BITS_ADDRESS_SPACE"

   \                                 In  segment LOCK_BITS_ADDRESS_SPACE, align 1
     86          __no_init uint8 _lockBits[16];
   \                     _lockBits:
   \   000000                DS 16
     87          #pragma required=_lockBits
     88          
     89          #if defined ZCL_KEY_ESTABLISH
     90          #include "zcl_cert_data.c"
     91          #else
     92          #pragma location="IEEE_ADDRESS_SPACE"

   \                                 In  segment IEEE_ADDRESS_SPACE, align 1
     93          __no_init uint8 _nvIEEE[Z_EXTADDR_LEN];
   \                     _nvIEEE:
   \   000000                DS 8
   \   000008                REQUIRE _lockBits
     94          #pragma required=_nvIEEE
     95          #endif
     96          
     97          #pragma location="RESERVED_ADDRESS_SPACE"

   \                                 In  segment RESERVED_ADDRESS_SPACE, align 1
     98          __no_init uint8 _reserved[1932];
   \                     _reserved:
   \   000000                DS 1932
   \   00078C                REQUIRE _nvIEEE
     99          #pragma required=_reserved
    100          #endif
    101          
    102          // 64-bit Extended Address of this device

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    103          uint8 aExtendedAddress[8];
   \                     aExtendedAddress:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
   \   000008                REQUIRE _reserved
    104          
    105          /*********************************************************************
    106           * LOCAL VARIABLES
    107           */
    108          
    109          // Registered keys task ID, initialized to NOT USED.

   \                                 In  segment XDATA_I, align 1, keep-with-next
    110          static uint8 registeredKeysTaskID = NO_TASK_ID;
   \                     registeredKeysTaskID:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for registeredKeysTaskID>`
   \   000001                REQUIRE __INIT_XDATA_I
    111          
    112          /*********************************************************************
    113           * LOCAL FUNCTIONS
    114           */
    115          
    116          static void ChkReset( void );
    117          
    118          /*********************************************************************
    119           * @fn      InitBoard()
    120           * @brief   Initialize the CC2420DB Board Peripherals
    121           * @param   level: COLD,WARM,READY
    122           * @return  None
    123           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    124          void InitBoard( uint8 level )
   \                     InitBoard:
    125          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    126            if ( level == OB_COLD )
   \   000007   EE           MOV     A,R6
   \   000008   7011         JNZ     ??InitBoard_0
    127            {
    128              // IAR does not zero-out this byte below the XSTACK.
    129              *(uint8 *)0x0 = 0;
   \   00000A   900000       MOV     DPTR,#0x0
   \   00000D   7400         MOV     A,#0x0
   \   00000F   F0           MOVX    @DPTR,A
    130              // Interrupts off
    131              osal_int_disable( INTS_ALL );
   \   000010                ; Setup parameters for call to function osal_int_disable
   \   000010   79FF         MOV     R1,#-0x1
   \   000012   12....       LCALL   `??osal_int_disable::?relay`; Banked call to: osal_int_disable
   \   000015   E9           MOV     A,R1
    132              // Check for Brown-Out reset
    133              ChkReset();
   \   000016                ; Setup parameters for call to function ChkReset
   \   000016   12....       LCALL   `??ChkReset::?relay` ; Banked call to: ChkReset
   \   000019   8009         SJMP    ??InitBoard_1
    134            }
    135            else  // !OB_COLD
    136            {
    137              /* Initialize Key stuff */
    138              #if defined (ISR_KEYINTERRUPT)
    139              HalKeyConfig(HAL_KEY_INTERRUPT_ENABLE , OnBoard_KeyCallback);
    140              #else
    141              HalKeyConfig(HAL_KEY_INTERRUPT_DISABLE, OnBoard_KeyCallback);
   \                     ??InitBoard_0:
   \   00001B                ; Setup parameters for call to function HalKeyConfig
   \   00001B   7A..         MOV     R2,#`??OnBoard_KeyCallback::?relay` & 0xff
   \   00001D   7B..         MOV     R3,#(`??OnBoard_KeyCallback::?relay` >> 8) & 0xff
   \   00001F   7900         MOV     R1,#0x0
   \   000021   12....       LCALL   `??HalKeyConfig::?relay`; Banked call to: HalKeyConfig
    142              #endif
    143            }
    144          }
   \                     ??InitBoard_1:
   \   000024   7F01         MOV     R7,#0x1
   \   000026   02....       LJMP    ?BANKED_LEAVE_XDATA
    145          
    146          /*********************************************************************
    147           * @fn      ChkReset()
    148           * @brief   Check reset bits - if reset cause is unknown, assume a
    149           *          brown-out (low power), assume batteries are not reliable,
    150           *          hang in a loop and sequence through the LEDs.
    151           * @param   None
    152           * @return  None
    153           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    154          void ChkReset( void )
   \                     ChkReset:
    155          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    156            uint8 rib;
    157          
    158            // Isolate reset indicator bits
    159            rib = SLEEPSTA & LRESET;
   \   000004   E59D         MOV     A,0x9d
   \   000006   5418         ANL     A,#0x18
   \   000008   F8           MOV     R0,A
    160          
    161            if ( rib == RESETPO )
   \   000009   E8           MOV     A,R0
   \   00000A   600D         JZ      ??ChkReset_0
    162            {
    163              // Put code here to handle Power-On reset
    164            }
    165            else if ( rib == RESETEX )
   \   00000C   7408         MOV     A,#0x8
   \   00000E   68           XRL     A,R0
   \   00000F   6008         JZ      ??ChkReset_0
    166            {
    167              // Put code here to handle External reset
    168            }
    169            else if ( rib == RESETWD )
   \   000011   7410         MOV     A,#0x10
   \   000013   68           XRL     A,R0
   \   000014   6003         JZ      ??ChkReset_0
    170            {
    171              // Put code here to handle WatchDog reset
    172            }
    173            else  // Unknown reason - not expected.
    174            {
    175              HAL_ASSERT(0);
   \   000016                ; Setup parameters for call to function halAssertHandler
   \   000016   12....       LCALL   `??halAssertHandler::?relay`; Banked call to: halAssertHandler
    176            }
    177          }
   \                     ??ChkReset_0:
   \   000019   D083         POP     DPH
   \   00001B   D082         POP     DPL
   \   00001D   02....       LJMP    ?BRET
   \   000020                REQUIRE SLEEPSTA
    178          
    179          /*********************************************************************
    180           *                        "Keyboard" Support
    181           *********************************************************************/
    182          
    183          /*********************************************************************
    184           * Keyboard Register function
    185           *
    186           * The keyboard handler is setup to send all keyboard changes to
    187           * one task (if a task is registered).
    188           *
    189           * If a task registers, it will get all the keys. You can change this
    190           * to register for individual keys.
    191           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    192          uint8 RegisterForKeys( uint8 task_id )
   \                     RegisterForKeys:
    193          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   F8           MOV     R0,A
    194            // Allow only the first task
    195            if ( registeredKeysTaskID == NO_TASK_ID )
   \   000006   90....       MOV     DPTR,#registeredKeysTaskID
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   64FF         XRL     A,#0xff
   \   00000C   7009         JNZ     ??RegisterForKeys_0
    196            {
    197              registeredKeysTaskID = task_id;
   \   00000E   E8           MOV     A,R0
   \   00000F   90....       MOV     DPTR,#registeredKeysTaskID
   \   000012   F0           MOVX    @DPTR,A
    198              return ( true );
   \   000013   7901         MOV     R1,#0x1
   \   000015   8002         SJMP    ??RegisterForKeys_1
    199            }
    200            else
    201              return ( false );
   \                     ??RegisterForKeys_0:
   \   000017   7900         MOV     R1,#0x0
   \                     ??RegisterForKeys_1:
   \   000019   D083         POP     DPH
   \   00001B   D082         POP     DPL
   \   00001D   02....       LJMP    ?BRET
    202          }
    203          
    204          /*********************************************************************
    205           * @fn      OnBoard_SendKeys
    206           *
    207           * @brief   Send "Key Pressed" message to application.
    208           *
    209           * @param   keys  - keys that were pressed
    210           *          state - shifted
    211           *
    212           * @return  status
    213           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    214          uint8 OnBoard_SendKeys( uint8 keys, uint8 state )
   \                     OnBoard_SendKeys:
    215          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EA           MOV     A,R2
   \   000008   FF           MOV     R7,A
    216            keyChange_t *msgPtr;
    217          
    218            if ( registeredKeysTaskID != NO_TASK_ID )
   \   000009   90....       MOV     DPTR,#registeredKeysTaskID
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   64FF         XRL     A,#0xff
   \   00000F   6040         JZ      ??OnBoard_SendKeys_0
    219            {
    220              // Send the address to the task
    221              msgPtr = (keyChange_t *)osal_msg_allocate( sizeof(keyChange_t) );
   \   000011                ; Setup parameters for call to function osal_msg_allocate
   \   000011   7A04         MOV     R2,#0x4
   \   000013   7B00         MOV     R3,#0x0
   \   000015   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000018   8A..         MOV     ?V0,R2
   \   00001A   8B..         MOV     ?V1,R3
   \   00001C   AA..         MOV     R2,?V0
   \   00001E   AB..         MOV     R3,?V1
    222              if ( msgPtr )
   \   000020   EA           MOV     A,R2
   \   000021   4B           ORL     A,R3
   \   000022   6029         JZ      ??OnBoard_SendKeys_1
    223              {
    224                msgPtr->hdr.event = KEY_CHANGE;
   \   000024   8A82         MOV     DPL,R2
   \   000026   8B83         MOV     DPH,R3
   \   000028   74C0         MOV     A,#-0x40
   \   00002A   F0           MOVX    @DPTR,A
    225                msgPtr->state = state;
   \   00002B   EF           MOV     A,R7
   \   00002C   C0E0         PUSH    A
   \   00002E   8A82         MOV     DPL,R2
   \   000030   8B83         MOV     DPH,R3
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   D0E0         POP     A
   \   000036   F0           MOVX    @DPTR,A
    226                msgPtr->keys = keys;
   \   000037   EE           MOV     A,R6
   \   000038   C0E0         PUSH    A
   \   00003A   8A82         MOV     DPL,R2
   \   00003C   8B83         MOV     DPH,R3
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   D0E0         POP     A
   \   000043   F0           MOVX    @DPTR,A
    227          
    228                osal_msg_send( registeredKeysTaskID, (uint8 *)msgPtr );
   \   000044                ; Setup parameters for call to function osal_msg_send
   \   000044   90....       MOV     DPTR,#registeredKeysTaskID
   \   000047   E0           MOVX    A,@DPTR
   \   000048   F9           MOV     R1,A
   \   000049   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   00004C   E9           MOV     A,R1
    229              }
    230              return ( ZSuccess );
   \                     ??OnBoard_SendKeys_1:
   \   00004D   7900         MOV     R1,#0x0
   \   00004F   8002         SJMP    ??OnBoard_SendKeys_2
    231            }
    232            else
    233              return ( ZFailure );
   \                     ??OnBoard_SendKeys_0:
   \   000051   7901         MOV     R1,#0x1
   \                     ??OnBoard_SendKeys_2:
   \   000053   7F02         MOV     R7,#0x2
   \   000055   02....       LJMP    ?BANKED_LEAVE_XDATA
    234          }
    235          
    236          /*********************************************************************
    237           * @fn      OnBoard_KeyCallback
    238           *
    239           * @brief   Callback service for keys
    240           *
    241           * @param   keys  - keys that were pressed
    242           *          state - shifted
    243           *
    244           * @return  void
    245           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    246          void OnBoard_KeyCallback ( uint8 keys, uint8 state )
   \                     OnBoard_KeyCallback:
    247          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
    248            if ( OnBoard_SendKeys( keys, state ) != ZSuccess )
   \   000009                ; Setup parameters for call to function OnBoard_SendKeys
   \   000009   EE           MOV     A,R6
   \   00000A   FA           MOV     R2,A
   \   00000B   EF           MOV     A,R7
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   `??OnBoard_SendKeys::?relay`; Banked call to: OnBoard_SendKeys
   \   000010   E9           MOV     A,R1
    249            {
    250              // Process SW1 here
    251              if ( keys & HAL_KEY_SW_1 )  // Switch 1
    252              {
    253              }
    254              // Process SW2 here
    255              if ( keys & HAL_KEY_SW_2 )  // Switch 2
    256              {
    257              }
    258              // Process SW3 here
    259              if ( keys & HAL_KEY_SW_3 )  // Switch 3
    260              {
    261              }
    262              // Process SW4 here
    263              if ( keys & HAL_KEY_SW_4 )  // Switch 4
    264              {
    265              }
    266              // Process SW5 here
    267              if ( keys & HAL_KEY_SW_5 )  // Switch 5
    268              {
    269              }
    270              // Process SW6 here
    271              if ( keys & HAL_KEY_SW_6 )  // Switch 6
    272              {
    273              }
    274            }
    275          }
   \   000011   7F01         MOV     R7,#0x1
   \   000013   02....       LJMP    ?BANKED_LEAVE_XDATA
    276          
    277          /*********************************************************************
    278           * @fn      OnBoard_stack_used
    279           *
    280           * @brief   Runs through the stack looking for touched memory.
    281           *
    282           * @param   none
    283           *
    284           * @return  Maximum number of bytes used by the stack.
    285           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    286          uint16 OnBoard_stack_used(void)
   \                     OnBoard_stack_used:
    287          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    288            uint8 const *ptr;
    289            uint8 cnt = 0;
   \   000004   7800         MOV     R0,#0x0
    290          
    291            for (ptr = CSTACK_END; ptr > CSTACK_BEG; ptr--)
   \   000006   7582..       MOV     DPL,#(SFE(XSTACK) + 255) & 0xff
   \   000009   7583..       MOV     DPH,#((SFE(XSTACK) - 1) >> 8) & 0xff
   \   00000C   800E         SJMP    ??OnBoard_stack_used_0
    292            {
    293              if (STACK_INIT_VALUE == *ptr)
    294              {
    295                if (++cnt >= MIN_RAM_INIT)
    296                {
    297                  ptr += MIN_RAM_INIT;
    298                  break;
    299                }
    300              }
    301              else
    302              {
    303                cnt = 0;
   \                     ??OnBoard_stack_used_1:
   \   00000E   7800         MOV     R0,#0x0
    304              }
   \                     ??OnBoard_stack_used_2:
   \   000010   E582         MOV     A,DPL
   \   000012   24FF         ADD     A,#-0x1
   \   000014   F582         MOV     DPL,A
   \   000016   E583         MOV     A,DPH
   \   000018   34FF         ADDC    A,#-0x1
   \   00001A   F583         MOV     DPH,A
   \                     ??OnBoard_stack_used_0:
   \   00001C   C3           CLR     C
   \   00001D   74..         MOV     A,#SFB(XSTACK) & 0xff
   \   00001F   9582         SUBB    A,DPL
   \   000021   74..         MOV     A,#(SFB(XSTACK) >> 8) & 0xff
   \   000023   9583         SUBB    A,DPH
   \   000025   5016         JNC     ??OnBoard_stack_used_3
   \   000027   E0           MOVX    A,@DPTR
   \   000028   64CD         XRL     A,#0xcd
   \   00002A   70E2         JNZ     ??OnBoard_stack_used_1
   \   00002C   08           INC     R0
   \   00002D   E8           MOV     A,R0
   \   00002E   C3           CLR     C
   \   00002F   940C         SUBB    A,#0xc
   \   000031   40DD         JC      ??OnBoard_stack_used_2
   \   000033   E582         MOV     A,DPL
   \   000035   240C         ADD     A,#0xc
   \   000037   F582         MOV     DPL,A
   \   000039   5002         JNC     ??OnBoard_stack_used_3
   \   00003B   0583         INC     DPH
    305            }
    306          
    307            return (uint16)(CSTACK_END - ptr + 1);
   \                     ??OnBoard_stack_used_3:
   \   00003D   74..         MOV     A,#(SFE(XSTACK) + 255) & 0xff
   \   00003F   C3           CLR     C
   \   000040   9582         SUBB    A,DPL
   \   000042   F8           MOV     R0,A
   \   000043   74..         MOV     A,#((SFE(XSTACK) - 1) >> 8) & 0xff
   \   000045   9583         SUBB    A,DPH
   \   000047   F9           MOV     R1,A
   \   000048   E8           MOV     A,R0
   \   000049   2401         ADD     A,#0x1
   \   00004B   FA           MOV     R2,A
   \   00004C   E4           CLR     A
   \   00004D   39           ADDC    A,R1
   \   00004E   FB           MOV     R3,A
   \   00004F   D083         POP     DPH
   \   000051   D082         POP     DPL
   \   000053   02....       LJMP    ?BRET
    308          }
    309          
    310          /*********************************************************************
    311           * @fn      _itoa
    312           *
    313           * @brief   convert a 16bit number to ASCII
    314           *
    315           * @param   num -
    316           *          buf -
    317           *          radix -
    318           *
    319           * @return  void
    320           *
    321           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    322          void _itoa(uint16 num, uint8 *buf, uint8 radix)
   \                     _itoa:
    323          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   89..         MOV     ?V3,R1
    324            char c,i;
    325            uint8 *p, rst[5];
    326          
    327            p = rst;
   \   000010   A8..         MOV     R0,?XSP + 0
   \   000012   A9..         MOV     R1,?XSP + 1
   \   000014   88..         MOV     ?V4,R0
   \   000016   89..         MOV     ?V5,R1
   \   000018   85....       MOV     ?V0,?V4
   \   00001B   85....       MOV     ?V1,?V5
    328            for ( i=0; i<5; i++,p++ )
   \   00001E   75..00       MOV     ?V2,#0x0
   \   000021   800F         SJMP    ??_itoa_0
   \                     ??_itoa_1:
   \   000023   05..         INC     ?V2
   \   000025   85..82       MOV     DPL,?V0
   \   000028   85..83       MOV     DPH,?V1
   \   00002B   A3           INC     DPTR
   \   00002C   8582..       MOV     ?V0,DPL
   \   00002F   8583..       MOV     ?V1,DPH
   \                     ??_itoa_0:
   \   000032   E5..         MOV     A,?V2
   \   000034   C3           CLR     C
   \   000035   9405         SUBB    A,#0x5
   \   000037   5041         JNC     ??_itoa_2
    329            {
    330              c = num % radix;  // Isolate a digit
   \   000039   EE           MOV     A,R6
   \   00003A   F8           MOV     R0,A
   \   00003B   EF           MOV     A,R7
   \   00003C   F9           MOV     R1,A
   \   00003D   AA..         MOV     R2,?V3
   \   00003F   7B00         MOV     R3,#0x0
   \   000041   12....       LCALL   ?US_DIV_MOD
   \   000044   EA           MOV     A,R2
   \   000045   F8           MOV     R0,A
    331              *p = c + (( c < 10 ) ? '0' : '7');  // Convert to Ascii
   \   000046   E8           MOV     A,R0
   \   000047   C3           CLR     C
   \   000048   940A         SUBB    A,#0xa
   \   00004A   5006         JNC     ??_itoa_3
   \   00004C   7A30         MOV     R2,#0x30
   \   00004E   7B00         MOV     R3,#0x0
   \   000050   8004         SJMP    ??_itoa_4
   \                     ??_itoa_3:
   \   000052   7A37         MOV     R2,#0x37
   \   000054   7B00         MOV     R3,#0x0
   \                     ??_itoa_4:
   \   000056   EA           MOV     A,R2
   \   000057   28           ADD     A,R0
   \   000058   C0E0         PUSH    A
   \   00005A   85..82       MOV     DPL,?V0
   \   00005D   85..83       MOV     DPH,?V1
   \   000060   D0E0         POP     A
   \   000062   F0           MOVX    @DPTR,A
    332              num /= radix;
   \   000063   EE           MOV     A,R6
   \   000064   F8           MOV     R0,A
   \   000065   EF           MOV     A,R7
   \   000066   F9           MOV     R1,A
   \   000067   AA..         MOV     R2,?V3
   \   000069   7B00         MOV     R3,#0x0
   \   00006B   12....       LCALL   ?US_DIV_MOD
   \   00006E   88..         MOV     ?V4,R0
   \   000070   89..         MOV     ?V5,R1
   \   000072   AE..         MOV     R6,?V4
   \   000074   AF..         MOV     R7,?V5
    333              if ( !num )
   \   000076   EE           MOV     A,R6
   \   000077   4F           ORL     A,R7
   \   000078   70A9         JNZ     ??_itoa_1
    334                break;
    335            }
    336          
    337            for ( c=0 ; c<=i; c++ )
   \                     ??_itoa_2:
   \   00007A   7800         MOV     R0,#0x0
   \   00007C   8026         SJMP    ??_itoa_5
    338              *buf++ = *p--;  // Reverse character order
   \                     ??_itoa_6:
   \   00007E   85..82       MOV     DPL,?V0
   \   000081   85..83       MOV     DPH,?V1
   \   000084   E0           MOVX    A,@DPTR
   \   000085   C0E0         PUSH    A
   \   000087   8C82         MOV     DPL,R4
   \   000089   8D83         MOV     DPH,R5
   \   00008B   D0E0         POP     A
   \   00008D   F0           MOVX    @DPTR,A
   \   00008E   E5..         MOV     A,?V0
   \   000090   24FF         ADD     A,#-0x1
   \   000092   F5..         MOV     ?V0,A
   \   000094   E5..         MOV     A,?V1
   \   000096   34FF         ADDC    A,#-0x1
   \   000098   F5..         MOV     ?V1,A
   \   00009A   8C82         MOV     DPL,R4
   \   00009C   8D83         MOV     DPH,R5
   \   00009E   A3           INC     DPTR
   \   00009F   AC82         MOV     R4,DPL
   \   0000A1   AD83         MOV     R5,DPH
   \   0000A3   08           INC     R0
   \                     ??_itoa_5:
   \   0000A4   E5..         MOV     A,?V2
   \   0000A6   C3           CLR     C
   \   0000A7   98           SUBB    A,R0
   \   0000A8   50D4         JNC     ??_itoa_6
    339          
    340            *buf = '\0';
   \   0000AA   8C82         MOV     DPL,R4
   \   0000AC   8D83         MOV     DPH,R5
   \   0000AE   7400         MOV     A,#0x0
   \   0000B0   F0           MOVX    @DPTR,A
    341          }
   \   0000B1   7405         MOV     A,#0x5
   \   0000B3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B6   7F06         MOV     R7,#0x6
   \   0000B8   02....       LJMP    ?BANKED_LEAVE_XDATA
    342          
    343          /*********************************************************************
    344           * @fn        Onboard_rand
    345           *
    346           * @brief    Random number generator
    347           *
    348           * @param   none
    349           *
    350           * @return  uint16 - new random number
    351           *
    352           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    353          uint16 Onboard_rand( void )
   \                     Onboard_rand:
    354          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    355            return ( MAC_RADIO_RANDOM_WORD() );
   \   000004                ; Setup parameters for call to function macMcuRandomWord
   \   000004   12....       LCALL   `??macMcuRandomWord::?relay`; Banked call to: macMcuRandomWord
   \   000007   D083         POP     DPH
   \   000009   D082         POP     DPL
   \   00000B   02....       LJMP    ?BRET
    356          }
    357          
    358          /*********************************************************************
    359           * @fn        Onboard_wait
    360           *
    361           * @brief    Delay wait
    362           *
    363           * @param   uint16 - time to wait
    364           *
    365           * @return  none
    366           *
    367           *********************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    368          void Onboard_wait( uint16 timeout )
   \                     Onboard_wait:
    369          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   8003         SJMP    ??Onboard_wait_0
    370            while (timeout--)
    371            {
    372              asm("NOP");
   \                     ??Onboard_wait_1:
   \   000002   00           NOP
    373              asm("NOP");
   \   000003   00           NOP
    374              asm("NOP");
   \   000004   00           NOP
    375            }
   \                     ??Onboard_wait_0:
   \   000005   EA           MOV     A,R2
   \   000006   F8           MOV     R0,A
   \   000007   EB           MOV     A,R3
   \   000008   F9           MOV     R1,A
   \   000009   E8           MOV     A,R0
   \   00000A   24FF         ADD     A,#-0x1
   \   00000C   FA           MOV     R2,A
   \   00000D   E9           MOV     A,R1
   \   00000E   34FF         ADDC    A,#-0x1
   \   000010   FB           MOV     R3,A
   \   000011   E8           MOV     A,R0
   \   000012   49           ORL     A,R1
   \   000013   70ED         JNZ     ??Onboard_wait_1
    376          }
   \   000015   02....       LJMP    ?BRET
    377          
    378          /*********************************************************************
    379           * @fn      Onboard_soft_reset
    380           *
    381           * @brief   Effect a soft reset.
    382           *
    383           * @param   none
    384           *
    385           * @return  none
    386           *
    387           *********************************************************************/

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    388          __near_func void Onboard_soft_reset( void )
   \                     Onboard_soft_reset:
    389          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    390            HAL_DISABLE_INTERRUPTS();
   \   000000   C2AF         CLR     0xa8.7
    391            // Abort all DMA channels to insure that ongoing operations do not
    392            // interfere with re-configuration.
    393            DMAARM = 0x80 | 0x1F;
   \   000002   75D69F       MOV     0xd6,#-0x61
    394            asm("LJMP 0x0");
   \   000005   020000       LJMP 0x0
    395          }
   \   000008   22           RET
   \   000009                REQUIRE _A_IEN0
   \   000009                REQUIRE DMAARM
    396          
    397          #if defined MT_UBL_FUNC
    398          #if !defined UBL_RC_IMG_PG_BEG
    399          #define UBL_RC_IMG_PG_BEG  (HAL_SB_CRC_ADDR / HAL_FLASH_PAGE_SIZE)
    400          #endif
    401          #if !defined UBL_MD_PG_OFFSET
    402          #define UBL_MD_PG_OFFSET   (HAL_SB_CRC_ADDR % HAL_FLASH_PAGE_SIZE + 2)
    403          #endif
    404          #if !defined UBL_ADDR
    405          #define UBL_MD_ADDR        (HAL_SB_CRC_ADDR + 2)
    406          #endif
    407          
    408          /*********************************************************************
    409           * @fn      MT_UblCommandProcessing
    410           *
    411           * @brief   Effect a soft reset.
    412           *
    413           * @param   pBuf - Pointer to the received MT buffer.
    414           *
    415           * @return  MT_RPC_ERR_COMMAND_ID if the MT command is not MT_UBL_ERASE.
    416           *
    417           *********************************************************************/
    418          uint8 MT_UblCommandProcessing(uint8 *pBuf);
    419          uint8 MT_UblCommandProcessing(uint8 *pBuf)
    420          {
    421            if (pBuf[MT_RPC_POS_CMD1] == MT_UBL_ERASE)
    422            {
    423              uint16 crc[2];
    424              HalFlashRead(UBL_RC_IMG_PG_BEG, UBL_MD_PG_OFFSET, (uint8 *)(crc+1), 2);
    425          
    426              if (crc[1] != 0)
    427              {
    428                crc[1] ^= 0xFFFF;  // Only write to zero bits that are not already zero.
    429                crc[0] = 0xFFFF;
    430                HalFlashWrite((UBL_MD_ADDR - 2) / HAL_FLASH_WORD_SIZE, (uint8 *)crc, 1);
    431              }
    432          
    433              Onboard_soft_reset();
    434            }
    435          
    436            return MT_RPC_ERR_COMMAND_ID;
    437          }
    438          #endif
    439          
    440          /*********************************************************************
    441           *                    EXTERNAL I/O FUNCTIONS
    442           *
    443           * User defined functions to control external devices. Add your code
    444           * to the following functions to control devices wired to DB outputs.
    445           *
    446           *********************************************************************/
    447          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    448          void BigLight_On( void )
   \                     BigLight_On:
    449          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    450            // Put code here to turn on an external light
    451          }
   \   000000   02....       LJMP    ?BRET
    452          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    453          void BigLight_Off( void )
   \                     BigLight_Off:
    454          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    455            // Put code here to turn off an external light
    456          }
   \   000000   02....       LJMP    ?BRET
    457          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    458          void BuzzerControl( uint8 on )
   \                     BuzzerControl:
    459          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    460            // Put code here to turn a buzzer on/off
    461            (void)on;
    462          }
   \   000000   02....       LJMP    ?BRET
    463          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    464          void Dimmer( uint8 lvl )
   \                     Dimmer:
    465          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    466            // Put code here to control a dimmer
    467            (void)lvl;
    468          }
   \   000000   02....       LJMP    ?BRET
    469          
    470          // No dip switches on this board

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    471          uint8 GetUserDipSw( void )
   \                     GetUserDipSw:
    472          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    473            return 0;
   \   000000   7900         MOV     R1,#0x0
   \   000002   02....       LJMP    ?BRET
    474          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for registeredKeysTaskID>`:
   \   000000   FF           DB 255

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??InitBoard::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    InitBoard

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ChkReset::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ChkReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??RegisterForKeys::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    RegisterForKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??OnBoard_SendKeys::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    OnBoard_SendKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??OnBoard_KeyCallback::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    OnBoard_KeyCallback

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??OnBoard_stack_used::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    OnBoard_stack_used

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??_itoa::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    _itoa

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Onboard_rand::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Onboard_rand

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Onboard_wait::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Onboard_wait

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??BigLight_On::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BigLight_On

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??BigLight_Off::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BigLight_Off

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??BuzzerControl::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    BuzzerControl

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Dimmer::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Dimmer

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??GetUserDipSw::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GetUserDipSw
    475          
    476          /*********************************************************************
    477          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   BigLight_Off
      0      0   BigLight_On
      0      0   BuzzerControl
      2      9   ChkReset
        2      0   -> halAssertHandler
      0      0   Dimmer
      0      0   GetUserDipSw
      0      9   InitBoard
        0      9   -> ChkReset
        0      9   -> HalKeyConfig
        0      9   -> osal_int_disable
      0      9   OnBoard_KeyCallback
        0      9   -> OnBoard_SendKeys
      1     19   OnBoard_SendKeys
        0     10   -> osal_msg_allocate
        0     10   -> osal_msg_send
      2      0   OnBoard_stack_used
      2      0   Onboard_rand
        2      0   -> macMcuRandomWord
      0      0   Onboard_soft_reset
      0      0   Onboard_wait
      2      0   RegisterForKeys
      1     19   _itoa


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for registeredKeysTaskID>
       3  BigLight_Off
       6  BigLight_Off::?relay
       3  BigLight_On
       6  BigLight_On::?relay
       3  BuzzerControl
       6  BuzzerControl::?relay
      32  ChkReset
       6  ChkReset::?relay
       1  DMAARM
       3  Dimmer
       6  Dimmer::?relay
       5  GetUserDipSw
       6  GetUserDipSw::?relay
      41  InitBoard
       6  InitBoard::?relay
      22  OnBoard_KeyCallback
       6  OnBoard_KeyCallback::?relay
      88  OnBoard_SendKeys
       6  OnBoard_SendKeys::?relay
      86  OnBoard_stack_used
       6  OnBoard_stack_used::?relay
      14  Onboard_rand
       6  Onboard_rand::?relay
       9  Onboard_soft_reset
      24  Onboard_wait
       6  Onboard_wait::?relay
      32  RegisterForKeys
       6  RegisterForKeys::?relay
       1  SLEEPSTA
       1  _A_IEN0
     187  _itoa
       6  _itoa::?relay
      16  _lockBits
       8  _nvIEEE
    1932  _reserved
       8  aExtendedAddress
       1  registeredKeysTaskID

 
   543 bytes in segment BANKED_CODE
    84 bytes in segment BANK_RELAYS
     8 bytes in segment IEEE_ADDRESS_SPACE
    16 bytes in segment LOCK_BITS_ADDRESS_SPACE
     9 bytes in segment NEAR_CODE
 1 932 bytes in segment RESERVED_ADDRESS_SPACE
     3 bytes in segment SFR_AN
     1 byte  in segment XDATA_I
     1 byte  in segment XDATA_ID
     8 bytes in segment XDATA_Z
 
   637 bytes of CODE  memory
     0 bytes of DATA  memory (+ 3 bytes shared)
 1 965 bytes of XDATA memory

Errors: none
Warnings: none

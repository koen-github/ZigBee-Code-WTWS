###############################################################################
#
# IAR C/C++ Compiler V9.20.1.2476 for 8051                22/Feb/2017  14:31:43
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\koen\ZigBee-Code-WTWS\Components\stack\nwk\stub_aps.c
#    Command line       =  
#        -f
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DZDO_COORDINATOR -DRTR_NWK) -f
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00002000 -DZDAPP_CONFIG_PAN_ID=0xABCD
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={'H', 'O', 'G', 'E', 'S',
#        'C', 'H', 'O', 'O', 'L', 'U', 'T', 'R', 'E', 'C', 'H'}"
#        -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440
#        C:\Users\koen\ZigBee-Code-WTWS\Components\stack\nwk\stub_aps.c -D
#        HOLD_AUTO_START -D BUILD_ALL_DEVICES -D REFLECTOR -D NV_INIT -D
#        NV_RESTORE -D HAL_UART=TRUE -lC
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\
#        -lA
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\
#        --diag_suppress Pe001,Pa010,Pe1665 -o
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\Obj\
#        -e --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\Source\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\ZMain\TI2530DB\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\hal\include\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\include\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mt\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\osal\include\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\services\saddr\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\services\sdata\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\af\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sec\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sys\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\zmac\
#        -I
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\
#        -Ol --require_prototypes
#    List file          =  
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\List\stub_aps.lst
#    Object file        =  
#        C:\Users\koen\ZigBee-Code-WTWS\Projects\zstack\Samples\DemoApp\CC2530DB\CoordinatorEB\Obj\stub_aps.r51
#
###############################################################################

C:\Users\koen\ZigBee-Code-WTWS\Components\stack\nwk\stub_aps.c
      1          /**************************************************************************************************
      2            Filename:       stub_aps.c
      3            Revised:        $Date: 2014-03-26 10:01:05 -0700 (Wed, 26 Mar 2014) $
      4            Revision:       $Revision: 37899 $
      5          
      6            Description:    Stub APS processing functions
      7          
      8          
      9            Copyright 2008 - 2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "OSAL.h"
     44          #include "mac_spec.h"
     45          #include "nwk_util.h"
     46          #include "AF.h"
     47          
     48          #include "stub_aps.h"
     49          
     50          /*********************************************************************
     51           * MACROS
     52           */
     53          
     54          /*********************************************************************
     55           * CONSTANTS
     56           */
     57          
     58          // Stub NWK header length
     59          #define STUB_NWK_HDR_LEN                2
     60          
     61          // Start of the Stub APS header in the Inter-PAN frame
     62          #define STUB_APS_HDR_FRAME_CTRL         STUB_NWK_HDR_LEN
     63          
     64          // Stub APS event identifiers
     65          #define CHANNEL_CHANGE_EVT              0x0001
     66          
     67          #define CHANNEL_CHANGE_RETRY_TIMEOUT    100
     68          
     69          /*********************************************************************
     70           * TYPEDEFS
     71           */
     72          typedef struct
     73          {
     74            zAddrType_t addr;
     75            uint16 panId;
     76          } pan_t;
     77          
     78          /*********************************************************************
     79           * GLOBAL VARIABLES
     80           */
     81          

   \                                 In  segment XDATA_I, align 1, keep-with-next
     82          uint8 StubAPS_TaskID = 0xFF;    // Task ID for internal task/event processing
   \                     StubAPS_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for StubAPS_TaskID>`
   \   000001                REQUIRE __INIT_XDATA_I
     83          
     84          /*********************************************************************
     85           * EXTERNAL VARIABLES
     86           */
     87          
     88          
     89          /*********************************************************************
     90           * EXTERNAL FUNCTIONS
     91           */
     92          
     93          
     94          /*********************************************************************
     95           * LOCAL VARIABLES
     96           */
     97          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     98          static uint8 newChannel;
   \                     newChannel:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     99          static uint8 channelChangeInProgress = FALSE;
   \                     channelChangeInProgress:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    100          
    101          // Application info

   \                                 In  segment XDATA_I, align 1, keep-with-next
    102          static uint8 appTaskID = 0xFF;  // Application task id
   \                     appTaskID:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for appTaskID>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    103          uint8 appEndPoint = 0;   // Application endpoint
   \                     appEndPoint:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    104          
    105          
    106          /*********************************************************************
    107           * LOCAL FUNCTIONS
    108           */
    109          
    110          static void StubNWK_ParseMsg( uint8 *buf, uint8 bufLength, NLDE_FrameFormat_t *snff );
    111          static void StubAPS_ParseMsg( NLDE_FrameFormat_t *snff, aps_FrameFormat_t *saff );
    112          static void StubNWK_BuildMsg( uint8 *nwkHdr );
    113          static void StubAPS_BuildMsg( uint8 *apsHdr, uint8 frmCtrl, uint16 groupID, APSDE_DataReq_t *req );
    114          static ZStatus_t StubAPS_BuildFrameControl( uint8 *frmCtrl, zAddrType_t *dstAddr,
    115                                                      uint16 *groupID, APSDE_DataReq_t *req );
    116          static ZStatus_t StubAPS_SetNewChannel( uint8 channel );
    117          static void StubAPS_NotifyApp( uint8 status );
    118          
    119          uint8 StubAPS_ZMacCallback( uint8 *msgPtr );
    120          
    121          /*********************************************************************
    122           * @fn      StubAPS_Init()
    123           *
    124           * @brief   Initialize stub APS layer
    125           *
    126           * @param   task_id - Task identifier for the desired task
    127           *
    128           * @return  none
    129           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    130          void StubAPS_Init( uint8 task_id )
   \                     StubAPS_Init:
    131          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    132            StubAPS_TaskID = task_id;
   \   000004   E9           MOV     A,R1
   \   000005   90....       MOV     DPTR,#StubAPS_TaskID
   \   000008   F0           MOVX    @DPTR,A
    133          
    134            // register with ZMAC
    135            pZMac_AppCallback = StubAPS_ZMacCallback;
   \   000009   90....       MOV     DPTR,#pZMac_AppCallback
   \   00000C   74..         MOV     A,#`??StubAPS_ZMacCallback::?relay` & 0xff
   \   00000E   F0           MOVX    @DPTR,A
   \   00000F   A3           INC     DPTR
   \   000010   74..         MOV     A,#(`??StubAPS_ZMacCallback::?relay` >> 8) & 0xff
   \   000012   F0           MOVX    @DPTR,A
    136          
    137          } /* StubAPS_Init() */
   \   000013   D083         POP     DPH
   \   000015   D082         POP     DPL
   \   000017   02....       LJMP    ?BRET
    138          
    139          /*********************************************************************
    140           * @fn      StubAPS_ProcessEvent()
    141           *
    142           * @brief   Main event loop for Stub APS task. This function should be called
    143           *          at periodic intervals when event occur.
    144           *
    145           * @param   task_id - Task ID
    146           * @param   events  - Bitmap of events
    147           *
    148           * @return  none
    149           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    150          UINT16 StubAPS_ProcessEvent( uint8 task_id, uint16 events )
   \                     StubAPS_ProcessEvent:
    151          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
    152            (void)task_id; // Intentionally unreferenced parameter
    153          
    154            if ( events & SYS_EVENT_MSG )
   \   00000E   E5..         MOV     A,?V0
   \   000010   5400         ANL     A,#0x0
   \   000012   F8           MOV     R0,A
   \   000013   E5..         MOV     A,?V1
   \   000015   5480         ANL     A,#0x80
   \   000017   F9           MOV     R1,A
   \   000018   E8           MOV     A,R0
   \   000019   49           ORL     A,R1
   \   00001A   604C         JZ      ??StubAPS_ProcessEvent_0
   \   00001C   8018         SJMP    ??StubAPS_ProcessEvent_1
    155            {
    156              osal_event_hdr_t *msg_ptr;
    157          
    158              while ( (msg_ptr = (osal_event_hdr_t *)osal_msg_receive( StubAPS_TaskID )) != NULL )
    159              {
    160                if ( msg_ptr->event == MAC_MCPS_DATA_CNF )
    161                {
    162                  INTERP_DataConfirm( (ZMacDataCnf_t *)msg_ptr );
    163                }
    164                else if ( msg_ptr->event == MAC_MCPS_DATA_IND )
   \                     ??StubAPS_ProcessEvent_2:
   \   00001E   8E82         MOV     DPL,R6
   \   000020   8F83         MOV     DPH,R7
   \   000022   E0           MOVX    A,@DPTR
   \   000023   640D         XRL     A,#0xd
   \   000025   7007         JNZ     ??StubAPS_ProcessEvent_3
    165                {
    166                  INTERP_DataIndication( (macMcpsDataInd_t *)msg_ptr );
   \   000027                ; Setup parameters for call to function INTERP_DataIndication
   \   000027   EE           MOV     A,R6
   \   000028   FA           MOV     R2,A
   \   000029   EF           MOV     A,R7
   \   00002A   FB           MOV     R3,A
   \   00002B   12....       LCALL   `??INTERP_DataIndication::?relay`; Banked call to: INTERP_DataIndication
    167                }
    168          
    169                osal_msg_deallocate( (uint8 *)msg_ptr );
   \                     ??StubAPS_ProcessEvent_3:
   \   00002E                ; Setup parameters for call to function osal_msg_deallocate
   \   00002E   EE           MOV     A,R6
   \   00002F   FA           MOV     R2,A
   \   000030   EF           MOV     A,R7
   \   000031   FB           MOV     R3,A
   \   000032   12....       LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \   000035   E9           MOV     A,R1
   \                     ??StubAPS_ProcessEvent_1:
   \   000036                ; Setup parameters for call to function osal_msg_receive
   \   000036   90....       MOV     DPTR,#StubAPS_TaskID
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   F9           MOV     R1,A
   \   00003B   12....       LCALL   `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   00003E   8A..         MOV     ?V2,R2
   \   000040   8B..         MOV     ?V3,R3
   \   000042   AE..         MOV     R6,?V2
   \   000044   AF..         MOV     R7,?V3
   \   000046   EE           MOV     A,R6
   \   000047   4F           ORL     A,R7
   \   000048   6012         JZ      ??StubAPS_ProcessEvent_4
   \   00004A   8E82         MOV     DPL,R6
   \   00004C   8F83         MOV     DPH,R7
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   640C         XRL     A,#0xc
   \   000051   70CB         JNZ     ??StubAPS_ProcessEvent_2
   \   000053                ; Setup parameters for call to function INTERP_DataConfirm
   \   000053   EE           MOV     A,R6
   \   000054   FA           MOV     R2,A
   \   000055   EF           MOV     A,R7
   \   000056   FB           MOV     R3,A
   \   000057   12....       LCALL   `??INTERP_DataConfirm::?relay`; Banked call to: INTERP_DataConfirm
   \   00005A   80D2         SJMP    ??StubAPS_ProcessEvent_3
    170              }
    171          
    172              // Return unproccessed events
    173              return ( events ^ SYS_EVENT_MSG );
   \                     ??StubAPS_ProcessEvent_4:
   \   00005C   E5..         MOV     A,?V0
   \   00005E   6400         XRL     A,#0x0
   \   000060   FA           MOV     R2,A
   \   000061   E5..         MOV     A,?V1
   \   000063   6480         XRL     A,#0x80
   \   000065   FB           MOV     R3,A
   \   000066   8046         SJMP    ??StubAPS_ProcessEvent_5
    174            }
    175          
    176            if ( events & CHANNEL_CHANGE_EVT )
   \                     ??StubAPS_ProcessEvent_0:
   \   000068   E5..         MOV     A,?V0
   \   00006A   A2E0         MOV     C,0xE0 /* A   */.0
   \   00006C   503C         JNC     ??StubAPS_ProcessEvent_6
    177            {
    178              // try to change to the new channel
    179              ZStatus_t status = StubAPS_SetNewChannel( newChannel );
   \   00006E                ; Setup parameters for call to function StubAPS_SetNewChannel
   \   00006E   90....       MOV     DPTR,#newChannel
   \   000071   E0           MOVX    A,@DPTR
   \   000072   F9           MOV     R1,A
   \   000073   12....       LCALL   `??StubAPS_SetNewChannel::?relay`; Banked call to: StubAPS_SetNewChannel
   \   000076   E9           MOV     A,R1
   \   000077   FE           MOV     R6,A
    180              if ( status != ZSuccess )
   \   000078   EE           MOV     A,R6
   \   000079   601E         JZ      ??StubAPS_ProcessEvent_7
    181              {
    182                // turn MAC receiver back on
    183                uint8 rxOnIdle = true;
   \   00007B   85..82       MOV     DPL,?XSP + 0
   \   00007E   85..83       MOV     DPH,?XSP + 1
   \   000081   7401         MOV     A,#0x1
   \   000083   F0           MOVX    @DPTR,A
    184                ZMacSetReq( ZMacRxOnIdle, &rxOnIdle );
   \   000084                ; Setup parameters for call to function ZMacSetReq
   \   000084   AA..         MOV     R2,?XSP + 0
   \   000086   AB..         MOV     R3,?XSP + 1
   \   000088   7952         MOV     R1,#0x52
   \   00008A   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   \   00008D   E9           MOV     A,R1
    185          
    186                // set NWK task to run
    187                nwk_setStateIdle( FALSE );
   \   00008E                ; Setup parameters for call to function nwk_setStateIdle
   \   00008E   7900         MOV     R1,#0x0
   \   000090   12....       LCALL   `??nwk_setStateIdle::?relay`; Banked call to: nwk_setStateIdle
    188          
    189                channelChangeInProgress = FALSE;
   \   000093   90....       MOV     DPTR,#channelChangeInProgress
   \   000096   7400         MOV     A,#0x0
   \   000098   F0           MOVX    @DPTR,A
    190              }
    191          
    192              // notify the application
    193              StubAPS_NotifyApp( status );
   \                     ??StubAPS_ProcessEvent_7:
   \   000099                ; Setup parameters for call to function StubAPS_NotifyApp
   \   000099   EE           MOV     A,R6
   \   00009A   F9           MOV     R1,A
   \   00009B   12....       LCALL   `??StubAPS_NotifyApp::?relay`; Banked call to: StubAPS_NotifyApp
    194          
    195              return ( events ^ CHANNEL_CHANGE_EVT );
   \   00009E   E5..         MOV     A,?V0
   \   0000A0   6401         XRL     A,#0x1
   \   0000A2   FA           MOV     R2,A
   \   0000A3   E5..         MOV     A,?V1
   \   0000A5   6400         XRL     A,#0x0
   \   0000A7   FB           MOV     R3,A
   \   0000A8   8004         SJMP    ??StubAPS_ProcessEvent_5
    196            }
    197          
    198            // If reach here, the events are unknown
    199            // Discard or make more handlers
    200            return 0;
   \                     ??StubAPS_ProcessEvent_6:
   \   0000AA   7A00         MOV     R2,#0x0
   \   0000AC   7B00         MOV     R3,#0x0
   \                     ??StubAPS_ProcessEvent_5:
   \   0000AE   7401         MOV     A,#0x1
   \   0000B0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B3   7F04         MOV     R7,#0x4
   \   0000B5   02....       LJMP    ?BANKED_LEAVE_XDATA
    201          
    202          } /* StubAPS_ProcessEvent() */
    203          
    204          
    205          /*********************************************************************
    206           * @fn          StubNWK_ParseMsg
    207           *
    208           * @brief       Call this function to parse an incoming Stub NWK frame.
    209           *
    210           * @param       buf - pointer incoming message buffer
    211           * @param       bufLength - length of incoming message
    212           * @param       snff  - pointer Frame Format Parameters
    213           *
    214           * @return      pointer to network packet, NULL if error
    215           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    216          static void StubNWK_ParseMsg( uint8 *buf, uint8 bufLength, NLDE_FrameFormat_t *snff )
   \                     StubNWK_ParseMsg:
    217          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   89..         MOV     ?V2,R1
   \   00000B   EC           MOV     A,R4
   \   00000C   FE           MOV     R6,A
   \   00000D   ED           MOV     A,R5
   \   00000E   FF           MOV     R7,A
    218            uint16 fc;
    219          
    220            osal_memset( snff, 0, sizeof(NLDE_FrameFormat_t) );
   \   00000F                ; Setup parameters for call to function osal_memset
   \   00000F   7C21         MOV     R4,#0x21
   \   000011   7D00         MOV     R5,#0x0
   \   000013   7900         MOV     R1,#0x0
   \   000015   EE           MOV     A,R6
   \   000016   FA           MOV     R2,A
   \   000017   EF           MOV     A,R7
   \   000018   FB           MOV     R3,A
   \   000019   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    221          
    222            snff->bufLength = bufLength;
   \   00001C   E5..         MOV     A,?V2
   \   00001E   C0E0         PUSH    A
   \   000020   8E82         MOV     DPL,R6
   \   000022   8F83         MOV     DPH,R7
   \   000024   D0E0         POP     A
   \   000026   F0           MOVX    @DPTR,A
    223          
    224            // get the frame control
    225            fc = BUILD_UINT16( buf[NWK_HDR_FRAME_CTRL_LSB], buf[NWK_HDR_FRAME_CTRL_MSB] );
   \   000027   85..82       MOV     DPL,?V0
   \   00002A   85..83       MOV     DPH,?V1
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   FA           MOV     R2,A
   \   00002F   7B00         MOV     R3,#0x0
   \   000031   85..82       MOV     DPL,?V0
   \   000034   85..83       MOV     DPH,?V1
   \   000037   A3           INC     DPTR
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F8           MOV     R0,A
   \   00003A   7900         MOV     R1,#0x0
   \   00003C   E4           CLR     A
   \   00003D   C8           XCH     A,R0
   \   00003E   F9           MOV     R1,A
   \   00003F   EA           MOV     A,R2
   \   000040   28           ADD     A,R0
   \   000041   FA           MOV     R2,A
   \   000042   EB           MOV     A,R3
   \   000043   39           ADDC    A,R1
   \   000044   FB           MOV     R3,A
    226          
    227            // parse the frame control
    228            NLDE_ParseFrameControl( fc, snff );
   \   000045                ; Setup parameters for call to function NLDE_ParseFrameControl
   \   000045   EE           MOV     A,R6
   \   000046   FC           MOV     R4,A
   \   000047   EF           MOV     A,R7
   \   000048   FD           MOV     R5,A
   \   000049   12....       LCALL   `??NLDE_ParseFrameControl::?relay`; Banked call to: NLDE_ParseFrameControl
   \   00004C   E9           MOV     A,R1
    229          
    230            snff->hdrLen = STUB_NWK_HDR_LEN;
   \   00004D   8E82         MOV     DPL,R6
   \   00004F   8F83         MOV     DPH,R7
   \   000051   A3           INC     DPTR
   \   000052   7402         MOV     A,#0x2
   \   000054   F0           MOVX    @DPTR,A
    231          
    232            // Stub NWK payload
    233            snff->nsdu = buf + snff->hdrLen;
   \   000055   8E82         MOV     DPL,R6
   \   000057   8F83         MOV     DPH,R7
   \   000059   A3           INC     DPTR
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   F8           MOV     R0,A
   \   00005C   7900         MOV     R1,#0x0
   \   00005E   E5..         MOV     A,?V0
   \   000060   28           ADD     A,R0
   \   000061   F8           MOV     R0,A
   \   000062   E5..         MOV     A,?V1
   \   000064   39           ADDC    A,R1
   \   000065   F9           MOV     R1,A
   \   000066   EE           MOV     A,R6
   \   000067   241D         ADD     A,#0x1d
   \   000069   F582         MOV     DPL,A
   \   00006B   E4           CLR     A
   \   00006C   3F           ADDC    A,R7
   \   00006D   F583         MOV     DPH,A
   \   00006F   E8           MOV     A,R0
   \   000070   F0           MOVX    @DPTR,A
   \   000071   A3           INC     DPTR
   \   000072   E9           MOV     A,R1
   \   000073   F0           MOVX    @DPTR,A
    234            snff->nsduLength = snff->bufLength - snff->hdrLen;
   \   000074   8E82         MOV     DPL,R6
   \   000076   8F83         MOV     DPH,R7
   \   000078   A3           INC     DPTR
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   F8           MOV     R0,A
   \   00007B   8E82         MOV     DPL,R6
   \   00007D   8F83         MOV     DPH,R7
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   C3           CLR     C
   \   000081   98           SUBB    A,R0
   \   000082   C0E0         PUSH    A
   \   000084   EE           MOV     A,R6
   \   000085   2417         ADD     A,#0x17
   \   000087   F582         MOV     DPL,A
   \   000089   E4           CLR     A
   \   00008A   3F           ADDC    A,R7
   \   00008B   F583         MOV     DPH,A
   \   00008D   D0E0         POP     A
   \   00008F   F0           MOVX    @DPTR,A
    235          
    236          } /* StubNWK_ParseMsg */
   \   000090   7F03         MOV     R7,#0x3
   \   000092   02....       LJMP    ?BANKED_LEAVE_XDATA
    237          
    238          /*********************************************************************
    239           * @fn          StubAPS_ParseMsg
    240           *
    241           * @brief       Call this function to parse an incoming Stub APS frame.
    242           *
    243           * @param       naff  - pointer Stub NWK Frame Format Parameters
    244           * @param       saff  - pointer Stub APS Format Parameters
    245           *
    246           * @return      none
    247           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    248          static void StubAPS_ParseMsg( NLDE_FrameFormat_t *snff, aps_FrameFormat_t *saff )
   \                     StubAPS_ParseMsg:
    249          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
    250            uint8 fcb;
    251            uint8 *asdu;
    252          
    253            osal_memset( saff, 0, sizeof(aps_FrameFormat_t) );
   \   00000D                ; Setup parameters for call to function osal_memset
   \   00000D   7C17         MOV     R4,#0x17
   \   00000F   7D00         MOV     R5,#0x0
   \   000011   7900         MOV     R1,#0x0
   \   000013   EE           MOV     A,R6
   \   000014   FA           MOV     R2,A
   \   000015   EF           MOV     A,R7
   \   000016   FB           MOV     R3,A
   \   000017   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    254          
    255            saff->asduLength = snff->nsduLength;
   \   00001A   E5..         MOV     A,?V0
   \   00001C   2417         ADD     A,#0x17
   \   00001E   F582         MOV     DPL,A
   \   000020   E4           CLR     A
   \   000021   35..         ADDC    A,?V1
   \   000023   F583         MOV     DPH,A
   \   000025   E0           MOVX    A,@DPTR
   \   000026   C0E0         PUSH    A
   \   000028   EE           MOV     A,R6
   \   000029   2410         ADD     A,#0x10
   \   00002B   F582         MOV     DPL,A
   \   00002D   E4           CLR     A
   \   00002E   3F           ADDC    A,R7
   \   00002F   F583         MOV     DPH,A
   \   000031   D0E0         POP     A
   \   000033   F0           MOVX    @DPTR,A
    256            asdu = snff->nsdu;
   \   000034   E5..         MOV     A,?V0
   \   000036   241D         ADD     A,#0x1d
   \   000038   F582         MOV     DPL,A
   \   00003A   E4           CLR     A
   \   00003B   35..         ADDC    A,?V1
   \   00003D   F583         MOV     DPH,A
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   F8           MOV     R0,A
   \   000041   A3           INC     DPTR
   \   000042   E0           MOVX    A,@DPTR
   \   000043   F9           MOV     R1,A
    257            saff->macDestAddr = snff->macDstAddr;
   \   000044   E5..         MOV     A,?V0
   \   000046   240D         ADD     A,#0xd
   \   000048   F582         MOV     DPL,A
   \   00004A   E4           CLR     A
   \   00004B   35..         ADDC    A,?V1
   \   00004D   F583         MOV     DPH,A
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   FA           MOV     R2,A
   \   000051   A3           INC     DPTR
   \   000052   E0           MOVX    A,@DPTR
   \   000053   FB           MOV     R3,A
   \   000054   8E82         MOV     DPL,R6
   \   000056   8F83         MOV     DPH,R7
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   A3           INC     DPTR
   \   000062   EA           MOV     A,R2
   \   000063   F0           MOVX    @DPTR,A
   \   000064   A3           INC     DPTR
   \   000065   EB           MOV     A,R3
   \   000066   F0           MOVX    @DPTR,A
    258          
    259            // First byte is Frame Control.
    260            saff->FrmCtrl = *asdu++;
   \   000067   8882         MOV     DPL,R0
   \   000069   8983         MOV     DPH,R1
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   C0E0         PUSH    A
   \   00006E   8E82         MOV     DPL,R6
   \   000070   8F83         MOV     DPH,R7
   \   000072   D0E0         POP     A
   \   000074   F0           MOVX    @DPTR,A
   \   000075   8882         MOV     DPL,R0
   \   000077   8983         MOV     DPH,R1
   \   000079   A3           INC     DPTR
   \   00007A   A882         MOV     R0,DPL
   \   00007C   A983         MOV     R1,DPH
    261          
    262            fcb = saff->FrmCtrl & APS_FRAME_TYPE_MASK;
   \   00007E   8E82         MOV     DPL,R6
   \   000080   8F83         MOV     DPH,R7
   \   000082   E0           MOVX    A,@DPTR
   \   000083   5403         ANL     A,#0x3
   \   000085   FA           MOV     R2,A
    263            if ( fcb == STUB_APS_FRAME )
   \   000086   7403         MOV     A,#0x3
   \   000088   6A           XRL     A,R2
   \   000089   6003         JZ      $+5
   \   00008B   02....       LJMP    ??StubAPS_ParseMsg_0 & 0xFFFF
    264            {
    265              fcb = saff->FrmCtrl & APS_DELIVERYMODE_MASK;
   \   00008E   8E82         MOV     DPL,R6
   \   000090   8F83         MOV     DPH,R7
   \   000092   E0           MOVX    A,@DPTR
   \   000093   540C         ANL     A,#0xc
   \   000095   FA           MOV     R2,A
    266              if ( fcb == APS_FC_DM_BROADCAST )
   \   000096   7408         MOV     A,#0x8
   \   000098   6A           XRL     A,R2
   \   000099   700E         JNZ     ??StubAPS_ParseMsg_1
    267                saff->wasBroadcast = true;
   \   00009B   EE           MOV     A,R6
   \   00009C   240C         ADD     A,#0xc
   \   00009E   F582         MOV     DPL,A
   \   0000A0   E4           CLR     A
   \   0000A1   3F           ADDC    A,R7
   \   0000A2   F583         MOV     DPH,A
   \   0000A4   7401         MOV     A,#0x1
   \   0000A6   F0           MOVX    @DPTR,A
   \   0000A7   800C         SJMP    ??StubAPS_ParseMsg_2
    268              else
    269                saff->wasBroadcast = false;
   \                     ??StubAPS_ParseMsg_1:
   \   0000A9   EE           MOV     A,R6
   \   0000AA   240C         ADD     A,#0xc
   \   0000AC   F582         MOV     DPL,A
   \   0000AE   E4           CLR     A
   \   0000AF   3F           ADDC    A,R7
   \   0000B0   F583         MOV     DPH,A
   \   0000B2   7400         MOV     A,#0x0
   \   0000B4   F0           MOVX    @DPTR,A
    270          
    271              if ( fcb == APS_FC_DM_GROUP )
   \                     ??StubAPS_ParseMsg_2:
   \   0000B5   740C         MOV     A,#0xc
   \   0000B7   6A           XRL     A,R2
   \   0000B8   702E         JNZ     ??StubAPS_ParseMsg_3
    272              {
    273                saff->GroupID = BUILD_UINT16( asdu[0], asdu[1] );
   \   0000BA   8882         MOV     DPL,R0
   \   0000BC   8983         MOV     DPH,R1
   \   0000BE   E0           MOVX    A,@DPTR
   \   0000BF   FC           MOV     R4,A
   \   0000C0   7D00         MOV     R5,#0x0
   \   0000C2   8882         MOV     DPL,R0
   \   0000C4   8983         MOV     DPH,R1
   \   0000C6   A3           INC     DPTR
   \   0000C7   E0           MOVX    A,@DPTR
   \   0000C8   FA           MOV     R2,A
   \   0000C9   7B00         MOV     R3,#0x0
   \   0000CB   E4           CLR     A
   \   0000CC   CA           XCH     A,R2
   \   0000CD   FB           MOV     R3,A
   \   0000CE   EC           MOV     A,R4
   \   0000CF   2A           ADD     A,R2
   \   0000D0   FA           MOV     R2,A
   \   0000D1   ED           MOV     A,R5
   \   0000D2   3B           ADDC    A,R3
   \   0000D3   FB           MOV     R3,A
   \   0000D4   8E82         MOV     DPL,R6
   \   0000D6   8F83         MOV     DPH,R7
   \   0000D8   A3           INC     DPTR
   \   0000D9   A3           INC     DPTR
   \   0000DA   A3           INC     DPTR
   \   0000DB   A3           INC     DPTR
   \   0000DC   EA           MOV     A,R2
   \   0000DD   F0           MOVX    @DPTR,A
   \   0000DE   A3           INC     DPTR
   \   0000DF   EB           MOV     A,R3
   \   0000E0   F0           MOVX    @DPTR,A
    274                asdu += sizeof( uint16 );
   \   0000E1   E8           MOV     A,R0
   \   0000E2   2402         ADD     A,#0x2
   \   0000E4   F8           MOV     R0,A
   \   0000E5   5001         JNC     ??StubAPS_ParseMsg_3
   \   0000E7   09           INC     R1
    275              }
    276          
    277              // Pull out the Cluster ID
    278              saff->ClusterID = BUILD_UINT16( asdu[0], asdu[1] );
   \                     ??StubAPS_ParseMsg_3:
   \   0000E8   8882         MOV     DPL,R0
   \   0000EA   8983         MOV     DPH,R1
   \   0000EC   E0           MOVX    A,@DPTR
   \   0000ED   FC           MOV     R4,A
   \   0000EE   7D00         MOV     R5,#0x0
   \   0000F0   8882         MOV     DPL,R0
   \   0000F2   8983         MOV     DPH,R1
   \   0000F4   A3           INC     DPTR
   \   0000F5   E0           MOVX    A,@DPTR
   \   0000F6   FA           MOV     R2,A
   \   0000F7   7B00         MOV     R3,#0x0
   \   0000F9   E4           CLR     A
   \   0000FA   CA           XCH     A,R2
   \   0000FB   FB           MOV     R3,A
   \   0000FC   EC           MOV     A,R4
   \   0000FD   2A           ADD     A,R2
   \   0000FE   FA           MOV     R2,A
   \   0000FF   ED           MOV     A,R5
   \   000100   3B           ADDC    A,R3
   \   000101   FB           MOV     R3,A
   \   000102   8E82         MOV     DPL,R6
   \   000104   8F83         MOV     DPH,R7
   \   000106   A3           INC     DPTR
   \   000107   A3           INC     DPTR
   \   000108   A3           INC     DPTR
   \   000109   A3           INC     DPTR
   \   00010A   A3           INC     DPTR
   \   00010B   A3           INC     DPTR
   \   00010C   EA           MOV     A,R2
   \   00010D   F0           MOVX    @DPTR,A
   \   00010E   A3           INC     DPTR
   \   00010F   EB           MOV     A,R3
   \   000110   F0           MOVX    @DPTR,A
    279              asdu += sizeof( uint16 );
   \   000111   E8           MOV     A,R0
   \   000112   2402         ADD     A,#0x2
   \   000114   F8           MOV     R0,A
   \   000115   5001         JNC     ??StubAPS_ParseMsg_4
   \   000117   09           INC     R1
    280          
    281              // Pull out the profile ID
    282              saff->ProfileID = BUILD_UINT16( asdu[0], asdu[1] );
   \                     ??StubAPS_ParseMsg_4:
   \   000118   8882         MOV     DPL,R0
   \   00011A   8983         MOV     DPH,R1
   \   00011C   E0           MOVX    A,@DPTR
   \   00011D   FC           MOV     R4,A
   \   00011E   7D00         MOV     R5,#0x0
   \   000120   8882         MOV     DPL,R0
   \   000122   8983         MOV     DPH,R1
   \   000124   A3           INC     DPTR
   \   000125   E0           MOVX    A,@DPTR
   \   000126   FA           MOV     R2,A
   \   000127   7B00         MOV     R3,#0x0
   \   000129   E4           CLR     A
   \   00012A   CA           XCH     A,R2
   \   00012B   FB           MOV     R3,A
   \   00012C   EC           MOV     A,R4
   \   00012D   2A           ADD     A,R2
   \   00012E   FA           MOV     R2,A
   \   00012F   ED           MOV     A,R5
   \   000130   3B           ADDC    A,R3
   \   000131   FB           MOV     R3,A
   \   000132   8E82         MOV     DPL,R6
   \   000134   8F83         MOV     DPH,R7
   \   000136   A3           INC     DPTR
   \   000137   A3           INC     DPTR
   \   000138   A3           INC     DPTR
   \   000139   A3           INC     DPTR
   \   00013A   A3           INC     DPTR
   \   00013B   A3           INC     DPTR
   \   00013C   A3           INC     DPTR
   \   00013D   A3           INC     DPTR
   \   00013E   EA           MOV     A,R2
   \   00013F   F0           MOVX    @DPTR,A
   \   000140   A3           INC     DPTR
   \   000141   EB           MOV     A,R3
   \   000142   F0           MOVX    @DPTR,A
    283              asdu += 2;
   \   000143   E8           MOV     A,R0
   \   000144   2402         ADD     A,#0x2
   \   000146   F8           MOV     R0,A
   \   000147   5001         JNC     ??StubAPS_ParseMsg_0
   \   000149   09           INC     R1
    284            }
    285          
    286            saff->asdu = asdu;
   \                     ??StubAPS_ParseMsg_0:
   \   00014A   EE           MOV     A,R6
   \   00014B   240E         ADD     A,#0xe
   \   00014D   F582         MOV     DPL,A
   \   00014F   E4           CLR     A
   \   000150   3F           ADDC    A,R7
   \   000151   F583         MOV     DPH,A
   \   000153   E8           MOV     A,R0
   \   000154   F0           MOVX    @DPTR,A
   \   000155   A3           INC     DPTR
   \   000156   E9           MOV     A,R1
   \   000157   F0           MOVX    @DPTR,A
    287            saff->asduLength -= (uint8) (asdu - snff->nsdu);
   \   000158   E5..         MOV     A,?V0
   \   00015A   241D         ADD     A,#0x1d
   \   00015C   F582         MOV     DPL,A
   \   00015E   E4           CLR     A
   \   00015F   35..         ADDC    A,?V1
   \   000161   F583         MOV     DPH,A
   \   000163   E0           MOVX    A,@DPTR
   \   000164   FA           MOV     R2,A
   \   000165   A3           INC     DPTR
   \   000166   E0           MOVX    A,@DPTR
   \   000167   FB           MOV     R3,A
   \   000168   E8           MOV     A,R0
   \   000169   C3           CLR     C
   \   00016A   9A           SUBB    A,R2
   \   00016B   F8           MOV     R0,A
   \   00016C   EE           MOV     A,R6
   \   00016D   2410         ADD     A,#0x10
   \   00016F   F582         MOV     DPL,A
   \   000171   E4           CLR     A
   \   000172   3F           ADDC    A,R7
   \   000173   F583         MOV     DPH,A
   \   000175   E0           MOVX    A,@DPTR
   \   000176   C3           CLR     C
   \   000177   98           SUBB    A,R0
   \   000178   F0           MOVX    @DPTR,A
    288            saff->apsHdrLen = snff->nsduLength - saff->asduLength;
   \   000179   EE           MOV     A,R6
   \   00017A   2410         ADD     A,#0x10
   \   00017C   F582         MOV     DPL,A
   \   00017E   E4           CLR     A
   \   00017F   3F           ADDC    A,R7
   \   000180   F583         MOV     DPH,A
   \   000182   E0           MOVX    A,@DPTR
   \   000183   F8           MOV     R0,A
   \   000184   E5..         MOV     A,?V0
   \   000186   2417         ADD     A,#0x17
   \   000188   F582         MOV     DPL,A
   \   00018A   E4           CLR     A
   \   00018B   35..         ADDC    A,?V1
   \   00018D   F583         MOV     DPH,A
   \   00018F   E0           MOVX    A,@DPTR
   \   000190   C3           CLR     C
   \   000191   98           SUBB    A,R0
   \   000192   C0E0         PUSH    A
   \   000194   EE           MOV     A,R6
   \   000195   240D         ADD     A,#0xd
   \   000197   F582         MOV     DPL,A
   \   000199   E4           CLR     A
   \   00019A   3F           ADDC    A,R7
   \   00019B   F583         MOV     DPH,A
   \   00019D   D0E0         POP     A
   \   00019F   F0           MOVX    @DPTR,A
    289          
    290          } /* StubAPS_ParseMsg */
   \   0001A0   7F02         MOV     R7,#0x2
   \   0001A2   02....       LJMP    ?BANKED_LEAVE_XDATA
    291          
    292          /******************************************************************************
    293           * @fn          StubAPS_BuildFrameControl
    294           *
    295           * @brief       This function builds Stub APS Frame Control and the destination
    296           *              address parameter for the MCPS-DATA Request.
    297           *
    298           * @param       frmCtrl - frame control
    299           * @param       dstAddr - destination address for MCPS-DATA Request
    300           * @param       groupID - group id
    301           * @param       req - APSDE_DataReq_t
    302           *
    303           * @return      ZStatus_t
    304           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    305          static ZStatus_t StubAPS_BuildFrameControl( uint8 *frmCtrl, zAddrType_t *dstAddr,
   \                     StubAPS_BuildFrameControl:
    306                                                      uint16 *groupID, APSDE_DataReq_t *req )
    307          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   F8           MOV     R0,A
   \   000007   EB           MOV     A,R3
   \   000008   F9           MOV     R1,A
   \   000009   EC           MOV     A,R4
   \   00000A   FA           MOV     R2,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FB           MOV     R3,A
   \   00000D   740B         MOV     A,#0xb
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   E0           MOVX    A,@DPTR
   \   000013   FC           MOV     R4,A
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   FD           MOV     R5,A
    308            // Security
    309            if ( req->txOptions & APS_TX_OPTIONS_SECURITY_ENABLE )
   \   000017   EC           MOV     A,R4
   \   000018   2415         ADD     A,#0x15
   \   00001A   F582         MOV     DPL,A
   \   00001C   E4           CLR     A
   \   00001D   3D           ADDC    A,R5
   \   00001E   F583         MOV     DPH,A
   \   000020   E0           MOVX    A,@DPTR
   \   000021   FE           MOV     R6,A
   \   000022   A3           INC     DPTR
   \   000023   E0           MOVX    A,@DPTR
   \   000024   FF           MOV     R7,A
   \   000025   EE           MOV     A,R6
   \   000026   A2E0         MOV     C,0xE0 /* A   */.0
   \   000028   5005         JNC     ??StubAPS_BuildFrameControl_0
    310              return ( ZApsNotSupported );
   \   00002A   79B6         MOV     R1,#-0x4a
   \   00002C   02....       LJMP    ??StubAPS_BuildFrameControl_1 & 0xFFFF
    311          
    312            // Ack request
    313            if ( req->txOptions & APS_TX_OPTIONS_ACK )
   \                     ??StubAPS_BuildFrameControl_0:
   \   00002F   EC           MOV     A,R4
   \   000030   2415         ADD     A,#0x15
   \   000032   F582         MOV     DPL,A
   \   000034   E4           CLR     A
   \   000035   3D           ADDC    A,R5
   \   000036   F583         MOV     DPH,A
   \   000038   E0           MOVX    A,@DPTR
   \   000039   FE           MOV     R6,A
   \   00003A   A3           INC     DPTR
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   FF           MOV     R7,A
   \   00003D   EE           MOV     A,R6
   \   00003E   5404         ANL     A,#0x4
   \   000040   6005         JZ      ??StubAPS_BuildFrameControl_2
    314              return ( ZApsNotSupported );
   \   000042   79B6         MOV     R1,#-0x4a
   \   000044   02....       LJMP    ??StubAPS_BuildFrameControl_1 & 0xFFFF
    315          
    316             // Fragmentation
    317            if ( req->txOptions & APS_TX_OPTIONS_PERMIT_FRAGMENT )
   \                     ??StubAPS_BuildFrameControl_2:
   \   000047   EC           MOV     A,R4
   \   000048   2415         ADD     A,#0x15
   \   00004A   F582         MOV     DPL,A
   \   00004C   E4           CLR     A
   \   00004D   3D           ADDC    A,R5
   \   00004E   F583         MOV     DPH,A
   \   000050   E0           MOVX    A,@DPTR
   \   000051   FE           MOV     R6,A
   \   000052   A3           INC     DPTR
   \   000053   E0           MOVX    A,@DPTR
   \   000054   FF           MOV     R7,A
   \   000055   EE           MOV     A,R6
   \   000056   5408         ANL     A,#0x8
   \   000058   6005         JZ      ??StubAPS_BuildFrameControl_3
    318              return ( ZApsNotSupported );
   \   00005A   79B6         MOV     R1,#-0x4a
   \   00005C   02....       LJMP    ??StubAPS_BuildFrameControl_1 & 0xFFFF
    319          
    320            // set delivery mode
    321            if ( req->dstAddr.addrMode == AddrNotPresent )
   \                     ??StubAPS_BuildFrameControl_3:
   \   00005F   8C82         MOV     DPL,R4
   \   000061   8D83         MOV     DPH,R5
   \   000063   A3           INC     DPTR
   \   000064   A3           INC     DPTR
   \   000065   A3           INC     DPTR
   \   000066   A3           INC     DPTR
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   7005         JNZ     ??StubAPS_BuildFrameControl_4
    322              return ( ZApsNotSupported ); // No REFLECTOR
   \   00006E   79B6         MOV     R1,#-0x4a
   \   000070   02....       LJMP    ??StubAPS_BuildFrameControl_1 & 0xFFFF
    323          
    324            // set frame type
    325            *frmCtrl = STUB_APS_FRAME;
   \                     ??StubAPS_BuildFrameControl_4:
   \   000073   8882         MOV     DPL,R0
   \   000075   8983         MOV     DPH,R1
   \   000077   7403         MOV     A,#0x3
   \   000079   F0           MOVX    @DPTR,A
    326          
    327            // set DstAddrMode of MCPS-DATA Request to DstAddrMode of INTERP-Data Request
    328            dstAddr->addrMode = req->dstAddr.addrMode;
   \   00007A   8C82         MOV     DPL,R4
   \   00007C   8D83         MOV     DPH,R5
   \   00007E   A3           INC     DPTR
   \   00007F   A3           INC     DPTR
   \   000080   A3           INC     DPTR
   \   000081   A3           INC     DPTR
   \   000082   A3           INC     DPTR
   \   000083   A3           INC     DPTR
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   E0           MOVX    A,@DPTR
   \   000087   C0E0         PUSH    A
   \   000089   8A82         MOV     DPL,R2
   \   00008B   8B83         MOV     DPH,R3
   \   00008D   A3           INC     DPTR
   \   00008E   A3           INC     DPTR
   \   00008F   A3           INC     DPTR
   \   000090   A3           INC     DPTR
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   D0E0         POP     A
   \   000097   F0           MOVX    @DPTR,A
    329          
    330            // set DstAddr of MCPS-DATA Request to DstAddr of INTERP-Data Request
    331            if ( req->dstAddr.addrMode == AddrBroadcast )
   \   000098   8C82         MOV     DPL,R4
   \   00009A   8D83         MOV     DPH,R5
   \   00009C   A3           INC     DPTR
   \   00009D   A3           INC     DPTR
   \   00009E   A3           INC     DPTR
   \   00009F   A3           INC     DPTR
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   A3           INC     DPTR
   \   0000A3   A3           INC     DPTR
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   640F         XRL     A,#0xf
   \   0000A7   702C         JNZ     ??StubAPS_BuildFrameControl_5
    332            {
    333              *frmCtrl |= APS_FC_DM_BROADCAST;
   \   0000A9   8882         MOV     DPL,R0
   \   0000AB   8983         MOV     DPH,R1
   \   0000AD   E0           MOVX    A,@DPTR
   \   0000AE   D2E3         SETB    0xE0 /* A   */.3
   \   0000B0   F0           MOVX    @DPTR,A
    334          
    335              // set DstAddrMode of MCPS-DATA Request to short address
    336              dstAddr->addrMode = Addr16Bit;
   \   0000B1   8A82         MOV     DPL,R2
   \   0000B3   8B83         MOV     DPH,R3
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   A3           INC     DPTR
   \   0000B8   A3           INC     DPTR
   \   0000B9   A3           INC     DPTR
   \   0000BA   A3           INC     DPTR
   \   0000BB   A3           INC     DPTR
   \   0000BC   A3           INC     DPTR
   \   0000BD   7402         MOV     A,#0x2
   \   0000BF   F0           MOVX    @DPTR,A
    337              dstAddr->addr.shortAddr = req->dstAddr.addr.shortAddr;
   \   0000C0   8C82         MOV     DPL,R4
   \   0000C2   8D83         MOV     DPH,R5
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   F8           MOV     R0,A
   \   0000C6   A3           INC     DPTR
   \   0000C7   E0           MOVX    A,@DPTR
   \   0000C8   F9           MOV     R1,A
   \   0000C9   8A82         MOV     DPL,R2
   \   0000CB   8B83         MOV     DPH,R3
   \   0000CD   E8           MOV     A,R0
   \   0000CE   F0           MOVX    @DPTR,A
   \   0000CF   A3           INC     DPTR
   \   0000D0   E9           MOV     A,R1
   \   0000D1   F0           MOVX    @DPTR,A
   \   0000D2   02....       LJMP    ??StubAPS_BuildFrameControl_6 & 0xFFFF
    338            }
    339            else if ( req->dstAddr.addrMode == Addr16Bit )
   \                     ??StubAPS_BuildFrameControl_5:
   \   0000D5   8C82         MOV     DPL,R4
   \   0000D7   8D83         MOV     DPH,R5
   \   0000D9   A3           INC     DPTR
   \   0000DA   A3           INC     DPTR
   \   0000DB   A3           INC     DPTR
   \   0000DC   A3           INC     DPTR
   \   0000DD   A3           INC     DPTR
   \   0000DE   A3           INC     DPTR
   \   0000DF   A3           INC     DPTR
   \   0000E0   A3           INC     DPTR
   \   0000E1   E0           MOVX    A,@DPTR
   \   0000E2   6402         XRL     A,#0x2
   \   0000E4   7022         JNZ     ??StubAPS_BuildFrameControl_7
    340            {
    341              *frmCtrl |= APS_FC_DM_UNICAST;
   \   0000E6   8882         MOV     DPL,R0
   \   0000E8   8983         MOV     DPH,R1
   \   0000EA   E0           MOVX    A,@DPTR
   \   0000EB   C0E0         PUSH    A
   \   0000ED   8882         MOV     DPL,R0
   \   0000EF   8983         MOV     DPH,R1
   \   0000F1   D0E0         POP     A
   \   0000F3   F0           MOVX    @DPTR,A
    342              dstAddr->addr.shortAddr = req->dstAddr.addr.shortAddr;
   \   0000F4   8C82         MOV     DPL,R4
   \   0000F6   8D83         MOV     DPH,R5
   \   0000F8   E0           MOVX    A,@DPTR
   \   0000F9   F8           MOV     R0,A
   \   0000FA   A3           INC     DPTR
   \   0000FB   E0           MOVX    A,@DPTR
   \   0000FC   F9           MOV     R1,A
   \   0000FD   8A82         MOV     DPL,R2
   \   0000FF   8B83         MOV     DPH,R3
   \   000101   E8           MOV     A,R0
   \   000102   F0           MOVX    @DPTR,A
   \   000103   A3           INC     DPTR
   \   000104   E9           MOV     A,R1
   \   000105   F0           MOVX    @DPTR,A
   \   000106   8072         SJMP    ??StubAPS_BuildFrameControl_6
    343            }
    344            else if ( req->dstAddr.addrMode == Addr64Bit )
   \                     ??StubAPS_BuildFrameControl_7:
   \   000108   8C82         MOV     DPL,R4
   \   00010A   8D83         MOV     DPH,R5
   \   00010C   A3           INC     DPTR
   \   00010D   A3           INC     DPTR
   \   00010E   A3           INC     DPTR
   \   00010F   A3           INC     DPTR
   \   000110   A3           INC     DPTR
   \   000111   A3           INC     DPTR
   \   000112   A3           INC     DPTR
   \   000113   A3           INC     DPTR
   \   000114   E0           MOVX    A,@DPTR
   \   000115   6403         XRL     A,#0x3
   \   000117   7013         JNZ     ??StubAPS_BuildFrameControl_8
    345            {
    346              *frmCtrl |= APS_FC_DM_UNICAST;
   \   000119   8882         MOV     DPL,R0
   \   00011B   8983         MOV     DPH,R1
   \   00011D   E0           MOVX    A,@DPTR
   \   00011E   C0E0         PUSH    A
   \   000120   8882         MOV     DPL,R0
   \   000122   8983         MOV     DPH,R1
   \   000124   D0E0         POP     A
   \   000126   F0           MOVX    @DPTR,A
    347              osal_cpyExtAddr( dstAddr->addr.extAddr, req->dstAddr.addr.extAddr );
   \   000127                ; Setup parameters for call to function sAddrExtCpy
   \   000127   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00012A   804E         SJMP    ??StubAPS_BuildFrameControl_6
    348            }
    349            else if ( req->dstAddr.addrMode == AddrGroup )
   \                     ??StubAPS_BuildFrameControl_8:
   \   00012C   8C82         MOV     DPL,R4
   \   00012E   8D83         MOV     DPH,R5
   \   000130   A3           INC     DPTR
   \   000131   A3           INC     DPTR
   \   000132   A3           INC     DPTR
   \   000133   A3           INC     DPTR
   \   000134   A3           INC     DPTR
   \   000135   A3           INC     DPTR
   \   000136   A3           INC     DPTR
   \   000137   A3           INC     DPTR
   \   000138   E0           MOVX    A,@DPTR
   \   000139   6401         XRL     A,#0x1
   \   00013B   703D         JNZ     ??StubAPS_BuildFrameControl_6
    350            {
    351              *frmCtrl |= APS_FC_DM_GROUP;
   \   00013D   8882         MOV     DPL,R0
   \   00013F   8983         MOV     DPH,R1
   \   000141   E0           MOVX    A,@DPTR
   \   000142   440C         ORL     A,#0xc
   \   000144   F0           MOVX    @DPTR,A
    352          
    353              // set DstAddrMode of MCPS-DATA Request to short address
    354              dstAddr->addrMode = Addr16Bit;
   \   000145   8A82         MOV     DPL,R2
   \   000147   8B83         MOV     DPH,R3
   \   000149   A3           INC     DPTR
   \   00014A   A3           INC     DPTR
   \   00014B   A3           INC     DPTR
   \   00014C   A3           INC     DPTR
   \   00014D   A3           INC     DPTR
   \   00014E   A3           INC     DPTR
   \   00014F   A3           INC     DPTR
   \   000150   A3           INC     DPTR
   \   000151   7402         MOV     A,#0x2
   \   000153   F0           MOVX    @DPTR,A
    355          
    356              // set DstAddr of MCPS-DATA Request to 0xFFFF
    357              dstAddr->addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVALL;
   \   000154   8A82         MOV     DPL,R2
   \   000156   8B83         MOV     DPH,R3
   \   000158   74FF         MOV     A,#-0x1
   \   00015A   F0           MOVX    @DPTR,A
   \   00015B   A3           INC     DPTR
   \   00015C   74FF         MOV     A,#-0x1
   \   00015E   F0           MOVX    @DPTR,A
    358          
    359              // set Group ID to DstAddr of INTERP-Data Request
    360              *groupID = req->dstAddr.addr.shortAddr;
   \   00015F   8C82         MOV     DPL,R4
   \   000161   8D83         MOV     DPH,R5
   \   000163   E0           MOVX    A,@DPTR
   \   000164   F8           MOV     R0,A
   \   000165   A3           INC     DPTR
   \   000166   E0           MOVX    A,@DPTR
   \   000167   F9           MOV     R1,A
   \   000168   7409         MOV     A,#0x9
   \   00016A   12....       LCALL   ?XSTACK_DISP0_8
   \   00016D   E0           MOVX    A,@DPTR
   \   00016E   FA           MOV     R2,A
   \   00016F   A3           INC     DPTR
   \   000170   E0           MOVX    A,@DPTR
   \   000171   F583         MOV     DPH,A
   \   000173   8A82         MOV     DPL,R2
   \   000175   E8           MOV     A,R0
   \   000176   F0           MOVX    @DPTR,A
   \   000177   A3           INC     DPTR
   \   000178   E9           MOV     A,R1
   \   000179   F0           MOVX    @DPTR,A
    361            }
    362          
    363            return ( ZSuccess );
   \                     ??StubAPS_BuildFrameControl_6:
   \   00017A   7900         MOV     R1,#0x0
   \                     ??StubAPS_BuildFrameControl_1:
   \   00017C   7F01         MOV     R7,#0x1
   \   00017E   02....       LJMP    ?BANKED_LEAVE_XDATA
    364          
    365          } /* StubAPS_BuildFrameControl */
    366          
    367          /******************************************************************************
    368           * @fn          StubNWK_BuildMsg
    369           *
    370           * @brief       This function builds a Stub NWK frame.
    371           *
    372           * @param       nwkHdr - stub NWK header
    373           *
    374           * @return      none
    375           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    376          static void StubNWK_BuildMsg( uint8 *nwkHdr )
   \                     StubNWK_BuildMsg:
    377          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    378            uint16 frmCtrl = 0;
   \   000009   75..00       MOV     ?V0,#0x0
   \   00000C   75..00       MOV     ?V1,#0x0
    379            uint8  protoVer = NLME_GetProtocolVersion();
   \   00000F                ; Setup parameters for call to function NLME_GetProtocolVersion
   \   00000F   12....       LCALL   `??NLME_GetProtocolVersion::?relay`; Banked call to: NLME_GetProtocolVersion
   \   000012   E9           MOV     A,R1
   \   000013   F5..         MOV     ?V2,A
    380          
    381            // frame type
    382            frmCtrl |= (STUB_NWK_FRAME_TYPE << NWK_FC_FRAME_TYPE);
   \   000015   7403         MOV     A,#0x3
   \   000017   45..         ORL     A,?V0
   \   000019   F5..         MOV     ?V0,A
   \   00001B   7400         MOV     A,#0x0
   \   00001D   45..         ORL     A,?V1
   \   00001F   F5..         MOV     ?V1,A
    383          
    384            // protocol version
    385            frmCtrl |= (protoVer << NWK_FC_PROT_VERSION);
   \   000021   75..00       MOV     ?V3,#0x0
   \   000024   7402         MOV     A,#0x2
   \   000026   78..         MOV     R0,#?V2
   \   000028   12....       LCALL   ?S_SHL
   \   00002B   E5..         MOV     A,?V2
   \   00002D   45..         ORL     A,?V0
   \   00002F   F5..         MOV     ?V0,A
   \   000031   E5..         MOV     A,?V3
   \   000033   45..         ORL     A,?V1
   \   000035   F5..         MOV     ?V1,A
    386          
    387            // set Stub NWK header
    388            *nwkHdr++ = LO_UINT16( frmCtrl );
   \   000037   E5..         MOV     A,?V0
   \   000039   C0E0         PUSH    A
   \   00003B   8E82         MOV     DPL,R6
   \   00003D   8F83         MOV     DPH,R7
   \   00003F   D0E0         POP     A
   \   000041   F0           MOVX    @DPTR,A
   \   000042   8E82         MOV     DPL,R6
   \   000044   8F83         MOV     DPH,R7
   \   000046   A3           INC     DPTR
   \   000047   AE82         MOV     R6,DPL
   \   000049   AF83         MOV     R7,DPH
    389            *nwkHdr++ = HI_UINT16( frmCtrl );
   \   00004B   E4           CLR     A
   \   00004C   C5..         XCH     A,?V1
   \   00004E   F5..         MOV     ?V0,A
   \   000050   E5..         MOV     A,?V0
   \   000052   C0E0         PUSH    A
   \   000054   8E82         MOV     DPL,R6
   \   000056   8F83         MOV     DPH,R7
   \   000058   D0E0         POP     A
   \   00005A   F0           MOVX    @DPTR,A
   \   00005B   8E82         MOV     DPL,R6
   \   00005D   8F83         MOV     DPH,R7
   \   00005F   A3           INC     DPTR
   \   000060   AE82         MOV     R6,DPL
   \   000062   AF83         MOV     R7,DPH
    390          
    391          } /* StubNWK_BuildMsg */
   \   000064   7F04         MOV     R7,#0x4
   \   000066   02....       LJMP    ?BANKED_LEAVE_XDATA
    392          
    393          /******************************************************************************
    394           * @fn          StubAPS_BuildMsg
    395           *
    396           * @brief       This function builds a Stub APS frame.
    397           *
    398           * @param       apsHdr - stub APS header
    399           * @param       frmCtrl - stub APS frame control
    400           * @param       groupID - group id
    401           * @param       req - APSDE_DataReq_t
    402           *
    403           * @return      none
    404           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    405          static void StubAPS_BuildMsg( uint8 *apsHdr, uint8 frmCtrl, uint16 groupID, APSDE_DataReq_t *req )
   \                     StubAPS_BuildMsg:
    406          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    407            // add frame type
    408            *apsHdr++ = frmCtrl;
   \   000007   EE           MOV     A,R6
   \   000008   C0E0         PUSH    A
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   D0E0         POP     A
   \   000010   F0           MOVX    @DPTR,A
   \   000011   8A82         MOV     DPL,R2
   \   000013   8B83         MOV     DPH,R3
   \   000015   A3           INC     DPTR
   \   000016   AA82         MOV     R2,DPL
   \   000018   AB83         MOV     R3,DPH
    409          
    410            // add Group ID
    411            if ( ( frmCtrl & APS_DELIVERYMODE_MASK ) == APS_FC_DM_GROUP )
   \   00001A   740C         MOV     A,#0xc
   \   00001C   5E           ANL     A,R6
   \   00001D   640C         XRL     A,#0xc
   \   00001F   7029         JNZ     ??StubAPS_BuildMsg_0
    412            {
    413              *apsHdr++ = LO_UINT16( groupID );
   \   000021   EC           MOV     A,R4
   \   000022   C0E0         PUSH    A
   \   000024   8A82         MOV     DPL,R2
   \   000026   8B83         MOV     DPH,R3
   \   000028   D0E0         POP     A
   \   00002A   F0           MOVX    @DPTR,A
   \   00002B   8A82         MOV     DPL,R2
   \   00002D   8B83         MOV     DPH,R3
   \   00002F   A3           INC     DPTR
   \   000030   AA82         MOV     R2,DPL
   \   000032   AB83         MOV     R3,DPH
    414              *apsHdr++ = HI_UINT16( groupID );
   \   000034   E4           CLR     A
   \   000035   CD           XCH     A,R5
   \   000036   FC           MOV     R4,A
   \   000037   EC           MOV     A,R4
   \   000038   C0E0         PUSH    A
   \   00003A   8A82         MOV     DPL,R2
   \   00003C   8B83         MOV     DPH,R3
   \   00003E   D0E0         POP     A
   \   000040   F0           MOVX    @DPTR,A
   \   000041   8A82         MOV     DPL,R2
   \   000043   8B83         MOV     DPH,R3
   \   000045   A3           INC     DPTR
   \   000046   AA82         MOV     R2,DPL
   \   000048   AB83         MOV     R3,DPH
   \                     ??StubAPS_BuildMsg_0:
   \   00004A   740B         MOV     A,#0xb
   \   00004C   12....       LCALL   ?XSTACK_DISP0_8
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   FC           MOV     R4,A
   \   000051   A3           INC     DPTR
   \   000052   E0           MOVX    A,@DPTR
   \   000053   FD           MOV     R5,A
    415            }
    416          
    417            // add clusterID
    418            *apsHdr++ = LO_UINT16( req->clusterID );
   \   000054   EC           MOV     A,R4
   \   000055   240D         ADD     A,#0xd
   \   000057   F582         MOV     DPL,A
   \   000059   E4           CLR     A
   \   00005A   3D           ADDC    A,R5
   \   00005B   F583         MOV     DPH,A
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   F8           MOV     R0,A
   \   00005F   A3           INC     DPTR
   \   000060   E0           MOVX    A,@DPTR
   \   000061   F9           MOV     R1,A
   \   000062   E8           MOV     A,R0
   \   000063   C0E0         PUSH    A
   \   000065   8A82         MOV     DPL,R2
   \   000067   8B83         MOV     DPH,R3
   \   000069   D0E0         POP     A
   \   00006B   F0           MOVX    @DPTR,A
   \   00006C   8A82         MOV     DPL,R2
   \   00006E   8B83         MOV     DPH,R3
   \   000070   A3           INC     DPTR
   \   000071   AA82         MOV     R2,DPL
   \   000073   AB83         MOV     R3,DPH
    419            *apsHdr++ = HI_UINT16( req->clusterID );
   \   000075   EC           MOV     A,R4
   \   000076   240D         ADD     A,#0xd
   \   000078   F582         MOV     DPL,A
   \   00007A   E4           CLR     A
   \   00007B   3D           ADDC    A,R5
   \   00007C   F583         MOV     DPH,A
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   F8           MOV     R0,A
   \   000080   A3           INC     DPTR
   \   000081   E0           MOVX    A,@DPTR
   \   000082   F9           MOV     R1,A
   \   000083   E4           CLR     A
   \   000084   C9           XCH     A,R1
   \   000085   F8           MOV     R0,A
   \   000086   E8           MOV     A,R0
   \   000087   C0E0         PUSH    A
   \   000089   8A82         MOV     DPL,R2
   \   00008B   8B83         MOV     DPH,R3
   \   00008D   D0E0         POP     A
   \   00008F   F0           MOVX    @DPTR,A
   \   000090   8A82         MOV     DPL,R2
   \   000092   8B83         MOV     DPH,R3
   \   000094   A3           INC     DPTR
   \   000095   AA82         MOV     R2,DPL
   \   000097   AB83         MOV     R3,DPH
    420          
    421            // add profile ID
    422            *apsHdr++ = LO_UINT16( req->profileID );
   \   000099   EC           MOV     A,R4
   \   00009A   240F         ADD     A,#0xf
   \   00009C   F582         MOV     DPL,A
   \   00009E   E4           CLR     A
   \   00009F   3D           ADDC    A,R5
   \   0000A0   F583         MOV     DPH,A
   \   0000A2   E0           MOVX    A,@DPTR
   \   0000A3   F8           MOV     R0,A
   \   0000A4   A3           INC     DPTR
   \   0000A5   E0           MOVX    A,@DPTR
   \   0000A6   F9           MOV     R1,A
   \   0000A7   E8           MOV     A,R0
   \   0000A8   C0E0         PUSH    A
   \   0000AA   8A82         MOV     DPL,R2
   \   0000AC   8B83         MOV     DPH,R3
   \   0000AE   D0E0         POP     A
   \   0000B0   F0           MOVX    @DPTR,A
   \   0000B1   8A82         MOV     DPL,R2
   \   0000B3   8B83         MOV     DPH,R3
   \   0000B5   A3           INC     DPTR
   \   0000B6   AA82         MOV     R2,DPL
   \   0000B8   AB83         MOV     R3,DPH
    423            *apsHdr++ = HI_UINT16( req->profileID );
   \   0000BA   EC           MOV     A,R4
   \   0000BB   240F         ADD     A,#0xf
   \   0000BD   F582         MOV     DPL,A
   \   0000BF   E4           CLR     A
   \   0000C0   3D           ADDC    A,R5
   \   0000C1   F583         MOV     DPH,A
   \   0000C3   E0           MOVX    A,@DPTR
   \   0000C4   F8           MOV     R0,A
   \   0000C5   A3           INC     DPTR
   \   0000C6   E0           MOVX    A,@DPTR
   \   0000C7   F9           MOV     R1,A
   \   0000C8   E4           CLR     A
   \   0000C9   C9           XCH     A,R1
   \   0000CA   F8           MOV     R0,A
   \   0000CB   E8           MOV     A,R0
   \   0000CC   C0E0         PUSH    A
   \   0000CE   8A82         MOV     DPL,R2
   \   0000D0   8B83         MOV     DPH,R3
   \   0000D2   D0E0         POP     A
   \   0000D4   F0           MOVX    @DPTR,A
   \   0000D5   8A82         MOV     DPL,R2
   \   0000D7   8B83         MOV     DPH,R3
   \   0000D9   A3           INC     DPTR
   \   0000DA   AA82         MOV     R2,DPL
   \   0000DC   AB83         MOV     R3,DPH
    424          
    425            // copy ASDU data into frame
    426            osal_memcpy ( apsHdr, req->asdu, req->asduLen );
   \   0000DE                ; Setup parameters for call to function osal_memcpy
   \   0000DE   EC           MOV     A,R4
   \   0000DF   2413         ADD     A,#0x13
   \   0000E1   F582         MOV     DPL,A
   \   0000E3   E4           CLR     A
   \   0000E4   3D           ADDC    A,R5
   \   0000E5   F583         MOV     DPH,A
   \   0000E7   E0           MOVX    A,@DPTR
   \   0000E8   F5..         MOV     ?V0,A
   \   0000EA   A3           INC     DPTR
   \   0000EB   E0           MOVX    A,@DPTR
   \   0000EC   F5..         MOV     ?V1,A
   \   0000EE   75..00       MOV     ?V2,#0x0
   \   0000F1   78..         MOV     R0,#?V0
   \   0000F3   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000F6   EC           MOV     A,R4
   \   0000F7   2411         ADD     A,#0x11
   \   0000F9   F582         MOV     DPL,A
   \   0000FB   E4           CLR     A
   \   0000FC   3D           ADDC    A,R5
   \   0000FD   F583         MOV     DPH,A
   \   0000FF   E0           MOVX    A,@DPTR
   \   000100   FC           MOV     R4,A
   \   000101   A3           INC     DPTR
   \   000102   E0           MOVX    A,@DPTR
   \   000103   FD           MOV     R5,A
   \   000104   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000107   7403         MOV     A,#0x3
   \   000109   12....       LCALL   ?DEALLOC_XSTACK8
    427          
    428          } /* StubAPS_BuildMsg */
   \   00010C   7F03         MOV     R7,#0x3
   \   00010E   02....       LJMP    ?BANKED_LEAVE_XDATA
    429          
    430          /******************************************************************************
    431           * @fn          StubAPS_setNewChannel
    432           *
    433           * @brief       This function changes the device's channel.
    434           *
    435           * @param       none
    436           *
    437           * @return      ZStatus_t
    438           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    439          static ZStatus_t StubAPS_SetNewChannel( uint8 channel )
   \                     StubAPS_SetNewChannel:
    440          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 2
   \   000004   74FE         MOV     A,#-0x2
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   \   000009   E9           MOV     A,R1
   \   00000A   C0E0         PUSH    A
   \   00000C   7401         MOV     A,#0x1
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   D0E0         POP     A
   \   000013   F0           MOVX    @DPTR,A
    441            uint8 rxOnIdle;
    442          
    443            // make sure MAC has nothing to transmit
    444            if ( ( nwkDB_CountTypes( NWK_DATABUF_SENT ) == 0 ) && ZMacStateIdle() )
   \   000014                ; Setup parameters for call to function nwkDB_CountTypes
   \   000014   7902         MOV     R1,#0x2
   \   000016   12....       LCALL   `??nwkDB_CountTypes::?relay`; Banked call to: nwkDB_CountTypes
   \   000019   E9           MOV     A,R1
   \   00001A   702E         JNZ     ??StubAPS_SetNewChannel_0
   \   00001C                ; Setup parameters for call to function ZMacStateIdle
   \   00001C   12....       LCALL   `??ZMacStateIdle::?relay`; Banked call to: ZMacStateIdle
   \   00001F   E9           MOV     A,R1
   \   000020   6028         JZ      ??StubAPS_SetNewChannel_0
    445            {
    446              // set the new channel
    447              ZMacSetReq( ZMacChannel, &channel );
   \   000022                ; Setup parameters for call to function ZMacSetReq
   \   000022   7401         MOV     A,#0x1
   \   000024   12....       LCALL   ?XSTACK_DISP101_8
   \   000027   79E1         MOV     R1,#-0x1f
   \   000029   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   \   00002C   E9           MOV     A,R1
    448          
    449              // turn MAC receiver back on
    450              rxOnIdle = true;
   \   00002D   85..82       MOV     DPL,?XSP + 0
   \   000030   85..83       MOV     DPH,?XSP + 1
   \   000033   7401         MOV     A,#0x1
   \   000035   F0           MOVX    @DPTR,A
    451              ZMacSetReq( ZMacRxOnIdle, &rxOnIdle );
   \   000036                ; Setup parameters for call to function ZMacSetReq
   \   000036   AA..         MOV     R2,?XSP + 0
   \   000038   AB..         MOV     R3,?XSP + 1
   \   00003A   7952         MOV     R1,#0x52
   \   00003C   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   \   00003F   E9           MOV     A,R1
    452          
    453              channelChangeInProgress = FALSE;
   \   000040   90....       MOV     DPTR,#channelChangeInProgress
   \   000043   7400         MOV     A,#0x0
   \   000045   F0           MOVX    @DPTR,A
    454          
    455              return ( ZSuccess );
   \   000046   7900         MOV     R1,#0x0
   \   000048   8002         SJMP    ??StubAPS_SetNewChannel_1
    456            }
    457          
    458            return ( ZFailure );
   \                     ??StubAPS_SetNewChannel_0:
   \   00004A   7901         MOV     R1,#0x1
   \                     ??StubAPS_SetNewChannel_1:
   \   00004C   7402         MOV     A,#0x2
   \   00004E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000051   D083         POP     DPH
   \   000053   D082         POP     DPL
   \   000055   02....       LJMP    ?BRET
    459          
    460          } /* StubAPS_setNewChannel */
    461          
    462          
    463          /******************************************************************************
    464           * @fn          StubAPS_NotifyApp
    465           *
    466           * @brief       This function sends an OSAL message to the Application task.
    467           *
    468           * @param       status - command status
    469           *
    470           * @return      none
    471           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    472          static void StubAPS_NotifyApp( uint8 status )
   \                     StubAPS_NotifyApp:
    473          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    474            osal_event_hdr_t *msgPtr;
    475          
    476            // Notify the application task
    477            msgPtr = (osal_event_hdr_t *)osal_msg_allocate( sizeof(osal_event_hdr_t) );
   \   000007                ; Setup parameters for call to function osal_msg_allocate
   \   000007   7A02         MOV     R2,#0x2
   \   000009   7B00         MOV     R3,#0x0
   \   00000B   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   00000E   8A..         MOV     ?V0,R2
   \   000010   8B..         MOV     ?V1,R3
   \   000012   AA..         MOV     R2,?V0
   \   000014   AB..         MOV     R3,?V1
    478            if ( msgPtr )
   \   000016   EA           MOV     A,R2
   \   000017   4B           ORL     A,R3
   \   000018   601B         JZ      ??StubAPS_NotifyApp_0
    479            {
    480              msgPtr->event = SAPS_CHANNEL_CHANGE;
   \   00001A   8A82         MOV     DPL,R2
   \   00001C   8B83         MOV     DPH,R3
   \   00001E   7433         MOV     A,#0x33
   \   000020   F0           MOVX    @DPTR,A
    481              msgPtr->status = status;
   \   000021   EE           MOV     A,R6
   \   000022   C0E0         PUSH    A
   \   000024   8A82         MOV     DPL,R2
   \   000026   8B83         MOV     DPH,R3
   \   000028   A3           INC     DPTR
   \   000029   D0E0         POP     A
   \   00002B   F0           MOVX    @DPTR,A
    482          
    483              osal_msg_send( appTaskID, (uint8 *)msgPtr );
   \   00002C                ; Setup parameters for call to function osal_msg_send
   \   00002C   90....       MOV     DPTR,#appTaskID
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F9           MOV     R1,A
   \   000031   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   000034   E9           MOV     A,R1
    484            }
    485          
    486          } /* StubAPS_NotifyApp */
   \                     ??StubAPS_NotifyApp_0:
   \   000035   7F02         MOV     R7,#0x2
   \   000037   02....       LJMP    ?BANKED_LEAVE_XDATA
    487          
    488          /******************************************************************************
    489           *
    490           *  External APIs provided to the Application.
    491           */
    492          
    493          /******************************************************************************
    494           * @fn          StubAPS_SetInterPanChannel
    495           *
    496           * @brief       This function changes the device's channel for inter-PAN communication.
    497           *
    498           * @param       channel - new channel
    499           *
    500           * @return      ZStatus_t
    501           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    502          ZStatus_t StubAPS_SetInterPanChannel( uint8 channel )
   \                     StubAPS_SetInterPanChannel:
    503          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    504            uint8 currChannel;
    505            uint8 rxOnIdle;
    506          
    507            if ( channelChangeInProgress )
   \   00000C   90....       MOV     DPTR,#channelChangeInProgress
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   6004         JZ      ??StubAPS_SetInterPanChannel_0
    508              return ( ZFailure );
   \   000012   7901         MOV     R1,#0x1
   \   000014   8061         SJMP    ??StubAPS_SetInterPanChannel_1
    509          
    510            ZMacGetReq( ZMacChannel, &currChannel );
   \                     ??StubAPS_SetInterPanChannel_0:
   \   000016                ; Setup parameters for call to function ZMacGetReq
   \   000016   7401         MOV     A,#0x1
   \   000018   12....       LCALL   ?XSTACK_DISP101_8
   \   00001B   79E1         MOV     R1,#-0x1f
   \   00001D   12....       LCALL   `??ZMacGetReq::?relay`; Banked call to: ZMacGetReq
   \   000020   E9           MOV     A,R1
    511            if ( currChannel == channel )
   \   000021   7401         MOV     A,#0x1
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   E0           MOVX    A,@DPTR
   \   000027   6E           XRL     A,R6
   \   000028   7004         JNZ     ??StubAPS_SetInterPanChannel_2
    512            {
    513              // inter PANs communication within the same channel
    514              return ( ZSuccess );
   \   00002A   7900         MOV     R1,#0x0
   \   00002C   8049         SJMP    ??StubAPS_SetInterPanChannel_1
    515            }
    516          
    517            // go into channel transition state
    518            channelChangeInProgress = TRUE;
   \                     ??StubAPS_SetInterPanChannel_2:
   \   00002E   90....       MOV     DPTR,#channelChangeInProgress
   \   000031   7401         MOV     A,#0x1
   \   000033   F0           MOVX    @DPTR,A
    519          
    520            // set NWK task to idle
    521            nwk_setStateIdle( TRUE );
   \   000034                ; Setup parameters for call to function nwk_setStateIdle
   \   000034   7901         MOV     R1,#0x1
   \   000036   12....       LCALL   `??nwk_setStateIdle::?relay`; Banked call to: nwk_setStateIdle
    522          
    523            // turn MAC receiver off
    524            rxOnIdle = false;
   \   000039   85..82       MOV     DPL,?XSP + 0
   \   00003C   85..83       MOV     DPH,?XSP + 1
   \   00003F   7400         MOV     A,#0x0
   \   000041   F0           MOVX    @DPTR,A
    525            ZMacSetReq( ZMacRxOnIdle, &rxOnIdle );
   \   000042                ; Setup parameters for call to function ZMacSetReq
   \   000042   AA..         MOV     R2,?XSP + 0
   \   000044   AB..         MOV     R3,?XSP + 1
   \   000046   7952         MOV     R1,#0x52
   \   000048   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   \   00004B   E9           MOV     A,R1
    526          
    527            // try to change to the new channel
    528            if ( StubAPS_SetNewChannel( channel ) == ZSuccess )
   \   00004C                ; Setup parameters for call to function StubAPS_SetNewChannel
   \   00004C   EE           MOV     A,R6
   \   00004D   F9           MOV     R1,A
   \   00004E   12....       LCALL   `??StubAPS_SetNewChannel::?relay`; Banked call to: StubAPS_SetNewChannel
   \   000051   E9           MOV     A,R1
   \   000052   7004         JNZ     ??StubAPS_SetInterPanChannel_3
    529              return ( ZSuccess );
   \   000054   7900         MOV     R1,#0x0
   \   000056   801F         SJMP    ??StubAPS_SetInterPanChannel_1
    530          
    531            // save the new channel for retry
    532            newChannel = channel;
   \                     ??StubAPS_SetInterPanChannel_3:
   \   000058   EE           MOV     A,R6
   \   000059   90....       MOV     DPTR,#newChannel
   \   00005C   F0           MOVX    @DPTR,A
    533          
    534            // ask StubAPS task to retry it later
    535            osal_start_timerEx( StubAPS_TaskID, CHANNEL_CHANGE_EVT, CHANNEL_CHANGE_RETRY_TIMEOUT );
   \   00005D                ; Setup parameters for call to function osal_start_timerEx
   \   00005D   90....       MOV     DPTR,#__Constant_64
   \   000060   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000063   7A01         MOV     R2,#0x1
   \   000065   7B00         MOV     R3,#0x0
   \   000067   90....       MOV     DPTR,#StubAPS_TaskID
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   F9           MOV     R1,A
   \   00006C   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00006F   7404         MOV     A,#0x4
   \   000071   12....       LCALL   ?DEALLOC_XSTACK8
   \   000074   E9           MOV     A,R1
    536          
    537            return ( ZApsNotAllowed );
   \   000075   79BA         MOV     R1,#-0x46
   \                     ??StubAPS_SetInterPanChannel_1:
   \   000077   7402         MOV     A,#0x2
   \   000079   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007C   7F01         MOV     R7,#0x1
   \   00007E   02....       LJMP    ?BANKED_LEAVE_XDATA
    538          
    539          } /* StubAPS_SetInterPanChannel */
    540          
    541          /******************************************************************************
    542           * @fn          StubAPS_SetIntraPanChannel
    543           *
    544           * @brief       This function sets the device's channel back to the NIB channel.
    545           *
    546           * @param       none
    547           *
    548           * @return      ZStatus_t
    549           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    550          ZStatus_t StubAPS_SetIntraPanChannel( void )
   \                     StubAPS_SetIntraPanChannel:
    551          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 2
   \   000004   74FE         MOV     A,#-0x2
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    552            uint8 currChannel;
    553            uint8 rxOnIdle;
    554          
    555            if ( channelChangeInProgress )
   \   000009   90....       MOV     DPTR,#channelChangeInProgress
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6004         JZ      ??StubAPS_SetIntraPanChannel_0
    556              return ( ZFailure );
   \   00000F   7901         MOV     R1,#0x1
   \   000011   8060         SJMP    ??StubAPS_SetIntraPanChannel_1
    557          
    558            ZMacGetReq( ZMacChannel, &currChannel );
   \                     ??StubAPS_SetIntraPanChannel_0:
   \   000013                ; Setup parameters for call to function ZMacGetReq
   \   000013   7401         MOV     A,#0x1
   \   000015   12....       LCALL   ?XSTACK_DISP101_8
   \   000018   79E1         MOV     R1,#-0x1f
   \   00001A   12....       LCALL   `??ZMacGetReq::?relay`; Banked call to: ZMacGetReq
   \   00001D   E9           MOV     A,R1
    559            if ( currChannel == _NIB.nwkLogicalChannel )
   \   00001E   7401         MOV     A,#0x1
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F8           MOV     R0,A
   \   000025   90....       MOV     DPTR,#_NIB + 22
   \   000028   E0           MOVX    A,@DPTR
   \   000029   68           XRL     A,R0
   \   00002A   7004         JNZ     ??StubAPS_SetIntraPanChannel_2
    560              return ( ZSuccess );
   \   00002C   7900         MOV     R1,#0x0
   \   00002E   8043         SJMP    ??StubAPS_SetIntraPanChannel_1
    561          
    562            channelChangeInProgress = TRUE;
   \                     ??StubAPS_SetIntraPanChannel_2:
   \   000030   90....       MOV     DPTR,#channelChangeInProgress
   \   000033   7401         MOV     A,#0x1
   \   000035   F0           MOVX    @DPTR,A
    563          
    564            // turn MAC receiver off
    565            rxOnIdle = false;
   \   000036   85..82       MOV     DPL,?XSP + 0
   \   000039   85..83       MOV     DPH,?XSP + 1
   \   00003C   7400         MOV     A,#0x0
   \   00003E   F0           MOVX    @DPTR,A
    566            ZMacSetReq( ZMacRxOnIdle, &rxOnIdle );
   \   00003F                ; Setup parameters for call to function ZMacSetReq
   \   00003F   AA..         MOV     R2,?XSP + 0
   \   000041   AB..         MOV     R3,?XSP + 1
   \   000043   7952         MOV     R1,#0x52
   \   000045   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   \   000048   E9           MOV     A,R1
    567          
    568            // set the NIB channel
    569            ZMacSetReq( ZMacChannel, &(_NIB.nwkLogicalChannel) );
   \   000049                ; Setup parameters for call to function ZMacSetReq
   \   000049   7A..         MOV     R2,#(_NIB + 22) & 0xff
   \   00004B   7B..         MOV     R3,#((_NIB + 22) >> 8) & 0xff
   \   00004D   79E1         MOV     R1,#-0x1f
   \   00004F   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   \   000052   E9           MOV     A,R1
    570          
    571            // turn MAC receiver back on
    572            rxOnIdle = true;
   \   000053   85..82       MOV     DPL,?XSP + 0
   \   000056   85..83       MOV     DPH,?XSP + 1
   \   000059   7401         MOV     A,#0x1
   \   00005B   F0           MOVX    @DPTR,A
    573            ZMacSetReq( ZMacRxOnIdle, &rxOnIdle );
   \   00005C                ; Setup parameters for call to function ZMacSetReq
   \   00005C   AA..         MOV     R2,?XSP + 0
   \   00005E   AB..         MOV     R3,?XSP + 1
   \   000060   7952         MOV     R1,#0x52
   \   000062   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   \   000065   E9           MOV     A,R1
    574          
    575            // set NWK task to run
    576            nwk_setStateIdle( FALSE );
   \   000066                ; Setup parameters for call to function nwk_setStateIdle
   \   000066   7900         MOV     R1,#0x0
   \   000068   12....       LCALL   `??nwk_setStateIdle::?relay`; Banked call to: nwk_setStateIdle
    577          
    578            channelChangeInProgress = FALSE;
   \   00006B   90....       MOV     DPTR,#channelChangeInProgress
   \   00006E   7400         MOV     A,#0x0
   \   000070   F0           MOVX    @DPTR,A
    579          
    580            return ( ZSuccess );
   \   000071   7900         MOV     R1,#0x0
   \                     ??StubAPS_SetIntraPanChannel_1:
   \   000073   7402         MOV     A,#0x2
   \   000075   12....       LCALL   ?DEALLOC_XSTACK8
   \   000078   D083         POP     DPH
   \   00007A   D082         POP     DPL
   \   00007C   02....       LJMP    ?BRET
    581          
    582          } /* StubAPS_SetIntraPanChannel */
    583          
    584          /******************************************************************************
    585           * @fn          StubAPS_InterPan
    586           *
    587           * @brief       This function checks to see if a PAN is an Inter-PAN.
    588           *
    589           * @param       panId - PAN ID
    590           * @param       endPoint - endpoint
    591           *
    592           * @return      TRUE if PAN is Inter-PAN, FALSE otherwise
    593           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    594          uint8 StubAPS_InterPan( uint16 panId, uint8 endPoint )
   \                     StubAPS_InterPan:
    595          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   \   000000   E9           MOV     A,R1
   \   000001   F8           MOV     R0,A
    596            (void)panId; // Intentionally unreferenced parameter
    597          
    598            // No need to check the MAC/NIB Channels or Source/Destination PAN IDs
    599            // since it's possible to send Inter-PAN messages within the same network.
    600            if ( endPoint == STUBAPS_INTER_PAN_EP )
   \   000002   74FE         MOV     A,#-0x2
   \   000004   68           XRL     A,R0
   \   000005   7004         JNZ     ??StubAPS_InterPan_0
    601            {
    602              // Inter-PAN endpoint
    603              return ( TRUE );
   \   000007   7901         MOV     R1,#0x1
   \   000009   8002         SJMP    ??StubAPS_InterPan_1
    604            }
    605          
    606            return ( FALSE );
   \                     ??StubAPS_InterPan_0:
   \   00000B   7900         MOV     R1,#0x0
   \                     ??StubAPS_InterPan_1:
   \   00000D   02....       LJMP    ?BRET
    607          
    608          } /* StubAPS_InterPan */
    609          
    610          /******************************************************************************
    611           * @fn          StubAPS_RegisterApp
    612           *
    613           * @brief       This function registers the Application with the Stub APS layer.
    614           *
    615           *              NOTE: Since Stub APS messages don't include the application
    616           *                    endpoint, the application has to register its endpoint
    617           *                    with Stub APS.
    618           *
    619           * @param       epDesc - application's endpoint descriptor
    620           *
    621           * @return      none
    622           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    623          void StubAPS_RegisterApp( endPointDesc_t *epDesc )
   \                     StubAPS_RegisterApp:
    624          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    625            appTaskID = *epDesc->task_id;
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   F8           MOV     R0,A
   \   00000B   A3           INC     DPTR
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F583         MOV     DPH,A
   \   00000F   8882         MOV     DPL,R0
   \   000011   E0           MOVX    A,@DPTR
   \   000012   90....       MOV     DPTR,#appTaskID
   \   000015   F0           MOVX    @DPTR,A
    626            appEndPoint = epDesc->endPoint;
   \   000016   8A82         MOV     DPL,R2
   \   000018   8B83         MOV     DPH,R3
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   90....       MOV     DPTR,#appEndPoint
   \   00001E   F0           MOVX    @DPTR,A
    627          
    628          } /* StubAPS_RegisterApp */
   \   00001F   D083         POP     DPH
   \   000021   D082         POP     DPL
   \   000023   02....       LJMP    ?BRET
    629          
    630          /******************************************************************************
    631           * @fn          StubAPS_ZMacCallback
    632           *
    633           * @brief       This function accepts an inter-PAN message from ZMac.
    634           *
    635           * @param       msgPtr - received message
    636           *
    637           * @return      TRUE if message is processed. FALSE otherwise.
    638           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    639          uint8 StubAPS_ZMacCallback( uint8 *msgPtr )
   \                     StubAPS_ZMacCallback:
    640          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    641            uint16 nwk_fc;
    642            uint8  aps_fc;
    643            uint8  frameType;
    644            uint8 *buf = NULL;
   \   000005   7800         MOV     R0,#0x0
   \   000007   7900         MOV     R1,#0x0
    645            uint8  event = ((osal_event_hdr_t *)msgPtr)->event;
   \   000009   8A82         MOV     DPL,R2
   \   00000B   8B83         MOV     DPH,R3
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   FC           MOV     R4,A
    646          
    647            if ( event == MAC_MCPS_DATA_IND )
   \   00000F   740D         MOV     A,#0xd
   \   000011   6C           XRL     A,R4
   \   000012   700D         JNZ     ??StubAPS_ZMacCallback_0
    648            {
    649              buf = ((macMcpsDataInd_t *)msgPtr)->msdu.p;
   \   000014   8A82         MOV     DPL,R2
   \   000016   8B83         MOV     DPH,R3
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F8           MOV     R0,A
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F9           MOV     R1,A
   \   00001F   801B         SJMP    ??StubAPS_ZMacCallback_1
    650            }
    651            else if ( event == MAC_MCPS_DATA_CNF )
   \                     ??StubAPS_ZMacCallback_0:
   \   000021   740C         MOV     A,#0xc
   \   000023   6C           XRL     A,R4
   \   000024   7016         JNZ     ??StubAPS_ZMacCallback_1
    652            {
    653              buf = ((macMcpsDataCnf_t *)msgPtr)->pDataReq->msdu.p;
   \   000026   8A82         MOV     DPL,R2
   \   000028   8B83         MOV     DPH,R3
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F8           MOV     R0,A
   \   00002F   A3           INC     DPTR
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F583         MOV     DPH,A
   \   000033   8882         MOV     DPL,R0
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   F8           MOV     R0,A
   \   000039   A3           INC     DPTR
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   F9           MOV     R1,A
    654            }
    655          
    656            if ( buf )
   \                     ??StubAPS_ZMacCallback_1:
   \   00003C   E8           MOV     A,R0
   \   00003D   49           ORL     A,R1
   \   00003E   6049         JZ      ??StubAPS_ZMacCallback_2
    657            {
    658              // get the NWK frame control
    659              nwk_fc = BUILD_UINT16( buf[NWK_HDR_FRAME_CTRL_LSB], buf[NWK_HDR_FRAME_CTRL_MSB] );
   \   000040   8882         MOV     DPL,R0
   \   000042   8983         MOV     DPH,R1
   \   000044   E0           MOVX    A,@DPTR
   \   000045   FE           MOV     R6,A
   \   000046   7F00         MOV     R7,#0x0
   \   000048   8882         MOV     DPL,R0
   \   00004A   8983         MOV     DPH,R1
   \   00004C   A3           INC     DPTR
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   FC           MOV     R4,A
   \   00004F   7D00         MOV     R5,#0x0
   \   000051   E4           CLR     A
   \   000052   CC           XCH     A,R4
   \   000053   FD           MOV     R5,A
   \   000054   EE           MOV     A,R6
   \   000055   2C           ADD     A,R4
   \   000056   FC           MOV     R4,A
   \   000057   EF           MOV     A,R7
   \   000058   3D           ADDC    A,R5
   \   000059   FD           MOV     R5,A
    660          
    661              // frame type
    662              frameType = (uint8)((nwk_fc >> NWK_FC_FRAME_TYPE) & NWK_FC_FRAME_TYPE_MASK);
   \   00005A   EC           MOV     A,R4
   \   00005B   5403         ANL     A,#0x3
   \   00005D   FC           MOV     R4,A
    663          
    664              // check if incoming frame is of the right type
    665              if ( frameType != STUB_NWK_FRAME_TYPE )
   \   00005E   7403         MOV     A,#0x3
   \   000060   6C           XRL     A,R4
   \   000061   6004         JZ      ??StubAPS_ZMacCallback_3
    666              {
    667                // message doesn't belong to Stub APS
    668                return ( FALSE );
   \   000063   7900         MOV     R1,#0x0
   \   000065   8024         SJMP    ??StubAPS_ZMacCallback_4
    669              }
    670          
    671              // get the APS frame control
    672              aps_fc = buf[STUB_APS_HDR_FRAME_CTRL];
   \                     ??StubAPS_ZMacCallback_3:
   \   000067   8882         MOV     DPL,R0
   \   000069   8983         MOV     DPH,R1
   \   00006B   A3           INC     DPTR
   \   00006C   A3           INC     DPTR
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   F8           MOV     R0,A
    673          
    674              // frame type
    675              frameType = aps_fc & APS_FRAME_TYPE_MASK;
   \   00006F   7403         MOV     A,#0x3
   \   000071   58           ANL     A,R0
   \   000072   FC           MOV     R4,A
    676          
    677              // check if incoming frame is of the right type
    678              if ( frameType != STUB_APS_FRAME )
   \   000073   7403         MOV     A,#0x3
   \   000075   6C           XRL     A,R4
   \   000076   6004         JZ      ??StubAPS_ZMacCallback_5
    679              {
    680                // message doesn't belong to Stub APS
    681                return ( FALSE );
   \   000078   7900         MOV     R1,#0x0
   \   00007A   800F         SJMP    ??StubAPS_ZMacCallback_4
    682              }
    683          
    684              // message belongs to Stub APS
    685              osal_msg_send( StubAPS_TaskID, (uint8 *)msgPtr );
   \                     ??StubAPS_ZMacCallback_5:
   \   00007C                ; Setup parameters for call to function osal_msg_send
   \   00007C   90....       MOV     DPTR,#StubAPS_TaskID
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   F9           MOV     R1,A
   \   000081   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   000084   E9           MOV     A,R1
    686          
    687              return ( TRUE );
   \   000085   7901         MOV     R1,#0x1
   \   000087   8002         SJMP    ??StubAPS_ZMacCallback_4
    688            }
    689          
    690            // message doesn't belong to Stub APS
    691            return ( FALSE );
   \                     ??StubAPS_ZMacCallback_2:
   \   000089   7900         MOV     R1,#0x0
   \                     ??StubAPS_ZMacCallback_4:
   \   00008B   7F01         MOV     R7,#0x1
   \   00008D   02....       LJMP    ?BANKED_LEAVE_XDATA
    692          
    693          } /* StubAPS_ZMacCallback */
    694          
    695          /******************************************************************************
    696           *
    697           *  Stub APS Inter-PAN interface INTERP and its callbacks.
    698           */
    699          
    700          /******************************************************************************
    701           * @fn          INTERP_DataReq
    702           *
    703           * @brief       This function requests the transfer of data from the next
    704           *              higher layer to a single peer entity.
    705           *
    706           * @param       req - APSDE_DataReq_t
    707           *
    708           * @return      ZStatus_t
    709           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    710          ZStatus_t INTERP_DataReq( APSDE_DataReq_t *req )
   \                     INTERP_DataReq:
    711          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 36
   \   000005   74DC         MOV     A,#-0x24
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V2,R2
   \   00000C   8B..         MOV     ?V3,R3
    712            uint8 apsFrmCtrl;
    713            uint16 groupID = 0;
   \   00000E   7401         MOV     A,#0x1
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   7400         MOV     A,#0x0
   \   000015   F0           MOVX    @DPTR,A
   \   000016   A3           INC     DPTR
   \   000017   7400         MOV     A,#0x0
   \   000019   F0           MOVX    @DPTR,A
    714            uint8 *buf;
    715            uint8 hdrLen;
    716            ZMacDataReq_t dataReq;
    717            ZStatus_t status;
    718          
    719            if ( channelChangeInProgress || !StubAPS_InterPan( req->dstPanId, req->dstEP ) )
   \   00001A   90....       MOV     DPTR,#channelChangeInProgress
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   7028         JNZ     ??INTERP_DataReq_0
   \   000020                ; Setup parameters for call to function StubAPS_InterPan
   \   000020   85..82       MOV     DPL,?V2
   \   000023   85..83       MOV     DPH,?V3
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F9           MOV     R1,A
   \   000032   E5..         MOV     A,?V2
   \   000034   240B         ADD     A,#0xb
   \   000036   F582         MOV     DPL,A
   \   000038   E4           CLR     A
   \   000039   35..         ADDC    A,?V3
   \   00003B   F583         MOV     DPH,A
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   FA           MOV     R2,A
   \   00003F   A3           INC     DPTR
   \   000040   E0           MOVX    A,@DPTR
   \   000041   FB           MOV     R3,A
   \   000042   12....       LCALL   `??StubAPS_InterPan::?relay`; Banked call to: StubAPS_InterPan
   \   000045   E9           MOV     A,R1
   \   000046   7005         JNZ     ??INTERP_DataReq_1
    720              return ( ZFailure );
   \                     ??INTERP_DataReq_0:
   \   000048   7901         MOV     R1,#0x1
   \   00004A   02....       LJMP    ??INTERP_DataReq_2 & 0xFFFF
    721          
    722            osal_memset( &dataReq, 0, sizeof( ZMacDataReq_t ) );
   \                     ??INTERP_DataReq_1:
   \   00004D                ; Setup parameters for call to function osal_memset
   \   00004D   7C21         MOV     R4,#0x21
   \   00004F   7D00         MOV     R5,#0x0
   \   000051   7900         MOV     R1,#0x0
   \   000053   7403         MOV     A,#0x3
   \   000055   12....       LCALL   ?XSTACK_DISP101_8
   \   000058   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    723          
    724            // Build Stub APS header
    725            status = StubAPS_BuildFrameControl( &apsFrmCtrl, &(dataReq.DstAddr), &groupID, req );
   \   00005B                ; Setup parameters for call to function StubAPS_BuildFrameControl
   \   00005B   78..         MOV     R0,#?V2
   \   00005D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000060   7403         MOV     A,#0x3
   \   000062   12....       LCALL   ?XSTACK_DISP100_8
   \   000065   88..         MOV     ?V0,R0
   \   000067   89..         MOV     ?V1,R1
   \   000069   78..         MOV     R0,#?V0
   \   00006B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006E   7407         MOV     A,#0x7
   \   000070   12....       LCALL   ?XSTACK_DISP102_8
   \   000073   7404         MOV     A,#0x4
   \   000075   12....       LCALL   ?XSTACK_DISP101_8
   \   000078   12....       LCALL   `??StubAPS_BuildFrameControl::?relay`; Banked call to: StubAPS_BuildFrameControl
   \   00007B   7404         MOV     A,#0x4
   \   00007D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000080   E9           MOV     A,R1
   \   000081   F5..         MOV     ?V0,A
    726            if ( status != ZSuccess )
   \   000083   E5..         MOV     A,?V0
   \   000085   6005         JZ      ??INTERP_DataReq_3
    727              return ( status );
   \   000087   A9..         MOV     R1,?V0
   \   000089   02....       LJMP    ??INTERP_DataReq_2 & 0xFFFF
    728          
    729            // set default Stub APS header length
    730            hdrLen = APS_FRAME_CTRL_FIELD_LEN;
   \                     ??INTERP_DataReq_3:
   \   00008C   7801         MOV     R0,#0x1
    731          
    732            // add group ID length
    733            if ( ( apsFrmCtrl & APS_DELIVERYMODE_MASK ) == APS_FC_DM_GROUP )
   \   00008E   85..82       MOV     DPL,?XSP + 0
   \   000091   85..83       MOV     DPH,?XSP + 1
   \   000094   E0           MOVX    A,@DPTR
   \   000095   540C         ANL     A,#0xc
   \   000097   640C         XRL     A,#0xc
   \   000099   7004         JNZ     ??INTERP_DataReq_4
    734              hdrLen += APS_GROUP_ID_FIELD_LEN;
   \   00009B   7402         MOV     A,#0x2
   \   00009D   28           ADD     A,R0
   \   00009E   F8           MOV     R0,A
    735          
    736            // add cluster ID length
    737            hdrLen += APS_CLUSTERID_FIELD_LEN;
   \                     ??INTERP_DataReq_4:
   \   00009F   7402         MOV     A,#0x2
   \   0000A1   28           ADD     A,R0
   \   0000A2   F8           MOV     R0,A
    738          
    739            // add profile ID length
    740            hdrLen += APS_PROFILEID_FIELD_LEN;
   \   0000A3   7402         MOV     A,#0x2
   \   0000A5   28           ADD     A,R0
   \   0000A6   F8           MOV     R0,A
    741          
    742            // add default Stub NWK header length
    743            hdrLen += STUB_NWK_HDR_LEN;
   \   0000A7   7402         MOV     A,#0x2
   \   0000A9   28           ADD     A,R0
   \   0000AA   F8           MOV     R0,A
    744          
    745            // calculate MSDU length
    746            dataReq.msduLength = hdrLen + req->asduLen;
   \   0000AB   E5..         MOV     A,?V2
   \   0000AD   2411         ADD     A,#0x11
   \   0000AF   F582         MOV     DPL,A
   \   0000B1   E4           CLR     A
   \   0000B2   35..         ADDC    A,?V3
   \   0000B4   F583         MOV     DPH,A
   \   0000B6   E0           MOVX    A,@DPTR
   \   0000B7   FA           MOV     R2,A
   \   0000B8   A3           INC     DPTR
   \   0000B9   E0           MOVX    A,@DPTR
   \   0000BA   FB           MOV     R3,A
   \   0000BB   EA           MOV     A,R2
   \   0000BC   28           ADD     A,R0
   \   0000BD   C0E0         PUSH    A
   \   0000BF   7421         MOV     A,#0x21
   \   0000C1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C4   D0E0         POP     A
   \   0000C6   F0           MOVX    @DPTR,A
    747          
    748            // allocate buffer
    749            buf = osal_mem_alloc( dataReq.msduLength );
   \   0000C7                ; Setup parameters for call to function osal_mem_alloc
   \   0000C7   7421         MOV     A,#0x21
   \   0000C9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CC   E0           MOVX    A,@DPTR
   \   0000CD   FA           MOV     R2,A
   \   0000CE   7B00         MOV     R3,#0x0
   \   0000D0   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000D3   8A..         MOV     ?V0,R2
   \   0000D5   8B..         MOV     ?V1,R3
   \   0000D7   AE..         MOV     R6,?V0
   \   0000D9   AF..         MOV     R7,?V1
    750            if ( buf != NULL )
   \   0000DB   EE           MOV     A,R6
   \   0000DC   4F           ORL     A,R7
   \   0000DD   7003         JNZ     $+5
   \   0000DF   02....       LJMP    ??INTERP_DataReq_5 & 0xFFFF
    751            {
    752              dataReq.msdu = buf;
   \   0000E2   7422         MOV     A,#0x22
   \   0000E4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E7   EE           MOV     A,R6
   \   0000E8   F0           MOVX    @DPTR,A
   \   0000E9   A3           INC     DPTR
   \   0000EA   EF           MOV     A,R7
   \   0000EB   F0           MOVX    @DPTR,A
    753          
    754              // Add Stub APS header and data
    755              StubAPS_BuildMsg( &buf[STUB_APS_HDR_FRAME_CTRL], apsFrmCtrl, groupID, req );
   \   0000EC                ; Setup parameters for call to function StubAPS_BuildMsg
   \   0000EC   78..         MOV     R0,#?V2
   \   0000EE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F1   7403         MOV     A,#0x3
   \   0000F3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F6   E0           MOVX    A,@DPTR
   \   0000F7   FC           MOV     R4,A
   \   0000F8   A3           INC     DPTR
   \   0000F9   E0           MOVX    A,@DPTR
   \   0000FA   FD           MOV     R5,A
   \   0000FB   7402         MOV     A,#0x2
   \   0000FD   12....       LCALL   ?XSTACK_DISP0_8
   \   000100   E0           MOVX    A,@DPTR
   \   000101   F9           MOV     R1,A
   \   000102   EE           MOV     A,R6
   \   000103   2402         ADD     A,#0x2
   \   000105   FA           MOV     R2,A
   \   000106   E4           CLR     A
   \   000107   3F           ADDC    A,R7
   \   000108   FB           MOV     R3,A
   \   000109   12....       LCALL   `??StubAPS_BuildMsg::?relay`; Banked call to: StubAPS_BuildMsg
   \   00010C   7402         MOV     A,#0x2
   \   00010E   12....       LCALL   ?DEALLOC_XSTACK8
    756          
    757              // Add Stub NWK header
    758              StubNWK_BuildMsg( buf );
   \   000111                ; Setup parameters for call to function StubNWK_BuildMsg
   \   000111   EE           MOV     A,R6
   \   000112   FA           MOV     R2,A
   \   000113   EF           MOV     A,R7
   \   000114   FB           MOV     R3,A
   \   000115   12....       LCALL   `??StubNWK_BuildMsg::?relay`; Banked call to: StubNWK_BuildMsg
    759          
    760              // Set ZMac data request
    761              dataReq.DstPANId = req->dstPanId;
   \   000118   E5..         MOV     A,?V2
   \   00011A   240B         ADD     A,#0xb
   \   00011C   F582         MOV     DPL,A
   \   00011E   E4           CLR     A
   \   00011F   35..         ADDC    A,?V3
   \   000121   F583         MOV     DPH,A
   \   000123   E0           MOVX    A,@DPTR
   \   000124   F8           MOV     R0,A
   \   000125   A3           INC     DPTR
   \   000126   E0           MOVX    A,@DPTR
   \   000127   F9           MOV     R1,A
   \   000128   740C         MOV     A,#0xc
   \   00012A   12....       LCALL   ?XSTACK_DISP0_8
   \   00012D   E8           MOV     A,R0
   \   00012E   F0           MOVX    @DPTR,A
   \   00012F   A3           INC     DPTR
   \   000130   E9           MOV     A,R1
   \   000131   F0           MOVX    @DPTR,A
    762              dataReq.SrcAddrMode = Addr64Bit;
   \   000132   740E         MOV     A,#0xe
   \   000134   12....       LCALL   ?XSTACK_DISP0_8
   \   000137   7403         MOV     A,#0x3
   \   000139   F0           MOVX    @DPTR,A
    763              dataReq.Handle = req->transID;
   \   00013A   E5..         MOV     A,?V2
   \   00013C   2417         ADD     A,#0x17
   \   00013E   F582         MOV     DPL,A
   \   000140   E4           CLR     A
   \   000141   35..         ADDC    A,?V3
   \   000143   F583         MOV     DPH,A
   \   000145   E0           MOVX    A,@DPTR
   \   000146   C0E0         PUSH    A
   \   000148   740F         MOV     A,#0xf
   \   00014A   12....       LCALL   ?XSTACK_DISP0_8
   \   00014D   D0E0         POP     A
   \   00014F   F0           MOVX    @DPTR,A
    764          
    765              if ( ( apsFrmCtrl & APS_DELIVERYMODE_MASK ) == APS_FC_DM_UNICAST )
   \   000150   85..82       MOV     DPL,?XSP + 0
   \   000153   85..83       MOV     DPH,?XSP + 1
   \   000156   E0           MOVX    A,@DPTR
   \   000157   540C         ANL     A,#0xc
   \   000159   700E         JNZ     ??INTERP_DataReq_6
    766                dataReq.TxOptions = NWK_TXOPTIONS_ACK;
   \   00015B   7410         MOV     A,#0x10
   \   00015D   12....       LCALL   ?XSTACK_DISP0_8
   \   000160   7401         MOV     A,#0x1
   \   000162   F0           MOVX    @DPTR,A
   \   000163   A3           INC     DPTR
   \   000164   7400         MOV     A,#0x0
   \   000166   F0           MOVX    @DPTR,A
   \   000167   800C         SJMP    ??INTERP_DataReq_7
    767              else
    768                dataReq.TxOptions = 0;
   \                     ??INTERP_DataReq_6:
   \   000169   7410         MOV     A,#0x10
   \   00016B   12....       LCALL   ?XSTACK_DISP0_8
   \   00016E   7400         MOV     A,#0x0
   \   000170   F0           MOVX    @DPTR,A
   \   000171   A3           INC     DPTR
   \   000172   7400         MOV     A,#0x0
   \   000174   F0           MOVX    @DPTR,A
    769          
    770              // send the frame
    771              status = ZMacDataReq( &dataReq );
   \                     ??INTERP_DataReq_7:
   \   000175                ; Setup parameters for call to function ZMacDataReq
   \   000175   7403         MOV     A,#0x3
   \   000177   12....       LCALL   ?XSTACK_DISP101_8
   \   00017A   12....       LCALL   `??ZMacDataReq::?relay`; Banked call to: ZMacDataReq
   \   00017D   E9           MOV     A,R1
   \   00017E   F5..         MOV     ?V0,A
    772          
    773              // free the frame
    774              osal_mem_free( buf );
   \   000180                ; Setup parameters for call to function osal_mem_free
   \   000180   EE           MOV     A,R6
   \   000181   FA           MOV     R2,A
   \   000182   EF           MOV     A,R7
   \   000183   FB           MOV     R3,A
   \   000184   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000187   8003         SJMP    ??INTERP_DataReq_8
    775            }
    776            else
    777            {
    778              // flag a memory error
    779              status = ZMemError;
   \                     ??INTERP_DataReq_5:
   \   000189   75..10       MOV     ?V0,#0x10
    780            }
    781          
    782            return ( status );
   \                     ??INTERP_DataReq_8:
   \   00018C   A9..         MOV     R1,?V0
   \                     ??INTERP_DataReq_2:
   \   00018E   7424         MOV     A,#0x24
   \   000190   12....       LCALL   ?DEALLOC_XSTACK8
   \   000193   7F04         MOV     R7,#0x4
   \   000195   02....       LJMP    ?BANKED_LEAVE_XDATA
    783          
    784          } /* INTERP_DataReq */
    785          
    786          /******************************************************************************
    787           * @fn          INTERP_DataReqMTU
    788           *
    789           * @brief       This function requests the MTU (Max Transport Unit) of the
    790           *              Inter-PAN Data Service.
    791           *
    792           * @param       none
    793           *
    794           * @return      uint8 - MTU
    795           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    796          uint8 INTERP_DataReqMTU( void )
   \                     INTERP_DataReqMTU:
    797          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    798            uint8 mtu;
    799            uint8 hdrLen;
    800          
    801            // Use maximum header size for Stub APS header
    802            hdrLen = APS_FRAME_CTRL_FIELD_LEN +
    803                     APS_GROUP_ID_FIELD_LEN   +
    804                     APS_CLUSTERID_FIELD_LEN  +
    805                     APS_PROFILEID_FIELD_LEN;
   \   000000   7807         MOV     R0,#0x7
    806          
    807            mtu = MAC_A_MAX_FRAME_SIZE - STUB_NWK_HDR_LEN - hdrLen;
   \   000002   7464         MOV     A,#0x64
   \   000004   C3           CLR     C
   \   000005   98           SUBB    A,R0
   \   000006   F9           MOV     R1,A
    808          
    809            return ( mtu );
   \   000007   02....       LJMP    ?BRET
    810          
    811          } /* INTERP_DataReqMTU */
    812          
    813          /****************************************************************************
    814           * @fn          INTERP_DataConfirm
    815           *
    816           * @brief       This function processes the data confirm from the MAC layer.
    817           *
    818           * @param       dataCnf - data confirm primitive
    819           *
    820           * @return      none
    821           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    822          void INTERP_DataConfirm( ZMacDataCnf_t *dataCnf )
   \                     INTERP_DataConfirm:
    823          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   EA           MOV     A,R2
   \   000005   F8           MOV     R0,A
   \   000006   EB           MOV     A,R3
   \   000007   F9           MOV     R1,A
    824            afDataConfirm( appEndPoint, dataCnf->msduHandle, dataCnf->hdr.Status );
   \   000008                ; Setup parameters for call to function afDataConfirm
   \   000008   8882         MOV     DPL,R0
   \   00000A   8983         MOV     DPH,R1
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   FB           MOV     R3,A
   \   00000F   8882         MOV     DPL,R0
   \   000011   8983         MOV     DPH,R1
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   FA           MOV     R2,A
   \   000017   90....       MOV     DPTR,#appEndPoint
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F9           MOV     R1,A
   \   00001C   12....       LCALL   `??afDataConfirm::?relay`; Banked call to: afDataConfirm
    825          
    826          } /* INTERP_DataConfirm */
   \   00001F   D083         POP     DPH
   \   000021   D082         POP     DPL
   \   000023   02....       LJMP    ?BRET
    827          
    828          /****************************************************************************
    829           * @fn          INTERP_DataIndication
    830           *
    831           * @brief       This function indicates the transfer of a data SPDU (MSDU)
    832           *              from the MAC layer to the local application layer entity.
    833           *
    834           * @param       dataInd - data indicate primitive
    835           *
    836           * @return      none
    837           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    838          void INTERP_DataIndication( macMcpsDataInd_t *dataInd )
   \                     INTERP_DataIndication:
    839          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 68
   \   000005   74BC         MOV     A,#-0x44
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    840            NLDE_FrameFormat_t snff;
    841            aps_FrameFormat_t saff;
    842            zAddrType_t srcAddr;
    843            NLDE_Signal_t sig;
    844          
    845            // parse the Stub NWK header
    846            StubNWK_ParseMsg( dataInd->msdu.p, dataInd->msdu.len, &snff );
   \   00000E                ; Setup parameters for call to function StubNWK_ParseMsg
   \   00000E   741A         MOV     A,#0x1a
   \   000010   12....       LCALL   ?XSTACK_DISP102_8
   \   000013   8E82         MOV     DPL,R6
   \   000015   8F83         MOV     DPH,R7
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F9           MOV     R1,A
   \   00001D   8E82         MOV     DPL,R6
   \   00001F   8F83         MOV     DPH,R7
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   E0           MOVX    A,@DPTR
   \   000024   FA           MOV     R2,A
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   FB           MOV     R3,A
   \   000028   12....       LCALL   `??StubNWK_ParseMsg::?relay`; Banked call to: StubNWK_ParseMsg
    847          
    848            // Fill in MAC destination address
    849            snff.macDstAddr = dataInd->mac.dstAddr.addr.shortAddr;
   \   00002B   EE           MOV     A,R6
   \   00002C   241C         ADD     A,#0x1c
   \   00002E   F582         MOV     DPL,A
   \   000030   E4           CLR     A
   \   000031   3F           ADDC    A,R7
   \   000032   F583         MOV     DPH,A
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F8           MOV     R0,A
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   F9           MOV     R1,A
   \   000039   7427         MOV     A,#0x27
   \   00003B   12....       LCALL   ?XSTACK_DISP0_8
   \   00003E   E8           MOV     A,R0
   \   00003F   F0           MOVX    @DPTR,A
   \   000040   A3           INC     DPTR
   \   000041   E9           MOV     A,R1
   \   000042   F0           MOVX    @DPTR,A
    850          
    851            // fill in MAC source address (Stub NWK frame doesn't have address fields)
    852            osal_copyAddress( &srcAddr, (zAddrType_t *)&(dataInd->mac.srcAddr) );
   \   000043                ; Setup parameters for call to function sAddrCpy
   \   000043   EE           MOV     A,R6
   \   000044   2413         ADD     A,#0x13
   \   000046   FC           MOV     R4,A
   \   000047   E4           CLR     A
   \   000048   3F           ADDC    A,R7
   \   000049   FD           MOV     R5,A
   \   00004A   743B         MOV     A,#0x3b
   \   00004C   12....       LCALL   ?XSTACK_DISP101_8
   \   00004F   12....       LCALL   `??sAddrCpy::?relay` ; Banked call to: sAddrCpy
    853          
    854            // check if incoming frame is of the right type
    855            if ( snff.frameType != STUB_NWK_FRAME_TYPE )
   \   000052   741C         MOV     A,#0x1c
   \   000054   12....       LCALL   ?XSTACK_DISP0_8
   \   000057   E0           MOVX    A,@DPTR
   \   000058   6403         XRL     A,#0x3
   \   00005A   6003         JZ      $+5
   \   00005C   02....       LJMP    ??INTERP_DataIndication_0 & 0xFFFF
    856              return;
    857          
    858            // check if incoming frame is of the right version
    859            if ( snff.protocolVersion != NLME_GetProtocolVersion() )
   \   00005F                ; Setup parameters for call to function NLME_GetProtocolVersion
   \   00005F   12....       LCALL   `??NLME_GetProtocolVersion::?relay`; Banked call to: NLME_GetProtocolVersion
   \   000062   E9           MOV     A,R1
   \   000063   F8           MOV     R0,A
   \   000064   741D         MOV     A,#0x1d
   \   000066   12....       LCALL   ?XSTACK_DISP0_8
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   68           XRL     A,R0
   \   00006B   6003         JZ      $+5
   \   00006D   02....       LJMP    ??INTERP_DataIndication_0 & 0xFFFF
    860              return;
    861          
    862            // check if the remaining sun-fields are zero
    863            if ( ( snff.discoverRoute != 0 ) || ( snff.multicast != 0 )   ||
    864                 ( snff.secure != 0 )        || ( snff.srcRouteSet != 0 ) ||
    865                 ( snff.dstExtAddrSet != 0 ) || ( snff.srcExtAddrSet != 0 ) )
   \   000070   741E         MOV     A,#0x1e
   \   000072   12....       LCALL   ?XSTACK_DISP0_8
   \   000075   E0           MOVX    A,@DPTR
   \   000076   7028         JNZ     ??INTERP_DataIndication_1
   \   000078   741F         MOV     A,#0x1f
   \   00007A   12....       LCALL   ?XSTACK_DISP0_8
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   7020         JNZ     ??INTERP_DataIndication_1
   \   000080   7420         MOV     A,#0x20
   \   000082   12....       LCALL   ?XSTACK_DISP0_8
   \   000085   E0           MOVX    A,@DPTR
   \   000086   7018         JNZ     ??INTERP_DataIndication_1
   \   000088   7432         MOV     A,#0x32
   \   00008A   12....       LCALL   ?XSTACK_DISP0_8
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   7010         JNZ     ??INTERP_DataIndication_1
   \   000090   7421         MOV     A,#0x21
   \   000092   12....       LCALL   ?XSTACK_DISP0_8
   \   000095   E0           MOVX    A,@DPTR
   \   000096   7008         JNZ     ??INTERP_DataIndication_1
   \   000098   7422         MOV     A,#0x22
   \   00009A   12....       LCALL   ?XSTACK_DISP0_8
   \   00009D   E0           MOVX    A,@DPTR
   \   00009E   6003         JZ      ??INTERP_DataIndication_2
    866            {
    867              return;
   \                     ??INTERP_DataIndication_1:
   \   0000A0   02....       LJMP    ??INTERP_DataIndication_0 & 0xFFFF
    868            }
    869          
    870            // parse the Stub APS header
    871            StubAPS_ParseMsg( &snff, &saff );
   \                     ??INTERP_DataIndication_2:
   \   0000A3                ; Setup parameters for call to function StubAPS_ParseMsg
   \   0000A3   7403         MOV     A,#0x3
   \   0000A5   12....       LCALL   ?XSTACK_DISP102_8
   \   0000A8   741A         MOV     A,#0x1a
   \   0000AA   12....       LCALL   ?XSTACK_DISP101_8
   \   0000AD   12....       LCALL   `??StubAPS_ParseMsg::?relay`; Banked call to: StubAPS_ParseMsg
    872          
    873            // check if incoming frame is of the right type
    874            if ( ( saff.FrmCtrl & APS_FRAME_TYPE_MASK ) != STUB_APS_FRAME )
   \   0000B0   7403         MOV     A,#0x3
   \   0000B2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B5   E0           MOVX    A,@DPTR
   \   0000B6   5403         ANL     A,#0x3
   \   0000B8   6403         XRL     A,#0x3
   \   0000BA   6003         JZ      $+5
   \   0000BC   02....       LJMP    ??INTERP_DataIndication_0 & 0xFFFF
    875              return;
    876          
    877            // check if delivery mode is of the right type
    878            if ( ( saff.FrmCtrl & APS_DELIVERYMODE_MASK ) == APS_FC_DM_INDIRECT )
   \   0000BF   7403         MOV     A,#0x3
   \   0000C1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   540C         ANL     A,#0xc
   \   0000C7   6404         XRL     A,#0x4
   \   0000C9   7003         JNZ     $+5
   \   0000CB   02....       LJMP    ??INTERP_DataIndication_0 & 0xFFFF
    879              return;
    880          
    881            // check if incoming frame is unsecured
    882            if ( saff.FrmCtrl & APS_FC_SECURITY )
   \   0000CE   7403         MOV     A,#0x3
   \   0000D0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D3   E0           MOVX    A,@DPTR
   \   0000D4   A2E5         MOV     C,0xE0 /* A   */.5
   \   0000D6   5003         JNC     $+5
   \   0000D8   02....       LJMP    ??INTERP_DataIndication_0 & 0xFFFF
    883              return;
    884          
    885            // check if there's no extended header
    886            if ( saff.FrmCtrl & APS_FC_EXTENDED )
   \   0000DB   7403         MOV     A,#0x3
   \   0000DD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   A2E7         MOV     C,0xE0 /* A   */.7
   \   0000E3   5003         JNC     $+5
   \   0000E5   02....       LJMP    ??INTERP_DataIndication_0 & 0xFFFF
    887                return;
    888          
    889            // Set the endpoints
    890            saff.DstEndPoint = appEndPoint;
   \   0000E8   90....       MOV     DPTR,#appEndPoint
   \   0000EB   E0           MOVX    A,@DPTR
   \   0000EC   C0E0         PUSH    A
   \   0000EE   7405         MOV     A,#0x5
   \   0000F0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F3   D0E0         POP     A
   \   0000F5   F0           MOVX    @DPTR,A
    891            saff.SrcEndPoint = STUBAPS_INTER_PAN_EP;
   \   0000F6   7406         MOV     A,#0x6
   \   0000F8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FB   74FE         MOV     A,#-0x2
   \   0000FD   F0           MOVX    @DPTR,A
    892          
    893            // Set the signal strength information
    894            sig.LinkQuality = dataInd->mac.mpduLinkQuality;
   \   0000FE   EE           MOV     A,R6
   \   0000FF   242F         ADD     A,#0x2f
   \   000101   F582         MOV     DPL,A
   \   000103   E4           CLR     A
   \   000104   3F           ADDC    A,R7
   \   000105   F583         MOV     DPH,A
   \   000107   E0           MOVX    A,@DPTR
   \   000108   C0E0         PUSH    A
   \   00010A   85..82       MOV     DPL,?XSP + 0
   \   00010D   85..83       MOV     DPH,?XSP + 1
   \   000110   D0E0         POP     A
   \   000112   F0           MOVX    @DPTR,A
    895            sig.correlation = dataInd->mac.correlation;
   \   000113   EE           MOV     A,R6
   \   000114   2430         ADD     A,#0x30
   \   000116   F582         MOV     DPL,A
   \   000118   E4           CLR     A
   \   000119   3F           ADDC    A,R7
   \   00011A   F583         MOV     DPH,A
   \   00011C   E0           MOVX    A,@DPTR
   \   00011D   C0E0         PUSH    A
   \   00011F   7401         MOV     A,#0x1
   \   000121   12....       LCALL   ?XSTACK_DISP0_8
   \   000124   D0E0         POP     A
   \   000126   F0           MOVX    @DPTR,A
    896            sig.rssi = dataInd->mac.rssi;
   \   000127   EE           MOV     A,R6
   \   000128   2431         ADD     A,#0x31
   \   00012A   F582         MOV     DPL,A
   \   00012C   E4           CLR     A
   \   00012D   3F           ADDC    A,R7
   \   00012E   F583         MOV     DPH,A
   \   000130   E0           MOVX    A,@DPTR
   \   000131   C0E0         PUSH    A
   \   000133   7402         MOV     A,#0x2
   \   000135   12....       LCALL   ?XSTACK_DISP0_8
   \   000138   D0E0         POP     A
   \   00013A   F0           MOVX    @DPTR,A
    897          
    898            APSDE_DataIndication( &saff, &srcAddr, dataInd->mac.srcPanId,
    899                                  &sig, snff.broadcastId, FALSE, dataInd->mac.timestamp, 0 );
   \   00013B                ; Setup parameters for call to function APSDE_DataIndication
   \   00013B   75..00       MOV     ?V0,#0x0
   \   00013E   78..         MOV     R0,#?V0
   \   000140   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000143   EE           MOV     A,R6
   \   000144   2425         ADD     A,#0x25
   \   000146   F582         MOV     DPL,A
   \   000148   E4           CLR     A
   \   000149   3F           ADDC    A,R7
   \   00014A   F583         MOV     DPH,A
   \   00014C   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00014F   75..00       MOV     ?V0,#0x0
   \   000152   78..         MOV     R0,#?V0
   \   000154   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000157   7406         MOV     A,#0x6
   \   000159   12....       LCALL   ?XSTACK_DISP100_8
   \   00015C   88..         MOV     ?V0,R0
   \   00015E   89..         MOV     ?V1,R1
   \   000160   78..         MOV     R0,#?V0
   \   000162   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000165   EE           MOV     A,R6
   \   000166   242B         ADD     A,#0x2b
   \   000168   F582         MOV     DPL,A
   \   00016A   E4           CLR     A
   \   00016B   3F           ADDC    A,R7
   \   00016C   F583         MOV     DPH,A
   \   00016E   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000171   7436         MOV     A,#0x36
   \   000173   12....       LCALL   ?XSTACK_DISP0_8
   \   000176   E0           MOVX    A,@DPTR
   \   000177   F9           MOV     R1,A
   \   000178   7445         MOV     A,#0x45
   \   00017A   12....       LCALL   ?XSTACK_DISP102_8
   \   00017D   740D         MOV     A,#0xd
   \   00017F   12....       LCALL   ?XSTACK_DISP101_8
   \   000182   12....       LCALL   `??APSDE_DataIndication::?relay`; Banked call to: APSDE_DataIndication
   \   000185   740A         MOV     A,#0xa
   \   000187   12....       LCALL   ?DEALLOC_XSTACK8
    900          
    901          } /* INTERP_DataIndication */
   \                     ??INTERP_DataIndication_0:
   \   00018A   7444         MOV     A,#0x44
   \   00018C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00018F   7F02         MOV     R7,#0x2
   \   000191   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for StubAPS_TaskID>`:
   \   000000   FF           DB 255

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for appTaskID>`:
   \   000000   FF           DB 255

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_64:
   \   000000   64000000     DD 100

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??StubAPS_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    StubAPS_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??StubAPS_ProcessEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    StubAPS_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??StubNWK_ParseMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    StubNWK_ParseMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??StubAPS_ParseMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    StubAPS_ParseMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??StubAPS_BuildFrameControl::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    StubAPS_BuildFrameControl

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??StubNWK_BuildMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    StubNWK_BuildMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??StubAPS_BuildMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    StubAPS_BuildMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??StubAPS_SetNewChannel::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    StubAPS_SetNewChannel

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??StubAPS_NotifyApp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    StubAPS_NotifyApp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??StubAPS_SetInterPanChannel::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    StubAPS_SetInterPanChannel

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??StubAPS_SetIntraPanChannel::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    StubAPS_SetIntraPanChannel

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??StubAPS_InterPan::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    StubAPS_InterPan

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??StubAPS_RegisterApp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    StubAPS_RegisterApp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??StubAPS_ZMacCallback::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    StubAPS_ZMacCallback

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??INTERP_DataReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    INTERP_DataReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??INTERP_DataReqMTU::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    INTERP_DataReqMTU

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??INTERP_DataConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    INTERP_DataConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??INTERP_DataIndication::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    INTERP_DataIndication
    902          
    903          
    904          /*********************************************************************
    905          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2     13   INTERP_DataConfirm
        2      0   -> afDataConfirm
      1    101   INTERP_DataIndication
        0     88   -> APSDE_DataIndication
        0     78   -> NLME_GetProtocolVersion
        0     78   -> StubAPS_ParseMsg
        0     78   -> StubNWK_ParseMsg
        0     78   -> sAddrCpy
      1     52   INTERP_DataReq
        0     52   -> StubAPS_BuildFrameControl
        0     50   -> StubAPS_BuildMsg
        0     48   -> StubAPS_InterPan
        0     48   -> StubNWK_BuildMsg
        0     48   -> ZMacDataReq
        0     48   -> osal_mem_alloc
        0     48   -> osal_mem_free
        0     48   -> osal_memset
      0      0   INTERP_DataReqMTU
      1     61   StubAPS_BuildFrameControl
        0      9   -> sAddrExtCpy
      1     64   StubAPS_BuildMsg
        0     14   -> osal_memcpy
      2      0   StubAPS_Init
      0     48   StubAPS_InterPan
      1     23   StubAPS_NotifyApp
        0     10   -> osal_msg_allocate
        0     10   -> osal_msg_send
      1     88   StubAPS_ParseMsg
        0     10   -> osal_memset
      0     13   StubAPS_ProcessEvent
        0     13   -> INTERP_DataConfirm
        0     13   -> INTERP_DataIndication
        0     13   -> StubAPS_NotifyApp
        0     13   -> StubAPS_SetNewChannel
        0     13   -> ZMacSetReq
        0     13   -> nwk_setStateIdle
        0     13   -> osal_msg_deallocate
        0     13   -> osal_msg_receive
      2      0   StubAPS_RegisterApp
      0     15   StubAPS_SetInterPanChannel
        0     11   -> StubAPS_SetNewChannel
        0     11   -> ZMacGetReq
        0     11   -> ZMacSetReq
        0     11   -> nwk_setStateIdle
        0     15   -> osal_start_timerEx
      2      2   StubAPS_SetIntraPanChannel
        2      2   -> ZMacGetReq
        2      2   -> ZMacSetReq
        2      2   -> nwk_setStateIdle
      3     15   StubAPS_SetNewChannel
        2      2   -> ZMacSetReq
        2      2   -> ZMacStateIdle
        2      2   -> nwkDB_CountTypes
      0      9   StubAPS_ZMacCallback
        0      9   -> osal_msg_send
      1     60   StubNWK_BuildMsg
        0     12   -> NLME_GetProtocolVersion
      1     89   StubNWK_ParseMsg
        0     11   -> NLDE_ParseFrameControl
        0     11   -> osal_memset


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for StubAPS_TaskID>
       1  ?<Initializer for appTaskID>
      38  INTERP_DataConfirm
       6  INTERP_DataConfirm::?relay
     404  INTERP_DataIndication
       6  INTERP_DataIndication::?relay
     408  INTERP_DataReq
       6  INTERP_DataReq::?relay
      10  INTERP_DataReqMTU
       6  INTERP_DataReqMTU::?relay
     385  StubAPS_BuildFrameControl
       6  StubAPS_BuildFrameControl::?relay
     273  StubAPS_BuildMsg
       6  StubAPS_BuildMsg::?relay
      26  StubAPS_Init
       6  StubAPS_Init::?relay
      16  StubAPS_InterPan
       6  StubAPS_InterPan::?relay
      58  StubAPS_NotifyApp
       6  StubAPS_NotifyApp::?relay
     421  StubAPS_ParseMsg
       6  StubAPS_ParseMsg::?relay
     184  StubAPS_ProcessEvent
       6  StubAPS_ProcessEvent::?relay
      38  StubAPS_RegisterApp
       6  StubAPS_RegisterApp::?relay
     129  StubAPS_SetInterPanChannel
       6  StubAPS_SetInterPanChannel::?relay
     127  StubAPS_SetIntraPanChannel
       6  StubAPS_SetIntraPanChannel::?relay
      88  StubAPS_SetNewChannel
       6  StubAPS_SetNewChannel::?relay
       1  StubAPS_TaskID
     144  StubAPS_ZMacCallback
       6  StubAPS_ZMacCallback::?relay
     105  StubNWK_BuildMsg
       6  StubNWK_BuildMsg::?relay
     149  StubNWK_ParseMsg
       6  StubNWK_ParseMsg::?relay
       4  __Constant_64
       1  appEndPoint
       1  appTaskID
       1  channelChangeInProgress
       1  newChannel

 
 3 003 bytes in segment BANKED_CODE
   108 bytes in segment BANK_RELAYS
     2 bytes in segment XDATA_I
     2 bytes in segment XDATA_ID
     4 bytes in segment XDATA_ROM_C
     3 bytes in segment XDATA_Z
 
 3 113 bytes of CODE  memory
     0 bytes of CONST memory (+ 4 bytes shared)
     5 bytes of XDATA memory

Errors: none
Warnings: none
